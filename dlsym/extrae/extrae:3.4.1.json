{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/config.h.in": "/* config.h.in.  Generated from configure.ac by autoheader.  */\n\n/* Define if architecture is ALPHA */\n#undef ARCH_ALPHA\n\n/* Define if architecture is ARM */\n#undef ARCH_ARM\n\n/* Define if architecture is ARM64/AARCH64 */\n#undef ARCH_ARM64\n\n/* Define if architecture is IA32 */\n#undef ARCH_IA32\n\n/* Define if architecture is IA32 (with 64bit extensions) */\n#undef ARCH_IA32_x64\n\n/* Define if architecture is IA64 */\n#undef ARCH_IA64\n\n/* Define if architecture is MIPS */\n#undef ARCH_MIPS\n\n/* Define if architecture is PPC */\n#undef ARCH_PPC\n\n/* Define if architecture is SPARC64 */\n#undef ARCH_SPARC64\n\n/* Determine if BFD must generate information for data objects in binary */\n#undef BFD_MANAGER_GENERATE_ADDRESSES\n\n/* Define to 1 if libbfd/libiberty need -ldl to link */\n#undef BFD_NEEDS_LDL\n\n/* Determine if CUDA instrumentation must NOT rely on CUPTI */\n#undef CUDA_WITHOUT_CUPTI_INSTRUMENTATION\n\n/* Determine if CUDA instrumentation must rely on CUPTI */\n#undef CUDA_WITH_CUPTI_INSTRUMENTATION\n\n/* Determine if Davids tweaks must be applied */\n#undef DCARRERA_HADOOP\n\n/* Define to the RT lib for DynInst */\n#undef DYNINST_RT_LIB\n\n/* Define if PEBS sampling must be used */\n#undef ENABLE_PEBS_SAMPLING\n\n/* Define to dummy `main' function (if any) required to link to the Fortran\n   libraries. */\n#undef FC_DUMMY_MAIN\n\n/* Define if F77 and FC dummy `main' functions are identical. */\n#undef FC_DUMMY_MAIN_EQ_F77\n\n/* Define to a macro mangling the given C identifier (in lower and upper\n   case), which must not contain underscores, for linking with Fortran. */\n#undef FC_FUNC\n\n/* As FC_FUNC, but for C identifiers containing underscores. */\n#undef FC_FUNC_\n\n/* Define if have access */\n#undef HAVE_ACCESS\n\n/* Define this if aliases may be created with __attribute__ */\n#undef HAVE_ALIAS_ATTRIBUTE\n\n/* Define to 1 if you have the <arch/powerpc/include/asm/atomic.h> header\n   file. */\n#undef HAVE_ARCH_POWERPC_INCLUDE_ASM_ATOMIC_H\n\n/* Define to 1 if you have the <asm-ppc64/atomic.h> header file. */\n#undef HAVE_ASM_PPC64_ATOMIC_H\n\n/* Define to 1 if you have the <asm-ppc/atomic.h> header file. */\n#undef HAVE_ASM_PPC_ATOMIC_H\n\n/* Define to 1 if you have the <assert.h> header file. */\n#undef HAVE_ASSERT_H\n\n/* Define to 1 if BFD is installed in the system */\n#undef HAVE_BFD\n\n/* Defined to 1 if bfd.h contains bfd_demangle */\n#undef HAVE_BFD_DEMANGLE\n\n/* Defined to 1 if bfd.h defines bfd_get_section_size */\n#undef HAVE_BFD_GET_SECTION_SIZE\n\n/* Defined to 1 if bfd.h defines bfd_get_section_size_before_reloc */\n#undef HAVE_BFD_GET_SECTION_SIZE_BEFORE_RELOC\n\n/* Define to 1 if you have the <bfd.h> header file. */\n#undef HAVE_BFD_H\n\n/* Define to 1 if you have the <bgl_perfctr_events.h> header file. */\n#undef HAVE_BGL_PERFCTR_EVENTS_H\n\n/* Define to 1 if you have the <bgl_perfctr.h> header file. */\n#undef HAVE_BGL_PERFCTR_H\n\n/* Define to 1 if you have the <BPatch.h> header file. */\n#undef HAVE_BPATCH_H\n\n/* Define to 1 if you have the <byteswap.h> header file. */\n#undef HAVE_BYTESWAP_H\n\n/* Define to 1 if the system has the type `char'. */\n#undef HAVE_CHAR\n\n/* Define to 1 if CLUSTERING is installed in the system */\n#undef HAVE_CLUSTERING\n\n/* Use hardware_intr in PAPI_component_info_t field */\n#undef HAVE_COMPONENT_HARDWARE_INTR\n\n/* Define to 1 if you have the <ctype.h> header file. */\n#undef HAVE_CTYPE_H\n\n/* Define to 1 if you have the <dirent.h> header file. */\n#undef HAVE_DIRENT_H\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define to 1 if DYNINST is installed in the system */\n#undef HAVE_DYNINST\n\n/* Define to 1 if you have the <errno.h> header file. */\n#undef HAVE_ERRNO_H\n\n/* Define to 1 if you have the <excpt.h> header file. */\n#undef HAVE_EXCPT_H\n\n/* Define to 1 if you have the <execinfo.h> header file. */\n#undef HAVE_EXECINFO_H\n\n/* Define to 1 if you have the <fcntl.h> header file. */\n#undef HAVE_FCNTL_H\n\n/* Define if have fgetpos64 */\n#undef HAVE_FGETPOS64\n\n/* Define to 1 if you have the <firmware/include/personality.h> header file.\n   */\n#undef HAVE_FIRMWARE_INCLUDE_PERSONALITY_H\n\n/* Define if have fopen64 */\n#undef HAVE_FOPEN64\n\n/* Define if have fseek64 */\n#undef HAVE_FSEEK64\n\n/* Define if have fseeko64 */\n#undef HAVE_FSEEKO64\n\n/* Define if have fsetpos64 */\n#undef HAVE_FSETPOS64\n\n/* Define if have ftell64 */\n#undef HAVE_FTELL64\n\n/* Define if have ftello64 */\n#undef HAVE_FTELLO64\n\n/* Define to 1 if you have the <getopt.h> header file. */\n#undef HAVE_GETOPT_H\n\n/* Define to 1 if you have the <gm.h> header file. */\n#undef HAVE_GM_H\n\n/* Use hardware_intr_sig field */\n#undef HAVE_HARDWARE_INTR_SIG\n\n/* Define this if inotify is supported */\n#undef HAVE_INOTIFY\n\n/* Define to 1 if the system has the type `int16_t'. */\n#undef HAVE_INT16_T\n\n/* Define to 1 if the system has the type `int32_t'. */\n#undef HAVE_INT32_T\n\n/* Define to 1 if the system has the type `int64_t'. */\n#undef HAVE_INT64_T\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define to 1 if you have the <libgen.h> header file. */\n#undef HAVE_LIBGEN_H\n\n/* Define to 1 if you have the <libspe2.h> header file. */\n#undef HAVE_LIBSPE2_H\n\n/* Define to 1 if you have the <libspe.h> header file. */\n#undef HAVE_LIBSPE_H\n\n/* Define to 1 if you have <libunwind.h> header file */\n#undef HAVE_LIBUNWIND_H\n\n/* Define to 1 if you have the <limits.h> header file. */\n#undef HAVE_LIMITS_H\n\n/* Define to 1 if you have the <linux/limits.h> header file. */\n#undef HAVE_LINUX_LIMITS_H\n\n/* Define to 1 if you have the <linux/mmtimer.h> header file. */\n#undef HAVE_LINUX_MMTIMER_H\n\n/* Define to 1 if the system has the type `long'. */\n#undef HAVE_LONG\n\n/* Define to 1 if the system has the type `long long'. */\n#undef HAVE_LONG_LONG\n\n/* Whether the system supports mallinfo structure */\n#undef HAVE_MALLINFO\n\n/* Define to 1 if you have the <malloc.h> header file. */\n#undef HAVE_MALLOC_H\n\n/* Define to 1 if you have the <math.h> header file. */\n#undef HAVE_MATH_H\n\n/* Define to 1 if MEMKIND is installed in the system */\n#undef HAVE_MEMKIND\n\n/* Define to 1 if you have the <memkind.h> header file. */\n#undef HAVE_MEMKIND_H\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Defined if this machine has a MMTimer device and it is readable */\n#undef HAVE_MMTIMER_DEVICE\n\n/* Determine if MPI in installed */\n#undef HAVE_MPI\n\n/* Define to 1 if you have the <mpi.h> header file. */\n#undef HAVE_MPI_H\n\n/* Define to 1 if you have the <mx_dispersion.h> header file. */\n#undef HAVE_MX_DISPERSION_H\n\n/* Define to 1 if you have the <myriexpress.h> header file. */\n#undef HAVE_MYRIEXPRESS_H\n\n/* Define to 1 if you have the <netdb.h> header file. */\n#undef HAVE_NETDB_H\n\n/* Define to 1 if you have the <netinet/in.h> header file. */\n#undef HAVE_NETINET_IN_H\n\n/* Define to 1 if the system has the type `off_t'. */\n#undef HAVE_OFF_T\n\n/* Define if OpenMP is enabled */\n#undef HAVE_OPENMP\n\n/* Define to 1 if you have the <papi.h> header file. */\n#undef HAVE_PAPI_H\n\n/* Define to 1 if you have the <pdsc.h> header file. */\n#undef HAVE_PDSC_H\n\n/* Define to 1 if the system has the type `pid_t'. */\n#undef HAVE_PID_T\n\n/* Define to 1 if you have the <pmapi.h> header file. */\n#undef HAVE_PMAPI_H\n\n/* Define to 1 the OS has /proc/cpuinfo */\n#undef HAVE_PROC_CPUINFO\n\n/* Define if have /proc/self/maps */\n#undef HAVE_PROC_MAPS\n\n/* Define to 1 the OS has /proc/meminfo */\n#undef HAVE_PROC_MEMINFO\n\n/* Determine if pthread_barrier_wait exists and can be instrumented */\n#undef HAVE_PTHREAD_BARRIER_WAIT\n\n/* Define if you have POSIX threads libraries and header files. */\n#undef HAVE_PTHREAD_H\n\n/* Define to 1 if you have the <rts.h> header file. */\n#undef HAVE_RTS_H\n\n/* Define if have sched_getcpu */\n#undef HAVE_SCHED_GETCPU\n\n/* Define to 1 if you have the <sched.h> header file. */\n#undef HAVE_SCHED_H\n\n/* Define to 1 if you have the <semaphore.h> header file. */\n#undef HAVE_SEMAPHORE_H\n\n/* Define to 1 if you have <shmem.h> header file */\n#undef HAVE_SHMEM_H\n\n/* Define to 1 if the system has the type `short'. */\n#undef HAVE_SHORT\n\n/* Define to 1 if you have the <signal.h> header file. */\n#undef HAVE_SIGNAL_H\n\n/* Define to 1 if SIONlib is installed in the system */\n#undef HAVE_SIONLIB\n\n/* Define to 1 if you have the <sion.h> header file. */\n#undef HAVE_SION_H\n\n/* Define to 1 if the system has the type `size_t'. */\n#undef HAVE_SIZE_T\n\n/* Define to 1 if SPECTRAL ANALYSIS is installed in the system */\n#undef HAVE_SPECTRAL\n\n/* Define to 1 if you have the <spi/include/kernel/location.h> header file. */\n#undef HAVE_SPI_INCLUDE_KERNEL_LOCATION_H\n\n/* Define to 1 if you have the <spi/include/kernel/process.h> header file. */\n#undef HAVE_SPI_INCLUDE_KERNEL_PROCESS_H\n\n/* Define to 1 if the system has the type `ssize_t'. */\n#undef HAVE_SSIZE_T\n\n/* Define if have stat */\n#undef HAVE_STAT\n\n/* Define if have stat64 */\n#undef HAVE_STAT64\n\n/* Define to 1 if you have the <stdarg.h> header file. */\n#undef HAVE_STDARG_H\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdio.h> header file. */\n#undef HAVE_STDIO_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Use supports_hw_overflow field */\n#undef HAVE_SUPPORT_HW_OVERFLOW\n\n/* Define if have sysconf */\n#undef HAVE_SYSCONF\n\n/* Define to 1 if you have the <sys/endian.h> header file. */\n#undef HAVE_SYS_ENDIAN_H\n\n/* Define to 1 if you have the <sys/file.h> header file. */\n#undef HAVE_SYS_FILE_H\n\n/* Define to 1 if you have the <sys/ioctl.h> header file. */\n#undef HAVE_SYS_IOCTL_H\n\n/* Define to 1 if you have the <sys/mman.h> header file. */\n#undef HAVE_SYS_MMAN_H\n\n/* Define to 1 if you have the <sys/procfs.h> header file. */\n#undef HAVE_SYS_PROCFS_H\n\n/* Define to 1 if you have the <sys/resource.h> header file. */\n#undef HAVE_SYS_RESOURCE_H\n\n/* Define to 1 if you have the <sys/socket.h> header file. */\n#undef HAVE_SYS_SOCKET_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/sysctl.h> header file. */\n#undef HAVE_SYS_SYSCTL_H\n\n/* Define to 1 if you have the <sys/systeminfo.h> header file. */\n#undef HAVE_SYS_SYSTEMINFO_H\n\n/* Define to 1 if you have the <sys/time.h> header file. */\n#undef HAVE_SYS_TIME_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <sys/uio.h> header file. */\n#undef HAVE_SYS_UIO_H\n\n/* Define to 1 if you have the <sys/utsname.h> header file. */\n#undef HAVE_SYS_UTSNAME_H\n\n/* Define to 1 if you have the <sys/wait.h> header file. */\n#undef HAVE_SYS_WAIT_H\n\n/* Define to 1 if you have the <time.h> header file. */\n#undef HAVE_TIME_H\n\n/* Define to 1 if you have the <ucontext.h> header file. */\n#undef HAVE_UCONTEXT_H\n\n/* Define to 1 if the system has the type `uint16_t'. */\n#undef HAVE_UINT16_T\n\n/* Define to 1 if the system has the type `uint32_t'. */\n#undef HAVE_UINT32_T\n\n/* Define to 1 if the system has the type `uint64_t'. */\n#undef HAVE_UINT64_T\n\n/* Define to 1 if the system has the type `uint8_t'. */\n#undef HAVE_UINT8_T\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define this if variables/functions can be marked as unused */\n#undef HAVE_UNUSED_ATTRIBUTE\n\n/* Define to 1 if you have the <values.h> header file. */\n#undef HAVE_VALUES_H\n\n/* Define this if weak aliases may be created with __attribute__ */\n#undef HAVE_WEAK_ALIAS_ATTRIBUTE\n\n/* Defined if libxml2 exists */\n#undef HAVE_XML2\n\n/* Zlib available */\n#undef HAVE_ZLIB\n\n/* Define to 1 if __FUNCTION__ macro is supported */\n#undef HAVE__FUNCTION__\n\n/* Define if __sync_fetch_and_add is available */\n#undef HAVE__SYNC_FETCH_AND_ADD\n\n/* Determine if the heterogeneous support is enabled */\n#undef HETEROGENEOUS_SUPPORT\n\n/* Determine whether dynamic memory calls are meant to be instrumented */\n#undef INSTRUMENT_DYNAMIC_MEMORY\n\n/* Determine whether read/write are meant to be instrumented */\n#undef INSTRUMENT_IO\n\n/* Defined if this machine is a SGI Altix */\n#undef IS_ALTIX\n\n/* Defined if this machine is a BG/L machine */\n#undef IS_BGL_MACHINE\n\n/* Defined if this machine is a BG/P machine */\n#undef IS_BGP_MACHINE\n\n/* Defined if this machine is a BG/Q machine */\n#undef IS_BGQ_MACHINE\n\n/* Defined if this machine is a BG machine */\n#undef IS_BG_MACHINE\n\n/* Define to 1 if architecture is big endian */\n#undef IS_BIG_ENDIAN\n\n/* Define to 1 if architecture is little endian */\n#undef IS_LITTLE_ENDIAN\n\n/* Define to the sub-directory in which libtool stores uninstalled libraries.\n   */\n#undef LT_OBJDIR\n\n/* Define if we are using a MPI3 implementation */\n#undef MPI3\n\n/* Defined if a single MPI library contains both C and Fortran symbols */\n#undef MPI_COMBINED_C_FORTRAN\n\n/* Defined if MPI C library contains Fortran mpi_init symbol */\n#undef MPI_C_CONTAINS_FORTRAN_MPI_INIT\n\n/* Defined if MPI library supports MPI_Init_thread / C */\n#undef MPI_HAS_INIT_THREAD_C\n\n/* Defined if MPI library supports MPI_Init_thread / Fortran */\n#undef MPI_HAS_INIT_THREAD_F\n\n/* Does the MPI_F_STATUS_IGNORE exist in the given MPI implementation? */\n#undef MPI_HAS_MPI_F_STATUS_IGNORE\n\n/* Offset of the SOURCE field in MPI_Status in sizeof-int terms */\n#undef MPI_SOURCE_OFFSET\n\n/* Defined if MPI library supports 1-sided operations */\n#undef MPI_SUPPORTS_MPI_1SIDED\n\n/* Defined if MPI library supports MPI_Comm_spawn */\n#undef MPI_SUPPORTS_MPI_COMM_SPAWN\n\n/* Defined if MPI library supports I/O operations */\n#undef MPI_SUPPORTS_MPI_IO\n\n/* Offset of the TAG field in MPI_Status in sizeof-int terms */\n#undef MPI_TAG_OFFSET\n\n/* Define to 1 if system requires __errno_location and does not provide it */\n#undef NEED_ERRNO_LOCATION_PATCH\n\n/* Enable HWC support */\n#undef NEW_HWC_SYSTEM\n\n/* Define to 1 if your C compiler doesn't accept -c and -o together. */\n#undef NO_MINUS_C_MINUS_O\n\n/* Define if OpenMP is instrumented through OMPT */\n#undef OMPT_INSTRUMENTATION\n\n/* Define if operating system is AIX */\n#undef OS_AIX\n\n/* Define if operating system is Android */\n#undef OS_ANDROID\n\n/* Define if operating system is Darwin */\n#undef OS_DARWIN\n\n/* Define if operating system is DEC */\n#undef OS_DEC\n\n/* Define if operating system is FreeBSD */\n#undef OS_FREEBSD\n\n/* Define if operating system is IRIX */\n#undef OS_IRIX\n\n/* Define if operating system is Linux */\n#undef OS_LINUX\n\n/* Define if operating system is Solaris */\n#undef OS_SOLARIS\n\n/* Name of package */\n#undef PACKAGE\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* PAPI is used as API to gain access to CPU hwc */\n#undef PAPI_COUNTERS\n\n/* Enable PAPI sampling support */\n#undef PAPI_SAMPLING_SUPPORT\n\n/* Determine if the PerUse API can be used */\n#undef PERUSE_ENABLED\n\n/* PMAPI is used as API to gain access to CPU hwc */\n#undef PMAPI_COUNTERS\n\n/* Defined if name decoration scheme is of type pmpi_routine__ */\n#undef PMPI_DOUBLE_UNDERSCORE\n\n/* Defined if name decoration scheme is of type pmpi_routine */\n#undef PMPI_NO_UNDERSCORES\n\n/* Defined if name decoration scheme is of type pmpi_routine_ */\n#undef PMPI_SINGLE_UNDERSCORE\n\n/* Defined if name decoration scheme is of type pmpi_routine_f */\n#undef PMPI_UNDERSCORE_F_SUFFIX\n\n/* Defined if name decoration scheme is of type PMPI_ROUTINE */\n#undef PMPI_UPPERCASE\n\n/* Define to necessary symbol if this constant uses a non-standard name on\n   your system. */\n#undef PTHREAD_CREATE_JOINABLE\n\n/* Enable Sampling */\n#undef SAMPLING_SUPPORT\n\n/* The size of `char', as computed by sizeof. */\n#undef SIZEOF_CHAR\n\n/* The size of `int', as computed by sizeof. */\n#undef SIZEOF_INT\n\n/* The size of `long', as computed by sizeof. */\n#undef SIZEOF_LONG\n\n/* The size of `long long', as computed by sizeof. */\n#undef SIZEOF_LONG_LONG\n\n/* Size of the MPI_Status structure in \"sizeof-int\" terms */\n#undef SIZEOF_MPI_STATUS\n\n/* The size of `off_t', as computed by sizeof. */\n#undef SIZEOF_OFF_T\n\n/* The size of `pid_t', as computed by sizeof. */\n#undef SIZEOF_PID_T\n\n/* The size of `short', as computed by sizeof. */\n#undef SIZEOF_SHORT\n\n/* The size of `size_t', as computed by sizeof. */\n#undef SIZEOF_SIZE_T\n\n/* The size of `ssize_t', as computed by sizeof. */\n#undef SIZEOF_SSIZE_T\n\n/* The size of `void*', as computed by sizeof. */\n#undef SIZEOF_VOIDP\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Unwinding support enabled for IA64/x86-64 */\n#undef UNWIND_SUPPORT\n\n/* Defined if using gettimeofday clock routine */\n#undef USE_GETTIMEOFDAY_CLOCK\n\n/* Disable HWC support */\n#undef USE_HARDWARE_COUNTERS\n\n/* Defined if using posix clock routines / clock_gettime */\n#undef USE_POSIX_CLOCK\n\n/* Version number of package */\n#undef VERSION\n\n/* OpenSHMEM required */\n#undef WANT_OPENSHMEM\n\n/* Use dlsym instead of PMPI */\n#undef WITH_PMPI_HOOK\n\n/* Define the bits for the off_t structure */\n#undef _FILE_OFFSET_BITS\n\n/* Define to `__inline__' or `__inline' if that's what the C compiler\n   calls it, or to nothing if 'inline' is not supported under any name.  */\n#ifndef __cplusplus\n#undef inline\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/config/mpi-macros.m4": "# AX_PROG_MPI\n# -----------\nAC_DEFUN([AX_PROG_MPI],\n[\n   AX_FLAGS_SAVE()\n\n   AC_ARG_WITH(mpi-lib-name,\n      AC_HELP_STRING(\n         [--with-mpi-lib-name@<:@=library name@:>@],\n         [specify the name of the MPI library (i.e. mpi, mpich, mpi_mt...)]\n      ),\n      [mpi_lib_name=${withval}],\n      [mpi_lib_name=\"not_set\"]\n   )\n\n   AC_ARG_WITH(mpi,\n      AC_HELP_STRING(\n         [--with-mpi@<:@=DIR@:>@],\n         [specify where to find MPI libraries and includes]\n      ),\n      [mpi_paths=${withval}],\n      [mpi_paths=\"not_set\"]\n   )\n\n   if test \"${mpi_paths}\" = \"not_set\" ; then\n      AC_MSG_ERROR([Attention! You have not passed the location of the MPI library through --with-mpi option. Please, use --with-mpi to specify the location of the MPI installation on your system, or if you don't want that Extrae supports MPI instrumentation use --without-mpi instead.])\n   fi\n\n   if test \"${mpi_paths}\" != \"no\"; then\n      if test -z \"${mpi_paths}\" ; then\n         AC_MSG_ERROR([Attention! You have passed an invalid MPI location.])\n      fi\n      if test ! -d ${mpi_paths} ; then\n         AC_MSG_ERROR([Attention! You have passed an invalid MPI location.])\n      fi\n   fi\n\n   dnl Search for MPI installation\n   AX_FIND_INSTALLATION([MPI], [$mpi_paths], [mpi])\n\n   if test \"${MPI_INSTALLED}\" = \"yes\" ; then\n\n      if test -d \"${MPI_INCLUDES}/mpi\" ; then\n         MPI_INCLUDES=\"${MPI_INCLUDES}/mpi\"\n         MPI_CFLAGS=\"-I${MPI_INCLUDES}\"\n         CPPFLAGS=\"${MPI_CFLAGS} ${CPPFLAGS}\"\n      fi\n\n      dnl This check is for POE over linux -- libraries are installed in /opt/ibmhpc/ppe.poe/lib/libmpi{64}/libmpi_ibm.so\n      if test -d \"${MPI_LIBSDIR}/libmpi${BITS}\" ; then\n         if test -f \"${MPI_LIBSDIR}/libmpi${BITS}/libmpi_ibm.so\" ; then\n            MPI_LIBSDIR=${MPI_LIBSDIR}/libmpi${BITS}\n         fi\n      elif test -d \"${MPI_LIBSDIR}/libmpi\" ; then\n         if test -f \"${MPI_LIBSDIR}/libmpi/libmpi_ibm.so\" ; then\n            MPI_LIBSDIR=${MPI_LIBSDIR}/libmpi\n         fi\n      fi\n\n      dnl Check for the MPI header files.\n      AC_CHECK_HEADERS([mpi.h], [], [MPI_INSTALLED=\"no\"])\n\n      if test ${MPI_INSTALLED} = \"no\" ; then\n         AC_MSG_ERROR([Cannot find mpi.h file in the MPI specified path])\n      fi\n\n      dnl In MN, MPICH2 requires special libraries when building mpimpi2prv\n      AX_CHECK_DEFINED([mpi.h], [MPICH2], [MPI_IS_MPICH2=\"yes\"], [MPI_IS_MPICH2=\"no\"])\n\n      dnl This is no longer needed in MN3\n      dnl if test \"${MPI_IS_MPICH2}\" = \"yes\" -a  \"${IS_MN_MACHINE}\" = \"yes\" ; then\n      dnl   MPIMPI2PRV_EXTRA_LIBS=\"-lpmi\"\n      dnl  AC_SUBST(MPIMPI2PRV_EXTRA_LIBS)\n      dnl fi\n\n      dnl Check for the MPI library.\n      dnl We won't use neither AC_CHECK_LIB nor AC_TRY_LINK because this library may have unresolved references to other libs (i.e: libgm).\n      AC_MSG_CHECKING([for MPI library])\n\n\t\tif test -f \"${MPI_LIBSDIR_MULTIARCH}/libmpi.a\" -o \\\n                -f \"${MPI_LIBSDIR_MULTIARCH}/libmpi.so\" ; then\n\t\t\tMPI_LIBSDIR=\"${MPI_LIBSDIR_MULTIARCH}\"\n\t\tfi\n\t\t\n      if test \"${mpi_lib_name}\" != \"not_set\"; then\n         MPI_LIBS=\"-l${mpi_lib_name}\"\n      else\n         if test -f \"${MPI_LIBSDIR}/libmpi.a\" ; then\n            if test \"${OperatingSystem}\" = \"aix\" -a \"${BITS}\" = \"64\" ; then\n               MPI_LIBS=\"-lmpi_r\"\n            else\n               MPI_LIBS=\"-lmpi\"\n            fi\n         elif test -f \"${MPI_LIBSDIR}/libmpi.so\" ; then\n            MPI_LIBS=\"-lmpi\"\n         elif test -f \"${MPI_LIBSDIR}/libmpich-gcc.legacy.a\"; then\n            MPI_LIBS=\"-lmpich-gcc.legacy\"\n         elif test -f \"${MPI_LIBSDIR}/libmpich-xl.legacy.a\"; then\n            MPI_LIBS=\"-lmpich-xl.legacy\"\n         elif test -f \"${MPI_LIBSDIR}/libmpich_intel.so\"; then\n            MPI_LIBS=\"-lmpich_intel\"\n         elif test -f \"${MPI_LIBSDIR}/libmpich.a\" -o -f \"${MPI_LIBSDIR}/libmpich.so\" -o -f \"${MPI_LIBSDIR}/shared/libmpich.so\" ; then\n            MPI_LIBS=\"-lmpich\"\n         elif test -f \"${MPI_LIBSDIR}/libmpi_ibm.so\" ; then\n            MPI_LIBS=\"-lmpi_ibm\"\n         dnl Specific for BG/P machine\n         elif test -f \"${MPI_LIBSDIR}/libmpich.cnk.a\" ; then\n            MPI_LIBS=\"-lmpich.cnk\"\n         else\n            MPI_LIBS=\"not found\"\n         fi\n      fi\n      AC_MSG_RESULT([${MPI_LIBSDIR}, ${MPI_LIBS}])\n\n      if test \"${MPI_LIBS}\" = \"not found\" ; then\n         AC_MSG_ERROR([Cannot find MPI libraries file in the MPI specified path])\n      fi\n\n      AC_MSG_CHECKING([for shared MPI library])\n      if test -f \"${MPI_LIBSDIR}/libmpi.so\" -o -f \"${MPI_LIBSDIR}/libmpich.so\" -o \\\n         -f \"${MPI_LIBSDIR}/shared/libmpi.so\" -o -f \"${MPI_LIBSDIR}/shared/libmpich.so\" -o \\\n         -f \"${MPI_LIBSDIR}/libmpi_ibm.so\" -o -f \"${MPI_LIBSDIR}/libmpich.cnk.so\" -o \\\n         -f \"${MPI_LIBSDIR}/libmpich_intel.so\" -o \\\n         -f \"${MPI_LIBSDIR}/libmpich-gcc.legacy.so\" -o -f \"${MPI_LIBSDIR}/libmpich-xl.legacy.so\"; then\n         MPI_SHARED_LIB_FOUND=\"yes\"\n      else\n         MPI_SHARED_LIB_FOUND=\"not found\"\n      fi\n      AC_MSG_RESULT([${MPI_SHARED_LIB_FOUND}])\n\n      if test \"${MPI_LIBSDIR}\" = \"not found\" ; then\n         MPI_INSTALLED=\"no\"\n      else\n         MPI_LDFLAGS=\"${MPI_LDFLAGS}\"\n         AC_SUBST(MPI_LDFLAGS)\n         AC_SUBST(MPI_LIBS)\n      fi\n\n      AC_MSG_CHECKING([for fortran MPI library])\n      if test -f \"${MPI_LIBSDIR}/libmpi_f77.a\" -o -f \"${MPI_LIBSDIR}/libmpi_f77.so\" -o -f \"${MPI_LIBSDIR}/shared/libmpi_f77.so\" ; then\n         MPI_F_LIB_FOUND=\"yes\"\n         MPI_F_LIB=\"-lmpi_f77\"\n      elif test -f \"${MPI_LIBSDIR}/libfmpich.a\" -o -f \"${MPI_LIBSDIR}/libfmpich.so\" -o -f \"${MPI_LIBSDIR}/shared/libfmpich.so\"; then\n         MPI_F_LIB_FOUND=\"yes\"\n         MPI_F_LIB=\"-lfmpich\"\n      elif test -f \"${MPI_LIBSDIR}/libmpif.a\" -o -f \"${MPI_LIBSDIR}/libmpif.so\" -o -f \"${MPI_LIBSDIR}/shared/libmpif.so\"; then\n         MPI_F_LIB_FOUND=\"yes\"\n         MPI_F_LIB=\"-lmpif\"\n      elif test -f \"${MPI_LIBSDIR}/libmpifort.a\" -o -f \"${MPI_LIBSDIR}/libmpifort.so\" -o -f \"${MPI_LIBSDIR}/shared/libmpifort.so\"; then\n         MPI_F_LIB_FOUND=\"yes\"\n         MPI_F_LIB=\"-lmpifort\"\n      elif test -f \"${MPI_LIBSDIR}/libmpichf77-gcc.legacy.a\" ; then\n         MPI_F_LIB_FOUND=\"yes\"\n         MPI_F_LIB=\"-lmpif77-gcc.legacy\"\n      elif test -f \"${MPI_LIBSDIR}/libmpichf77-xl.legacy.a\" ; then\n         MPI_F_LIB_FOUND=\"yes\"\n         MPI_F_LIB=\"-lmpif77-xl.legacy\"\n      else\n         MPI_F_LIB_FOUND=\"not found\"\n         MPI_F_LIB=\"\"\n      fi\n      AC_MSG_RESULT([${MPI_F_LIB_FOUND}, ${MPI_F_LIB}])\n      AC_SUBST(MPI_F_LIB)\n\n      if test \"${MPI_LIBSDIR}\" = \"not found\" ; then\n         MPI_INSTALLED=\"no\"\n      else\n         MPI_LDFLAGS=\"${MPI_LDFLAGS}\"\n         AC_SUBST(MPI_LDFLAGS)\n         AC_SUBST(MPI_LIBS)\n      fi\n\n      dnl If $MPICC is not set, check for mpicc under $MPI_HOME/bin. We don't want to mix multiple MPI installations.\n      AC_MSG_CHECKING([for MPI C compiler])\n      if test \"${MPICC}\" != \"\" ; then\n         IFS=' ' read -ra MPICC_parts <<< \"${MPICC}\"\n         if test -x ${MPICC_parts[0]} ; then\n            MPICC_COMPILER=${MPICC}\n            AC_MSG_RESULT([${MPICC_COMPILER}])\n         else\n            AC_MSG_ERROR([Cannot find MPI C compiler ${MPICC}])\n         fi\n      else\n         mpicc_compilers=\"mpicc mpiicc hcc mpxlc_r mpxlc mpcc mpcc_r cmpicc mpifccpx\"\n         for mpicc in [$mpicc_compilers]; do\n            if test -x \"${MPI_HOME}/bin${BITS}/${mpicc}\" ; then\n               MPICC_COMPILER=\"${MPI_HOME}/bin${BITS}/${mpicc}\"\n               AC_MSG_RESULT([${MPICC_COMPILER}])\n               break\n            elif test -x \"${MPI_HOME}/bin/${mpicc}\" ; then\n               MPICC_COMPILER=\"${MPI_HOME}/bin/${mpicc}\"\n               AC_MSG_RESULT([${MPICC_COMPILER}])\n               break\n            fi\n         done\n         if test \"${MPICC_COMPILER}\" = \"\" ; then\n            AC_MSG_ERROR([Cannot find \\${MPI_HOME}/bin/mpicc. You can pass an alternate through MPICC environment variable.])\n         fi\n      fi\n      MPICC=${MPICC_COMPILER}\n   fi\n\n   dnl check for mpif77 under $MPI_HOME/bin\n   AC_MSG_CHECKING([for MPI F77 compiler])\n   if test \"${MPIF77}\" = \"\" ; then\n      mpif77_compilers=\"mpif77 mpxlf_r mpxlf\"\n      for mpif77 in [$mpif77_compilers]; do\n         if test -x \"${MPI_HOME}/bin${BITS}/${mpif77}\" ; then\n            MPIF77=\"${MPI_HOME}/bin${BITS}/${mpif77}\"\n            AC_MSG_RESULT([${MPIF77}])\n            break\n         elif test -x \"${MPI_HOME}/bin/${mpif77}\" ; then\n            MPIF77=\"${MPI_HOME}/bin/${mpif77}\"\n            AC_MSG_RESULT([${MPIF77}])\n            break\n         fi\n      done\n      if test \"${MPIF77}\" = \"\" ; then\n         AC_MSG_RESULT([not found])\n         AC_MSG_NOTICE([Cannot find \\${MPI_HOME}/bin/mpif77 -or similar- using \\${CC} instead])\n         MPIF77_DOES_NOT_EXIST=\"yes\"\n         MPIF77=${CC}\n      else\n         MPIF77_DOES_NOT_EXIST=\"no\"\n      fi\n   else\n      if test -x ${MPIF77} ; then\n         AC_MSG_RESULT([${MPIF77}])\n      else\n         if test -x `which ${MPIF77}` ; then\n         \tAC_MSG_RESULT([${MPIF77}])\n         else\n         \tAC_MSG_ERROR([Cannot find given \\${MPIF77}. Please give the full path for the MPI F77 compiler])\n         fi\n      fi\n   fi\n\n   dnl check for mpif90 under $MPI_HOME/bin\n   AC_MSG_CHECKING([for MPI F90 compiler])\n   if test \"${MPIF90}\" = \"\" ; then\n      mpif90_compilers=\"mpif90 mpxlf_r mpxlf\"\n      for mpif90 in [$mpif90_compilers]; do\n         if test -x \"${MPI_HOME}/bin${BITS}/${mpif90}\" ; then\n            MPIF90=\"${MPI_HOME}/bin${BITS}/${mpif90}\"\n            AC_MSG_RESULT([${MPIF90}])\n            break\n         elif test -x \"${MPI_HOME}/bin/${mpif90}\" ; then\n            MPIF90=\"${MPI_HOME}/bin/${mpif90}\"\n            AC_MSG_RESULT([${MPIF90}])\n            break\n         fi\n      done\n      if test \"${MPIF90}\" = \"\" ; then\n         AC_MSG_RESULT([not found])\n         AC_MSG_NOTICE([Cannot find \\${MPI_HOME}/bin/mpif90 -or similar- using \\${CC} instead])\n         MPIF90_DOES_NOT_EXIST=\"yes\"\n         MPIF90=${CC}\n      else\n         MPIF90_DOES_NOT_EXIST=\"no\"\n      fi\n   else\n      if test -x ${MPIF90} ; then\n         AC_MSG_RESULT([${MPIF90}])\n      else\n         if test -x `which ${MPIF90}` ; then\n         \tAC_MSG_RESULT([${MPIF90}])\n         else\n         \tAC_MSG_ERROR([Cannot find given \\${MPIF90}. Please give the full path for the MPI F90 compiler])\n         fi\n      fi\n   fi\n\n\tdnl check for mpif90 under $MPI_HOME/bin\n\tAC_MSG_CHECKING([for MPI launcher])\n\tMPIRUN=\"\"\n\tfor mpix in [ \"mpirun\" \"mpiexec\" ]; do\n\t\tif test -x \"${MPI_HOME}/bin${BITS}/${mpix}\" ; then\n\t\t\tMPIRUN=\"${MPI_HOME}/bin${BITS}/${mpix}\"\n\t\t\tbreak\n\t\telif test -x \"${MPI_HOME}/bin/${mpix}\" ; then\n\t\t\tMPIRUN=\"${MPI_HOME}/bin/${mpix}\"\n\t\t\tbreak\n\t\tfi\n\tdone\n\tif test \"${MPIRUN}\" != \"\" ; then\n\t\tAC_MSG_RESULT([${MPIRUN}])\n\telse\n\t\tAC_MSG_RESULT([not found! -- It is not needed to compile Extrae but it is necessary to execute regression tests])\n\tfi\n\n   dnl AC_SUBST(MPICC)\n   AC_ARG_VAR([MPICC],[Alternate MPI C compiler - use if the MPI C compiler in the MPI installation should not be used])\n   AC_SUBST(MPIF77)\n   AC_SUBST(MPIF90)\n   AC_SUBST(MPIRUN)\n\n   dnl If the system do not have MPICC (or similar) be sure to add -lmpi and -Impi\n   AM_CONDITIONAL(NEED_MPI_LIB_INCLUDE, test \"${CC}\" = \"${MPICC}\" )\n\n   dnl Did the checks pass?\n   AM_CONDITIONAL(HAVE_MPI, test \"${MPI_INSTALLED}\" = \"yes\")\n\n   dnl If the system has MPI & shared libraries\n   AM_CONDITIONAL(HAVE_MPI_WITH_SHARED_LIBS, test \"${MPI_INSTALLED}\" = \"yes\" -a \"${MPI_SHARED_LIB_FOUND}\" = \"yes\")\n\n   dnl If we have detected the MPI launcher\n   AM_CONDITIONAL(HAVE_MPIRUN, test \"${MPIRUN}\" != \"\")\n\n   if test \"${MPI_INSTALLED}\" = \"yes\" ; then\n      AC_DEFINE([HAVE_MPI], 1, [Determine if MPI in installed])\n   fi\n\n   AX_FLAGS_RESTORE()\n])\n\n# AX_CHECK_MPI3_VERSION\n# ---------------------\nAC_DEFUN([AX_CHECK_MPI3_VERSION],\n[\n   AC_MSG_CHECKING([if given MPI implementation supports MPI3 standard])\n   AX_FLAGS_SAVE()\n   CFLAGS=\"${CFLAGS} -I${MPI_INCLUDES}\"\n   AC_LANG_SAVE()\n   AC_LANG([C])\n   AC_TRY_COMPILE(\n      [#include <mpi.h>],\n      [\n         #if MPI_VERSION >= 3\n            return 1;\n         #else\n             #error \"MPI version different to 3\"\n         #endif\n      ],\n      [mpi3_version=\"yes\"],\n      [mpi3_version=\"no\"]\n   )\n   if test \"${mpi3_version}\" = \"yes\"; then\n       AC_DEFINE([MPI3], [1], [Define if we are using a MPI3 implementation])\n   fi\n   AX_FLAGS_RESTORE()\n   AC_LANG_RESTORE()\n   AC_MSG_RESULT([${mpi3_version}])\n   AX_FLAGS_RESTORE()\n])\n\n\n\n# AX_CHECK_MPI_F_STATUS_IGNORE\n# ---------------------\nAC_DEFUN([AX_CHECK_MPI_F_STATUS_IGNORE],\n[\n   AC_MSG_CHECKING([if MPI_F_STATUS_IGNORE and MPI_F_STATUSES_IGNORE exist])\n   AX_FLAGS_SAVE()\n   CFLAGS=\"${CFLAGS} -I${MPI_INCLUDES}\"\n   AC_LANG_SAVE()\n   AC_LANG([C])\n   AC_TRY_COMPILE(\n      [#include <mpi.h>],\n      [\n         MPI_Status *s1 = MPI_F_STATUS_IGNORE;\n         MPI_Status *s2 = MPI_F_STATUSES_IGNORE;\n         return 0;\n      ],\n      [mpi_f_status_ignore_exists=\"yes\"],\n      [mpi_f_status_ignore_exists=\"no\"]\n   )\n   AX_FLAGS_RESTORE()\n   AC_LANG_RESTORE()\n   AC_MSG_RESULT([${mpi_f_status_ignore_exists}])\n   if test \"${mpi_f_status_ignore_exists}\" = \"yes\"; then\n      AC_DEFINE_UNQUOTED([MPI_HAS_MPI_F_STATUS_IGNORE], 1, [Does the MPI_F_STATUS_IGNORE exist in the given MPI implementation?])\n   fi\n   AX_FLAGS_RESTORE()\n])\n\n# AX_CHECK_MPI_STATUS_SIZE\n# ---------------------\nAC_DEFUN([AX_CHECK_MPI_STATUS_SIZE],\n[\n   AC_MSG_CHECKING([for size of the MPI_Status struct])\n   AX_FLAGS_SAVE()\n   CFLAGS=\"${CFLAGS} -I${MPI_INCLUDES}\"\n\n   if test \"${IS_MIC_MACHINE}\" = \"yes\" ; then\n     SIZEOF_MPI_STATUS=5\n   elif test \"${IS_SPARC64_MACHINE}\" = \"yes\" ; then\n     SIZEOF_MPI_STATUS=5\n   else\n   AC_TRY_RUN(\n      [\n         #include <mpi.h>\n         int main()\n         {\n            return sizeof(MPI_Status)/sizeof(int);\n         }\n      ],\n      [ SIZEOF_MPI_STATUS=\"0\" ],\n      [ SIZEOF_MPI_STATUS=\"$?\"]\n   )\n   fi\n   AC_MSG_RESULT([${SIZEOF_MPI_STATUS}])\n   AC_DEFINE_UNQUOTED([SIZEOF_MPI_STATUS], ${SIZEOF_MPI_STATUS}, [Size of the MPI_Status structure in \"sizeof-int\" terms])\n   AX_FLAGS_RESTORE()\n])\n\n# AX_CHECK_MPI_SOURCE_OFFSET\n#------------------------\nAC_DEFUN([AX_CHECK_MPI_SOURCE_OFFSET],\n[\n   AX_FLAGS_SAVE()\n   CFLAGS=\"${CFLAGS} -I${MPI_INCLUDES}\"\n\n   AC_CHECK_MEMBER(MPI_Status.MPI_SOURCE,,\n                [AC_MSG_ERROR([We need MPI_Status.MPI_SOURCE!])],\n                [#include <mpi.h>])\n\n   AC_MSG_CHECKING([for offset of SOURCE field in MPI_Status])\n   if test \"${IS_MIC_MACHINE}\" = \"yes\" ; then\n     MPI_SOURCE_OFFSET=2\n   elif test \"${IS_SPARC64_MACHINE}\" = \"yes\" ; then\n     MPI_SOURCE_OFFSET=0\n   else\n   AC_TRY_RUN(\n      [\n         #include <mpi.h>\n         int main()\n         {\n            MPI_Status s;\n            long addr1 = (long) &s;\n            long addr2 = (long) &(s.MPI_SOURCE);\n\n            return (addr2 - addr1)/sizeof(int);\n         }\n      ],\n      [ MPI_SOURCE_OFFSET=\"0\" ],\n      [ MPI_SOURCE_OFFSET=\"$?\"]\n   )\n   fi\n   AC_MSG_RESULT([${MPI_SOURCE_OFFSET}])\n   AC_DEFINE_UNQUOTED([MPI_SOURCE_OFFSET], ${MPI_SOURCE_OFFSET}, [Offset of the SOURCE field in MPI_Status in sizeof-int terms])\n   AX_FLAGS_RESTORE()\n])\n\n# AX_CHECK_MPI_TAG_OFFSET\n#------------------------\nAC_DEFUN([AX_CHECK_MPI_TAG_OFFSET],\n[\n   AX_FLAGS_SAVE()\n   CFLAGS=\"${CFLAGS} -I${MPI_INCLUDES}\"\n\n   AC_CHECK_MEMBER(MPI_Status.MPI_TAG,,\n                [AC_MSG_ERROR([We need MPI_Status.MPI_TAG!])],\n                [#include <mpi.h>])\n\n   AC_MSG_CHECKING([for offset of TAG field in MPI_Status])\n   if test \"${IS_MIC_MACHINE}\" = \"yes\" ; then\n     MPI_TAG_OFFSET=3\n   elif test \"${IS_SPARC64_MACHINE}\" = \"yes\" ; then\n     MPI_TAG_OFFSET=1\n   else\n   AC_TRY_RUN(\n      [\n         #include <mpi.h>\n         int main()\n         {\n            MPI_Status s;\n            long addr1 = (long) &s;\n            long addr2 = (long) &(s.MPI_TAG);\n\n            return (addr2 - addr1)/sizeof(int);\n         }\n      ],\n      [ MPI_TAG_OFFSET=\"0\" ],\n      [ MPI_TAG_OFFSET=\"$?\"]\n   )\n   fi\n   AC_MSG_RESULT([${MPI_TAG_OFFSET}])\n   AC_DEFINE_UNQUOTED([MPI_TAG_OFFSET], ${MPI_TAG_OFFSET}, [Offset of the TAG field in MPI_Status in sizeof-int terms])\n   AX_FLAGS_RESTORE()\n])\n\n# AX_CHECK_PMPI_NAME_MANGLING\n# ---------------------------\nAC_DEFUN([AX_CHECK_PMPI_NAME_MANGLING],\n[\n   AC_REQUIRE([AX_PROG_MPI])\n\n   AC_ARG_WITH(mpi-name-mangling,\n      AC_HELP_STRING(\n         [--with-mpi-name-mangling@<:@=ARG@:>@], \n         [choose the name decoration scheme for external Fortran symbols in MPI library from: 0u, 1u, 2u, upcase, auto @<:@default=auto@:>@]\n      ),\n      [name_mangling=\"$withval\"],\n      [name_mangling=\"auto\"]\n   )\n\n   if test \"$name_mangling\" != \"0u\" -a \\\n           \"$name_mangling\" != \"1u\" -a \\\n           \"$name_mangling\" != \"2u\" -a \\\n           \"$name_mangling\" != \"_f\" -a \\\n           \"$name_mangling\" != \"upcase\" -a \\\n           \"$name_mangling\" != \"auto\" ; then\n      AC_MSG_ERROR([--with-name-mangling: Invalid argument '$name_mangling'. Valid options are: 0u, 1u, 2u, _f, upcase, auto.])\n   fi\n\n   AC_MSG_CHECKING(for Fortran PMPI symbols name decoration scheme)\n\n   if test \"$name_mangling\" != \"auto\" ; then\n      if test \"$name_mangling\" = \"2u\" ; then\n         AC_DEFINE([PMPI_DOUBLE_UNDERSCORE], 1, [Defined if name decoration scheme is of type pmpi_routine__])\n         FORTRAN_DECORATION=\"2 underscores\"\n      elif test \"$name_mangling\" = \"1u\" ; then\n         AC_DEFINE([PMPI_SINGLE_UNDERSCORE], 1, [Defined if name decoration scheme is of type pmpi_routine_])\n         FORTRAN_DECORATION=\"1 underscore\"\n      elif test \"$name_mangling\" = \"upcase\" ; then\n         AC_DEFINE([PMPI_UPPERCASE], 1, [Defined if name decoration scheme is of type PMPI_ROUTINE])\n         FORTRAN_DECORATION=\"UPPER CASE\"\n      elif test \"$name_mangling\" = \"0u\" ; then\n         AC_DEFINE([PMPI_NO_UNDERSCORES], 1, [Defined if name decoration scheme is of type pmpi_routine])\n         FORTRAN_DECORATION=\"0 underscores\"\n      elif test \"$name_mangling\" = \"_f\" ; then\n         AC_DEFINE([PMPI_UNDERSCORE_F_SUFFIX], 1, [Defined if name decoration scheme is of type pmpi_routine_f])\n         FORTRAN_DECORATION=\"_f suffix\"\n      fi\n      AC_MSG_RESULT([${FORTRAN_DECORATION}])\n   else\n\n      AC_LANG_SAVE()\n      AC_LANG([C])\n      AX_FLAGS_SAVE()\n\n      CC=\"${MPICC}\"\n\n      dnl PMPI_NO_UNDERSCORES appears twice for libraries that do not support\n      dnl fortran symbols \n      for ac_cv_name_mangling in \\\n         PMPI_NO_UNDERSCORES \\\n         PMPI_SINGLE_UNDERSCORE \\\n         PMPI_DOUBLE_UNDERSCORE \\\n         PMPI_UPPERCASE \\\n         PMPI_UNDERSCORE_F_SUFFIX \\\n         PMPI_NO_UNDERSCORES ;\n      do\n         CFLAGS=\"-D$ac_cv_name_mangling\"\n         LIBS=\"${LIBS} ${MPI_F_LIB}\" dnl We need to append fortran libraries if they exist\n   \n         AC_TRY_LINK(\n            [#include <mpi.h>], \n            [\n               #if defined(PMPI_NO_UNDERSCORES)\n               #define MY_ROUTINE pmpi_finalize\n               #elif defined(PMPI_UPPERCASE)\n               #define MY_ROUTINE PMPI_FINALIZE\n               #elif defined(PMPI_SINGLE_UNDERSCORE)\n               #define MY_ROUTINE pmpi_finalize_\n               #elif defined(PMPI_DOUBLE_UNDERSCORE)\n               #define MY_ROUTINE pmpi_finalize__\n               #elif defined(PMPI_UNDERSCORE_F_SUFFIX)\n               #define MY_ROUTINE pmpi_finalize_f\n               #endif\n   \n               int ierror;\n               MY_ROUTINE (&ierror);\n            ],\n            [\n               break \n            ]\n         )\n      done\n\n      AX_FLAGS_RESTORE()\n      AC_LANG_RESTORE()\n\n      if test \"$ac_cv_name_mangling\" = \"PMPI_DOUBLE_UNDERSCORE\" ; then\n         AC_DEFINE([PMPI_DOUBLE_UNDERSCORE], 1, [Defined if name decoration scheme is of type pmpi_routine__])\n         FORTRAN_DECORATION=\"2 underscores\"\n      elif test \"$ac_cv_name_mangling\" = \"PMPI_SINGLE_UNDERSCORE\" ; then\n         AC_DEFINE([PMPI_SINGLE_UNDERSCORE], 1, [Defined if name decoration scheme is of type pmpi_routine_])\n         FORTRAN_DECORATION=\"1 underscore\"\n      elif test \"$ac_cv_name_mangling\" = \"PMPI_UPPERCASE\" ; then\n         AC_DEFINE([PMPI_UPPERCASE], 1, [Defined if name decoration scheme is of type PMPI_ROUTINE])\n         FORTRAN_DECORATION=\"UPPER CASE\"\n      elif test \"$ac_cv_name_mangling\" = \"PMPI_NO_UNDERSCORES\" ; then\n         AC_DEFINE([PMPI_NO_UNDERSCORES], 1, [Defined if name decoration scheme is of type pmpi_routine])\n         FORTRAN_DECORATION=\"0 underscores\"\n      elif test \"${ac_cv_name_mangling}\" = \"PMPI_UNDERSCORE_F_SUFFIX\" ; then\n         AC_DEFINE([PMPI_UNDERSCORE_F_SUFFIX], 1, [Defined if name decoration scheme is of type pmpi_routine_f])\n         FORTRAN_DECORATION=\"_f suffix\"\n      else\n         FORTRAN_DECORATION=\"[unknown]\"\n         AC_MSG_NOTICE([Can not determine the name decoration scheme for external Fortran symbols in MPI library])\n         AC_MSG_ERROR([Please use '--with-mpi-name-mangling' to select an appropriate decoration scheme.])\n      fi\n      AC_MSG_RESULT([${FORTRAN_DECORATION}])\n   fi\n])\n\n# AX_CHECK_MPI_SUPPORTS_MPI_COMM_SPAWN\n# ---------\nAC_DEFUN([AX_CHECK_MPI_SUPPORTS_MPI_COMM_SPAWN],\n[\n\tAC_LANG_SAVE()\n\tAC_LANG([C])\n\tAX_FLAGS_SAVE()\n\n\tAC_MSG_CHECKING([if MPI library supports MPI_Comm_spawn])\n\tAC_TRY_LINK(\n\t\t[#include <mpi.h>], \n\t\t[\n\t\t\tint ierror;\n\t\t\tint errcodes[1];\n\t\t\tMPI_Comm c;\n\t\t\tMPI_Info i;\n\t\t\tchar *argv[1];\n\t\t\tierror = MPI_Comm_spawn (\"\", argv, 1, i, 0, MPI_COMM_WORLD, &c, errcodes);\n\t\t],\n\t\t[mpi_lib_supports_mpi_comm_spawn=\"yes\" ],\n\t\t[mpi_lib_supports_mpi_comm_spawn=\"no\" ]\n\t)\n\tAC_MSG_RESULT([${mpi_lib_supports_mpi_comm_spawn}])\n\n\tif test \"${mpi_lib_supports_mpi_comm_spawn}\" = \"yes\" ; then\n\t\tAC_DEFINE([MPI_SUPPORTS_MPI_COMM_SPAWN], 1, [Defined if MPI library supports MPI_Comm_spawn])\n\tfi\n\n\tAX_FLAGS_RESTORE()\n\tAC_LANG_RESTORE()\n])\n\n# AX_CHECK_MPI_SUPPORTS_MPI_1SIDED\n# ---------\nAC_DEFUN([AX_CHECK_MPI_SUPPORTS_MPI_1SIDED],\n[\n\tAC_LANG_SAVE()\n\tAC_LANG([C])\n\tAX_FLAGS_SAVE()\n\n\tCC=\"${MPICC}\"\n\n\tAC_MSG_CHECKING([if MPI library supports MPI 1-sided operations])\n\tAC_TRY_LINK(\n\t\t[#include <mpi.h>], \n\t\t[\n\t\t\tint ierror;\n\t\t\tierror = MPI_Put ((void*)0, 0, (MPI_Datatype)0, 0, (MPI_Aint)0, 0, (MPI_Datatype)0, (MPI_Win)0);\n\t\t\tierror = MPI_Get ((void*)0, 0, (MPI_Datatype)0, 0, (MPI_Aint)0, 0, (MPI_Datatype)0, (MPI_Win)0);\n\t\t],\n\t\t[mpi_lib_supports_mpi_1sided=\"yes\" ],\n\t\t[mpi_lib_supports_mpi_1sided=\"no\" ]\n\t)\n\tAC_MSG_RESULT([${mpi_lib_supports_mpi_1sided}])\n\n\tif test \"${mpi_lib_supports_mpi_1sided}\" = \"yes\" ; then\n\t\tAC_DEFINE([MPI_SUPPORTS_MPI_1SIDED], 1, [Defined if MPI library supports 1-sided operations])\n\tfi\n\n\tAX_FLAGS_RESTORE()\n\tAC_LANG_RESTORE()\n])\n\n# AX_CHECK_MPI_SUPPORTS_MPI_IO\n# ---------\nAC_DEFUN([AX_CHECK_MPI_SUPPORTS_MPI_IO],\n[\n\tAC_LANG_SAVE()\n\tAC_LANG([C])\n\tAX_FLAGS_SAVE()\n\n\tCC=\"${MPICC}\"\n\n\tAC_MSG_CHECKING([if MPI library supports MPI I/O])\n\tAC_TRY_LINK(\n\t\t[#include <mpi.h>], \n\t\t[\n\t\t\tint ierror;\n\t\t\tMPI_Info i;\n\t\t\tMPI_File f;\n\t\t\tierror = MPI_File_open (MPI_COMM_WORLD, 0, MPI_MODE_CREATE, i, &f);\n\t\t],\n\t\t[mpi_lib_supports_mpi_io=\"yes\" ],\n\t\t[mpi_lib_supports_mpi_io=\"no\" ]\n\t)\n\tAC_MSG_RESULT([${mpi_lib_supports_mpi_io}])\n\n\tif test \"${mpi_lib_supports_mpi_io}\" = \"yes\" ; then\n\t\tAC_DEFINE([MPI_SUPPORTS_MPI_IO], 1, [Defined if MPI library supports I/O operations])\n\tfi\n\n\tAX_FLAGS_RESTORE()\n\tAC_LANG_RESTORE()\n])\n\n# AX_CHECK_MPI_C_HAS_FORTRAN_MPI_INIT\n# ---------\nAC_DEFUN([AX_CHECK_MPI_C_HAS_FORTRAN_MPI_INIT],\n[\n\tAC_LANG_SAVE()\n\tAC_LANG([C])\n\tAX_FLAGS_SAVE()\n\n\tCC=\"${MPICC}\"\n\n\tAC_MSG_CHECKING([if MPI C library contains Fortran MPI_Init symbol])\n\tAC_TRY_LINK(\n\t\t[#include <mpi.h>], \n\t\t[\n\t\t\tint ierror;\n\t\t\tierror = mpi_init (&ierror);\n\t\t],\n\t\t[mpi_clib_contains_fortran_mpi_init=\"yes\" ],\n\t\t[mpi_clib_contains_fortran_mpi_init=\"no\" ]\n\t)\n\tAC_MSG_RESULT([${mpi_clib_contains_fortran_mpi_init}])\n\n\tif test \"${mpi_clib_contains_fortran_mpi_init}\" = \"yes\" ; then\n\t\tAC_DEFINE([MPI_C_CONTAINS_FORTRAN_MPI_INIT], 1, [Defined if MPI C library contains Fortran mpi_init symbol])\n\tfi\n\n\tAX_FLAGS_RESTORE()\n\tAC_LANG_RESTORE()\n])\n\n# AX_CHECK_MPI_LIB_HAS_MPI_INIT_THREAD_C\n# ---------\nAC_DEFUN([AX_CHECK_MPI_LIB_HAS_MPI_INIT_THREAD_C],\n[\n\tAC_LANG_SAVE()\n\tAC_LANG([C])\n\tAX_FLAGS_SAVE()\n\n\tCC=\"${MPICC}\"\n\n\tAC_MSG_CHECKING([if MPI library supports threads using MPI_Init_thread (C)])\n\tAC_TRY_LINK(\n\t\t[#include <mpi.h>], \n\t\t[\n\t\t\t\t#if defined(PMPI_NO_UNDERSCORES)\n\t\t\t\t# define MY_ROUTINE mpi_init_thread\n\t\t\t\t#elif defined(PMPI_UPPERCASE)\n\t\t\t\t# define MY_ROUTINE MPI_INIT_THREAD\n\t\t\t\t#elif defined(PMPI_SINGLE_UNDERSCORE)\n\t\t\t\t# define MY_ROUTINE mpi_init_thread_\n\t\t\t\t#elif defined(PMPI_DOUBLE_UNDERSCORE)\n\t\t\t\t# define MY_ROUTINE mpi_init_thread__\n\t\t\t\t#endif\n\t\t\t\tint ierror;\n\t\t\t\tierror = MPI_Init_thread (0, 0, MPI_THREAD_FUNNELED, 0);\n\t\t],\n\t\t[mpi_clib_contains_mpi_init_thread=\"yes\" ],\n\t\t[mpi_clib_contains_mpi_init_thread=\"no\" ]\n\t)\n\tAC_MSG_RESULT([${mpi_clib_contains_mpi_init_thread}])\n\n\tif test \"${mpi_clib_contains_mpi_init_thread}\" = \"yes\" ; then\n\t\tAC_DEFINE([MPI_HAS_INIT_THREAD_C], 1, [Defined if MPI library supports MPI_Init_thread / C])\n\tfi\n\n\tAX_FLAGS_RESTORE()\n\tAC_LANG_RESTORE()\n])\n\n# AX_CHECK_MPI_LIB_HAS_MPI_INIT_THREAD_F\n# ---------\nAC_DEFUN([AX_CHECK_MPI_LIB_HAS_MPI_INIT_THREAD_F],\n[\n\tAC_LANG_SAVE()\n\tAC_LANG([C])\n\tAX_FLAGS_SAVE()\n\n\tAC_MSG_CHECKING([if MPI library supports threads using MPI_Init_thread (Fortran)])\n\n\tif test \"${MPIF90_DOES_NOT_EXIST}\" = \"yes\" ; then\n\t\tdnl If we can't compile the fortran app, just guess from C library\n\t\tmpi_flib_contains_mpi_init_thread=${mpi_clib_contains_mpi_init_thread}\n\t\tguessed=\" (guessed from C library)\"\n\telse\n\t\tFC=\"${MPIF90}\"\n\t\tAC_LANG_PUSH([Fortran])\n\t\tAC_LINK_IFELSE(\n\t\t\t[        program test\n\t         call mpi_init_thread()\n\t         end],\n\t\t\t[mpi_flib_contains_mpi_init_thread=\"yes\" ],\n\t\t\t[mpi_flib_contains_mpi_init_thread=\"no\" ]\n\t\t)\n\t\tAC_LANG_POP([Fortran])\n\t\tguessed=\"\"\n\tfi\n\tAC_MSG_RESULT([${mpi_flib_contains_mpi_init_thread}${guessed}])\n\n\tif test \"${mpi_flib_contains_mpi_init_thread}\" = \"yes\" ; then\n\t\tAC_DEFINE([MPI_HAS_INIT_THREAD_F], 1, [Defined if MPI library supports MPI_Init_thread / Fortran])\n\tfi\n\n\tAX_FLAGS_RESTORE()\n\tAC_LANG_RESTORE()\n])\n\nAC_DEFUN([AX_CHECK_MPI_LIB_HAS_MPI_INIT_THREAD],\n[\n  AX_CHECK_MPI_LIB_HAS_MPI_INIT_THREAD_C\n  AX_CHECK_MPI_LIB_HAS_MPI_INIT_THREAD_F\n])\n\n\n# AX_CHECK_MPI_LIB_HAS_C_AND_FORTRAN_SYMBOLS\n# ---------\nAC_DEFUN([AX_CHECK_MPI_LIB_HAS_C_AND_FORTRAN_SYMBOLS],\n[\n\tAC_LANG_SAVE()\n\tAC_LANG([C])\n\tAX_FLAGS_SAVE()\n\n\tCC=\"${MPICC}\"\n\n\tif test ${MPI_INSTALLED} = \"yes\" ; then\n\t\tAC_MSG_CHECKING([if MPI library contains both C and Fortran symbols])\n\t\tAC_TRY_LINK(\n\t\t\t[#include <mpi.h>], \n\t\t\t[\n\t\t\t\t#if defined(PMPI_NO_UNDERSCORES)\n\t\t\t\t# define MY_ROUTINE pmpi_finalize\n\t\t\t\t#elif defined(PMPI_UPPERCASE)\n\t\t\t\t# define MY_ROUTINE PMPI_FINALIZE\n\t\t\t\t#elif defined(PMPI_SINGLE_UNDERSCORE)\n\t\t\t\t# define MY_ROUTINE pmpi_finalize_\n\t\t\t\t#elif defined(PMPI_DOUBLE_UNDERSCORE)\n\t\t\t\t# define MY_ROUTINE pmpi_finalize__\n\t\t\t\t#endif\n\n\t\t\t\tint ierror;\n\t\t\t\tMY_ROUTINE (&ierror);\n\t\t\t\tierror = MPI_Finalize ();\n\t\t\t],\n\t\t\t[mpi_lib_contains_c_and_fortran=\"yes\" ],\n\t\t\t[mpi_lib_contains_c_and_fortran=\"no\" ]\n\t\t)\n\t\tAC_MSG_RESULT([${mpi_lib_contains_c_and_fortran}])\n\tfi\n\n\tAM_CONDITIONAL(COMBINED_C_FORTRAN, test \"${mpi_lib_contains_c_and_fortran}\" = \"yes\")\n\tif test \"${mpi_lib_contains_c_and_fortran}\" = \"yes\" ; then\n\t\tAC_DEFINE([MPI_COMBINED_C_FORTRAN], 1, [Defined if a single MPI library contains both C and Fortran symbols])\n\tfi\n\n\tAX_FLAGS_RESTORE()\n\tAC_LANG_RESTORE()\n])\n\n# AX_ENABLE_SINGLE_MPI_LIBRARY\n# ---------\nAC_DEFUN([AX_ENABLE_SINGLE_MPI_LIBRARY],\n[\n   AC_ARG_ENABLE(single-mpi-lib,\n      AC_HELP_STRING(\n         [--enable-single-mpi-lib],\n         [Produces a single instrumentation library for MPI that contains both Fortran and C wrappers]\n      ),\n      [enable_single_mpi_lib=\"${enableval}\"],\n      [enable_single_mpi_lib=\"no\"]\n   )\n\n   AM_CONDITIONAL(SINGLE_MPI_LIBRARY, test \"${enable_single_mpi_lib}\" = \"yes\")\n])\n\n\n# AX_PROG_GM\n# ----------\nAC_DEFUN([AX_PROG_GM],\n[\n   AX_FLAGS_SAVE()\n\n   AC_ARG_WITH(gm,\n      AC_HELP_STRING(\n         [--with-gm@<:@=DIR@:>@],\n         [specify where to find GM libraries and includes]\n      ),\n      [gm_paths=\"$withval\"],\n      [gm_paths=\"/opt/osshpc/gm\"] dnl List of possible default paths\n   )\n\n   dnl Search for GM installation\n   AX_FIND_INSTALLATION([GM], [${gm_paths}], [gm])\n\n   if test \"$GM_INSTALLED\" = \"yes\" ; then\n      dnl Check for GM header files.\n      AC_CHECK_HEADERS([gm.h], [], [GM_INSTALLED=\"no\"])\n\n      dnl Check for libgm\n      AC_CHECK_LIB([gm], [_gm_get_globals], \n         [ \n           GM_LDFLAGS=\"$GM_LDFLAGS -lgm\"\n           AC_SUBST(GM_LDFLAGS)\n         ],\n         [ GM_INSTALLED=\"no\"]\n      )\n   fi\n\n   dnl Did the checks pass?\n   AM_CONDITIONAL(HAVE_GM, test \"${GM_INSTALLED}\" = \"yes\")\n\n   if test \"$GM_INSTALLED\" = \"no\" ; then\n      AC_MSG_WARN([Myrinet GM counters tracing has been disabled])\n   fi\n\n   AX_FLAGS_RESTORE()\n])\n\n# AX_MPI_SHOW_CONFIGURATION\n# ----------\nAC_DEFUN([AX_MPI_SHOW_CONFIGURATION],\n[\n\techo MPI instrumentation: ${MPI_INSTALLED}\n\tif test \"${MPI_INSTALLED}\" = \"yes\" ; then\n\t\tMPI_EXTRA_CAPABILITIES=\"\"\n\t\tif test \"${PERUSE_AVAILABILITY}\" = \"yes\"; then\n\t\t\tMPI_EXTRA_CAPABILITIES+=\" peruse\"\n\t\tfi\n\t\tif test \"${mpi_lib_supports_mpi_1sided}\" = \"yes\"; then\n\t\t\tMPI_EXTRA_CAPABILITIES+=\" 1-sided\"\n\t\tfi\n\t\tif test \"${mpi_lib_supports_mpi_io}\" = \"yes\"; then\n\t\t\tMPI_EXTRA_CAPABILITIES+=\" I/O\"\n\t\tfi\n\t\tif test \"${mpi_lib_supports_mpi_comm_spawn}\" = \"yes\"; then\n\t\t\tMPI_EXTRA_CAPABILITIES+=\" MPI_Comm_spawn\"\n\t\tfi\n\t\tif test \"${mpi3_version}\" = \"yes\"; then\n\t\t\tMPI_EXTRA_CAPABILITIES+=\" MPI3\"\n\t\tfi\n\t\techo -e \\\\\\tMPI home:             ${MPI_HOME}\n\t\tif test \"${MPIRUN}\" != \"\"; then\n\t\techo -e \\\\\\tMPI launcher:         ${MPIRUN}\n\t\telse\n\t\techo -e \\\\\\tMPI launcher was not found. It is NOT necessary to compile Extrae but it is necessary to execute the regression tests.\n\t\tfi\n\t\techo -e \\\\\\tFortran decoration:   ${FORTRAN_DECORATION}\n\t\techo -e \\\\\\tmixed C/Fortran libraries? ${mpi_lib_contains_c_and_fortran}\n\t\techo -e \\\\\\tshared libraries?     ${MPI_SHARED_LIB_FOUND}\n\t\techo -e \\\\\\tMPI capabilities:     ${MPI_EXTRA_CAPABILITIES}\n\t\tif test \"${lb_found}\" = \"yes\" ; then\n\t\t\techo -e \\\\\\tLoad-Balancing hooks? yes, from ${LOAD_BALANCING_HOME}\n\t\telse\n\t\t\techo -e \\\\\\tLoad-Balancing hooks? no\n\t\tfi\n\tfi\n])\n\n# AX_PMPI_HOOK\n# ------------\nAC_DEFUN([AX_PMPI_HOOK],\n[\n   AX_FLAGS_SAVE()\n\n   AC_ARG_WITH([pmpi-hook],\n   \tAS_HELP_STRING([--with-pmpi-hook], [Choose method to call PMPI (dlsym or pmpi)]))\n   AS_IF([test \"x$with_pmpi_hook\" == \"xdlsym\"],\n   \t[AC_DEFINE([WITH_PMPI_HOOK], [1], [Use dlsym instead of PMPI])])\n\n   AX_FLAGS_RESTORE()\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/config/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 57 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# `#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest $lt_write_fail = 0 && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest \"$silent\" = yes &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_REPLACE_SHELLFNS\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test $_lt_result -eq 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test $_lt_result -eq 0 && $GREP forced_load conftest >/dev/null 2>&1 ; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\" && test \"$lt_cv_ld_force_load\" = \"no\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test \"$lt_cv_ld_force_load\" = \"yes\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience ${wl}-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test \"${lt_cv_aix_libpath+set}\" = set; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=\"/usr/lib:/lib\"\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script which will find a shell with a builtin\n# printf (which we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\" \n}\n\ncase \"$ECHO\" in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[  --with-sysroot[=DIR] Search for dependent libraries within DIR\n                        (or the compiler's sysroot if not specified).],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase ${with_sysroot} in #(\n yes)\n   if test \"$GCC\" = yes; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([${with_sysroot}])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and in which our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_i386\"\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\n*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=\"${LD-ld}_sol2\"\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test \"$ac_status\" -eq 0; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test \"$ac_status\" -ne 0; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test \"x$lt_cv_ar_at_file\" = xno; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq=\"s,=\\([[A-Za-z]]:\\),\\1,g\" ;;\n    *) lt_sed_strip_eq=\"s,=/,/,g\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's,/\\([[A-Za-z]]:\\),\\1,g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n    library_names_spec='${libname}.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=\"$LIB\"\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test \"$GCC\" != yes; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  # func_win32_libid assumes BSD nm, so disallow it if using MS dumpbin.\n  if ( test \"$lt_cv_nm_interface\" = \"BSD nm\" && file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh\n  # decide which to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=\"$ECHO\"\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test \"x$lt_cv_path_mainfest_tool\" != xyes; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    # Also, AIX nm treats weak defined symbols like other global defined\n    # symbols, whereas GNU nm marks them as \"W\".\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test \"$with_gnu_ld\" = yes; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test \"$lt_use_gnu_ld_interface\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  if test \"$with_gnu_ld\" = yes; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    sed -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t  else\n\t    sed -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t  fi~\n\t  $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t  linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t  lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t  case $lt_outputfile in\n\t    *.exe|*.EXE) ;;\n\t    *)\n\t      lt_outputfile=\"$lt_outputfile.exe\"\n\t      lt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t      ;;\n\t  esac~\n\t  if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t    $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t    $RM \"$lt_outputfile.manifest\";\n\t  fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=\"$LDFLAGS\"\n\t   LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=\"$save_LDFLAGS\"])\n\tif test \"$lt_cv_irix_exported_symbol\" = yes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $pic_flag $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    if test \"$with_gnu_ld\" = yes; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=\".dll\"\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      $SED -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t    else\n\t      $SED -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t    fi~\n\t    $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t    linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t    lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t    case $lt_outputfile in\n\t      *.exe|*.EXE) ;;\n\t      *)\n\t\tlt_outputfile=\"$lt_outputfile.exe\"\n\t\tlt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t\t;;\n\t    esac~\n\t    func_to_tool_file \"$lt_outputfile\"~\n\t    if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t      $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t      $RM \"$lt_outputfile.manifest\";\n\t    fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file (1st line\n\t    # is EXPORTS), use it as is; otherwise, prepend...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      cp $export_symbols $output_objdir/$soname.def;\n\t    else\n\t      echo EXPORTS > $output_objdir/$soname.def;\n\t      cat $export_symbols >> $output_objdir/$soname.def;\n\t    fi~\n\t    $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared $pic_flag -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n\t      '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n\t      '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case ${2} in\n  .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case ${prev}${p} in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case ${prev} in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC* | sunCC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\n  CFLAGS=\"$lt_save_CFLAGS\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},${_lt_dummy#??}\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,b/c, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_FUNCTION_REPLACE (FUNCNAME, REPLACEMENT-BODY)\n# ------------------------------------------------------\n# In `$cfgfile', look for function FUNCNAME delimited by `^FUNCNAME ()$' and\n# '^} FUNCNAME ', and replace its body with REPLACEMENT-BODY.\nm4_defun([_LT_PROG_FUNCTION_REPLACE],\n[dnl {\nsed -e '/^$1 ()$/,/^} # $1 /c\\\n$1 ()\\\n{\\\nm4_bpatsubsts([$2], [$], [\\\\], [^\\([\t ]\\)], [\\\\\\1])\n} # Extended-shell $1 implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n])\n\n\n# _LT_PROG_REPLACE_SHELLFNS\n# -------------------------\n# Replace existing portable implementations of several shell functions with\n# equivalent extended shell implementations where those features are available..\nm4_defun([_LT_PROG_REPLACE_SHELLFNS],\n[if test x\"$xsi_shell\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_dirname], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_basename], [dnl\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_dirname_and_basename], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_stripname], [dnl\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary parameter first.\n    func_stripname_result=${3}\n    func_stripname_result=${func_stripname_result#\"${1}\"}\n    func_stripname_result=${func_stripname_result%\"${2}\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_long_opt], [dnl\n    func_split_long_opt_name=${1%%=*}\n    func_split_long_opt_arg=${1#*=}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_short_opt], [dnl\n    func_split_short_opt_arg=${1#??}\n    func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_lo2o], [dnl\n    case ${1} in\n      *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n      *)    func_lo2o_result=${1} ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_xform], [    func_xform_result=${1%.*}.lo])\n\n  _LT_PROG_FUNCTION_REPLACE([func_arith], [    func_arith_result=$(( $[*] ))])\n\n  _LT_PROG_FUNCTION_REPLACE([func_len], [    func_len_result=${#1}])\nfi\n\nif test x\"$lt_shell_append\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_append], [    eval \"${1}+=\\\\${2}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_append_quoted], [dnl\n    func_quote_for_eval \"${2}\"\ndnl m4 expansion turns \\\\\\\\ into \\\\, and then the shell eval turns that into \\\n    eval \"${1}+=\\\\\\\\ \\\\$func_quote_for_eval_result\"])\n\n  # Save a `func_append' function call where possible by direct use of '+='\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1+=\"%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nelse\n  # Save a `func_append' function call even when '+=' is not available\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1=\"$\\1%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nfi\n\nif test x\"$_lt_function_replace_fail\" = x\":\"; then\n  AC_MSG_WARN([Unable to substitute extended shell functions in $ofile])\nfi\n])\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine which file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/config/ltmain.sh": "\n# libtool (GNU libtool) 2.4.2\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n# 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#       --config             show all configuration variables\n#       --debug              enable verbose shell tracing\n#   -n, --dry-run            display commands without modifying any files\n#       --features           display basic configuration information and exit\n#       --mode=MODE          use operation mode MODE\n#       --preserve-dup-deps  don't remove duplicate dependency libraries\n#       --quiet, --silent    don't print informational messages\n#       --no-quiet, --no-silent\n#                            print informational messages (default)\n#       --no-warn            don't display warning messages\n#       --tag=TAG            use configuration variables from tag TAG\n#   -v, --verbose            print more informational messages than default\n#       --no-verbose         don't print the extra informational messages\n#       --version            print version information\n#   -h, --help, --help-all   print short, long, or detailed help message\n#\n# MODE must be one of the following:\n#\n#         clean              remove files from the build directory\n#         compile            compile a source file into a libtool object\n#         execute            automatically set library path, then run a program\n#         finish             complete the installation of libtool libraries\n#         install            install libraries or executables\n#         link               create a library or an executable\n#         uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.  When passed as first option,\n# `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#         host-triplet:\t$host\n#         shell:\t\t$SHELL\n#         compiler:\t\t$LTCC\n#         compiler flags:\t\t$LTCFLAGS\n#         linker:\t\t$LD (gnu? $with_gnu_ld)\n#         $progname:\t(GNU libtool) 2.4.2\n#         automake:\t$automake_version\n#         autoconf:\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n# GNU libtool home page: <http://www.gnu.org/software/libtool/>.\n# General help using GNU software: <http://www.gnu.org/gethelp/>.\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.2\nTIMESTAMP=\"\"\npackage_revision=1.3337\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# NLS nuisances: We save the old values to restore during execute mode.\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\nLC_ALL=C\nLANGUAGE=C\nexport LANGUAGE LC_ALL\n\n$lt_unset CDPATH\n\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n\n\n: ${CP=\"cp -f\"}\ntest \"${ECHO+set}\" = set || ECHO=${as_echo-'printf %s\\n'}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n    func_dirname_result=`$ECHO \"${1}\" | $SED \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n} # func_dirname may be replaced by extended shell implementation\n\n\n# func_basename file\nfunc_basename ()\n{\n    func_basename_result=`$ECHO \"${1}\" | $SED \"$basename\"`\n} # func_basename may be replaced by extended shell implementation\n\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n    # Extract subdirectory from the argument.\n    func_dirname_result=`$ECHO \"${1}\" | $SED -e \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n    func_basename_result=`$ECHO \"${1}\" | $SED -e \"$basename\"`\n} # func_dirname_and_basename may be replaced by extended shell implementation\n\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n    case ${2} in\n      .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n    esac\n} # func_stripname may be replaced by extended shell implementation\n\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar='s,^/\\([^/]*\\).*$,\\1,'\npathcdr='s,^/[^/]*,,'\nremovedotparts=':dotsl\n\t\ts@/\\./@/@g\n\t\tt dotsl\n\t\ts,/\\.$,/,'\ncollapseslashes='s@/\\{1,\\}@/@g'\nfinalslash='s,/*$,/,'\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# The name of this program:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s,[].[^$\\\\*\\/],\\\\&,g'\n\n# Sed substitution that converts a w32 file name or path\n# which contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nlt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }$*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }\"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname: ${opt_mode+$opt_mode: }warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"$my_directory_path\" | $SED -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"$my_dir_list\" | $SED 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"$my_tmpdir\"\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"$1\" | $SED \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n# func_tr_sh\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n  case $1 in\n  [0-9]* | *[!a-zA-Z0-9_]*)\n    func_tr_sh_result=`$ECHO \"$1\" | $SED 's/^\\([0-9]\\)/_\\1/; s/[^a-zA-Z0-9_]/_/g'`\n    ;;\n  * )\n    func_tr_sh_result=$1\n    ;;\n  esac\n}\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $opt_debug\n\n    $SED -n '/(C)/!b go\n\t:more\n\t/\\./!{\n\t  N\n\t  s/\\n# / /\n\t  b more\n\t}\n\t:go\n\t/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/^#  *.*--help/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    echo\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help [NOEXIT]\n# Echo long help message to standard output and exit,\n# unless 'noexit' is passed as argument.\nfunc_help ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n\t:print\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(${AUTOMAKE-automake} --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(${AUTOCONF-autoconf} --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n\td\n     }\n     /^# .* home page:/b print\n     /^# General help using/b print\n     ' < \"$progpath\"\n    ret=$?\n    if test -z \"$1\"; then\n      exit $ret\n    fi\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $opt_debug\n\n    func_error \"missing argument for $1.\"\n    exit_cmd=exit\n}\n\n\n# func_split_short_opt shortopt\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nfunc_split_short_opt ()\n{\n    my_sed_short_opt='1s/^\\(..\\).*$/\\1/;q'\n    my_sed_short_rest='1s/^..\\(.*\\)$/\\1/;q'\n\n    func_split_short_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_short_opt\"`\n    func_split_short_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_short_rest\"`\n} # func_split_short_opt may be replaced by extended shell implementation\n\n\n# func_split_long_opt longopt\n# Set func_split_long_opt_name and func_split_long_opt_arg shell\n# variables after splitting LONGOPT at the `=' sign.\nfunc_split_long_opt ()\n{\n    my_sed_long_opt='1s/^\\(--[^=]*\\)=.*/\\1/;q'\n    my_sed_long_arg='1s/^--[^=]*=//'\n\n    func_split_long_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_long_opt\"`\n    func_split_long_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_long_arg\"`\n} # func_split_long_opt may be replaced by extended shell implementation\n\nexit_cmd=:\n\n\n\n\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\nnonopt=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n    eval \"${1}=\\$${1}\\${2}\"\n} # func_append may be replaced by extended shell implementation\n\n# func_append_quoted var value\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nfunc_append_quoted ()\n{\n    func_quote_for_eval \"${2}\"\n    eval \"${1}=\\$${1}\\\\ \\$func_quote_for_eval_result\"\n} # func_append_quoted may be replaced by extended shell implementation\n\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n    func_arith_result=`expr \"${@}\"`\n} # func_arith may be replaced by extended shell implementation\n\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n    func_len_result=`expr \"${1}\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n} # func_len may be replaced by extended shell implementation\n\n\n# func_lo2o object\nfunc_lo2o ()\n{\n    func_lo2o_result=`$ECHO \"${1}\" | $SED \"$lo2o\"`\n} # func_lo2o may be replaced by extended shell implementation\n\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n    func_xform_result=`$ECHO \"${1}\" | $SED 's/\\.[^.]*$/.lo/'`\n} # func_xform may be replaced by extended shell implementation\n\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n# Shorthand for --mode=foo, only valid as the first argument\ncase $1 in\nclean|clea|cle|cl)\n  shift; set dummy --mode clean ${1+\"$@\"}; shift\n  ;;\ncompile|compil|compi|comp|com|co|c)\n  shift; set dummy --mode compile ${1+\"$@\"}; shift\n  ;;\nexecute|execut|execu|exec|exe|ex|e)\n  shift; set dummy --mode execute ${1+\"$@\"}; shift\n  ;;\nfinish|finis|fini|fin|fi|f)\n  shift; set dummy --mode finish ${1+\"$@\"}; shift\n  ;;\ninstall|instal|insta|inst|ins|in|i)\n  shift; set dummy --mode install ${1+\"$@\"}; shift\n  ;;\nlink|lin|li|l)\n  shift; set dummy --mode link ${1+\"$@\"}; shift\n  ;;\nuninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n  shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n  ;;\nesac\n\n\n\n# Option defaults:\nopt_debug=:\nopt_dry_run=false\nopt_config=false\nopt_preserve_dup_deps=false\nopt_features=false\nopt_finish=false\nopt_help=false\nopt_help_all=false\nopt_silent=:\nopt_warning=:\nopt_verbose=:\nopt_silent=false\nopt_verbose=false\n\n\n# Parse options once, thoroughly.  This comes as soon as possible in the\n# script to make things like `--version' happen as quickly as we can.\n{\n  # this just eases exit handling\n  while test $# -gt 0; do\n    opt=\"$1\"\n    shift\n    case $opt in\n      --debug|-x)\topt_debug='set -x'\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\t$opt_debug\n\t\t\t;;\n      --dry-run|--dryrun|-n)\n\t\t\topt_dry_run=:\n\t\t\t;;\n      --config)\n\t\t\topt_config=:\nfunc_config\n\t\t\t;;\n      --dlopen|-dlopen)\n\t\t\toptarg=\"$1\"\n\t\t\topt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$optarg\"\n\t\t\tshift\n\t\t\t;;\n      --preserve-dup-deps)\n\t\t\topt_preserve_dup_deps=:\n\t\t\t;;\n      --features)\n\t\t\topt_features=:\nfunc_features\n\t\t\t;;\n      --finish)\n\t\t\topt_finish=:\nset dummy --mode finish ${1+\"$@\"}; shift\n\t\t\t;;\n      --help)\n\t\t\topt_help=:\n\t\t\t;;\n      --help-all)\n\t\t\topt_help_all=:\nopt_help=': help-all'\n\t\t\t;;\n      --mode)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_mode=\"$optarg\"\ncase $optarg in\n  # Valid mode arguments:\n  clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n  # Catch anything else as an error\n  *) func_error \"invalid argument for $opt\"\n     exit_cmd=exit\n     break\n     ;;\nesac\n\t\t\tshift\n\t\t\t;;\n      --no-silent|--no-quiet)\n\t\t\topt_silent=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-warning|--no-warn)\n\t\t\topt_warning=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-verbose)\n\t\t\topt_verbose=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --silent|--quiet)\n\t\t\topt_silent=:\nfunc_append preserve_args \" $opt\"\n        opt_verbose=false\n\t\t\t;;\n      --verbose|-v)\n\t\t\topt_verbose=:\nfunc_append preserve_args \" $opt\"\nopt_silent=false\n\t\t\t;;\n      --tag)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_tag=\"$optarg\"\nfunc_append preserve_args \" $opt $optarg\"\nfunc_enable_tag \"$optarg\"\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t;;\n      --help)\t\tfunc_help\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t;;\n\n      # Separate optargs to long options:\n      --*=*)\n\t\t\tfunc_split_long_opt \"$opt\"\n\t\t\tset dummy \"$func_split_long_opt_name\" \"$func_split_long_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      # Separate non-argument short options:\n      -\\?*|-h*|-n*|-v*)\n\t\t\tfunc_split_short_opt \"$opt\"\n\t\t\tset dummy \"$func_split_short_opt_name\" \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      --)\t\tbreak\t\t\t\t\t;;\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\" ;;\n      *)\t\tset dummy \"$opt\" ${1+\"$@\"};\tshift; break  ;;\n    esac\n  done\n\n  # Validate options:\n\n  # save first non-option argument\n  if test \"$#\" -gt 0; then\n    nonopt=\"$opt\"\n    shift\n  fi\n\n  # preserve --debug\n  test \"$opt_debug\" = : || func_append preserve_args \" --debug\"\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n      ;;\n  esac\n\n  $opt_help || {\n    # Sanity checks first:\n    func_check_version_match\n\n    if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n      func_fatal_configuration \"not configured to build any kind of library\"\n    fi\n\n    # Darwin sucks\n    eval std_shrext=\\\"$shrext_cmds\\\"\n\n    # Only execute mode is allowed to have -dlopen flags.\n    if test -n \"$opt_dlopen\" && test \"$opt_mode\" != execute; then\n      func_error \"unrecognized option \\`-dlopen'\"\n      $ECHO \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Change the help message to a mode-specific one.\n    generic_help=\"$help\"\n    help=\"Try \\`$progname --help --mode=$opt_mode' for more information.\"\n  }\n\n\n  # Bail if the options were screwed\n  $exit_cmd $EXIT_FAILURE\n}\n\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case \"$lt_sysroot:$1\" in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result=\"=$func_stripname_result\"\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $opt_debug\n  func_convert_core_file_wine_to_w32_result=\"$1\"\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"${func_convert_core_file_wine_to_w32_tmp}\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$lt_sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $opt_debug\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\"\"\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\" ; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=\"$func_convert_core_file_wine_to_w32_result\"\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $opt_debug\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: \\`$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $opt_debug\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $opt_debug\n  if test -z \"$2\" && test -n \"$1\" ; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  \\`$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=\"$1\"\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $opt_debug\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  \\`$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=\"$3\"\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $opt_debug\n  case $4 in\n  $1 ) func_to_host_path_result=\"$3$func_to_host_path_result\"\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via `$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $opt_debug\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $opt_debug\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=\"$1\"\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_msys_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_file_wine_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via `$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $opt_debug\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=\"func_convert_path_${func_stripname_result}\"\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $opt_debug\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=\"$1\"\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_msys_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_path_wine_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test \"$opt_mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test \"$opt_help\" = :; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"\\`$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument \\`$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and \\`=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  sed -e \"${sysroot_cmd} s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the \\`$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest \"$opt_mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test \"x$prev\" = x-m && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"$lib\" | $SED 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined(__GNUC__) && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from \\`$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\"\"\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\" ; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=\"$func_basename_result\"\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\" ; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n      win32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $opt_debug\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $opt_debug\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive which possess that section. Heuristic: eliminate\n    # all those which have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $opt_debug\n  if func_cygming_gnu_implib_p \"$1\" ; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\" ; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\"\"\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    if test \"$lock_old_archive_extraction\" = yes; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test \"$lock_old_archive_extraction\" = yes; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ which is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options which match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"${outputname}:${output}:\\${LINENO}: libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* declarations of non-ANSI functions */\n#if defined(__MINGW32__)\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined(__CYGWIN__)\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined (other platforms) ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined(_MSC_VER)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n# ifndef _INTPTR_T_DEFINED\n#  define _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#elif defined(__MINGW32__)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined(__CYGWIN__)\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined (other platforms) ... */\n#endif\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#if defined(LT_DEBUGWRAPPER)\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nvolatile const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (strcmp (argv[i], debug_opt) == 0)\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (strcmp (argv[i], ltwrapper_option_prefix) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $opt_debug\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-flto*|-fwhopr*|-fuse-linker-plugin)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\${$shlibpath_var}\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test \"$prefer_static_libs\" = yes ||\n\t     test \"$prefer_static_libs,$installed\" = \"built,no\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=\"$l\"\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$lt_sysroot$libdir\"\n\t    absdir=\"$lt_sysroot$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  case \"$host\" in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    echo\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$absdir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      func_append linker_flags \" -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      func_append libobjs \" $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$opt_mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest \"$want_nocaseglob\" = yes && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test \"$want_nocaseglob\" = yes; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s,$i,,\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\t# Remove ${wl} instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$opt_mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$opt_mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test \"$try_normal_branch\" = yes \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=${output_objdir}/${output_la}.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$opt_mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$opt_mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test \"$build_libtool_libs\" != yes && libobjs=\"$non_pic_objects\"\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; /\\.lib$/d; $lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" ${wl}-bind_at_load\"\n\t      func_append finalize_command \" ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    func_append oldobjs \" $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$opt_mode\" = link || test \"$opt_mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=yes ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\todir=\"$objdir\"\n      else\n\todir=\"$dir/$objdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$opt_mode\" = uninstall && odir=\"$dir\"\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test \"$opt_mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case \"$opt_mode\" in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$opt_mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      func_append rmfiles \" $odir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$opt_mode\" = uninstall || test \"$opt_mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$opt_mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/loader/extrae-loader.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include <dlfcn.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <unistd.h>\n#include <sys/types.h>\n#include <sys/wait.h>\n#include <libgen.h>\n#include <string.h>\n#include <sys/stat.h>\n\nchar *extrae_home = NULL;\n\nvoid preload_this(char *module)\n{\n  char *current_env = NULL;\n  char new_env[16384];\n\n  current_env = getenv(\"LD_PRELOAD\");\n  if (current_env == NULL)\n  {\n    snprintf(new_env, 16384, \"LD_PRELOAD=%s/lib/%s\", extrae_home, module);\n  }\n  else\n  {\n    snprintf(new_env, 16384, \"LD_PRELOAD=%s:%s/lib/%s\", current_env, extrae_home, module);\n  }\n  putenv(new_env);\n}\n\nvoid show_preload()\n{\n  char *current_env = NULL;\n  char *module_list = NULL;\n  char *token       = NULL;\n  int   num_modules = 0;\n\n  current_env = getenv(\"LD_PRELOAD\");\n  if (current_env != NULL)\n  {\n    module_list = strdup(current_env);\n    token = strtok(module_list, \":\");\n    fprintf(stderr, \"extrae-loader: The following modules will be loaded:\\n\");\n    while (token) \n    {\n      num_modules ++;\n      char *library_name = basename(token);\n      fprintf(stderr, \"#%d: %s [%s]\\n\", num_modules, library_name, token);\n      token = strtok(NULL, \":\");\n    }\n    free( module_list );\n  }\n  else\n  {\n    fprintf(stderr, \"extrae-loader: WARNING: Any module loaded!\\n\");\n  }\n}\n\nint look_for_symbol(void *handle, char *symbol)\n{\n  void *symbol_ptr = NULL;\n  char *error = NULL;\n\n  fprintf(stderr, \"extrae-loader: Looking for '%s'... \", symbol);\n  symbol_ptr = dlsym(handle, symbol); \n  if ((error = dlerror()) != NULL)\n  {\n    fprintf(stderr, \"no (%s)\\n\", error);\n    return 0;\n  }\n  else\n  {\n    fprintf(stderr, \"yes\\n\");\n    return 1;\n  }\n}\n\nint detect_extrae(void *handle)\n{\n  return look_for_symbol(handle, \"Extrae_init\");\n}\n\n#define MPI_SYMBOLS 10\nint detect_mpi(void *handle)\n{\n  int i = 0;\n  int found = 0;\n  char *mpi_symbols[MPI_SYMBOLS] = { \n    \"MPI_Init\", \"mpi_init\", \"mpi_init_\", \"mpi_init__\", \"MPI_INIT\",  \n    \"MPI_Init_thread\", \"mpi_init_thread\", \"mpi_init_thread_\", \"mpi_init_thread__\", \"MPI_INIT_THREAD\",  \n  };\n\n  while ((i<MPI_SYMBOLS) && (!found))\n  {\n    found = look_for_symbol(handle, mpi_symbols[i]);\n    i ++;\n  }\n  return found;\n}\n\n#define OPENMP_SYMBOLS 3\nint detect_openmp(void *handle)\n{\n  int i = 0;\n  int found = 0;\n\n  char *openmp_symbols[OPENMP_SYMBOLS] = {\n    \"_xlsmpParallelDoSetup_TPO\", \"__kmpc_fork_call\", \"GOMP_parallel_start\" \n  };\n\n  while ((i<OPENMP_SYMBOLS) && (!found))\n  {\n    found = look_for_symbol(handle, openmp_symbols[i]);\n    i ++;\n  }\n  return found;\n}\n\nint detect_pthreads(void *handle)\n{\n  return look_for_symbol(handle, \"pthread_create\");\n}\n\nint detect_cuda(void *handle)\n{\n  return look_for_symbol(handle, \"cudaLaunch\");\n}\n\nint detect_opencl(void *handle)\n{\n  return look_for_symbol(handle, \"clCreateBuffer\");\n}\n\nvoid print_help()\n{\n  fprintf(stdout, \"\\nSYNTAX\\n\");\n  fprintf(stdout, \"  extrae-loader [OPTIONS] <binary> [args ...]\\n\\n\");\n  fprintf(stdout, \"OPTIONS\\n\");\n\n  fprintf(stdout, \"\\n\");\n}\n\nint main(int argc, char *argv[])\n{\n  void  *handle      = NULL;\n  char  *app         = NULL;\n  struct stat sb;\n  pid_t  child_pid;\n  int    child_status;\n  int    have_extrae   = 0;\n  int    have_mpi      = 0;\n  int    have_openmp   = 0;\n  int    have_pthreads = 0;\n  int    have_cuda     = 0;\n  int    have_opencl   = 0;\n\n  extrae_home = getenv(\"EXTRAE_HOME\");\n  if (extrae_home == NULL)\n  {\n    fprintf(stderr, \"extrae-loader: ERROR: Environment variable EXTRAE_HOME is not set!\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  if (argc != 2)\n  {\n    print_help();\n    exit(EXIT_FAILURE);\n  }\n\n  app = argv[1];\n\n  if (stat(app, &sb) != 0)\n  {\n    fprintf(stderr, \"extrae-loader: ERROR: Can not find binary '%s'\\n\", app);\n    exit(EXIT_FAILURE);\n  }\n  else if (!(sb.st_mode & S_IXUSR))\n  {\n    fprintf(stderr, \"extrae-loader: ERROR: File '%s' is not an executable\\n\", app);\n    exit(EXIT_FAILURE);\n  }\n\n  fprintf(stderr, \"extrae-loader: Opening application binary '%s'... \", app);\n  handle = dlopen(app, RTLD_LAZY);\n  if (!handle)\n  {\n    fprintf(stderr, \"error!\\n%s\\n\", dlerror());\n    exit(EXIT_FAILURE);\n  }\n  fprintf(stderr, \"ok!\\n\");\n  dlerror(); /* Clear any existing error */\n\n  have_extrae = detect_extrae(handle);\n  have_mpi = detect_mpi(handle);\n  have_openmp = detect_openmp(handle);\n  if (!have_openmp)\n  {\n    have_pthreads = detect_pthreads(handle); \n  }\n  have_cuda = detect_cuda(handle);\n  have_opencl = detect_opencl(handle);\n\n  if (have_extrae == 0)\n  {\n    fprintf(stderr, \"extrae-loader: Extrae core not detected\\n\");\n    preload_this(\"libextrae-core.so\");\n  }\n  if (have_mpi == 1)\n  {\n    fprintf(stderr, \"extrae-loader: MPI detected\\n\");\n    preload_this(\"libextrae-mpi.so\");\n  }\n  if (have_openmp == 1)\n  {\n    fprintf(stderr, \"extrae-loader: OpenMP detected\\n\");\n    preload_this(\"libextrae-openmp.so\");\n  }\n\n  show_preload();\n\n  child_pid = fork();\n  if (child_pid == 0) \n  {\n    /* This is done by the child process. */\n    execv (\"/home/bsc41/bsc41127/tests/single-lib-extrae/app\", NULL);\n    /* If execv returns, it must have failed. */\n    fprintf(stderr, \"Unknown command\\n\");\n    exit(0);\n  }\n  else \n  {\n    pid_t tpid;\n    /* This is run by the parent.  Wait for the child to terminate. */\n    do \n    {\n      tpid = wait(&child_status);\n    } while(tpid != child_pid);\n\n    return child_status;\n  }\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/pthread/pthread_wrapper.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_PTHREAD_H\n# include <pthread.h>\n#endif\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef  __USE_GNU\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#ifdef HAVE_TIME_H\n# include <time.h>\n#endif\n\n#include \"wrapper.h\"\n#include \"trace_macros.h\"\n#include \"pthread_probe.h\"\n\n// #define DEBUG\n//#define DEBUG_MUTEX\n\n#if defined(PIC)\nstatic int (*pthread_create_real)(pthread_t*,const pthread_attr_t*,void *(*) (void *),void*) = NULL;\nstatic int (*pthread_join_real)(pthread_t,void**) = NULL;\nstatic int (*pthread_detach_real)(pthread_t) = NULL;\nstatic void (*pthread_exit_real)(void*) = NULL;\n#if defined(HAVE_PTHREAD_BARRIER_WAIT)\nstatic int (*pthread_barrier_wait_real)(pthread_barrier_t *barrier) = NULL;\n#endif\n\nstatic int (*pthread_mutex_lock_real)(pthread_mutex_t*) = NULL;\nstatic int (*pthread_mutex_trylock_real)(pthread_mutex_t*) = NULL;\nstatic int (*pthread_mutex_timedlock_real)(pthread_mutex_t*,const struct timespec *) = NULL;\nstatic int (*pthread_mutex_unlock_real)(pthread_mutex_t*) = NULL;\n\n#if 0\n/* HSG\n   instrumenting these routines makes the included examples deadlock when running... \n*/\nstatic int (*pthread_cond_signal_real)(pthread_cond_t*) = NULL;\nstatic int (*pthread_cond_broadcast_real)(pthread_cond_t*) = NULL;\nstatic int (*pthread_cond_wait_real)(pthread_cond_t*,pthread_mutex_t*) = NULL;\nstatic int (*pthread_cond_timedwait_real)(pthread_cond_t*,pthread_mutex_t*,const struct timespec *) = NULL;\n#endif\n\nstatic int (*pthread_rwlock_rdlock_real)(pthread_rwlock_t *) = NULL;\nstatic int (*pthread_rwlock_tryrdlock_real)(pthread_rwlock_t *) = NULL;\nstatic int (*pthread_rwlock_timedrdlock_real)(pthread_rwlock_t *, const struct timespec *) = NULL;\nstatic int (*pthread_rwlock_wrlock_real)(pthread_rwlock_t *) = NULL;\nstatic int (*pthread_rwlock_trywrlock_real)(pthread_rwlock_t *) = NULL;\nstatic int (*pthread_rwlock_timedwrlock_real)(pthread_rwlock_t *, const struct timespec *) = NULL;\nstatic int (*pthread_rwlock_unlock_real)(pthread_rwlock_t *) = NULL;\n\nstatic pthread_mutex_t extrae_pthread_create_mutex;\n\n#endif /* PIC */\n\nstatic void GetpthreadHookPoints (int rank)\n{\n#if defined(PIC)\n\t/* Create mutex to protect pthread_create calls */\n\tpthread_mutex_init (&extrae_pthread_create_mutex, NULL);\n\n\t/* Obtain @ for pthread_create */\n\tpthread_create_real =\n\t\t(int(*)(pthread_t*,const pthread_attr_t*,void *(*) (void *),void*))\n\t\tdlsym (RTLD_NEXT, \"pthread_create\");\n\tif (pthread_create_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_create in DSOs!!\\n\");\n\n\t/* Obtain @ for pthread_join */\n\tpthread_join_real =\n\t\t(int(*)(pthread_t,void**)) dlsym (RTLD_NEXT, \"pthread_join\");\n\tif (pthread_join_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_join in DSOs!!\\n\");\n\n#if defined(HAVE_PTHREAD_BARRIER_WAIT)\n  \t/* Obtain @ for pthread_barrier_wait */\n\tpthread_barrier_wait_real =\n\t\t(int(*)(pthread_barrier_t *)) dlsym (RTLD_NEXT, \"pthread_barrier_wait\");\n\tif (pthread_barrier_wait_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_barrier_wait in DSOs!!\\n\");\n#endif\n\n\t/* Obtain @ for pthread_detach */\n\tpthread_detach_real = (int(*)(pthread_t)) dlsym (RTLD_NEXT, \"pthread_detach\");\n\tif (pthread_detach_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_detach in DSOs!!\\n\");\n\n\t/* Obtain @ for pthread_exit */\n\tpthread_exit_real = (void(*)(void*)) dlsym (RTLD_NEXT, \"pthread_exit\");\n\tif (pthread_exit_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_exit in DSOs!!\\n\");\n\n\t/* Obtain @ for pthread_mutex_lock */\n\tpthread_mutex_lock_real = (int(*)(pthread_mutex_t*)) dlsym (RTLD_NEXT, \"pthread_mutex_lock\");\n\tif (pthread_mutex_lock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_lock in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_mutex_unlock */\n\tpthread_mutex_unlock_real = (int(*)(pthread_mutex_t*)) dlsym (RTLD_NEXT, \"pthread_mutex_unlock\");\n\tif (pthread_mutex_unlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_unlock in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_mutex_trylock */\n\tpthread_mutex_trylock_real = (int(*)(pthread_mutex_t*)) dlsym (RTLD_NEXT, \"pthread_mutex_trylock\");\n\tif (pthread_mutex_trylock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_trylock in DSOs!!\\n\");\n\n\t/* Obtain @ for pthread_mutex_timedlock */\n\tpthread_mutex_timedlock_real = (int(*)(pthread_mutex_t*,const struct timespec*)) dlsym (RTLD_NEXT, \"pthread_mutex_timedlock\");\n\tif (pthread_mutex_timedlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_mutex_timedlock in DSOs!!\\n\");\n\n#if 0\n\t/* Obtain @ for pthread_cond_signal */\n\tpthread_cond_signal_real = (int(*)(pthread_cond_t*)) dlsym (RTLD_NEXT, \"pthread_cond_signal\");\n\tif (pthread_cond_signal_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_cond_signal in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_cond_broadcast */\n\tpthread_cond_broadcast_real = (int(*)(pthread_cond_t*)) dlsym (RTLD_NEXT, \"pthread_cond_broadcast\");\n\tif (pthread_cond_broadcast_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_cond_broadcast in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_cond_wait */\n\tpthread_cond_wait_real = (int(*)(pthread_cond_t*,pthread_mutex_t*)) dlsym (RTLD_NEXT, \"pthread_cond_wait\");\n\tif (pthread_cond_wait_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_cond_wait in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_cond_timedwait */\n\tpthread_cond_timedwait_real = (int(*)(pthread_cond_t*,pthread_mutex_t*,const struct timespec*)) dlsym (RTLD_NEXT, \"pthread_cond_timedwait\");\n\tif (pthread_cond_timedwait_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_cond_timedwait in DSOs!!\\n\");\n#endif\n\t\n\t/* Obtain @ for pthread_rwlock_rdlock */\n\tpthread_rwlock_rdlock_real = (int(*)(pthread_rwlock_t*)) dlsym (RTLD_NEXT, \"pthread_rwlock_rdlock\");\n\tif (pthread_rwlock_rdlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_rwlock_rdlock in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_rwlock_tryrdlock */\n\tpthread_rwlock_tryrdlock_real = (int(*)(pthread_rwlock_t*)) dlsym (RTLD_NEXT, \"pthread_rwlock_tryrdlock\");\n\tif (pthread_rwlock_tryrdlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_rwlock_tryrdlock in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_rwlock_timedrdlock */\n\tpthread_rwlock_timedrdlock_real = (int(*)(pthread_rwlock_t *, const struct timespec *)) dlsym (RTLD_NEXT, \"pthread_rwlock_timedrdlock\");\n\tif (pthread_rwlock_timedrdlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_rwlock_timedrdlock in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_rwlock_rwlock */\n\tpthread_rwlock_wrlock_real = (int(*)(pthread_rwlock_t*)) dlsym (RTLD_NEXT, \"pthread_rwlock_wrlock\");\n\tif (pthread_rwlock_wrlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_rwlock_wrlock in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_rwlock_tryrwlock */\n\tpthread_rwlock_trywrlock_real = (int(*)(pthread_rwlock_t*)) dlsym (RTLD_NEXT, \"pthread_rwlock_trywrlock\");\n\tif (pthread_rwlock_trywrlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_rwlock_trywrlock in DSOs!!\\n\");\n\t\n\t/* Obtain @ for pthread_rwlock_timedrwlock */\n\tpthread_rwlock_timedwrlock_real = (int(*)(pthread_rwlock_t *, const struct timespec *)) dlsym (RTLD_NEXT, \"pthread_rwlock_timedwrlock\");\n\tif (pthread_rwlock_timedwrlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_rwlock_timedwrlock in DSOs!!\\n\");\n\n\t/* Obtain @ for pthread_rwlock_unlock */\n\tpthread_rwlock_unlock_real = (int(*)(pthread_rwlock_t*)) dlsym (RTLD_NEXT, \"pthread_rwlock_unlock\");\n\tif (pthread_rwlock_unlock_real == NULL && rank == 0)\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to find pthread_rwlock_unlock in DSOs!!\\n\");\n#else\n\tfprintf (stderr, PACKAGE_NAME\": Warning! pthread instrumentation requires linking with shared library!\\n\");\n#endif /* PIC */\n}\n\n/*\n\n   INJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\t INJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\n*/\n\n#if defined(PIC)\n\nstruct pthread_create_info\n{\n\tint pthreadID;\n\tvoid *(*routine)(void*);\n\tvoid *arg;\n\t\n\tpthread_cond_t wait;\n\tpthread_mutex_t lock;\n};\n\nstatic void * pthread_create_hook (void *p1)\n{\n\tstruct pthread_create_info *i = (struct pthread_create_info*)p1;\n\tvoid *(*routine)(void*) = i->routine;\n\tvoid *arg = i->arg;\n\tvoid *res = 0;\n\n\tBackend_SetpThreadIdentifier (i->pthreadID);\n\n\t/* Notify the calling thread */\n\tpthread_mutex_lock_real (&(i->lock));\n\tpthread_cond_signal (&(i->wait));\n\tpthread_mutex_unlock_real (&(i->lock));\n\n\tBackend_Enter_Instrumentation (2);\n\tProbe_pthread_Function_Entry (routine);\n\tBackend_Leave_Instrumentation ();\n\n\tres = routine (arg);\n\n\t/* Another thread may have called Extrae_fini() while executing\n\t   the routine thread */\n\tif (Extrae_is_initialized_Wrapper() != EXTRAE_NOT_INITIALIZED)\n\t{\n\t\tProbe_pthread_Function_Exit ();\n\t\tBackend_Leave_Instrumentation ();\n\t\tBackend_Flush_pThread (pthread_self());\n\t}\n\n\treturn res;\n}\n\nint pthread_create (pthread_t* p1, const pthread_attr_t* p2,\n\tvoid *(*p3) (void *), void* p4)\n{\n\tstatic int pthread_library_depth = 0;\n\tint res = 0;\n\tstruct pthread_create_info i;\n\n\tif (pthread_create_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_create (%p, %p, %p, %p)\\n\", p1, p2, p3, p4);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_create_real at %p\\n\", pthread_create_real);\n#endif\n\n\tif (pthread_create_real != NULL && EXTRAE_INITIALIZED() && Extrae_get_pthread_tracing())\n\t{\n\t\t/* This is a bit tricky.\n\t\t   Some OSes (like FreeBSD) delegates the pthread library initialization\n\t\t   to the very first call of pthread_create. In order to initialize the \n\t\t   library the OS calls pthread_create again to create the structure for\n\t\t   the main thread.\n\t\t   So, pthread_library_depth > 0 controls this situation\n\t\t*/\n\n\t\t/* Protect creation, just one at a time */\n\t\tpthread_mutex_lock_real (&extrae_pthread_create_mutex);\n\n\t\tif (0 == pthread_library_depth)\n\t\t{\n\t\t\tpthread_library_depth++;\n\n\t\t\tBackend_Enter_Instrumentation (1);\n\n\t\t\tProbe_pthread_Create_Entry (p3);\n\t\t\n\t\t\tpthread_cond_init (&(i.wait), NULL);\n\t\t\tpthread_mutex_init (&(i.lock), NULL);\n\t\t\tpthread_mutex_lock_real (&(i.lock));\n\n\t\t\ti.arg = p4;\n\t\t\ti.routine = p3;\n\t\t\ti.pthreadID = Backend_getNumberOfThreads();\n\n\t\t\tBackend_ChangeNumberOfThreads (i.pthreadID+1);\n\n\t\t\tres = pthread_create_real (p1, p2, pthread_create_hook, (void*) &i);\n\n\t\t\tif (0 == res)\n\t\t\t{\n\t\t\t\t/* if succeded, wait for a completion on copy the info */\n\t\t\t\tpthread_cond_wait (&(i.wait), &(i.lock));\n\n\t\t\t\tBackend_SetpThreadID (p1, i.pthreadID);\n\t\t\t}\n\n\t\t\tpthread_mutex_unlock_real (&(i.lock));\n\t\t\tpthread_mutex_destroy (&(i.lock));\n\t\t\tpthread_cond_destroy (&(i.wait));\n\n\t\t\tProbe_pthread_Create_Exit ();\n\t\t\tBackend_Leave_Instrumentation ();\n\n\t\t\tpthread_library_depth--;\n\t\t}\n\t\telse\n\t\t\tres = pthread_create_real (p1, p2, p3, p4);\n\n\t\t/* Stop protecting the region, more pthread creations can enter */\n\t\tpthread_mutex_unlock_real (&extrae_pthread_create_mutex);\n\t}\n\telse if (pthread_create_real != NULL)\n\t{\n\t\tres = pthread_create_real (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_create was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_join (pthread_t p1, void **p2)\n{\n\tint res = 0;\n\n\tif (pthread_join_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_join (%p, %p)\\n\", p1, p2);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_join_real at %p\\n\", pthread_join_real);\n#endif\n\n\tif (pthread_join_real != NULL && EXTRAE_INITIALIZED() && Extrae_get_pthread_tracing())\n\t{\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_pthread_Join_Entry ();\n\n\t\tres = pthread_join_real (p1, p2);\n\n\t\t/* Careful, initialized state may have changed after join! */\n\t\tif (Extrae_is_initialized_Wrapper())\n\t\t{\n\t\t\tBackend_Flush_pThread (p1);\n\n\t\t\tProbe_pthread_Join_Exit ();\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_join_real != NULL)\n\t{\n\t\tres = pthread_join_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_join was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n\nvoid pthread_exit (void *p1)\n{\n\tif (pthread_exit_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_exit (%p)\\n\", p1);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_exit_real at %p\\n\", pthread_exit_real);\n#endif\n\n\tif (pthread_exit_real != NULL && EXTRAE_INITIALIZED() && Extrae_get_pthread_tracing())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (2);\n\t\t\tProbe_pthread_Function_Exit();\n\t\t\tProbe_pthread_Exit_Entry();\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t\tBackend_Flush_pThread (pthread_self());\n\t\t}\n\n\t\tpthread_exit_real (p1);\n\t}\n\telse if (pthread_exit_real != NULL)\n\t{\n\t\tpthread_exit_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_exit was not hooked\\n\");\n\t\texit (-1);\n\t}\n}\n\nint pthread_detach (pthread_t p1)\n{\n\tint res = 0;\n\n\tif (pthread_detach_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_detach (%p)\\n\", p1);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_detach_real at %p\\n\", pthread_detach_real);\n#endif\n\n\tif (pthread_detach_real != NULL && EXTRAE_INITIALIZED() && Extrae_get_pthread_tracing())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_Detach_Entry ();\n\t\t\tres = pthread_detach_real (p1);\n\t\t\tProbe_pthread_Detach_Exit ();\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_detach_real != NULL)\n\t{\n\t\tres = pthread_detach_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_detach was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n\nint pthread_mutex_lock (pthread_mutex_t *m)\n{\n\tint res = 0;\n\n\tif (pthread_mutex_lock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_lock (%p)\\n\", m);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_lock_real at %p\\n\", pthread_mutex_lock_real);\n#endif\n\n\t/* Caution! pthread_exit() seems to call pthread_mutex_lock */\n\tif (pthread_mutex_lock_real != NULL && EXTRAE_INITIALIZED()\n\t  && Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_mutex_lock_Entry (m);\n\t\t\tres = pthread_mutex_lock_real (m);\n\t\t\tProbe_pthread_mutex_lock_Exit (m);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_mutex_lock_real != NULL)\n\t{\n\t\tres = pthread_mutex_lock_real (m);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_mutex_lock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n\nint pthread_mutex_trylock (pthread_mutex_t *m)\n{\n\tint res = 0;\n\n\tif (pthread_mutex_trylock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_trylock (%p)\\n\", m);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_trylock_real at %p\\n\", pthread_mutex_trylock_real);\n#endif\n\n\tif (pthread_mutex_trylock_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_mutex_lock_Entry (m);\n\t\t\tres = pthread_mutex_trylock_real (m);\n\t\t\tProbe_pthread_mutex_lock_Exit (m);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_mutex_trylock_real != NULL)\n\t{\n\t\tres = pthread_mutex_trylock_real (m);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_mutex_trylock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_mutex_timedlock(pthread_mutex_t *m, const struct timespec *t)\n{\n\tint res = 0;\n\n\tif (pthread_mutex_timedlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_timedlock (%p,%p)\\n\", m,t);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_timedlock_real at %p\\n\", pthread_mutex_timedlock_real);\n#endif\n\n\tif (pthread_mutex_timedlock_real != NULL && EXTRAE_INITIALIZED() && \n\t Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_mutex_lock_Entry (m);\n\t\t\tres = pthread_mutex_timedlock_real (m, t);\n\t\t\tProbe_pthread_mutex_lock_Exit (m);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_mutex_timedlock_real != NULL)\n\t{\n\t\tres = pthread_mutex_timedlock_real (m, t);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_mutex_timedlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_mutex_unlock (pthread_mutex_t *m)\n{\n\tint res = 0;\n\n\tif (pthread_mutex_unlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_unlock (%p)\\n\", m);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_mutex_unlock_real at %p\\n\", pthread_mutex_unlock_real);\n#endif\n\n\t/* Caution! pthread_exit() seems to call pthread_mutex_lock */\n\tif (pthread_mutex_unlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_mutex_unlock_Entry (m);\n\t\t\tres = pthread_mutex_unlock_real (m);\n\t\t\tProbe_pthread_mutex_unlock_Exit (m);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_mutex_unlock_real != NULL)\n\t{\n\t\tres = pthread_mutex_unlock_real (m);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_mutex_unlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\n\n#if 0\nint pthread_cond_signal (pthread_cond_t *c)\n{\n\tint res = 0;\n\n\tif (pthread_cond_signal_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_signal (%p)\\n\", c);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_signal_real at %p\\n\", pthread_cond_signal_real);\n#endif\n\n\tif (pthread_cond_signal_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_cond_signal_Entry (c);\n\t\t\tres = pthread_cond_signal_real (c);\n\t\t\tProbe_pthread_cond_signal_Exit (c);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_cond_signal_real != NULL)\n\t{\n\t\tres = pthread_cond_signal_real (c);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_cond_signal was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_cond_broadcast (pthread_cond_t *c)\n{\n\tint res = 0;\n\n\tif (pthread_cond_broadcast_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_broadcast (%p)\\n\", c);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_broadcast_real at %p\\n\", pthread_cond_broadcast_real);\n#endif\n\n\tif (pthread_cond_broadcast_real != NULL && EXTRAE_INITIALIZED() &&\n\t   Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_cond_broadcast_Entry (c);\n\t\t\tres = pthread_cond_broadcast_real (c);\n\t\t\tProbe_pthread_cond_broadcast_Exit (c);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_cond_broadcast_real != NULL)\n\t{\n\t\tres = pthread_cond_broadcast_real (c);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_cond_broadcast was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n\nint pthread_cond_wait (pthread_cond_t *c, pthread_mutex_t *m)\n{\n\tint res = 0;\n\n\tif (pthread_cond_wait_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_wait (%p, %p)\\n\", c, m);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_wait_real at %p\\n\", pthread_cond_wait_real);\n#endif\n\n\tif (pthread_cond_wait_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_cond_wait_Entry (c);\n\t\t\tres = pthread_cond_wait_real (c, m);\n\t\t\tProbe_pthread_cond_wait_Exit (c);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_cond_wait_real != NULL)\n\t{\n\t\tres = pthread_cond_wait_real (c, m);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_cond_wait was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n\nint pthread_cond_timedwait (pthread_cond_t *c, pthread_mutex_t *m, const struct timespec *t)\n{\n\tint res = 0;\n\n\tif (pthread_cond_timedwait_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_timedwait (%p,%p,%p)\\n\", c, m, t);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_cond_wait_real at %p\\n\", pthread_cond_wait_real);\n#endif\n\n\tif (pthread_cond_timedwait_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_cond_wait_Entry (c);\n\t\t\tres = pthread_cond_timedwait_real (c,m,t);\n\t\t\tProbe_pthread_cond_wait_Exit (c);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_cond_timedwait_real != NULL)\n\t{\n\t\tres = pthread_cond_timedwait_real (c,m,t);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_cond_timedwait was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n#endif\n\nint pthread_rwlock_rdlock (pthread_rwlock_t *l)\n{\n\tint res = 0;\n\n\tif (pthread_rwlock_rdlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_rdlock (%p)\\n\", l);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_rdlock_real at %p\\n\", pthread_rwlock_rdlock_real);\n#endif\n\n\tif (pthread_rwlock_rdlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t Extrae_get_pthread_tracing() &&  Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_rwlock_lockrd_Entry (l);\n\t\t\tres = pthread_rwlock_rdlock_real (l);\n\t\t\tProbe_pthread_rwlock_lockrd_Exit (l);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_rwlock_rdlock_real != NULL)\n\t{\n\t\tres = pthread_rwlock_rdlock_real (l);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_rwlock_rdlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_rwlock_tryrdlock(pthread_rwlock_t *l)\n{\n\tint res = 0;\n\n\tif (pthread_rwlock_tryrdlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_tryrdlock (%p)\\n\", l);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_tryrdlock_real at %p\\n\", pthread_rwlock_tryrdlock_real);\n#endif\n\n\tif (pthread_rwlock_tryrdlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_rwlock_lockrd_Entry (l);\n\t\t\tres = pthread_rwlock_tryrdlock_real (l);\n\t\t\tProbe_pthread_rwlock_lockrd_Exit (l);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_rwlock_tryrdlock_real != NULL)\n\t{\n\t\tres = pthread_rwlock_tryrdlock_real (l);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_rwlock_tryrdlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_rwlock_timedrdlock(pthread_rwlock_t *l, const struct timespec *t)\n{\n\tint res = 0;\n\n\tif (pthread_rwlock_timedrdlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_timedrdlock (%p, %p)\\n\", l, t);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_timedrdlock_real at %p\\n\", pthread_rwlock_timedrdlock_real);\n#endif\n\n\tif (pthread_rwlock_timedrdlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_rwlock_lockrd_Entry (l);\n\t\t\tres = pthread_rwlock_timedrdlock_real (l, t);\n\t\t\tProbe_pthread_rwlock_lockrd_Exit (l);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_rwlock_timedrdlock_real != NULL)\n\t{\n\t\tres = pthread_rwlock_timedrdlock_real (l, t);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_rwlock_timedrdlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_rwlock_wrlock(pthread_rwlock_t *l)\n{\n\tint res = 0;\n\n\tif (pthread_rwlock_wrlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_wrlock (%p)\\n\", l);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_wrlock_real at %p\\n\", pthread_rwlock_wrlock_real);\n#endif\n\n\tif (pthread_rwlock_wrlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_rwlock_lockwr_Entry (l);\n\t\t\tres = pthread_rwlock_wrlock_real (l);\n\t\t\tProbe_pthread_rwlock_lockwr_Exit (l);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_rwlock_wrlock_real != NULL)\n\t{\n\t\tres = pthread_rwlock_wrlock_real (l);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_rwlock_wrlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n\nint pthread_rwlock_trywrlock(pthread_rwlock_t *l)\n{\n\tint res = 0;\n\n\tif (pthread_rwlock_trywrlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_trywrlock (%p)\\n\", l);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_trywrlock_real at %p\\n\", pthread_rwlock_trywrlock_real);\n#endif\n\n\tif (pthread_rwlock_trywrlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_rwlock_lockwr_Entry (l);\n\t\t\tres = pthread_rwlock_trywrlock_real (l);\n\t\t\tProbe_pthread_rwlock_lockwr_Exit (l);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_rwlock_trywrlock_real != NULL)\n\t{\n\t\tres = pthread_rwlock_trywrlock_real (l);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_rwlock_trywrlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n\nint pthread_rwlock_timedwrlock(pthread_rwlock_t *l, const struct timespec *t)\n{\n\tint res = 0;\n\n\tif (pthread_rwlock_timedwrlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_timedwrlock (%p)\\n\", l);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_timedwrlock_real at %p\\n\", pthread_rwlock_timedwrlock_real);\n#endif\n\n\tif (pthread_rwlock_timedwrlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_rwlock_lockwr_Entry (l);\n\t\t\tres = pthread_rwlock_timedwrlock_real (l, t);\n\t\t\tProbe_pthread_rwlock_lockwr_Exit (l);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_rwlock_timedwrlock_real != NULL)\n\t{\n\t\tres = pthread_rwlock_timedwrlock_real (l, t);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": pthread_rwlock_timedwrlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\nint pthread_rwlock_unlock(pthread_rwlock_t *l)\n{\n\tint res = 0;\n\n\tif (pthread_rwlock_unlock_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG) && defined(DEBUG_MUTEX)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_unlock (%p)\\n\", l);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_rwlock_unlock_real at %p\\n\", pthread_rwlock_unlock_real);\n#endif\n\n\tif (pthread_rwlock_unlock_real != NULL && EXTRAE_INITIALIZED() &&\n\t Extrae_get_pthread_tracing() && Extrae_get_pthread_instrument_locks())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (1);\n\t\t\tProbe_pthread_rwlock_unlock_Entry (l);\n\t\t\tres = pthread_rwlock_unlock_real (l);\n\t\t\tProbe_pthread_rwlock_unlock_Exit (l);\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_rwlock_unlock_real != NULL)\n\t{\n\t\tres = pthread_rwlock_unlock_real (l);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": pthread_rwlock_unlock was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\n#if defined(HAVE_PTHREAD_BARRIER_WAIT)\nint pthread_barrier_wait (pthread_barrier_t *barrier)\n{\n\tint res = 0;\n\n\tif (pthread_barrier_wait_real == NULL)\n\t\tGetpthreadHookPoints(0);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_barrier_wait (%p)\\n\", barrier);\n\tfprintf (stderr, PACKAGE_NAME\": DEBUG: pthread_barrier_wait_real at %p\\n\", pthread_barrier_wait_real);\n#endif\n\tif (pthread_barrier_wait_real != NULL && EXTRAE_INITIALIZED() &&\n\t  Extrae_get_pthread_tracing())\n\t{\n\t\tif (!Backend_ispThreadFinished(THREADID))\n\t\t{\n\t\t\tBackend_Enter_Instrumentation (2);\n\t\t\tProbe_pthread_Barrier_Wait_Entry ();\n\t\t\tres = pthread_barrier_wait_real (barrier);\n\t\t\tProbe_pthread_Barrier_Wait_Exit ();\n\t\t\tBackend_Leave_Instrumentation ();\n\t\t}\n\t}\n\telse if (pthread_barrier_wait_real != NULL)\n\t{\n\t\tres = pthread_barrier_wait_real (barrier);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error pthread_barrier_wait was not hooked\\n\");\n\t\texit (-1);\n\t}\n\treturn res;\n}\n#endif /* OS_ANDROID */\n#endif /* PIC */\n\n/*\n  This __attribute__ tells the loader to run this routine when\n  the shared library is loaded \n*/\nvoid __attribute__ ((constructor)) pthread_tracing_init(void);\nvoid pthread_tracing_init (void)\n{\n\tGetpthreadHookPoints (0);\n\tBackend_CreatepThreadIdentifier ();\n}\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/MPI/mpi_wrapper.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#define _GNU_SOURCE\n#include \"common.h\"\n\n//#define DEBUG_SPAWN\n\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n# include <sys/stat.h>\n#endif\n#ifdef HAVE_SYS_FILE_H\n# include <sys/file.h>\n#endif\n#ifdef HAVE_FCNTL_H\n# include <fcntl.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_STRING_H\n# include <string.h>\n#endif\n#ifdef WITH_PMPI_HOOK\n# include <dlfcn.h>\n#endif\n\n#include \"utils.h\"\n#include \"utils_mpi.h\"\n#include \"mpi_wrapper.h\"\n#include \"wrapper.h\"\n#include \"clock.h\"\n#include \"signals.h\"\n#include \"misc_wrapper.h\"\n#include \"mpi_interface.h\"\n#include \"mode.h\"\n#include \"threadinfo.h\"\n\n#include <mpi.h>\n#include \"extrae_mpif.h\"\n\n#if defined(C_SYMBOLS) && defined(FORTRAN_SYMBOLS)\n# define COMBINED_SYMBOLS\n#endif\n\n#if defined(HAVE_MRNET)\n# include \"mrnet_be.h\"\n#endif\n\n#define MPI_COMM_WORLD_ALIAS 1\n#define MPI_COMM_SELF_ALIAS  2\n#define MPI_NEW_INTERCOMM_ALIAS  3\n\n#if !defined(MPI_HAS_MPI_F_STATUS_IGNORE)\n# define MPI_F_STATUS_IGNORE   ((MPI_Fint *) 0)\n# define MPI_F_STATUSES_IGNORE ((MPI_Fint *) 0)\n#endif\n\n/*\n\tHe d'incloure la capc,alera del misc_wrapper per poder comenc,ar \n\ta tracejar quan es cridi al MPI_init i acabar al MPI_Finalize.\n*/\n#include \"misc_wrapper.h\"\n\n/* Cal tenir requests persistents per algunes operacions */\n#include \"persistent_requests.h\"\n\n#ifdef HAVE_NETINET_IN_H\n# include <netinet/in.h>\n#endif\n\n#define MPI_CHECK(mpi_error, routine) \\\n\tif (mpi_error != MPI_SUCCESS) \\\n\t{ \\\n\t\tfprintf (stderr, \"Error in MPI call %s (file %s, line %d, routine %s) returned %d\\n\", \\\n\t\t\t#routine, __FILE__, __LINE__, __func__, mpi_error); \\\n\t\tfflush (stderr); \\\n\t\texit (1); \\\n\t}\n\n#define MAX_WAIT_REQUESTS 16384\n\nstatic unsigned Extrae_MPI_NumTasks (void)\n{\n\tstatic int run = FALSE;\n\tstatic int mysize;\n\n\tif (!run)\n\t{\n\t\tPMPI_Comm_size (MPI_COMM_WORLD, &mysize);\n\t\trun = TRUE;\n\t}\n\n\treturn (unsigned) mysize;\n}\n\nstatic unsigned Extrae_MPI_TaskID (void)\n{\n\tstatic int run = FALSE;\n\tstatic int myrank;\n\n\tif (!run)\n\t{\n\t\tPMPI_Comm_rank (MPI_COMM_WORLD, &myrank);\n\t\trun = TRUE;\n\t}\n\n\treturn (unsigned) myrank;\n}\n\nstatic void Extrae_MPI_Barrier (void)\n{\n\tPMPI_Barrier (MPI_COMM_WORLD);\n}\n\nstatic void Extrae_MPI_Finalize (void)\n{\n\tPMPI_Finalize ();\n}\n\nstatic void Trace_MPI_Communicator (MPI_Comm newcomm, UINT64 time, int trace);\nstatic void Trace_MPI_InterCommunicator (MPI_Comm newcomm, MPI_Comm local_comm,\n\tint local_leader, MPI_Comm remote_comm, int remote_leader, UINT64 time,\n\tint trace);\n\n/******************************************************************************\n ********************      L O C A L    V A R I A B L E S        **************\n ******************************************************************************/\n\nchar *MpitsFileName    = NULL;    /* Name of the .mpits file (only significant at rank 0) */\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\nchar *SpawnsFileName   = NULL;    /* Name of the .spawn file (all tasks have it defined)  */\nint   SpawnGroup       = 0;\nint  *ParentWorldRanks = NULL;    /* World ranks of the parent processes \n  (index is local rank for the parent process, value is the parent world rank) */\nunsigned long long SpawnOffset = 0;\n#endif\n\nchar *Extrae_core_get_mpits_file_name (void)\n{\n\treturn MpitsFileName;\n}\n\nhash_t requests;         /* Receive requests stored in a hash in order to search them fast */\nPR_Queue_t PR_queue;     /* Persistent requests queue */\nstatic int *ranks_global;       /* Global ranks vector (from 1 to NProcs) */\nstatic MPI_Group grup_global;   /* Group attached to the MPI_COMM_WORLD */\nstatic MPI_Fint grup_global_F;  /* Group attached to the MPI_COMM_WORLD (Fortran) */\n\n#if defined(IS_BGL_MACHINE)     /* BGL, s'intercepten algunes crides barrier dins d'altres cols */\nstatic int BGL_disable_barrier_inside = 0;\n#endif\n\n/******************************************************************************\n *** CheckGlobalOpsTracingIntervals()\n ******************************************************************************/\nvoid CheckGlobalOpsTracingIntervals (void)\n{\n\tint result;\n\n\tresult = GlobalOp_Changes_Trace_Status (Extrae_MPI_getCurrentOpGlobal());\n\tif (result == SHUTDOWN)\n\t\tExtrae_shutdown_Wrapper();\n\telse if (result == RESTART)\n\t\tExtrae_restart_Wrapper();\n}\n\n/******************************************************************************\n ***  get_rank_obj_C\n ******************************************************************************/\n\nint get_rank_obj_C (MPI_Comm comm, int dest, int *receiver, int send_or_recv)\n{\n\tint ret, inter;\n\tMPI_Group group;\n\n\t/* If rank in MPI_COMM_WORLD or if dest is PROC_NULL or any source,\n\t   return value directly */\n\tif (comm == MPI_COMM_WORLD || dest == MPI_PROC_NULL || dest == MPI_ANY_SOURCE)\n\t{\n\t\t*receiver = dest;\n\t}\n\telse\n\t{\n\t\tret = PMPI_Comm_test_inter (comm, &inter);\t\n\t\tMPI_CHECK (ret, PMPI_Comm_test_inter);\n\n\t\tif (inter)\n\t\t{\n                        MPI_Comm parent;\n                        PMPI_Comm_get_parent(&parent);\n\n                        /* The communicator is an intercommunicator */\n                        if (send_or_recv == RANK_OBJ_SEND)\n                        {\n                                if (comm == parent)\n                                {\n                                        /* Send to parent -- Translate the local rank for the parent into its MPI_COMM_WORLD rank */\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n                                        if (ParentWorldRanks != NULL)\n                                                *receiver = ParentWorldRanks[dest];\n                                        else\n#endif\n                                                *receiver = dest; /* Should never happen */\n                                }\n                                else\n                                {\n                                        /* Send to children -- When sending to specific childen X, there's no need to translate ranks */\n                                        *receiver = dest;\n                                }\n                        }\n                        else\n                        {\n                                if (comm == parent)\n                                {\n                                        /* Recv from parent -- Translate the local rank for the parent into its MPI_COMM_WORLD rank */\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n                                        if (ParentWorldRanks != NULL)\n                                                *receiver = ParentWorldRanks[dest];\n                                        else\n#endif\n                                                *receiver = dest; /* Should never happen */\n                                }\n                                else\n                                {\n                                        /* Recv from children -- When receiving from specific childen X, there's no need to translate ranks */\n                                        *receiver = dest;\n                                }\n                        }\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* The communicator is an intracommunicator */\n\t\t\tret = PMPI_Comm_group (comm, &group);\n\t\t\tMPI_CHECK (ret, PMPI_Comm_group);\n\n\t\t\t/* Translate the rank */\n\t\t\tret = PMPI_Group_translate_ranks (group, 1, &dest, grup_global, receiver); \n\t\t\tMPI_CHECK (ret, PMPI_Group_translate_ranks);\n\t\t\t\n\t\t\tret = PMPI_Group_free (&group);\n\t\t\tMPI_CHECK (ret, PMPI_Group_free);\n\t\t}\n\t}\n\treturn MPI_SUCCESS;\n}\n\n/******************************************************************************\n ***  Traceja_Persistent_Request\n ******************************************************************************/\n\nstatic void Traceja_Persistent_Request (MPI_Request* reqid, iotimer_t temps)\n{\n\tpersistent_req_t *p_request;\n\thash_data_t hash_req;\n\tint inter;\n\tint size, src_world, ret;\n\tint send_or_recv;\n\n\t/*\n\t* S'intenta recuperar la informacio d'aquesta request per tracejar-la \n\t*/\n\tp_request = PR_Busca_request (&PR_queue, reqid);\n\tif (p_request == NULL)\n\t\treturn;\n\n\t/* \n\t  HSG, aixo es pot emmagatzemar a la taula de hash! A mes,\n\t  pot ser que hi hagi un problema a l'hora de calcular els  bytes p2p\n\t  pq ignora la quantitat de dades enviada\n\t*/\n\tret = PMPI_Type_size (p_request->datatype, &size);\n\tMPI_CHECK(ret, PMPI_Type_size);\n\n\tsend_or_recv = (p_request->tipus == MPI_IRECV_EV ? RANK_OBJ_RECV : RANK_OBJ_SEND );\n\tif (get_rank_obj_C (p_request->comm, p_request->task, &src_world, send_or_recv) != MPI_SUCCESS)\n\t\treturn;\n\n\tif (p_request->tipus == MPI_IRECV_EV)\n\t{\n\t\t/*\n\t\t * Als recv guardem informacio pels WAITs \n\t\t*/\n\t\thash_req.key = *reqid;\n\t\thash_req.commid = p_request->comm;\n\t\thash_req.partner = p_request->task;\n\t\thash_req.tag = p_request->tag;\n\t\thash_req.size = p_request->count * size;\n\n\t\tif (p_request->comm == MPI_COMM_WORLD)\n\t\t{\n\t\t\thash_req.group = MPI_GROUP_NULL;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tret = PMPI_Comm_test_inter (p_request->comm, &inter);\n\t\t\tMPI_CHECK (ret, PMPI_Comm_test_inter);\n\t\t\t\n\t\t\tif (inter)\n\t\t\t{\n\t\t\t\tret = PMPI_Comm_remote_group (p_request->comm, &hash_req.group);\n\t\t\t\tMPI_CHECK (ret, PMPI_Comm_remote_group);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tret = PMPI_Comm_group (p_request->comm, &hash_req.group);\t\n\t\t\t\tMPI_CHECK (ret, PMPI_Comm_group);\n\t\t\t}\n\t\t}\n\n\t\thash_add (&requests, &hash_req);\n\t}\n\n\t/*\n\t*   event : PERSIST_REQ_EV                        value : Request type\n\t*   target : MPI_ANY_SOURCE or sender/receiver    size  : buffer size\n\t*   tag : message tag or MPI_ANY_TAG              commid: Communicator id\n\t*   aux: request id\n\t*/\n\tTRACE_MPIEVENT_NOHWC (temps, MPI_PERSIST_REQ_EV, p_request->tipus,\n\t  src_world, size, p_request->tag, p_request->comm, p_request->req);\n}\n\n\n/******************************************************************************\n *** CheckControlFile()\n ******************************************************************************/\n\n/* This counter indicates when will be the next check for the control file */\nunsigned int NumOpsGlobalsCheckControlFile        = 10;\nunsigned int NumOpsGlobalsCheckControlFile_backup = 10;\n\nunsigned long long CalculateNumOpsForPeriod (unsigned long long wannaPeriod,\n\tunsigned long long NumOfGlobals, unsigned long long runnedPeriod)\n{\n\tif (runnedPeriod <= wannaPeriod * NumOfGlobals)\n\t\treturn (wannaPeriod * NumOfGlobals) / runnedPeriod;\n\n\treturn 1;\n}\n\nvoid CheckControlFile(void)\n{\n\tunsigned int prevtracejant = tracejant;\n\tunsigned int wannatrace = 0;\n\n\tNumOpsGlobalsCheckControlFile--;\n\t\n\tif (!NumOpsGlobalsCheckControlFile)\n\t{\n\t\tif (TASKID == 0)\n\t\t{\n\t\t\twannatrace = file_exists (Extrae_getCheckControlFileName());\n\t\t\tif (wannatrace != prevtracejant)\n\t\t\t{\n\t\t\t\tfprintf (stdout, PACKAGE_NAME\": Tracing is %s via control file\\n\", (wannatrace)?\"activated\":\"deactivated\");\n\t\t\t\tif (wannatrace)\n\t\t\t\t\tmpitrace_on = TRUE;\n\t\t\t}\n\n\t\t\tif (WantedCheckControlPeriod != 0)\n\t\t\t{\n\t\t\t\tNumOpsGlobalsCheckControlFile_backup = CalculateNumOpsForPeriod (WantedCheckControlPeriod, NumOpsGlobalsCheckControlFile_backup, TIME - initTracingTime);\n\t\t\t\tfprintf (stderr, PACKAGE_NAME\": Control file check change, now every %u global ops (%llu s)\\n\", NumOpsGlobalsCheckControlFile_backup, WantedCheckControlPeriod / 1000000000);\n\t\t\t}\n\t\t}\n\n\t\t/* Broadcast the following num of global-num-ops before being checked*/\n\t\tPMPI_Bcast (&NumOpsGlobalsCheckControlFile_backup, 1, MPI_LONG_LONG_INT, 0, \n\t\t\tMPI_COMM_WORLD);\n\n\t\t/* Broadcast both mpitrace_on & tracing */\n\t\t{\n\t\t\tint valors[2] = { wannatrace, mpitrace_on };\n\t\t\tPMPI_Bcast (valors, 2, MPI_INT, 0, MPI_COMM_WORLD);\n\t\t\twannatrace = valors[0];\n\t\t\tmpitrace_on = valors[1];\n\n\t\t\tif (mpitrace_on)\n\t\t\t{\n\t\t\t\t/* Turn on if it was off, and turn off it it was on */\n\t\t\t\tif (wannatrace && !prevtracejant)\n\t\t\t\t\tExtrae_restart_Wrapper();\n\t\t\t\telse if (!wannatrace && prevtracejant)\n\t\t\t\t\tExtrae_shutdown_Wrapper();\n\t\t\t}\n\t\t}\n\n\t\t/* If the tracing has been enabled, just change the init tracing time. */\n\t\t/* If not, just reset init tracing time so as the next period will be \n\t\t   calculated from this point */\n\t\tif (mpitrace_on && initTracingTime == 0)\n\t\t\tinitTracingTime = TIME;\n\n\t\tNumOpsGlobalsCheckControlFile = NumOpsGlobalsCheckControlFile_backup;\n\t}\n}\n\n/******************************************************************************\n ***  InitMPICommunicators\n ******************************************************************************/\n\nstatic void InitMPICommunicators (void)\n{\n\tunsigned i;\n\n\t/** Inicialitzacio de les variables per la creacio de comunicadors **/\n\tranks_global = malloc (sizeof(int)*Extrae_get_num_tasks());\n\tif (ranks_global == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error! Unable to get memory for 'ranks_global'\");\n\t\texit (0);\n\t}\n\n\tfor (i = 0; i < Extrae_get_num_tasks(); i++)\n\t\tranks_global[i] = i;\n\n\tPMPI_Comm_group (MPI_COMM_WORLD, &grup_global);\n\tgrup_global_F = MPI_Group_c2f(grup_global);\n\n\tint s = 0;\n\tPMPI_Group_size( grup_global, &s );\n}\n\n\n/******************************************************************************\n ***  MPI_remove_file_list\n ******************************************************************************/\nvoid MPI_remove_file_list (int all)\n{\n\tchar tmpname[1024];\n\n\tif (all || (!all && TASKID == 0))\n\t{\n\t\tsprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_MPITS);\n\t\tunlink (tmpname);\n\t}\n}\n\n/******************************************************************************\n ***  Get_Nodes_Info\n ******************************************************************************/\n\nchar **TasksNodes = NULL;\n\nstatic void Gather_Nodes_Info (void)\n{\n\tunsigned u;\n\tint rc;\n\tsize_t s;\n\tchar hostname[MPI_MAX_PROCESSOR_NAME];\n\tchar *buffer_names = NULL;\n\n\t/* Get processor name */\n\tif (gethostname (hostname, sizeof(hostname)) == -1)\n\t{\n\t\tfprintf (stderr, \"Error! Cannot get hostname!\\n\");\n\t\texit (-1);\n\t}\n\n\t/* Change spaces \" \" into underscores \"_\" (BLG nodes use to have spaces in their names) */\n\tfor (s = 0; s < strlen(hostname); s++)\n\t\tif (' ' == hostname[s])\n\t\t\thostname[s] = '_';\n\n\t/* Share information among all tasks */\n\tbuffer_names = (char*) malloc (sizeof(char) * Extrae_get_num_tasks() * MPI_MAX_PROCESSOR_NAME);\n\tif (buffer_names == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal error! Cannot allocate memory for nodes name\\n\");\n\t\texit (-1);\n\t}\n\trc = PMPI_Allgather (hostname, MPI_MAX_PROCESSOR_NAME, MPI_CHAR, buffer_names, MPI_MAX_PROCESSOR_NAME, MPI_CHAR, MPI_COMM_WORLD);\n\tMPI_CHECK(rc, PMPI_Allgather);\n\n\t/* Store the information in a global array */\n\tTasksNodes = (char **)malloc (Extrae_get_num_tasks() * sizeof(char *));\n\tif (TasksNodes == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal error! Cannot allocate memory for nodes info\\n\");\n\t\texit (-1);\n\t}\n\tfor (u=0; u<Extrae_get_num_tasks(); u++)\n\t{\n\t\tchar *tmp = &buffer_names[u*MPI_MAX_PROCESSOR_NAME];\n\t\tTasksNodes[u] = (char *)malloc((strlen(tmp)+1) * sizeof(char));\n\t\tif (TasksNodes[u] == NULL)\n\t\t{\n\t\t\tfprintf (stderr, PACKAGE_NAME\": Fatal error! Cannot allocate memory for node info %u\\n\", u);\n\t\t\texit (-1);\n\t\t}\n\t\tstrcpy (TasksNodes[u], tmp);\n\t}\n\n\t/* Free the local array, not the global one */\n\tfree (buffer_names);\n}\n\n\n/******************************************************************************\n ***  MPI_Generate_Task_File_List\n ******************************************************************************/\nstatic int MPI_Generate_Task_File_List (char **node_list, int isSpawned)\n{\n\tint filedes, ierror;\n\tunsigned u, ret, thid;\n\tchar tmpname[1024];\n\tunsigned *buffer = NULL;\n\tunsigned tmp[3]; /* we store pid, nthreads and taskid on each position */\n\n\tif (TASKID == 0)\n\t{\n\t\tbuffer = (unsigned *) malloc (sizeof(unsigned) * Extrae_get_num_tasks() * 3);\n\t\t/* we store pid, nthreads and taskid on each position */\n\n\t\tif (buffer == NULL)\n\t\t{\n\t\t\tfprintf (stderr, \"Fatal error! Cannot allocate memory to transfer MPITS info\\n\");\n\t\t\texit (-1);\n\t\t}\n\t}\n\n\ttmp[0] = TASKID; \n\ttmp[1] = getpid();\n\ttmp[2] = Backend_getMaximumOfThreads();\n\n\t/* Share PID and number of threads of each MPI task */\n\tierror = PMPI_Gather (&tmp, 3, MPI_UNSIGNED, buffer, 3, MPI_UNSIGNED, 0, MPI_COMM_WORLD);\n\tMPI_CHECK(ierror, PMPI_Gather);\n\n\t/* If I haven't been MPI_Comm_Spawned, let's clean all the *-%d.mpits we\n\t   have created in earlier execes */\n\tif (TASKID == 0 && !isSpawned)\n\t{\n\t\tif (Extrae_core_get_mpits_file_name() == NULL)\n\t\t{\n\t\t\tint next = TRUE;\n\t\t\tunsigned count = 1;\n\t\t\tdo\n\t\t\t{\n\t\t\t\tif (count > 1)\n\t\t\t\t\tsprintf (tmpname, \"%s/%s-%d%s\", final_dir, appl_name, count, EXT_MPITS);\n\t\t\t\telse\n\t\t\t\t\tsprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_MPITS);\n\n\t\t\t\t/* If the file exists, remove it and its associated .spawn file */\n\t\t\t\tif (file_exists(tmpname))\n\t\t\t\t{\n\t\t\t\t\tif (unlink (tmpname) != 0)\n\t\t\t\t\t\tfprintf (stderr, PACKAGE_NAME\": Warning! Could not clean previous file %s\\n\", tmpname);\n\n\t\t\t\t\tif (count > 1)\n\t\t\t\t\t\tsprintf (tmpname, \"%s/%s-%d%s\", final_dir, appl_name, count, EXT_SPAWN);\n\t\t\t\t\telse\n\t\t\t\t\t\tsprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_SPAWN);\n\n\t\t\t\t\tif (file_exists(tmpname))\n\t\t\t\t\t\tif (unlink (tmpname) != 0)\n\t\t\t\t\t\t\tfprintf (stderr, PACKAGE_NAME\": Warning! Could not clean previous file %s\\n\", tmpname);\n\n\t\t\t\t\tnext = TRUE;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tnext = FALSE;\n\n\t\t\t\tcount++;\n\t\t\t} while (next);\n\t\t}\n\t}\n\n\tif (TASKID == 0)\n\t{\n\t\tif (Extrae_core_get_mpits_file_name() == NULL)\n\t\t{\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\t\t\tdo\n\t\t\t{\n\t\t\t\tSpawnGroup ++;\n\t\t\t\tif (SpawnGroup > 1)\n\t\t\t\t\tsprintf (tmpname, \"%s/%s-%d%s\", final_dir, appl_name, SpawnGroup, EXT_MPITS);\n\t\t\t\telse\n\t\t\t\t\tsprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_MPITS);\n\n\t\t\t\tfiledes = open (tmpname, O_RDWR | O_CREAT | O_EXCL | O_TRUNC, 0644);\n\t\t\t} while (filedes == -1);\n#else\n\t\t\tsprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_MPITS);\n\t\t\tfiledes = open (tmpname, O_RDWR | O_CREAT | O_TRUNC, 0644);\n\t\t\tif (filedes == -1)\n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n#endif\n\t\t\tMpitsFileName = strdup( tmpname );\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfiledes = open (MpitsFileName, O_RDWR | O_CREAT | O_TRUNC, 0644);\n\t\t\tif (filedes == -1) \n\t\t\t{\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t}\n\n\t\tfor (u = 0; u < Extrae_get_num_tasks(); u++)\n\t\t{\n\t\t\tchar tmpline[2048];\n\t\t\tunsigned TID = buffer[u*3+0];\n\t\t\tunsigned PID = buffer[u*3+1];\n\t\t\tunsigned NTHREADS = buffer[u*3+2];\n\n\t\t\tif (u == 0)\n\t\t\t{\n\t\t\t\t/* If Im processing MASTER, I know my threads and their names */\n\t\t\t\tfor (thid = 0; thid < NTHREADS; thid++)\n\t\t\t\t{\n\t\t\t\t\tFileName_PTT(tmpname, Get_FinalDir(TID), appl_name,\n\t\t\t\t\t  node_list[u], PID, TID, thid, EXT_MPIT);\n\t\t\t\t\tsprintf (tmpline, \"%s named %s\\n\", tmpname,\n\t\t\t\t\t  Extrae_get_thread_name(thid));\n\t\t\t\t\tret = write (filedes, tmpline, strlen (tmpline));\n\t\t\t\t\tif (ret != strlen (tmpline))\n\t\t\t\t\t{\n\t\t\t\t\t\tclose (filedes);\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t/* If Im not processing MASTER, I have to ask for threads and their names */\n\n\t\t\t\tint foo;\n\t\t\t\tMPI_Status s;\n\t\t\t\tchar *tmp = (char*)malloc (NTHREADS*THREAD_INFO_NAME_LEN*sizeof(char));\n\t\t\t\tif (tmp == NULL)\n\t\t\t\t{\n\t\t\t\t\tfprintf (stderr, \"Fatal error! Cannot allocate memory to transfer thread names\\n\");\n\t\t\t\t\texit (-1);\n\t\t\t\t}\n\n\t\t\t\t/* Ask to slave */\n\t\t\t\tPMPI_Send (&foo, 1, MPI_INT, TID, 123456, MPI_COMM_WORLD);\n\n\t\t\t\t/* Send master info */\n\t\t\t\tPMPI_Recv (tmp, NTHREADS*THREAD_INFO_NAME_LEN, MPI_CHAR, TID, 123457,\n\t\t\t\t  MPI_COMM_WORLD, &s);\n\n\t\t\t\tfor (thid = 0; thid < NTHREADS; thid++)\n\t\t\t\t{\n\t\t\t\t\tFileName_PTT(tmpname, Get_FinalDir(TID), appl_name,\n\t\t\t\t\t  node_list[u], PID, TID, thid, EXT_MPIT);\n\t\t\t\t\tsprintf (tmpline, \"%s named %s\\n\", tmpname,\n\t\t\t\t\t  &tmp[thid*THREAD_INFO_NAME_LEN]);\n\t\t\t\t\tret = write (filedes, tmpline, strlen (tmpline));\n\t\t\t\t\tif (ret != strlen (tmpline))\n\t\t\t\t\t{\n\t\t\t\t\t\tclose (filedes);\n\t\t\t\t\t\treturn -1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfree (tmp);\n\t\t\t}\n\t\t}\n\t\tclose (filedes);\n\t}\n\telse\n\t{\n\t\tMPI_Status s;\n\t\tint foo;\n\n\t\tchar *tmp = (char*)malloc (Backend_getMaximumOfThreads()*THREAD_INFO_NAME_LEN*sizeof(char));\n\t\tif (tmp == NULL)\n\t\t{\n\t\t\tfprintf (stderr, \"Fatal error! Cannot allocate memory to transfer thread names\\n\");\n\t\t\texit (-1);\n\t\t}\n\t\tfor (u = 0; u < Backend_getMaximumOfThreads(); u++)\n\t\t\tmemcpy (&tmp[u*THREAD_INFO_NAME_LEN], Extrae_get_thread_name(u), THREAD_INFO_NAME_LEN);\n\n\t\t/* Wait for master to ask */\n\t\tPMPI_Recv (&foo, 1, MPI_INT, 0, 123456, MPI_COMM_WORLD, &s);\n\n\t\t/* Send master info */\n\t\tPMPI_Send (tmp, Backend_getMaximumOfThreads()*THREAD_INFO_NAME_LEN,\n\t\t  MPI_CHAR, 0, 123457, MPI_COMM_WORLD);\n\n\t\tfree (tmp);\n\t}\n\n\tif (TASKID == 0)\n\t{\n\t\tfree (buffer);\n\t}\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\t/* Pass the name of the .mpits file to all tasks (the embedded merger needs to know!) */\n\tPMPI_Bcast(&SpawnGroup, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\tif (SpawnGroup > 1)\n\t\tsprintf (tmpname, \"%s/%s-%d%s\", final_dir, appl_name, SpawnGroup, EXT_MPITS);\n\telse\n\t\tsprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_MPITS);\n#else\n\tsprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_MPITS);\n#endif\n\n\tMpitsFileName = strdup( tmpname );\n\n\treturn 0;\n}\n\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n/******************************************************************************\n ***  MPI_Generate_Spawns_List (void)\n ***  Prepares the name of the .spawn list, and broadcast the name of the file\n ***  to all tasks. The file will be later open and written exclusively by any \n ***  task that does a spawn.\n ******************************************************************************/\nstatic void MPI_Generate_Spawns_List (void)\n{\n  int namelen = 0;\n\n  if (TASKID == 0)\n  {\n    /* Only task 0 knows the name of the .mpits file */\n    char *x = NULL;\n\n    SpawnsFileName = strdup( MpitsFileName );\n\n    x = strrchr(SpawnsFileName, '.');\n    strcpy(x, EXT_SPAWN); /* No need to realloc SpawnsFileName because the length of EXT_SPAWN is the same of EXT_MPITS */\n    namelen = strlen(SpawnsFileName);\n  }\n\n  PMPI_Bcast (&namelen, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n  if (TASKID != 0)\n  {\n    SpawnsFileName = (char *)malloc((namelen+1) * sizeof(char));\n  }\n  \n  PMPI_Bcast (SpawnsFileName, namelen+1, MPI_CHAR, 0, MPI_COMM_WORLD);\n  PMPI_Bcast (&SpawnGroup, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n#if defined(DEBUG_SPAWN)\n  fprintf(stderr, \"[DEBUG MPI_Generate_Spawn_List] TASKID=%d SpawnsFileName=%s\\n\", TASKID, SpawnsFileName);\n#endif\n\n  /* The latency to the master tasks is 0 */\n  if (TASKID == 0)\n  {\n    FILE *fd = fopen(SpawnsFileName, \"a+\");\n    if (fd == NULL)\n    {\n      perror(\"fopen\");\n    }\n    else\n    {\n      flock(fileno(fd), LOCK_EX);\n      fprintf(fd, \"%llu\\n\", SpawnOffset);\n      flock(fileno(fd), LOCK_UN);\n      fclose(fd);\n    }\n  }\n}\n#endif /* MPI_SUPPORTS_MPI_COMM_SPAWN */\n\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n/**\n * Spawn_Parent_Sync()\n *\n * Gathers the mpit id's and the parent intercommunicator id's from all spawned processes,\n * writes this information in the SpawnsFileName file, which will be later processed by\n * the merger, and synchronizes with the spawned processes' MPI_Init.\n */\nstatic void Spawn_Parent_Sync (unsigned long long SpawnStartTime, MPI_Comm intercomm, MPI_Comm spawn_comm)\n{\n  int i = 0;\n\n  if ((intercomm != MPI_COMM_NULL) && (spawn_comm != MPI_COMM_NULL))\n  {\n    int       *all_parents_comms = NULL;\n    int       *all_parents_ranks = NULL;\n    int        RemoteSpawnGroup  = 0;\n    int        my_rank;\n    int        num_parents;\n    int        world_rank = TASKID;\n    unsigned long long ChildSpawnOffset = 0;\n\n\tUNREFERENCED_PARAMETER(SpawnStartTime);\n    \n    PMPI_Comm_rank(spawn_comm, &my_rank);\n\n    /* Register the intercommunicator */\n    Trace_MPI_Communicator (intercomm, LAST_READ_TIME, FALSE);\n\n    /* Gather the parent comm id's from the participating tasks */\n    PMPI_Comm_size(spawn_comm, &num_parents);\n    all_parents_comms = (int *)malloc( num_parents * sizeof(int) );\n    all_parents_ranks = (int *)malloc( num_parents * sizeof(int) );\n\n    PMPI_Gather(&intercomm, 1, MPI_INT, all_parents_comms, 1, MPI_INT, 0, spawn_comm);\n    PMPI_Gather(&world_rank, 1, MPI_INT, all_parents_ranks, 1, MPI_INT, 0, spawn_comm);\n\n    /* Exchange the spawn group id's */\n    PMPI_Bcast( &SpawnGroup, 1, MPI_INT, (my_rank == 0 ? MPI_ROOT : MPI_PROC_NULL), intercomm );\n    PMPI_Bcast( &RemoteSpawnGroup, 1, MPI_INT, 0, intercomm );\n\n    /* Send the parent's world ranks to the children */\n    PMPI_Bcast( &num_parents, 1, MPI_INT, (my_rank == 0 ? MPI_ROOT : MPI_PROC_NULL), intercomm );\n    PMPI_Bcast( all_parents_ranks, num_parents, MPI_INT, (my_rank == 0 ? MPI_ROOT : MPI_PROC_NULL), intercomm );\n\n    /* Register each child parent_comm_id in the spawns list */\n    if (my_rank == 0)\n    {\n      FILE *fd = fopen(SpawnsFileName, \"a+\");\n      if (fd == NULL)\n      {\n        perror(\"fopen\");\n      }\n      else\n      {\n        flock(fileno(fd), LOCK_EX);\n        for (i=0; i<num_parents; i++)\n        {\n          fprintf(fd, \"%d %d %d\\n\", all_parents_ranks[i], (int)all_parents_comms[i], RemoteSpawnGroup);\n        }\n        flock(fileno(fd), LOCK_UN);\n        fclose(fd);\n      }\n    }\n\n    /* Send the synchronization time */\n    ChildSpawnOffset = SpawnOffset + (TIME - getApplBeginTime()); /* Changed SpawnStartTime to TIME to see the synchronization at the end of the spawn call */ \n    PMPI_Bcast ( &ChildSpawnOffset, 1, MPI_UNSIGNED_LONG_LONG, (my_rank == 0 ? MPI_ROOT : MPI_PROC_NULL), intercomm );\n\n    /* Synchronize with the MPI_Init of the spawned tasks (see complementary barrier at MPI_Init) */\n#if defined(DEBUG_SPAWN)\n    fprintf(stderr, \"[EXTRAE-MASTER %d] CALLING -> PMPI_Barrier(intercomm)\\n\", TASKID);\n#endif\n    PMPI_Barrier( intercomm );\n#if defined(DEBUG_SPAWN)\n    fprintf(stderr, \"[EXTRAE-MASTER %d] PMPI_Barrier(intercomm) -> RETURNS\\n\", TASKID);\n#endif\n\n    xfree(all_parents_comms);\n    xfree(all_parents_ranks);\n  }\n}\n#endif /* MPI_SUPPORTS_MPI_COMM_SPAWN */\n\n\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n/**\n * Spawn_Children_Sync()\n *\n * Checks if this application has been spawned through MPI_Comm_spawn. \n * If so, synchronizes with the parent application and sends the \n * children intercommunicator id's and the corresponding mpit id's to \n * link the apps.\n */\nstatic void Spawn_Children_Sync(iotimer_t init_time)\n{\n  MPI_Comm parent;\n\n  PMPI_Comm_get_parent(&parent);\n\n  if (parent != MPI_COMM_NULL)\n  {\n    int  i                  = 0;\n    int  RemoteSpawnGroup   = 0;\n    int  num_children       = 0;\n    int *all_children_comms = NULL;\n    int  num_parents        = 0;\n    int *all_parents_ranks  = NULL;\n\n    /* This task has been spawned through MPI_Comm_spawn! */\n#if defined(DEBUG_SPAWN)\n    fprintf(stderr, \"[EXTRAE-WORKER %d] I HAVE BEEN SPAWNED!\\n\", TASKID);\n    fprintf(stderr, \"[EXTRAE-WORKER %d] parent_comm_id=%d\\n\", TASKID, (int)parent);\n#endif\n    Trace_MPI_Communicator (parent, init_time, FALSE);\n    \n    /* Gather the children communicators to the parent */\n    PMPI_Comm_size(MPI_COMM_WORLD, &num_children);\n    all_children_comms = (int *)malloc(sizeof(int) * num_children);\n    PMPI_Gather(&parent, 1, MPI_INT, all_children_comms, 1, MPI_INT, 0, MPI_COMM_WORLD);\n\n    /* Exchange the spawn group id's */\n    PMPI_Bcast( &RemoteSpawnGroup, 1, MPI_INT, 0, parent );\n    PMPI_Bcast( &SpawnGroup, 1, MPI_INT, (TASKID == 0 ? MPI_ROOT : MPI_PROC_NULL), parent );\n\n    /* Receive the parent's world ranks */\n    PMPI_Bcast (&num_parents, 1, MPI_INT, 0, parent);\n    all_parents_ranks = (int *)malloc(sizeof(num_parents) * sizeof(int));\n    PMPI_Bcast (all_parents_ranks, num_parents, MPI_INT, 0, parent);\n    ParentWorldRanks = all_parents_ranks;\n  \n    /* Receive the synchronization time */\n    PMPI_Bcast ( &SpawnOffset, 1, MPI_LONG_LONG, 0, parent);\n\n    if (TASKID == 0)\n    {\n      FILE *fd = fopen(SpawnsFileName, \"w\");\n      fprintf(fd, \"%llu\\n\", SpawnOffset);\n      for (i=0; i<num_children; i++)\n      {\n        fprintf(fd, \"%d %d %d\\n\", i, (int)all_children_comms[i], RemoteSpawnGroup);\n      }\n      fclose(fd);\n    }\n\n    /* Synchronize with the parent's MPI_Comm_spawn() */\n#if defined(DEBUG_SPAWN)\n    fprintf(stderr, \"[EXTRAE-WORKER %d] CALLING -> PMPI_Barrier(parent)\\n\", TASKID);\n#endif\n    PMPI_Barrier( parent );\n#if defined(DEBUG_SPAWN)\n    fprintf(stderr, \"[EXTRAE-WORKER %d] PMPI_Barrier(parent) -> RETURNS\\n\", TASKID);\n#endif\n    xfree(all_children_comms);\n  }\n}\n#endif /* MPI_SUPPORTS_MPI_COMM_SPAWN */\n\n\n#if defined(FORTRAN_SYMBOLS)\n\n/* Some C libraries do not contain the mpi_init symbol (fortran)\n\t When compiling the combined (C+Fortran) dyninst module, the resulting\n\t module CANNOT be loaded if mpi_init is not found. The top #if def..\n\t is a workaround for this situation\n\n   NOTE: Some C libraries (mpich 1.2.x) use the C initialization and do not\n   offer mpi_init (fortran).\n*/\n/*\n HSG: I think that MPI_C_CONTAINS_FORTRAN_MPI_INIT is not the proper check to do here\n#if (defined(COMBINED_SYMBOLS) && !defined(MPI_C_CONTAINS_FORTRAN_MPI_INIT) || \\\n     !defined(COMBINED_SYMBOLS))\n*/\n\n/******************************************************************************\n ***  PMPI_Init_Wrapper\n ******************************************************************************/\nvoid PMPI_Init_Wrapper (MPI_Fint *ierror)\n/* Aquest codi nomes el volem per traceig sequencial i per mpi_init de fortran */\n{\n\tMPI_Comm cparent = MPI_COMM_NULL;\n\tiotimer_t MPI_Init_start_time, MPI_Init_end_time;\n\n\thash_init (&requests);\n\tPR_queue_init (&PR_queue);\n\n#ifdef WITH_PMPI_HOOK\n        int (*real_mpi_init)(MPI_Fint *ierror) = NULL;\n        real_mpi_init = dlsym(RTLD_NEXT, STRINGIFY(CtoF77 (mpi_init)));\n\n        if (real_mpi_init != NULL) {\n                CtoF77 (real_mpi_init) (ierror);\n        } else\n#endif\n        {\n                CtoF77 (pmpi_init) (ierror);\n        }\n\n\tExtrae_set_ApplicationIsMPI (TRUE);\n\tExtrae_Allocate_Task_Bitmap (Extrae_MPI_NumTasks());\n\n\t/* Setup callbacks for TASK identification and barrier execution */\n\tExtrae_set_taskid_function (Extrae_MPI_TaskID);\n\tExtrae_set_numtasks_function (Extrae_MPI_NumTasks);\n\tExtrae_set_barrier_tasks_function (Extrae_MPI_Barrier);\n\tExtrae_set_finalize_task_function (Extrae_MPI_Finalize);\n\n\tInitMPICommunicators();\n\n#if defined(SAMPLING_SUPPORT)\n\t/* If sampling is enabled, just stop all the processes at the same point\n\t   and continue */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n#endif\n\n\t/* Proceed with initialization if it's not already init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_NOT_INITIALIZED)\n\t{\n\t\tint res;\n\t\tchar *config_file = getenv (\"EXTRAE_CONFIG_FILE\");\n\n\t\tif (config_file == NULL)\n\t\t\tconfig_file = getenv (\"MPTRACE_CONFIG_FILE\");\n\n\t\tExtrae_set_initial_TASKID (TASKID);\n\t\tExtrae_set_is_initialized (EXTRAE_INITIALIZED_MPI_INIT);\n\n\t\tif (config_file != NULL)\n\t\t\t/* Obtain a localized copy *except for the master process* */\n\t\t\tconfig_file = MPI_Distribute_XML_File (TASKID, Extrae_get_num_tasks(), config_file);\n\n\t\t/* Initialize the backend */\n\t\tres = Backend_preInitialize (TASKID, Extrae_get_num_tasks(), config_file, FALSE);\n\t\tif (!res)\n\t\t\treturn;\n\n\t\t/* Remove the local copy only if we're not the master */\n\t\tif (TASKID != 0)\n\t\t\tunlink (config_file);\n\t\tfree (config_file);\n\t}\n\telse\n\t{\n\t\tExtrae_MPI_prepareDirectoryStructures (TASKID, Extrae_get_num_tasks());\n\t\tBackend_updateTaskID ();\n\t}\n\n\tGather_Nodes_Info ();\n\n\t/* Generate a tentative file list, remove first if the list was generated\n\t   by Extrae_init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_INITIALIZED_EXTRAE_INIT)\n\t\tMPI_remove_file_list (TRUE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tPMPI_Comm_get_parent (&cparent);\n#endif\n\tMPI_Generate_Task_File_List (TasksNodes, cparent != MPI_COMM_NULL);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tMPI_Generate_Spawns_List ();\n#endif\n\n\t/* Take the time now, we can't put MPIINIT_EV before APPL_EV */\n\tMPI_Init_start_time = TIME;\n\t\n\t/* Call a barrier in order to synchronize all tasks using MPIINIT_EV / END.\n\t   Three consecutive barriers for a better synchronization (J suggested) */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n\tExtrae_barrier_tasks();\n\tExtrae_barrier_tasks();\n\n\tinitTracingTime = MPI_Init_end_time = TIME;\n\n\tif (!Backend_postInitialize (TASKID, Extrae_get_num_tasks(), MPI_INIT_EV, MPI_Init_start_time, MPI_Init_end_time, TasksNodes))\n\t\treturn;\n\n\t/* Annotate already built communicators */\n\tTrace_MPI_Communicator (MPI_COMM_WORLD, MPI_Init_start_time, FALSE);\n\tTrace_MPI_Communicator (MPI_COMM_SELF, MPI_Init_start_time, FALSE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tSpawn_Children_Sync (MPI_Init_start_time);\n#endif\n\n\t/* Stats Init */\n\tglobal_mpi_stats = mpi_stats_init(Extrae_get_num_tasks());\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n\n#if defined(MPI_HAS_INIT_THREAD_F)\n/******************************************************************************\n ***  PMPI_Init_thread_Wrapper\n ******************************************************************************/\nvoid PMPI_Init_thread_Wrapper (MPI_Fint *required, MPI_Fint *provided, MPI_Fint *ierror)\n/* Aquest codi nomes el volem per traceig sequencial i per mpi_init de fortran */\n{\n\tMPI_Comm cparent = MPI_COMM_NULL;\n\tiotimer_t MPI_Init_start_time, MPI_Init_end_time;\n\n\thash_init (&requests);\n\tPR_queue_init (&PR_queue);\n\n#ifdef WITH_PMPI_HOOK\n        int (*real_mpi_init_thread)(MPI_Fint *required, MPI_Fint *provided, MPI_Fint *ierror) = NULL;\n        real_mpi_init_thread = dlsym(RTLD_NEXT, STRINGIFY(CtoF77 (mpi_init_thread)));\n\n        if (real_mpi_init_thread != NULL) {\n                CtoF77 (real_mpi_init_thread) (required, provided, ierror);\n        } else\n#endif\n        {\n\t\tCtoF77 (pmpi_init_thread) (required, provided, ierror);\n        }\n\n\tExtrae_set_ApplicationIsMPI (TRUE);\n\tExtrae_Allocate_Task_Bitmap (Extrae_MPI_NumTasks());\n\n\t/* Setup callbacks for TASK identification and barrier execution */\n\tExtrae_set_taskid_function (Extrae_MPI_TaskID);\n\tExtrae_set_numtasks_function (Extrae_MPI_NumTasks);\n\tExtrae_set_barrier_tasks_function (Extrae_MPI_Barrier);\n\tExtrae_set_finalize_task_function (Extrae_MPI_Finalize);\n\n\tInitMPICommunicators();\n\n#if defined(SAMPLING_SUPPORT)\n\t/* If sampling is enabled, just stop all the processes at the same point\n\t   and continue */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n#endif\n\n\t/* Proceed with initialization if it's not already init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_NOT_INITIALIZED)\n\t{\n\t\tint res;\n\t\tchar *config_file = getenv (\"EXTRAE_CONFIG_FILE\");\n\n\t\tif (config_file == NULL)\n\t\t\tconfig_file = getenv (\"MPTRACE_CONFIG_FILE\");\n\n\t\tExtrae_set_initial_TASKID (TASKID);\n\t\tExtrae_set_is_initialized (EXTRAE_INITIALIZED_MPI_INIT);\n\n\t\tif (config_file != NULL)\n\t\t\t/* Obtain a localized copy *except for the master process* */\n\t\t\tconfig_file = MPI_Distribute_XML_File (TASKID, Extrae_get_num_tasks(), config_file);\n\n\t\t/* Initialize the backend */\n\t\tres = Backend_preInitialize (TASKID, Extrae_get_num_tasks(), config_file, FALSE);\n\t\tif (!res)\n\t\t\treturn;\n\n\t\t/* Remove the local copy only if we're not the master */\n\t\tif (TASKID != 0)\n\t\t\tunlink (config_file);\n\t\tfree (config_file);\n\t}\n\telse\n\t{\n\t\tExtrae_MPI_prepareDirectoryStructures (TASKID, Extrae_get_num_tasks());\n\t\tBackend_updateTaskID ();\n\t}\n\n\tGather_Nodes_Info ();\n\n\t/* Generate a tentative file list, remove first if the list was generated\n\t   by Extrae_init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_INITIALIZED_EXTRAE_INIT)\n\t\tMPI_remove_file_list (TRUE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tPMPI_Comm_get_parent (&cparent);\n#endif\n\tMPI_Generate_Task_File_List (TasksNodes, cparent != MPI_COMM_NULL);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tMPI_Generate_Spawns_List ();\n#endif\n\n\t/* Take the time now, we can't put MPIINIT_EV before APPL_EV */\n\tMPI_Init_start_time = TIME;\n\t\n\t/* Call a barrier in order to synchronize all tasks using MPIINIT_EV / END\n\t   Three consecutive barriers for a better synchronization (J suggested) */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n\tExtrae_barrier_tasks();\n\tExtrae_barrier_tasks();\n\n\tinitTracingTime = MPI_Init_end_time = TIME;\n\n\tif (!Backend_postInitialize (TASKID, Extrae_get_num_tasks(), MPI_INIT_EV, MPI_Init_start_time, MPI_Init_end_time, TasksNodes))\n\t\treturn;\n\n\t/* Annotate already built communicators */\n\tTrace_MPI_Communicator (MPI_COMM_WORLD, MPI_Init_start_time, FALSE);\n\tTrace_MPI_Communicator (MPI_COMM_SELF, MPI_Init_start_time, FALSE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tSpawn_Children_Sync (MPI_Init_start_time);\n#endif\n\n\t/* Stats Init */\n\tglobal_mpi_stats = mpi_stats_init(Extrae_get_num_tasks());\n\tupdateStats_OTHER(global_mpi_stats);\n}\n#endif /* MPI_HAS_INIT_THREAD_F */\n\n//#endif\n/* HSG \n     (defined(COMBINED_SYMBOLS) && !defined(MPI_C_CONTAINS_FORTRAN_MPI_INIT) || \\\n     !defined(COMBINED_SYMBOLS))\n     */\n\n/******************************************************************************\n ***  PMPI_Finalize_Wrapper\n ******************************************************************************/\nvoid PMPI_Finalize_Wrapper (MPI_Fint *ierror)\n{\n\tMPI_Comm cparent = MPI_COMM_NULL;\n\n#if defined(IS_BGL_MACHINE)\n\tBGL_disable_barrier_inside = 1;\n#endif\n\n\tif (CURRENT_TRACE_MODE(THREADID) == TRACE_MODE_BURSTS)\n\t{\n        updateStats_OTHER(global_mpi_stats);\n\t\tExtrae_MPI_stats_Wrapper (LAST_READ_TIME);\n\t\tTrace_mode_switch();\n\t\tTrace_Mode_Change (THREADID, LAST_READ_TIME);\n\t}\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_FINALIZE_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY); \n\n#if defined(IS_BGL_MACHINE)\n\tBGL_disable_barrier_inside = 0;\n#endif\n\n\t/* Generate the final file list */\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tPMPI_Comm_get_parent (&cparent);\n#endif\n\tMPI_Generate_Task_File_List (TasksNodes, cparent != MPI_COMM_NULL);\n\n\tTRACE_MPIEVENT (TIME, MPI_FINALIZE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\t/* Finalize only if its initialized by MPI_init call */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_INITIALIZED_MPI_INIT)\n\t{\n\t\tBackend_Finalize ();\n\n#ifdef WITH_PMPI_HOOK\n\t\tint (*real_mpi_finalize)(MPI_Fint *ierror) = NULL;\n\t\treal_mpi_finalize = dlsym(RTLD_NEXT, STRINGIFY(CtoF77 (mpi_finalize)));\n\t\tif (real_mpi_finalize != NULL) {\n\t\t\tCtoF77 (real_mpi_finalize) (ierror);\n\t\t} else\n#endif\n\t\t{\n\t\t\tCtoF77 (pmpi_finalize) (ierror);\n\t\t}\n\n\t\tmpitrace_on = FALSE;\n\t}\n\telse\n\t\t*ierror = MPI_SUCCESS;\n}\n\n\n/******************************************************************************\n ***  get_rank_obj\n ******************************************************************************/\n\nint get_rank_obj (int *comm, int *dest, int *receiver, int send_or_recv)\n{\n\tint ret, inter, one = 1;\n\tint group;\n\tMPI_Fint comm_world = MPI_Comm_c2f(MPI_COMM_WORLD);\n\n        /* If rank in MPI_COMM_WORLD or if dest is PROC_NULL or any source,\n           return value directly */\n\tif (*comm == comm_world || *dest == MPI_PROC_NULL || *dest == MPI_ANY_SOURCE)\n\t{\n\t\t*receiver = *dest;\n\t}\n\telse\n\t{\n\t\tCtoF77 (pmpi_comm_test_inter) (comm, &inter, &ret);\n\t\tMPI_CHECK(ret, pmpi_comm_test_inter);\n\n\t\tif (inter)\n\t\t{\n                        /* The communicator is an intercommunicator */\n                        int parent;\n                        CtoF77( pmpi_comm_get_parent ) (&parent, &ret);\n\n                        if (send_or_recv == RANK_OBJ_SEND)\n                        {\n                                if (*comm == parent)\n                                {\n                                        /* Send to parent -- Translate the local rank for the parent into its MPI_COMM_WORLD rank */\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n                                        if (ParentWorldRanks != NULL)\n                                                *receiver = ParentWorldRanks[*dest];\n                                        else\n#endif\n                                                *receiver = *dest; /* Should never happen */\n                                }\n                                else\n                                {\n                                        /* Send to children -- When sending to specific childen X, there's no need to translate ranks */\n                                        *receiver = *dest;\n                                }\n                        }\n                        else\n                        {\n                                if (*comm == parent)\n                                {\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n                                        /* Recv from parent -- Translate the local rank for the parent into its MPI_COMM_WORLD rank */\n                                        if (ParentWorldRanks != NULL)\n                                                *receiver = ParentWorldRanks[*dest];\n                                        else\n#endif\n                                                *receiver = *dest; /* Should never happen */\n                                }\n                                else\n                                {\n                                        /* Recv from children -- When receiving from specific childen X, there's no need to translate ranks */\n                                        *receiver = *dest;\n                                }\n                        }\n\t\t}\n\t\telse\n\t\t{\n\t\t\t/* The communicator is an intracommunicator */\n\t\t\tCtoF77 (pmpi_comm_group) (comm, &group, &ret);\n\t\t\tMPI_CHECK(ret, pmpi_comm_group);\n\n\t\t\t/* Translate the rank */\n\t\t\tCtoF77 (pmpi_group_translate_ranks) (&group, &one, dest, &grup_global_F, receiver, &ret);\n\t\t\tMPI_CHECK(ret, pmpi_group_translate_ranks);\n\n\t\t\tCtoF77 (pmpi_group_free) (&group, &ret);\n\t\t\tMPI_CHECK(ret, pmpi_group_free);\n\t\t}\n\t}\n\treturn MPI_SUCCESS;\n}\n\n/******************************************************************************\n ***  PMPI_Request_get_status_Wrapper\n ******************************************************************************/\n\nvoid Bursts_PMPI_Request_get_status_Wrapper (MPI_Fint *request, MPI_Fint *flag, MPI_Fint *status,\n\tMPI_Fint *ierror)\n{\n     /*\n      *   event : MPI_REQUEST_GET_STATUS_EV     value : EVT_BEGIN\n      *   target : ---                          size  : ---\n      *   tag : ---\n      */\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_REQUEST_GET_STATUS_EV, EVT_BEGIN, request, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tCtoF77 (pmpi_request_get_status) (request, flag, status, ierror);\n\n     /*\n      *   event : MPI_REQUEST_GET_STATUS_EV    value : EVT_END\n      *   target : ---                         size  : ---\n      *   tag : ---\n      */\n\tTRACE_MPIEVENT (TIME, MPI_REQUEST_GET_STATUS_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n}\n\nvoid Normal_PMPI_Request_get_status_Wrapper (MPI_Fint *request, MPI_Fint *flag, MPI_Fint *status,\n    MPI_Fint *ierror)\n{\n  static int PMPI_Request_get_status_counter = 0;\n  iotimer_t begin_time, end_time;\n  static iotimer_t elapsed_time_outside_PMPI_Request_get_status = 0, last_PMPI_Request_get_status_exit_time = 0;\n\n\n  begin_time = LAST_READ_TIME;\n\n  if (PMPI_Request_get_status_counter == 0) {\n    /* First request */\n    elapsed_time_outside_PMPI_Request_get_status = 0;\n  }\n  else {\n    elapsed_time_outside_PMPI_Request_get_status += (begin_time - last_PMPI_Request_get_status_exit_time);\n  }\n\n  CtoF77 (pmpi_request_get_status) (request, flag, status, ierror);\n\n  end_time = TIME; \n  last_PMPI_Request_get_status_exit_time = end_time;\n\n\tif (tracejant_mpi)\n  {\n    if (*flag)\n    {\n      if (PMPI_Request_get_status_counter != 0) {\n        TRACE_EVENT (begin_time, MPI_TIME_OUTSIDE_MPI_REQUEST_GET_STATUS_EV, elapsed_time_outside_PMPI_Request_get_status);\n        TRACE_EVENT (begin_time, MPI_REQUEST_GET_STATUS_COUNTER_EV, PMPI_Request_get_status_counter);\n      }\n      TRACE_MPIEVENT (begin_time, MPI_REQUEST_GET_STATUS_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n      TRACE_MPIEVENT (end_time, MPI_REQUEST_GET_STATUS_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n      PMPI_Request_get_status_counter = 0;\n    }\n    else\n    {\n      if (PMPI_Request_get_status_counter == 0)\n      {\n        /* First request fail */\n        TRACE_EVENTANDCOUNTERS (begin_time, MPI_REQUEST_GET_STATUS_COUNTER_EV, 0, TRUE);\n      }\n      PMPI_Request_get_status_counter ++;\n    }\n  }\n}\n\nvoid PMPI_Request_get_status_Wrapper (MPI_Fint *request, MPI_Fint *flag, MPI_Fint *status, MPI_Fint *ierror)\n{\n\tif (CURRENT_TRACE_MODE(THREADID) == TRACE_MODE_BURSTS)\n\t{\n\t\tBursts_PMPI_Request_get_status_Wrapper (request, flag, status, ierror);\n\t}\n\telse\n\t{\n\t\tNormal_PMPI_Request_get_status_Wrapper (request, flag, status, ierror);\n\t}\n}\n\n\n/******************************************************************************\n ***  PMPI_Cancel_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Cancel_Wrapper (MPI_Fint *request, MPI_Fint *ierror)\n{\n\tMPI_Request req = MPI_Request_f2c(*request);\n\n  /*\n   *   event : CANCEL_EV                    value : EVT_BEGIN\n   *   target : request to cancel           size  : ---\n   *   tag : ---\n   */\n  TRACE_MPIEVENT (LAST_READ_TIME, MPI_CANCEL_EV, EVT_BEGIN, req, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n\n  CtoF77 (pmpi_cancel) (request, ierror);\n\n  /*\n   *   event : CANCEL_EV                    value : EVT_END\n   *   target : request to cancel           size  : ---\n   *   tag : ---\n   */\n  TRACE_MPIEVENT (TIME, MPI_CANCEL_EV, EVT_END, req, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n/******************************************************************************\n ***  get_Irank_obj\n ******************************************************************************/\n\nint get_Irank_obj (hash_data_t * hash_req, int *src_world, int *size,\n\tint *tag, int *status)\n{\n\tint ret, one = 1;\n\tMPI_Fint tbyte = MPI_Type_c2f(MPI_BYTE);\n\tint recved_count, dest;\n\n\tCtoF77 (pmpi_get_count) (status, &tbyte, &recved_count, &ret);\n\tMPI_CHECK(ret, pmpi_get_count);\n\n\tif (recved_count != MPI_UNDEFINED)\n\t\t*size = recved_count;\n\telse\n\t\t*size = 0;\n\n\t*tag = status[MPI_TAG_OFFSET];\n\tdest = status[MPI_SOURCE_OFFSET];\n\n\tif (MPI_GROUP_NULL != hash_req->group)\n\t{\n\t\tMPI_Fint group = MPI_Group_c2f(hash_req->group);\n\t\tCtoF77 (pmpi_group_translate_ranks) (&group, &one, &dest, &grup_global_F, src_world, &ret);\n\t\tMPI_CHECK(ret, pmpi_group_translate_ranks);\n\t}\n\telse\n\t\t*src_world = dest;\n\n  return MPI_SUCCESS;\n}\n\n\n/******************************************************************************\n ***  PMPI_Comm_Rank_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Comm_Rank_Wrapper (MPI_Fint *comm, MPI_Fint *rank, MPI_Fint *ierror)\n{\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_RANK_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\tCtoF77 (pmpi_comm_rank) (comm, rank, ierror);\n\tTRACE_MPIEVENT (TIME, MPI_COMM_RANK_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n\n/******************************************************************************\n ***  PMPI_Comm_Size_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Comm_Size_Wrapper (MPI_Fint *comm, MPI_Fint *size, MPI_Fint *ierror)\n{\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_SIZE_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\tCtoF77 (pmpi_comm_size) (comm, size, ierror);\n\tTRACE_MPIEVENT (TIME, MPI_COMM_SIZE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n/******************************************************************************\n ***  PMPI_Comm_Create_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Comm_Create_Wrapper (MPI_Fint *comm, MPI_Fint *group,\n\tMPI_Fint *newcomm, MPI_Fint *ierror)\n{\n\tMPI_Fint cnull;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_CREATE_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tcnull = MPI_Comm_c2f(MPI_COMM_NULL);\n\n\tCtoF77 (pmpi_comm_create) (comm, group, newcomm, ierror);\n\n\tif (*newcomm != cnull && *ierror == MPI_SUCCESS)\n\t{\t\n\t\tMPI_Comm comm_id = MPI_Comm_f2c(*newcomm);\n\t\tTrace_MPI_Communicator (comm_id, LAST_READ_TIME, TRUE);\n\t}\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_CREATE_EV, EVT_END, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n/******************************************************************************\n ***  PMPI_Comm_Free_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Comm_Free_Wrapper (MPI_Fint *comm, MPI_Fint *ierror)\n{\n\tUNREFERENCED_PARAMETER(comm);\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_FREE_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\t*ierror = MPI_SUCCESS;\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_FREE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n/******************************************************************************\n ***  PMPI_Comm_Dup_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Comm_Dup_Wrapper (MPI_Fint *comm, MPI_Fint *newcomm,\n\tMPI_Fint *ierror)\n{\n\tMPI_Fint cnull;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_DUP_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tcnull = MPI_Comm_c2f(MPI_COMM_NULL);\n\n\tCtoF77 (pmpi_comm_dup) (comm, newcomm, ierror);\n\n\tif (*newcomm != cnull && *ierror == MPI_SUCCESS)\n\t{\n\t\tMPI_Comm comm_id = MPI_Comm_f2c (*newcomm);\n\t\tTrace_MPI_Communicator (comm_id, LAST_READ_TIME, TRUE);\n\t}\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_DUP_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t\tEMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n\n\n/******************************************************************************\n ***  PMPI_Comm_Split_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Comm_Split_Wrapper (MPI_Fint *comm, MPI_Fint *color, MPI_Fint *key,\n\tMPI_Fint *newcomm, MPI_Fint *ierror)\n{\n\tMPI_Fint cnull;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_SPLIT_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tcnull = MPI_Comm_c2f(MPI_COMM_NULL);\n\n\tCtoF77 (pmpi_comm_split) (comm, color, key, newcomm, ierror);\n\n\tif (*newcomm != cnull && *ierror == MPI_SUCCESS)\n\t{\n\t\tMPI_Comm comm_id = MPI_Comm_f2c (*newcomm);\n\t\tTrace_MPI_Communicator (comm_id, LAST_READ_TIME, TRUE);\n\t}\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_SPLIT_EV, EVT_END, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n/******************************************************************************\n ***  PMPI_Comm_Spawn_Wrapper\n ******************************************************************************/\nvoid PMPI_Comm_Spawn_Wrapper (char *command, char *argv, MPI_Fint *maxprocs, MPI_Fint *info, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *intercomm, MPI_Fint *array_of_errcodes, MPI_Fint *ierror)\n{\n  unsigned long long SpawnStartTime = LAST_READ_TIME;\n\n  TRACE_MPIEVENT (SpawnStartTime, MPI_COMM_SPAWN_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  CtoF77 (pmpi_comm_spawn) (command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes, ierror);\n\n  if (*ierror == MPI_SUCCESS)\n  {\n    MPI_Comm intercomm_c;\n    intercomm_c = PMPI_Comm_f2c(*intercomm);\n\n    MPI_Comm comm_c;\n    comm_c = PMPI_Comm_f2c(*comm);\n    Spawn_Parent_Sync (SpawnStartTime, intercomm_c, comm_c);\n  }\n\n  TRACE_MPIEVENT (TIME, MPI_COMM_SPAWN_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  updateStats_OTHER(global_mpi_stats);\n}\n\n/******************************************************************************\n ***  PMPI_Comm_Spawn_Multiple_Wrapper\n ******************************************************************************/\nvoid PMPI_Comm_Spawn_Multiple_Wrapper (MPI_Fint *count, char *array_of_commands, char *array_of_argv, MPI_Fint *array_of_maxprocs, MPI_Fint *array_of_info, MPI_Fint *root, MPI_Fint *comm, MPI_Fint *intercomm, MPI_Fint *array_of_errcodes, MPI_Fint *ierror)\n{\n  unsigned long long SpawnStartTime = LAST_READ_TIME;\n\n  TRACE_MPIEVENT (SpawnStartTime, MPI_COMM_SPAWN_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  CtoF77 (pmpi_comm_spawn_multiple) (count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes, ierror);\n\n  if (*ierror == MPI_SUCCESS)\n  { \n    MPI_Comm intercomm_c;\n    intercomm_c = PMPI_Comm_f2c(*intercomm);\n\n    MPI_Comm comm_c;\n    comm_c = PMPI_Comm_f2c(*comm);\n\n    Spawn_Parent_Sync (SpawnStartTime, intercomm_c, comm_c);\n  }\n\n  TRACE_MPIEVENT (TIME, MPI_COMM_SPAWN_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  updateStats_OTHER(global_mpi_stats);\n}\n#endif\n\n\n/******************************************************************************\n ***  PMPI_Start_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Start_Wrapper (MPI_Fint *request, MPI_Fint *ierror)\n{\n\tMPI_Request req;\n\n  /*\n   *   type : START_EV                     value : EVT_BEGIN\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_START_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\t/* Execute the real function */\n\tCtoF77 (pmpi_start) (request, ierror);\n\n\t/* Store the resulting request */\n\treq = MPI_Request_f2c(*request);\n\tTraceja_Persistent_Request (&req, LAST_READ_TIME);\n\n  /*\n   *   type : START_EV                     value : EVT_END\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n\tTRACE_MPIEVENT (TIME, MPI_START_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n}\n\n\n/******************************************************************************\n ***  PMPI_Startall_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Startall_Wrapper (MPI_Fint *count, MPI_Fint array_of_requests[],\n\tMPI_Fint *ierror)\n{\n  MPI_Fint save_reqs[MAX_WAIT_REQUESTS];\n  int ii;\n\n  /*\n   *   type : START_EV                     value : EVT_BEGIN\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (LAST_READ_TIME, MPI_STARTALL_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n\n  /*\n   * Algunes implementacions es poden carregar aquesta informacio.\n   * Cal salvar-la per poder tracejar despr\u00e9s de fer la crida pmpi. \n   */\n  memcpy (save_reqs, array_of_requests, (*count) * sizeof (MPI_Fint));\n\n  /*\n   * Primer cal fer la crida real \n   */\n  CtoF77 (pmpi_startall) (count, array_of_requests, ierror);\n\n  /*\n   * Es tracejen totes les requests \n   */\n\tfor (ii = 0; ii < (*count); ii++)\n\t{\n\t\tMPI_Request req = MPI_Request_f2c(save_reqs[ii]);\n\t\tTraceja_Persistent_Request (&req, LAST_READ_TIME);\n\t}\n\n  /*\n   *   type : START_EV                     value : EVT_END\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (TIME, MPI_STARTALL_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n}\n\n\n\n/******************************************************************************\n ***  PMPI_Request_free_Wrapper\n ******************************************************************************/\n\nvoid PMPI_Request_free_Wrapper (MPI_Fint *request, MPI_Fint *ierror)\n{\n\tMPI_Request req;\n\n  /*\n   *   type : START_EV                     value : EVT_BEGIN\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (LAST_READ_TIME, MPI_REQUEST_FREE_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY,\n                  EMPTY, EMPTY);\n\n  /*\n   * Cal guardar la request perque algunes implementacions se la carreguen. \n   */\n  req = MPI_Request_f2c (*request);\n\n  /*\n   * S'intenta alliberar aquesta persistent request \n   */\n  PR_Elimina_request (&PR_queue, &req);\n\n  /*\n   * Primer cal fer la crida real \n   */\n  CtoF77 (pmpi_request_free) (request, ierror);\n\n  /*\n   *   type : START_EV                     value : EVT_END\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (TIME, MPI_REQUEST_FREE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\n\nvoid PMPI_Cart_sub_Wrapper (MPI_Fint *comm, MPI_Fint *remain_dims,\n\tMPI_Fint *comm_new, MPI_Fint *ierror)\n{\n\tMPI_Fint comm_null;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_CART_SUB_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tcomm_null = MPI_Comm_c2f(MPI_COMM_NULL);\n\n\tCtoF77 (pmpi_cart_sub) (comm, remain_dims, comm_new, ierror);\n\n\tif (*ierror == MPI_SUCCESS && *comm_new != comm_null)\n\t{\n\t\tMPI_Comm comm_id = MPI_Comm_f2c (*comm_new);\n\t\tTrace_MPI_Communicator (comm_id, LAST_READ_TIME, TRUE);\n\t}\n\n\tTRACE_MPIEVENT (TIME, MPI_CART_SUB_EV, EVT_END, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\nvoid PMPI_Cart_create_Wrapper (MPI_Fint *comm_old, MPI_Fint *ndims,\n\tMPI_Fint *dims, MPI_Fint *periods, MPI_Fint *reorder, MPI_Fint *comm_cart,\n\tMPI_Fint *ierror)\n{\n\tMPI_Fint comm_null;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_CART_CREATE_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tcomm_null = MPI_Comm_c2f(MPI_COMM_NULL);\n\n\tCtoF77 (pmpi_cart_create) (comm_old, ndims, dims, periods, reorder,\n\t  comm_cart, ierror);\n\n\tif (*ierror == MPI_SUCCESS && *comm_cart != comm_null)\n\t{\n\t\tMPI_Comm comm_id = MPI_Comm_f2c (*comm_cart);\n\t\tTrace_MPI_Communicator (comm_id, LAST_READ_TIME, TRUE);\n\t}\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_CART_CREATE_EV, EVT_END, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n}\n\nvoid PMPI_Intercomm_create_F_Wrapper (MPI_Fint *local_comm, MPI_Fint *local_leader,\n\tMPI_Fint *peer_comm, MPI_Fint *remote_leader, MPI_Fint *tag,\n\tMPI_Fint *newintercomm, MPI_Fint *ierror)\n{\n\tMPI_Fint comm_null;\n\n\tTRACE_MPIEVENT(LAST_READ_TIME, MPI_INTERCOMM_CREATE_EV, EVT_BEGIN,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tcomm_null = MPI_Comm_c2f(MPI_COMM_NULL);\n\n\tCtoF77(mpi_intercomm_create) (local_comm, local_leader, peer_comm,\n\t  remote_leader, tag, newintercomm, ierror);\n\n\tif (*ierror == MPI_SUCCESS && *newintercomm != comm_null)\n\t\tTrace_MPI_InterCommunicator (MPI_Comm_f2c (*newintercomm),\n\t\t  MPI_Comm_f2c(*local_comm), *local_leader,\n\t\t  MPI_Comm_f2c(*peer_comm), *remote_leader,\n\t\t  LAST_READ_TIME, TRUE);\n\n\tTRACE_MPIEVENT(TIME, MPI_INTERCOMM_CREATE_EV, EVT_END,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n}\n\nvoid PMPI_Intercomm_merge_F_Wrapper (MPI_Fint *intercomm, MPI_Fint *high,\n\tMPI_Fint *newintracomm, MPI_Fint *ierror)\n{\n\tMPI_Fint comm_null;\n\n\tTRACE_MPIEVENT(LAST_READ_TIME, MPI_INTERCOMM_MERGE_EV, EVT_BEGIN,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tcomm_null = MPI_Comm_c2f(MPI_COMM_NULL);\n\n\tCtoF77(mpi_intercomm_merge) (intercomm, high, newintracomm, ierror);\n\n\tif (*ierror == MPI_SUCCESS && *newintracomm != comm_null)\n\t{\n\t\tMPI_Comm comm_id = MPI_Comm_f2c (*newintracomm);\n\t\tTrace_MPI_Communicator (comm_id, LAST_READ_TIME, TRUE);\n\t}\n\n\tTRACE_MPIEVENT(TIME, MPI_INTERCOMM_MERGE_EV, EVT_END,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n}\n\n#endif /* defined(FORTRAN_SYMBOLS) */\n\n#if defined(C_SYMBOLS)\n\n/******************************************************************************\n ***  get_Irank_obj_C\n ******************************************************************************/\n\nint get_Irank_obj_C (hash_data_t * hash_req, int *src_world, int *size,\n\tint *tag, MPI_Status *status)\n{\n\tint ret, dest, recved_count;\n\n\tret = PMPI_Get_count (status, MPI_BYTE, &recved_count);\n\tMPI_CHECK(ret, PMPI_Get_count);\n\n\tif (recved_count != MPI_UNDEFINED)\n\t\t*size = recved_count;\n\telse\n\t\t*size = 0;\n\n\t*tag = status->MPI_TAG;\n\tdest = status->MPI_SOURCE;\n\n\tif (MPI_GROUP_NULL != hash_req->group)\n\t{\n\t\tret = PMPI_Group_translate_ranks (hash_req->group, 1, &dest, grup_global,\n\t\t\tsrc_world);\n\t\tMPI_CHECK(ret, PMPI_Group_translate_ranks);\n\t}\n\telse\n\t\t*src_world = dest;\n\n\treturn MPI_SUCCESS;\n}\n\n\n/******************************************************************************\n*******************************************************************************\n*******************************************************************************\n*****************************  Wrappers versio C ******************************\n*******************************************************************************\n*******************************************************************************\n*******************************************************************************/\n\n/******************************************************************************\n ***  MPI_Init_C_Wrapper\n ******************************************************************************/\n\nint MPI_Init_C_Wrapper (int *argc, char ***argv)\n{\n\tMPI_Comm cparent = MPI_COMM_NULL;\n\tint val = 0;\n\tiotimer_t MPI_Init_start_time, MPI_Init_end_time;\n\n\thash_init (&requests);\n\tPR_queue_init (&PR_queue);\n\n#ifdef WITH_PMPI_HOOK\n\tint (*real_mpi_init)(int *argc, char ***argv) = NULL;\n\treal_mpi_init = dlsym(RTLD_NEXT, \"MPI_Init\");\n\tif (real_mpi_init != NULL) {\n\t\tval = real_mpi_init (argc, argv);\n\t} else\n#endif\n\t{\n\t\tval = PMPI_Init (argc, argv);\n\t}\n\n\tExtrae_set_ApplicationIsMPI (TRUE);\n\tExtrae_Allocate_Task_Bitmap (Extrae_MPI_NumTasks());\n\n\t/* Setup callbacks for TASK identification and barrier execution */\n\tExtrae_set_taskid_function (Extrae_MPI_TaskID);\n\tExtrae_set_numtasks_function (Extrae_MPI_NumTasks);\n\tExtrae_set_barrier_tasks_function (Extrae_MPI_Barrier);\n\tExtrae_set_finalize_task_function (Extrae_MPI_Finalize);\n\n\tInitMPICommunicators();\n\n#if defined(SAMPLING_SUPPORT)\n\t/* If sampling is enabled, just stop all the processes at the same point\n\t   and continue */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n#endif\n\n\t/* Proceed with initialization if it's not already init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_NOT_INITIALIZED)\n\t{\n\t\tint res;\n\t\tchar *config_file = getenv (\"EXTRAE_CONFIG_FILE\");\n\n\t\tif (config_file == NULL)\n\t\t\tconfig_file = getenv (\"MPTRACE_CONFIG_FILE\");\n\n\t\tExtrae_set_initial_TASKID (TASKID);\n\t\tExtrae_set_is_initialized (EXTRAE_INITIALIZED_MPI_INIT);\n\n\t\tif (config_file != NULL)\n\t\t\t/* Obtain a localized copy *except for the master process* */\n\t\t\tconfig_file = MPI_Distribute_XML_File (TASKID, Extrae_get_num_tasks(), config_file);\n\n\t\t/* Initialize the backend */\n\t\tres = Backend_preInitialize (TASKID, Extrae_get_num_tasks(), config_file, FALSE);\n\t\tif (!res)\n\t\t\treturn val;\n\n\t\t/* Remove the local copy only if we're not the master */\n\t\tif (TASKID != 0)\n\t\t\tunlink (config_file);\n\t\tfree (config_file);\n\t}\n\telse\n\t{\n\t\tExtrae_MPI_prepareDirectoryStructures (TASKID, Extrae_get_num_tasks());\n\t\tBackend_updateTaskID ();\n\t}\n\n\tGather_Nodes_Info ();\n\n\t/* Generate a tentative file list, remove first if the list was generated\n\t   by Extrae_init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_INITIALIZED_EXTRAE_INIT)\n\t\tMPI_remove_file_list (TRUE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tPMPI_Comm_get_parent (&cparent);\n#endif\n\tMPI_Generate_Task_File_List (TasksNodes, cparent != MPI_COMM_NULL);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tMPI_Generate_Spawns_List ();\n#endif \n\n\t/* Take the time now, we can't put MPIINIT_EV before APPL_EV */\n\tMPI_Init_start_time = TIME;\n\n\t/* Call a barrier in order to synchronize all tasks using MPIINIT_EV / END\n\t   Three consecutive barriers for a better synchronization (J suggested) */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n\tExtrae_barrier_tasks();\n\tExtrae_barrier_tasks();\n\n\tinitTracingTime = MPI_Init_end_time = TIME;\n\n\tif (!Backend_postInitialize (TASKID, Extrae_get_num_tasks(), MPI_INIT_EV, MPI_Init_start_time, MPI_Init_end_time, TasksNodes))\n\t\treturn val;\n\n\t/* Annotate already built communicators */\n\tTrace_MPI_Communicator (MPI_COMM_WORLD, MPI_Init_start_time, FALSE);\n\tTrace_MPI_Communicator (MPI_COMM_SELF, MPI_Init_start_time, FALSE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n        Spawn_Children_Sync( MPI_Init_start_time );\n#endif\n\n\t/* Stats Init */\n        global_mpi_stats = mpi_stats_init(Extrae_get_num_tasks());\n\tupdateStats_OTHER(global_mpi_stats);\n\n\treturn val;\n}\n\n\n#if defined(MPI_HAS_INIT_THREAD_C)\nint MPI_Init_thread_C_Wrapper (int *argc, char ***argv, int required, int *provided)\n{\n\tMPI_Comm cparent = MPI_COMM_NULL;\n\tint val = 0;\n\tiotimer_t MPI_Init_start_time, MPI_Init_end_time;\n\n\thash_init (&requests);\n\tPR_queue_init (&PR_queue);\n\n#ifdef WITH_PMPI_HOOK\n\tint (*real_mpi_init_thread)(int *argc, char ***argv, int required, int *provided) = NULL;\n\treal_mpi_init_thread = dlsym(RTLD_NEXT, \"MPI_Init_thread\");\n\tif (real_mpi_init_thread != NULL) {\n\t\tval = real_mpi_init_thread (argc, argv, required, provided);\n\t} else\n#endif\n\t{\n\t\tval = PMPI_Init_thread (argc, argv, required, provided);\n\t}\n\n\tExtrae_set_ApplicationIsMPI (TRUE);\n\tExtrae_Allocate_Task_Bitmap (Extrae_MPI_NumTasks());\n\n\t/* Setup callbacks for TASK identification and barrier execution */\n\tExtrae_set_taskid_function (Extrae_MPI_TaskID);\n\tExtrae_set_numtasks_function (Extrae_MPI_NumTasks);\n\tExtrae_set_barrier_tasks_function (Extrae_MPI_Barrier);\n\tExtrae_set_finalize_task_function (Extrae_MPI_Finalize);\n\n\tInitMPICommunicators();\n\n#if defined(SAMPLING_SUPPORT)\n\t/* If sampling is enabled, just stop all the processes at the same point\n\t   and continue */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n#endif\n\n\t/* Proceed with initialization if it's not already init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_NOT_INITIALIZED)\n\t{\n\t\tint res;\n\t\tchar *config_file = getenv (\"EXTRAE_CONFIG_FILE\");\n\n\t\tif (config_file == NULL)\n\t\t\tconfig_file = getenv (\"MPTRACE_CONFIG_FILE\");\n\n\t\tExtrae_set_initial_TASKID (TASKID);\n\t\tExtrae_set_is_initialized (EXTRAE_INITIALIZED_MPI_INIT);\n\n\t\tif (config_file != NULL)\n\t\t\t/* Obtain a localized copy *except for the master process* */\n\t\t\tconfig_file = MPI_Distribute_XML_File (TASKID, Extrae_get_num_tasks(), config_file);\n\n\t\t/* Initialize the backend */\n\t\tres = Backend_preInitialize (TASKID, Extrae_get_num_tasks(), config_file, FALSE);\n\t\tif (!res)\n\t\t\treturn val;\n\n\t\t/* Remove the local copy only if we're not the master */\n\t\tif (TASKID != 0)\n\t\t\tunlink (config_file);\n\t\tfree (config_file);\n\t}\n\telse\n\t{\n\t\tExtrae_MPI_prepareDirectoryStructures (TASKID, Extrae_get_num_tasks());\n\t\tBackend_updateTaskID ();\n\t}\n\n\tGather_Nodes_Info ();\n\n\t/* Generate a tentative file list, remove first if the list was generated\n\t   by Extrae_init */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_INITIALIZED_EXTRAE_INIT)\n\t\tMPI_remove_file_list (TRUE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tPMPI_Comm_get_parent (&cparent);\n#endif\n\tMPI_Generate_Task_File_List (TasksNodes, cparent != MPI_COMM_NULL);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tMPI_Generate_Spawns_List ();\n#endif\n\n\t/* Take the time now, we can't put MPIINIT_EV before APPL_EV */\n\tMPI_Init_start_time = TIME;\n\n\t/* Call a barrier in order to synchronize all tasks using MPIINIT_EV / END\n\t   Three consecutive barriers for a better synchronization (J suggested) */\n\tExtrae_barrier_tasks();  /* will default to MPI_BARRIER */\n\tExtrae_barrier_tasks();\n\tExtrae_barrier_tasks();\n\n\tinitTracingTime = MPI_Init_end_time = TIME;\n\n\tif (!Backend_postInitialize (TASKID, Extrae_get_num_tasks(), MPI_INIT_EV, MPI_Init_start_time, MPI_Init_end_time, TasksNodes))\n\t\treturn val;\n\n\t/* Annotate already built communicators */\n\tTrace_MPI_Communicator (MPI_COMM_WORLD, MPI_Init_start_time, FALSE);\n\tTrace_MPI_Communicator (MPI_COMM_SELF, MPI_Init_start_time, FALSE);\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n        Spawn_Children_Sync (MPI_Init_start_time);\n#endif\n\n\t/* Stats Init */\n        global_mpi_stats = mpi_stats_init(Extrae_get_num_tasks());\n\tupdateStats_OTHER(global_mpi_stats);\n\n\treturn val;\n}\n#endif /* MPI_HAS_INIT_THREAD_C */\n\n\n/******************************************************************************\n ***  MPI_Finalize_C_Wrapper\n ******************************************************************************/\n\nint MPI_Finalize_C_Wrapper (void)\n{\n\tMPI_Comm cparent = MPI_COMM_NULL;\n\tint ierror = 0;\n\n#if defined(IS_BGL_MACHINE)\n\tBGL_disable_barrier_inside = 1;\n#endif\n\n\tif (CURRENT_TRACE_MODE(THREADID) == TRACE_MODE_BURSTS)\n\t{\n        updateStats_OTHER(global_mpi_stats);\n\t\tExtrae_MPI_stats_Wrapper (LAST_READ_TIME);\n\t\tTrace_mode_switch();\n\t\tTrace_Mode_Change (THREADID, LAST_READ_TIME);\n\t}\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_FINALIZE_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n#if defined(IS_BGL_MACHINE)\n\tBGL_disable_barrier_inside = 0;\n#endif\n\n\t/* Generate the final file list */\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n\tPMPI_Comm_get_parent (&cparent);\n#endif\n\tMPI_Generate_Task_File_List (TasksNodes, cparent != MPI_COMM_NULL);\n\n\tTRACE_MPIEVENT (TIME, MPI_FINALIZE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\t/* Finalize only if its initialized by MPI_init call */\n\tif (Extrae_is_initialized_Wrapper() == EXTRAE_INITIALIZED_MPI_INIT)\n\t{\n\t\tBackend_Finalize ();\n\n#ifdef WITH_PMPI_HOOK\n\t\tint (*real_mpi_finalize)() = NULL;\n\t\treal_mpi_finalize = dlsym(RTLD_NEXT, \"MPI_Finalize\");\n\t\tif (real_mpi_finalize != NULL) {\n\t\t\tierror = real_mpi_finalize();\n\t\t} else\n#endif\n\t\t{\n\t\t\tierror = PMPI_Finalize();\n\t\t}\n\n\t\tmpitrace_on = FALSE;\n\t}\n\telse\n\t\tierror = MPI_SUCCESS;\n\n\treturn ierror;\n}\n\n/******************************************************************************\n ***  MPI_Request_get_status_C_Wrapper\n ******************************************************************************/\nint Bursts_MPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status)\n{\n\tint ierror;\n\t/*\n\t*   event : MPI_REQUEST_GET_STATUS_EV                     value : EVT_BEGIN\n\t*   target : ---                          size  : ---\n\t*   tag : ---\n\t*/\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_REQUEST_GET_STATUS_EV, EVT_BEGIN, request, EMPTY, EMPTY, EMPTY, EMPTY);\n\n    ierror = PMPI_Request_get_status(request, flag, status);\n\t/*\n\t*   event : MPI_REQUEST_GET_STATUS_EV                     value : EVT_END\n\t*   target : ---                          size  : ---\n\t*   tag : ---\n\t*/\n    TRACE_MPIEVENT (TIME, MPI_REQUEST_GET_STATUS_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n    return ierror;\n}\n\nint Normal_MPI_Request_get_status(MPI_Request request, int *flag, MPI_Status *status)\n{\n    static int MPI_Request_get_status_counter = 0;\n    static iotimer_t elapsed_time_outside_MPI_Request_get_status_C = 0, last_MPI_Request_get_status_C_exit_time = 0; \n\tiotimer_t begin_time, end_time;\n\tint ierror;\n\n\tbegin_time = LAST_READ_TIME;\n\n\tif (MPI_Request_get_status_counter == 0)\n\t{\n\t\t/* Primer request */\n\t\telapsed_time_outside_MPI_Request_get_status_C = 0;\n\t}\n\telse\n\t{\n\t\telapsed_time_outside_MPI_Request_get_status_C += (begin_time - last_MPI_Request_get_status_C_exit_time);\n\t}\n\n    ierror = PMPI_Request_get_status(request, flag, status);\n\tend_time = TIME;\n\tlast_MPI_Request_get_status_C_exit_time = end_time;\n\n\tif (tracejant_mpi)\n\t{\n\t\tif (*flag)\n\t\t{\n\t\t\tif (MPI_Request_get_status_counter != 0)\n\t\t\t{\n\t\t\t\tTRACE_EVENT (begin_time, MPI_TIME_OUTSIDE_MPI_REQUEST_GET_STATUS_EV, elapsed_time_outside_MPI_Request_get_status_C);\n\t\t\t\tTRACE_EVENT (begin_time, MPI_REQUEST_GET_STATUS_COUNTER_EV, MPI_Request_get_status_counter);\n\t\t\t}\n\n\t\t\tTRACE_MPIEVENT (begin_time, MPI_REQUEST_GET_STATUS_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n    \n\t\t\tTRACE_MPIEVENT (end_time, MPI_REQUEST_GET_STATUS_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\t\t\tMPI_Request_get_status_counter = 0;\n\t\t} \n\t\telse\n\t\t{\n\t\t\tif (MPI_Request_get_status_counter == 0)\n\t\t\t{\n\t\t\t\t/* El primer request que falla */\n\t\t\t\tTRACE_EVENTANDCOUNTERS (begin_time, MPI_REQUEST_GET_STATUS_COUNTER_EV, 0, TRUE);\n\t\t\t}\n\t\t\tMPI_Request_get_status_counter ++;\n\t\t}\n\t}\n\treturn ierror;\n\n}\n\nint MPI_Request_get_status_C_Wrapper(MPI_Request request, int *flag, MPI_Status *status)\n{\n    int ret;\n\n    if (CURRENT_TRACE_MODE(THREADID) == TRACE_MODE_BURSTS)\n    {\n        ret = Bursts_MPI_Request_get_status(request, flag, status);\n    }\n    else\n    {\n        ret = Normal_MPI_Request_get_status(request, flag, status);\n    }\n    return ret;\n}\n\n\n/******************************************************************************\n ***  MPI_Cancel_C_Wrapper\n ******************************************************************************/\n\nint MPI_Cancel_C_Wrapper (MPI_Request *request)\n{\n  int ierror;\n\n  /*\n   *   event : CANCEL_EV                    value : EVT_BEGIN\n   *   target : request to cancel           size  : ---\n   *   tag : ---\n   */\n  TRACE_MPIEVENT (LAST_READ_TIME, MPI_CANCEL_EV, EVT_BEGIN, *request, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  ierror = PMPI_Cancel (request);\n\n  /*\n   *   event : CANCEL_EV                    value : EVT_END\n   *   target : request to cancel           size  : ---\n   *   tag : ---\n   */\n  TRACE_MPIEVENT (TIME, MPI_CANCEL_EV, EVT_END, *request, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n  return ierror;\n}\n\n\n/******************************************************************************\n ***  MPI_Comm_rank_C_Wrapper\n ******************************************************************************/\n\nint MPI_Comm_rank_C_Wrapper (MPI_Comm comm, int *rank)\n{\n\tint ierror;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_RANK_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\tierror = PMPI_Comm_rank (comm, rank);\n\tTRACE_MPIEVENT (TIME, MPI_COMM_RANK_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n\treturn ierror;\n}\n\n\n\n/******************************************************************************\n ***  MPI_Comm_size_C_Wrapper\n ******************************************************************************/\n\nint MPI_Comm_size_C_Wrapper (MPI_Comm comm, int *size)\n{\n\tint ierror;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_SIZE_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\tierror = PMPI_Comm_size (comm, size);\n\tTRACE_MPIEVENT (TIME, MPI_COMM_SIZE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n\treturn ierror;\n}\n\n\n/******************************************************************************\n ***  MPI_Comm_create_C_Wrapper\n ******************************************************************************/\n\nint MPI_Comm_create_C_Wrapper (MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm)\n{\n  int ierror;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_CREATE_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n  ierror = PMPI_Comm_create (comm, group, newcomm);\n  if (*newcomm != MPI_COMM_NULL && ierror == MPI_SUCCESS)\n    Trace_MPI_Communicator (*newcomm, LAST_READ_TIME, FALSE);\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_CREATE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n  return ierror;\n}\n\n/******************************************************************************\n ***  MPI_Comm_create_C_Wrapper\n ******************************************************************************/\n\nint MPI_Comm_free_C_Wrapper (MPI_Comm *comm)\n{\n\tUNREFERENCED_PARAMETER(comm);\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_FREE_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_CREATE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n\treturn MPI_SUCCESS;\n}\n\n\n/******************************************************************************\n ***  MPI_Comm_dup_C_Wrapper\n ******************************************************************************/\n\nint MPI_Comm_dup_C_Wrapper (MPI_Comm comm, MPI_Comm *newcomm)\n{\n  int ierror;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_DUP_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n  ierror = PMPI_Comm_dup (comm, newcomm);\n  if (*newcomm != MPI_COMM_NULL && ierror == MPI_SUCCESS)\n    Trace_MPI_Communicator (*newcomm, LAST_READ_TIME, FALSE);\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_DUP_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t\tEMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n  return ierror;\n}\n\n\n/******************************************************************************\n ***  MPI_Comm_split_C_Wrapper\n ******************************************************************************/\n\nint MPI_Comm_split_C_Wrapper (MPI_Comm comm, int color, int key, MPI_Comm *newcomm)\n{\n  int ierror;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_COMM_SPLIT_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n  ierror = PMPI_Comm_split (comm, color, key, newcomm);\n  if (*newcomm != MPI_COMM_NULL && ierror == MPI_SUCCESS)\n    Trace_MPI_Communicator (*newcomm, LAST_READ_TIME, FALSE);\n\n\tTRACE_MPIEVENT (TIME, MPI_COMM_SPLIT_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t\tEMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n  return ierror;\n}\n\n\n#if defined(MPI_SUPPORTS_MPI_COMM_SPAWN)\n/******************************************************************************\n ***  MPI_Comm_spawn_C_Wrapper\n ******************************************************************************/\nint MPI_Comm_spawn_C_Wrapper (char *command, char **argv, int maxprocs, MPI_Info info,\n  int root, MPI_Comm comm, MPI_Comm *intercomm, int *array_of_errcodes)\n{\n  int ierror;\n  unsigned long long SpawnStartTime = LAST_READ_TIME;\n\n  TRACE_MPIEVENT (SpawnStartTime, MPI_COMM_SPAWN_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  ierror = PMPI_Comm_spawn (command, argv, maxprocs, info, root, comm, intercomm, array_of_errcodes);\n\n  if (ierror == MPI_SUCCESS)\n  {\n    Spawn_Parent_Sync (SpawnStartTime, *intercomm, comm);\n  }\n\n  TRACE_MPIEVENT (TIME, MPI_COMM_SPAWN_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  updateStats_COLLECTIVE(global_mpi_stats, 0, 0);\n\n  return ierror;\n}\n \n/******************************************************************************\n ***  MPI_Comm_spawn_multiple_C_Wrapper\n ******************************************************************************/\n\nint MPI_Comm_spawn_multiple_C_Wrapper (int count, char *array_of_commands[], char* *array_of_argv[],\n  int array_of_maxprocs[], MPI_Info array_of_info[], int root, MPI_Comm comm,\n  MPI_Comm *intercomm, int array_of_errcodes[])\n{\n  int ierror;\n  unsigned long long SpawnStartTime = LAST_READ_TIME;\n\n  TRACE_MPIEVENT (SpawnStartTime, MPI_COMM_SPAWN_MULTIPLE_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  ierror = PMPI_Comm_spawn_multiple (count, array_of_commands, array_of_argv, array_of_maxprocs, array_of_info, root, comm, intercomm, array_of_errcodes);\n\n  if (ierror == MPI_SUCCESS)\n  {\n    Spawn_Parent_Sync (SpawnStartTime, *intercomm, comm);\n  }\n\n  TRACE_MPIEVENT (TIME, MPI_COMM_SPAWN_MULTIPLE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n  return ierror;\n}\n#endif /* MPI_SUPPORTS_MPI_COMM_SPAWN */\n\n/******************************************************************************\n ***  MPI_Cart_create\n ******************************************************************************/\nint MPI_Cart_create_C_Wrapper (MPI_Comm comm_old, int ndims, int *dims,\n                               int *periods, int reorder, MPI_Comm *comm_cart)\n{\n\tint ierror;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_CART_CREATE_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tierror = PMPI_Cart_create (comm_old, ndims, dims, periods, reorder,\n\t  comm_cart);\n\n\tif (ierror == MPI_SUCCESS && *comm_cart != MPI_COMM_NULL)\n\t\tTrace_MPI_Communicator (*comm_cart, LAST_READ_TIME, FALSE);\n\n\tTRACE_MPIEVENT (TIME, MPI_CART_CREATE_EV, EVT_END, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n\treturn ierror;\n}\n\n/* -------------------------------------------------------------------------\n   MPI_Cart_sub\n   ------------------------------------------------------------------------- */\nint MPI_Cart_sub_C_Wrapper (MPI_Comm comm, int *remain_dims, MPI_Comm *comm_new)\n{\n\tint ierror;\n\n\tTRACE_MPIEVENT (LAST_READ_TIME, MPI_CART_SUB_EV, EVT_BEGIN, EMPTY, EMPTY,\n\t\tEMPTY, EMPTY, EMPTY);\n\n\tierror = PMPI_Cart_sub (comm, remain_dims, comm_new);\n\n\tif (ierror == MPI_SUCCESS && *comm_new != MPI_COMM_NULL)\n\t\tTrace_MPI_Communicator (*comm_new, LAST_READ_TIME, FALSE);\n\n\tTRACE_MPIEVENT (TIME, MPI_CART_SUB_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n\t\tEMPTY); \n\n\tupdateStats_OTHER(global_mpi_stats);\n\n\treturn ierror;\n}\n\n/* -------------------------------------------------------------------------\n   MPI_Intercomm_create\n   ------------------------------------------------------------------------- */\nint MPI_Intercomm_create_C_Wrapper (MPI_Comm local_comm, int local_leader,\n\tMPI_Comm peer_comm, int remote_leader, int tag, MPI_Comm *newintercomm)\n{\n\tint ierror;\n\n\tTRACE_MPIEVENT(LAST_READ_TIME, MPI_INTERCOMM_MERGE_EV, EVT_BEGIN,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tierror = PMPI_Intercomm_create (local_comm, local_leader, peer_comm,\n\t  remote_leader, tag, newintercomm);\n\n\tif (ierror == MPI_SUCCESS && *newintercomm != MPI_COMM_NULL)\n\t\tTrace_MPI_InterCommunicator (*newintercomm, local_comm, local_leader,\n\t\t  peer_comm, remote_leader, LAST_READ_TIME, TRUE);\n\n\tTRACE_MPIEVENT(TIME, MPI_INTERCOMM_MERGE_EV, EVT_END,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\treturn ierror;\n}\n\n/* -------------------------------------------------------------------------\n   MPI_Intercomm_merge\n   ------------------------------------------------------------------------- */\nint MPI_Intercomm_merge_C_Wrapper (MPI_Comm intercomm, int high,\n\tMPI_Comm *newintracomm)\n{\n\tint ierror;\n\n\tTRACE_MPIEVENT(LAST_READ_TIME, MPI_INTERCOMM_MERGE_EV, EVT_BEGIN,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\tierror = PMPI_Intercomm_merge (intercomm, high, newintracomm);\n\n\tif (ierror == MPI_SUCCESS && *newintracomm != MPI_COMM_NULL)\n\t\tTrace_MPI_Communicator (*newintracomm, LAST_READ_TIME, TRUE);\n\n\tTRACE_MPIEVENT(TIME, MPI_INTERCOMM_MERGE_EV, EVT_END,\n\t  EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n\n\treturn ierror;\n}\n\n\n/******************************************************************************\n ***  MPI_Start_C_Wrapper\n ******************************************************************************/\n\nint MPI_Start_C_Wrapper (MPI_Request *request)\n{\n  int ierror;\n\n  /*\n   *   type : START_EV                     value : EVT_BEGIN\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (LAST_READ_TIME, MPI_START_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n\n  /* Primer cal fer la crida real */\n  ierror = PMPI_Start (request);\n\n  /* S'intenta tracejar aquesta request */\n  Traceja_Persistent_Request (request, LAST_READ_TIME);\n\n  /*\n   *   type : START_EV                     value : EVT_END\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (TIME, MPI_START_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY, EMPTY);\n  return ierror;\n}\n\n\n/******************************************************************************\n ***  MPI_Startall_C_Wrapper\n ******************************************************************************/\n\nint MPI_Startall_C_Wrapper (int count, MPI_Request *array_of_requests)\n{\n  MPI_Request save_reqs[MAX_WAIT_REQUESTS];\n  int ii, ierror;\n\n  /*\n   *   type : START_EV                     value : EVT_BEGIN\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (LAST_READ_TIME, MPI_STARTALL_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n\n  /*\n   * Algunes implementacions es poden carregar aquesta informacio.\n   * Cal salvar-la per poder tracejar despr\u00e9s de fer la crida pmpi. \n   */\n  memcpy (save_reqs, array_of_requests, count * sizeof (MPI_Request));\n\n  /* Primer cal fer la crida real */\n  ierror = PMPI_Startall (count, array_of_requests);\n\n  /* Es tracejen totes les requests */\n  for (ii = 0; ii < count; ii++)\n    Traceja_Persistent_Request (&(save_reqs[ii]), LAST_READ_TIME);\n\n  /*\n   *   type : START_EV                     value : EVT_END\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (TIME, MPI_STARTALL_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n  return ierror;\n}\n\n\n/******************************************************************************\n ***  MPI_Request_free_C_Wrapper\n ******************************************************************************/\nint MPI_Request_free_C_Wrapper (MPI_Request *request)\n{\n  int ierror;\n\n  /*\n   *   type : START_EV                     value : EVT_BEGIN\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (LAST_READ_TIME, MPI_REQUEST_FREE_EV, EVT_BEGIN, EMPTY, EMPTY, EMPTY,\n                  EMPTY, EMPTY);\n\n  /* Free from our structures */\n  PR_Elimina_request (&PR_queue, request);\n\n  /* Perform the real call */\n  ierror = PMPI_Request_free (request);\n\n  /*\n   *   type : START_EV                     value : EVT_END\n   *   target : ---                        size  : ----\n   *   tag : ---                           comm : ---\n   *   aux : ---\n   */\n  TRACE_MPIEVENT (TIME, MPI_REQUEST_FREE_EV, EVT_END, EMPTY, EMPTY, EMPTY, EMPTY,\n                  EMPTY);\n\n\tupdateStats_OTHER(global_mpi_stats);\n\n  return ierror;\n}\n\n#endif /* defined(C_SYMBOLS) */\n\nvoid Extrae_MPI_stats_Wrapper (iotimer_t timestamp)\n{\n  int i=0;\n  unsigned int vec_types [MPI_STATS_EVENTS_COUNT];\n  for (i=0; i<MPI_STATS_EVENTS_COUNT; i++)\n    vec_types[i] = MPI_STATS_EV;\n\n  unsigned int vec_values[MPI_STATS_EVENTS_COUNT] = {\n    MPI_STATS_P2P_COUNT_EV,\n    MPI_STATS_P2P_BYTES_SENT_EV,\n    MPI_STATS_P2P_BYTES_RECV_EV,\n    MPI_STATS_GLOBAL_COUNT_EV,\n    MPI_STATS_GLOBAL_BYTES_SENT_EV,\n    MPI_STATS_GLOBAL_BYTES_RECV_EV,\n    MPI_STATS_TIME_IN_MPI_EV, \n    MPI_STATS_P2P_INCOMING_COUNT_EV,\n    MPI_STATS_P2P_OUTGOING_COUNT_EV,\n    MPI_STATS_P2P_INCOMING_PARTNERS_COUNT_EV,\n    MPI_STATS_P2P_OUTGOING_PARTNERS_COUNT_EV,\n    MPI_STATS_TIME_IN_OTHER_EV,\n    MPI_STATS_TIME_IN_P2P_EV,\n    MPI_STATS_TIME_IN_GLOBAL_EV,\n    MPI_STATS_OTHER_COUNT_EV\n  };\n\n  unsigned int vec_params[MPI_STATS_EVENTS_COUNT] = {\n    global_mpi_stats->P2P_Communications, \n    global_mpi_stats->P2P_Bytes_Sent,\n    global_mpi_stats->P2P_Bytes_Recv, \n    global_mpi_stats->COLLECTIVE_Communications,\n    global_mpi_stats->COLLECTIVE_Bytes_Sent, \n    global_mpi_stats->COLLECTIVE_Bytes_Recv,\n    global_mpi_stats->Elapsed_Time_In_MPI, \n    global_mpi_stats->P2P_Communications_In,\n    global_mpi_stats->P2P_Communications_Out,\n    mpi_stats_get_num_partners(global_mpi_stats, global_mpi_stats->P2P_Partner_In),\n    mpi_stats_get_num_partners(global_mpi_stats, global_mpi_stats->P2P_Partner_Out),\n    (global_mpi_stats->Elapsed_Time_In_MPI - global_mpi_stats->Elapsed_Time_In_P2P_MPI - global_mpi_stats->Elapsed_Time_In_COLLECTIVE_MPI),\n    global_mpi_stats->Elapsed_Time_In_P2P_MPI,\n    global_mpi_stats->Elapsed_Time_In_COLLECTIVE_MPI,\n    global_mpi_stats->MPI_Others_count\n  };\n\n  if (TRACING_MPI_STATISTICS)\n  {\n    TRACE_N_MISCEVENT (timestamp, MPI_STATS_EVENTS_COUNT, vec_types, vec_values, vec_params);\n  }\n\n  /* Reset the counters */\n  mpi_stats_reset(global_mpi_stats);\n}\n\nvoid Extrae_network_counters_Wrapper (void)\n{\n}\n\nvoid Extrae_network_routes_Wrapper (int mpi_rank)\n{\n\tUNREFERENCED_PARAMETER(mpi_rank);\n}\n\n/******************************************************************************\n **      Function name : Extrae_tracing_tasks_Wrapper\n **      Author: HSG\n **      Description : Let the user choose which tasks must be traced\n ******************************************************************************/\nvoid Extrae_tracing_tasks_Wrapper (unsigned from, unsigned to)\n{\n\tunsigned i, tmp;\n\n\tif (Extrae_get_num_tasks() > 1)\n\t{\n\t\tif (tracejant && TracingBitmap != NULL)\n\t\t{\n\t\t\t/*\n\t\t\t * Interchange them if limits are badly given \n\t\t\t */\n\t\t\tif (from > to)\n\t\t\t{\n\t\t\t\ttmp = from;\n\t\t\t\tfrom = to;\n\t\t\t\tto = tmp;\n\t\t\t}\n\n\t\t\tif (to >= Extrae_get_num_tasks())\n\t\t\t\tto = Extrae_get_num_tasks() - 1;\n\n\t\t\t/*\n\t\t\t * If I'm not in the bitmask, disallow me tracing! \n\t\t\t */\n\t\t\tTRACE_EVENT (TIME, SET_TRACE_EV, (from <= TASKID) && (TASKID <= to));\n\n\t\t\tfor (i = 0; i < Extrae_get_num_tasks(); i++)\n\t\t\t\tTracingBitmap[i] = FALSE;\n\n\t\t\t/*\n\t\t\t * Build the bitmask \n\t\t\t */\n\t\t\tfor (i = from; i <= to; i++)\n\t\t\t\tTracingBitmap[i] = TRUE;\n\t\t}\n\t}\n}\n\n/******************************************************************************\n ***  Trace_MPI_Communicator\n ******************************************************************************/\nstatic void Trace_MPI_Communicator (MPI_Comm newcomm, UINT64 time, int trace)\n{\n\t/* Store in the tracefile the definition of the communicator.\n\t   If the communicator is self/world, store an alias, otherwise store the\n\t   involved tasks\n\t*/\n\tint i, num_tasks, ierror;\n\tint result, is_comm_world, is_comm_self;\n\n\t/* First check if the communicators are duplicates of comm_world or\n\t   comm_self */\n\tierror = PMPI_Comm_compare (MPI_COMM_WORLD, newcomm, &result);\n\tis_comm_world = result == MPI_IDENT || result == MPI_CONGRUENT;\n\n\tierror = PMPI_Comm_compare (MPI_COMM_SELF, newcomm, &result);\n\tis_comm_self = result == MPI_IDENT || result == MPI_CONGRUENT;\n\n\tif (!is_comm_world && !is_comm_self)\n\t{\n\t\tMPI_Group group;\n\n\t\t/* Obtain the group of the communicator */\n\t\tierror = PMPI_Comm_group (newcomm, &group);\n\t\tMPI_CHECK(ierror, PMPI_Comm_group);\n\t\n\t\t/* Calculate the number of involved tasks */\n\t\tierror = PMPI_Group_size (group, &num_tasks);\n\t\tMPI_CHECK(ierror, PMPI_Group_size);\n\n\t\t{\n\t\t\tint ranks_aux[num_tasks];\n\t\n\t\t\t/* Obtain task id of each element */\n\t\t\tierror = PMPI_Group_translate_ranks (group, num_tasks, ranks_global, grup_global, ranks_aux);\n\t\t\tMPI_CHECK(ierror, PMPI_Group_translate_ranks);\n\t\n\t\t\tFORCE_TRACE_MPIEVENT (time, MPI_ALIAS_COMM_CREATE_EV, EVT_BEGIN, EMPTY, num_tasks, EMPTY, newcomm, trace);\n\t\n\t\t\t/* Dump each of the task ids */\n\t\t\tfor (i = 0; i < num_tasks; i++)\n\t\t\t\tFORCE_TRACE_MPIEVENT (time, MPI_RANK_CREACIO_COMM_EV, ranks_aux[i], EMPTY,\n\t\t\t\t\tEMPTY, EMPTY, EMPTY, EMPTY);\n\t\t}\n\n\t\t/* Free the group */\n\t\tif (group != MPI_GROUP_NULL)\n\t\t{\n\t\t\tierror = PMPI_Group_free (&group);\n\t\t\tMPI_CHECK(ierror, PMPI_Group_free);\n\t\t}\n\t}\n\telse if (is_comm_world)\n\t{\n\t\tFORCE_TRACE_MPIEVENT (time, MPI_ALIAS_COMM_CREATE_EV, EVT_BEGIN, MPI_COMM_WORLD_ALIAS,\n\t\t\tExtrae_get_num_tasks(), EMPTY, newcomm, trace);\n\t}\n\telse if (is_comm_self)\n\t{\n\t\tFORCE_TRACE_MPIEVENT (time, MPI_ALIAS_COMM_CREATE_EV, EVT_BEGIN, MPI_COMM_SELF_ALIAS,\n\t\t\t1, EMPTY, newcomm, trace);\n\t}\n\n\tFORCE_TRACE_MPIEVENT (time, MPI_ALIAS_COMM_CREATE_EV, EVT_END, EMPTY, EMPTY, EMPTY, newcomm, trace);\n}\n\n/******************************************************************************\n ***  Trace_MPI_InterCommunicator\n ******************************************************************************/\nstatic void Trace_MPI_InterCommunicator (MPI_Comm newcomm, MPI_Comm local_comm, \n\tint local_leader, MPI_Comm remote_comm, int remote_leader, UINT64 time,\n\tint trace)\n{\n\tint ierror, t_local_leader, t_remote_leader;\n\tMPI_Group l_group, r_group;\n\n\tierror = PMPI_Comm_group (local_comm, &l_group);\n\tMPI_CHECK(ierror, PMPI_Comm_group);\n\n\tierror = PMPI_Comm_group (remote_comm, &r_group);\n\tMPI_CHECK(ierror, PMPI_Comm_group);\n\n\tierror = PMPI_Group_translate_ranks (l_group, 1, &local_leader,\n\t grup_global, &t_local_leader);\n\tMPI_CHECK(ierror, PMPI_Group_translate_ranks);\n\n\tierror = PMPI_Group_translate_ranks (r_group, 1, &remote_leader,\n\t  grup_global, &t_remote_leader);\n\tMPI_CHECK(ierror, PMPI_Group_translate_ranks);\n\n\tierror = PMPI_Group_free (&l_group);\n\tMPI_CHECK(ierror, PMPI_Group_free);\n\n\tierror = PMPI_Group_free (&r_group);\n\tMPI_CHECK(ierror, PMPI_Group_free);\n\n\tFORCE_TRACE_MPIEVENT(time, MPI_ALIAS_COMM_CREATE_EV, EVT_BEGIN, MPI_NEW_INTERCOMM_ALIAS,\n\t  1, t_local_leader, local_comm, trace);\n\n\tFORCE_TRACE_MPIEVENT(time, MPI_ALIAS_COMM_CREATE_EV, EVT_BEGIN, MPI_NEW_INTERCOMM_ALIAS,\n\t  2, t_remote_leader, remote_comm, trace);\n\n\tFORCE_TRACE_MPIEVENT (time, MPI_ALIAS_COMM_CREATE_EV, EVT_END, MPI_NEW_INTERCOMM_ALIAS,\n\t  EMPTY, EMPTY, newcomm, trace);\n}\n\nvoid Extrae_MPI_prepareDirectoryStructures (int me, int world_size)\n{\n\t/* Before proceeding, check if it's ok to call MPI. We might support\n\t   MPI but maybe it's not initialized at this moment (nanos+mpi e.g.) */\n\tif (world_size > 1)\n\t{\n\t\t/* If the directory is shared, then let task 0 create all temporal\n\t  \t directories. This proves a significant speedup in GPFS */\n\t\tif (ExtraeUtilsMPI_CheckSharedDisk (Extrae_Get_TemporalDirNoTask()))\n\t\t{\n\t\t\tif (me == 0)\n\t\t\t\tfprintf (stdout, PACKAGE_NAME\": Temporal directory (%s) is shared among processes.\\n\",\n\t\t\t\t  Extrae_Get_TemporalDirNoTask());\n\t\t\tif (me == 0)\n\t\t\t{\n\t\t\t\tint i;\n\t\t\t\tfor (i = 0; i < world_size; i+=Extrae_Get_TemporalDir_BlockSize())\n\t\t\t\t\tBackend_createExtraeDirectory (i, TRUE);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (me == 0)\n\t\t\t\tfprintf (stdout, PACKAGE_NAME\": Temporal directory (%s) is private among processes.\\n\",\n\t\t\t\t  Extrae_Get_TemporalDirNoTask());\n\t\t\t\tBackend_createExtraeDirectory (me, TRUE);\n\t\t}\n\t\n\t\t/* Now, wait for every process to reach this point, so directories are\n\t\t   created */\n\t\tPMPI_Barrier (MPI_COMM_WORLD);\n\t\tPMPI_Barrier (MPI_COMM_WORLD);\n\t\tPMPI_Barrier (MPI_COMM_WORLD);\n\t\n\t\t/* If the directory is shared, then let task 0 create all final\n\t\t   directories. This proves a significant speedup in GPFS */\n\t\tif (ExtraeUtilsMPI_CheckSharedDisk (Extrae_Get_FinalDirNoTask()))\n\t\t{\n\t\t\tif (me == 0)\n\t\t\t\tfprintf (stdout, PACKAGE_NAME\": Final directory (%s) is shared among processes.\\n\",\n\t\t\t\t  Extrae_Get_FinalDirNoTask());\n\t\t\tif (me == 0)\n\t\t\t{\n\t\t\t\tint i;\n\t\t\t\tfor (i = 0; i < world_size; i+=Extrae_Get_FinalDir_BlockSize())\n\t\t\t\t\tBackend_createExtraeDirectory (i, FALSE);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (me == 0)\n\t\t\t\tfprintf (stdout, PACKAGE_NAME\": Final directory (%s) is private among processes.\\n\",\n\t\t\t\t  Extrae_Get_FinalDirNoTask());\n\t\t\tBackend_createExtraeDirectory (me, FALSE);\n\t\t}\n\t\n\t\t/* Now, wait for every process to reach this point, so directories are\n\t\t   created */\n\t\tPMPI_Barrier (MPI_COMM_WORLD);\n\t\tPMPI_Barrier (MPI_COMM_WORLD);\n\t\tPMPI_Barrier (MPI_COMM_WORLD);\n\t}\n\telse\n\t{\n\t\t/* If process is alone, create temporal and final directories */\n\t\tBackend_createExtraeDirectory (me, TRUE);\n\t\tBackend_createExtraeDirectory (me, FALSE);\n\t}\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/OPENCL/opencl_wrapper.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef  __USE_GNU\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n\n#include \"wrapper.h\"\n#include \"opencl_probe.h\"\n#include \"opencl_common.h\"\n#include \"opencl_wrapper.h\"\n\n#if defined(PIC)\nstatic cl_mem (*real_clCreateBuffer)(cl_context, cl_mem_flags, size_t, void*, cl_int *) = NULL;\nstatic cl_command_queue (*real_clCreateCommandQueue)(cl_context, cl_device_id, cl_command_queue_properties, cl_int*) = NULL;\nstatic cl_context (*real_clCreateContext)(const cl_context_properties *, cl_uint, const cl_device_id *, void *, void *, cl_int *) = NULL;\nstatic cl_context (*real_clCreateContextFromType)(const cl_context_properties *, cl_device_type, void *, void *, cl_int *) = NULL;\nstatic cl_kernel (*real_clCreateKernel)(cl_program, const char *, cl_int *) = NULL;\nstatic cl_int (*real_clCreateKernelsInProgram)(cl_program, cl_uint, cl_kernel *, cl_uint *) = NULL;\nstatic cl_int (*real_clSetKernelArg)(cl_kernel, cl_uint, size_t, const void *) = NULL;\nstatic cl_program (*real_clCreateProgramWithSource)(cl_context, cl_uint, const char **,\tconst size_t *, cl_int *) = NULL;\nstatic cl_program (*real_clCreateProgramWithBinary)(cl_context, cl_uint, const cl_device_id *, const size_t *, const unsigned char **, cl_int *, cl_int *) = NULL;\nstatic cl_program (*real_clCreateProgramWithBuiltInKernels)(cl_context, cl_uint, const cl_device_id *, const char *, cl_int *) = NULL;\nstatic cl_mem (*real_clCreateSubBuffer)(cl_mem, cl_mem_flags, cl_buffer_create_type, const void *, cl_int *) = NULL;\nstatic cl_int (*real_clEnqueueFillBuffer)(cl_command_queue, cl_mem, const void *, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueCopyBuffer)(cl_command_queue, cl_mem, cl_mem, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueCopyBufferRect)(cl_command_queue, cl_mem, cl_mem,\tconst size_t *, const size_t *, const size_t *, size_t, size_t,\tsize_t, size_t, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueNDRangeKernel)(cl_command_queue, cl_kernel, cl_uint, const size_t *, const size_t *, const size_t *, cl_uint,\tconst cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueTask)(cl_command_queue, cl_kernel, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueNativeKernel)(cl_command_queue, void *, void *, size_t, cl_uint, const cl_mem *, const void **, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueReadBuffer)(cl_command_queue, cl_mem, cl_bool, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueReadBufferRect)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueWriteBuffer)(cl_command_queue, cl_mem, cl_bool, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueWriteBufferRect)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clBuildProgram)(cl_program, cl_uint, const cl_device_id *,\tconst char *, void *, void *) = NULL;\nstatic cl_int (*real_clCompileProgram)(cl_program, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, const char **, void *, void *) = NULL;\nstatic cl_program (*real_clLinkProgram)(cl_context, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, void *, void *, cl_int *) = NULL;\nstatic cl_int (*real_clFinish)(cl_command_queue) = NULL;\nstatic cl_int (*real_clFlush)(cl_command_queue) = NULL;\nstatic cl_int (*real_clWaitForEvents)(cl_uint, const cl_event *el) = NULL;\n#ifdef CL_VERSION_1_2\nstatic cl_int (*real_clEnqueueMarkerWithWaitList)(cl_command_queue, cl_uint, const cl_event *, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueBarrierWithWaitList)(cl_command_queue, cl_uint, const cl_event *, cl_event *) = NULL;\n#endif\nstatic cl_int (*real_clEnqueueMarker)(cl_command_queue, cl_event *) = NULL;\nstatic cl_int (*real_clEnqueueBarrier)(cl_command_queue) = NULL;\nstatic void* (*real_clEnqueueMapBuffer)(cl_command_queue, cl_mem, cl_bool, cl_map_flags, size_t, size_t, cl_uint, const cl_event *, cl_event *, cl_int *) = NULL;\nstatic cl_int (*real_clEnqueueUnmapMemObject)(cl_command_queue, cl_mem, void *, cl_uint, const cl_event *, cl_event *) = NULL;\n#ifdef CL_VERSION_1_2\nstatic cl_int (*real_clEnqueueMigrateMemObjects)(cl_command_queue, cl_uint, const cl_mem *, cl_mem_migration_flags, cl_uint, const cl_event *, cl_event *) = NULL;\n#endif\nstatic cl_int (*real_clRetainCommandQueue)(cl_command_queue) = NULL;\nstatic cl_int (*real_clReleaseCommandQueue)(cl_command_queue) = NULL;\nstatic cl_int (*real_clRetainContext)(cl_context) = NULL;\nstatic cl_int (*real_clReleaseContext)(cl_context) = NULL;\nstatic cl_int (*real_clRetainDevice)(cl_device_id) = NULL;\nstatic cl_int (*real_clReleaseDevice)(cl_device_id) = NULL;\nstatic cl_int (*real_clRetainEvent)(cl_event) = NULL;\nstatic cl_int (*real_clReleaseEvent)(cl_event) = NULL;\nstatic cl_int (*real_clRetainKernel)(cl_kernel) = NULL;\nstatic cl_int (*real_clReleaseKernel)(cl_kernel) = NULL;\nstatic cl_int (*real_clRetainMemObject)(cl_mem) = NULL;\nstatic cl_int (*real_clReleaseMemObject)(cl_mem) = NULL;\nstatic cl_int (*real_clRetainProgram)(cl_program) = NULL;\nstatic cl_int (*real_clReleaseProgram)(cl_program) = NULL;\n\nstatic int Extrae_Prepare_CommandQueue = FALSE;\n\n#endif /* PIC */\n\nvoid Extrae_OpenCL_fini (void)\n{\n\tExtrae_OpenCL_clQueueFlush_All();\n}\n\nvoid Extrae_OpenCL_init (unsigned rank)\n{\n\tUNREFERENCED_PARAMETER(rank);\n\n#if defined(PIC)\n\n#if defined(__APPLE__)\n\tvoid *lib = dlopen(\"/System/Libraries/Frameworks/OpenCL.framework/OpenCL\", RTLD_NOW);\n#else\n\tvoid *lib = RTLD_NEXT;\n#endif\n\n\treal_clCreateBuffer = (cl_mem(*)(cl_context, cl_mem_flags, size_t, void*, cl_int *))\n\t\tdlsym (lib, \"clCreateBuffer\");\n\n\treal_clCreateCommandQueue = (cl_command_queue(*)(cl_context, cl_device_id, cl_command_queue_properties, cl_int*))\n\t\tdlsym (lib, \"clCreateCommandQueue\");\n\n\treal_clCreateContext = (cl_context(*)(const cl_context_properties *, cl_uint, const cl_device_id *, void *, void *, cl_int *))\n\t\tdlsym (lib, \"clCreateContext\");\n\n\treal_clCreateContextFromType = (cl_context(*)(const cl_context_properties *, cl_device_type, void *, void *, cl_int *))\n\t\tdlsym (lib, \"clCreateContextFromType\");\n\n\treal_clCreateKernel = (cl_kernel(*)(cl_program, const char *, cl_int *))\n\t\tdlsym (lib, \"clCreateKernel\");\n\n\treal_clCreateKernelsInProgram = (cl_int(*)(cl_program, cl_uint, cl_kernel *, cl_uint *))\n\t\tdlsym (lib, \"clCreateKernelsInProgram\");\n\n\treal_clSetKernelArg = (cl_int(*)(cl_kernel, cl_uint, size_t, const void *))\n\t\tdlsym (lib, \"clSetKernelArg\");\n\n\treal_clCreateProgramWithSource = (cl_program(*)(cl_context, cl_uint, const char **, const size_t *, cl_int *))\n\t\tdlsym (lib, \"clCreateProgramWithSource\");\n\n\treal_clCreateProgramWithBinary = (cl_program(*)(cl_context, cl_uint, const cl_device_id *, const size_t *, const unsigned char **, cl_int *, cl_int *))\n\t\tdlsym (lib, \"clCreateProgramWithBinary\");\n\n\treal_clCreateProgramWithBuiltInKernels = (cl_program(*)(cl_context, cl_uint, const cl_device_id *, const char *, cl_int *))\n\t\tdlsym (lib, \"clCreateProgramWithBuiltInKernels\");\n\n\treal_clCreateSubBuffer = (cl_mem(*)(cl_mem, cl_mem_flags, cl_buffer_create_type, const void *, cl_int *))\n\t\tdlsym (lib, \"clCreateSubBuffer\");\n\n\treal_clEnqueueFillBuffer = (cl_int(*)(cl_command_queue, cl_mem, const void *, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueFillBuffer\");\n\n\treal_clEnqueueCopyBuffer = (cl_int(*)(cl_command_queue, cl_mem, cl_mem, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueCopyBuffer\");\n\n\treal_clEnqueueCopyBufferRect = (cl_int(*)(cl_command_queue, cl_mem, cl_mem, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueCopyBufferRect\");\n\n\treal_clEnqueueNDRangeKernel = (cl_int(*)(cl_command_queue, cl_kernel, cl_uint, const size_t *, const size_t *, const size_t *, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueNDRangeKernel\");\n\n\treal_clEnqueueTask = (cl_int(*)(cl_command_queue, cl_kernel, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueTask\");\n\n\treal_clEnqueueNativeKernel = (cl_int(*)(cl_command_queue, void *, void *, size_t, cl_uint, const cl_mem *, const void **, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueNativeKernel\");\n\n\treal_clEnqueueReadBuffer = (cl_int(*)(cl_command_queue, cl_mem, cl_bool, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueReadBuffer\");\n\n\treal_clEnqueueReadBufferRect = (cl_int(*)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, void *, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueReadBufferRect\");\n\n\treal_clEnqueueWriteBuffer = (cl_int(*)(cl_command_queue, cl_mem, cl_bool, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueWriteBuffer\");\n\n\treal_clEnqueueWriteBufferRect = (cl_int(*)(cl_command_queue, cl_mem, cl_bool, const size_t *, const size_t *, const size_t *, size_t, size_t, size_t, size_t, const void *, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueWriteBufferRect\");\n\n\treal_clBuildProgram = (cl_int(*)(cl_program, cl_uint, const cl_device_id *, const char *, void *, void *))\n\t\tdlsym (lib, \"clBuildProgram\");\n\n\treal_clCompileProgram = (cl_int(*)(cl_program, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, const char **, void *, void *))\n\t\tdlsym (lib, \"clCompileProgram\");\n\n\treal_clLinkProgram = (cl_program(*)(cl_context, cl_uint, const cl_device_id *, const char *, cl_uint, const cl_program *, void *, void *, cl_int *))\n\t\tdlsym (lib, \"clLinkProgram\");\n\n\treal_clFinish = (cl_int(*)(cl_command_queue))\n\t\tdlsym (lib, \"clFinish\");\n\n\treal_clFlush = (cl_int(*)(cl_command_queue))\n\t\tdlsym (lib, \"clFlush\");\n\n\treal_clWaitForEvents = (cl_int(*)(cl_uint, const cl_event *el))\n\t\tdlsym (lib, \"clWaitForEvents\");\n\n#ifdef CL_VERSION_1_2\n\treal_clEnqueueMarkerWithWaitList = (cl_int(*)(cl_command_queue, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueMarkerWithWaitList\");\n\n\treal_clEnqueueBarrierWithWaitList = (cl_int(*)(cl_command_queue, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueBarrierWithWaitList\");\n#endif\n\n\treal_clEnqueueMarker = (cl_int(*)(cl_command_queue, cl_event *))\n\t\tdlsym (lib, \"clEnqueueMarker\");\n\n\treal_clEnqueueBarrier = (cl_int(*)(cl_command_queue))\n\t\tdlsym (lib, \"clEnqueueBarrier\");\n\n\treal_clEnqueueMapBuffer = (void* (*)(cl_command_queue, cl_mem, cl_bool, cl_map_flags, size_t, size_t, cl_uint, const cl_event *, cl_event *, cl_int *))\n\t\tdlsym (lib, \"clEnqueueMapBuffer\");\n\n\treal_clEnqueueUnmapMemObject = (cl_int (*)(cl_command_queue, cl_mem, void *, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueUnmapMemObject\");\n\n#ifdef CL_VERSION_1_2\n\treal_clEnqueueMigrateMemObjects = (cl_int (*)(cl_command_queue, cl_uint, const cl_mem *, cl_mem_migration_flags, cl_uint, const cl_event *, cl_event *))\n\t\tdlsym (lib, \"clEnqueueMigrateMemObjects\");\n#endif\n\n\treal_clRetainCommandQueue = (cl_int(*)(cl_command_queue))\n\t  dlsym (lib, \"clRetainCommandQueue\");\n\n\treal_clReleaseCommandQueue = (cl_int(*)(cl_command_queue))\n\t  dlsym (lib, \"clReleaseCommandQueue\");\n\n\treal_clRetainContext = (cl_int(*)(cl_context))\n\t  dlsym (lib, \"clRetainContext\");\n\n\treal_clReleaseContext = (cl_int(*)(cl_context))\n\t  dlsym (lib, \"clReleaseContext\");\n\n\treal_clRetainDevice = (cl_int(*)(cl_device_id))\n\t  dlsym (lib, \"clRetainDevice\");\n\n\treal_clReleaseDevice = (cl_int(*)(cl_device_id))\n\t  dlsym (lib, \"clReleaseDevice\");\n\n\treal_clRetainEvent = (cl_int(*)(cl_event))\n\t  dlsym (lib, \"clRetainEvent\");\n\n\treal_clReleaseEvent = (cl_int(*)(cl_event))\n\t  dlsym (lib, \"clReleaseEvent\");\n\n\treal_clRetainKernel = (cl_int(*)(cl_kernel))\n\t  dlsym (lib, \"clRetainKernel\");\n\n\treal_clReleaseKernel = (cl_int(*)(cl_kernel))\n\t  dlsym (lib, \"clReleaseKernel\");\n\n\treal_clRetainMemObject = (cl_int(*)(cl_mem))\n\t  dlsym (lib, \"clRetainMemObject\");\n\n\treal_clReleaseMemObject = (cl_int(*)(cl_mem))\n\t  dlsym (lib, \"clReleaseMemObject\");\n\n\treal_clRetainProgram = (cl_int(*)(cl_program))\n\t  dlsym (lib, \"clRetainProgram\");\n\n\treal_clReleaseProgram = (cl_int(*)(cl_program))\n\t  dlsym (lib, \"clReleaseProgram\");\n#else\n\tfprintf (stderr, PACKAGE_NAME\": Warning! OpenCL instrumentation requires linking with shared library!\\n\");\n#endif /* PIC */\n}\n\n/*\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n*/\n\n#if defined(PIC)\n\ncl_mem clCreateBuffer (cl_context c, cl_mem_flags m, size_t s, void *p, \n\tcl_int *e)\n{\n\tcl_mem r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateBuffer (real at %p)\\n\", real_clCreateBuffer);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateBuffer != NULL)\n\t{\n\t\tExtrae_Probe_clCreateBuffer_Enter();\n\t\tr = real_clCreateBuffer (c, m, s, p, e);\n\t\tExtrae_Probe_clCreateBuffer_Exit();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateBuffer != NULL)\n\t{\n\t\tr = real_clCreateBuffer (c, m, s, p, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\" Fatal Error! clCreateBuffer was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_command_queue clCreateCommandQueue (cl_context c, cl_device_id d,\n\tcl_command_queue_properties p, cl_int *e)\n{\n\tcl_command_queue r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateCommandQueue (real at %p)\\n\", real_clCreateCommandQueue);\n#endif\n\n\t/* Force profiling! */\n\tp |= CL_QUEUE_PROFILING_ENABLE;\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateCommandQueue != NULL)\n\t{\n\t\tExtrae_Probe_clCreateCommandQueue_Enter ();\n\t\tExtrae_Prepare_CommandQueue = TRUE;\n\t\tr = real_clCreateCommandQueue (c, d, p, e);\n\t\tExtrae_OpenCL_clCreateCommandQueue (r, d, p);\n\t\tExtrae_Prepare_CommandQueue = FALSE;\n\t\tExtrae_Probe_clCreateCommandQueue_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateCommandQueue != NULL)\n\t{\n\t\tr = real_clCreateCommandQueue (c, d, p, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCraeteCommandQueue was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_context clCreateContext (const cl_context_properties *p, cl_uint n, \n\tconst cl_device_id *d,\n\tvoid (*pfn)(const char *, const void *, size_t, void *),\n\tvoid *udata, cl_int *e)\n{\n\tcl_context r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateContext (real at %p)\\n\", real_clCreateContext);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateContext != NULL)\n\t{\n\t\tExtrae_Probe_clCreateContext_Enter();\n\t\tr = real_clCreateContext (p, n, d, pfn, udata, e);\n\t\tExtrae_Probe_clCreateContext_Exit();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateContext != NULL)\n\t{\n\t\tr = real_clCreateContext (p, n, d, pfn, udata, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateContext was not hooked!\\n\");\n\t\texit (-1);\n\t} \n\n\treturn r;\n}\n\ncl_context clCreateContextFromType (const cl_context_properties *p,\n\tcl_device_type dt,\n\tvoid (*pfn)(const char *, const void *, size_t, void *),\n\tvoid *udata, cl_int *e)\n{\n\tcl_context r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateContextFromType (real at %p)\\n\", real_clCreateContextFromType);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateContextFromType != NULL)\n\t{\n\t\tExtrae_Probe_clCreateContextFromType_Enter ();\n\t\tr = real_clCreateContextFromType (p, dt, pfn, udata, e);\n\t\tExtrae_Probe_clCreateContextFromType_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateContextFromType != NULL)\n\t{\n\t\tr = real_clCreateContextFromType (p, dt, pfn, udata, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateContextFromType was not hooked\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_mem clCreateSubBuffer (cl_mem m, cl_mem_flags mf, cl_buffer_create_type bct,\n\tconst void *b, cl_int *e)\n{\n\tcl_mem r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateSubBuffer (real at %p)\\n\", real_clCreateSubBuffer);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateSubBuffer != NULL)\n\t{\n\t\tExtrae_Probe_clCreateSubBuffer_Enter ();\n\t\tr = real_clCreateSubBuffer (m, mf, bct, b, e);\n\t\tExtrae_Probe_clCreateSubBuffer_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateSubBuffer != NULL)\n\t{\n\t\tr = real_clCreateSubBuffer (m, mf, bct, b, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateSubBuffer was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_kernel clCreateKernel (cl_program p, const char *k, cl_int *e)\n{\n\tcl_kernel r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateKernel (%s) (real at %p)\\n\", k, real_clCreateKernel);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateKernel != NULL)\n\t{\n\t\tExtrae_Probe_clCreateKernel_Enter ();\n\t\tr = real_clCreateKernel (p, k, e);\n\t\tExtrae_Probe_clCreateKernel_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateKernel != NULL)\n\t{\n\t\tr = real_clCreateKernel (p, k, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateKernel was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clCreateKernelsInProgram (cl_program p, cl_uint n, cl_kernel *ks, cl_uint *nks)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateKernelsInProgram (%p)\\n\", real_clCreateKernelsInProgram);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateKernelsInProgram != NULL)\n\t{\n\t\tExtrae_Probe_clCreateKernelsInProgram_Enter ();\n\t\tr = real_clCreateKernelsInProgram (p, n, ks, nks);\n\t\tExtrae_Probe_clCreateKernelsInProgram_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateKernelsInProgram != NULL)\n\t{\n\t\tr = real_clCreateKernelsInProgram (p, n, ks, nks);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateKernelsInProgram was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clSetKernelArg (cl_kernel k, cl_uint a, size_t as, const void *av)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clSetKernelArg (real at %p)\\n\", real_clSetKernelArg);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clSetKernelArg != NULL)\n\t{\n\t\tExtrae_Probe_clSetKernelArg_Enter ();\n\t\tr = real_clSetKernelArg (k, a, as, av);\n\t\tExtrae_Probe_clSetKernelArg_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clSetKernelArg != NULL)\n\t{\n\t\tr = real_clSetKernelArg (k, a, as, av);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clSetKernelArg was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_program clCreateProgramWithSource (cl_context c, cl_uint u, const char **s,\n\tconst size_t *l, cl_int *e)\n{\n\tcl_program r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateProgramWithSource (real at %p)\\n\", real_clCreateProgramWithSource);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateProgramWithSource != NULL)\n\t{\n\t\tExtrae_Probe_clCreateProgramWithSource_Enter ();\n\t\tr = real_clCreateProgramWithSource (c, u, s, l, e);\n\t\tExtrae_Probe_clCreateProgramWithSource_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateProgramWithSource != NULL)\n\t{\n\t\tr = real_clCreateProgramWithSource (c, u, s, l, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateProgramWithSource was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_program clCreateProgramWithBinary (cl_context c, cl_uint n,\n\tconst cl_device_id *dl, const size_t *l, const unsigned char **b,\n\tcl_int *bs, cl_int *e)\n{\n\tcl_program r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateProgramWithBinary (real at %p)\\n\", real_clCreateProgramWithBinary);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateProgramWithBinary != NULL)\n\t{\n\t\tExtrae_Probe_clCreateProgramWithBinary_Enter ();\n\t\tr = real_clCreateProgramWithBinary (c, n, dl, l, b, bs, e);\n\t\tExtrae_Probe_clCreateProgramWithBinary_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateProgramWithBinary != NULL)\n\t{\n\t\tr = real_clCreateProgramWithBinary (c, n, dl, l, b, bs, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateProgramWithBinary was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_program clCreateProgramWithBuiltInKernels (cl_context c, cl_uint n,\n\tconst cl_device_id *dl, const char *kn, cl_int *e)\n{\n\tcl_program r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCreateProgramWithBuiltInKernels (real at %p)\\n\", real_clCreateProgramWithBuiltInKernels);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCreateProgramWithBuiltInKernels != NULL)\n\t{\n\t\tExtrae_Probe_clCreateProgramWithBuiltInKernels_Enter ();\n\t\tr = real_clCreateProgramWithBuiltInKernels (c, n, dl, kn, e);\n\t\tExtrae_Probe_clCreateProgramWithBuiltInKernels_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCreateProgramWithBuiltInKernels != NULL)\n\t{\n\t\tr = real_clCreateProgramWithBuiltInKernels (c, n, dl, kn, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCreateProgramWithBuilInKernels was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueFillBuffer (cl_command_queue c, cl_mem m, const void *ptr, \n\tsize_t ps, size_t o, size_t s, cl_uint n, const cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueFillBuffer (real at %p)\\n\", real_clEnqueueFillBuffer);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueFillBuffer != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueFillBuffer_Enter ();\n\t\tr = real_clEnqueueFillBuffer (c, m, ptr, ps, o, s, n, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (c, evt, OPENCL_CLENQUEUEFILLBUFFER_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueFillBuffer_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueFillBuffer != NULL)\n\t{\n\t\tr = real_clEnqueueFillBuffer (c, m, ptr, ps, o, s, n, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueFillBuffer was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueCopyBuffer (cl_command_queue c, cl_mem src, cl_mem dst, \n\tsize_t so, size_t dso, size_t s, cl_uint n, const cl_event *e, cl_event *ev)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueCopyBuffer (real at %p)\\n\", real_clEnqueueCopyBuffer);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueCopyBuffer != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueCopyBuffer_Enter ();\n\t\tr = real_clEnqueueCopyBuffer (c, src, dst, so, dso, s, n, e, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (c, evt, OPENCL_CLENQUEUECOPYBUFFER_ACC_EV);\n\t\tif (ev != NULL)\n\t\t\t*ev = evt;\n\t\tExtrae_Probe_clEnqueueCopyBuffer_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueCopyBuffer != NULL)\n\t{\n\t\tr = real_clEnqueueCopyBuffer (c, src, dst, so, dso, s, n, e, ev);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueCopyBuffer was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueCopyBufferRect (cl_command_queue c, cl_mem src, cl_mem dst,\n\tconst size_t *s, const size_t *d, const size_t *r, size_t srp, size_t ssp,\n\tsize_t drp, size_t dsp, cl_uint n, const cl_event *ewl, cl_event *e)\n{\n\tcl_int res;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug clEnqueueCopyBufferRect (real at %p)\\n\", real_clEnqueueCopyBufferRect);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueCopyBufferRect != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueCopyBufferRect_Enter ();\n\t\tres = real_clEnqueueCopyBufferRect (c, src, dst, s, d, r, srp, ssp,\n\t\t  drp, dsp, n, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (c, evt, OPENCL_CLENQUEUECOPYBUFFERRECT_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueCopyBufferRect_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueCopyBufferRect != NULL)\n\t{\n\t\tres = real_clEnqueueCopyBufferRect (c, src, dst, s, d, r, srp, ssp,\n\t\t  drp, dsp, n, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueCopyBufferRect was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\ncl_int clEnqueueNDRangeKernel (cl_command_queue c, cl_kernel k, cl_uint n,\n\tconst size_t *gwo, const size_t *gws, const size_t *lws, cl_uint ne,\n\tconst cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueNDRangeKernel (real at %p)\\n\", real_clEnqueueNDRangeKernel);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueNDRangeKernel != NULL)\n\t{\n\t\tcl_event evt;\n\t\tunsigned kid = 0;\n\t\tExtrae_OpenCL_annotateKernelName (k, &kid);\n\t\tkid++;\n\t\t\n\t\tExtrae_Probe_clEnqueueNDRangeKernel_Enter (kid);\n\n\t\tTRACE_USER_COMMUNICATION_EVENT (LAST_READ_TIME, USER_SEND_EV,\n\t\t  TASKID, 0, Extrae_OpenCL_tag_generator(),\n\t\t  Extrae_OpenCL_tag_generator());\n\n\t\tr = real_clEnqueueNDRangeKernel (c, k, n, gwo, gws, lws, ne, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueueWithKernel (c, evt, OPENCL_CLENQUEUENDRANGEKERNEL_ACC_EV, k);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueNDRangeKernel_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueNDRangeKernel != NULL)\n\t{\n\t\tr = real_clEnqueueNDRangeKernel (c, k, n, gwo, gws, lws, ne, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueNDRangeKernel was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\treturn r;\n}\n\ncl_int clEnqueueTask (cl_command_queue c, cl_kernel k, cl_uint n, \n\tconst cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueTask (real at %p)\\n\", real_clEnqueueTask);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueTask != NULL)\n\t{\n\t\tcl_event evt;\n\t\tunsigned kid = 0;\n\t\tExtrae_OpenCL_annotateKernelName (k, &kid);\n\t\tkid++;\n\n\t\tExtrae_Probe_clEnqueueTask_Enter (kid);\n\n\t\tTRACE_USER_COMMUNICATION_EVENT (LAST_READ_TIME, USER_SEND_EV,\n\t\t  TASKID, 0, Extrae_OpenCL_tag_generator(),\n\t\t  Extrae_OpenCL_tag_generator());\n\n\t\tr = real_clEnqueueTask (c, k, n, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueueWithKernel (c, evt, OPENCL_CLENQUEUETASK_ACC_EV, k);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueTask_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueTask != NULL)\n\t{\n\t\tr = real_clEnqueueTask (c, k, n, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueTask was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueNativeKernel (cl_command_queue c,\n\tvoid (*ptr)(void *),\n\tvoid *args, size_t cb, cl_uint nmo, const cl_mem *ml, const void **aml,\n\tcl_uint newl, const cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEqneueNativeKernel (real at %p)\\n\", real_clEnqueueNativeKernel);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueNativeKernel != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueNativeKernel_Enter ();\n\n\t\tTRACE_USER_COMMUNICATION_EVENT (LAST_READ_TIME, USER_SEND_EV,\n\t\t  TASKID, 0, Extrae_OpenCL_tag_generator(),\n\t\t  Extrae_OpenCL_tag_generator());\n\n\t\tr = real_clEnqueueNativeKernel (c, ptr, args, cb, nmo, ml, aml, newl, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (c, evt, OPENCL_CLENQUEUENATIVEKERNEL_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueNativeKernel_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueNativeKernel != NULL)\n\t{\n\t\tr = real_clEnqueueNativeKernel (c, ptr, args, cb, nmo, ml, aml, newl, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueNativeKernel was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueReadBuffer (cl_command_queue c, cl_mem m, cl_bool b, size_t o,\n\tsize_t s, void *p, cl_uint u, const cl_event *e, cl_event *ev)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueReadBuffer (real at %p)\\n\", real_clEnqueueReadBuffer);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueReadBuffer != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueReadBuffer_Enter (b, s);\n\t\tr = real_clEnqueueReadBuffer (c, m, b, o, s, p, u, e, &evt);\n\n\t\tExtrae_OpenCL_addEventToQueueWithSize (c, evt,\n\t\t  b?OPENCL_CLENQUEUEREADBUFFER_ACC_EV:OPENCL_CLENQUEUEREADBUFFER_ASYNC_ACC_EV,\n\t\t  s);\n\n\t\tif (ev != NULL)\n\t\t\t*ev = evt;\n\t\tif (b && !Extrae_OpenCL_Queue_OoO (c))\n\t\t\tExtrae_OpenCL_clQueueFlush (c, FALSE);\n\n\t\tExtrae_Probe_clEnqueueReadBuffer_Exit (b);\n\t\tTRACE_USER_COMMUNICATION_EVENT(LAST_READ_TIME,\n\t\t\t  USER_RECV_EV, TASKID, s,\n\t\t\t  Extrae_OpenCL_tag_generator(),\n\t\t\t  Extrae_OpenCL_tag_generator());\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueReadBuffer != NULL)\n\t{\n\t\tr = real_clEnqueueReadBuffer (c, m, b, o, s, p, u, e, ev);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueReadBuffer was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueReadBufferRect (cl_command_queue c, cl_mem m, cl_bool b,\n\tconst size_t *bo, const size_t *ho, const size_t *r, size_t brp,\n\tsize_t bsp, size_t hrp, size_t hsp, void *ptr, cl_uint n, \n\tconst cl_event *ewl, cl_event *e)\n{\n\tcl_int res;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueReadBufferRect (real at %p)\\n\", real_clEnqueueReadBufferRect);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueReadBufferRect != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueReadBufferRect_Enter (b);\n\t\tres = real_clEnqueueReadBufferRect (c, m, b, bo, ho, r, brp, bsp, hrp,\n\t\t  hsp, ptr, n, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (c, evt,\n\t\t  b?OPENCL_CLENQUEUEREADBUFFERRECT_ACC_EV:OPENCL_CLENQUEUEREADBUFFERRECT_ASYNC_ACC_EV);\n\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tif (b && !Extrae_OpenCL_Queue_OoO (c))\n\t\t\tExtrae_OpenCL_clQueueFlush (c, FALSE);\n\n\t\tExtrae_Probe_clEnqueueReadBufferRect_Exit (b);\n\t\tTRACE_USER_COMMUNICATION_EVENT(LAST_READ_TIME,\n\t\t\t  USER_RECV_EV, TASKID, 0,\n\t\t\t  Extrae_OpenCL_tag_generator(),\n\t\t\t  Extrae_OpenCL_tag_generator());\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueReadBufferRect != NULL)\n\t{\n\t\tres = real_clEnqueueReadBufferRect (c, m, b, bo, ho, r, brp, bsp, hrp,\n\t\t  hsp, ptr, n, ewl ,e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueReadBufferRect was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\ncl_int clEnqueueWriteBuffer (cl_command_queue c, cl_mem m, cl_bool b, size_t o,\n\tsize_t s, const void *p, cl_uint u, const cl_event *e, cl_event *ev)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueWriteBuffer (real at %p)\\n\", real_clEnqueueWriteBuffer);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueWriteBuffer != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueWriteBuffer_Enter (b, s);\n\t\tTRACE_USER_COMMUNICATION_EVENT(LAST_READ_TIME,\n\t\t\t  USER_SEND_EV, TASKID, s,\n\t\t\t  Extrae_OpenCL_tag_generator(),\n\t\t\t  Extrae_OpenCL_tag_generator());\n\n\t\tr = real_clEnqueueWriteBuffer (c, m, b, o, s, p, u, e, &evt);\n\n\t\tExtrae_OpenCL_addEventToQueueWithSize (c, evt,\n\t\t  b?OPENCL_CLENQUEUEWRITEBUFFER_ACC_EV:OPENCL_CLENQUEUEWRITEBUFFER_ASYNC_ACC_EV,\n\t\t  s);\n\t\tif (ev != NULL)\n\t\t\t*ev = evt;\n/*\n\t\tThis is not sure, when writebuffer returns it means that it is sent to\n\t\tthe accel, but it does not need to be finished.\n\n\t\tif (b && !Extrae_OpenCL_Queue_OoO (c))\n\t\t\tExtrae_OpenCL_clQueueFlush (c);\n*/\n\t\tExtrae_Probe_clEnqueueWriteBuffer_Exit (b);\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueWriteBuffer != NULL)\n\t{\n\t\tr = real_clEnqueueWriteBuffer (c, m, b, o, s, p, u, e, ev);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueWriteBuffer was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueWriteBufferRect (cl_command_queue c, cl_mem m, cl_bool b,\n\tconst size_t *bo, const size_t *ho, const size_t *r, size_t brp,\n\tsize_t bsp, size_t hrp, size_t hsp, const void *ptr, cl_uint n, \n\tconst cl_event *ewl, cl_event *e)\n{\n\tcl_int res;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueWriteBufferRect (real at %p)\\n\", real_clEnqueueWriteBufferRect);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueWriteBufferRect != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueWriteBufferRect_Enter (b);\n\t\tTRACE_USER_COMMUNICATION_EVENT(LAST_READ_TIME,\n\t\t\t  USER_SEND_EV, TASKID, 0,\n\t\t\t  Extrae_OpenCL_tag_generator(),\n\t\t\t  Extrae_OpenCL_tag_generator());\n\n\t\tres = real_clEnqueueWriteBufferRect (c, m, b, bo, ho, r, brp, bsp,\n\t\t  hrp, hsp, ptr, n, ewl, &evt);\n\n\t\tExtrae_OpenCL_addEventToQueue (c, evt,\n\t\t  b?OPENCL_CLENQUEUEWRITEBUFFERRECT_ACC_EV:OPENCL_CLENQUEUEWRITEBUFFERRECT_ASYNC_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n/*\n\t\tThis is not sure, when writebuffer returns it means that it is sent to\n\t\tthe accel, but it does not need to be finished.\n\n\t\tif (b && !Extrae_OpenCL_Queue_OoO (c))\n\t\t\tExtrae_OpenCL_clQueueFlush (c);\n*/\n\t\tExtrae_Probe_clEnqueueWriteBufferRect_Exit (b);\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueWriteBufferRect != NULL)\n\t{\n\t\tres = real_clEnqueueWriteBufferRect (c, m, b, bo, ho, r, brp, bsp,\n\t\t  hrp, hsp, ptr, n, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueWriteBufferRect was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn res;\n}\n\ncl_int clBuildProgram (cl_program p, cl_uint n, const cl_device_id *dl,\n\tconst char *o,\n\tvoid (*cbk)(cl_program, void *), \n\tvoid *ud)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clBuildProgram (real at %p)\\n\", real_clBuildProgram);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clBuildProgram != NULL)\n\t{\n\t\tExtrae_Probe_clBuildProgram_Enter ();\n\t\tr = real_clBuildProgram (p, n, dl, o, cbk, ud);\n\t\tExtrae_Probe_clBuildProgram_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clBuildProgram != NULL)\n\t{\n\t\tr = real_clBuildProgram (p, n, dl, o, cbk, ud);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clBuildProgram was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clCompileProgram (cl_program p, cl_uint n, const cl_device_id *dl,\n\tconst char *o, cl_uint nih, const cl_program *ih, const char **hin,\n\tvoid (*cbk)(cl_program, void *), \n\tvoid *ud)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clCompileProgram (real at %p)\\n\", real_clCompileProgram);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clCompileProgram != NULL)\n\t{\n\t\tExtrae_Probe_clCompileProgram_Enter ();\n\t\tr = real_clCompileProgram (p, n, dl, o, nih, ih, hin, cbk, ud);\n\t\tExtrae_Probe_clCompileProgram_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clCompileProgram != NULL)\n\t{\n\t\tr = real_clCompileProgram (p, n, dl, o, nih, ih, hin, cbk, ud);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clCompileProgram was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_program clLinkProgram (cl_context c, cl_uint n, const cl_device_id *dl,\n\tconst char *o, cl_uint nip, const cl_program *ip,\n\tvoid (*cbk)(cl_program, void *), \n\tvoid *ud, cl_int *e)\n{\n\tcl_program r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clLinkProgram (real at %p)\\n\", real_clLinkProgram);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clLinkProgram != NULL)\n\t{\n\t\tExtrae_Probe_clLinkProgram_Enter ();\n\t\tr = real_clLinkProgram (c, n, dl, o, nip, ip, cbk, ud, e);\n\t\tExtrae_Probe_clLinkProgram_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clLinkProgram != NULL)\n\t{\n\t\tr = real_clLinkProgram (c, n, dl, o, nip, ip, cbk, ud, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clLinkProgram was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clFinish (cl_command_queue q)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clFinish (real at %p)\\n\", real_clFinish);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clFinish != NULL)\n\t{\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t\tExtrae_Probe_clFinish_Enter (\n\t\t\t  Extrae_OpenCL_lookForOpenCLQueueToThreadID (q));\n\n\t\tr = real_clFinish (q);\n\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t{\n\t\t\tExtrae_Probe_clFinish_Exit ();\n\t\t\tExtrae_OpenCL_clQueueFlush (q, TRUE);\n\t\t}\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clFinish != NULL)\n\t{\n\t\tr = real_clFinish (q);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clFinish was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clFlush (cl_command_queue q)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clFlush (real at %p)\\n\", real_clFlush);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clFlush != NULL)\n\t{\n\t\tExtrae_Probe_clFlush_Enter ();\n\t\tr = real_clFlush (q);\n\t\tExtrae_Probe_clFlush_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clFlush != NULL)\n\t{\n\t\tr = real_clFlush (q);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clFlush was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clWaitForEvents (cl_uint n, const cl_event *el)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clWaitForEvents (real at %p)\\n\", real_clWaitForEvents);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clWaitForEvents != NULL)\n\t{\n\t\tExtrae_Probe_clWaitForEvents_Enter ();\n\t\tr = real_clWaitForEvents (n, el);\n\t\tExtrae_Probe_clWaitForEvents_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clWaitForEvents != NULL)\n\t{\n\t\tr = real_clWaitForEvents (n, el);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clWaitForEvents was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\n#ifdef CL_VERSION_1_2\ncl_int clEnqueueMarkerWithWaitList (cl_command_queue q, cl_uint n,\n\tconst cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueMarkerWithWaitList (real at %p)\\n\", real_clEnqueueMarkerWithWaitList);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueMarkerWithWaitList != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueMarkerWithWaitList_Enter ();\n\t\tr = real_clEnqueueMarkerWithWaitList (q, n, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (q, evt, OPENCL_CLENQUEUEMARKERWITHWAITLIST_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueMarkerWithWaitList_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueMarkerWithWaitList != NULL)\n\t{\n\t\tr = real_clEnqueueMarkerWithWaitList (q, n, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueMarkerWithWaitList was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n#endif\n\n#ifdef CL_VERSION_1_2\ncl_int clEnqueueBarrierWithWaitList (cl_command_queue q, cl_uint n,\n\tconst cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueBarrierWithWaitList (real at %p)\\n\", real_clEnqueueBarrierWithWaitList);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueBarrierWithWaitList != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t\tExtrae_Probe_clEnqueueBarrierWithWaitList_Enter ();\n\t\tr = real_clEnqueueBarrierWithWaitList (q, n, ewl, &evt);\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t{\n\t\t\tExtrae_OpenCL_addEventToQueue (q, evt, OPENCL_CLENQUEUEBARRIERWITHWAITLIST_ACC_EV);\n\t\t\tif (e != NULL)\n\t\t\t\t*e = evt;\n\t\t\tExtrae_Probe_clEnqueueBarrierWithWaitList_Exit ();\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (e != NULL)\n\t\t\t\t*e = evt;\n\t\t}\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueBarrierWithWaitList != NULL)\n\t{\n\t\tr = real_clEnqueueBarrierWithWaitList (q, n, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueBarrierWithWaitList was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n#endif\n\ncl_int clEnqueueMarker (cl_command_queue q, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueMarker (real at %p)\\n\", real_clEnqueueMarker);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueMarker != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t\tExtrae_Probe_clEnqueueMarker_Enter ();\n\t\tr = real_clEnqueueMarker (q, &evt);\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t{\n\t\t\tExtrae_Probe_clEnqueueMarker_Exit ();\n\t\t\tExtrae_OpenCL_addEventToQueue (q, evt, OPENCL_CLENQUEUEMARKER_ACC_EV);\n\t\t\tif (e != NULL)\n\t\t\t\t*e = evt;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (e != NULL)\n\t\t\t\t*e = evt;\n\t\t}\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueMarker != NULL)\n\t{\n\t\tr = real_clEnqueueMarker (q, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueMarker was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueBarrier (cl_command_queue q)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueBarrier (real at %p)\\n\", real_clEnqueueBarrier);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueBarrier != NULL)\n\t{\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t\tExtrae_Probe_clEnqueueBarrier_Enter ();\n\t\tr = real_clEnqueueBarrier (q);\n\t\tif (!Extrae_Prepare_CommandQueue)\n\t\t\tExtrae_Probe_clEnqueueBarrier_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueBarrier != NULL)\n\t{\n\t\tr = real_clEnqueueBarrier (q);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueBarrier was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\nvoid *clEnqueueMapBuffer (cl_command_queue q, cl_mem m, cl_bool b,\n\tcl_map_flags mf, size_t o, size_t s, cl_uint n, const cl_event *ewl,\n\tcl_event *e, cl_int *err)\n{\n\tvoid *r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueMapBuffer (real at %p)\\n\", real_clEnqueueMapBuffer);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueMapBuffer != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueMapBuffer_Enter ();\n\t\tr = real_clEnqueueMapBuffer (q, m, b, mf, o, s, n, ewl, &evt, err);\n\t\tExtrae_OpenCL_addEventToQueue (q, evt, OPENCL_CLENQUEUEMAPBUFFER_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tif (b && !Extrae_OpenCL_Queue_OoO (q))\n\t\t\tExtrae_OpenCL_clQueueFlush (q, FALSE);\n\t\tExtrae_Probe_clEnqueueMapBuffer_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueMapBuffer != NULL)\n\t{\n\t\tr = real_clEnqueueMapBuffer (q, m, b, mf, o, s, n, ewl, e, err);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueMapBuffer was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clEnqueueUnmapMemObject (cl_command_queue q, cl_mem m, void *p,\n\tcl_uint n, const cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueUnmapMemObject (real at %p)\\n\", real_clEnqueueUnmapMemObject);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueUnmapMemObject != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueUnmapMemObject_Enter ();\n\t\tr = real_clEnqueueUnmapMemObject (q, m, p, n, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (q, evt, OPENCL_CLENQUEUEUNMAPMEMOBJECT_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueUnmapMemObject_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueUnmapMemObject != NULL)\n\t{\n\t\tr = real_clEnqueueUnmapMemObject (q, m, p, n, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueUnmapMemObject was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\n#ifdef CL_VERSION_1_2\ncl_int clEnqueueMigrateMemObjects (cl_command_queue q, cl_uint n, \n\tconst cl_mem *mo, cl_mem_migration_flags f, cl_uint ne,\n\tconst cl_event *ewl, cl_event *e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clEnqueueUnmapMemObject (real at %p)\\n\", real_clEnqueueUnmapMemObject);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clEnqueueMigrateMemObjects != NULL)\n\t{\n\t\tcl_event evt;\n\n\t\tExtrae_Probe_clEnqueueMigrateMemObjects_Enter ();\n\t\tr = real_clEnqueueMigrateMemObjects (q, n, mo, f, ne, ewl, &evt);\n\t\tExtrae_OpenCL_addEventToQueue (q, evt, OPENCL_CLENQUEUEMIGRATEMEMOBJECTS_ACC_EV);\n\t\tif (e != NULL)\n\t\t\t*e = evt;\n\t\tExtrae_Probe_clEnqueueMigrateMemObjects_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clEnqueueMigrateMemObjects != NULL)\n\t{\n\t\tr = real_clEnqueueMigrateMemObjects (q, n, mo, f, ne, ewl, e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clEnqueueMigrateMemObjects was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n#endif\n\ncl_int clRetainCommandQueue (cl_command_queue cq)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clRetainCommandQueue (real at %p)\\n\", real_clRetainCommandQueue);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clRetainCommandQueue != NULL)\n\t{\n\t\tExtrae_Probe_clRetainCommandQueue_Enter ();\n\t\tr = real_clRetainCommandQueue (cq);\n\t\tExtrae_Probe_clRetainCommandQueue_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clRetainCommandQueue != NULL)\n\t{\n\t\tr = real_clRetainCommandQueue (cq);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainCommandQueue was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clReleaseCommandQueue (cl_command_queue cq)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clReleaseCommandQueue (real at %p)\\n\", real_clReleaseCommandQueue);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clReleaseCommandQueue != NULL)\n\t{\n\t\tExtrae_Probe_clReleaseCommandQueue_Enter ();\n\t\tr = real_clReleaseCommandQueue (cq);\n\t\tExtrae_Probe_clReleaseCommandQueue_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clReleaseCommandQueue != NULL)\n\t{\n\t\tr = real_clReleaseCommandQueue (cq);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clReleaseCommandQueue was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clRetainContext (cl_context c)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clRetainContext (real at %p)\\n\", real_clRetainContext);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clRetainContext != NULL)\n\t{\n\t\tExtrae_Probe_clRetainContext_Enter ();\n\t\tr = real_clRetainContext (c);\n\t\tExtrae_Probe_clRetainContext_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clRetainContext != NULL)\n\t{\n\t\tr = real_clRetainContext (c);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainContext was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clReleaseContext (cl_context c)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clReleaseContext (real at %p)\\n\", real_clRetainContext);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clReleaseContext != NULL)\n\t{\n\t\tExtrae_Probe_clReleaseContext_Enter ();\n\t\tr = real_clReleaseContext (c);\n\t\tExtrae_Probe_clReleaseContext_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clReleaseContext != NULL)\n\t{\n\t\tr = real_clReleaseContext (c);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clReleaseContext was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clRetainDevice (cl_device_id d)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clRetainDevice (real at %p)\\n\", real_clRetainDevice);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clRetainDevice != NULL)\n\t{\n\t\tExtrae_Probe_clRetainDevice_Enter ();\n\t\tr = real_clRetainDevice (d);\n\t\tExtrae_Probe_clRetainDevice_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clRetainDevice != NULL)\n\t{\n\t\tr = real_clRetainDevice (d);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainDevice was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clReleaseDevice (cl_device_id d)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clReleaseDevice (real at %p)\\n\", real_clReleaseDevice);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clReleaseDevice != NULL)\n\t{\n\t\tExtrae_Probe_clReleaseDevice_Enter ();\n\t\tr = real_clReleaseDevice (d);\n\t\tExtrae_Probe_clReleaseDevice_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clReleaseDevice != NULL)\n\t{\n\t\tr = real_clReleaseDevice (d);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clReleaseDevice was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int Extrae_clRetainEvent_real (cl_event e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : Extrae_clRetainEvent_real (real at %p)\\n\", real_clRetainEvent);\n#endif\n\n\tif (real_clRetainEvent != NULL)\n\t\tr = real_clRetainEvent (e);\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainEvent was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int Extrae_clReleaseEvent_real (cl_event e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : Extrae_clReleaseEvent_real (real at %p)\\n\", real_clReleaseEvent);\n#endif\n\n\tif (real_clReleaseEvent != NULL)\n\t\tr = real_clReleaseEvent (e);\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clReleaseEvent was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clRetainEvent (cl_event e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clRetainEvent (real at %p)\\n\", real_clRetainEvent);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clRetainEvent != NULL)\n\t{\n\t\tExtrae_Probe_clRetainEvent_Enter ();\n\t\tr = real_clRetainEvent (e);\n\t\tExtrae_Probe_clRetainEvent_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clRetainEvent != NULL)\n\t{\n\t\tr = real_clRetainEvent (e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainEvent was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clReleaseEvent (cl_event e)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clReleaseEvent (real at %p)\\n\", real_clReleaseEvent);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clReleaseEvent != NULL)\n\t{\n\t\tExtrae_Probe_clReleaseEvent_Enter ();\n\t\tr = real_clReleaseEvent (e);\n\t\tExtrae_Probe_clReleaseEvent_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clReleaseEvent != NULL)\n\t{\n\t\tr = real_clReleaseEvent (e);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clReleaseEvent was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clRetainKernel (cl_kernel k)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clRetainKernel (real at %p)\\n\", real_clRetainKernel);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clRetainKernel != NULL)\n\t{\n\t\tExtrae_Probe_clRetainKernel_Enter ();\n\t\tr = real_clRetainKernel (k);\n\t\tExtrae_Probe_clRetainKernel_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clRetainKernel != NULL)\n\t{\n\t\tr = real_clRetainKernel (k);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainKernel was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clReleaseKernel (cl_kernel k)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clReleaseKernel (real at %p)\\n\", real_clReleaseKernel);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clReleaseKernel != NULL)\n\t{\n\t\tExtrae_Probe_clReleaseKernel_Enter ();\n\t\tr = real_clReleaseKernel (k);\n\t\tExtrae_Probe_clReleaseKernel_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clReleaseKernel != NULL)\n\t{\n\t\tr = real_clReleaseKernel (k);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRelaseKernel was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clRetainMemObject (cl_mem m)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clRetainMemObject (real at %p)\\n\", real_clRetainMemObject);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clRetainMemObject != NULL)\n\t{\n\t\tExtrae_Probe_clRetainMemObject_Enter ();\n\t\tr = real_clRetainMemObject (m);\n\t\tExtrae_Probe_clRetainMemObject_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clRetainMemObject != NULL)\n\t{\n\t\tr = real_clRetainMemObject (m);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainMemObject was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clReleaseMemObject (cl_mem m)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clReleaseMemObject (real at %p)\\n\", real_clReleaseMemObject);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clReleaseMemObject != NULL)\n\t{\n\t\tExtrae_Probe_clReleaseMemObject_Enter ();\n\t\tr = real_clReleaseMemObject (m);\n\t\tExtrae_Probe_clReleaseMemObject_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clReleaseMemObject != NULL)\n\t{\n\t\tr = real_clReleaseMemObject (m);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clReleaseMemObject was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clRetainProgram (cl_program p)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clRetainProgram (real at %p)\\n\", real_clRetainProgram);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clRetainProgram != NULL)\n\t{\n\t\tExtrae_Probe_clRetainProgram_Enter ();\n\t\tr = real_clRetainProgram (p);\n\t\tExtrae_Probe_clRetainProgram_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clRetainProgram != NULL)\n\t{\n\t\tr = real_clRetainProgram (p);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clRetainProgram was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\ncl_int clReleaseProgram (cl_program p)\n{\n\tcl_int r;\n\n#ifdef DEBUG\n\tfprintf (stderr, PACKAGE_NAME\": Debug : clReleaseProgram (real at %p)\\n\", real_clReleaseProgram);\n#endif\n\n\tif (EXTRAE_ON() && Extrae_get_trace_OpenCL() && real_clReleaseProgram != NULL)\n\t{\n\t\tExtrae_Probe_clReleaseProgram_Enter ();\n\t\tr = real_clReleaseProgram (p);\n\t\tExtrae_Probe_clReleaseProgram_Exit ();\n\t}\n\telse if (!(EXTRAE_ON() && Extrae_get_trace_OpenCL()) && real_clReleaseProgram != NULL)\n\t{\n\t\tr = real_clReleaseProgram (p);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Fatal Error! clReleaseProgram was not hooked!\\n\");\n\t\texit (-1);\n\t}\n\n\treturn r;\n}\n\n#endif /* PIC */\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/IO/io_wrapper.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n/*\n * __USE_FILE_OFFSET64\n * \n * Extrae is compiled by default with this flag to support large files. \n * When defined, some I/O calls such as preadv, pwritev... are renamed \n * automatically by the compiler to their 64-bit versions preadv64, pwritev64... \n * \n * This file needs to be compiled without this flag in order to be able to \n * write both wrappers without the compiler changing their names automatically \n * from the 32-bit version into the 64-bit. \n *\n */\n#ifdef __USE_FILE_OFFSET64\n# undef __USE_FILE_OFFSET64\n#endif\n\n#if HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#if HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef __USE_GNU\n#endif\n#if HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_SYS_UIO_H\n# include <sys/uio.h>\n#endif \n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n# include <sys/stat.h>\n#endif\n#ifdef HAVE_FCNTL_H\n# include <fcntl.h>\n#endif\n#ifdef HAVE_STDARG_H\n# include <stdarg.h>\n#endif\n\n#include \"io_wrapper.h\"\n#include \"io_probe.h\"\n#include \"wrapper.h\"\n\n#if defined(INSTRUMENT_IO)\n\n//#define DEBUG\n\n/***************************************************************************************\\\n * This file contains wrappers to instrument the I/O system calls (read, write, etc.). *\n * The interposition of these wrappers require a shared library (-DPIC).               *\n * Currently, there's a known issue: An incompatibility with the GNU OpenMP runtime.   *\n * This is just a guess, but the problem is likely to be that the OpenMP runtime calls *\n * read() or some other I/O routine before the runtime itself is initialized, and when *\n * we try to emit the events and request to identify the thread through                *\n * omp_get_thread_num, that results in a crash or returns some invalid value. Just a   *\n * guess, we'll have to check when we see this problem again.                          *\n\\***************************************************************************************/\n\n/* Global pointers to the real implementation of the OS I/O calls */\nstatic int     (*real_open)(const char *pathname, int flags, ...)                               = NULL;\nstatic int     (*real_open64)(const char *pathname, int flags, ...)                             = NULL;\nstatic FILE *  (*real_fopen)(const char *path, const char *mode)                                = NULL;\nstatic FILE *  (*real_fopen64)(const char *path, const char *mode)                              = NULL;\n\nstatic ssize_t (*real_read)(int fd, void *buf, size_t count)                                    = NULL;\nstatic ssize_t (*real_write)(int fd, const void *buf, size_t count)                             = NULL;\n\nstatic size_t  (*real_fread)(void *ptr, size_t size, size_t nmemb, FILE *stream)                = NULL;\nstatic size_t  (*real_fwrite)(const void *ptr, size_t size, size_t nmemb, FILE *stream)         = NULL;\n\nstatic ssize_t (*real_pread)(int fd, void *buf, size_t count, off_t offset)                     = NULL;\nstatic ssize_t (*real_pwrite)(int fd, const void *buf, size_t count, off_t offset)              = NULL;\n\nstatic ssize_t (*real_readv)(int fd, const struct iovec *iov, int iovcnt)                       = NULL;\nstatic ssize_t (*real_writev)(int fd, const struct iovec *iov, int iovcnt)                      = NULL;\nstatic ssize_t (*real_preadv)(int fd, const struct iovec *iov, int iovcnt, off_t offset)        = NULL;\nstatic ssize_t (*real_preadv64)(int fd, const struct iovec *iov, int iovcnt, off_t offset)      = NULL;\nstatic ssize_t (*real_pwritev)(int fd, const struct iovec *iov, int iovcnt, off_t offset)       = NULL;\nstatic ssize_t (*real_pwritev64)(int fd, const struct iovec *iov, int iovcnt, __off64_t offset) = NULL;\n\n/** \n * Extrae_iotrace_init\n * \n * Initialization routine for the I/O tracing module. Performs a discovery of the \n * address of the real implementation of the I/O calls through dlsym. The initialization\n * is deferred until any of the instrumented symbols is used for the first time. \n */\nvoid Extrae_iotrace_init (void)\n{\n# if defined(PIC) /* Only available for .so libraries */\n\n  /* \n   * Find the first implementation of the I/O calls in the default library search order \n   * after the current library. Not finding any of the symbols doesn't throw an error \n   * unless the application tries to use it later. \n   */\n  real_open      = (int(*)(const char *, int, ...)) dlsym(RTLD_NEXT, \"open\");\n  real_open64    = (int(*)(const char *, int, ...)) dlsym(RTLD_NEXT, \"open64\");\n  real_fopen     = (FILE *(*)(const char *, const char *)) dlsym(RTLD_NEXT, \"fopen\");\n  real_fopen64   = (FILE *(*)(const char *, const char *)) dlsym(RTLD_NEXT, \"fopen64\");\n\n  real_read      = (ssize_t(*)(int, void*, size_t)) dlsym (RTLD_NEXT, \"read\");\n  real_write     = (ssize_t(*)(int, const void*, size_t)) dlsym (RTLD_NEXT, \"write\");\n\n  real_fread     = (size_t(*)(void *, size_t, size_t, FILE *)) dlsym (RTLD_NEXT, \"fread\");\n  real_fwrite    = (size_t(*)(const void *, size_t, size_t, FILE *)) dlsym (RTLD_NEXT, \"fwrite\");\n\n  real_pread     = (ssize_t(*)(int fd, void *buf, size_t count, off_t offset)) dlsym (RTLD_NEXT, \"pread\");\n  real_pwrite    = (ssize_t(*)(int fd, const void *buf, size_t count, off_t offset)) dlsym (RTLD_NEXT, \"pwrite\");\n\n  real_readv     = (ssize_t(*)(int, const struct iovec *, int)) dlsym (RTLD_NEXT, \"readv\");\n  real_writev    = (ssize_t(*)(int, const struct iovec *, int)) dlsym (RTLD_NEXT, \"writev\");\n  real_preadv    = (ssize_t(*)(int, const struct iovec *, int, off_t)) dlsym (RTLD_NEXT, \"preadv\");\n  real_preadv64  = (ssize_t(*)(int, const struct iovec *, int, __off64_t)) dlsym (RTLD_NEXT, \"preadv64\");\n  real_pwritev   = (ssize_t(*)(int, const struct iovec *, int, off_t)) dlsym (RTLD_NEXT, \"pwritev\");\n  real_pwritev64 = (ssize_t(*)(int, const struct iovec *, int, __off64_t)) dlsym (RTLD_NEXT, \"pwritev64\");\n\n#  if defined(DEBUG)\n  fprintf(stderr, \"[DEBUG] Extrae installed the following I/O hooks:\\n\");\n  fprintf(stderr, \"[DEBUG] open hooked at %p\\n\", real_open);\n  fprintf(stderr, \"[DEBUG] open64 hooked at %p\\n\", real_open64);\n  fprintf(stderr, \"[DEBUG] fopen hooked at %p\\n\", real_fopen);\n  fprintf(stderr, \"[DEBUG] fopen64 hooked at %p\\n\", real_fopen64);\n  fprintf(stderr, \"[DEBUG] read hooked at %p\\n\", real_read);\n  fprintf(stderr, \"[DEBUG] write hooked at %p\\n\", real_write);\n  fprintf(stderr, \"[DEBUG] fread hooked at %p\\n\", real_fread);\n  fprintf(stderr, \"[DEBUG] fwrite hooked at %p\\n\", real_fwrite);\n  fprintf(stderr, \"[DEBUG] pread hooked at %p\\n\", real_pread);\n  fprintf(stderr, \"[DEBUG] pwrite hooked at %p\\n\", real_pwrite);\n  fprintf(stderr, \"[DEBUG] readv hooked at %p\\n\", real_readv);\n  fprintf(stderr, \"[DEBUG] writev hooked at %p\\n\", real_writev);\n  fprintf(stderr, \"[DEBUG] preadv hooked at %p\\n\", real_preadv);\n  fprintf(stderr, \"[DEBUG] preadv64 hooked at %p\\n\", real_preadv64);\n  fprintf(stderr, \"[DEBUG] pwritev hooked at %p\\n\", real_pwritev);\n  fprintf(stderr, \"[DEBUG] pwritev64 hooked at %p\\n\", real_pwritev64);\n#  endif\n\n# else\n\n  fprintf (stderr, PACKAGE_NAME\": Warning! I/O instrumentation requires linking with shared library!\\n\");\n\n# endif\n}\n\n# if defined(PIC) /* Only available for .so libraries */\n\n/**\n * open\n * \n * Wrapper for the system call 'open'\n */\nint open(const char *pathname, int flags, ...)\n{\n  int mode = 0;\n  int fd = -1;\n\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n\n  if (flags & O_CREAT)\n  {\n    va_list arg;\n    va_start (arg, flags);\n    mode = va_arg (arg, int);\n    va_end (arg);\n  }\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_open == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": open is at %p\\n\", real_open);\n    fprintf (stderr, PACKAGE_NAME\": open params %s %d\\n\", pathname, flags);\n  }\n#endif\n\n  if (real_open != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    fd = real_open (pathname, flags, mode);\n    Probe_IO_open_Entry (fd, pathname);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n\n    Probe_IO_open_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_open != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    fd = real_open (pathname, flags, mode);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": open is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return fd;\n}\n\n/**\n * open64\n * \n * Wrapper for the system call 'open64'\n */\nint open64(const char *pathname, int flags, ...)\n{\n  int mode = 0;\n  int fd = -1;\n\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n\n  if (flags & O_CREAT)\n  {     \n    va_list arg;\n    va_start (arg, flags);\n    mode = va_arg (arg, int); \n    va_end (arg);\n  }     \n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_open64 == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": open64 is at %p\\n\", real_open64);\n    fprintf (stderr, PACKAGE_NAME\": open64 params %s %d\\n\", pathname, flags);\n  }\n#endif\n\n  if (real_open64 != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    fd = real_open64 (pathname, flags, mode);\n    Probe_IO_open_Entry (fd, pathname);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n\n    Probe_IO_open_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_open64 != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    fd = real_open64 (pathname, flags, mode);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": open64 is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return fd;\n}\n\n/*\n * fopen\n * \n * Wrapper for the system call 'fopen'\n */\nFILE * fopen(const char *path, const char *mode)\n{\n  FILE *f = NULL;\n\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_fopen == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": fopen is at %p\\n\", real_fopen);\n    fprintf (stderr, PACKAGE_NAME\": fopen params %s %s\\n\", path, mode);\n  }\n#endif\n\n  if (real_fopen != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    f = real_fopen (path, mode);\n    Probe_IO_fopen_Entry (fileno(f), path);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n\n    Probe_IO_fopen_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_fopen != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    f = real_fopen (path, mode);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": fopen is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return f;\n}\n\n/*\n * fopen64\n * \n * Wrapper for the system call 'fopen64'\n */\nFILE * fopen64(const char *path, const char *mode)\n{\n  FILE *f = NULL;\n\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_fopen64 == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": fopen64 is at %p\\n\", real_fopen64);\n    fprintf (stderr, PACKAGE_NAME\": fopen64 params %s %s\\n\", path, mode);\n  }\n#endif\n\n  if (real_fopen64 != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    f = real_fopen64 (path, mode);\n    Probe_IO_fopen_Entry (fileno(f), path);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n\n    Probe_IO_fopen_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_fopen64 != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    f = real_fopen64 (path, mode);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": fopen64 is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return f;\n}\n\n\n/**\n * read\n *\n * Wrapper for the system call 'read'\n */\nssize_t read (int fd, void *buf, size_t count)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) && \n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_read == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": read is at %p\\n\", real_read);\n    fprintf (stderr, PACKAGE_NAME\": read params %d %p %lu\\n\", fd, buf, count);\n  }\n#endif\n\n  if (real_read != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    Probe_IO_read_Entry (fd, count);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_read (fd, buf, count);\n    Probe_IO_read_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_read != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_read (fd, buf, count);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": read is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * write\n * \n * Wrapper for the system call 'write' \n */\nssize_t write (int fd, const void *buf, size_t count)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) && \n                      mpitrace_on &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_write == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": write is at %p\\n\", real_write);\n    fprintf (stderr, PACKAGE_NAME\": write params %d %p %lu\\n\", fd, buf, count);\n  }\n#endif\n\n  if (real_write != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    Probe_IO_write_Entry (fd, count);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_write (fd, buf, count);\n    Probe_IO_write_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_write != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_write (fd, buf, count);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": write is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * fread\n * \n * Wrapper for the system call 'fread' \n */\nsize_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream) \n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  size_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_fread == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": fread is at %p\\n\", real_fread);\n    fprintf (stderr, PACKAGE_NAME\": fread params %p %ld %ld %p\\n\", ptr, size, nmemb, stream);\n  }\n#endif\n\n  if (real_fread != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    Probe_IO_fread_Entry (fileno(stream), size * nmemb);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_fread (ptr, size, nmemb, stream);\n    Probe_IO_fread_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_fread != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_fread (ptr, size, nmemb, stream);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": fread is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * fwrite\n * \n * Wrapper for the system call 'fwrite' \n */\nsize_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  size_t res;\n\n  if (real_fwrite == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": fwrite is at %p\\n\", real_fwrite);\n    fprintf (stderr, PACKAGE_NAME\": fwrite params %p %ld %ld %p\\n\", ptr, size, nmemb, stream);\n  }\n#endif\n\n  if (real_fwrite != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    Probe_IO_fwrite_Entry (fileno(stream), size * nmemb);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_fwrite (ptr, size, nmemb, stream);\n    Probe_IO_fwrite_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_fwrite != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_fwrite (ptr, size, nmemb, stream);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": fwrite is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * pread\n * \n * Wrapper for the system call 'pread' \n */\nssize_t pread(int fd, void *buf, size_t count, off_t offset)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_pread == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": pread is at %p\\n\", real_pread);\n    fprintf (stderr, PACKAGE_NAME\": pread params %d %p %ld %ld\\n\", fd, buf, count, offset);\n  }\n#endif\n\n  if (real_pread != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    Probe_IO_pread_Entry (fd, count);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_pread (fd, buf, count, offset);\n    Probe_IO_pread_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_pread != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_pread (fd, buf, count, offset);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": pread is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * pwrite\n * \n * Wrapper for the system call 'pwrite' \n */\nssize_t pwrite(int fd, const void *buf, size_t count, off_t offset)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_pwrite == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": pwrite is at %p\\n\", real_pwrite);\n    fprintf (stderr, PACKAGE_NAME\": pwrite params %d %p %ld %ld\\n\", fd, buf, count, offset);\n  }\n#endif\n\n  if (real_pwrite != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n    Probe_IO_pwrite_Entry (fd, count);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_pwrite (fd, buf, count, offset);\n    Probe_IO_pwrite_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_pwrite != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_pwrite (fd, buf, count, offset);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": pwrite is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * readv\n * \n * Wrapper for the system call 'readv' \n */\nssize_t readv (int fd, const struct iovec *iov, int iovcnt)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_readv == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": readv is at %p\\n\", real_readv);\n    fprintf (stderr, PACKAGE_NAME\": readv params %d %p %d\\n\", fd, iov, iovcnt);\n  }\n#endif\n\n  if (real_readv != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    int i;\n    ssize_t size = 0;\n\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n\n    for (i=0; i<iovcnt; i++)\n    {\n      size += iov[i].iov_len;\n    }\n\n    Probe_IO_readv_Entry (fd, size);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_readv (fd, iov, iovcnt);\n    Probe_IO_readv_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_readv != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_readv (fd, iov, iovcnt);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": readv is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * writev\n * \n * Wrapper for the system call 'writev' \n */\nssize_t writev(int fd, const struct iovec *iov, int iovcnt)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_writev == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  { \n    fprintf (stderr, PACKAGE_NAME\": writev is at %p\\n\", real_writev);\n    fprintf (stderr, PACKAGE_NAME\": writev params %d %p %d\\n\", fd, iov, iovcnt);\n  }\n#endif\n  \n  if (real_writev != NULL && canInstrument)\n  { \n    /* Instrumentation is enabled, emit events and invoke the real call */\n    int i;\n    ssize_t size = 0;\n\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n\n    for (i=0; i<iovcnt; i++)\n    {\n      size += iov[i].iov_len;\n    }\n\n    Probe_IO_writev_Entry (fd, size);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_writev (fd, iov, iovcnt);\n    Probe_IO_writev_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_writev != NULL && !canInstrument)\n  { \n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_writev (fd, iov, iovcnt);\n  }\n  else\n  { \n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": writev is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * preadv\n * \n * Wrapper for the system call 'preadv' \n */\nssize_t preadv(int fd, const struct iovec *iov, int iovcnt, off_t offset)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n  \n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_preadv == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  { \n    fprintf (stderr, PACKAGE_NAME\": preadv is at %p\\n\", real_preadv);\n    fprintf (stderr, PACKAGE_NAME\": preadv params %d %p %d %ld\\n\", fd, iov, iovcnt, offset);\n  }\n#endif\n  \n  if (real_preadv != NULL && canInstrument)\n  { \n    /* Instrumentation is enabled, emit events and invoke the real call */\n    int i;\n    ssize_t size = 0;\n\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n\n    for (i=0; i<iovcnt; i++)\n    {\n      size += iov[i].iov_len;\n    }\n\n    Probe_IO_preadv_Entry (fd, size);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_preadv (fd, iov, iovcnt, offset);\n    Probe_IO_preadv_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_preadv != NULL && !canInstrument)\n  { \n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_preadv (fd, iov, iovcnt, offset);\n  }\n  else\n  { \n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": preadv is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * preadv64\n * \n * Wrapper for the system call 'preadv64' \n */\nssize_t preadv64(int fd, const struct iovec *iov, int iovcnt, __off64_t offset)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_preadv64 == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": preadv64 is at %p\\n\", real_preadv64);\n    fprintf (stderr, PACKAGE_NAME\": preadv64 params %d %p %d %ld\\n\", fd, iov, iovcnt, offset);\n  }\n#endif\n\n  if (real_preadv64 != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    int i;\n    ssize_t size = 0;\n\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n\n    for (i=0; i<iovcnt; i++)\n    {\n      size += iov[i].iov_len;\n    }\n\n    Probe_IO_preadv_Entry (fd, size);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_preadv64 (fd, iov, iovcnt, offset);\n    Probe_IO_preadv_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_preadv64 != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_preadv64 (fd, iov, iovcnt, offset);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": preadv64 is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * pwritev\n * \n * Wrapper for the system call 'pwritev' \n */\nssize_t pwritev(int fd, const struct iovec *iov, int iovcnt, off_t offset)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n  \n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_pwritev == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  { \n    fprintf (stderr, PACKAGE_NAME\": pwritev is at %p\\n\", real_pwritev);\n    fprintf (stderr, PACKAGE_NAME\": pwritev params %d %p %d %ld\\n\", fd, iov, iovcnt, offset);\n  }\n#endif\n  \n  if (real_pwritev != NULL && canInstrument)\n  { \n    /* Instrumentation is enabled, emit events and invoke the real call */\n    int i;\n    ssize_t size = 0;\n\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n\n    for (i=0; i<iovcnt; i++)\n    {\n      size += iov[i].iov_len;\n    }\n\n    Probe_IO_pwritev_Entry (fd, size);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_pwritev (fd, iov, iovcnt, offset);\n    Probe_IO_pwritev_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_pwritev != NULL && !canInstrument)\n  { \n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_pwritev (fd, iov, iovcnt, offset);\n  }\n  else\n  { \n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": pwritev is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n}\n\n/**\n * pwritev64\n * \n * Wrapper for the system call 'pwritev64' \n */\nssize_t pwritev64(int fd, const struct iovec *iov, int iovcnt, __off64_t offset)\n{\n  /* Check whether IO instrumentation is enabled */\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      !Backend_inInstrumentation(THREADID) &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_io();\n  ssize_t res;\n\n  /* Initialize the module if the pointer to the real call is not yet set */\n  if (real_pwritev64 == NULL)\n  {\n    Extrae_iotrace_init();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf (stderr, PACKAGE_NAME\": pwritev64 is at %p\\n\", real_pwritev64);\n    fprintf (stderr, PACKAGE_NAME\": pwritev64 params %d %p %d %ld\\n\", fd, iov, iovcnt, offset);\n  }\n#endif\n\n  if (real_pwritev64 != NULL && canInstrument)\n  {\n    /* Instrumentation is enabled, emit events and invoke the real call */\n    int i;\n    ssize_t size = 0;\n\n    Backend_Enter_Instrumentation (4+Caller_Count[CALLER_IO]);\n\n    for (i=0; i<iovcnt; i++)\n    {\n      size += iov[i].iov_len;\n    }\n\n    Probe_IO_pwritev_Entry (fd, size);\n    TRACE_IO_CALLER(LAST_READ_TIME, 3);\n    res = real_pwritev64 (fd, iov, iovcnt, offset);\n    Probe_IO_pwritev_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_pwritev64 != NULL && !canInstrument)\n  {\n    /* Instrumentation is not enabled, bypass to the real call */\n    res = real_pwritev64 (fd, iov, iovcnt, offset);\n  }\n  else\n  {\n    /*\n     * An error is thrown if the application uses this symbol but during the initialization \n     * we couldn't find the real implementation. This kind of situation could happen in the \n     * very strange case where, by the time this symbol is first called, the libc (where the \n     * real implementation is) has not been loaded yet. One suggestion if we see this error\n     * is to try to prepend the libc.so to the LD_PRELOAD to force to load it first. \n     */\n    fprintf (stderr, PACKAGE_NAME\": pwritev64 is not hooked! exiting!!\\n\");\n    abort();\n  }\n\n  return res;\n\n}\n\n\n\n# endif /* -DPIC */\n\n#endif /* -DINSTRUMENT_IO */\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/CUDA/cuda_wrapper.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef  __USE_GNU\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n\n#include \"cuda_common.h\"\n#include \"cuda_probe.h\"\n#include \"wrapper.h\"\n\n//#define DEBUG\n\n/**\n ** Regular LD_PRELOAD instrumentation\n **/\n#if defined(PIC)\nstatic cudaError_t (*real_cudaLaunch)(const char*) = NULL;\nstatic cudaError_t (*real_cudaConfigureCall)(dim3, dim3, size_t, cudaStream_t) = NULL;\nstatic cudaError_t (*real_cudaThreadSynchronize)(void) = NULL;\nstatic cudaError_t (*real_cudaDeviceSynchronize)(void) = NULL;\nstatic cudaError_t (*real_cudaStreamSynchronize)(cudaStream_t) = NULL;\nstatic cudaError_t (*real_cudaMemcpy)(void*,const void*,size_t,enum cudaMemcpyKind) = NULL;\nstatic cudaError_t (*real_cudaMemcpyAsync)(void*,const void*,size_t,enum cudaMemcpyKind,cudaStream_t) = NULL;\nstatic cudaError_t (*real_cudaStreamCreate)(cudaStream_t*) = NULL;\nstatic cudaError_t (*real_cudaDeviceReset)(void) = NULL;\nstatic cudaError_t (*real_cudaThreadExit)(void) = NULL;\n#endif /* PIC */\n\nvoid Extrae_CUDA_init (int rank)\n{\n\tUNREFERENCED_PARAMETER(rank);\n\n#if defined(PIC)\n\treal_cudaLaunch = (cudaError_t(*)(const char*)) dlsym (RTLD_NEXT, \"cudaLaunch\");\n\n\treal_cudaConfigureCall = (cudaError_t(*)(dim3, dim3, size_t, cudaStream_t)) dlsym (RTLD_NEXT, \"cudaConfigureCall\");\n\n\treal_cudaThreadSynchronize = (cudaError_t(*)(void)) dlsym (RTLD_NEXT, \"cudaThreadSynchronize\");\n\n\treal_cudaDeviceSynchronize = (cudaError_t(*)(void)) dlsym (RTLD_NEXT, \"cudaDeviceSynchronize\");\n\n\treal_cudaStreamSynchronize = (cudaError_t(*)(cudaStream_t)) dlsym (RTLD_NEXT, \"cudaStreamSynchronize\");\n\n\treal_cudaMemcpy = (cudaError_t(*)(void*,const void*,size_t,enum cudaMemcpyKind)) dlsym (RTLD_NEXT, \"cudaMemcpy\");\n\n\treal_cudaMemcpyAsync = (cudaError_t(*)(void*,const void*,size_t,enum cudaMemcpyKind,cudaStream_t)) dlsym (RTLD_NEXT, \"cudaMemcpyAsync\");\n\n\treal_cudaStreamCreate = (cudaError_t(*)(cudaStream_t*)) dlsym (RTLD_NEXT, \"cudaStreamCreate\");\n\n\treal_cudaDeviceReset = (cudaError_t(*)(void)) dlsym (RTLD_NEXT, \"cudaDeviceReset\");\n\n\treal_cudaThreadExit = (cudaError_t(*)(void)) dlsym (RTLD_NEXT, \"cudaThreadExit\");\n#else\n\tfprintf (stderr, PACKAGE_NAME\": Warning! CUDA instrumentation requires linking with shared library!\\n\");\n#endif /* PIC */\n}\n\n/*\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n*/\n\n#if defined(PIC)\n\n#if 0\nstatic int _cudaLaunch_device = 0;\nstatic int _cudaLaunch_stream = 0;\n#endif\n\ncudaError_t cudaLaunch (const char *p1)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaLaunch is at %p\\n\", THREADID, real_cudaLaunch);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaLaunch params %p\\n\", THREADID, p1);\n#endif\n\n\tif (real_cudaLaunch != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaLaunch_Enter (p1);\n\t\tres = real_cudaLaunch (p1);\n\t\tExtrae_cudaLaunch_Exit ();\n\t}\n\telse if (real_cudaLaunch != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaLaunch (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaLaunch in DSOs! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\ncudaError_t cudaConfigureCall (dim3 p1, dim3 p2, size_t p3, cudaStream_t p4)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaConfigureCall is at %p\\n\", THREADID, real_cudaConfigureCall);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaConfigureCall params p1 p2 %d %d\\n\", THREADID, p3, p4);\n#endif\n\n\tif (real_cudaConfigureCall != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaConfigureCall_Enter (p1, p2, p3, p4);\n\t\tres = real_cudaConfigureCall (p1, p2, p3, p4);\n\t\tExtrae_cudaConfigureCall_Exit ();\n\t}\n\telse if (real_cudaConfigureCall != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaConfigureCall (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaConfigureCall in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\ncudaError_t cudaStreamCreate (cudaStream_t *p1)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaStreamCreate is at %p\\n\", THREADID, real_cudaStreamCreate);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaStreamCreate params %p %p %d %d %d\\n\", THREADID, p1);\n#endif\n\n\tif (real_cudaStreamCreate != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaStreamCreate_Enter (p1);\n\t\tres = real_cudaStreamCreate (p1);\n\t\tExtrae_cudaStreamCreate_Exit ();\n\t}\n\telse if (real_cudaStreamCreate != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaStreamCreate (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaStreamCreate in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\ncudaError_t cudaMemcpyAsync (void *p1, const void *p2, size_t p3, enum cudaMemcpyKind p4, cudaStream_t p5)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaMemcpyAsync is at %p\\n\", THREADID, real_cudaMemcpyAsync);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaMemcpyAsync params %p %p %d %d %d\\n\", THREADID, p1, p2, p3, p4, p5);\n#endif\n\n\tif (real_cudaMemcpyAsync != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaMemcpyAsync_Enter (p1, p2, p3, p4, p5);\n\t\tres = real_cudaMemcpyAsync (p1, p2, p3, p4, p5);\n\t\tExtrae_cudaMemcpyAsync_Exit ();\n\t}\n\telse if (real_cudaMemcpyAsync != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaMemcpyAsync (p1, p2, p3, p4, p5);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaMemcpyAsync in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\ncudaError_t cudaMemcpy (void *p1, const void *p2, size_t p3, enum cudaMemcpyKind p4)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaMemcpy is at %p\\n\", THREADID, real_cudaMemcpy);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaMemcpy params %p %p %d %d\\n\", THREADID, p1, p2, p3, p4);\n#endif\n\n\tif (real_cudaMemcpy != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaMemcpy_Enter (p1, p2, p3, p4);\n\t\tres = real_cudaMemcpy (p1, p2, p3, p4);\n\t\tExtrae_cudaMemcpy_Exit ();\n\t}\n\telse if (real_cudaMemcpy != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaMemcpy (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaMemcpy in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\ncudaError_t cudaThreadSynchronize (void)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaThreadSynchronize is at %p\\n\", THREADID, real_cudaThreadSynchronize);\n#endif\n\n\tif (real_cudaThreadSynchronize != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaThreadSynchronize_Enter ();\n\t\tres = real_cudaThreadSynchronize ();\n\t\tExtrae_cudaThreadSynchronize_Exit ();\n\t}\n\telse if (real_cudaThreadSynchronize != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaThreadSynchronize ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaThreadSynchronize in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\ncudaError_t cudaDeviceSynchronize (void)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaDeviceSynchronize is at %p\\n\", THREADID, real_cudaThreadSynchronize);\n#endif\n\n\tif (real_cudaDeviceSynchronize != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaThreadSynchronize_Enter ();\n\t\tres = real_cudaDeviceSynchronize ();\n\t\tExtrae_cudaThreadSynchronize_Exit ();\n\t}\n\telse if (real_cudaDeviceSynchronize != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaDeviceSynchronize ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaDeviceSynchronize in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\ncudaError_t cudaStreamSynchronize (cudaStream_t p1)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaStreamSynchronize is at %p\\n\", THREADID, real_cudaStreamSynchronize);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaStreamSynchronize params %d\\n\", THREADID, p1);\n#endif\n\n\tif (real_cudaStreamSynchronize != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaStreamSynchronize_Enter (p1);\n\t\tres = real_cudaStreamSynchronize (p1);\n\t\tExtrae_cudaStreamSynchronize_Exit ();\n\t}\n\telse if (real_cudaStreamSynchronize != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaStreamSynchronize (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaStreamSynchronize in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\ncudaError_t cudaThreadExit (void)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaThreadExit is at %p\\n\", THREADID, real_cudaThreadExit);\n#endif\n\n\tif (real_cudaThreadExit != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaThreadExit_Enter ();\n\t\tres = real_cudaThreadExit ();\n\t\tExtrae_cudaThreadExit_Exit ();\n\t}\n\telse if (real_cudaStreamSynchronize != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaThreadExit ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaThreadExit in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\n\ncudaError_t cudaDeviceReset (void)\n{\n\tcudaError_t res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d cudaDeviceReset is at %p\\n\", THREADID, real_cudaDeviceReset);\n#endif\n\n\tif (real_cudaDeviceReset != NULL && mpitrace_on && Extrae_get_trace_CUDA())\n\t{\n\t\tExtrae_cudaDeviceReset_Enter ();\n\t\tres = real_cudaDeviceReset ();\n\t\tExtrae_cudaDeviceReset_Exit ();\n\t}\n\telse if (real_cudaStreamSynchronize != NULL && !(mpitrace_on && Extrae_get_trace_CUDA()))\n\t{\n\t\tres = real_cudaDeviceReset ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, \"Unable to find cudaDeviceReset in DSOs!! Dying...\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\n#endif /* PIC */\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/openshmem/openshmem_wrappers.c": "#define _GNU_SOURCE\n/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#include <math.h>\n#include <unistd.h>\n#include <dlfcn.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <fcntl.h>\n#include \"wrapper.h\"\n#include \"openshmem_wrappers.h\"\n#include \"openshmem_probes.h\"\n#include \"openshmem_events.h\"\n#include \"utils.h\"\n\n/****************************************\\\n ***     POINTERS TO REAL SYMBOLS     ***\n\\****************************************/\n\nstatic void (*start_pes_real) (int npes) = NULL;\nstatic int (*shmem_my_pe_real) (void) = NULL;\nstatic int (*_my_pe_real) (void) = NULL;\nstatic int (*shmem_n_pes_real) (void) = NULL;\nstatic int (*_num_pes_real) (void) = NULL;\nstatic int (*shmem_pe_accessible_real) (int pe) = NULL;\nstatic int (*shmem_addr_accessible_real) (void *addr, int pe) = NULL;\nstatic void * (*shmem_ptr_real) (void *target, int pe) = NULL;\nstatic void * (*shmalloc_real) (size_t size) = NULL;\nstatic void (*shfree_real) (void *ptr) = NULL;\nstatic void * (*shrealloc_real) (void *ptr, size_t size) = NULL;\nstatic void * (*shmemalign_real) (size_t alignment, size_t size) = NULL;\nstatic void (*shmem_double_put_real) (double *target, const double *source, size_t len, int pe) = NULL;\nstatic void (*shmem_float_put_real) (float *target, const float *source, size_t len, int pe) = NULL;\nstatic void (*shmem_int_put_real) (int *target, const int *source, size_t len, int pe) = NULL;\nstatic void (*shmem_long_put_real) (long *target, const long *source, size_t len, int pe) = NULL;\nstatic void (*shmem_longdouble_put_real) (long double *target, const long double *source, size_t len,int pe) = NULL;\nstatic void (*shmem_longlong_put_real) (long long *target, const long long *source, size_t len, int pe) = NULL;\nstatic void (*shmem_put32_real) (void *target, const void *source, size_t len, int pe) = NULL;\nstatic void (*shmem_put64_real) (void *target, const void *source, size_t len, int pe) = NULL;\nstatic void (*shmem_put128_real) (void *target, const void *source, size_t len, int pe) = NULL;\nstatic void (*shmem_putmem_real) (void *target, const void *source, size_t len, int pe) = NULL;\nstatic void (*shmem_short_put_real) (short*target, const short*source, size_t len, int pe) = NULL;\nstatic void (*shmem_char_p_real) (char *addr, char value, int pe) = NULL;\nstatic void (*shmem_short_p_real) (short *addr, short value, int pe) = NULL;\nstatic void (*shmem_int_p_real) (int *addr, int value, int pe) = NULL;\nstatic void (*shmem_long_p_real) (long *addr, long value, int pe) = NULL;\nstatic void (*shmem_longlong_p_real) (long long *addr, long long value, int pe) = NULL;\nstatic void (*shmem_float_p_real) (float *addr, float value, int pe) = NULL;\nstatic void (*shmem_double_p_real) (double *addr, double value, int pe) = NULL;\nstatic void (*shmem_longdouble_p_real) (long double *addr, long double value, int pe) = NULL;\nstatic void (*shmem_double_iput_real) (double *target, const double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_float_iput_real) (float *target, const float *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_int_iput_real) (int *target, const int *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_iput32_real) (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_iput64_real) (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_iput128_real) (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_long_iput_real) (long *target, const long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_longdouble_iput_real) (long double *target, const long double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_longlong_iput_real) (long long *target, const long long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_short_iput_real) (short *target, const short *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_double_get_real) (double *target, const double *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_float_get_real) (float *target, const float *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_get32_real) (void *target, const void *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_get64_real) (void *target, const void *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_get128_real) (void *target, const void *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_getmem_real) (void *target, const void *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_int_get_real) (int *target, const int *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_long_get_real) (long *target, const long *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_longdouble_get_real) (long double *target, const long double *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_longlong_get_real) (long long *target, const long long *source, size_t nelems, int pe) = NULL;\nstatic void (*shmem_short_get_real) (short *target, const short *source, size_t nelems, int pe) = NULL;\nstatic char (*shmem_char_g_real) (char *addr, int pe) = NULL;\nstatic short (*shmem_short_g_real) (short *addr, int pe) = NULL;\nstatic int (*shmem_int_g_real) (int *addr, int pe) = NULL;\nstatic long (*shmem_long_g_real) (long *addr, int pe) = NULL;\nstatic long long (*shmem_longlong_g_real) (long long *addr, int pe) = NULL;\nstatic float (*shmem_float_g_real) (float *addr, int pe) = NULL;\nstatic double (*shmem_double_g_real) (double *addr, int pe) = NULL;\nstatic long double (*shmem_longdouble_g_real) (long double *addr, int pe) = NULL;\nstatic void (*shmem_double_iget_real) (double *target, const double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_float_iget_real) (float *target, const float *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_iget32_real) (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_iget64_real) (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_iget128_real) (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_int_iget_real) (int *target, const int *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_long_iget_real) (long *target, const long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_longdouble_iget_real) (long double *target, const long double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_longlong_iget_real) (long long *target, const long long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_short_iget_real) (short *target, const short *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe) = NULL;\nstatic void (*shmem_int_add_real) (int *target, int value, int pe) = NULL;\nstatic void (*shmem_long_add_real) (long *target, long value, int pe) = NULL;\nstatic void (*shmem_longlong_add_real) (long long *target, long long value, int pe) = NULL;\nstatic int (*shmem_int_cswap_real) (int *target, int cond, int value, int pe) = NULL;\nstatic long (*shmem_long_cswap_real) (long *target, long cond, long value, int pe) = NULL;\nstatic long long (*shmem_longlong_cswap_real) (long long *target, long long cond, long long value, int pe) = NULL;\nstatic double (*shmem_double_swap_real) (double *target, double value, int pe) = NULL;\nstatic float (*shmem_float_swap_real) (float *target, float value, int pe) = NULL;\nstatic int (*shmem_int_swap_real) (int *target, int value, int pe) = NULL;\nstatic long (*shmem_long_swap_real) (long *target, long value, int pe) = NULL;\nstatic long long (*shmem_longlong_swap_real) (long long *target, long long value, int pe) = NULL;\nstatic long (*shmem_swap_real) (long *target, long value, int pe) = NULL;\nstatic int (*shmem_int_finc_real) (int *target, int pe) = NULL;\nstatic long (*shmem_long_finc_real) (long *target, int pe) = NULL;\nstatic long long (*shmem_longlong_finc_real) (long long *target, int pe) = NULL;\nstatic void (*shmem_int_inc_real) (int *target, int pe) = NULL;\nstatic void (*shmem_long_inc_real) (long *target, int pe) = NULL;\nstatic void (*shmem_longlong_inc_real) (long long *target, int pe) = NULL;\nstatic int (*shmem_int_fadd_real) (int *target, int value, int pe) = NULL;\nstatic long (*shmem_long_fadd_real) (long *target, long value, int pe) = NULL;\nstatic long long (*shmem_longlong_fadd_real) (long long *target, long long value, int pe) = NULL;\nstatic void (*shmem_barrier_all_real) (void) = NULL;\nstatic void (*shmem_barrier_real) (int PE_start, int logPE_stride, int PE_size, long *pSync) = NULL;\nstatic void (*shmem_broadcast32_real) (void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync) = NULL;\nstatic void (*shmem_broadcast64_real) (void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync) = NULL;\nstatic void (*shmem_collect32_real) (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync) = NULL;\nstatic void (*shmem_collect64_real) (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync) = NULL;\nstatic void (*shmem_fcollect32_real) (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync) = NULL;\nstatic void (*shmem_fcollect64_real) (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync) = NULL;\nstatic void (*shmem_int_and_to_all_real) (int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync) = NULL;\nstatic void (*shmem_long_and_to_all_real) (long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync) = NULL;\nstatic void (*shmem_longlong_and_to_all_real) (long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync) = NULL;\nstatic void (*shmem_short_and_to_all_real) (short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync) = NULL;\nstatic void (*shmem_double_max_to_all_real) (double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync) = NULL;\nstatic void (*shmem_float_max_to_all_real) (float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync) = NULL;\nstatic void (*shmem_int_max_to_all_real) (int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync) = NULL;\nstatic void (*shmem_long_max_to_all_real) (long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync) = NULL;\nstatic void (*shmem_longdouble_max_to_all_real) (long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync) = NULL;\nstatic void (*shmem_longlong_max_to_all_real) (long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync) = NULL;\nstatic void (*shmem_short_max_to_all_real) (short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync) = NULL;\nstatic void (*shmem_double_min_to_all_real) (double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync) = NULL;\nstatic void (*shmem_int_wait_real) (int *ivar, int cmp_value) = NULL;\nstatic void (*shmem_int_wait_until_real) (int *ivar, int cmp, int cmp_value) = NULL;\nstatic void (*shmem_long_wait_real) (long *ivar, long cmp_value) = NULL;\nstatic void (*shmem_long_wait_until_real) (long *ivar, int cmp, long cmp_value) = NULL;\nstatic void (*shmem_longlong_wait_real) (long long *ivar, long long cmp_value) = NULL;\nstatic void (*shmem_longlong_wait_until_real) (long long *ivar, int cmp, long long cmp_value) = NULL;\nstatic void (*shmem_short_wait_real) (short *ivar, short cmp_value) = NULL;\nstatic void (*shmem_short_wait_until_real) (short *ivar, int cmp, short cmp_value) = NULL;\nstatic void (*shmem_wait_real) (long *ivar, long cmp_value) = NULL;\nstatic void (*shmem_wait_until_real) (long *ivar, int cmp, long cmp_value) = NULL;\nstatic void (*shmem_fence_real) (void) = NULL;\nstatic void (*shmem_quiet_real) (void) = NULL;\nstatic void (*shmem_clear_lock_real) (long *lock) = NULL;\nstatic void (*shmem_set_lock_real) (long *lock) = NULL;\nstatic int (*shmem_test_lock_real) (long *lock) = NULL;\nstatic void (*shmem_clear_cache_inv_real) (void) = NULL;\nstatic void (*shmem_set_cache_inv_real) (void) = NULL;\nstatic void (*shmem_clear_cache_line_inv_real) (void *target) = NULL;\nstatic void (*shmem_set_cache_line_inv_real) (void *target) = NULL;\nstatic void (*shmem_udcflush_real) (void) = NULL;\nstatic void (*shmem_udcflush_line_real) (void *target) = NULL;\n\nstatic unsigned Extrae_OPENSHMEM_NumTasks(void)\n{\n  static int run = FALSE;\n  static unsigned ntasks = 0;\n\n  if (!run)\n  {\n    ntasks = shmem_n_pes_real();\n    run    = TRUE;\n  }\n  return ntasks;\n}\n\nstatic unsigned Extrae_OPENSHMEM_TaskID(void)\n{\n  static int run = FALSE;\n  static unsigned rank;\n\n  if (!run)\n  {\n    rank = _my_pe_real();\n    run  = TRUE;\n  }\n  return rank;\n}\n\nstatic void Extrae_OPENSHMEM_Barrier(void)\n{\n  shmem_barrier_all_real();\n}\n\nstatic void Extrae_OPENSHMEM_Finalize(void)\n{\n  return;\n}\n\n#include \"auto_fini.h\"\nvoid shmem_finalize()\n{\n  Extrae_auto_library_fini();\n}\n\nstatic char * OPENSHMEM_Distribute_XML_File (int rank, int world_size, char *origen)\n{\n  char hostname[1024];\n  long *pSync = NULL;\n  char *result_file = NULL;\n  char *target_file = NULL;\n  int has_hostname = FALSE;\n  int* file_size_source;\n  int* file_size_target;\n  int fd;\n  void *storage;\n  int storage_size = 0;\n  int i;\n\n  pSync = (long *) shmalloc_real( sizeof(long) * _SHMEM_BCAST_SYNC_SIZE );\n  file_size_source = (int *) shmalloc_real( sizeof(int) );\n  file_size_target = (int *) shmalloc_real( sizeof(int) );\n\n  *file_size_source = 0;\n  *file_size_target = 0;\n\n  has_hostname = gethostname(hostname, 1024 - 1) == 0;\n\n  /* If no other tasks are running, just return the same file */\n  if (world_size == 1)\n  {\n    /* Copy the filename */\n    result_file = strdup (origen);\n    if (result_file == NULL)\n    {\n      fprintf (stderr, PACKAGE_NAME\": Cannot obtain memory for the XML file!\\n\");\n      exit (0);\n    }\n    return result_file;\n  }\n\n  for (i=0; i < _SHMEM_BCAST_SYNC_SIZE; i++) {\n    pSync[i] = _SHMEM_SYNC_VALUE;\n  }\n  shmem_barrier_all_real(); /* Wait for all PEs to initialize pSync */\n\n  shmem_broadcast32_real(file_size_target, file_size_source, 1, 0, 0, 0, world_size, pSync);\n\n  if (rank == 0)\n  {\n                /* Copy the filename */\n                result_file = (char*) malloc ((strlen(origen)+1)*sizeof(char));\n                if (result_file == NULL)\n                {\n                        fprintf (stderr, PACKAGE_NAME\": Cannot obtain memory for the XML file!\\n\");\n                        exit (0);\n                }\n                memset (result_file, 0, (strlen(origen)+1)*sizeof(char));\n                strncpy (result_file, origen, strlen(origen));\n\n                /* Open the file */\n                fd = open (result_file, O_RDONLY);\n\n                /* If open succeeds, read the size of the file */\n\t\tif (fd != -1)\n\t\t{\n\t\t    *file_size_source = lseek (fd, 0, SEEK_END);\n\t\t    lseek (fd, 0, SEEK_SET);\n\t\t}\n\n                /* Send the size */\n                shmem_broadcast32_real(file_size_target, file_size_source, 1, 0, 0, 0, world_size, pSync);\n\n\t\tif (fd < 0 || *file_size_source == 0)\n\t\t{\n\t\t    fprintf (stderr, PACKAGE_NAME\": Cannot open XML configuration file (%s)!\\n\", result_file);\n\t\t    exit (0);\n\t\t}\n\n                storage_size = sizeof(int) * (int)(ceil( (float)*file_size_source / (float)sizeof(int) ));\n\n\n                /* Allocate & Read the file */\n                storage = (void *) shmalloc_real (storage_size * sizeof(char));\n                if (storage == NULL)\n                {\n                        fprintf (stderr, PACKAGE_NAME\": Cannot obtain memory for the XML distribution!\\n\");\n                        exit (0);\n                }\n                if (*file_size_source != read (fd, (char *)storage, *file_size_source))\n                {\n                        fprintf (stderr, PACKAGE_NAME\": Unable to read XML file for its distribution on host %s\\n\", has_hostname?hostname:\"unknown\");\n                        exit (0);\n                }\n\n                /* Send the file */\n                shmem_broadcast32_real( storage, storage, storage_size/4, 0, 0, 0, world_size, pSync );\n\n                /* Close the file */\n                close (fd);\n                shfree_real (storage);\n\n                return result_file;\n  }\n  else  \n  {\n                /* Receive the size */\n                shmem_broadcast32_real(file_size_target, file_size_source, 1, 0, 0, 0, world_size, pSync);\n\n\t\tif (*file_size_target <= 0)\n\t\t{\n\t\t    exit (0);\n\t\t}\n\n                storage_size = sizeof(int) * (int)(ceil( (float)*file_size_target / (float)sizeof(int) ));\n                storage = (char*) shmalloc_real (storage_size * sizeof(char));\n                if (storage == NULL)\n                {\n                        fprintf (stderr, PACKAGE_NAME\": Cannot obtain memory for the XML distribution!\\n\");\n                        exit (0);\n                }\n\n                /* Build the temporal file pattern */\n                if (getenv(\"TMPDIR\"))\n                {\n                        int len = 14 + strlen(getenv(\"TMPDIR\")) + 1;\n\n                        /* If TMPDIR exists but points to non-existent directory, create it */\n                        if (!directory_exists (getenv(\"TMPDIR\")))\n                                mkdir_recursive (getenv(\"TMPDIR\"));\n\n                        /* 14 is the length from /XMLFileXXXXXX */\n                        result_file = (char*) malloc (len * sizeof(char));\n                        snprintf (result_file, len, \"%s/XMLFileXXXXXX\", getenv (\"TMPDIR\"));\n                }\n                else\n                {\n                        /* 13 is the length from XMLFileXXXXXX */\n                        result_file = (char*) malloc ((13+1)*sizeof(char));\n                        sprintf (result_file, \"XMLFileXXXXXX\");\n                }\n\n                /* Create the temporal file */\n                fd = mkstemp (result_file);\n\n                /* Receive the file */\n                shmem_broadcast32_real( storage, storage, storage_size/4, 0, 0, 0, world_size, pSync );\n\n                if (*file_size_target != write (fd, (char *)storage, *file_size_target))\n                {\n                        fprintf (stderr, PACKAGE_NAME\": Unable to write XML file for its distribution (%s) - host %s\\n\", result_file, has_hostname?hostname:\"unknown\");\n                        perror(\"write\");\n                        exit (0);\n                }\n\n                /* Close the file, free and return it! */\n                close (fd);\n                shfree_real (storage);\n\n                return result_file;\n\n  }\n\n  shfree_real( pSync );\n  shfree_real( file_size_source );\n  shfree_real( file_size_target );\n\n  return NULL;\n}\n\nchar **TasksNodes = NULL;\n\nstatic void OPENSHMEM_Gather_Nodes_Info (void)\n{\n  int i = 0;\n  int hostname_length = 1024;\n  int num_tasks = Extrae_get_num_tasks();\n  void *hostname;\n  void *all_hostnames;\n\n  hostname = (void *) shmalloc_real( hostname_length * sizeof(char) );\n  all_hostnames = (void *) shmalloc_real( hostname_length * sizeof(char) * num_tasks );\n  bzero( hostname, hostname_length * sizeof(char) );\n  bzero( all_hostnames, hostname_length * sizeof(char) * num_tasks );\n\n  /* Get processor name */\n  gethostname((char *)hostname, hostname_length - 1);\n\n  /* Change spaces \" \" into underscores \"_\" (BLG nodes use to have spaces in their names) */\n  for (i = 0; i < hostname_length; i++)\n    if (' ' == ((char *)hostname)[i])\n      ((char *)hostname)[i] = '_';\n\n  /* Share information among all tasks */\n  long *psync;\n  psync = (long *) shmalloc_real (sizeof(long) * _SHMEM_COLLECT_SYNC_SIZE);\n  for(i=0;i<_SHMEM_COLLECT_SYNC_SIZE;i++)\n    psync[i] = _SHMEM_SYNC_VALUE;\n  shmem_barrier_all_real();\n\n  shmem_fcollect32_real(all_hostnames, hostname, (hostname_length/4), 0, 0, num_tasks, psync);\n\n  /* Store the information in a global array */\n  TasksNodes = (char **)malloc (num_tasks * sizeof(char *));\n  if (TasksNodes == NULL)\n  {\n    fprintf (stderr, \": Fatal error! Cannot allocate memory for nodes info\\n\");\n    exit (-1);\n  }\n\n  for(i=0; i<num_tasks; i++)\n  {\n    TasksNodes[i] = (char *)malloc(hostname_length * sizeof(char));\n\n    if (TasksNodes[i] == NULL)\n    {\n      fprintf (stderr, \": Fatal error! Cannot allocate memory for node info %u\\n\", i);\n      exit (-1);\n    }\n    strncpy (TasksNodes[i], &(((char *)all_hostnames)[i * hostname_length]), hostname_length);\n  }\n\n  shfree_real( psync );\n  shfree_real( hostname );\n  shfree_real( all_hostnames );\n\n  return;\n}\n\nvoid OPENSHMEM_remove_file_list (int all)\n{\n        char tmpname[1024];\n\n        if (all || (!all && TASKID == 0))\n        {\n                sprintf (tmpname, \"%s/%s%s\", final_dir, appl_name, EXT_MPITS);\n                unlink (tmpname);\n        }\n}\n\nchar *MpitsFileName = NULL;\n#include \"threadinfo.h\"\n\nint OPENSHMEM_Generate_Task_File_list( char **node_list )\n{\n\tint i;\n\tunsigned ret;\n\tint *pid;\n\tint *task_id;\n\tint *num_threads;\n        int  num_tasks;\n        int *all_pids;\n        int *all_task_ids;\n        int *all_num_threads;\n\tchar *thread_names_source;\n\tchar *thread_names_target;\n\tchar tmpname[1024];\n\n        num_tasks   = Extrae_get_num_tasks();\n\tpid         = (int *) shmalloc_real( sizeof(int) );\n\ttask_id     = (int *) shmalloc_real( sizeof(int) );\n\tnum_threads = (int *) shmalloc_real( sizeof(int) );\n\tthread_names_source = (char *) shmalloc_real( Backend_getMaximumOfThreads()*THREAD_INFO_NAME_LEN*sizeof(char) );\n\tthread_names_target = (char *) shmalloc_real( Backend_getMaximumOfThreads()*THREAD_INFO_NAME_LEN*sizeof(char) );\n\n\t*pid = getpid();\n\t*task_id = TASKID;\n\t*num_threads = Backend_getMaximumOfThreads();\n\n\tall_pids        = (int *) shmalloc_real( num_tasks * sizeof(int) );\n\tall_task_ids    = (int *) shmalloc_real( num_tasks * sizeof(int) );\n\tall_num_threads = (int *) shmalloc_real( num_tasks * sizeof(int) );\n\n\t/* Share information among all tasks */\n\tlong *psync;\n\tpsync = (long *) shmalloc_real (sizeof(long) * _SHMEM_COLLECT_SYNC_SIZE);\n\tfor(i=0;i<_SHMEM_COLLECT_SYNC_SIZE;i++)\n\tpsync[i] = _SHMEM_SYNC_VALUE;\n\tshmem_barrier_all_real();\n\n        /* Share PID and number of threads of each task */\n\tshmem_fcollect32_real(all_pids, pid, 1, 0, 0, num_tasks, psync);\n\tshmem_fcollect32_real(all_task_ids, task_id, 1, 0, 0, num_tasks, psync);\n\tshmem_fcollect32_real(all_num_threads, num_threads, 1, 0, 0, num_tasks, psync);\n\n\tif (TASKID != 0)\n\t{\n                if (thread_names_source == NULL)\n                {\n                        fprintf (stderr, \"Fatal error! Cannot allocate memory to transfer thread names\\n\");\n                        exit (-1);\n                }\n                for (i = 0; i < Backend_getMaximumOfThreads(); i++)\n                        memcpy (&thread_names_source[i*THREAD_INFO_NAME_LEN], Extrae_get_thread_name(i), THREAD_INFO_NAME_LEN);\n\t}\n\n\tshmem_barrier_all_real();\n\n\tif (TASKID == 0)\t\n\t{\n\t\tint fd;\n\t\tint thid; \n\n\t\tsprintf (tmpname, \"%s/%s.mpits\", final_dir, appl_name);\n\t\tMpitsFileName = strdup( tmpname );\n\t\tfd = open (MpitsFileName, O_RDWR | O_CREAT | O_TRUNC, 0644);\n\t\tif (fd == -1)\n\t\t{\n\t\t\treturn -1;\n\t\t}\n\t\tfor (i = 0; i < num_tasks; i ++)\n\t\t{\n\t\t\tchar tmpline[2048];\n\t\t\tint PID = all_pids[i];\n\t\t\tint TID = all_task_ids[i];\n\t\t\tint NTHREADS = all_num_threads[i];\n\n\t\t\tif (i == 0)\n\t\t\t{\n                                /* If Im processing MASTER, I know my threads and their names */\n                                for (thid = 0; thid < NTHREADS; thid++)\n                                {\n                                        FileName_PTT(tmpname, Get_FinalDir(TID), appl_name, node_list[i], PID, TID, thid, EXT_MPIT);\n                                        sprintf (tmpline, \"%s named %s\\n\", tmpname, Extrae_get_thread_name(thid));\n                                        ret = write (fd, tmpline, strlen (tmpline));\n                                        if (ret != strlen (tmpline))\n                                        {\n                                                close (fd);\n                                                return -1;\n                                        }\n                                }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n                                /* If Im not processing MASTER, I have to ask for threads and their names */\n\t\t\t\tshmem_getmem_real(thread_names_target, thread_names_source, Backend_getMaximumOfThreads()*THREAD_INFO_NAME_LEN*sizeof(char), i);\n                                for (thid = 0; thid < NTHREADS; thid++)\n                                {\n                                        FileName_PTT(tmpname, Get_FinalDir(TID), appl_name, node_list[i], PID, TID, thid, EXT_MPIT);\n                                        sprintf (tmpline, \"%s named %s\\n\", tmpname, &thread_names_target[thid*THREAD_INFO_NAME_LEN]);\n                                        ret = write (fd, tmpline, strlen (tmpline));\n                                        if (ret != strlen (tmpline))\n                                        {\n                                                close (fd);\n                                                return -1;\n                                        }\n                                }\n\t\t\t}\n\t\t}\n\t\tclose (fd);\n\t}\n\n\tshfree_real( psync );\n\tshfree_real( pid );\n\tshfree_real( task_id );\n\tshfree_real( num_threads );\n\tshfree_real( all_pids );\n\tshfree_real( all_task_ids );\n\tshfree_real( all_num_threads );\n\tshfree_real( thread_names_source );\n\tshfree_real( thread_names_target );\n\treturn 0;\n}\n\n/****************************************\\\n ***          SYMBOLS HOOK-UP         ***\n\\****************************************/\n\nstatic void Get_OPENSHMEM_Hook_Points (int rank)\n{\n#if defined(PIC)\n# if defined(__APPLE__)\n# error \"Search for the appropriate library to load the symbols dynamically\"\n# else\n  void *lib = RTLD_NEXT;\n# endif /* __APPLE__ */\n\n  /* Obtain @ for start_pes */\n  start_pes_real = \n    (void (*)(int))\n    dlsym( lib, \"start_pes\" );\n  if (start_pes_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find start_pes in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_my_pe */\n  shmem_my_pe_real = \n    (int (*)(void))\n    dlsym( lib, \"shmem_my_pe\" );\n  if (shmem_my_pe_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_my_pe in DSOs!!\\n\");\n\n  /* Obtain @ for _my_pe */\n  _my_pe_real = \n    (int (*)(void))\n    dlsym( lib, \"_my_pe\" );\n  if (_my_pe_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find _my_pe in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_n_pes */\n  shmem_n_pes_real = \n    (int (*)(void))\n    dlsym( lib, \"shmem_n_pes\" );\n  if (shmem_n_pes_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_n_pes in DSOs!!\\n\");\n\n  /* Obtain @ for _num_pes */\n  _num_pes_real = \n    (int (*)(void))\n    dlsym( lib, \"_num_pes\" );\n  if (_num_pes_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find _num_pes in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_pe_accessible */\n  shmem_pe_accessible_real = \n    (int (*)(int))\n    dlsym( lib, \"shmem_pe_accessible\" );\n  if (shmem_pe_accessible_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_pe_accessible in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_addr_accessible */\n  shmem_addr_accessible_real = \n    (int (*)(void *, int))\n    dlsym( lib, \"shmem_addr_accessible\" );\n  if (shmem_addr_accessible_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_addr_accessible in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_ptr */\n  shmem_ptr_real = \n    (void * (*)(void *, int))\n    dlsym( lib, \"shmem_ptr\" );\n  if (shmem_ptr_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_ptr in DSOs!!\\n\");\n\n  /* Obtain @ for shmalloc */\n  shmalloc_real = \n    (void * (*)(size_t))\n    dlsym( lib, \"shmalloc\" );\n  if (shmalloc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmalloc in DSOs!!\\n\");\n\n  /* Obtain @ for shfree */\n  shfree_real = \n    (void (*)(void *))\n    dlsym( lib, \"shfree\" );\n  if (shfree_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shfree in DSOs!!\\n\");\n\n  /* Obtain @ for shrealloc */\n  shrealloc_real = \n    (void * (*)(void *, size_t))\n    dlsym( lib, \"shrealloc\" );\n  if (shrealloc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shrealloc in DSOs!!\\n\");\n\n  /* Obtain @ for shmemalign */\n  shmemalign_real = \n    (void * (*)(size_t, size_t))\n    dlsym( lib, \"shmemalign\" );\n  if (shmemalign_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmemalign in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_put */\n  shmem_double_put_real = \n    (void (*)(double *, const double *, size_t, int))\n    dlsym( lib, \"shmem_double_put\" );\n  if (shmem_double_put_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_put in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_put */\n  shmem_float_put_real = \n    (void (*)(float *, const float *, size_t, int))\n    dlsym( lib, \"shmem_float_put\" );\n  if (shmem_float_put_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_put in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_put */\n  shmem_int_put_real = \n    (void (*)(int *, const int *, size_t, int))\n    dlsym( lib, \"shmem_int_put\" );\n  if (shmem_int_put_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_put in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_put */\n  shmem_long_put_real = \n    (void (*)(long *, const long *, size_t, int))\n    dlsym( lib, \"shmem_long_put\" );\n  if (shmem_long_put_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_put in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longdouble_put */\n  shmem_longdouble_put_real = \n    (void (*)(long double *, const long double *, size_t, int))\n    dlsym( lib, \"shmem_longdouble_put\" );\n  if (shmem_longdouble_put_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longdouble_put in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_put */\n  shmem_longlong_put_real = \n    (void (*)(long long *, const long long *, size_t, int))\n    dlsym( lib, \"shmem_longlong_put\" );\n  if (shmem_longlong_put_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_put in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_put32 */\n  shmem_put32_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_put32\" );\n  if (shmem_put32_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_put32 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_put64 */\n  shmem_put64_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_put64\" );\n  if (shmem_put64_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_put64 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_put128 */\n  shmem_put128_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_put128\" );\n  if (shmem_put128_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_put128 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_putmem */\n  shmem_putmem_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_putmem\" );\n  if (shmem_putmem_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_putmem in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_put */\n  shmem_short_put_real = \n    (void (*)(short*, const short*, size_t, int))\n    dlsym( lib, \"shmem_short_put\" );\n  if (shmem_short_put_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_put in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_char_p */\n  shmem_char_p_real = \n    (void (*)(char *, char, int))\n    dlsym( lib, \"shmem_char_p\" );\n  if (shmem_char_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_char_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_p */\n  shmem_short_p_real = \n    (void (*)(short *, short, int))\n    dlsym( lib, \"shmem_short_p\" );\n  if (shmem_short_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_p */\n  shmem_int_p_real = \n    (void (*)(int *, int, int))\n    dlsym( lib, \"shmem_int_p\" );\n  if (shmem_int_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_p */\n  shmem_long_p_real = \n    (void (*)(long *, long, int))\n    dlsym( lib, \"shmem_long_p\" );\n  if (shmem_long_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_p */\n  shmem_longlong_p_real = \n    (void (*)(long long *, long long, int))\n    dlsym( lib, \"shmem_longlong_p\" );\n  if (shmem_longlong_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_p */\n  shmem_float_p_real = \n    (void (*)(float *, float, int))\n    dlsym( lib, \"shmem_float_p\" );\n  if (shmem_float_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_p */\n  shmem_double_p_real = \n    (void (*)(double *, double, int))\n    dlsym( lib, \"shmem_double_p\" );\n  if (shmem_double_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longdouble_p */\n  shmem_longdouble_p_real = \n    (void (*)(long double *, long double, int))\n    dlsym( lib, \"shmem_longdouble_p\" );\n  if (shmem_longdouble_p_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longdouble_p in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_iput */\n  shmem_double_iput_real = \n    (void (*)(double *, const double *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_double_iput\" );\n  if (shmem_double_iput_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_iput in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_iput */\n  shmem_float_iput_real = \n    (void (*)(float *, const float *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_float_iput\" );\n  if (shmem_float_iput_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_iput in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_iput */\n  shmem_int_iput_real = \n    (void (*)(int *, const int *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_int_iput\" );\n  if (shmem_int_iput_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_iput in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_iput32 */\n  shmem_iput32_real = \n    (void (*)(void *, const void *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_iput32\" );\n  if (shmem_iput32_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_iput32 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_iput64 */\n  shmem_iput64_real = \n    (void (*)(void *, const void *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_iput64\" );\n  if (shmem_iput64_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_iput64 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_iput128 */\n  shmem_iput128_real = \n    (void (*)(void *, const void *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_iput128\" );\n  if (shmem_iput128_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_iput128 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_iput */\n  shmem_long_iput_real = \n    (void (*)(long *, const long *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_long_iput\" );\n  if (shmem_long_iput_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_iput in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longdouble_iput */\n  shmem_longdouble_iput_real = \n    (void (*)(long double *, const long double *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_longdouble_iput\" );\n  if (shmem_longdouble_iput_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longdouble_iput in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_iput */\n  shmem_longlong_iput_real = \n    (void (*)(long long *, const long long *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_longlong_iput\" );\n  if (shmem_longlong_iput_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_iput in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_iput */\n  shmem_short_iput_real = \n    (void (*)(short *, const short *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_short_iput\" );\n  if (shmem_short_iput_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_iput in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_get */\n  shmem_double_get_real = \n    (void (*)(double *, const double *, size_t, int))\n    dlsym( lib, \"shmem_double_get\" );\n  if (shmem_double_get_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_get in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_get */\n  shmem_float_get_real = \n    (void (*)(float *, const float *, size_t, int))\n    dlsym( lib, \"shmem_float_get\" );\n  if (shmem_float_get_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_get in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_get32 */\n  shmem_get32_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_get32\" );\n  if (shmem_get32_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_get32 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_get64 */\n  shmem_get64_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_get64\" );\n  if (shmem_get64_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_get64 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_get128 */\n  shmem_get128_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_get128\" );\n  if (shmem_get128_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_get128 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_getmem */\n  shmem_getmem_real = \n    (void (*)(void *, const void *, size_t, int))\n    dlsym( lib, \"shmem_getmem\" );\n  if (shmem_getmem_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_getmem in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_get */\n  shmem_int_get_real = \n    (void (*)(int *, const int *, size_t, int))\n    dlsym( lib, \"shmem_int_get\" );\n  if (shmem_int_get_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_get in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_get */\n  shmem_long_get_real = \n    (void (*)(long *, const long *, size_t, int))\n    dlsym( lib, \"shmem_long_get\" );\n  if (shmem_long_get_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_get in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longdouble_get */\n  shmem_longdouble_get_real = \n    (void (*)(long double *, const long double *, size_t, int))\n    dlsym( lib, \"shmem_longdouble_get\" );\n  if (shmem_longdouble_get_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longdouble_get in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_get */\n  shmem_longlong_get_real = \n    (void (*)(long long *, const long long *, size_t, int))\n    dlsym( lib, \"shmem_longlong_get\" );\n  if (shmem_longlong_get_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_get in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_get */\n  shmem_short_get_real = \n    (void (*)(short *, const short *, size_t, int))\n    dlsym( lib, \"shmem_short_get\" );\n  if (shmem_short_get_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_get in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_char_g */\n  shmem_char_g_real = \n    (char (*)(char *, int))\n    dlsym( lib, \"shmem_char_g\" );\n  if (shmem_char_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_char_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_g */\n  shmem_short_g_real = \n    (short (*)(short *, int))\n    dlsym( lib, \"shmem_short_g\" );\n  if (shmem_short_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_g */\n  shmem_int_g_real = \n    (int (*)(int *, int))\n    dlsym( lib, \"shmem_int_g\" );\n  if (shmem_int_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_g */\n  shmem_long_g_real = \n    (long (*)(long *, int))\n    dlsym( lib, \"shmem_long_g\" );\n  if (shmem_long_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_g */\n  shmem_longlong_g_real = \n    (long long (*)(long long *, int))\n    dlsym( lib, \"shmem_longlong_g\" );\n  if (shmem_longlong_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_g */\n  shmem_float_g_real = \n    (float (*)(float *, int))\n    dlsym( lib, \"shmem_float_g\" );\n  if (shmem_float_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_g */\n  shmem_double_g_real = \n    (double (*)(double *, int))\n    dlsym( lib, \"shmem_double_g\" );\n  if (shmem_double_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longdouble_g */\n  shmem_longdouble_g_real = \n    (long double (*)(long double *, int))\n    dlsym( lib, \"shmem_longdouble_g\" );\n  if (shmem_longdouble_g_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longdouble_g in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_iget */\n  shmem_double_iget_real = \n    (void (*)(double *, const double *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_double_iget\" );\n  if (shmem_double_iget_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_iget in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_iget */\n  shmem_float_iget_real = \n    (void (*)(float *, const float *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_float_iget\" );\n  if (shmem_float_iget_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_iget in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_iget32 */\n  shmem_iget32_real = \n    (void (*)(void *, const void *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_iget32\" );\n  if (shmem_iget32_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_iget32 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_iget64 */\n  shmem_iget64_real = \n    (void (*)(void *, const void *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_iget64\" );\n  if (shmem_iget64_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_iget64 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_iget128 */\n  shmem_iget128_real = \n    (void (*)(void *, const void *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_iget128\" );\n  if (shmem_iget128_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_iget128 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_iget */\n  shmem_int_iget_real = \n    (void (*)(int *, const int *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_int_iget\" );\n  if (shmem_int_iget_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_iget in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_iget */\n  shmem_long_iget_real = \n    (void (*)(long *, const long *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_long_iget\" );\n  if (shmem_long_iget_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_iget in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longdouble_iget */\n  shmem_longdouble_iget_real = \n    (void (*)(long double *, const long double *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_longdouble_iget\" );\n  if (shmem_longdouble_iget_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longdouble_iget in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_iget */\n  shmem_longlong_iget_real = \n    (void (*)(long long *, const long long *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_longlong_iget\" );\n  if (shmem_longlong_iget_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_iget in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_iget */\n  shmem_short_iget_real = \n    (void (*)(short *, const short *, ptrdiff_t, ptrdiff_t, size_t, int))\n    dlsym( lib, \"shmem_short_iget\" );\n  if (shmem_short_iget_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_iget in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_add */\n  shmem_int_add_real = \n    (void (*)(int *, int, int))\n    dlsym( lib, \"shmem_int_add\" );\n  if (shmem_int_add_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_add in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_add */\n  shmem_long_add_real = \n    (void (*)(long *, long, int))\n    dlsym( lib, \"shmem_long_add\" );\n  if (shmem_long_add_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_add in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_add */\n  shmem_longlong_add_real = \n    (void (*)(long long *, long long, int))\n    dlsym( lib, \"shmem_longlong_add\" );\n  if (shmem_longlong_add_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_add in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_cswap */\n  shmem_int_cswap_real = \n    (int (*)(int *, int, int, int))\n    dlsym( lib, \"shmem_int_cswap\" );\n  if (shmem_int_cswap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_cswap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_cswap */\n  shmem_long_cswap_real = \n    (long (*)(long *, long, long, int))\n    dlsym( lib, \"shmem_long_cswap\" );\n  if (shmem_long_cswap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_cswap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_cswap */\n  shmem_longlong_cswap_real = \n    (long long (*)(long long *, long long, long long, int))\n    dlsym( lib, \"shmem_longlong_cswap\" );\n  if (shmem_longlong_cswap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_cswap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_swap */\n  shmem_double_swap_real = \n    (double (*)(double *, double, int))\n    dlsym( lib, \"shmem_double_swap\" );\n  if (shmem_double_swap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_swap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_swap */\n  shmem_float_swap_real = \n    (float (*)(float *, float, int))\n    dlsym( lib, \"shmem_float_swap\" );\n  if (shmem_float_swap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_swap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_swap */\n  shmem_int_swap_real = \n    (int (*)(int *, int, int))\n    dlsym( lib, \"shmem_int_swap\" );\n  if (shmem_int_swap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_swap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_swap */\n  shmem_long_swap_real = \n    (long (*)(long *, long, int))\n    dlsym( lib, \"shmem_long_swap\" );\n  if (shmem_long_swap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_swap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_swap */\n  shmem_longlong_swap_real = \n    (long long (*)(long long *, long long, int))\n    dlsym( lib, \"shmem_longlong_swap\" );\n  if (shmem_longlong_swap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_swap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_swap */\n  shmem_swap_real = \n    (long (*)(long *, long, int))\n    dlsym( lib, \"shmem_swap\" );\n  if (shmem_swap_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_swap in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_finc */\n  shmem_int_finc_real = \n    (int (*)(int *, int))\n    dlsym( lib, \"shmem_int_finc\" );\n  if (shmem_int_finc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_finc in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_finc */\n  shmem_long_finc_real = \n    (long (*)(long *, int))\n    dlsym( lib, \"shmem_long_finc\" );\n  if (shmem_long_finc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_finc in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_finc */\n  shmem_longlong_finc_real = \n    (long long (*)(long long *, int))\n    dlsym( lib, \"shmem_longlong_finc\" );\n  if (shmem_longlong_finc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_finc in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_inc */\n  shmem_int_inc_real = \n    (void (*)(int *, int))\n    dlsym( lib, \"shmem_int_inc\" );\n  if (shmem_int_inc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_inc in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_inc */\n  shmem_long_inc_real = \n    (void (*)(long *, int))\n    dlsym( lib, \"shmem_long_inc\" );\n  if (shmem_long_inc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_inc in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_inc */\n  shmem_longlong_inc_real = \n    (void (*)(long long *, int))\n    dlsym( lib, \"shmem_longlong_inc\" );\n  if (shmem_longlong_inc_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_inc in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_fadd */\n  shmem_int_fadd_real = \n    (int (*)(int *, int, int))\n    dlsym( lib, \"shmem_int_fadd\" );\n  if (shmem_int_fadd_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_fadd in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_fadd */\n  shmem_long_fadd_real = \n    (long (*)(long *, long, int))\n    dlsym( lib, \"shmem_long_fadd\" );\n  if (shmem_long_fadd_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_fadd in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_fadd */\n  shmem_longlong_fadd_real = \n    (long long (*)(long long *, long long, int))\n    dlsym( lib, \"shmem_longlong_fadd\" );\n  if (shmem_longlong_fadd_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_fadd in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_barrier_all */\n  shmem_barrier_all_real = \n    (void (*)(void))\n    dlsym( lib, \"shmem_barrier_all\" );\n  if (shmem_barrier_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_barrier_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_barrier */\n  shmem_barrier_real = \n    (void (*)(int, int, int, long *))\n    dlsym( lib, \"shmem_barrier\" );\n  if (shmem_barrier_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_barrier in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_broadcast32 */\n  shmem_broadcast32_real = \n    (void (*)(void *, const void *, size_t, int, int, int, int, long *))\n    dlsym( lib, \"shmem_broadcast32\" );\n  if (shmem_broadcast32_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_broadcast32 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_broadcast64 */\n  shmem_broadcast64_real = \n    (void (*)(void *, const void *, size_t, int, int, int, int, long *))\n    dlsym( lib, \"shmem_broadcast64\" );\n  if (shmem_broadcast64_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_broadcast64 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_collect32 */\n  shmem_collect32_real = \n    (void (*)(void *, const void *, size_t, int, int, int, long *))\n    dlsym( lib, \"shmem_collect32\" );\n  if (shmem_collect32_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_collect32 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_collect64 */\n  shmem_collect64_real = \n    (void (*)(void *, const void *, size_t, int, int, int, long *))\n    dlsym( lib, \"shmem_collect64\" );\n  if (shmem_collect64_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_collect64 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_fcollect32 */\n  shmem_fcollect32_real = \n    (void (*)(void *, const void *, size_t, int, int, int, long *))\n    dlsym( lib, \"shmem_fcollect32\" );\n  if (shmem_fcollect32_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_fcollect32 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_fcollect64 */\n  shmem_fcollect64_real = \n    (void (*)(void *, const void *, size_t, int, int, int, long *))\n    dlsym( lib, \"shmem_fcollect64\" );\n  if (shmem_fcollect64_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_fcollect64 in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_and_to_all */\n  shmem_int_and_to_all_real = \n    (void (*)(int *, int *, int, int, int, int, int *, long *))\n    dlsym( lib, \"shmem_int_and_to_all\" );\n  if (shmem_int_and_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_and_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_and_to_all */\n  shmem_long_and_to_all_real = \n    (void (*)(long *, long *, int, int, int, int, long *, long *))\n    dlsym( lib, \"shmem_long_and_to_all\" );\n  if (shmem_long_and_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_and_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_and_to_all */\n  shmem_longlong_and_to_all_real = \n    (void (*)(long long *, long long *, int, int, int, int, long long *, long *))\n    dlsym( lib, \"shmem_longlong_and_to_all\" );\n  if (shmem_longlong_and_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_and_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_and_to_all */\n  shmem_short_and_to_all_real = \n    (void (*)(short *, short *, int, int, int, int, short *, long *))\n    dlsym( lib, \"shmem_short_and_to_all\" );\n  if (shmem_short_and_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_and_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_max_to_all */\n  shmem_double_max_to_all_real = \n    (void (*)(double *, double *, int, int, int, int, double *, long *))\n    dlsym( lib, \"shmem_double_max_to_all\" );\n  if (shmem_double_max_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_max_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_float_max_to_all */\n  shmem_float_max_to_all_real = \n    (void (*)(float *, float *, int, int, int, int, float *, long *))\n    dlsym( lib, \"shmem_float_max_to_all\" );\n  if (shmem_float_max_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_float_max_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_max_to_all */\n  shmem_int_max_to_all_real = \n    (void (*)(int *, int *, int, int, int, int, int *, long *))\n    dlsym( lib, \"shmem_int_max_to_all\" );\n  if (shmem_int_max_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_max_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_max_to_all */\n  shmem_long_max_to_all_real = \n    (void (*)(long *, long *, int, int, int, int, long *, long *))\n    dlsym( lib, \"shmem_long_max_to_all\" );\n  if (shmem_long_max_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_max_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longdouble_max_to_all */\n  shmem_longdouble_max_to_all_real = \n    (void (*)(long double *, long double *, int, int, int, int, long double *, long *))\n    dlsym( lib, \"shmem_longdouble_max_to_all\" );\n  if (shmem_longdouble_max_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longdouble_max_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_max_to_all */\n  shmem_longlong_max_to_all_real = \n    (void (*)(long long *, long long *, int, int, int, int, long long *, long *))\n    dlsym( lib, \"shmem_longlong_max_to_all\" );\n  if (shmem_longlong_max_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_max_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_max_to_all */\n  shmem_short_max_to_all_real = \n    (void (*)(short *, short *, int, int, int, int, short *, long *))\n    dlsym( lib, \"shmem_short_max_to_all\" );\n  if (shmem_short_max_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_max_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_double_min_to_all */\n  shmem_double_min_to_all_real = \n    (void (*)(double *, double *, int, int, int, int, double *, long *))\n    dlsym( lib, \"shmem_double_min_to_all\" );\n  if (shmem_double_min_to_all_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_double_min_to_all in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_wait */\n  shmem_int_wait_real = \n    (void (*)(int *, int))\n    dlsym( lib, \"shmem_int_wait\" );\n  if (shmem_int_wait_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_wait in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_int_wait_until */\n  shmem_int_wait_until_real = \n    (void (*)(int *, int, int))\n    dlsym( lib, \"shmem_int_wait_until\" );\n  if (shmem_int_wait_until_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_int_wait_until in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_wait */\n  shmem_long_wait_real = \n    (void (*)(long *, long))\n    dlsym( lib, \"shmem_long_wait\" );\n  if (shmem_long_wait_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_wait in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_long_wait_until */\n  shmem_long_wait_until_real = \n    (void (*)(long *, int, long))\n    dlsym( lib, \"shmem_long_wait_until\" );\n  if (shmem_long_wait_until_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_long_wait_until in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_wait */\n  shmem_longlong_wait_real = \n    (void (*)(long long *, long long))\n    dlsym( lib, \"shmem_longlong_wait\" );\n  if (shmem_longlong_wait_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_wait in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_longlong_wait_until */\n  shmem_longlong_wait_until_real = \n    (void (*)(long long *, int, long long))\n    dlsym( lib, \"shmem_longlong_wait_until\" );\n  if (shmem_longlong_wait_until_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_longlong_wait_until in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_wait */\n  shmem_short_wait_real = \n    (void (*)(short *, short))\n    dlsym( lib, \"shmem_short_wait\" );\n  if (shmem_short_wait_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_wait in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_short_wait_until */\n  shmem_short_wait_until_real = \n    (void (*)(short *, int, short))\n    dlsym( lib, \"shmem_short_wait_until\" );\n  if (shmem_short_wait_until_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_short_wait_until in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_wait */\n  shmem_wait_real = \n    (void (*)(long *, long))\n    dlsym( lib, \"shmem_wait\" );\n  if (shmem_wait_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_wait in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_wait_until */\n  shmem_wait_until_real = \n    (void (*)(long *, int, long))\n    dlsym( lib, \"shmem_wait_until\" );\n  if (shmem_wait_until_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_wait_until in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_fence */\n  shmem_fence_real = \n    (void (*)(void))\n    dlsym( lib, \"shmem_fence\" );\n  if (shmem_fence_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_fence in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_quiet */\n  shmem_quiet_real = \n    (void (*)(void))\n    dlsym( lib, \"shmem_quiet\" );\n  if (shmem_quiet_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_quiet in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_clear_lock */\n  shmem_clear_lock_real = \n    (void (*)(long *))\n    dlsym( lib, \"shmem_clear_lock\" );\n  if (shmem_clear_lock_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_clear_lock in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_set_lock */\n  shmem_set_lock_real = \n    (void (*)(long *))\n    dlsym( lib, \"shmem_set_lock\" );\n  if (shmem_set_lock_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_set_lock in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_test_lock */\n  shmem_test_lock_real = \n    (int (*)(long *))\n    dlsym( lib, \"shmem_test_lock\" );\n  if (shmem_test_lock_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_test_lock in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_clear_cache_inv */\n  shmem_clear_cache_inv_real = \n    (void (*)(void))\n    dlsym( lib, \"shmem_clear_cache_inv\" );\n  if (shmem_clear_cache_inv_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_clear_cache_inv in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_set_cache_inv */\n  shmem_set_cache_inv_real = \n    (void (*)(void))\n    dlsym( lib, \"shmem_set_cache_inv\" );\n  if (shmem_set_cache_inv_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_set_cache_inv in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_clear_cache_line_inv */\n  shmem_clear_cache_line_inv_real = \n    (void (*)(void *))\n    dlsym( lib, \"shmem_clear_cache_line_inv\" );\n  if (shmem_clear_cache_line_inv_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_clear_cache_line_inv in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_set_cache_line_inv */\n  shmem_set_cache_line_inv_real = \n    (void (*)(void *))\n    dlsym( lib, \"shmem_set_cache_line_inv\" );\n  if (shmem_set_cache_line_inv_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_set_cache_line_inv in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_udcflush */\n  shmem_udcflush_real = \n    (void (*)(void))\n    dlsym( lib, \"shmem_udcflush\" );\n  if (shmem_udcflush_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_udcflush in DSOs!!\\n\");\n\n  /* Obtain @ for shmem_udcflush_line */\n  shmem_udcflush_line_real = \n    (void (*)(void *))\n    dlsym( lib, \"shmem_udcflush_line\" );\n  if (shmem_udcflush_line_real == NULL && rank == 0)\n    fprintf(stderr, PACKAGE_NAME\": Unable to find shmem_udcflush_line in DSOs!!\\n\");\n\n#endif /* PIC */\n}\n\nstatic void Initialize_Extrae_Stuff()\n{\n  iotimer_t shmem_init_start_time, shmem_init_end_time;\n\n  Extrae_set_ApplicationIsSHMEM (TRUE);\n  Extrae_Allocate_Task_Bitmap( Extrae_OPENSHMEM_NumTasks() );\n  Extrae_set_taskid_function( Extrae_OPENSHMEM_TaskID );\n  Extrae_set_numtasks_function( Extrae_OPENSHMEM_NumTasks );\n  Extrae_set_barrier_tasks_function ( Extrae_OPENSHMEM_Barrier );\n  Extrae_set_finalize_task_function ( Extrae_OPENSHMEM_Finalize );\n\n  if (Extrae_is_initialized_Wrapper() == EXTRAE_NOT_INITIALIZED)\n  {\n    int res;\n    char *config_file = getenv (\"EXTRAE_CONFIG_FILE\");\n  \n    if (config_file == NULL)\n    {\n      config_file = getenv (\"MPTRACE_CONFIG_FILE\");\n    }\n    \n    Extrae_set_initial_TASKID (TASKID);\n    Extrae_set_is_initialized (EXTRAE_INITIALIZED_SHMEM_INIT);\n    \n    if (config_file != NULL)\n    {\n      /* Obtain a localized copy *except for the master process* */\n      config_file = OPENSHMEM_Distribute_XML_File (TASKID, Extrae_get_num_tasks(), config_file);\n    }\n\n    /* Initialize the backend */\n    res = Backend_preInitialize (TASKID, Extrae_get_num_tasks(), config_file, FALSE);\n    if (!res) return;\n    \n    /* Remove the local copy only if we're not the master */\n    if (TASKID != 0)\n      unlink (config_file);\n    free (config_file);\n  }\n  else  \n  {\n    Backend_updateTaskID ();\n  }\n\n  OPENSHMEM_Gather_Nodes_Info();\n\n  if (Extrae_is_initialized_Wrapper() == EXTRAE_INITIALIZED_EXTRAE_INIT)\n    OPENSHMEM_remove_file_list (TRUE);\n\n  OPENSHMEM_Generate_Task_File_list (TasksNodes);\n\n  shmem_init_start_time = TIME;\n\n  Extrae_barrier_tasks();\n  Extrae_barrier_tasks();\n  Extrae_barrier_tasks(); \n\n  initTracingTime = shmem_init_end_time = TIME;\n\n  if (!Backend_postInitialize (TASKID, Extrae_get_num_tasks(), 0, shmem_init_start_time, shmem_init_end_time, TasksNodes))\n     return;\n}\n\n/****************************************\\\n ***           INJECTED CODE          ***\n\\****************************************/\n\nvoid start_pes (int npes)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %d\\n\", TASKID, npes);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: start_pes_real at %p\\n\", TASKID, start_pes_real);\n#endif\n\n  if (start_pes_real != NULL)\n  {\n    Backend_Enter_Instrumentation(2);\n    start_pes_real(npes);\n    atexit (shmem_finalize);\n    Initialize_Extrae_Stuff();\n    PROBE_start_pes_ENTRY(npes);\n    PROBE_start_pes_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error start_pes was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nint shmem_my_pe (void)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_my_pe_real at %p\\n\", TASKID, shmem_my_pe_real);\n#endif\n\n  if (shmem_my_pe_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_my_pe_ENTRY();\n    res = shmem_my_pe_real();\n    PROBE_shmem_my_pe_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_my_pe_real != NULL)\n  {\n    res = shmem_my_pe_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_my_pe was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint _my_pe (void)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: _my_pe_real at %p\\n\", TASKID, _my_pe_real);\n#endif\n\n  if (_my_pe_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE__my_pe_ENTRY();\n    res = _my_pe_real();\n    PROBE__my_pe_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (_my_pe_real != NULL)\n  {\n    res = _my_pe_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error _my_pe was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint shmem_n_pes (void)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_n_pes_real at %p\\n\", TASKID, shmem_n_pes_real);\n#endif\n\n  if (shmem_n_pes_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_n_pes_ENTRY();\n    res = shmem_n_pes_real();\n    PROBE_shmem_n_pes_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_n_pes_real != NULL)\n  {\n    res = shmem_n_pes_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_n_pes was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint _num_pes (void)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: _num_pes_real at %p\\n\", TASKID, _num_pes_real);\n#endif\n\n  if (_num_pes_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE__num_pes_ENTRY();\n    res = _num_pes_real();\n    PROBE__num_pes_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (_num_pes_real != NULL)\n  {\n    res = _num_pes_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error _num_pes was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint shmem_pe_accessible (int pe)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %d\\n\", TASKID, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_pe_accessible_real at %p\\n\", TASKID, shmem_pe_accessible_real);\n#endif\n\n  if (shmem_pe_accessible_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_pe_accessible_ENTRY(pe);\n    res = shmem_pe_accessible_real(pe);\n    PROBE_shmem_pe_accessible_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_pe_accessible_real != NULL)\n  {\n    res = shmem_pe_accessible_real(pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_pe_accessible was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint shmem_addr_accessible (void *addr, int pe)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_addr_accessible_real at %p\\n\", TASKID, shmem_addr_accessible_real);\n#endif\n\n  if (shmem_addr_accessible_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_addr_accessible_ENTRY(addr, pe);\n    res = shmem_addr_accessible_real(addr, pe);\n    PROBE_shmem_addr_accessible_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_addr_accessible_real != NULL)\n  {\n    res = shmem_addr_accessible_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_addr_accessible was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid * shmem_ptr (void *target, int pe)\n{\n  void * res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, target, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_ptr_real at %p\\n\", TASKID, shmem_ptr_real);\n#endif\n\n  if (shmem_ptr_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_ptr_ENTRY(target, pe);\n    res = shmem_ptr_real(target, pe);\n    PROBE_shmem_ptr_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_ptr_real != NULL)\n  {\n    res = shmem_ptr_real(target, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_ptr was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid * shmalloc (size_t size)\n{\n  void * res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %d\\n\", TASKID, size);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmalloc_real at %p\\n\", TASKID, shmalloc_real);\n#endif\n\n  if (shmalloc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmalloc_ENTRY(size);\n    res = shmalloc_real(size);\n    PROBE_shmalloc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmalloc_real != NULL)\n  {\n    res = shmalloc_real(size);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmalloc was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid shfree (void *ptr)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p\\n\", TASKID, ptr);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shfree_real at %p\\n\", TASKID, shfree_real);\n#endif\n\n  if (shfree_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shfree_ENTRY(ptr);\n    shfree_real(ptr);\n    PROBE_shfree_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shfree_real != NULL)\n  {\n    shfree_real(ptr);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shfree was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid * shrealloc (void *ptr, size_t size)\n{\n  void * res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, ptr, size);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shrealloc_real at %p\\n\", TASKID, shrealloc_real);\n#endif\n\n  if (shrealloc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shrealloc_ENTRY(ptr, size);\n    res = shrealloc_real(ptr, size);\n    PROBE_shrealloc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shrealloc_real != NULL)\n  {\n    res = shrealloc_real(ptr, size);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shrealloc was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid * shmemalign (size_t alignment, size_t size)\n{\n  void * res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %d %d\\n\", TASKID, alignment, size);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmemalign_real at %p\\n\", TASKID, shmemalign_real);\n#endif\n\n  if (shmemalign_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmemalign_ENTRY(alignment, size);\n    res = shmemalign_real(alignment, size);\n    PROBE_shmemalign_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmemalign_real != NULL)\n  {\n    res = shmemalign_real(alignment, size);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmemalign was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid shmem_double_put (double *target, const double *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_put_real at %p\\n\", TASKID, shmem_double_put_real);\n#endif\n\n  if (shmem_double_put_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_put_ENTRY(target, source, len, pe);\n    shmem_double_put_real(target, source, len, pe);\n    PROBE_shmem_double_put_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_put_real != NULL)\n  {\n    shmem_double_put_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_put was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_float_put (float *target, const float *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_put_real at %p\\n\", TASKID, shmem_float_put_real);\n#endif\n\n  if (shmem_float_put_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_put_ENTRY(target, source, len, pe);\n    shmem_float_put_real(target, source, len, pe);\n    PROBE_shmem_float_put_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_put_real != NULL)\n  {\n    shmem_float_put_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_put was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_put (int *target, const int *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_put_real at %p\\n\", TASKID, shmem_int_put_real);\n#endif\n\n  if (shmem_int_put_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_put_ENTRY(target, source, len, pe);\n    shmem_int_put_real(target, source, len, pe);\n    PROBE_shmem_int_put_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_put_real != NULL)\n  {\n    shmem_int_put_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_put was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_put (long *target, const long *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_put_real at %p\\n\", TASKID, shmem_long_put_real);\n#endif\n\n  if (shmem_long_put_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_put_ENTRY(target, source, len, pe);\n    shmem_long_put_real(target, source, len, pe);\n    PROBE_shmem_long_put_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_put_real != NULL)\n  {\n    shmem_long_put_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_put was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longdouble_put (long double *target, const long double *source, size_t len,int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longdouble_put_real at %p\\n\", TASKID, shmem_longdouble_put_real);\n#endif\n\n  if (shmem_longdouble_put_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longdouble_put_ENTRY(target, source, len, pe);\n    shmem_longdouble_put_real(target, source, len, pe);\n    PROBE_shmem_longdouble_put_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longdouble_put_real != NULL)\n  {\n    shmem_longdouble_put_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longdouble_put was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_put (long long *target, const long long *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_put_real at %p\\n\", TASKID, shmem_longlong_put_real);\n#endif\n\n  if (shmem_longlong_put_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_put_ENTRY(target, source, len, pe);\n    shmem_longlong_put_real(target, source, len, pe);\n    PROBE_shmem_longlong_put_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_put_real != NULL)\n  {\n    shmem_longlong_put_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_put was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_put32 (void *target, const void *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_put32_real at %p\\n\", TASKID, shmem_put32_real);\n#endif\n\n  if (shmem_put32_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_put32_ENTRY(target, source, len, pe);\n    shmem_put32_real(target, source, len, pe);\n    PROBE_shmem_put32_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_put32_real != NULL)\n  {\n    shmem_put32_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_put32 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_put64 (void *target, const void *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_put64_real at %p\\n\", TASKID, shmem_put64_real);\n#endif\n\n  if (shmem_put64_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_put64_ENTRY(target, source, len, pe);\n    shmem_put64_real(target, source, len, pe);\n    PROBE_shmem_put64_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_put64_real != NULL)\n  {\n    shmem_put64_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_put64 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_put128 (void *target, const void *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_put128_real at %p\\n\", TASKID, shmem_put128_real);\n#endif\n\n  if (shmem_put128_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_put128_ENTRY(target, source, len, pe);\n    shmem_put128_real(target, source, len, pe);\n    PROBE_shmem_put128_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_put128_real != NULL)\n  {\n    shmem_put128_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_put128 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_putmem (void *target, const void *source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_putmem_real at %p\\n\", TASKID, shmem_putmem_real);\n#endif\n\n  if (shmem_putmem_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_putmem_ENTRY(target, source, len, pe);\n    shmem_putmem_real(target, source, len, pe);\n    PROBE_shmem_putmem_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_putmem_real != NULL)\n  {\n    shmem_putmem_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_putmem was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_put (short*target, const short*source, size_t len, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, len, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_put_real at %p\\n\", TASKID, shmem_short_put_real);\n#endif\n\n  if (shmem_short_put_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_put_ENTRY(target, source, len, pe);\n    shmem_short_put_real(target, source, len, pe);\n    PROBE_shmem_short_put_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_put_real != NULL)\n  {\n    shmem_short_put_real(target, source, len, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_put was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_char_p (char *addr, char value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %c %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_char_p_real at %p\\n\", TASKID, shmem_char_p_real);\n#endif\n\n  if (shmem_char_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_char_p_ENTRY(addr, value, pe);\n    shmem_char_p_real(addr, value, pe);\n    PROBE_shmem_char_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_char_p_real != NULL)\n  {\n    shmem_char_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_char_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_p (short *addr, short value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %h %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_p_real at %p\\n\", TASKID, shmem_short_p_real);\n#endif\n\n  if (shmem_short_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_p_ENTRY(addr, value, pe);\n    shmem_short_p_real(addr, value, pe);\n    PROBE_shmem_short_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_p_real != NULL)\n  {\n    shmem_short_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_p (int *addr, int value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_p_real at %p\\n\", TASKID, shmem_int_p_real);\n#endif\n\n  if (shmem_int_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_p_ENTRY(addr, value, pe);\n    shmem_int_p_real(addr, value, pe);\n    PROBE_shmem_int_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_p_real != NULL)\n  {\n    shmem_int_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_p (long *addr, long value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_p_real at %p\\n\", TASKID, shmem_long_p_real);\n#endif\n\n  if (shmem_long_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_p_ENTRY(addr, value, pe);\n    shmem_long_p_real(addr, value, pe);\n    PROBE_shmem_long_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_p_real != NULL)\n  {\n    shmem_long_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_p (long long *addr, long long value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lld %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_p_real at %p\\n\", TASKID, shmem_longlong_p_real);\n#endif\n\n  if (shmem_longlong_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_p_ENTRY(addr, value, pe);\n    shmem_longlong_p_real(addr, value, pe);\n    PROBE_shmem_longlong_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_p_real != NULL)\n  {\n    shmem_longlong_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_float_p (float *addr, float value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %f %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_p_real at %p\\n\", TASKID, shmem_float_p_real);\n#endif\n\n  if (shmem_float_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_p_ENTRY(addr, value, pe);\n    shmem_float_p_real(addr, value, pe);\n    PROBE_shmem_float_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_p_real != NULL)\n  {\n    shmem_float_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_double_p (double *addr, double value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lf %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_p_real at %p\\n\", TASKID, shmem_double_p_real);\n#endif\n\n  if (shmem_double_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_p_ENTRY(addr, value, pe);\n    shmem_double_p_real(addr, value, pe);\n    PROBE_shmem_double_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_p_real != NULL)\n  {\n    shmem_double_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longdouble_p (long double *addr, long double value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lf %d\\n\", TASKID, addr, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longdouble_p_real at %p\\n\", TASKID, shmem_longdouble_p_real);\n#endif\n\n  if (shmem_longdouble_p_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longdouble_p_ENTRY(addr, value, pe);\n    shmem_longdouble_p_real(addr, value, pe);\n    PROBE_shmem_longdouble_p_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longdouble_p_real != NULL)\n  {\n    shmem_longdouble_p_real(addr, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longdouble_p was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_double_iput (double *target, const double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_iput_real at %p\\n\", TASKID, shmem_double_iput_real);\n#endif\n\n  if (shmem_double_iput_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_iput_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_double_iput_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_double_iput_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_iput_real != NULL)\n  {\n    shmem_double_iput_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_iput was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_float_iput (float *target, const float *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_iput_real at %p\\n\", TASKID, shmem_float_iput_real);\n#endif\n\n  if (shmem_float_iput_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_iput_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_float_iput_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_float_iput_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_iput_real != NULL)\n  {\n    shmem_float_iput_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_iput was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_iput (int *target, const int *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_iput_real at %p\\n\", TASKID, shmem_int_iput_real);\n#endif\n\n  if (shmem_int_iput_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_iput_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_int_iput_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_int_iput_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_iput_real != NULL)\n  {\n    shmem_int_iput_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_iput was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_iput32 (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_iput32_real at %p\\n\", TASKID, shmem_iput32_real);\n#endif\n\n  if (shmem_iput32_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_iput32_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_iput32_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_iput32_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_iput32_real != NULL)\n  {\n    shmem_iput32_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_iput32 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_iput64 (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_iput64_real at %p\\n\", TASKID, shmem_iput64_real);\n#endif\n\n  if (shmem_iput64_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_iput64_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_iput64_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_iput64_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_iput64_real != NULL)\n  {\n    shmem_iput64_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_iput64 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_iput128 (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_iput128_real at %p\\n\", TASKID, shmem_iput128_real);\n#endif\n\n  if (shmem_iput128_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_iput128_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_iput128_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_iput128_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_iput128_real != NULL)\n  {\n    shmem_iput128_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_iput128 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_iput (long *target, const long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_iput_real at %p\\n\", TASKID, shmem_long_iput_real);\n#endif\n\n  if (shmem_long_iput_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_iput_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_long_iput_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_long_iput_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_iput_real != NULL)\n  {\n    shmem_long_iput_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_iput was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longdouble_iput (long double *target, const long double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longdouble_iput_real at %p\\n\", TASKID, shmem_longdouble_iput_real);\n#endif\n\n  if (shmem_longdouble_iput_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longdouble_iput_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_longdouble_iput_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_longdouble_iput_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longdouble_iput_real != NULL)\n  {\n    shmem_longdouble_iput_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longdouble_iput was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_iput (long long *target, const long long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_iput_real at %p\\n\", TASKID, shmem_longlong_iput_real);\n#endif\n\n  if (shmem_longlong_iput_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_iput_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_longlong_iput_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_longlong_iput_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_iput_real != NULL)\n  {\n    shmem_longlong_iput_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_iput was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_iput (short *target, const short *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_iput_real at %p\\n\", TASKID, shmem_short_iput_real);\n#endif\n\n  if (shmem_short_iput_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_iput_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_short_iput_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_short_iput_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_iput_real != NULL)\n  {\n    shmem_short_iput_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_iput was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_double_get (double *target, const double *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_get_real at %p\\n\", TASKID, shmem_double_get_real);\n#endif\n\n  if (shmem_double_get_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_get_ENTRY(target, source, nelems, pe);\n    shmem_double_get_real(target, source, nelems, pe);\n    PROBE_shmem_double_get_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_get_real != NULL)\n  {\n    shmem_double_get_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_get was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_float_get (float *target, const float *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_get_real at %p\\n\", TASKID, shmem_float_get_real);\n#endif\n\n  if (shmem_float_get_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_get_ENTRY(target, source, nelems, pe);\n    shmem_float_get_real(target, source, nelems, pe);\n    PROBE_shmem_float_get_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_get_real != NULL)\n  {\n    shmem_float_get_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_get was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_get32 (void *target, const void *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_get32_real at %p\\n\", TASKID, shmem_get32_real);\n#endif\n\n  if (shmem_get32_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_get32_ENTRY(target, source, nelems, pe);\n    shmem_get32_real(target, source, nelems, pe);\n    PROBE_shmem_get32_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_get32_real != NULL)\n  {\n    shmem_get32_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_get32 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_get64 (void *target, const void *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_get64_real at %p\\n\", TASKID, shmem_get64_real);\n#endif\n\n  if (shmem_get64_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_get64_ENTRY(target, source, nelems, pe);\n    shmem_get64_real(target, source, nelems, pe);\n    PROBE_shmem_get64_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_get64_real != NULL)\n  {\n    shmem_get64_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_get64 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_get128 (void *target, const void *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_get128_real at %p\\n\", TASKID, shmem_get128_real);\n#endif\n\n  if (shmem_get128_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_get128_ENTRY(target, source, nelems, pe);\n    shmem_get128_real(target, source, nelems, pe);\n    PROBE_shmem_get128_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_get128_real != NULL)\n  {\n    shmem_get128_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_get128 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_getmem (void *target, const void *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_getmem_real at %p\\n\", TASKID, shmem_getmem_real);\n#endif\n\n  if (shmem_getmem_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_getmem_ENTRY(target, source, nelems, pe);\n    shmem_getmem_real(target, source, nelems, pe);\n    PROBE_shmem_getmem_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_getmem_real != NULL)\n  {\n    shmem_getmem_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_getmem was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_get (int *target, const int *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_get_real at %p\\n\", TASKID, shmem_int_get_real);\n#endif\n\n  if (shmem_int_get_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_get_ENTRY(target, source, nelems, pe);\n    shmem_int_get_real(target, source, nelems, pe);\n    PROBE_shmem_int_get_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_get_real != NULL)\n  {\n    shmem_int_get_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_get was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_get (long *target, const long *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_get_real at %p\\n\", TASKID, shmem_long_get_real);\n#endif\n\n  if (shmem_long_get_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_get_ENTRY(target, source, nelems, pe);\n    shmem_long_get_real(target, source, nelems, pe);\n    PROBE_shmem_long_get_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_get_real != NULL)\n  {\n    shmem_long_get_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_get was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longdouble_get (long double *target, const long double *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longdouble_get_real at %p\\n\", TASKID, shmem_longdouble_get_real);\n#endif\n\n  if (shmem_longdouble_get_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longdouble_get_ENTRY(target, source, nelems, pe);\n    shmem_longdouble_get_real(target, source, nelems, pe);\n    PROBE_shmem_longdouble_get_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longdouble_get_real != NULL)\n  {\n    shmem_longdouble_get_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longdouble_get was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_get (long long *target, const long long *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_get_real at %p\\n\", TASKID, shmem_longlong_get_real);\n#endif\n\n  if (shmem_longlong_get_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_get_ENTRY(target, source, nelems, pe);\n    shmem_longlong_get_real(target, source, nelems, pe);\n    PROBE_shmem_longlong_get_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_get_real != NULL)\n  {\n    shmem_longlong_get_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_get was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_get (short *target, const short *source, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d\\n\", TASKID, target, source, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_get_real at %p\\n\", TASKID, shmem_short_get_real);\n#endif\n\n  if (shmem_short_get_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_get_ENTRY(target, source, nelems, pe);\n    shmem_short_get_real(target, source, nelems, pe);\n    PROBE_shmem_short_get_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_get_real != NULL)\n  {\n    shmem_short_get_real(target, source, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_get was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nchar shmem_char_g (char *addr, int pe)\n{\n  char res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_char_g_real at %p\\n\", TASKID, shmem_char_g_real);\n#endif\n\n  if (shmem_char_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_char_g_ENTRY(addr, pe);\n    res = shmem_char_g_real(addr, pe);\n    PROBE_shmem_char_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_char_g_real != NULL)\n  {\n    res = shmem_char_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_char_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nshort shmem_short_g (short *addr, int pe)\n{\n  short res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_g_real at %p\\n\", TASKID, shmem_short_g_real);\n#endif\n\n  if (shmem_short_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_g_ENTRY(addr, pe);\n    res = shmem_short_g_real(addr, pe);\n    PROBE_shmem_short_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_g_real != NULL)\n  {\n    res = shmem_short_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint shmem_int_g (int *addr, int pe)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_g_real at %p\\n\", TASKID, shmem_int_g_real);\n#endif\n\n  if (shmem_int_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_g_ENTRY(addr, pe);\n    res = shmem_int_g_real(addr, pe);\n    PROBE_shmem_int_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_g_real != NULL)\n  {\n    res = shmem_int_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong shmem_long_g (long *addr, int pe)\n{\n  long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_g_real at %p\\n\", TASKID, shmem_long_g_real);\n#endif\n\n  if (shmem_long_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_g_ENTRY(addr, pe);\n    res = shmem_long_g_real(addr, pe);\n    PROBE_shmem_long_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_g_real != NULL)\n  {\n    res = shmem_long_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong long shmem_longlong_g (long long *addr, int pe)\n{\n  long long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_g_real at %p\\n\", TASKID, shmem_longlong_g_real);\n#endif\n\n  if (shmem_longlong_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_g_ENTRY(addr, pe);\n    res = shmem_longlong_g_real(addr, pe);\n    PROBE_shmem_longlong_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_g_real != NULL)\n  {\n    res = shmem_longlong_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nfloat shmem_float_g (float *addr, int pe)\n{\n  float res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_g_real at %p\\n\", TASKID, shmem_float_g_real);\n#endif\n\n  if (shmem_float_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_g_ENTRY(addr, pe);\n    res = shmem_float_g_real(addr, pe);\n    PROBE_shmem_float_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_g_real != NULL)\n  {\n    res = shmem_float_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\ndouble shmem_double_g (double *addr, int pe)\n{\n  double res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_g_real at %p\\n\", TASKID, shmem_double_g_real);\n#endif\n\n  if (shmem_double_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_g_ENTRY(addr, pe);\n    res = shmem_double_g_real(addr, pe);\n    PROBE_shmem_double_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_g_real != NULL)\n  {\n    res = shmem_double_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong double shmem_longdouble_g (long double *addr, int pe)\n{\n  long double res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, addr, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longdouble_g_real at %p\\n\", TASKID, shmem_longdouble_g_real);\n#endif\n\n  if (shmem_longdouble_g_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longdouble_g_ENTRY(addr, pe);\n    res = shmem_longdouble_g_real(addr, pe);\n    PROBE_shmem_longdouble_g_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longdouble_g_real != NULL)\n  {\n    res = shmem_longdouble_g_real(addr, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longdouble_g was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid shmem_double_iget (double *target, const double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_iget_real at %p\\n\", TASKID, shmem_double_iget_real);\n#endif\n\n  if (shmem_double_iget_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_iget_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_double_iget_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_double_iget_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_iget_real != NULL)\n  {\n    shmem_double_iget_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_iget was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_float_iget (float *target, const float *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_iget_real at %p\\n\", TASKID, shmem_float_iget_real);\n#endif\n\n  if (shmem_float_iget_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_iget_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_float_iget_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_float_iget_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_iget_real != NULL)\n  {\n    shmem_float_iget_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_iget was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_iget32 (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_iget32_real at %p\\n\", TASKID, shmem_iget32_real);\n#endif\n\n  if (shmem_iget32_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_iget32_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_iget32_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_iget32_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_iget32_real != NULL)\n  {\n    shmem_iget32_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_iget32 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_iget64 (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_iget64_real at %p\\n\", TASKID, shmem_iget64_real);\n#endif\n\n  if (shmem_iget64_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_iget64_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_iget64_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_iget64_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_iget64_real != NULL)\n  {\n    shmem_iget64_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_iget64 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_iget128 (void *target, const void *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_iget128_real at %p\\n\", TASKID, shmem_iget128_real);\n#endif\n\n  if (shmem_iget128_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_iget128_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_iget128_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_iget128_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_iget128_real != NULL)\n  {\n    shmem_iget128_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_iget128 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_iget (int *target, const int *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_iget_real at %p\\n\", TASKID, shmem_int_iget_real);\n#endif\n\n  if (shmem_int_iget_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_iget_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_int_iget_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_int_iget_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_iget_real != NULL)\n  {\n    shmem_int_iget_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_iget was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_iget (long *target, const long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_iget_real at %p\\n\", TASKID, shmem_long_iget_real);\n#endif\n\n  if (shmem_long_iget_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_iget_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_long_iget_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_long_iget_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_iget_real != NULL)\n  {\n    shmem_long_iget_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_iget was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longdouble_iget (long double *target, const long double *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longdouble_iget_real at %p\\n\", TASKID, shmem_longdouble_iget_real);\n#endif\n\n  if (shmem_longdouble_iget_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longdouble_iget_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_longdouble_iget_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_longdouble_iget_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longdouble_iget_real != NULL)\n  {\n    shmem_longdouble_iget_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longdouble_iget was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_iget (long long *target, const long long *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_iget_real at %p\\n\", TASKID, shmem_longlong_iget_real);\n#endif\n\n  if (shmem_longlong_iget_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_iget_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_longlong_iget_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_longlong_iget_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_iget_real != NULL)\n  {\n    shmem_longlong_iget_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_iget was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_iget (short *target, const short *source, ptrdiff_t tst, ptrdiff_t sst, size_t nelems, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %p %p %d %d\\n\", TASKID, target, source, tst, sst, nelems, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_iget_real at %p\\n\", TASKID, shmem_short_iget_real);\n#endif\n\n  if (shmem_short_iget_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_iget_ENTRY(target, source, tst, sst, nelems, pe);\n    shmem_short_iget_real(target, source, tst, sst, nelems, pe);\n    PROBE_shmem_short_iget_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_iget_real != NULL)\n  {\n    shmem_short_iget_real(target, source, tst, sst, nelems, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_iget was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_add (int *target, int value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_add_real at %p\\n\", TASKID, shmem_int_add_real);\n#endif\n\n  if (shmem_int_add_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_add_ENTRY(target, value, pe);\n    shmem_int_add_real(target, value, pe);\n    PROBE_shmem_int_add_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_add_real != NULL)\n  {\n    shmem_int_add_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_add was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_add (long *target, long value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_add_real at %p\\n\", TASKID, shmem_long_add_real);\n#endif\n\n  if (shmem_long_add_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_add_ENTRY(target, value, pe);\n    shmem_long_add_real(target, value, pe);\n    PROBE_shmem_long_add_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_add_real != NULL)\n  {\n    shmem_long_add_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_add was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_add (long long *target, long long value, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lld %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_add_real at %p\\n\", TASKID, shmem_longlong_add_real);\n#endif\n\n  if (shmem_longlong_add_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_add_ENTRY(target, value, pe);\n    shmem_longlong_add_real(target, value, pe);\n    PROBE_shmem_longlong_add_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_add_real != NULL)\n  {\n    shmem_longlong_add_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_add was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nint shmem_int_cswap (int *target, int cond, int value, int pe)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %d %d\\n\", TASKID, target, cond, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_cswap_real at %p\\n\", TASKID, shmem_int_cswap_real);\n#endif\n\n  if (shmem_int_cswap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_cswap_ENTRY(target, cond, value, pe);\n    res = shmem_int_cswap_real(target, cond, value, pe);\n    PROBE_shmem_int_cswap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_cswap_real != NULL)\n  {\n    res = shmem_int_cswap_real(target, cond, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_cswap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong shmem_long_cswap (long *target, long cond, long value, int pe)\n{\n  long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld %ld %d\\n\", TASKID, target, cond, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_cswap_real at %p\\n\", TASKID, shmem_long_cswap_real);\n#endif\n\n  if (shmem_long_cswap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_cswap_ENTRY(target, cond, value, pe);\n    res = shmem_long_cswap_real(target, cond, value, pe);\n    PROBE_shmem_long_cswap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_cswap_real != NULL)\n  {\n    res = shmem_long_cswap_real(target, cond, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_cswap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong long shmem_longlong_cswap (long long *target, long long cond, long long value, int pe)\n{\n  long long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lld %lld %d\\n\", TASKID, target, cond, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_cswap_real at %p\\n\", TASKID, shmem_longlong_cswap_real);\n#endif\n\n  if (shmem_longlong_cswap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_cswap_ENTRY(target, cond, value, pe);\n    res = shmem_longlong_cswap_real(target, cond, value, pe);\n    PROBE_shmem_longlong_cswap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_cswap_real != NULL)\n  {\n    res = shmem_longlong_cswap_real(target, cond, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_cswap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\ndouble shmem_double_swap (double *target, double value, int pe)\n{\n  double res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lf %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_swap_real at %p\\n\", TASKID, shmem_double_swap_real);\n#endif\n\n  if (shmem_double_swap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_swap_ENTRY(target, value, pe);\n    res = shmem_double_swap_real(target, value, pe);\n    PROBE_shmem_double_swap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_swap_real != NULL)\n  {\n    res = shmem_double_swap_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_swap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nfloat shmem_float_swap (float *target, float value, int pe)\n{\n  float res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %f %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_swap_real at %p\\n\", TASKID, shmem_float_swap_real);\n#endif\n\n  if (shmem_float_swap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_swap_ENTRY(target, value, pe);\n    res = shmem_float_swap_real(target, value, pe);\n    PROBE_shmem_float_swap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_swap_real != NULL)\n  {\n    res = shmem_float_swap_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_swap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint shmem_int_swap (int *target, int value, int pe)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_swap_real at %p\\n\", TASKID, shmem_int_swap_real);\n#endif\n\n  if (shmem_int_swap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_swap_ENTRY(target, value, pe);\n    res = shmem_int_swap_real(target, value, pe);\n    PROBE_shmem_int_swap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_swap_real != NULL)\n  {\n    res = shmem_int_swap_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_swap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong shmem_long_swap (long *target, long value, int pe)\n{\n  long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_swap_real at %p\\n\", TASKID, shmem_long_swap_real);\n#endif\n\n  if (shmem_long_swap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_swap_ENTRY(target, value, pe);\n    res = shmem_long_swap_real(target, value, pe);\n    PROBE_shmem_long_swap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_swap_real != NULL)\n  {\n    res = shmem_long_swap_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_swap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong long shmem_longlong_swap (long long *target, long long value, int pe)\n{\n  long long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lld %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_swap_real at %p\\n\", TASKID, shmem_longlong_swap_real);\n#endif\n\n  if (shmem_longlong_swap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_swap_ENTRY(target, value, pe);\n    res = shmem_longlong_swap_real(target, value, pe);\n    PROBE_shmem_longlong_swap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_swap_real != NULL)\n  {\n    res = shmem_longlong_swap_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_swap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong shmem_swap (long *target, long value, int pe)\n{\n  long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_swap_real at %p\\n\", TASKID, shmem_swap_real);\n#endif\n\n  if (shmem_swap_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_swap_ENTRY(target, value, pe);\n    res = shmem_swap_real(target, value, pe);\n    PROBE_shmem_swap_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_swap_real != NULL)\n  {\n    res = shmem_swap_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_swap was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nint shmem_int_finc (int *target, int pe)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, target, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_finc_real at %p\\n\", TASKID, shmem_int_finc_real);\n#endif\n\n  if (shmem_int_finc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_finc_ENTRY(target, pe);\n    res = shmem_int_finc_real(target, pe);\n    PROBE_shmem_int_finc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_finc_real != NULL)\n  {\n    res = shmem_int_finc_real(target, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_finc was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong shmem_long_finc (long *target, int pe)\n{\n  long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, target, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_finc_real at %p\\n\", TASKID, shmem_long_finc_real);\n#endif\n\n  if (shmem_long_finc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_finc_ENTRY(target, pe);\n    res = shmem_long_finc_real(target, pe);\n    PROBE_shmem_long_finc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_finc_real != NULL)\n  {\n    res = shmem_long_finc_real(target, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_finc was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong long shmem_longlong_finc (long long *target, int pe)\n{\n  long long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, target, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_finc_real at %p\\n\", TASKID, shmem_longlong_finc_real);\n#endif\n\n  if (shmem_longlong_finc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_finc_ENTRY(target, pe);\n    res = shmem_longlong_finc_real(target, pe);\n    PROBE_shmem_longlong_finc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_finc_real != NULL)\n  {\n    res = shmem_longlong_finc_real(target, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_finc was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid shmem_int_inc (int *target, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, target, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_inc_real at %p\\n\", TASKID, shmem_int_inc_real);\n#endif\n\n  if (shmem_int_inc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_inc_ENTRY(target, pe);\n    shmem_int_inc_real(target, pe);\n    PROBE_shmem_int_inc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_inc_real != NULL)\n  {\n    shmem_int_inc_real(target, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_inc was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_inc (long *target, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, target, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_inc_real at %p\\n\", TASKID, shmem_long_inc_real);\n#endif\n\n  if (shmem_long_inc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_inc_ENTRY(target, pe);\n    shmem_long_inc_real(target, pe);\n    PROBE_shmem_long_inc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_inc_real != NULL)\n  {\n    shmem_long_inc_real(target, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_inc was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_inc (long long *target, int pe)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, target, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_inc_real at %p\\n\", TASKID, shmem_longlong_inc_real);\n#endif\n\n  if (shmem_longlong_inc_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_inc_ENTRY(target, pe);\n    shmem_longlong_inc_real(target, pe);\n    PROBE_shmem_longlong_inc_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_inc_real != NULL)\n  {\n    shmem_longlong_inc_real(target, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_inc was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nint shmem_int_fadd (int *target, int value, int pe)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_fadd_real at %p\\n\", TASKID, shmem_int_fadd_real);\n#endif\n\n  if (shmem_int_fadd_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_fadd_ENTRY(target, value, pe);\n    res = shmem_int_fadd_real(target, value, pe);\n    PROBE_shmem_int_fadd_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_fadd_real != NULL)\n  {\n    res = shmem_int_fadd_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_fadd was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong shmem_long_fadd (long *target, long value, int pe)\n{\n  long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_fadd_real at %p\\n\", TASKID, shmem_long_fadd_real);\n#endif\n\n  if (shmem_long_fadd_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_fadd_ENTRY(target, value, pe);\n    res = shmem_long_fadd_real(target, value, pe);\n    PROBE_shmem_long_fadd_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_fadd_real != NULL)\n  {\n    res = shmem_long_fadd_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_fadd was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nlong long shmem_longlong_fadd (long long *target, long long value, int pe)\n{\n  long long res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lld %d\\n\", TASKID, target, value, pe);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_fadd_real at %p\\n\", TASKID, shmem_longlong_fadd_real);\n#endif\n\n  if (shmem_longlong_fadd_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_fadd_ENTRY(target, value, pe);\n    res = shmem_longlong_fadd_real(target, value, pe);\n    PROBE_shmem_longlong_fadd_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_fadd_real != NULL)\n  {\n    res = shmem_longlong_fadd_real(target, value, pe);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_fadd was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid shmem_barrier_all (void)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_barrier_all_real at %p\\n\", TASKID, shmem_barrier_all_real);\n#endif\n\n  if (shmem_barrier_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_barrier_all_ENTRY();\n    shmem_barrier_all_real();\n    PROBE_shmem_barrier_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_barrier_all_real != NULL)\n  {\n    shmem_barrier_all_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_barrier_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_barrier (int PE_start, int logPE_stride, int PE_size, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %d %d %d %p\\n\", TASKID, PE_start, logPE_stride, PE_size, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_barrier_real at %p\\n\", TASKID, shmem_barrier_real);\n#endif\n\n  if (shmem_barrier_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_barrier_ENTRY(PE_start, logPE_stride, PE_size, pSync);\n    shmem_barrier_real(PE_start, logPE_stride, PE_size, pSync);\n    PROBE_shmem_barrier_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_barrier_real != NULL)\n  {\n    shmem_barrier_real(PE_start, logPE_stride, PE_size, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_barrier was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_broadcast32 (void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %d %p\\n\", TASKID, target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_broadcast32_real at %p\\n\", TASKID, shmem_broadcast32_real);\n#endif\n\n  if (shmem_broadcast32_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_broadcast32_ENTRY(target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n    shmem_broadcast32_real(target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n    PROBE_shmem_broadcast32_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_broadcast32_real != NULL)\n  {\n    shmem_broadcast32_real(target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_broadcast32 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_broadcast64 (void *target, const void *source, size_t nlong, int PE_root, int PE_start, int logPE_stride, int PE_size, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %d %p\\n\", TASKID, target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_broadcast64_real at %p\\n\", TASKID, shmem_broadcast64_real);\n#endif\n\n  if (shmem_broadcast64_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_broadcast64_ENTRY(target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n    shmem_broadcast64_real(target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n    PROBE_shmem_broadcast64_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_broadcast64_real != NULL)\n  {\n    shmem_broadcast64_real(target, source, nlong, PE_root, PE_start, logPE_stride, PE_size, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_broadcast64 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_collect32 (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p\\n\", TASKID, target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_collect32_real at %p\\n\", TASKID, shmem_collect32_real);\n#endif\n\n  if (shmem_collect32_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_collect32_ENTRY(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    shmem_collect32_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    PROBE_shmem_collect32_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_collect32_real != NULL)\n  {\n    shmem_collect32_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_collect32 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_collect64 (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p\\n\", TASKID, target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_collect64_real at %p\\n\", TASKID, shmem_collect64_real);\n#endif\n\n  if (shmem_collect64_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_collect64_ENTRY(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    shmem_collect64_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    PROBE_shmem_collect64_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_collect64_real != NULL)\n  {\n    shmem_collect64_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_collect64 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_fcollect32 (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p\\n\", TASKID, target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_fcollect32_real at %p\\n\", TASKID, shmem_fcollect32_real);\n#endif\n\n  if (shmem_fcollect32_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_fcollect32_ENTRY(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    shmem_fcollect32_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    PROBE_shmem_fcollect32_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_fcollect32_real != NULL)\n  {\n    shmem_fcollect32_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_fcollect32 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_fcollect64 (void *target, const void *source, size_t nelems, int PE_start, int logPE_stride, int PE_size, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p\\n\", TASKID, target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_fcollect64_real at %p\\n\", TASKID, shmem_fcollect64_real);\n#endif\n\n  if (shmem_fcollect64_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_fcollect64_ENTRY(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    shmem_fcollect64_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n    PROBE_shmem_fcollect64_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_fcollect64_real != NULL)\n  {\n    shmem_fcollect64_real(target, source, nelems, PE_start, logPE_stride, PE_size, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_fcollect64 was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_and_to_all (int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_and_to_all_real at %p\\n\", TASKID, shmem_int_and_to_all_real);\n#endif\n\n  if (shmem_int_and_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_and_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_int_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_int_and_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_and_to_all_real != NULL)\n  {\n    shmem_int_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_and_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_and_to_all (long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_and_to_all_real at %p\\n\", TASKID, shmem_long_and_to_all_real);\n#endif\n\n  if (shmem_long_and_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_and_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_long_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_long_and_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_and_to_all_real != NULL)\n  {\n    shmem_long_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_and_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_and_to_all (long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_and_to_all_real at %p\\n\", TASKID, shmem_longlong_and_to_all_real);\n#endif\n\n  if (shmem_longlong_and_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_and_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_longlong_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_longlong_and_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_and_to_all_real != NULL)\n  {\n    shmem_longlong_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_and_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_and_to_all (short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_and_to_all_real at %p\\n\", TASKID, shmem_short_and_to_all_real);\n#endif\n\n  if (shmem_short_and_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_and_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_short_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_short_and_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_and_to_all_real != NULL)\n  {\n    shmem_short_and_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_and_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_double_max_to_all (double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_max_to_all_real at %p\\n\", TASKID, shmem_double_max_to_all_real);\n#endif\n\n  if (shmem_double_max_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_max_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_double_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_double_max_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_max_to_all_real != NULL)\n  {\n    shmem_double_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_max_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_float_max_to_all (float *target, float *source, int nreduce, int PE_start, int logPE_stride, int PE_size, float *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_float_max_to_all_real at %p\\n\", TASKID, shmem_float_max_to_all_real);\n#endif\n\n  if (shmem_float_max_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_float_max_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_float_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_float_max_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_float_max_to_all_real != NULL)\n  {\n    shmem_float_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_float_max_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_max_to_all (int *target, int *source, int nreduce, int PE_start, int logPE_stride, int PE_size, int *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_max_to_all_real at %p\\n\", TASKID, shmem_int_max_to_all_real);\n#endif\n\n  if (shmem_int_max_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_max_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_int_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_int_max_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_max_to_all_real != NULL)\n  {\n    shmem_int_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_max_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_max_to_all (long *target, long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_max_to_all_real at %p\\n\", TASKID, shmem_long_max_to_all_real);\n#endif\n\n  if (shmem_long_max_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_max_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_long_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_long_max_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_max_to_all_real != NULL)\n  {\n    shmem_long_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_max_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longdouble_max_to_all (long double *target, long double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long double *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longdouble_max_to_all_real at %p\\n\", TASKID, shmem_longdouble_max_to_all_real);\n#endif\n\n  if (shmem_longdouble_max_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longdouble_max_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_longdouble_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_longdouble_max_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longdouble_max_to_all_real != NULL)\n  {\n    shmem_longdouble_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longdouble_max_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_max_to_all (long long *target, long long *source, int nreduce, int PE_start, int logPE_stride, int PE_size, long long *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_max_to_all_real at %p\\n\", TASKID, shmem_longlong_max_to_all_real);\n#endif\n\n  if (shmem_longlong_max_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_max_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_longlong_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_longlong_max_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_max_to_all_real != NULL)\n  {\n    shmem_longlong_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_max_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_max_to_all (short *target, short *source, int nreduce, int PE_start, int logPE_stride, int PE_size, short *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_max_to_all_real at %p\\n\", TASKID, shmem_short_max_to_all_real);\n#endif\n\n  if (shmem_short_max_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_max_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_short_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_short_max_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_max_to_all_real != NULL)\n  {\n    shmem_short_max_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_max_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_double_min_to_all (double *target, double *source, int nreduce, int PE_start, int logPE_stride, int PE_size, double *pWrk, long *pSync)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %p %d %d %d %d %p %p\\n\", TASKID, target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_double_min_to_all_real at %p\\n\", TASKID, shmem_double_min_to_all_real);\n#endif\n\n  if (shmem_double_min_to_all_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_double_min_to_all_ENTRY(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    shmem_double_min_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n    PROBE_shmem_double_min_to_all_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_double_min_to_all_real != NULL)\n  {\n    shmem_double_min_to_all_real(target, source, nreduce, PE_start, logPE_stride, PE_size, pWrk, pSync);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_double_min_to_all was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_wait (int *ivar, int cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d\\n\", TASKID, ivar, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_wait_real at %p\\n\", TASKID, shmem_int_wait_real);\n#endif\n\n  if (shmem_int_wait_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_wait_ENTRY(ivar, cmp_value);\n    shmem_int_wait_real(ivar, cmp_value);\n    PROBE_shmem_int_wait_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_wait_real != NULL)\n  {\n    shmem_int_wait_real(ivar, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_wait was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_int_wait_until (int *ivar, int cmp, int cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %d\\n\", TASKID, ivar, cmp, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_int_wait_until_real at %p\\n\", TASKID, shmem_int_wait_until_real);\n#endif\n\n  if (shmem_int_wait_until_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_int_wait_until_ENTRY(ivar, cmp, cmp_value);\n    shmem_int_wait_until_real(ivar, cmp, cmp_value);\n    PROBE_shmem_int_wait_until_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_int_wait_until_real != NULL)\n  {\n    shmem_int_wait_until_real(ivar, cmp, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_int_wait_until was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_wait (long *ivar, long cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld\\n\", TASKID, ivar, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_wait_real at %p\\n\", TASKID, shmem_long_wait_real);\n#endif\n\n  if (shmem_long_wait_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_wait_ENTRY(ivar, cmp_value);\n    shmem_long_wait_real(ivar, cmp_value);\n    PROBE_shmem_long_wait_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_wait_real != NULL)\n  {\n    shmem_long_wait_real(ivar, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_wait was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_long_wait_until (long *ivar, int cmp, long cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %ld\\n\", TASKID, ivar, cmp, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_long_wait_until_real at %p\\n\", TASKID, shmem_long_wait_until_real);\n#endif\n\n  if (shmem_long_wait_until_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_long_wait_until_ENTRY(ivar, cmp, cmp_value);\n    shmem_long_wait_until_real(ivar, cmp, cmp_value);\n    PROBE_shmem_long_wait_until_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_long_wait_until_real != NULL)\n  {\n    shmem_long_wait_until_real(ivar, cmp, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_long_wait_until was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_wait (long long *ivar, long long cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %lld\\n\", TASKID, ivar, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_wait_real at %p\\n\", TASKID, shmem_longlong_wait_real);\n#endif\n\n  if (shmem_longlong_wait_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_wait_ENTRY(ivar, cmp_value);\n    shmem_longlong_wait_real(ivar, cmp_value);\n    PROBE_shmem_longlong_wait_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_wait_real != NULL)\n  {\n    shmem_longlong_wait_real(ivar, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_wait was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_longlong_wait_until (long long *ivar, int cmp, long long cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %lld\\n\", TASKID, ivar, cmp, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_longlong_wait_until_real at %p\\n\", TASKID, shmem_longlong_wait_until_real);\n#endif\n\n  if (shmem_longlong_wait_until_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_longlong_wait_until_ENTRY(ivar, cmp, cmp_value);\n    shmem_longlong_wait_until_real(ivar, cmp, cmp_value);\n    PROBE_shmem_longlong_wait_until_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_longlong_wait_until_real != NULL)\n  {\n    shmem_longlong_wait_until_real(ivar, cmp, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_longlong_wait_until was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_wait (short *ivar, short cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %h\\n\", TASKID, ivar, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_wait_real at %p\\n\", TASKID, shmem_short_wait_real);\n#endif\n\n  if (shmem_short_wait_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_wait_ENTRY(ivar, cmp_value);\n    shmem_short_wait_real(ivar, cmp_value);\n    PROBE_shmem_short_wait_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_wait_real != NULL)\n  {\n    shmem_short_wait_real(ivar, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_wait was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_short_wait_until (short *ivar, int cmp, short cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %h\\n\", TASKID, ivar, cmp, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_short_wait_until_real at %p\\n\", TASKID, shmem_short_wait_until_real);\n#endif\n\n  if (shmem_short_wait_until_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_short_wait_until_ENTRY(ivar, cmp, cmp_value);\n    shmem_short_wait_until_real(ivar, cmp, cmp_value);\n    PROBE_shmem_short_wait_until_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_short_wait_until_real != NULL)\n  {\n    shmem_short_wait_until_real(ivar, cmp, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_short_wait_until was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_wait (long *ivar, long cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %ld\\n\", TASKID, ivar, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_wait_real at %p\\n\", TASKID, shmem_wait_real);\n#endif\n\n  if (shmem_wait_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_wait_ENTRY(ivar, cmp_value);\n    shmem_wait_real(ivar, cmp_value);\n    PROBE_shmem_wait_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_wait_real != NULL)\n  {\n    shmem_wait_real(ivar, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_wait was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_wait_until (long *ivar, int cmp, long cmp_value)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p %d %ld\\n\", TASKID, ivar, cmp, cmp_value);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_wait_until_real at %p\\n\", TASKID, shmem_wait_until_real);\n#endif\n\n  if (shmem_wait_until_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_wait_until_ENTRY(ivar, cmp, cmp_value);\n    shmem_wait_until_real(ivar, cmp, cmp_value);\n    PROBE_shmem_wait_until_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_wait_until_real != NULL)\n  {\n    shmem_wait_until_real(ivar, cmp, cmp_value);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_wait_until was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_fence (void)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_fence_real at %p\\n\", TASKID, shmem_fence_real);\n#endif\n\n  if (shmem_fence_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_fence_ENTRY();\n    shmem_fence_real();\n    PROBE_shmem_fence_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_fence_real != NULL)\n  {\n    shmem_fence_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_fence was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_quiet (void)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_quiet_real at %p\\n\", TASKID, shmem_quiet_real);\n#endif\n\n  if (shmem_quiet_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_quiet_ENTRY();\n    shmem_quiet_real();\n    PROBE_shmem_quiet_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_quiet_real != NULL)\n  {\n    shmem_quiet_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_quiet was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_clear_lock (long *lock)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p\\n\", TASKID, lock);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_clear_lock_real at %p\\n\", TASKID, shmem_clear_lock_real);\n#endif\n\n  if (shmem_clear_lock_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_clear_lock_ENTRY(lock);\n    shmem_clear_lock_real(lock);\n    PROBE_shmem_clear_lock_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_clear_lock_real != NULL)\n  {\n    shmem_clear_lock_real(lock);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_clear_lock was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_set_lock (long *lock)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p\\n\", TASKID, lock);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_set_lock_real at %p\\n\", TASKID, shmem_set_lock_real);\n#endif\n\n  if (shmem_set_lock_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_set_lock_ENTRY(lock);\n    shmem_set_lock_real(lock);\n    PROBE_shmem_set_lock_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_set_lock_real != NULL)\n  {\n    shmem_set_lock_real(lock);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_set_lock was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nint shmem_test_lock (long *lock)\n{\n  int res = 0;\n\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p\\n\", TASKID, lock);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_test_lock_real at %p\\n\", TASKID, shmem_test_lock_real);\n#endif\n\n  if (shmem_test_lock_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_test_lock_ENTRY(lock);\n    res = shmem_test_lock_real(lock);\n    PROBE_shmem_test_lock_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_test_lock_real != NULL)\n  {\n    res = shmem_test_lock_real(lock);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_test_lock was not hooked!\\n\");\n    exit(-1);\n  }\n  return res;\n}\n\nvoid shmem_clear_cache_inv (void)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_clear_cache_inv_real at %p\\n\", TASKID, shmem_clear_cache_inv_real);\n#endif\n\n  if (shmem_clear_cache_inv_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_clear_cache_inv_ENTRY();\n    shmem_clear_cache_inv_real();\n    PROBE_shmem_clear_cache_inv_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_clear_cache_inv_real != NULL)\n  {\n    shmem_clear_cache_inv_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_clear_cache_inv was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_set_cache_inv (void)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_set_cache_inv_real at %p\\n\", TASKID, shmem_set_cache_inv_real);\n#endif\n\n  if (shmem_set_cache_inv_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_set_cache_inv_ENTRY();\n    shmem_set_cache_inv_real();\n    PROBE_shmem_set_cache_inv_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_set_cache_inv_real != NULL)\n  {\n    shmem_set_cache_inv_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_set_cache_inv was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_clear_cache_line_inv (void *target)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p\\n\", TASKID, target);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_clear_cache_line_inv_real at %p\\n\", TASKID, shmem_clear_cache_line_inv_real);\n#endif\n\n  if (shmem_clear_cache_line_inv_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_clear_cache_line_inv_ENTRY(target);\n    shmem_clear_cache_line_inv_real(target);\n    PROBE_shmem_clear_cache_line_inv_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_clear_cache_line_inv_real != NULL)\n  {\n    shmem_clear_cache_line_inv_real(target);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_clear_cache_line_inv was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_set_cache_line_inv (void *target)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p\\n\", TASKID, target);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_set_cache_line_inv_real at %p\\n\", TASKID, shmem_set_cache_line_inv_real);\n#endif\n\n  if (shmem_set_cache_line_inv_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_set_cache_line_inv_ENTRY(target);\n    shmem_set_cache_line_inv_real(target);\n    PROBE_shmem_set_cache_line_inv_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_set_cache_line_inv_real != NULL)\n  {\n    shmem_set_cache_line_inv_real(target);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_set_cache_line_inv was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_udcflush (void)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_udcflush_real at %p\\n\", TASKID, shmem_udcflush_real);\n#endif\n\n  if (shmem_udcflush_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_udcflush_ENTRY();\n    shmem_udcflush_real();\n    PROBE_shmem_udcflush_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_udcflush_real != NULL)\n  {\n    shmem_udcflush_real();\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_udcflush was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\nvoid shmem_udcflush_line (void *target)\n{\n#if defined(DEBUG)\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: %p\\n\", TASKID, target);\n  fprintf(stderr, PACKAGE_NAME\": DEBUG: %d: shmem_udcflush_line_real at %p\\n\", TASKID, shmem_udcflush_line_real);\n#endif\n\n  if (shmem_udcflush_line_real != NULL && EXTRAE_ON() && !Backend_inInstrumentation(THREADID))\n  {\n    Backend_Enter_Instrumentation(2);\n    PROBE_shmem_udcflush_line_ENTRY(target);\n    shmem_udcflush_line_real(target);\n    PROBE_shmem_udcflush_line_EXIT();\n    Backend_Leave_Instrumentation();\n  }\n  else if (shmem_udcflush_line_real != NULL)\n  {\n    shmem_udcflush_line_real(target);\n  }\n  else\n  {\n    fprintf(stderr, PACKAGE_NAME\": Error shmem_udcflush_line was not hooked!\\n\");\n    exit(-1);\n  }\n}\n\n/****************************************\\\n ***       MODULE INITIALIZATION      ***\n\\****************************************/\n\nvoid __attribute__ ((constructor)) Extrae_OPENSHMEM_init(void)\n{\n  Get_OPENSHMEM_Hook_Points(0);\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/OMP/omp_wrapper.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef  __USE_GNU\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n\n#include \"wrapper.h\"\n#include \"trace_macros.h\"\n#include \"omp_probe.h\"\n#include \"omp_wrapper.h\"\n\n#include \"ibm-xlsmp-1.6.h\"\n#if defined(GNU_OPENMP_4_2)\n# include \"gnu-libgomp-4.2.h\"\n#elif defined(GNU_OPENMP_4_9)\n# include \"gnu-libgomp-4.9.h\"\n#endif\n#include \"intel-kmpc-11.h\"\n\n//#define DEBUG\n\n#if defined(STANDALONE)\nvoid __attribute__ ((constructor)) extrae_openmp_setup(void)\n{\n  fprintf(stderr, \"[DEBUG-OPENMP] Registering module init=%p\\n\", Extrae_OpenMP_init);\n  Extrae_RegisterModule(OPENMP_MODULE, Extrae_OpenMP_init, NULL);\n}\n#endif\n\n#if defined(PIC)\nstatic int (*omp_get_thread_num_real)(void) = NULL;\nstatic void (*omp_set_lock_real)(void *) = NULL;\nstatic void (*omp_unset_lock_real)(void *) = NULL;\nstatic void (*omp_set_num_threads_real)(int) = NULL;\n#endif /* PIC */\n\nstatic void common_GetOpenMPHookPoints (int rank)\n{\n\tUNREFERENCED_PARAMETER(rank);\n\n#if defined(PIC)\n\t/* Obtain @ for omp_set_lock */\n\tomp_get_thread_num_real =\n\t\t(int(*)(void)) dlsym (RTLD_NEXT, \"omp_get_thread_num\");\n\n\t/* Obtain @ for omp_set_lock */\n\tomp_set_lock_real =\n\t\t(void(*)(void*)) dlsym (RTLD_NEXT, \"omp_set_lock\");\n\n\t/* Obtain @ for omp_unset_lock */\n\tomp_unset_lock_real =\n\t\t(void(*)(void*)) dlsym (RTLD_NEXT, \"omp_unset_lock\");\n\n\t/* Obtain @ for omp_set_num_threads */\n\tomp_set_num_threads_real =\n\t\t(void(*)(int)) dlsym (RTLD_NEXT, \"omp_set_num_threads\");\n#endif /* PIC */\n}\n\n/*\n\n   INJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n   INJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\n*/\n\n#if defined(PIC)\nint omp_get_thread_num (void)\n{\n\tint res;\n\tstatic int shown = FALSE;\n\n        if (omp_get_thread_num_real == NULL)\n\t{\n\t\tcommon_GetOpenMPHookPoints(0);\n\t}\n\n\tif (omp_get_thread_num_real != NULL)\n\t{\n\t\tres = omp_get_thread_num_real();\n\t}\n\telse\n\t{\n\t\tif (!shown)\n\t\t{\n\t\t\tfprintf (stderr,\n\t\t\t  PACKAGE_NAME\": Caution! Caution! Caution! Caution! -------------------- \\n\"\n\t\t\t  PACKAGE_NAME\":\\n\"\n\t\t\t  PACKAGE_NAME\": You have ended executing Extrae's omp_get_thread_num weak symbol!\\n\"\n\t\t\t  PACKAGE_NAME\": That's likely to happen when you instrument your application using OpenMP\\n\"\n\t\t\t  PACKAGE_NAME\": instrumentation, but your application is not compiled/linked against OpenMP\\n\"\n\t\t\t  PACKAGE_NAME\":\\n\"\n\t\t\t  PACKAGE_NAME\": Caution! Caution! Caution! Caution! -------------------- \\n\");\n\t\t\tshown = TRUE;\n\t\t}\n\t\tres = 0;\n\t}\n\treturn res;\n}\n#endif\n\n#if defined(PIC)\nvoid omp_set_lock (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": omp_set_lock is at %p\\n\", omp_set_lock_real);\n\tfprintf (stderr, PACKAGE_NAME\": omp_set_lock params %p\\n\", p1);\n#endif\n\n\tif (omp_set_lock_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_OpenMP_Named_Lock_Entry();\n\t\tomp_set_lock_real (p1);\n\t\tProbe_OpenMP_Named_Lock_Exit(p1);\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (omp_set_lock_real != NULL)\n\t{\n\t\tomp_set_lock_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": omp_set_lock is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid omp_unset_lock (int *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": omp_unset_lock is at %p\\n\", omp_unset_lock_real);\n\tfprintf (stderr, PACKAGE_NAME\": omp_unset_lock params %p\\n\", p1);\n#endif\n\n\tif (omp_unset_lock_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_OpenMP_Named_Unlock_Entry(p1);\n\t\tomp_unset_lock_real (p1);\n\t\tProbe_OpenMP_Named_Unlock_Exit();\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (omp_unset_lock_real != NULL)\n\t{\n\t\tomp_unset_lock_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": omp_unset_lock is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid omp_set_num_threads (int p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": omp_set_num_threads is at %p\\n\", omp_set_num_threads_real);\n\tfprintf (stderr, PACKAGE_NAME\": omp_set_num_threads params %d\\n\", p1);\n#endif\n\n\tif (omp_set_num_threads_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tBackend_ChangeNumberOfThreads (p1);\n\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_OpenMP_SetNumThreads_Entry (p1);\n\t\tomp_set_num_threads_real (p1);\n\t\tProbe_OpenMP_SetNumThreads_Exit ();\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (omp_set_num_threads_real != NULL)\n\t{\n\t\tomp_set_num_threads_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": omp_set_num_threads is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n#endif /* PIC */\n\n#if defined(STANDALONE)\nstatic int getnumProcessors (void)\n{\n\tint numProcessors = 0;\n\n#if HAVE_SYSCONF\n\tnumProcessors = (int) sysconf (_SC_NPROCESSORS_CONF);\n\tif (-1 == numProcessors)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Cannot determine number of configured processors using sysconf\\n\");\n\t\texit (-1);\n\t}\n#else\n# error \"Cannot determine number of processors\"\n#endif\n\n\treturn numProcessors;\n}\n#endif\n\nvoid Extrae_OpenMP_init(int me)\n{\n\tUNREFERENCED_PARAMETER(me);\n\n#if defined(PIC)\n\tint hooked = FALSE;\n\n# if defined(OS_LINUX) && defined(ARCH_PPC) && defined(IBM_OPENMP)\n\t/*\n\t * On PPC systems, check first for IBM XL runtime, if we don't find any\n\t * symbol, check for GNU then \n\t */\n\thooked = ibm_xlsmp_1_6_hook_points(0);\n\tif (!hooked)\n\t{\n\t\tfprintf (stdout, PACKAGE_NAME\": ATTENTION! Application seems not to be linked with IBM XL OpenMP runtime!\\n\");\n\t}\n# endif /* OS_LINUX && ARCH_PPC && IBM_OPENMP */\n\n# if defined(INTEL_OPENMP)\n\tif (!hooked)\n\t{\n\t\thooked = intel_kmpc_11_hook_points(0);\n\t\tif (!hooked)\n\t\t{\n\t\t\tfprintf (stdout, PACKAGE_NAME\": ATTENTION! Application seems not to be linked with Intel KAP OpenMP runtime!\\n\");\n\t\t}\n\t}\n# endif /* INTEL_OPENMP */\n\n# if defined(GNU_OPENMP)\n\tif (!hooked)\n\t{\n# if defined(GNU_OPENMP_4_2)\n\t\thooked = gnu_libgomp_4_2_hook_points(0);\n# elif defined(GNU_OPENMP_4_9)\n\t\thooked = gnu_libgomp_4_9_hook_points(0);\n# else\n#  error \"Unsupported version of libgomp!\"\n# endif \n\t\tif (!hooked)\n\t\t{\n\t\t\tfprintf (stdout, PACKAGE_NAME\": ATTENTION! Application seems not to be linked with GNU OpenMP runtime!\\n\");\n\t\t}\n\t}\n# endif /* GNU_OPENMP */\n\n\t/* \n\t * If we hooked any compiler-specific routines, just hook for the \n\t * common OpenMP routines \n\t */\n\n\tif (hooked)\n\t\tcommon_GetOpenMPHookPoints(0);\n\n#else  /* PIC */\n\n\tfprintf (stderr, PACKAGE_NAME\": Warning! OpenMP instrumentation requires linking with shared library!\\n\");\n\n#endif /* PIC */\n\n#if defined(STANDALONE)\n\tint numProcessors = 0;\n\tchar *new_num_omp_threads_clause = NULL;\n\tchar *omp_value = NULL;\n\t\n\t/* \n\t * Obtain the number of runnable threads in this execution.\n\t * Just check for OMP_NUM_THREADS env var (if this compilation\n\t * allows instrumenting OpenMP \n\t */\n\tnumProcessors = getnumProcessors();\n\t\n\tnew_num_omp_threads_clause = (char*) malloc ((strlen(\"OMP_NUM_THREADS=xxxx\")+1)*sizeof(char));\n\tif (NULL == new_num_omp_threads_clause)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Unable to allocate memory for tentative OMP_NUM_THREADS\\n\");\n\t\texit (-1);\n\t}\n\tif (numProcessors >= 10000) /* xxxx in new_omp_threads_clause -> max 9999 */\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Insufficient memory allocated for tentative OMP_NUM_THREADS\\n\");\n\t\texit (-1);\n\t}\n\t\n\tsprintf (new_num_omp_threads_clause, \"OMP_NUM_THREADS=%d\\n\", numProcessors);\n\tomp_value = getenv (\"OMP_NUM_THREADS\");\n\tif (omp_value)\n\t{\n\t\tint num_of_threads = atoi (omp_value);\n\t\tif (num_of_threads != 0)\n\t\t{\n\t\t\tExtrae_core_set_maximum_threads( num_of_threads );\n\t\t\tExtrae_core_set_current_threads( num_of_threads );\n\t\t\tif (me == 0)\n\t\t\t{\n\t\t\t\tfprintf (stdout, PACKAGE_NAME\": OMP_NUM_THREADS set to %d\\n\", num_of_threads);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif (me == 0)\n\t\t\t{\n\t\t\t\tfprintf (stderr,\n\t\t\t\tPACKAGE_NAME\": OMP_NUM_THREADS is mandatory for this tracing library!\\n\"\\\n\t\t\t\tPACKAGE_NAME\": Setting OMP_NUM_THREADS to %d\\n\", numProcessors);\n\t\t\t}\n\t\t\tputenv (new_num_omp_threads_clause);\n\t\t\tExtrae_core_set_maximum_threads( numProcessors );\n\t\t\tExtrae_core_set_current_threads( numProcessors );\n\t\t}\n\t}\n\telse\n\t{\n\t\tif (me == 0)\n\t\t{\n\t\t\tfprintf (stderr,\n\t\t\tPACKAGE_NAME\": OMP_NUM_THREADS is mandatory for this tracing library!\\n\"\\\n\t\t\tPACKAGE_NAME\": Setting OMP_NUM_THREADS to %d\\n\", numProcessors);\n\t\t}\n\t\tputenv (new_num_omp_threads_clause);\n\t\tExtrae_core_set_maximum_threads( numProcessors );\n\t\tExtrae_core_set_current_threads( numProcessors );\n\t}\n#endif /* STANDALONE */\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/OMP/ibm-xlsmp-1.6.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef  __USE_GNU\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n\n#include \"wrapper.h\"\n#include \"omp-common.h\"\n\n#if defined(PIC)\n\n//#define DEBUG\n\n/*\nThe nowait issue:\n\nSome OpenMP clauses may include an optional directive called \"nowait\".\nWhen specified, a thread won't wait for the others when finishing its \nparallel region. Our callback pointers (pardo_uf, do_uf, par_uf, \npar_single, par_sections) are set by each thread in a parallel region. \nWhile all threads are simultaneously in the same region, there's no problem.\nHowever, if just one thread moves to the following parallel region and \nmodifies this variable, the other threads end up invoking a wrong callback.\nSo far, I've found this problem in DO clauses, but \"nowait\" can be specified\nin many others. \n\nWhich of the callback pointers below have to be changed for an array of \nfunction pointers?  All of them, maybe? \n*/\n\n/* FIXME: Should we discover this dinamically? */ \n#define MAX_THD 32\n\ntypedef unsigned long long ull;\ntypedef long long ll;\n\n/* Pointer to the user function called by a PARALLEL DO REGION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*pardo_uf)(char*, long, long, unsigned);\n\n/* Pointer to the user function called by a DO REGION */\nstatic void (*do_uf[MAX_THD])(char*, long, long) = {NULL};\n\n/* Pointer to the user function called by a PARALLEL REGION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*par_uf)(char*);\n\n/* Pointer to the user function called by a SINGLE REGION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*par_single)(void);\n\n/* Pointer to the user function called by a SECTIONS */\ntypedef void (**_xlsmp_sections)(char*,unsigned);\nstatic _xlsmp_sections real_sections[MAX_THD];\nlong num_real_sections[MAX_THD];\n\n/*\n\t\tcallme_pardo (char*, ull, ull)\n\t\tWith the same header as the routine to be called by the SMP runtime, just\n    acts as a trampoline to this call. Invokes the required iterations of the\n    parallel do loop.\n*/\nstatic void callme_pardo (char *ptr, long lbnd, long ubnd, unsigned thid)\n{\n\tvoid *p = *((void**) pardo_uf);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": callme_pardo: ptr=%p lbnd=%ld ubnd=%ld thid=%u\\n\", ptr, lbnd, ubnd, thid);\n\tfprintf (stderr, PACKAGE_NAME\": callme_pardo: pardo_uf=%p\\n\", p);\n#endif\n\n\tExtrae_OpenMP_UF_Entry (p);\n\tBackend_Leave_Instrumentation (); /* We're entering in user code */\n\tpardo_uf (ptr, lbnd, ubnd, thid);\n\tExtrae_OpenMP_UF_Exit ();\n}\n\n/*\n\tcallme_do (char*, ull, ull)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Invokes the required iterations of the\n\tparallel do loop.\n*/\nstatic void callme_do (char *ptr, long lbnd, long ubnd)\n{\n\tvoid *p = *((void**) do_uf[THREADID]);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": callme_do: ptr=%p lbnd=%ld ubnd=%ld\\n\", ptr, lbnd, ubnd);\n\tfprintf (stderr, PACKAGE_NAME\": callme_do: do_uf=%p\\n\", p);\n#endif\n\n\tExtrae_OpenMP_UF_Entry (p);\n\tBackend_Leave_Instrumentation (); /* We're entering in user code */\n\tdo_uf[THREADID] (ptr, lbnd, ubnd);\n\tExtrae_OpenMP_UF_Exit ();\n}\n/*\n\tcallme_par (char*)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Each thread runs the very same routine\n\twith different params.\n*/\nstatic void callme_par (char *ptr)\n{\n\tvoid *p = *((void**) par_uf);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": callme_par: ptr=%p\\n\", ptr);\n\tfprintf (stderr, PACKAGE_NAME\": callme_par: par_uf=%p\\n\", p);\n#endif\n\n\tExtrae_OpenMP_UF_Entry (p);\n\tBackend_Leave_Instrumentation (); /* We're entering in user code */\n\tpar_uf (ptr);\n\tExtrae_OpenMP_UF_Exit ();\n}\n\n/*\n\tcallme_single (void)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Each thread runs the very same routine\n\twith different params.\n*/\nstatic void callme_single(void)\n{\n\tvoid *p = *((void**) par_single);\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": callme_single: par_single=%p\\n\", p);\n#endif\n\n\tExtrae_OpenMP_UF_Entry (p);\n\tBackend_Leave_Instrumentation (); /* We're entering in user code */\n\tpar_single ();\n\tExtrae_OpenMP_UF_Exit ();\n}\n\n/*\n\tcallme_section (void)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Each thread runs the very same routine\n\twith different params.\n*/\nstatic volatile long long __atomic_index;\n#if !defined(HAVE__SYNC_FETCH_AND_ADD)\nstatic pthread_mutex_t __atomic_index_mtx = PTHREAD_MUTEX_INITIALIZER;\n#endif\n\nstatic void callme_section(char *p1, unsigned p2)\n{\n\tlong long index;\n#if defined(HAVE__SYNC_FETCH_AND_ADD)\n\tindex = __sync_fetch_and_add(&__atomic_index,1);\n#else\n\tpthread_mutex_lock (&__atomic_index_mtx);\n\tindex = __atomic_index;\n\t__atomic_index++;\n\tpthread_mutex_unlock (&__atomic_index_mtx);\n#endif\n\n\tif (index < num_real_sections[THREADID])\n\t{\n\t\t_xlsmp_sections real = real_sections[THREADID];\n\n\t\tExtrae_OpenMP_UF_Entry (real[index]);\n\t\tBackend_Leave_Instrumentation (); /* We're entering in user code */\n\t\treal[index] (p1, p2);\n\t\tExtrae_OpenMP_UF_Exit ();\n\t}\n}\n\nstatic void (*_xlsmpParallelDoSetup_TPO_real)(int,void**,long,long,long,long,void**,void**,void**,long,long,void**,long) = NULL;\nstatic void (*_xlsmpParRegionSetup_TPO_real)(int,void*,int,void*,void*,void**,long,long) = NULL;\nstatic void (*_xlsmpWSDoSetup_TPO_real)(int,void*,long,long,long,long,void*,void*,void**,long) = NULL;\nstatic void (*_xlsmpSingleSetup_TPO_real)(int,void*,int,void*) = NULL;\nstatic void (*_xlsmpWSSectSetup_TPO_real)(int,void*,long,void*,void*,void**,long,long) = NULL;\nstatic void (*_xlsmpBarrier_TPO_real)(int,int*) = NULL;\nstatic void (*_xlsmpGetDefaultSLock_real)(void*) = NULL;\nstatic void (*_xlsmpRelDefaultSLock_real)(void*) = NULL;\nstatic void (*_xlsmpGetSLock_real)(void*) = NULL;\nstatic void (*_xlsmpRelSLock_real)(void*) = NULL;\n\nextern int omp_get_max_threads();\n\n#define INC_IF_NOT_NULL(ptr,cnt) (cnt = (ptr == NULL)?cnt:cnt+1)\n\nstatic int ibm_xlsmp_1_6_GetOpenMPHookPoints (int rank)\n{\n\tint count = 0;\n\n\tUNREFERENCED_PARAMETER(rank)\n\n\t/* Obtain @ for _xlsmpParallelDoSetup_TPO */\n\t_xlsmpParallelDoSetup_TPO_real =\n\t\t(void(*)(int,void**,long,long,long,long,void**,void**,void**,long,long,void**,long))\n\t\tdlsym (RTLD_NEXT, \"_xlsmpParallelDoSetup_TPO\");\n\tINC_IF_NOT_NULL(_xlsmpParallelDoSetup_TPO_real,count);\n\n\t/* Obtain @ for _xlsmpParRegionSetup_TPO */\n\t_xlsmpParRegionSetup_TPO_real =\n\t\t(void(*)(int,void*,int,void*,void*,void**,long,long))\n\t\tdlsym (RTLD_NEXT, \"_xlsmpParRegionSetup_TPO\");\n\tINC_IF_NOT_NULL(_xlsmpParRegionSetup_TPO_real,count);\n\n\t/* Obtain @ for _xlsmpWSDoSetup_TPO */\n\t_xlsmpWSDoSetup_TPO_real =\n\t\t(void(*)(int,void*,long,long,long,long,void*,void*,void**,long))\n\t\tdlsym (RTLD_NEXT, \"_xlsmpWSDoSetup_TPO\");\n\tINC_IF_NOT_NULL(_xlsmpWSDoSetup_TPO_real,count);\n\n\t/* Obtain @ for _xlsmpWSSectSetup_TPO */\n\t_xlsmpWSSectSetup_TPO_real =\n\t\t(void(*)(int,void*,long,void*,void*,void**,long,long))\n\t\tdlsym (RTLD_NEXT, \"_xlsmpWSSectSetup_TPO\");\n\tINC_IF_NOT_NULL(_xlsmpWSSectSetup_TPO_real,count);\n\n\t/* Obtain @ for _xlsmpSingleSetup_TPO */\n\t_xlsmpSingleSetup_TPO_real =\n\t\t(void(*)(int,void*,int,void*)) dlsym (RTLD_NEXT, \"_xlsmpSingleSetup_TPO\");\n\tINC_IF_NOT_NULL(_xlsmpSingleSetup_TPO_real,count);\n\n\t/* Obtain @ for _xlsmpBarrier_TPO */\n\t_xlsmpBarrier_TPO_real =\n\t\t(void(*)(int,int*)) dlsym (RTLD_NEXT, \"_xlsmpBarrier_TPO\");\n\tINC_IF_NOT_NULL(_xlsmpBarrier_TPO_real,count);\n\n\t/* Obtain @ for _xlsmpGetDefaultSLock */\n\t_xlsmpGetDefaultSLock_real =\n\t\t(void(*)(void*)) dlsym (RTLD_NEXT, \"_xlsmpGetDefaultSLock\");\n\tINC_IF_NOT_NULL(_xlsmpGetDefaultSLock_real,count);\n\n\t/* Obtain @ for _xlsmpRelDefaultSLock */\n\t_xlsmpRelDefaultSLock_real =\n\t\t(void(*)(void*)) dlsym (RTLD_NEXT, \"_xlsmpRelDefaultSLock\");\n\tINC_IF_NOT_NULL(_xlsmpRelDefaultSLock_real,count);\n\n\t/* Obtain @ for _xlsmpGetSLock */\n\t_xlsmpGetSLock_real =\n\t\t(void(*)(void*)) dlsym (RTLD_NEXT, \"_xlsmpGetSLock\");\n\tINC_IF_NOT_NULL(_xlsmpGetSLock_real,count);\n\n\t/* Obtain @ for _xlsmpRelSLock */\n\t_xlsmpRelSLock_real =\n\t\t(void(*)(void*)) dlsym (RTLD_NEXT, \"_xlsmpRelSLock\");\n\tINC_IF_NOT_NULL(_xlsmpRelSLock_real,count);\n\n\t/* Any hook point? */\n\treturn count > 0;\n}\n\n/*\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n*/\n\nvoid _xlsmpParallelDoSetup_TPO(int p1, void *p2, long p3, long p4, long p5, long p6, void *p7, void *p8, void **p9, long p10, long p11, void *p12, long p13)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpParallelDoSetup_TPO is at %p\\n\", _xlsmpParallelDoSetup_TPO_real);\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpParallelDoSetup_TPO are %d %p %ld %ld %ld %ld %p %p %p %ld %ld %p %ld\\n\", p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);\n#endif\n\n\tif (_xlsmpParallelDoSetup_TPO_real != NULL && mpitrace_on)\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(char*, long, long, unsigned))p2;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\t_xlsmpParallelDoSetup_TPO_real (p1, (void**)callme_pardo, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\t}\n\telse if (_xlsmpParallelDoSetup_TPO_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpParallelDoSetup_TPO_real (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpParallelDoSetup_TPO is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpParRegionSetup_TPO (int p1, void *p2, int p3, void* p4, void* p5, void** p6, long p7, long p8)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpParRegionSetup_TPO is at %p\\n\", _xlsmpParRegionSetup_TPO_real);\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpParRegionSetup_TPO params %d %p %d %p %p %p %ld %ld\\n\", p1, p2, p3, p4, p5, p6, p7, p8);\n#endif\n\n\tif (_xlsmpParRegionSetup_TPO_real != NULL && mpitrace_on)\n\t{\n\t\t/* Set the pointer to the correct PARALLEL user function */\n\t\tpar_uf = (void(*)(char*))p2;\n\n\t\t/* Reset the counter of the sections to 0 */\n\t\t__atomic_index = 0;\n\n\t\tExtrae_OpenMP_ParRegion_Entry();\n\t\t_xlsmpParRegionSetup_TPO_real (p1, callme_par, p3, p4, p5, p6, p7, p8);\n\t\tExtrae_OpenMP_ParRegion_Exit();\n  }\n\telse if (_xlsmpParRegionSetup_TPO_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpParRegionSetup_TPO_real (p1, p2, p3, p4, p5, p6, p7, p8);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpParRegionSetup_TPO is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpWSDoSetup_TPO (int p1, void *p2, long p3, long p4, long p5, long p6, void* p7, void* p8, void** p9, long p10)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpWSDoSetup_TPO is at %p\\n\", _xlsmpWSDoSetup_TPO_real);\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpWSDoSetup_TPO params %d %p %ld %ld %ld %ld %p %p %p %ld\\n\", p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);\n#endif\n\n\tif (_xlsmpWSDoSetup_TPO_real != NULL && mpitrace_on)\n\t{\n\t\t/* Set the pointer to the correct DO user function */\n\t\tdo_uf[THREADID] = (void(*)(char*, long, long))p2;\n\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\t_xlsmpWSDoSetup_TPO_real\n\t\t\t(p1, callme_do, p3, p4, p5, p6, p7, p8, p9, p10);\n\t\tExtrae_OpenMP_DO_Exit();\n\t}\n\telse if (_xlsmpWSDoSetup_TPO_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpWSDoSetup_TPO_real (p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpWSDoSetup_TPO is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpBarrier_TPO (int p1, int *p2)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpBarrier_TPO is at %p\\n\", _xlsmpBarrier_TPO_real);\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpBarrier_TPO params %d %p\\n\", p1, p2);\n#endif\n\n\tif (_xlsmpBarrier_TPO_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Barrier_Entry ();\n\t\t_xlsmpBarrier_TPO_real (p1, p2);\n\t\tExtrae_OpenMP_Barrier_Exit ();\n\t}\n\telse if (_xlsmpBarrier_TPO_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpBarrier_TPO_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpBarrier_TPO is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n \nvoid _xlsmpSingleSetup_TPO (int p1, void *p2, int p3, void *p4)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpSingleSetup_TPO is at %p\\n\", _xlsmpBarrier_TPO_real);\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpSingleSetup_TPO params %d %p %d %p\\n\", p1, p2, p3, p4);\n#endif\n\n\tif (_xlsmpSingleSetup_TPO_real != NULL && mpitrace_on)\n\t{\n\t\t/* Set the pointer to the correct SINGLE user function */\n\t\tpar_single = (void(*)(void))p2;\n\n\t\tExtrae_OpenMP_Single_Entry();\n\t\t_xlsmpSingleSetup_TPO_real (p1, callme_single, p3, p4);\n\t\tExtrae_OpenMP_Single_Exit();\n\t}\n\telse if (_xlsmpSingleSetup_TPO_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpSingleSetup_TPO_real (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpSingleSetup_TPO is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpWSSectSetup_TPO (int p1, void *p2, long p3, void *p4, void *p5, void** p6, long p7, long p8)\n{\n\tlong index = 0;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREADID %u _xlsmpWSSectSetup_TPO is at %p\\n\", THREADID, _xlsmpWSSectSetup_TPO_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREADID %u _xlsmpWSSectSetup_TPO params %d %p %ld %p %p %p %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7, p8);\n#endif\n\n\tif (_xlsmpWSSectSetup_TPO_real != NULL && mpitrace_on)\n\t{\n\t\t/* Just intercept the @ of the routines representing all the sections to\n\t\t   call our routine and run them from inside! ( see callme_section ) */\n\n\t\tvoid (*callme_sections[p3])(char*,unsigned);\n\t\tfor (index = 0; index < p3; index++)\n\t\t\tcallme_sections[index] = callme_section;\n\n\t\treal_sections[THREADID] = (_xlsmp_sections) p2;\n\t\tnum_real_sections[THREADID] = p3;\n\n\t\tExtrae_OpenMP_Section_Entry();\n\t\t_xlsmpWSSectSetup_TPO_real (p1, callme_sections, p3, p4, p5, p6, p7, p8);\n\t\tExtrae_OpenMP_Section_Exit();\n\t}\n\telse if (_xlsmpWSSectSetup_TPO_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpWSSectSetup_TPO_real (p1, p2, p3, p4, p5, p6, p7, p8);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpWSSectSetup_TPO is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpRelDefaultSLock (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpRelDefaultSLock is at %p\\n\", _xlsmpRelDefaultSLock_real);\n#endif\n\n\tif (_xlsmpRelDefaultSLock_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Unnamed_Unlock_Entry();\n\t\t_xlsmpRelDefaultSLock_real(p1);\n\t\tExtrae_OpenMP_Unnamed_Unlock_Exit();\n\t}\n\telse if (_xlsmpRelDefaultSLock_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpRelDefaultSLock_real(p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpRelDefaultSLock is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpRelSLock (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpRelSLock is at %p\\n\", _xlsmpRelSLock_real);\n#endif\n\n\tif (_xlsmpRelSLock_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Named_Unlock_Entry(p1);\n\t\t_xlsmpRelSLock_real(p1);\n\t\tExtrae_OpenMP_Named_Unlock_Exit();\n\t}\n\telse if (_xlsmpRelSLock_real != NULL && mpitrace_on)\n\t{\n\t\t_xlsmpRelSLock_real(p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpRelSLock is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpGetDefaultSLock (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpGetDefaultSLock is at %p\\n\", _xlsmpGetDefaultSLock_real);\n#endif\n\n\tif (_xlsmpGetDefaultSLock_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Unnamed_Lock_Entry();\n\t\t_xlsmpGetDefaultSLock_real (p1);\n\t\tExtrae_OpenMP_Unnamed_Lock_Exit();\n\t}\n\telse if (_xlsmpGetDefaultSLock_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpGetDefaultSLock_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpGetDefaultSLock is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid _xlsmpGetSLock (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": _xlsmpGetSLock is at %p\\n\", _xlsmpGetSLock_real);\n#endif\n\n\tif (_xlsmpGetSLock_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Named_Lock_Entry();\n\t\t_xlsmpGetSLock_real (p1);\n\t\tExtrae_OpenMP_Named_Lock_Exit(p1);\n\t}\n\telse if (_xlsmpGetSLock_real != NULL && !mpitrace_on)\n\t{\n\t\t_xlsmpGetSLock_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": _xlsmpGetSLock is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nextern int omp_get_max_threads();\n\nint ibm_xlsmp_1_6_hook_points (int ntask)\n{\n\tint hooked;\n\tint max_threads;\n\n\thooked = ibm_xlsmp_1_6_GetOpenMPHookPoints (ntask);\n   \n\tmax_threads = omp_get_max_threads();\n\tif (max_threads > MAX_THD)\n\t{\n\t\t/* Has this happened? */\n\t\t/* a) Increase MAX_THD to be higher than omp_get_max_threads() */\n\t\t/* b) Decrease OMP_NUM_THREADS in order to decrease omp_get_max_threads() */\n\t\tfprintf (stderr, PACKAGE_NAME\": omp_get_max_threads() > MAX_THD. Aborting...\\nRecompile \"PACKAGE_NAME\" increasing MAX_THD or decrease OMP_NUM_THREADS\\n\");\n\t\texit (1);\n\t}\n\n\treturn hooked;\n}\n\n#endif /* PIC */\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/OMP/intel-kmpc-11.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef __USE_GNU\n#endif\n#ifdef HAVE_STDARG_H\n# include <stdarg.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_PTHREAD_H\n# include <pthread.h>\n#endif\n\n#include \"wrapper.h\"\n#include \"omp_probe.h\"\n#include \"omp-common.h\"\n#include \"intel-kmpc-11-intermediate.h\"\n\n//#define DEBUG\n\n#if defined(PIC)\n\n#define INC_IF_NOT_NULL(ptr,cnt) (cnt = (ptr == NULL)?cnt:cnt+1)\n\nstruct __kmpv_location_t\n{\n\tint reserved_1;\n\tint flags;\n\tint reserved_2;\n\tint reserved_3;\n\tchar *location;\n};\n\nstruct __kmp_task_t\n{\n\tvoid *shareds;\n\tvoid *routine;\n\tint part_id;\n};\n\nstatic pthread_mutex_t extrae_map_kmpc_mutex = PTHREAD_MUTEX_INITIALIZER;\n\nstatic void (*__kmpc_fork_call_real)(void*,int,void*,...) = NULL;\nstatic void (*__kmpc_barrier_real)(void*,int) = NULL;\nstatic void (*__kmpc_critical_real)(void*,int,void*) = NULL;\nstatic void (*__kmpc_end_critical_real)(void*,int,void*) = NULL;\nstatic int (*__kmpc_dispatch_next_4_real)(void*,int,int*,int*,int*,int*) = NULL;\nstatic int (*__kmpc_dispatch_next_8_real)(void*,int,int*,long long *,long long *, long long *) = NULL;\nstatic int (*__kmpc_single_real)(void*,int) = NULL;\nstatic void (*__kmpc_end_single_real)(void*,int) = NULL;\nstatic void (*__kmpc_dispatch_init_4_real)(void*,int,int,int,int,int,int) = NULL;\nstatic void (*__kmpc_dispatch_init_8_real)(void*,int,int,long long,long long,long long,long long) = NULL;\nstatic void (*__kmpc_dispatch_fini_4_real)(void*,int) = NULL;\nstatic void (*__kmpc_dispatch_fini_8_real)(void*,long long) = NULL; /* Don't sure about this! */\n\nstatic void* (*__kmpc_omp_task_alloc_real)(void*,int,int,size_t,size_t,void*) = NULL;\nstatic void (*__kmpc_omp_task_begin_if0_real)(void*,int,void*) = NULL;\nstatic void (*__kmpc_omp_task_complete_if0_real)(void*,int,void*) = NULL;\nstatic int (*__kmpc_omp_taskwait_real)(void*,int) = NULL;\n\nstatic void (*ompc_set_num_threads_real)(int) = NULL;\n\nint intel_kmpc_11_hook_points (int rank)\n{\n\tint count = 0;\n\n\tUNREFERENCED_PARAMETER(rank);\n\n\t/* Careful, do not overwrite the pointer to the real call if DynInst has\n\t   already done it */\n\tif (__kmpc_fork_call_real == NULL)\n\t{\n\t\t/* Obtain @ for __kmpc_fork_call */\n\t\t__kmpc_fork_call_real =\n\t\t\t(void(*)(void*,int,void*,...))\n\t\t\tdlsym (RTLD_NEXT, \"__kmpc_fork_call\");\n\t\tINC_IF_NOT_NULL(__kmpc_fork_call_real,count);\n\t}\n\n\t/* Obtain @ for __kmpc_barrier */\n\t__kmpc_barrier_real =\n\t\t(void(*)(void*,int))\n\t\tdlsym (RTLD_NEXT, \"__kmpc_barrier\");\n\tINC_IF_NOT_NULL(__kmpc_barrier_real,count);\n\n\t/* Obtain @ for __kmpc_critical */\n\t__kmpc_critical_real =\n\t\t(void(*)(void*,int,void*))\n\t\tdlsym (RTLD_NEXT, \"__kmpc_critical\");\n\tINC_IF_NOT_NULL(__kmpc_critical_real,count);\n\n\t/* Obtain @ for __kmpc_end_critical */\n\t__kmpc_end_critical_real =\n\t\t(void(*)(void*,int,void*))\n\t\tdlsym (RTLD_NEXT, \"__kmpc_end_critical\");\n\tINC_IF_NOT_NULL(__kmpc_end_critical_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_next_4 */\n\t__kmpc_dispatch_next_4_real =\n\t\t(int(*)(void*,int,int*,int*,int*,int*))\n\t\tdlsym (RTLD_NEXT, \"__kmpc_dispatch_next_4\");\n\tINC_IF_NOT_NULL(__kmpc_dispatch_next_4_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_next_8 */\n\t__kmpc_dispatch_next_8_real =\n\t\t(int(*)(void*,int,int*,long long *,long long *, long long *))\n\t\tdlsym (RTLD_NEXT, \"__kmpc_dispatch_next_8\");\n\tINC_IF_NOT_NULL(__kmpc_dispatch_next_8_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_next_8 */\n\t__kmpc_single_real =\n\t\t(int(*)(void*,int)) dlsym (RTLD_NEXT, \"__kmpc_single\");\n\tINC_IF_NOT_NULL(__kmpc_single_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_next_8 */\n\t__kmpc_end_single_real =\n\t\t(void(*)(void*,int)) dlsym (RTLD_NEXT, \"__kmpc_end_single\");\n\tINC_IF_NOT_NULL(__kmpc_end_single_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_init_4 */\n\t__kmpc_dispatch_init_4_real =\n\t\t(void(*)(void*,int,int,int,int,int,int)) dlsym (RTLD_NEXT, \"__kmpc_dispatch_init_4\");\n\tINC_IF_NOT_NULL(__kmpc_dispatch_init_4_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_init_8 */\n\t__kmpc_dispatch_init_8_real =\n\t\t(void(*)(void*,int,int,long long,long long,long long,long long)) dlsym (RTLD_NEXT, \"__kmpc_dispatch_init_8\");\n\tINC_IF_NOT_NULL(__kmpc_dispatch_init_8_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_fini_4 */\n\t__kmpc_dispatch_fini_4_real =\n\t\t(void(*)(void*,int)) dlsym (RTLD_NEXT, \"__kmpc_dispatch_fini_4\");\n\tINC_IF_NOT_NULL(__kmpc_dispatch_fini_4_real,count);\n\n\t/* Obtain @ for __kmpc_dispatch_fini_8 */\n\t__kmpc_dispatch_fini_8_real =\n\t\t(void(*)(void*,long long)) dlsym (RTLD_NEXT, \"__kmpc_dispatch_fini_8\");\n\tINC_IF_NOT_NULL(__kmpc_dispatch_fini_8_real,count);\n\n\t/* Obtain @ for __kmpc_omp_task_alloc */\n\t__kmpc_omp_task_alloc_real =\n\t\t(void*(*)(void*,int,int,size_t,size_t,void*)) dlsym (RTLD_NEXT, \"__kmpc_omp_task_alloc\");\n\tINC_IF_NOT_NULL(__kmpc_omp_task_alloc_real, count);\n\n\t/* Obtain @ for __kmpc_omp_task_begin_if0 */\n\t__kmpc_omp_task_begin_if0_real =\n\t\t(void(*)(void*,int,void*)) dlsym (RTLD_NEXT, \"__kmpc_omp_task_begin_if0\");\n\tINC_IF_NOT_NULL(__kmpc_omp_task_begin_if0_real, count);\n\n\t/* Obtain @ for __kmpc_omp_task_complete_if0 */\n\t__kmpc_omp_task_complete_if0_real =\n\t\t(void(*)(void*,int,void*)) dlsym (RTLD_NEXT, \"__kmpc_omp_task_complete_if0\");\n\tINC_IF_NOT_NULL(__kmpc_omp_task_complete_if0_real, count);\n\n\t/* Obtain @ for __kmpc_omp_taskwait */\n\t__kmpc_omp_taskwait_real = (int(*)(void*,int)) dlsym (RTLD_NEXT, \"__kmpc_omp_taskwait\");\n\tINC_IF_NOT_NULL(__kmpc_omp_taskwait_real, count);\n\n\t/* Obtain @ for ompc_set_num_threads */\n\tompc_set_num_threads_real =\n\t\t(void(*)(int)) dlsym (RTLD_NEXT, \"ompc_set_num_threads\");\n\tINC_IF_NOT_NULL(ompc_set_num_threads_real, count);\n\n\t/* Any hook point? */\n\treturn count > 0;\n}\n\nstatic void *par_func;\n\n#include \"intel-kmpc-11-intermediate.c\"\n\nvoid Extrae_intel_kmpc_runtime_init_dyninst (void *fork_call)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\" DEBUG: Extrae_intel_kmpc_runtime_init_dyninst:\\n\");\n\tfprintf (stderr, PACKAGE_NAME\" DEBUG: fork_call = %p\\n\", fork_call);\n#endif\n\n\t__kmpc_fork_call_real = (void(*)(void*,int,void*,...)) fork_call;\n}\n\n/*\n * kmpc_fork_call / kmpc_fork_call_extrae_dyninst\n *   dlsym does not seem to work under dyninst and we can't replace this\n *   function by itself (opposite to MPI, OpenMP does not have something like\n *   PMPI). Thus, we need to pass the address of the original __kmpc_fork_call\n *   (through Extrae_intel_kmpc_runtime_init_dyninst) and let the new \n *   __kmpc_fork_call_extrae_dyninst do the work by finally calling to\n *   __kmpc_fork_call passed.\n */\nvoid __kmpc_fork_call (void *p1, int p2, void *p3, ...)\n{\n\tvoid *params[INTEL_OMP_FUNC_ENTRIES];\n\tva_list ap;\n\tint i;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_fork_call is at %p\\n\", THREADID, __kmpc_fork_call_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_fork_call params %p %d %p (and more to come ... )\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tif (__kmpc_fork_call_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_ParRegion_Entry ();\n\n\t\t/* Grab parameters */\n\t\tva_start (ap, p3);\n\t\tfor (i = 0; i < p2; i++)\n\t\t\tparams[i] = va_arg (ap, void*);\n\t\tva_end (ap);\n\n\t\tpar_func = p3;\n\n\t\tswitch (p2)\n\t\t{\n\t\t\t/* This big switch is handled by this file generated automatically by  genstubs-kmpc-11.sh */\n#include \"intel-kmpc-11-intermediate-switch.c\"\n\n\t\t\tdefault:\n\t\t\t\tfprintf (stderr, PACKAGE_NAME\": Error! Unhandled __kmpc_fork_call with %d arguments! Quitting!\\n\"\n\t\t\t\t                 PACKAGE_NAME\":        Recompile Extrae to support this quantity of arguments!\\n\"\n\t\t\t\t\t\t         PACKAGE_NAME\":        Use src/tracer/wrappers/OMP/genstubs-kmpc-11.sh to do so\\n\", p2);\n\t\t\t\texit (-1);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tExtrae_OpenMP_ParRegion_Exit ();\t\n\t}\n\telse if (__kmpc_fork_call_real != NULL && !mpitrace_on)\n\t{\n\t\t/* Grab parameters */\n\t\tva_start (ap, p3);\n\t\tfor (i = 0; i < p2; i++)\n\t\t\tparams[i] = va_arg (ap, void*);\n\t\tva_end (ap);\n\n\t\tpar_func = p3;\n\n\t\tswitch (p2)\n\t\t{\n\t\t\t/* This big switch is handled by this file generated automatically by  genstubs-kmpc-11.sh */\n#include \"intel-kmpc-11-intermediate-switch.c\"\n\n\t\t\tdefault:\n\t\t\t\tfprintf (stderr, PACKAGE_NAME\": Error! Unhandled __kmpc_fork_call with %d arguments! Quitting!\\n\"\n\t\t\t\t                 PACKAGE_NAME\":        Recompile Extrae to support this quantity of arguments!\\n\"\n\t\t\t\t\t\t         PACKAGE_NAME\":        Use src/tracer/wrappers/OMP/genstubs-kmpc-11.sh to do so\\n\", p2);\n\t\t\t\texit (-1);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_fork_call is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\n\nvoid __kmpc_fork_call_extrae_dyninst (void *p1, int p2, void *p3, ...)\n{\n\tvoid *params[INTEL_OMP_FUNC_ENTRIES];\n\tva_list ap;\n\tint i;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_fork_call_extrae_dyninst is at %p\\n\", THREADID, __kmpc_fork_call_extrae_dyninst);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_fork_call is at %p\\n\", THREADID, __kmpc_fork_call_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_fork_call params %p %d %p (and more to come ... )\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tif (__kmpc_fork_call_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_ParRegion_Entry ();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\n\t\t/* Grab parameters */\n\t\tva_start (ap, p3);\n\t\tfor (i = 0; i < p2; i++)\n\t\t\tparams[i] = va_arg (ap, void*);\n\t\tva_end (ap);\n\n\t\tpar_func = p3;\n\n\t\tswitch (p2)\n\t\t{\n\t\t\t/* This big switch is handled by this file generated automatically by  genstubs-kmpc-11.sh */\n#include \"intel-kmpc-11-intermediate-switch.c\"\n\n\t\t\tdefault:\n\t\t\t\tfprintf (stderr, PACKAGE_NAME\": Error! Unhandled __kmpc_fork_call with %d arguments! Quitting!\\n\"\n\t\t\t\t                 PACKAGE_NAME\":        Recompile Extrae to support this quantity of arguments!\\n\"\n\t\t\t\t\t\t         PACKAGE_NAME\":        Use src/tracer/wrappers/OMP/genstubs-kmpc-11.sh to do so\\n\", p2);\n\t\t\t\texit (-1);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tExtrae_OpenMP_ParRegion_Exit ();\t\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (__kmpc_fork_call_real != NULL && !mpitrace_on)\n\t{\n\t\t/* Grab parameters */\n\t\tva_start (ap, p3);\n\t\tfor (i = 0; i < p2; i++)\n\t\t\tparams[i] = va_arg (ap, void*);\n\t\tva_end (ap);\n\n\t\tpar_func = p3;\n\n\t\tswitch (p2)\n\t\t{\n\t\t\t/* This big switch is handled by this file generated automatically by  genstubs-kmpc-11.sh */\n#include \"intel-kmpc-11-intermediate-switch.c\"\n\n\t\t\tdefault:\n\t\t\t\tfprintf (stderr, PACKAGE_NAME\": Error! Unhandled __kmpc_fork_call with %d arguments! Quitting!\\n\"\n\t\t\t\t                 PACKAGE_NAME\":        Recompile Extrae to support this quantity of arguments!\\n\"\n\t\t\t\t\t\t         PACKAGE_NAME\":        Use src/tracer/wrappers/OMP/genstubs-kmpc-11.sh to do so\\n\", p2);\n\t\t\t\texit (-1);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_fork_call is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_barrier (void *p1, int p2)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_barrier is at %p\\n\", THREADID, __kmpc_barrier_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_barrier params %p %d\\n\", THREADID, p1, p2);\n#endif\n\n\tif (__kmpc_barrier_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Barrier_Entry ();\n\t\t__kmpc_barrier_real (p1, p2);\n\t\tExtrae_OpenMP_Barrier_Exit ();\n\t}\n\telse if (__kmpc_barrier_real != NULL && mpitrace_on)\n\t{\n\t\t__kmpc_barrier_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_barrier is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_critical (void *p1, int p2, void *p3)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_critical is at %p\\n\", THREADID, __kmpc_critical_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_critical params %p %d %p\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tif (__kmpc_critical_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Named_Lock_Entry ();\n\t\t__kmpc_critical_real (p1, p2, p3);\n\t\tExtrae_OpenMP_Named_Lock_Exit (p3);\n\t}\n\telse if (__kmpc_critical_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_critical_real (p1, p2, p3);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_critical is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_end_critical (void *p1, int p2, void *p3)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_end_critical is at %p\\n\", THREADID, __kmpc_end_critical_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_end_critical params %p %d %p\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tif (__kmpc_end_critical_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Named_Unlock_Entry (p3);\n\t\t__kmpc_end_critical_real (p1, p2, p3);\n\t\tExtrae_OpenMP_Named_Unlock_Exit ();\n\t}\n\telse if (__kmpc_end_critical_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_end_critical_real (p1, p2, p3);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_critical is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint __kmpc_dispatch_next_4 (void *p1, int p2, int *p3, int *p4, int *p5, int *p6)\n{\n\tint res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_next_4 is at %p\\n\", THREADID, __kmpc_dispatch_next_4_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_next_4 params %p %d %p %p %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (__kmpc_dispatch_next_8_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = __kmpc_dispatch_next_4_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_Work_Exit();\n\n\t\tif (res == 0) /* Alternative to call __kmpc_dispatch_fini_4 which seems not to be called ? */\n\t\t{\n\t\t\tExtrae_OpenMP_UF_Exit ();\n\t\t\tExtrae_OpenMP_DO_Exit ();\n\t\t}\n\t}\n\telse if (__kmpc_dispatch_next_8_real != NULL && !mpitrace_on)\n\t{\n\t\tres = __kmpc_dispatch_next_4_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_dispatch_next_8 is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint __kmpc_dispatch_next_8 (void *p1, int p2, int *p3, long long *p4, long long *p5, long long *p6)\n{\n\tint res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_next_8 is at %p\\n\", THREADID, __kmpc_dispatch_next_8_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_next_8 params %p %d %p %p %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\tif (__kmpc_dispatch_next_8_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = __kmpc_dispatch_next_8_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_Work_Exit();\n\n\t\tif (res == 0) /* Alternative to call __kmpc_dispatch_fini_8 which seems not to be called ? */\n\t\t{\n\t\t\tExtrae_OpenMP_UF_Exit ();\n\t\t\tExtrae_OpenMP_DO_Exit ();\n\t\t}\n\t}\n\telse if (__kmpc_dispatch_next_8_real != NULL && !mpitrace_on)\n\t{\n\t\tres = __kmpc_dispatch_next_8_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_dispatch_next_8 is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint __kmpc_single (void *p1, int p2)\n{\n\tint res = 0;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_single is at %p\\n\", THREADID, __kmpc_single_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_single params %p %d\\n\", THREADID, p1, p2);\n#endif\n\n\tif (__kmpc_single_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Single_Entry ();\n\n\t\tres = __kmpc_single_real (p1, p2);\n\n\t\tif (res) /* If the thread entered in the single region, track it */\n\t\t{\n\t\t\tstruct __kmpv_location_t *loc = (struct __kmpv_location_t*) p1;\n\t\t\t// printf (\"loc->location = %s\\n\", loc->location);\n\t\t\tExtrae_OpenMP_UF_Entry (loc->location);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tExtrae_OpenMP_Single_Exit ();\n\t\t}\n\t}\n\telse if (__kmpc_single_real != NULL && !mpitrace_on)\n\t{\n\t\tres = __kmpc_single_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_critical is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\n\treturn res;\n}\n\nvoid __kmpc_end_single (void *p1, int p2)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_end_single is at %p\\n\", THREADID, __kmpc_single_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_end_single params %p %d\\n\", THREADID, p1, p2);\n#endif\n\n\tif (__kmpc_single_real != NULL && mpitrace_on)\n\t{\n\t\t/* This is only executed by the thread that entered the single region */\n\t\tExtrae_OpenMP_UF_Exit ();\n\t\t__kmpc_end_single_real (p1, p2);\n\t\tExtrae_OpenMP_Single_Exit ();\n\t}\n\telse if (__kmpc_single_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_end_single_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_critical is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_dispatch_init_4 (void *p1, int p2, int p3, int p4, int p5, int p6,\n\tint p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_init_4 is at %p\\n\", THREADID, __kmpc_dispatch_init_4_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_init_4 params are %p %d %d %d %d %d %d\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (__kmpc_dispatch_init_4_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\t__kmpc_dispatch_init_4_real (p1, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_UF_Entry (par_func /*p1*/); /* p1 cannot be translated with bfd? */\n\t}\n\telse if (__kmpc_dispatch_init_4_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_dispatch_init_4_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\":__kmpc_dispatch_init_4 is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_dispatch_init_8 (void *p1, int p2, int p3, long long p4,\n\tlong long p5, long long p6, long long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_init_8 is at %p\\n\", THREADID, __kmpc_dispatch_init_8_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_init_8 params are %p %d %d %lld %lld %lld %lld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (__kmpc_dispatch_init_8_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\t__kmpc_dispatch_init_8_real (p1, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_UF_Entry (par_func /*p1*/); /* p1 cannot be translated with bfd? */\n\t}\n\telse if (__kmpc_dispatch_init_8_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_dispatch_init_8_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\":__kmpc_dispatch_init_8 is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_dispatch_fini_4 (void *p1, int p2)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_fini_4 is at %p\\n\", THREADID, __kmpc_dispatch_fini_4_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_fini_4 params are %p %d\\n\", THREADID, p1, p2);\n#endif\n\n\tif (__kmpc_dispatch_fini_4_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_DO_Exit ();\n\t\t__kmpc_dispatch_fini_4_real (p1, p2);\n\t\tExtrae_OpenMP_UF_Exit ();\n\t}\n\telse if (__kmpc_dispatch_fini_4_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_dispatch_fini_4_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\":__kmpc_dispatch_fini_4 is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_dispatch_fini_8 (void *p1, long long p2)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_fini_8 is at %p\\n\", THREADID, __kmpc_dispatch_fini_8_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_dispatch_fini_8 params are %p %lld\\n\", THREADID, p1, p2);\n#endif\n\n\tif (__kmpc_dispatch_fini_8_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_DO_Exit ();\n\t\t__kmpc_dispatch_fini_8_real (p1, p2);\n\t\tExtrae_OpenMP_UF_Exit ();\n\t}\n\telse if (__kmpc_dispatch_fini_8_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_dispatch_fini_8_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\":__kmpc_dispatch_fini_8 is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\n#define EXTRAE_MAP_KMPC_TASK_SIZE 1024*1024\n\nstruct extrae_map_kmpc_task_function_st\n{\n\tvoid *kmpc_task;\n\tvoid *function;\n};\n\nstatic struct extrae_map_kmpc_task_function_st extrae_map_kmpc_task_function[EXTRAE_MAP_KMPC_TASK_SIZE];\nstatic unsigned extrae_map_kmpc_count = 0;\n\nstatic void __extrae_add_kmpc_task_function (void *kmpc_task, void *function)\n{\n\tunsigned u = 0;\n\n\tpthread_mutex_lock (&extrae_map_kmpc_mutex);\n\tif (extrae_map_kmpc_count < EXTRAE_MAP_KMPC_TASK_SIZE)\n\t{\n\t\t/* Look for a free place in the table */\n\t\twhile (extrae_map_kmpc_task_function[u].kmpc_task != NULL)\n\t\t\tu++;\n\n\t\t/* Add the pair and aggregate to the count */\n\t\textrae_map_kmpc_task_function[u].function = function;\n\t\textrae_map_kmpc_task_function[u].kmpc_task = kmpc_task;\n\t\textrae_map_kmpc_count++;\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": THREAD %d Error number of on-the-fly allocated tasks is above EXTRAE_MAP_KMPC_TASK_SIZE (%s:%d)\\n\", THREADID,  __FILE__, __LINE__);\n\t\texit (0);\n\t}\n\tpthread_mutex_unlock (&extrae_map_kmpc_mutex);\n}\n\nstatic void * __extrae_remove_kmpc_task_function (void *kmpc_task)\n{\n\tvoid *res = NULL;\n\tunsigned u = 0;\n\n\tpthread_mutex_lock (&extrae_map_kmpc_mutex);\n\tif (extrae_map_kmpc_count > 0)\n\t{\n\t\twhile (u < EXTRAE_MAP_KMPC_TASK_SIZE)\n\t\t{\n\t\t\tif (extrae_map_kmpc_task_function[u].kmpc_task == kmpc_task)\n\t\t\t{\n\t\t\t\tres = extrae_map_kmpc_task_function[u].function;\n\t\t\t\textrae_map_kmpc_task_function[u].kmpc_task = NULL;\n\t\t\t\textrae_map_kmpc_task_function[u].function = NULL;\n\t\t\t\textrae_map_kmpc_count--;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tu++;\n\t\t}\n\t}\n\tpthread_mutex_unlock (&extrae_map_kmpc_mutex);\n\n\treturn res;\n}\n\nstatic void __extrae_kmpc_task_substitute (int p1, void *p2)\n{\n\tvoid (*__kmpc_task_substituted_func)(int,void*) = (void(*)(int,void*)) __extrae_remove_kmpc_task_function (p2);\n\n\tif (__kmpc_task_substituted_func != NULL)\n\t{\n\t\tExtrae_OpenMP_TaskUF_Entry (__kmpc_task_substituted_func);\n\t\tBackend_Leave_Instrumentation();\n\t\t__kmpc_task_substituted_func (p1, p2); /* Original code execution */\n\t\tExtrae_OpenMP_Notify_NewExecutedTask();\n\t\tExtrae_OpenMP_TaskUF_Exit ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": THREAD %d did not find task substitution (%s:%d)\\n\", THREADID,  __FILE__, __LINE__);\n\t\texit (0);\n\t}\n}\n\nvoid * __kmpc_omp_task_alloc (void *p1, int p2, int p3, size_t p4, size_t p5, void *p6)\n{\n\tvoid *res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_task_alloc_real is at %p\\n\", THREADID, __kmpc_omp_task_alloc_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_task_alloc params %p %d %d %d %d %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (__kmpc_omp_task_alloc_real != NULL && mpitrace_on)\n\t{\n\t\tExtrae_OpenMP_Task_Entry (p6);\n\t\tExtrae_OpenMP_Notify_NewInstantiatedTask();\n\t\tres = __kmpc_omp_task_alloc_real (p1, p2, p3, p4, p5, __extrae_kmpc_task_substitute);\n\t\t__extrae_add_kmpc_task_function (res, p6);\n\t\tExtrae_OpenMP_Task_Exit ();\n\t}\n\telse if (__kmpc_omp_task_alloc_real != NULL && !mpitrace_on)\n\t{\n\t\tres = __kmpc_omp_task_alloc_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": THREAD %d __kmpc_omp_task_alloc was not hooked. Exiting!\\n\", THREADID);\n\t\texit (0);\n\t}\n\t\n\treturn res;\n}\n\nvoid __kmpc_omp_task_begin_if0 (void *p1, int p2, void *p3)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_task_begin_if0_real is at %p\\n\", THREADID, __kmpc_omp_task_begin_if0_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_task_begin_if0 params %p %d %p\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tvoid (*__kmpc_task_substituted_func)(int,void*) = (void(*)(int,void*)) __extrae_remove_kmpc_task_function (p3);\n\n\tif (__kmpc_task_substituted_func != NULL && mpitrace_on)\n\t{\n\t\tif (__kmpc_omp_task_begin_if0_real != NULL)\n\t\t{\n\t\t\tExtrae_OpenMP_TaskUF_Entry (__kmpc_task_substituted_func);\n\t\t\tExtrae_OpenMP_Notify_NewInstantiatedTask();\n\t\t\tBackend_Leave_Instrumentation();\n\t\t\t__kmpc_omp_task_begin_if0_real (p1, p2, p3);\n\t\t}\n\t\telse\n\t\t{\n\t\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_omp_task_begin_if0 is not hooked! Exiting!!\\n\");\n\t\t\texit (0);\n\t\t}\n\t}\n\telse if (__kmpc_task_substituted_func != NULL && !mpitrace_on)\n\t{\n\t\t __kmpc_omp_task_begin_if0_real (p1, p2, p3);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": THREAD %d did not find task substitution (%s:%d)\\n\", THREADID,  __FILE__, __LINE__);\n\t\texit (0);\n\t}\n}\n\nvoid __kmpc_omp_task_complete_if0 (void *p1, int p2, void *p3)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_task_complete_if0_real is at %p\\n\", THREADID, __kmpc_omp_task_complete_if0_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_task_complete_if0 params %p %d %p\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tif (__kmpc_omp_task_complete_if0_real != NULL && mpitrace_on)\n\t{\n\t\t__kmpc_omp_task_complete_if0_real (p1, p2, p3);\n\t\tExtrae_OpenMP_Notify_NewExecutedTask();\n\t\tExtrae_OpenMP_TaskUF_Exit ();\n\t}\n\telse if (__kmpc_omp_task_complete_if0_real != NULL && !mpitrace_on)\n\t{\n\t\t__kmpc_omp_task_complete_if0_real (p1, p2, p3);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_omp_task_complete_if0 is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint __kmpc_omp_taskwait (void *p1, int p2)\n{\n\tint res;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_taskwait_real is at %p\\n\", THREADID, __kmpc_omp_taskwait_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d: __kmpc_omp_taskwait params %p %d\\n\", THREADID, p1, p2);\n#endif\n\n\tif (__kmpc_omp_taskwait_real != NULL)\n\t{\n\t\tExtrae_OpenMP_Taskwait_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t\tres = __kmpc_omp_taskwait_real (p1, p2);\n\t\tExtrae_OpenMP_Taskwait_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": __kmpc_omp_taskwait is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nvoid ompc_set_num_threads (int p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": ompc_set_num_threads is at %p\\n\", ompc_set_num_threads_real);\n\tfprintf (stderr, PACKAGE_NAME\": ompc_set_num_threads params %d\\n\", p1);\n#endif\n\n\tif (ompc_set_num_threads_real != NULL && mpitrace_on)\n\t{\n\t\tBackend_ChangeNumberOfThreads (p1);\n\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_OpenMP_SetNumThreads_Entry (p1);\n\t\tompc_set_num_threads_real (p1);\n\t\tProbe_OpenMP_SetNumThreads_Exit ();\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (ompc_set_num_threads_real != NULL && !mpitrace_on)\n\t{\n\t\tompc_set_num_threads_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": ompc_set_num_threads is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\n#endif /* PIC */\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/OMP/gnu-libgomp-4.9.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef  __USE_GNU\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#if !defined(HAVE__SYNC_FETCH_AND_ADD)\n# ifdef HAVE_PTHREAD_H\n#  include <pthread.h>\n# endif\n#endif\n\n#include \"wrapper.h\"\n#include \"omp-common.h\"\n\n//#define DEBUG\n\n#if defined(PIC)\n\nstruct openmp_task_st\n{\n\tvoid *p1;\n\tvoid *p2;\n\tvoid *p3;\n\tlong long task_ctr; /* assigned task counter */\n};\n\n/*\nThe nowait issue:\n\nSome OpenMP clauses may include an optional directive called \"nowait\".\nWhen specified, a thread won't wait for the others when finishing its \nparallel region. Our callback pointers (pardo_uf, do_uf, par_uf, \npar_single, par_sections) are set by each thread in a parallel region. \nWhile all threads are simultaneously in the same region, there's no problem.\nHowever, if just one thread moves to the following parallel region and \nmodifies this variable, the other threads end up invoking a wrong callback.\nSo far, I've found this problem in DO clauses, but \"nowait\" can be specified\nin many others. \n\nWhich of the callback pointers below have to be changed for an array of \nfunction pointers?  All of them, maybe? \n*/\n\n/* Pointer to the user function called by a PARALLEL DO REGION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*pardo_uf)(void*) = NULL;\n\n/* Pointer to the user function called by a PARALLEL REGION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*par_uf)(void*) = NULL;\n\n/* Pointer to the user function called by a PARALLEL SECTION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*parsection_uf)(void*) = NULL;\n\n/*\n\tcallme_parsection (void *p1)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Invokes the required iterations of the\n\tparallel do loop.\n*/\nstatic void callme_parsection (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d callme_parsection: par_section() = %p p1 = %p\\n\", THREADID, parsection_uf, p1);\n#endif\n\n\tif (parsection_uf == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error! Invalid initialization of 'par_section'\\n\");\n\t\texit (0);\n\t}\n\n\tExtrae_OpenMP_UF_Entry (parsection_uf);\n\tBackend_setInInstrumentation (THREADID, FALSE); /* We're about to execute user code */\n\tparsection_uf (p1);\n\tBackend_setInInstrumentation (THREADID, TRUE); /* We're about to execute OpenMP code */\n\tExtrae_OpenMP_UF_Exit ();\n}\n/*\n\tcallme_pardo (void *p1)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Invokes the required iterations of the\n\tparallel do loop.\n*/\nstatic void callme_pardo (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d callme_pardo: pardo_uf() = %p p1 = %p\\n\", THREADID, pardo_uf, p1);\n#endif\n\n\tif (pardo_uf == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error! Invalid initialization of 'pardo_uf'\\n\");\n\t\texit (0);\n\t}\n\n\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\tBackend_setInInstrumentation (THREADID, FALSE); /* We're about to execute user code */\n\tpardo_uf (p1);\n\tBackend_setInInstrumentation (THREADID, TRUE); /* We're about to execute OpenMP code */\n\tExtrae_OpenMP_UF_Exit ();\n}\n\n/*\n\tcallme_par (void *)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Each thread runs the very same routine\n\twith different params.\n*/\nstatic void callme_par (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d callme_par: par_uf()=%p p1=%p\\n\", THREADID, par_uf, p1);\n#endif\n\n\tif (par_uf == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error! Invalid initialization of 'par_uf'\\n\");\n\t\texit (0);\n\t}\n\n\tExtrae_OpenMP_UF_Entry (par_uf);\n\tBackend_setInInstrumentation (THREADID, FALSE); /* We're about to execute user code */\n\tpar_uf (p1);\n\tBackend_setInInstrumentation (THREADID, TRUE); /* We're back to execute OpenMP code */\n\tExtrae_OpenMP_UF_Exit ();\n}\n\nstatic void (*GOMP_parallel_real)(void*,void*,unsigned,unsigned) = NULL;\nstatic void (*GOMP_parallel_start_real)(void*,void*,unsigned) = NULL;\nstatic void (*GOMP_parallel_end_real)(void) = NULL;\nstatic void (*GOMP_barrier_real)(void) = NULL;\nstatic void (*GOMP_critical_name_start_real)(void**) = NULL;\nstatic void (*GOMP_critical_name_end_real)(void**) = NULL;\nstatic void (*GOMP_critical_start_real)(void) = NULL;\nstatic void (*GOMP_critical_end_real)(void) = NULL;\nstatic void (*GOMP_atomic_start_real)(void) = NULL;\nstatic void (*GOMP_atomic_end_real)(void) = NULL;\nstatic void (*GOMP_parallel_loop_static_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic void (*GOMP_parallel_loop_runtime_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic void (*GOMP_parallel_loop_dynamic_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic void (*GOMP_parallel_loop_guided_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic int (*GOMP_loop_static_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_runtime_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_dynamic_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_guided_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_static_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic int (*GOMP_loop_runtime_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic int (*GOMP_loop_guided_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic int (*GOMP_loop_dynamic_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic void (*GOMP_loop_end_real)(void) = NULL;\nstatic void (*GOMP_loop_end_nowait_real)(void) = NULL;\nstatic unsigned (*GOMP_sections_start_real)(unsigned) = NULL;\nstatic unsigned (*GOMP_sections_next_real)(void) = NULL;\nstatic void (*GOMP_sections_end_real)(void) = NULL;\nstatic void (*GOMP_sections_end_nowait_real)(void) = NULL;\nstatic void (*GOMP_parallel_sections_start_real)(void*,void*,unsigned,unsigned) = NULL;\nstatic void (*GOMP_task_real)(void*,void*,void*,long,long,int,unsigned,void**) = NULL;\nstatic void (*GOMP_taskwait_real)(void) = NULL;\nstatic void (*GOMP_taskgroup_start_real)(void) = NULL;\nstatic void (*GOMP_taskgroup_end_real)(void) = NULL;\nstatic int (*GOMP_loop_ordered_static_start_real)(long, long, long, long, long *, long *) = NULL;\nstatic int (*GOMP_loop_ordered_runtime_start_real)(long, long, long, long, long *, long *) = NULL;\nstatic int (*GOMP_loop_ordered_dynamic_start_real)(long, long, long, long, long *, long *) = NULL;\nstatic int (*GOMP_loop_ordered_guided_start_real)(long, long, long, long, long *, long *) = NULL;\n#if 0\n/* These seem unnecessary */\nstatic void (*GOMP_ordered_start_real)(void) = NULL;\nstatic void (*GOMP_ordered_end_real)(void) = NULL;\n#endif\n\n#define INC_IF_NOT_NULL(ptr,cnt) (cnt = (ptr == NULL)?cnt:cnt+1)\n\nstatic int gnu_libgomp_4_9_GetOpenMPHookPoints (int rank)\n{\n\tint count = 0;\n\n\tUNREFERENCED_PARAMETER(rank);\n\n\t/* Obtain @ for GOMP_parallel */\n\tGOMP_parallel_real =\n\t\t(void(*)(void*,void*,unsigned,unsigned)) dlsym (RTLD_NEXT, \"GOMP_parallel\");\n\tINC_IF_NOT_NULL(GOMP_parallel_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_start */\n\tGOMP_parallel_start_real =\n\t\t(void(*)(void*,void*,unsigned)) dlsym (RTLD_NEXT, \"GOMP_parallel_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_end */\n\tGOMP_parallel_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_parallel_end\");\n\tINC_IF_NOT_NULL(GOMP_parallel_end_real,count);\n\n\t/* Obtain @ for GOMP_barrier */\n\tGOMP_barrier_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_barrier\");\n\tINC_IF_NOT_NULL(GOMP_barrier_real,count);\n\n\t/* Obtain @ for GOMP_atomic_start */\n\tGOMP_atomic_start_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_atomic_start\");\n\tINC_IF_NOT_NULL(GOMP_atomic_start_real,count);\n\n\t/* Obtain @ for GOMP_atomic_end */\n\tGOMP_atomic_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_atomic_end\");\n\tINC_IF_NOT_NULL(GOMP_atomic_end_real,count);\n\n\t/* Obtain @ for GOMP_critical_enter */\n\tGOMP_critical_start_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_critical_start\");\n\tINC_IF_NOT_NULL(GOMP_critical_start_real,count);\n\n\t/* Obtain @ for GOMP_critical_end */\n\tGOMP_critical_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_critical_end\");\n\tINC_IF_NOT_NULL(GOMP_critical_end_real,count);\n\n\t/* Obtain @ for GOMP_critical_name_start */\n\tGOMP_critical_name_start_real =\n\t\t(void(*)(void**)) dlsym (RTLD_NEXT, \"GOMP_critical_name_start\");\n\tINC_IF_NOT_NULL(GOMP_critical_name_start_real,count);\n\n\t/* Obtain @ for GOMP_critical_name_end */\n\tGOMP_critical_name_end_real =\n\t\t(void(*)(void**)) dlsym (RTLD_NEXT, \"GOMP_critical_name_end\");\n\tINC_IF_NOT_NULL(GOMP_critical_name_end_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_static_start */\n\tGOMP_parallel_loop_static_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_static_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_static_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_runtime_start */\n\tGOMP_parallel_loop_runtime_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_runtime_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_runtime_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_guided_start */\n\tGOMP_parallel_loop_guided_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_guided_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_guided_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_dynamic_start */\n\tGOMP_parallel_loop_dynamic_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_dynamic_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_dynamic_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_static_next */\n\tGOMP_loop_static_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_static_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_static_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_runtime_next */\n\tGOMP_loop_runtime_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_runtime_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_runtime_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_guided_next */\n\tGOMP_loop_guided_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_guided_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_guided_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_dynamic_next */\n\tGOMP_loop_dynamic_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_dynamic_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_dynamic_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_static_start */\n\tGOMP_loop_static_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_static_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_static_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_runtime_start */\n\tGOMP_loop_runtime_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_runtime_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_runtime_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_guided_start */\n\tGOMP_loop_guided_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_guided_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_guided_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_dynamic_start */\n\tGOMP_loop_dynamic_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_dynamic_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_dynamic_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_end */\n\tGOMP_loop_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_loop_end\");\n\tINC_IF_NOT_NULL(GOMP_loop_end_real,count);\n\n\t/* Obtain @ for GOMP_loop_end_nowait */\n\tGOMP_loop_end_nowait_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_loop_end_nowait\");\n\tINC_IF_NOT_NULL(GOMP_loop_end_nowait_real,count);\n\n\t/* Obtain @ for GOMP_sections_end */\n\tGOMP_sections_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_sections_end\");\n\tINC_IF_NOT_NULL(GOMP_sections_end_real,count);\n\n\t/* Obtain @ for GOMP_sections_end_nowait */\n\tGOMP_sections_end_nowait_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_sections_end_nowait\");\n\tINC_IF_NOT_NULL(GOMP_sections_end_nowait_real,count);\n\n\t/* Obtain @ for GOMP_sections_start */\n\tGOMP_sections_start_real =\n\t\t(unsigned(*)(unsigned)) dlsym (RTLD_NEXT, \"GOMP_sections_start\");\n\tINC_IF_NOT_NULL(GOMP_sections_start_real,count);\n\n\t/* Obtain @ for GOMP_sections_next */\n\tGOMP_sections_next_real =\n\t\t(unsigned(*)(void)) dlsym (RTLD_NEXT, \"GOMP_sections_next\");\n\tINC_IF_NOT_NULL(GOMP_sections_next_real,count);\n\n\t/* Obtain @ for GOMP_parallel_sections_start */\n\tGOMP_parallel_sections_start_real = \n\t\t(void(*)(void*,void*,unsigned,unsigned)) dlsym (RTLD_NEXT, \"GOMP_parallel_sections_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_sections_start_real,count);\n\n\t/* Obtain @ for GOMP_task */\n\tGOMP_task_real =\n\t\t(void(*)(void*,void*,void*,long,long,int,unsigned,void**)) dlsym (RTLD_NEXT, \"GOMP_task\");\n\tINC_IF_NOT_NULL(GOMP_task_real,count);\n\n\t/* Obtain @ for GOMP_taskwait */\n\tGOMP_taskwait_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_taskwait\");\n\tINC_IF_NOT_NULL(GOMP_taskwait_real,count);\n\n\t/* Obtain @ for GOMP_taskgroup_start */\n\tGOMP_taskgroup_start_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_taskgroup_start\");\n\tINC_IF_NOT_NULL(GOMP_taskgroup_start_real,count);\n\n\t/* Obtain @ for GOMP_taskgroup_end */\n\tGOMP_taskgroup_end_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_taskgroup_end\");\n\tINC_IF_NOT_NULL(GOMP_taskgroup_end_real,count);\n\n\t/* Obtain @ for GOMP_loop_ordered_static_start */\n\tGOMP_loop_ordered_static_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_static_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_static_start_real, count);\n\n\t/* Obtain @ for GOMP_loop_ordered_runtime_start */\n\tGOMP_loop_ordered_runtime_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_runtime_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_runtime_start_real, count);\n\n\t/* Obtain @ for GOMP_loop_ordered_dynamic_start */\n\tGOMP_loop_ordered_dynamic_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_dynamic_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_dynamic_start_real, count);\n\n\t/* Obtain @ for GOMP_loop_ordered_guided_start */\n\tGOMP_loop_ordered_guided_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_guided_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_guided_start_real, count);\n\n#if 0\n\t/* Obtain @ for GOMP_ordered_start */\n\tGOMP_ordered_start_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_ordered_start\");\n\tINC_IF_NOT_NULL(GOMP_ordered_start_real,count);\n\t\n\t/* Obtain @ for GOMP_ordered_end */\n\tGOMP_ordered_end_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_ordered_end\");\n\tINC_IF_NOT_NULL(GOMP_ordered_end_real,count);\n#endif\n\t\t\n\t/* Any hook point? */\n\treturn count > 0;\n}\n\n/*\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n*/\n\nstatic void callme_task (void *helper_ptr)\n{\n\tstruct openmp_task_st *helper = (* (struct openmp_task_st**)helper_ptr);\n\tvoid (*task_uf)(void*) = (void(*)(void*)) helper->p1;\n\n\tif (helper != NULL)\n\t{\n\t\tExtrae_OpenMP_TaskUF_Entry (helper->p1);\n\t\tExtrae_OpenMP_TaskID (helper->task_ctr);\n\n\t\ttask_uf (helper->p2);\n\t\tif (helper->p3 != NULL)\n\t\t\tfree(helper->p3);\n\t\tfree(helper);\n\n\t\tExtrae_OpenMP_Notify_NewExecutedTask();\n        Extrae_OpenMP_TaskUF_Exit ();\n\t}\n}\n\nstatic volatile long long __GOMP_task_ctr = 1;\n#if !defined(HAVE__SYNC_FETCH_AND_ADD)\nstatic pthread_mutex_t __GOMP_task_ctr_mtx = PTHREAD_MUTEX_INITIALIZER;\n#endif\nvoid GOMP_task (void *p1, void *p2, void *p3, long p4, long p5, int p6, unsigned p7, void **p8)\n{\n\tvoid (*task_cpy)(void*,void*) = (void(*)(void*,void*)) p3;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_task is at %p\\n\", THREADID, GOMP_task_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_task params %p %p %p %ld %ld %d %u %p\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7, p8);\n#endif\n\n\tif (GOMP_task_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Task_Entry (p1);\n\t\tExtrae_OpenMP_Notify_NewInstantiatedTask();\n\n\t\tstruct openmp_task_st *helper = NULL;\n\t\thelper = (struct openmp_task_st *) malloc(sizeof(struct openmp_task_st));\n\t\thelper->p1 = p1;\n\t\thelper->p2 = p2;\n\n\t\tif (p3 != NULL)\n\t\t{\n\t\t\tchar *buf =  malloc(sizeof(char) * (p4 + p5 - 1));\n\t\t\tchar *arg = (char *) (((uintptr_t) buf + p5 - 1)\n\t\t\t            & ~(uintptr_t) (p5 - 1));\n\t\t\ttask_cpy (arg, helper->p2);\n\t\t\thelper->p2 = arg;\n\t\t\t// saved for deallocation purposes, arg is not valid since includes offset\n\t\t\thelper->p3 = buf; \n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar * buf =  malloc(sizeof(char) * (p4 + p5 - 1));\n\t\t\tmemcpy (buf, p2, p4);\n\t\t\thelper->p2 = buf;\n\t\t\t// saved for deallocation purposes, arg is not valid since includes offset\n\t\t\thelper->p3 = buf;\n\t\t}\n\n#if defined(HAVE__SYNC_FETCH_AND_ADD)\n\t\thelper->task_ctr = __sync_fetch_and_add(&__GOMP_task_ctr,1);\n#else\n\t\tpthread_mutex_lock (&__GOMP_task_ctr_mtx);\n\t\thelper->task_ctr = __GOMP_task_ctr++;\n\t\tpthread_mutex_unlock (&__GOMP_task_ctr_mtx);\n#endif\n\n\t\tExtrae_OpenMP_TaskID (helper->task_ctr);\n\n\t\tGOMP_task_real (callme_task, &helper, NULL, sizeof(helper), p5, p6, p7, p8);\n\t\tExtrae_OpenMP_Task_Exit ();\n\t}\n\telse if (GOMP_task_real != NULL)\n\t{\n\t\tGOMP_task_real (p1, p2, p3, p4, p5, p6, p7, p8);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_task is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_taskwait (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_taskwait is at %p\\n\", THREADID, GOMP_taskwait_real);\n#endif\n\n\tif (GOMP_taskwait_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Taskwait_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t\tGOMP_taskwait_real ();\n\t\tExtrae_OpenMP_Taskwait_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (GOMP_taskwait_real != NULL)\n\t{\n\t\tGOMP_taskwait_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_taskwait is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_taskgroup_start (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_taskgroup_start is at %p\\n\", THREADID, GOMP_taskgroup_start_real);\n#endif\n\n\tif (GOMP_taskgroup_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Taskgroup_start_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t\tGOMP_taskgroup_start_real ();\n\t\tExtrae_OpenMP_Taskgroup_start_Exit();\n\t}\n\telse if (GOMP_taskgroup_start_real != NULL)\n\t{\n\t\tGOMP_taskgroup_start_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_taskgroup_start is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_taskgroup_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_taskgroup_end is at %p\\n\", THREADID, GOMP_taskgroup_end_real);\n#endif\n\n\tif (GOMP_taskgroup_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Taskgroup_end_Entry();\n\t\tGOMP_taskgroup_end_real ();\n\t\tExtrae_OpenMP_Taskgroup_end_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (GOMP_taskgroup_end_real != NULL)\n\t{\n\t\tGOMP_taskgroup_end_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_taskgroup_end is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_sections_start (void *p1, void *p2, unsigned p3, unsigned p4)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_sections_start is at %p\\n\", THREADID, GOMP_sections_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_sections params %p %p %u %u \\n\", THREADID, p1, p2, p3, p4);\n#endif\n\n\tif (GOMP_parallel_sections_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tparsection_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParSections_Entry();\n\t\tGOMP_parallel_sections_start_real (callme_parsection, p2, p3, p4);\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (p1);\n\n\t\t/* Extrae_OpenMP_ParSections_Exit(); */\n\t}\n\telse if (GOMP_parallel_sections_start_real != NULL)\n\t{\n\t\tGOMP_parallel_sections_start_real (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_sections_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nunsigned GOMP_sections_start (unsigned p1)\n{\n\tunsigned res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_start is at %p\\n\", THREADID, GOMP_sections_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections params %u\\n\", THREADID, p1);\n#endif\n\n\tif (GOMP_sections_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Section_Entry();\n\t\tres = GOMP_sections_start_real (p1);\n\t\tExtrae_OpenMP_Section_Exit();\n\t}\n\telse if (GOMP_sections_start_real != NULL)\n\t{\n\t\tres = GOMP_sections_start_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nunsigned GOMP_sections_next (void)\n{\n\tunsigned res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_next is at %p\\n\", THREADID, GOMP_sections_next_real);\n#endif\n\n\tif (GOMP_sections_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_sections_next_real();\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_sections_next_real != NULL)\n\t{\n\t\tres = GOMP_sections_next_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nvoid GOMP_sections_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_end is at %p\\n\", THREADID, GOMP_sections_end_real);\n#endif\n\n\tif (GOMP_sections_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_Wait_Entry();\n\t\tGOMP_sections_end_real();\n\t\tExtrae_OpenMP_Join_Wait_Exit();\n\t}\n\telse if (GOMP_sections_end_real != NULL)\n\t{\n\t\tGOMP_sections_end_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_sections_end_nowait (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_end_nowait is at %p\\n\", THREADID, GOMP_sections_end_nowait_real);\n#endif\n\n\tif (GOMP_sections_end_nowait_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_NoWait_Entry();\n\t\tGOMP_sections_end_nowait_real();\n\t\tExtrae_OpenMP_Join_NoWait_Exit();\n\t}\n\telse if (GOMP_sections_end_nowait_real != NULL)\n\t{\n\t\tGOMP_sections_end_nowait_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_end_nowait is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_loop_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_end is at %p\\n\", THREADID, GOMP_loop_end_real);\n#endif\n\n\tif (GOMP_loop_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_Wait_Entry();\n\t\tGOMP_loop_end_real();\n\t\tExtrae_OpenMP_Join_Wait_Exit();\n\t\tExtrae_OpenMP_UF_Exit ();\n\t\tExtrae_OpenMP_DO_Exit ();\t\n\t}\n\telse if (GOMP_loop_end_real != NULL)\n\t{\n\t\tGOMP_loop_end_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_loop_end_nowait (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_end_nowait is at %p\\n\", THREADID, GOMP_loop_end_nowait_real);\n#endif\n\n\tif (GOMP_loop_end_nowait_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_NoWait_Entry();\n\t\tGOMP_loop_end_nowait_real();\n\t\tExtrae_OpenMP_Join_NoWait_Exit();\n\t\tExtrae_OpenMP_UF_Exit ();\n\t\tExtrae_OpenMP_DO_Exit ();\t\n\t}\n\telse if (GOMP_loop_end_nowait_real != NULL)\n\t{\n\t\tGOMP_loop_end_nowait_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_end_nowait is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint GOMP_loop_static_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_static_start is at %p\\n\", THREADID, GOMP_loop_static_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_static_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_static_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_static_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_static_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_runtime_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_runtime_start is at %p\\n\", THREADID, GOMP_loop_runtime_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_runtime_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_runtime_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_runtime_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_runtime_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_runtime_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_guided_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_guided_start is at %p\\n\", THREADID, GOMP_loop_guided_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_guided_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_guided_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_guided_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_guided_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_guided_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_dynamic_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_dynamic_start is at %p\\n\", THREADID, GOMP_loop_dynamic_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_dynamic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_dynamic_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_dynamic_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_dynamic_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_dynamic_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nvoid GOMP_parallel_loop_static_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_static_start is at %p\\n\", THREADID, GOMP_parallel_loop_static_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_static_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_static_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_static_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_static_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_loop_runtime_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_runtime_start is at %p\\n\", THREADID, GOMP_parallel_loop_runtime_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_runtime_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_runtime_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_runtime_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_runtime_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_runtime_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_loop_guided_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_guided_start is at %p\\n\", THREADID, GOMP_parallel_loop_guided_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_guided_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_static_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_guided_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_guided_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_loop_dynamic_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_dynamic_start is at %p\\n\", THREADID, GOMP_parallel_loop_dynamic_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_dynamic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_dynamic_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_dynamic_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_dynamic_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_dynamic_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint GOMP_loop_static_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_static_next is at %p\\n\", THREADID, GOMP_loop_static_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_static_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_static_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_static_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_static_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_static_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_runtime_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_runtime_next is at %p\\n\", THREADID, GOMP_loop_runtime_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_runtime_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_runtime_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_runtime_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_runtime_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_runtime_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_guided_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_guided_next is at %p\\n\", THREADID, GOMP_loop_guided_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_guided_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_guided_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_guided_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_guided_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_guided_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_dynamic_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_dynamic_next is at %p\\n\", THREADID, GOMP_loop_dynamic_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_dynamic_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_dynamic_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_dynamic_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_dynamic_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_dynamic_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nvoid GOMP_parallel (void *p1, void *p2, unsigned p3, unsigned p4)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel is at %p\\n\", THREADID, GOMP_parallel_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel params %p %p %u %u\\n\", THREADID, p1, p2, p3, p4);\n#endif\n\n\tif (GOMP_parallel_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_ParRegion_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\n\t\t/* Set the pointer to the correct PARALLEL user function */\n\t\tpar_uf = (void(*)(void*))p1;\n\t\tGOMP_parallel_real (callme_par, p2, p3, p4);\n\n\t\tExtrae_OpenMP_ParRegion_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (GOMP_parallel_real != NULL)\n\t{\n\t\tGOMP_parallel_real (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_start (void *p1, void *p2, unsigned p3)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_start is at %p\\n\", THREADID, GOMP_parallel_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_start params %p %p %u\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tif (GOMP_parallel_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL user function */\n\t\tpar_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParRegion_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\n\t\tGOMP_parallel_start_real (callme_par, p2, p3);\n\n\t\t/* GCC/libgomp does not execute callme_par per root thread, emit\n\t\t   the required event here - call Backend to get a new time! */\n\t\tExtrae_OpenMP_UF_Entry (p1);\n\t}\n\telse if (GOMP_parallel_start_real != NULL)\n\t{\n\t\tGOMP_parallel_start_real (p1, p2, p3);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_end is at %p\\n\", THREADID, GOMP_parallel_end_real);\n#endif\n\n\tif (GOMP_parallel_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_UF_Exit ();\n\t\tGOMP_parallel_end_real ();\n\t\tExtrae_OpenMP_ParRegion_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (GOMP_parallel_start_real != NULL)\n\t{\n\t\tGOMP_parallel_end_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_barrier (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_barrier is at %p\\n\", THREADID, GOMP_barrier_real);\n#endif\n\n\tif (GOMP_barrier_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Barrier_Entry ();\n\t\tGOMP_barrier_real ();\n\t\tExtrae_OpenMP_Barrier_Exit ();\n\t}\n\telse if (GOMP_barrier_real != NULL)\n\t{\n\t\tGOMP_barrier_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_barrier is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_critical_name_start (void **p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_start is at %p\\n\", THREADID, GOMP_critical_name_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_start params %p\\n\", THREADID, p1);\n#endif\n\n\tif (GOMP_critical_name_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Named_Lock_Entry();\n\t\tGOMP_critical_name_start_real (p1);\n\t\tExtrae_OpenMP_Named_Lock_Exit(p1);\n\t}\n\telse if (GOMP_critical_name_start_real != NULL)\n\t{\n\t\tGOMP_critical_name_start_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_name_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_critical_name_end (void **p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_end is at %p\\n\", THREADID, GOMP_critical_name_end_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_end params %p\\n\", THREADID, p1);\n#endif\n\n\tif (GOMP_critical_name_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Named_Unlock_Entry(p1);\n\t\tGOMP_critical_name_end_real (p1);\n\t\tExtrae_OpenMP_Named_Unlock_Exit();\n\t}\n\telse if (GOMP_critical_name_end_real != NULL)\n\t{\n\t\tGOMP_critical_name_end_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_name_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\n\nvoid GOMP_critical_start (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_start is at %p\\n\", THREADID, GOMP_critical_start_real);\n#endif\n\n\tif (GOMP_critical_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Lock_Entry();\n\t\tGOMP_critical_start_real();\n\t\tExtrae_OpenMP_Unnamed_Lock_Exit();\n\t}\n\telse if (GOMP_critical_start_real != NULL)\n\t{\n\t\tGOMP_critical_start_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_critical_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_end is at %p\\n\", THREADID, GOMP_critical_end_real);\n#endif\n\n\tif (GOMP_critical_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Unlock_Entry();\n\t\tGOMP_critical_end_real ();\n\t\tExtrae_OpenMP_Unnamed_Unlock_Exit();\n\t}\n\telse if (GOMP_critical_end_real != NULL)\n\t{\n\t\tGOMP_critical_end_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_atomic_start (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_atomic_start is at %p\\n\", THREADID, GOMP_atomic_start_real);\n#endif\n\n\tif (GOMP_atomic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Lock_Entry();\n\t\tGOMP_atomic_start_real();\n\t\tExtrae_OpenMP_Unnamed_Lock_Exit();\n\t}\n\telse if (GOMP_atomic_start_real != NULL)\n\t{\n\t\tGOMP_atomic_start_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_atomic_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_atomic_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_atomic_end is at %p\\n\", THREADID, GOMP_atomic_end_real);\n#endif\n\n\tif (GOMP_atomic_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Unlock_Entry();\n\t\tGOMP_atomic_end_real ();\n\t\tExtrae_OpenMP_Unnamed_Unlock_Exit();\n\t}\n\telse if (GOMP_atomic_end_real != NULL)\n\t{\n\t\tGOMP_atomic_end_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_atomic_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint GOMP_loop_ordered_static_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_static_start %p\\n\", THREADID, GOMP_loop_ordered_static_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_static_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_static_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_static_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_static_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_ordered_runtime_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_runtime_start %p\\n\", THREADID, GOMP_loop_ordered_runtime_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_runtime_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_runtime_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_runtime_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_runtime_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_runtime_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_ordered_dynamic_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_dynamic_start %p\\n\", THREADID, GOMP_loop_ordered_dynamic_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_dynamic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_dynamic_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_dynamic_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_dynamic_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_dynamic_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_ordered_guided_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_guided_start %p\\n\", THREADID, GOMP_loop_ordered_guided_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_guided_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_guided_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_guided_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_guided_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_guided_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\n#if 0\n/* These seem unnecessary */\nvoid GOMP_ordered_start (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_ordered_start is at %p\\n\", THREADID, GOMP_ordered_start_real);\n#endif\n\tGOMP_ordered_start_real ();\n}\n\nvoid GOMP_ordered_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_ordered_end is at %p\\n\", THREADID, GOMP_ordered_end_real);\n#endif\n\tGOMP_ordered_end_real();\n}\n#endif\n\nextern int omp_get_max_threads();\n\nint gnu_libgomp_4_9_hook_points (int ntask)\n{\n\treturn gnu_libgomp_4_9_GetOpenMPHookPoints (ntask);\n}\n\n#endif /* PIC */\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/OMP/gnu-libgomp-4.2.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef  __USE_GNU\n#endif\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_STDLIB_H\n# include <stdlib.h>\n#endif\n#if !defined(HAVE__SYNC_FETCH_AND_ADD)\n# ifdef HAVE_PTHREAD_H\n#  include <pthread.h>\n# endif\n#endif\n\n#include \"wrapper.h\"\n#include \"omp-common.h\"\n\n// #define DEBUG\n\n#if defined(PIC)\n\nstruct openmp_task_st\n{\n\tvoid *p1;\n\tvoid *p2;\n\tvoid *p3;\n\tlong long task_ctr; /* assigned task counter */\n};\n\n/*\nThe nowait issue:\n\nSome OpenMP clauses may include an optional directive called \"nowait\".\nWhen specified, a thread won't wait for the others when finishing its \nparallel region. Our callback pointers (pardo_uf, do_uf, par_uf, \npar_single, par_sections) are set by each thread in a parallel region. \nWhile all threads are simultaneously in the same region, there's no problem.\nHowever, if just one thread moves to the following parallel region and \nmodifies this variable, the other threads end up invoking a wrong callback.\nSo far, I've found this problem in DO clauses, but \"nowait\" can be specified\nin many others. \n\nWhich of the callback pointers below have to be changed for an array of \nfunction pointers?  All of them, maybe? \n*/\n\n/* Pointer to the user function called by a PARALLEL DO REGION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*pardo_uf)(void*) = NULL;\n\n/* Pointer to the user function called by a PARALLEL REGION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*par_uf)(void*) = NULL;\n\n/* Pointer to the user function called by a PARALLEL SECTION */\n/* FIXME: Array of function pointers indexed by thread? (nowait issue) */\nstatic void (*parsection_uf)(void*) = NULL;\n\n/*\n\tcallme_parsection (void *p1)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Invokes the required iterations of the\n\tparallel do loop.\n*/\nstatic void callme_parsection (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d callme_parsection: par_section() = %p p1 = %p\\n\", THREADID, parsection_uf, p1);\n#endif\n\n\tif (parsection_uf == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error! Invalid initialization of 'par_section'\\n\");\n\t\texit (0);\n\t}\n\n\tExtrae_OpenMP_UF_Entry (parsection_uf);\n\tBackend_setInInstrumentation (THREADID, FALSE); /* We're about to execute user code */\n\tparsection_uf (p1);\n\tBackend_setInInstrumentation (THREADID, TRUE); /* We're about to execute OpenMP code */\n\tExtrae_OpenMP_UF_Exit ();\n}\n/*\n\tcallme_pardo (void *p1)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Invokes the required iterations of the\n\tparallel do loop.\n*/\nstatic void callme_pardo (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d callme_pardo: pardo_uf() = %p p1 = %p\\n\", THREADID, pardo_uf, p1);\n#endif\n\n\tif (pardo_uf == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error! Invalid initialization of 'pardo_uf'\\n\");\n\t\texit (0);\n\t}\n\n\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\tBackend_setInInstrumentation (THREADID, FALSE); /* We're about to execute user code */\n\tpardo_uf (p1);\n\tBackend_setInInstrumentation (THREADID, TRUE); /* We're about to execute OpenMP code */\n\tExtrae_OpenMP_UF_Exit ();\n}\n\n/*\n\tcallme_par (void *)\n\tWith the same header as the routine to be called by the SMP runtime, just\n\tacts as a trampoline to this call. Each thread runs the very same routine\n\twith different params.\n*/\nstatic void callme_par (void *p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d callme_par: par_uf()=%p p1=%p\\n\", THREADID, par_uf, p1);\n#endif\n\n\tif (par_uf == NULL)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": Error! Invalid initialization of 'par_uf'\\n\");\n\t\texit (0);\n\t}\n\n\tExtrae_OpenMP_UF_Entry (par_uf);\n\tBackend_setInInstrumentation (THREADID, FALSE); /* We're about to execute user code */\n\tpar_uf (p1);\n\tBackend_setInInstrumentation (THREADID, TRUE); /* We're back to execute OpenMP code */\n\tExtrae_OpenMP_UF_Exit ();\n}\n\nstatic void (*GOMP_parallel_real)(void*,void*,unsigned,unsigned) = NULL;\nstatic void (*GOMP_parallel_start_real)(void*,void*,unsigned) = NULL;\nstatic void (*GOMP_parallel_end_real)(void) = NULL;\nstatic void (*GOMP_barrier_real)(void) = NULL;\nstatic void (*GOMP_critical_name_start_real)(void**) = NULL;\nstatic void (*GOMP_critical_name_end_real)(void**) = NULL;\nstatic void (*GOMP_critical_start_real)(void) = NULL;\nstatic void (*GOMP_critical_end_real)(void) = NULL;\nstatic void (*GOMP_atomic_start_real)(void) = NULL;\nstatic void (*GOMP_atomic_end_real)(void) = NULL;\nstatic void (*GOMP_parallel_loop_static_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic void (*GOMP_parallel_loop_runtime_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic void (*GOMP_parallel_loop_dynamic_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic void (*GOMP_parallel_loop_guided_start_real)(void*,void*,unsigned, long, long, long, long) = NULL;\nstatic int (*GOMP_loop_static_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_runtime_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_dynamic_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_guided_next_real)(long*,long*) = NULL;\nstatic int (*GOMP_loop_static_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic int (*GOMP_loop_runtime_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic int (*GOMP_loop_guided_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic int (*GOMP_loop_dynamic_start_real)(long,long,long,long,long*,long*) = NULL;\nstatic void (*GOMP_loop_end_real)(void) = NULL;\nstatic void (*GOMP_loop_end_nowait_real)(void) = NULL;\nstatic unsigned (*GOMP_sections_start_real)(unsigned) = NULL;\nstatic unsigned (*GOMP_sections_next_real)(void) = NULL;\nstatic void (*GOMP_sections_end_real)(void) = NULL;\nstatic void (*GOMP_sections_end_nowait_real)(void) = NULL;\nstatic void (*GOMP_parallel_sections_start_real)(void*,void*,unsigned,unsigned) = NULL;\nstatic void (*GOMP_task_real)(void*,void*,void*,long,long,int,unsigned) = NULL;\nstatic void (*GOMP_taskwait_real)(void) = NULL;\nstatic int (*GOMP_loop_ordered_static_start_real)(long, long, long, long, long *, long *) = NULL;\nstatic int (*GOMP_loop_ordered_runtime_start_real)(long, long, long, long, long *, long *) = NULL;\nstatic int (*GOMP_loop_ordered_dynamic_start_real)(long, long, long, long, long *, long *) = NULL;\nstatic int (*GOMP_loop_ordered_guided_start_real)(long, long, long, long, long *, long *) = NULL;\n#if 0\n/* These seem unnecessary */\nstatic void (*GOMP_ordered_start_real)(void) = NULL;\nstatic void (*GOMP_ordered_end_real)(void) = NULL;\n#endif\n\n#define INC_IF_NOT_NULL(ptr,cnt) (cnt = (ptr == NULL)?cnt:cnt+1)\n\nstatic int gnu_libgomp_4_2_GetOpenMPHookPoints (int rank)\n{\n\tint count = 0;\n\n\tUNREFERENCED_PARAMETER(rank);\n\n\t/* Obtain @ for GOMP_parallel */\n\tGOMP_parallel_real =\n\t\t(void(*)(void*,void*,unsigned,unsigned)) dlsym (RTLD_NEXT, \"GOMP_parallel\");\n\tINC_IF_NOT_NULL(GOMP_parallel_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_start */\n\tGOMP_parallel_start_real =\n\t\t(void(*)(void*,void*,unsigned)) dlsym (RTLD_NEXT, \"GOMP_parallel_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_end */\n\tGOMP_parallel_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_parallel_end\");\n\tINC_IF_NOT_NULL(GOMP_parallel_end_real,count);\n\n\t/* Obtain @ for GOMP_barrier */\n\tGOMP_barrier_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_barrier\");\n\tINC_IF_NOT_NULL(GOMP_barrier_real,count);\n\n\t/* Obtain @ for GOMP_atomic_start */\n\tGOMP_atomic_start_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_atomic_start\");\n\tINC_IF_NOT_NULL(GOMP_atomic_start_real,count);\n\n\t/* Obtain @ for GOMP_atomic_end */\n\tGOMP_atomic_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_atomic_end\");\n\tINC_IF_NOT_NULL(GOMP_atomic_end_real,count);\n\n\t/* Obtain @ for GOMP_critical_enter */\n\tGOMP_critical_start_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_critical_start\");\n\tINC_IF_NOT_NULL(GOMP_critical_start_real,count);\n\n\t/* Obtain @ for GOMP_critical_end */\n\tGOMP_critical_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_critical_end\");\n\tINC_IF_NOT_NULL(GOMP_critical_end_real,count);\n\n\t/* Obtain @ for GOMP_critical_name_start */\n\tGOMP_critical_name_start_real =\n\t\t(void(*)(void**)) dlsym (RTLD_NEXT, \"GOMP_critical_name_start\");\n\tINC_IF_NOT_NULL(GOMP_critical_name_start_real,count);\n\n\t/* Obtain @ for GOMP_critical_name_end */\n\tGOMP_critical_name_end_real =\n\t\t(void(*)(void**)) dlsym (RTLD_NEXT, \"GOMP_critical_name_end\");\n\tINC_IF_NOT_NULL(GOMP_critical_name_end_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_static_start */\n\tGOMP_parallel_loop_static_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_static_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_static_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_runtime_start */\n\tGOMP_parallel_loop_runtime_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_runtime_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_runtime_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_guided_start */\n\tGOMP_parallel_loop_guided_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_guided_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_guided_start_real,count);\n\n\t/* Obtain @ for GOMP_parallel_loop_dynamic_start */\n\tGOMP_parallel_loop_dynamic_start_real =\n\t\t(void(*)(void*,void*,unsigned, long, long, long, long)) dlsym (RTLD_NEXT, \"GOMP_parallel_loop_dynamic_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_loop_dynamic_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_static_next */\n\tGOMP_loop_static_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_static_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_static_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_runtime_next */\n\tGOMP_loop_runtime_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_runtime_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_runtime_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_guided_next */\n\tGOMP_loop_guided_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_guided_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_guided_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_dynamic_next */\n\tGOMP_loop_dynamic_next_real =\n\t\t(int(*)(long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_dynamic_next\");\n\tINC_IF_NOT_NULL(GOMP_loop_dynamic_next_real,count);\n\n\t/* Obtain @ for GOMP_loop_static_start */\n\tGOMP_loop_static_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_static_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_static_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_runtime_start */\n\tGOMP_loop_runtime_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_runtime_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_runtime_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_guided_start */\n\tGOMP_loop_guided_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_guided_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_guided_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_dynamic_start */\n\tGOMP_loop_dynamic_start_real =\n\t\t(int(*)(long,long,long,long,long*,long*)) dlsym (RTLD_NEXT, \"GOMP_loop_dynamic_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_dynamic_start_real,count);\n\n\t/* Obtain @ for GOMP_loop_end */\n\tGOMP_loop_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_loop_end\");\n\tINC_IF_NOT_NULL(GOMP_loop_end_real,count);\n\n\t/* Obtain @ for GOMP_loop_end_nowait */\n\tGOMP_loop_end_nowait_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_loop_end_nowait\");\n\tINC_IF_NOT_NULL(GOMP_loop_end_nowait_real,count);\n\n\t/* Obtain @ for GOMP_sections_end */\n\tGOMP_sections_end_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_sections_end\");\n\tINC_IF_NOT_NULL(GOMP_sections_end_real,count);\n\n\t/* Obtain @ for GOMP_sections_end_nowait */\n\tGOMP_sections_end_nowait_real =\n\t\t(void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_sections_end_nowait\");\n\tINC_IF_NOT_NULL(GOMP_sections_end_nowait_real,count);\n\n\t/* Obtain @ for GOMP_sections_start */\n\tGOMP_sections_start_real =\n\t\t(unsigned(*)(unsigned)) dlsym (RTLD_NEXT, \"GOMP_sections_start\");\n\tINC_IF_NOT_NULL(GOMP_sections_start_real,count);\n\n\t/* Obtain @ for GOMP_sections_next */\n\tGOMP_sections_next_real =\n\t\t(unsigned(*)(void)) dlsym (RTLD_NEXT, \"GOMP_sections_next\");\n\tINC_IF_NOT_NULL(GOMP_sections_next_real,count);\n\n\t/* Obtain @ for GOMP_parallel_sections_start */\n\tGOMP_parallel_sections_start_real = \n\t\t(void(*)(void*,void*,unsigned,unsigned)) dlsym (RTLD_NEXT, \"GOMP_parallel_sections_start\");\n\tINC_IF_NOT_NULL(GOMP_parallel_sections_start_real,count);\n\n\t/* Obtain @ for GOMP_task */\n\tGOMP_task_real =\n\t\t(void(*)(void*,void*,void*,long,long,int,unsigned)) dlsym (RTLD_NEXT, \"GOMP_task\");\n\tINC_IF_NOT_NULL(GOMP_task_real,count);\n\n\t/* Obtain @ for GOMP_taskwait */\n\tGOMP_taskwait_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_taskwait\");\n\tINC_IF_NOT_NULL(GOMP_taskwait_real,count);\n\n\t/* Obtain @ for GOMP_loop_ordered_static_start */\n\tGOMP_loop_ordered_static_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_static_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_static_start_real, count);\n\n\t/* Obtain @ for GOMP_loop_ordered_runtime_start */\n\tGOMP_loop_ordered_runtime_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_runtime_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_runtime_start_real, count);\n\n\t/* Obtain @ for GOMP_loop_ordered_dynamic_start */\n\tGOMP_loop_ordered_dynamic_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_dynamic_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_dynamic_start_real, count);\n\n\t/* Obtain @ for GOMP_loop_ordered_guided_start */\n\tGOMP_loop_ordered_guided_start_real = \n\t\t(int(*)(long, long, long, long, long *, long *)) dlsym (RTLD_NEXT, \"GOMP_loop_ordered_guided_start\");\n\tINC_IF_NOT_NULL(GOMP_loop_ordered_guided_start_real, count);\n\n#if 0\n\t/* Obtain @ for GOMP_ordered_start */\n\tGOMP_ordered_start_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_ordered_start\");\n\tINC_IF_NOT_NULL(GOMP_ordered_start_real,count);\n\t\n\t/* Obtain @ for GOMP_ordered_end */\n\tGOMP_ordered_end_real = (void(*)(void)) dlsym (RTLD_NEXT, \"GOMP_ordered_end\");\n\tINC_IF_NOT_NULL(GOMP_ordered_end_real,count);\n#endif\n\t\t\n\t/* Any hook point? */\n\treturn count > 0;\n}\n\n/*\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\tINJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n*/\n\nstatic void callme_task (void *helper_ptr)\n{\n\tstruct openmp_task_st *helper = (* (struct openmp_task_st**)helper_ptr);\n\tvoid (*task_uf)(void*) = (void(*)(void*)) helper->p1;\n\n\tif (helper != NULL)\n\t{\n\t\tExtrae_OpenMP_TaskUF_Entry (helper->p1);\n\t\tExtrae_OpenMP_TaskID (helper->task_ctr);\n\n\t\ttask_uf (helper->p2);\n\t\tif (helper->p3 != NULL)\n\t\t\tfree(helper->p3);\n\t\tfree(helper);\n\n\t\tExtrae_OpenMP_Notify_NewExecutedTask();\n\t\tExtrae_OpenMP_TaskUF_Exit ();\n\t}\n}\n\nstatic volatile long long __GOMP_task_ctr = 1;\n#if !defined(HAVE__SYNC_FETCH_AND_ADD)\nstatic pthread_mutex_t __GOMP_task_ctr_mtx = PTHREAD_MUTEX_INITIALIZER;\n#endif\nvoid GOMP_task (void *p1, void *p2, void *p3, long p4, long p5, int p6, unsigned p7)\n{\n\tvoid (*task_cpy)(void*,void*) = (void(*)(void*,void*)) p3;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_task is at %p\\n\", THREADID, GOMP_task_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_task params %p %p %p %ld %ld %ld %d %u\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_task_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Task_Entry (p1);\n\t\tExtrae_OpenMP_Notify_NewInstantiatedTask();\n\n\t\tstruct openmp_task_st *helper = NULL;\n\t\thelper = (struct openmp_task_st *) malloc(sizeof(struct openmp_task_st));\n\t\thelper->p1 = p1;\n\t\thelper->p2 = p2;\n\n\t\tif (p3 != NULL)\n\t\t{\n\t\t\tchar *buf =  malloc(sizeof(char) * (p4 + p5 - 1));\n\t\t\tchar *arg = (char *) (((uintptr_t) buf + p5 - 1)\n\t\t\t            & ~(uintptr_t) (p5 - 1));\n\t\t\ttask_cpy (arg, helper->p2);\n\t\t\thelper->p2 = arg;\n\t\t\t// saved for deallocation purposes, arg is not valid since includes offset\n\t\t\thelper->p3 = buf; \n\t\t}\n\t\telse\n\t\t{\n\t\t\tchar * buf =  malloc(sizeof(char) * (p4 + p5 - 1));\n\t\t\tmemcpy (buf, p2, p4);\n\t\t\thelper->p2 = buf;\n\t\t\t// saved for deallocation purposes, arg is not valid since includes offset\n\t\t\thelper->p3 = buf;\n\t\t}\n\n#if defined(HAVE__SYNC_FETCH_AND_ADD)\n\t\thelper->task_ctr = __sync_fetch_and_add(&__GOMP_task_ctr,1);\n#else\n\t\tpthread_mutex_lock (&__GOMP_task_ctr_mtx);\n\t\thelper->task_ctr = __GOMP_task_ctr++;\n\t\tpthread_mutex_unlock (&__GOMP_task_ctr_mtx);\n#endif\n\t\tExtrae_OpenMP_TaskID (helper->task_ctr);\n\t\tGOMP_task_real (callme_task, &helper, NULL, sizeof(helper), p5, p6, p7);\n\t\tExtrae_OpenMP_Task_Exit ();\n\t}\n\telse if (GOMP_task_real != NULL)\n\t{\n\t\tGOMP_task_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_task is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_taskwait (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_taskwait is at %p\\n\", THREADID, GOMP_taskwait_real);\n#endif\n\n\tif (GOMP_taskwait_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Taskwait_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t\tGOMP_taskwait_real ();\n\t\tExtrae_OpenMP_Taskwait_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (GOMP_taskwait_real != NULL)\n\t{\n\t\tGOMP_taskwait_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_taskwait is not hooked! Exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_sections_start (void *p1, void *p2, unsigned p3, unsigned p4)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_sections_start is at %p\\n\", THREADID, GOMP_sections_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_sections params %p %p %u %u \\n\", THREADID, p1, p2, p3, p4);\n#endif\n\n\tif (GOMP_parallel_sections_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tparsection_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParSections_Entry();\n\t\tGOMP_parallel_sections_start_real (callme_parsection, p2, p3, p4);\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (p1);\n\n\t\t/* Extrae_OpenMP_ParSections_Exit(); */\n\t}\n\telse if (GOMP_parallel_sections_start_real != NULL)\n\t{\n\t\tGOMP_parallel_sections_start_real (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_sections_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nunsigned GOMP_sections_start (unsigned p1)\n{\n\tunsigned res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_start is at %p\\n\", THREADID, GOMP_sections_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections params %u\\n\", THREADID, p1);\n#endif\n\n\tif (GOMP_sections_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Section_Entry();\n\t\tres = GOMP_sections_start_real (p1);\n\t\tExtrae_OpenMP_Section_Exit();\n\t}\n\telse if (GOMP_sections_start_real != NULL)\n\t{\n\t\tres = GOMP_sections_start_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nunsigned GOMP_sections_next (void)\n{\n\tunsigned res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_next is at %p\\n\", THREADID, GOMP_sections_next_real);\n#endif\n\n\tif (GOMP_sections_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_sections_next_real();\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_sections_next_real != NULL)\n\t{\n\t\tres = GOMP_sections_next_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nvoid GOMP_sections_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_end is at %p\\n\", THREADID, GOMP_sections_end_real);\n#endif\n\n\tif (GOMP_sections_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_Wait_Entry();\n\t\tGOMP_sections_end_real();\n\t\tExtrae_OpenMP_Join_Wait_Exit();\n\t}\n\telse if (GOMP_sections_end_real != NULL)\n\t{\n\t\tGOMP_sections_end_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_sections_end_nowait (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_sections_end_nowait is at %p\\n\", THREADID, GOMP_sections_end_nowait_real);\n#endif\n\n\tif (GOMP_sections_end_nowait_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_NoWait_Entry();\n\t\tGOMP_sections_end_nowait_real();\n\t\tExtrae_OpenMP_Join_NoWait_Exit();\n\t}\n\telse if (GOMP_sections_end_nowait_real != NULL)\n\t{\n\t\tGOMP_sections_end_nowait_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_sections_end_nowait is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_loop_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_end is at %p\\n\", THREADID, GOMP_loop_end_real);\n#endif\n\n\tif (GOMP_loop_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_Wait_Entry();\n\t\tGOMP_loop_end_real();\n\t\tExtrae_OpenMP_Join_Wait_Exit();\n\t\tExtrae_OpenMP_UF_Exit ();\n\t\tExtrae_OpenMP_DO_Exit ();\t\n\t}\n\telse if (GOMP_loop_end_real != NULL)\n\t{\n\t\tGOMP_loop_end_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_loop_end_nowait (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_end_nowait is at %p\\n\", THREADID, GOMP_loop_end_nowait_real);\n#endif\n\n\tif (GOMP_loop_end_nowait_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Join_NoWait_Entry();\n\t\tGOMP_loop_end_nowait_real();\n\t\tExtrae_OpenMP_Join_NoWait_Exit();\n\t\tExtrae_OpenMP_UF_Exit ();\n\t\tExtrae_OpenMP_DO_Exit ();\t\n\t}\n\telse if (GOMP_loop_end_nowait_real != NULL)\n\t{\n\t\tGOMP_loop_end_nowait_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_end_nowait is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint GOMP_loop_static_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_static_start is at %p\\n\", THREADID, GOMP_loop_static_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_static_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_static_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_static_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_static_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_runtime_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_runtime_start is at %p\\n\", THREADID, GOMP_loop_runtime_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_runtime_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_runtime_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_runtime_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_runtime_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_runtime_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_guided_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_guided_start is at %p\\n\", THREADID, GOMP_loop_guided_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_guided_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_guided_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_guided_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_guided_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_guided_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_dynamic_start (long p1, long p2, long p3, long p4, long *p5, long *p6)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_dynamic_start is at %p\\n\", THREADID, GOMP_loop_dynamic_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %ld %ld %ld %ld %p %p\\n\", THREADID, p1, p2, p3, p4, p5, p6);\n#endif\n\n\tif (GOMP_loop_dynamic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_dynamic_start_real (p1, p2, p3, p4, p5, p6);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t\tBackend_Leave_Instrumentation();\n\t}\n\telse if (GOMP_loop_dynamic_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_dynamic_start_real (p1, p2, p3, p4, p5, p6);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_dynamic_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nvoid GOMP_parallel_loop_static_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_static_start is at %p\\n\", THREADID, GOMP_parallel_loop_static_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_static_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_static_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_static_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_static_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_loop_runtime_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_runtime_start is at %p\\n\", THREADID, GOMP_parallel_loop_runtime_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_runtime_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_runtime_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_runtime_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_runtime_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_runtime_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_loop_guided_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_guided_start is at %p\\n\", THREADID, GOMP_parallel_loop_guided_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_guided_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_static_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_guided_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_guided_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_loop_dynamic_start (void *p1, void *p2, unsigned p3, long p4, long p5, long p6, long p7)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_loop_dynamic_start is at %p\\n\", THREADID, GOMP_parallel_loop_dynamic_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p %u %ld %ld %ld %ld\\n\", THREADID, p1, p2, p3, p4, p5, p6, p7);\n#endif\n\n\tif (GOMP_parallel_loop_dynamic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL DO user function */\n\t\tpardo_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParDO_Entry ();\n\t\tGOMP_parallel_loop_dynamic_start_real (callme_pardo, p2, p3, p4, p5, p6, p7);\n\t\tExtrae_OpenMP_ParDO_Exit ();\t\n\n\t\t/* The master thread continues the execution and then calls pardo_uf */\n\t\tif (THREADID == 0)\n\t\t\tExtrae_OpenMP_UF_Entry (pardo_uf);\n\t}\n\telse if (GOMP_parallel_loop_dynamic_start_real != NULL)\n\t{\n\t\tGOMP_parallel_loop_dynamic_start_real (p1, p2, p3, p4, p5, p6, p7);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_loop_dynamic_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint GOMP_loop_static_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_static_next is at %p\\n\", THREADID, GOMP_loop_static_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_static_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_static_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_static_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_static_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_static_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_runtime_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_runtime_next is at %p\\n\", THREADID, GOMP_loop_runtime_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_runtime_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_runtime_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_runtime_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_runtime_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_runtime_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_guided_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_guided_next is at %p\\n\", THREADID, GOMP_loop_guided_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_guided_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_guided_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_guided_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_guided_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_guided_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_dynamic_next (long *p1, long *p2)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_dynamic_next is at %p\\n\", THREADID, GOMP_loop_dynamic_next_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d params %p %p\\n\", THREADID, p1, p2);\n#endif\n\n\tif (GOMP_loop_dynamic_next_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Work_Entry();\n\t\tres = GOMP_loop_dynamic_next_real (p1, p2);\n\t\tExtrae_OpenMP_Work_Exit();\n\t}\n\telse if (GOMP_loop_dynamic_next_real != NULL)\n\t{\n\t\tres = GOMP_loop_dynamic_next_real (p1, p2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_dynamic_next is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nvoid GOMP_parallel (void *p1, void *p2, unsigned p3, unsigned p4)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel is at %p\\n\", THREADID, GOMP_parallel_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel params %p %p %u %u\\n\", THREADID, p1, p2, p3, p4);\n#endif\n\n\tif (GOMP_parallel_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_ParRegion_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\n\t\t/* Set the pointer to the correct PARALLEL user function */\n\t\tpar_uf = (void(*)(void*))p1;\n\t\tGOMP_parallel_real (callme_par, p2, p3, p4);\n\n\t\tExtrae_OpenMP_ParRegion_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (GOMP_parallel_real != NULL)\n\t{\n\t\tGOMP_parallel_real (p1, p2, p3, p4);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_start (void *p1, void *p2, unsigned p3)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_start is at %p\\n\", THREADID, GOMP_parallel_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_start params %p %p %u\\n\", THREADID, p1, p2, p3);\n#endif\n\n\tif (GOMP_parallel_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\t/* Set the pointer to the correct PARALLEL user function */\n\t\tpar_uf = (void(*)(void*))p1;\n\n\t\tExtrae_OpenMP_ParRegion_Entry();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\n\t\tGOMP_parallel_start_real (callme_par, p2, p3);\n\n\t\t/* GCC/libgomp does not execute callme_par per root thread, emit\n\t\t   the required event here - call Backend to get a new time! */\n\t\tExtrae_OpenMP_UF_Entry (p1);\n\t}\n\telse if (GOMP_parallel_start_real != NULL)\n\t{\n\t\tGOMP_parallel_start_real (p1, p2, p3);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_parallel_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_parallel_end is at %p\\n\", THREADID, GOMP_parallel_end_real);\n#endif\n\n\tif (GOMP_parallel_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_UF_Exit ();\n\t\tGOMP_parallel_end_real ();\n\t\tExtrae_OpenMP_ParRegion_Exit();\n\t\tExtrae_OpenMP_EmitTaskStatistics();\n\t}\n\telse if (GOMP_parallel_start_real != NULL)\n\t{\n\t\tGOMP_parallel_end_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_parallel_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_barrier (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_barrier is at %p\\n\", THREADID, GOMP_barrier_real);\n#endif\n\n\tif (GOMP_barrier_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Barrier_Entry ();\n\t\tGOMP_barrier_real ();\n\t\tExtrae_OpenMP_Barrier_Exit ();\n\t}\n\telse if (GOMP_barrier_real != NULL)\n\t{\n\t\tGOMP_barrier_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_barrier is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_critical_name_start (void **p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_start is at %p\\n\", THREADID, GOMP_critical_name_start_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_start params %p\\n\", THREADID, p1);\n#endif\n\n\tif (GOMP_critical_name_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Named_Lock_Entry();\n\t\tGOMP_critical_name_start_real (p1);\n\t\tExtrae_OpenMP_Named_Lock_Exit(p1);\n\t}\n\telse if (GOMP_critical_name_start_real)\n\t{\n\t\tGOMP_critical_name_start_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_name_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_critical_name_end (void **p1)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_end is at %p\\n\", THREADID, GOMP_critical_name_end_real);\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_name_end params %p\\n\", THREADID, p1);\n#endif\n\n\tif (GOMP_critical_name_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Named_Unlock_Entry(p1);\n\t\tGOMP_critical_name_end_real (p1);\n\t\tExtrae_OpenMP_Named_Unlock_Exit();\n\t}\n\telse if (GOMP_critical_name_end_real != NULL)\n\t{\n\t\tGOMP_critical_name_end_real (p1);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_name_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\n\nvoid GOMP_critical_start (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_start is at %p\\n\", THREADID, GOMP_critical_start_real);\n#endif\n\n\tif (GOMP_critical_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Lock_Entry();\n\t\tGOMP_critical_start_real();\n\t\tExtrae_OpenMP_Unnamed_Lock_Exit();\n\t}\n\telse if (GOMP_critical_start_real != NULL)\n\t{\n\t\tGOMP_critical_start_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_critical_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_critical_end is at %p\\n\", THREADID, GOMP_critical_end_real);\n#endif\n\n\tif (GOMP_critical_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Unlock_Entry();\n\t\tGOMP_critical_end_real ();\n\t\tExtrae_OpenMP_Unnamed_Unlock_Exit();\n\t}\n\telse if (GOMP_critical_end_real != NULL)\n\t{\n\t\tGOMP_critical_end_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_critical_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_atomic_start (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_atomic_start is at %p\\n\", THREADID, GOMP_atomic_start_real);\n#endif\n\n\tif (GOMP_atomic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Lock_Entry();\n\t\tGOMP_atomic_start_real();\n\t\tExtrae_OpenMP_Unnamed_Lock_Exit();\n\t}\n\telse if (GOMP_atomic_start_real != NULL)\n\t{\n\t\tGOMP_atomic_start_real();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_atomic_start is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nvoid GOMP_atomic_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_atomic_end is at %p\\n\", THREADID, GOMP_atomic_end_real);\n#endif\n\n\tif (GOMP_atomic_end_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_Unnamed_Unlock_Entry();\n\t\tGOMP_atomic_end_real ();\n\t\tExtrae_OpenMP_Unnamed_Unlock_Exit();\n\t}\n\telse if (GOMP_atomic_end_real != NULL)\n\t{\n\t\tGOMP_atomic_end_real ();\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_atomic_end is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n}\n\nint GOMP_loop_ordered_static_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_static_start %p\\n\", THREADID, GOMP_loop_ordered_static_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_static_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_static_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_static_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_static_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_static_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_ordered_runtime_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_runtime_start %p\\n\", THREADID, GOMP_loop_ordered_runtime_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_runtime_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_runtime_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_runtime_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_runtime_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_runtime_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_ordered_dynamic_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_dynamic_start %p\\n\", THREADID, GOMP_loop_ordered_dynamic_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_dynamic_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_dynamic_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_dynamic_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_dynamic_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_dynamic_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\nint GOMP_loop_ordered_guided_start (long start, long end, long incr,\n\tlong chunk_size, long *istart, long *iend)\n{\n\tint res = 0;\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_loop_ordered_guided_start %p\\n\", THREADID, GOMP_loop_ordered_guided_start_real);\n#endif\n\n\tif (GOMP_loop_ordered_guided_start_real != NULL && EXTRAE_INITIALIZED())\n\t{\n\t\tExtrae_OpenMP_DO_Entry ();\n\t\tres = GOMP_loop_ordered_guided_start_real (start, end, incr, chunk_size, istart, iend);\n\t\tExtrae_OpenMP_UF_Entry (par_uf);\n\t}\n\telse if (GOMP_loop_ordered_guided_start_real != NULL)\n\t{\n\t\tres = GOMP_loop_ordered_guided_start_real (start, end, incr, chunk_size, istart, iend);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": GOMP_loop_ordered_guided_start_real is not hooked! exiting!!\\n\");\n\t\texit (0);\n\t}\n\treturn res;\n}\n\n#if 0\n/* These seem unnecessary */\nvoid GOMP_ordered_start (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_ordered_start is at %p\\n\", THREADID, GOMP_ordered_start_real);\n#endif\n\tGOMP_ordered_start_real ();\n}\n\nvoid GOMP_ordered_end (void)\n{\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": THREAD %d GOMP_ordered_end is at %p\\n\", THREADID, GOMP_ordered_end_real);\n#endif\n\tGOMP_ordered_end_real();\n}\n#endif\n\nextern int omp_get_max_threads();\n\nint gnu_libgomp_4_2_hook_points (int ntask)\n{\n\treturn gnu_libgomp_4_2_GetOpenMPHookPoints (ntask);\n}\n\n#endif /* PIC */\n",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/MALLOC/malloc_wrapper.c": "/*****************************************************************************\\\n *                        ANALYSIS PERFORMANCE TOOLS                         *\n *                                   Extrae                                  *\n *              Instrumentation package for parallel applications            *\n *****************************************************************************\n *     ___     This library is free software; you can redistribute it and/or *\n *    /  __         modify it under the terms of the GNU LGPL as published   *\n *   /  /  _____    by the Free Software Foundation; either version 2.1      *\n *  /  /  /     \\   of the License, or (at your option) any later version.   *\n * (  (  ( B S C )                                                           *\n *  \\  \\  \\_____/   This library is distributed in hope that it will be      *\n *   \\  \\__         useful but WITHOUT ANY WARRANTY; without even the        *\n *    \\___          implied warranty of MERCHANTABILITY or FITNESS FOR A     *\n *                  PARTICULAR PURPOSE. See the GNU LGPL for more details.   *\n *                                                                           *\n * You should have received a copy of the GNU Lesser General Public License  *\n * along with this library; if not, write to the Free Software Foundation,   *\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA          *\n * The GNU LEsser General Public License is contained in the file COPYING.   *\n *                                 ---------                                 *\n *   Barcelona Supercomputing Center - Centro Nacional de Supercomputacion   *\n\\*****************************************************************************/\n\n#include \"common.h\"\n\n#ifdef HAVE_STDIO_H\n# include <stdio.h>\n#endif\n#ifdef HAVE_DLFCN_H\n# define __USE_GNU\n# include <dlfcn.h>\n# undef __USE_GNU\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\n#ifdef HAVE_ASSERT_H\n# include <assert.h>\n#endif\n#ifdef HAVE_MEMKIND_H\n# include <memkind.h>\n#endif\n\n#include \"wrapper.h\"\n#include \"trace_macros.h\"\n#include \"malloc_probe.h\"\n\n// #define DEBUG\n\n#if defined(INSTRUMENT_DYNAMIC_MEMORY)\n\n/*\n\tThis wrappers can only be compiled if the file is being compiled to\n\tgenerate a shared library (-DPIC)\n*/\n\nstatic void* (*real_malloc)(size_t) = NULL;\nstatic void (*real_free)(void *) = NULL;\n/* static void* (*real_calloc)(size_t, size_t) = NULL; */\nstatic void* (*real_realloc)(void*, size_t) = NULL;\nstatic int   (*real_posix_memalign)(void **, size_t, size_t) = NULL;\n\n# if HAVE_MEMKIND\nstatic void* (*real_memkind_malloc)(memkind_t, size_t) = NULL;\nstatic void* (*real_memkind_calloc)(memkind_t, size_t, size_t) = NULL;\nstatic void* (*real_memkind_realloc)(memkind_t, void *, size_t) = NULL;\nstatic int   (*real_memkind_posix_memalign)(memkind_t, void **, size_t, size_t) = NULL;\nstatic void  (*real_memkind_free)(memkind_t, void *) = NULL; \n# endif\n\nvoid Extrae_malloctrace_init (void)\n{\n# if defined(PIC) /* This is only available for .so libraries */\n\treal_free = (void(*)(void*)) dlsym (RTLD_NEXT, \"free\");\n\treal_malloc = (void*(*)(size_t)) dlsym (RTLD_NEXT, \"malloc\");\n\t/* real_calloc = (void*(*)(size_t, size_t)) dlsym (RTLD_NEXT, \"calloc\"); */\n\treal_realloc = (void*(*)(void*, size_t)) dlsym (RTLD_NEXT, \"realloc\");\n\treal_posix_memalign = (int(*)(void **, size_t, size_t)) dlsym (RTLD_NEXT, \"posix_memalign\");\n\t\n#  if HAVE_MEMKIND\n\treal_memkind_malloc = (void*(*)(memkind_t, size_t)) dlsym (RTLD_NEXT, \"memkind_malloc\");\n\treal_memkind_calloc = (void*(*)(memkind_t, size_t, size_t)) dlsym (RTLD_NEXT, \"memkind_calloc\");\n\treal_memkind_realloc = (void*(*)(memkind_t, void *, size_t)) dlsym (RTLD_NEXT, \"memkind_realloc\");\n\treal_memkind_posix_memalign = (int(*)(memkind_t, void **, size_t, size_t)) dlsym (RTLD_NEXT, \"memkind_posix_memalign\");\n\treal_memkind_free = (void(*)(memkind_t, void *)) dlsym (RTLD_NEXT, \"memkind_free\");\n#  endif\n# else\n\tfprintf (stderr, PACKAGE_NAME\": Warning! dynamic memory instrumentation requires linking with shared library!\\n\");\n# endif\n}\n\n\n/* Note on the implementation!\n   We will only instrument those malloc(), realloc() that are larger than\n   a given threshold. Therefore, we will only instrument the free() associated to\n   those allocations. To this end, we store in malloc entries a vector of pointers\n   returned by malloc/realloc that surpass the threshold and that may need later\n   instrumentation of their respective free. */\nstatic void ** mallocentries = NULL;\nstatic unsigned nmallocentries_allocated = 0;\nstatic unsigned nmallocentries = 0;\n#define NMALLOCENTRIES_MALLOC 16*1024\n\n/* Registers a new address to be tracked for future free() calls */\nstatic void Extrae_malloctrace_add (void *p)\n{\n\tif (p != NULL)\n\t{\n\t\tunsigned u;\n\t\tassert (real_realloc != NULL);\n\t\n\t\tif (nmallocentries == nmallocentries_allocated)\n\t\t{\n\t\t\tmallocentries = real_realloc (mallocentries,\n\t\t\t  (nmallocentries_allocated+NMALLOCENTRIES_MALLOC) * sizeof(void*));\n\t\t\tassert (mallocentries != NULL);\n\t\t\tfor (u = nmallocentries_allocated;\n\t\t\t     u < nmallocentries_allocated+NMALLOCENTRIES_MALLOC;\n\t\t\t     u++)\n\t\t\t\tmallocentries[u] = NULL;\n\t\t\tnmallocentries_allocated += NMALLOCENTRIES_MALLOC;\n\t\t}\n\t\n\t\tfor (u = 0; u < nmallocentries_allocated; u++)\n\t\t\tif (mallocentries[u] == NULL)\n\t\t\t{\n\t\t\t\tmallocentries[u] = p;\n\t\t\t\tnmallocentries++;\n\t\t\t\tbreak;\n\t\t\t}\n\t}\n}\n\n/* Removes an entry from the list of registered addresses */\nstatic int Extrae_malloctrace_remove (const void *p)\n{\n\tif (p != NULL)\n\t{\n\t\tunsigned u;\n\t\tfor (u = 0; u < nmallocentries_allocated; u++)\n\t\t\tif (mallocentries[u] == p)\n\t\t\t{\n\t\t\t\tmallocentries[u] = NULL;\n\t\t\t\tnmallocentries--;\n\t\t\t\treturn TRUE;\n\t\t\t}\n\t}\n\treturn FALSE;\n}\n\n\n/*\n\n   INJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n   INJECTED CODE -- INJECTED CODE -- INJECTED CODE -- INJECTED CODE\n\n*/\n\n#define TRACE_DYNAMIC_MEMORY_CALLER_IS_ENABLED \\\n (Trace_Caller_Enabled[CALLER_DYNAMIC_MEMORY])\n\n#define TRACE_DYNAMIC_MEMORY_CALLER(evttime,offset) \\\n{ \\\n\tif (TRACE_DYNAMIC_MEMORY_CALLER_IS_ENABLED) \\\n\t\tExtrae_trace_callers (evttime, offset, CALLER_DYNAMIC_MEMORY); \\\n}\n\n# if defined(PIC) /* This is only available for .so libraries */\nvoid *malloc (size_t s)\n{\n\tvoid *res;\n\tint canInstrument = EXTRAE_INITIALIZED()                 &&\n                            mpitrace_on                          &&\n                            Extrae_get_trace_malloc()            &&\n                            Extrae_get_trace_malloc_allocate()   &&\n                            s >= Extrae_get_trace_malloc_allocate_threshold();\n\t/* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n\tif (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n\tif (real_malloc == NULL)\n\t\tExtrae_malloctrace_init ();\n\n#if defined(DEBUG)\n\tif (canInstrument)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": malloc is at %p\\n\", real_malloc);\n\t\tfprintf (stderr, PACKAGE_NAME\": malloc params %lu\\n\", s);\n\t}\n#endif\n\n\tif (real_malloc != NULL && canInstrument)\n\t{\n\t\t/* If we can instrument, simply capture everything we need \n\t\t   and add the pointer to the list of recorded pointers */\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_Malloc_Entry (s);\n\t\tTRACE_DYNAMIC_MEMORY_CALLER(LAST_READ_TIME, 3);\n\t\tres = real_malloc (s);\n\t\tif (res != NULL)\n\t\t{\n\t\t\tExtrae_malloctrace_add (res);\n\t\t}\n\t\tProbe_Malloc_Exit (res);\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (real_malloc != NULL)\n\t{\n\t\t/* Otherwise, call the original */\n\t\tres = real_malloc (s);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": malloc is not hooked! exiting!!\\n\");\n\t\tabort();\n\t}\n\n    return res;\n}\n\n#if defined(DEBUG)\nstatic int __in_free = FALSE;\n#endif\nvoid free (void *p)\n{\n\tint canInstrument = EXTRAE_INITIALIZED()                 &&\n                            mpitrace_on                          &&\n                            Extrae_get_trace_malloc();\n        /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n        if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n\tif (real_free == NULL)\n\t\tExtrae_malloctrace_init ();\n\n#if defined(DEBUG)\n\tif (canInstrument && !__in_free) // fprintf() seems to call free()!\n\t{\n\t\t__in_free = TRUE;\n\t\tfprintf (stderr, PACKAGE_NAME\": free is at %p\\n\", real_free);\n\t\tfprintf (stderr, PACKAGE_NAME\": free params %p\\n\", p);\n\t\t__in_free = FALSE;\n\t}\n#endif\n\n\tint present = Extrae_malloctrace_remove (p);\n\n\tif (Extrae_get_trace_malloc_free() && real_free != NULL && canInstrument\n\t    && present)\n\t{\n\t\t/* If we can instrument, simply capture everything we need and\n\t\t   remove the pointer from the list */\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_Free_Entry (p);\n\t\treal_free (p);\n\t\tProbe_Free_Exit ();\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (real_free != NULL)\n\t{\n\t\t/* Otherwise, call the original */\n\t\treal_free (p);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": free is not hooked! exiting!!\\n\");\n\t\tabort();\n\t}\n}\n\n#if 0\n/* Unfortunately, calloc seems to be invoked if dlsym fails and generates an\nan infinite loop of recursive calls to calloc */\nvoid *calloc (size_t s1, size_t s2)\n{\n\tvoid *res;\n\tint canInstrument = EXTRAE_INITIALIZED()                 &&\n                            mpitrace_on                          &&\n                            Extrae_get_trace_malloc();\n        /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n        if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n\tif (real_calloc == NULL)\n\t\tExtrae_malloctrace_init ();\n\n#if defined(DEBUG)\n\tfprintf (stderr, PACKAGE_NAME\": calloc is at %p\\n\", real_calloc);\n\tfprintf (stderr, PACKAGE_NAME\": calloc params %u %u\\n\", s1, s2);\n#endif\n\n\tif (real_calloc != NULL && canInstrument)\n\t{\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_Calloc_Entry (s1, s2);\n\t\tres = real_calloc (s1, s2);\n\t\tProbe_Calloc_Exit (res);\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (real_calloc != NULL && !canInstrument)\n\t{\n\t\t/* Otherwise, call the original */\n\t\tres = real_calloc (s1, s2);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": calloc is not hooked! exiting!!\\n\");\n\t\tabort();\n\t}\n\n    return res;\n}\n#endif\n\nvoid *realloc (void *p, size_t s)\n{\n\tvoid *res;\n\tint canInstrument = EXTRAE_INITIALIZED()                 &&\n                            mpitrace_on                          &&\n                            Extrae_get_trace_malloc()            &&\n                            Extrae_get_trace_malloc_allocate()   &&\n                            s >= Extrae_get_trace_malloc_allocate_threshold();\n        /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n        if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n\tif (real_realloc == NULL)\n\t\tExtrae_malloctrace_init ();\n\n#if defined(DEBUG)\n\tif (canInstrument)\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": realloc is at %p\\n\", real_realloc);\n\t\tfprintf (stderr, PACKAGE_NAME\": realloc params %p %lu\\n\", p, s);\n\t}\n#endif\n\n\tif (real_realloc != NULL && canInstrument)\n\t{\n\t\t/* If we can instrument, simply capture everything we need \n\t\t   and remove and add the pointers to the list of recorded pointers */\n\t\tBackend_Enter_Instrumentation (2);\n\t\tProbe_Realloc_Entry (p, s);\n\t\tTRACE_DYNAMIC_MEMORY_CALLER(LAST_READ_TIME, 3);\n\t\tres = real_realloc (p, s);\n\t\tif (res != NULL)\n\t\t{\n\t\t\tExtrae_malloctrace_remove (p);\n\t\t\tExtrae_malloctrace_add (res);\n\t\t}\n\t\tProbe_Realloc_Exit (res);\n\t\tBackend_Leave_Instrumentation ();\n\t}\n\telse if (real_realloc != NULL)\n\t{\n\t\t/* Otherwise, call the original */\n\t\tres = real_realloc (p, s);\n\t}\n\telse\n\t{\n\t\tfprintf (stderr, PACKAGE_NAME\": realloc is not hooked! exiting!!\\n\");\n\t\tabort();\n\t}\n\n    return res;\n}\n\nint posix_memalign(void **memptr, size_t alignment, size_t size)\n{\n  int res = 0;\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_malloc()            &&\n                      Extrae_get_trace_malloc_allocate()   &&\n                      size >= Extrae_get_trace_malloc_allocate_threshold();\n  /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n  if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n  if (real_posix_memalign == NULL)\n  {\n    Extrae_malloctrace_init ();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf(stderr, PACKAGE_NAME\": posix_memalign is at %p\\n\", real_posix_memalign);\n    fprintf(stderr, PACKAGE_NAME\": posix_memalign params %p %lu %lu\\n\", memptr, alignment, size);\n  }\n#endif\n\n  if (real_posix_memalign != NULL && canInstrument)\n  {\n    Backend_Enter_Instrumentation (2+Caller_Count[CALLER_DYNAMIC_MEMORY]);\n    Probe_posix_memalign_Entry (size);\n    TRACE_DYNAMIC_MEMORY_CALLER(LAST_READ_TIME, 3);\n    res = real_posix_memalign(memptr, alignment, size);\n    if (res == 0)\n    {\n      Extrae_malloctrace_add (*memptr);\n    }\n    Probe_memkind_malloc_Exit (*memptr);\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_posix_memalign != NULL)\n  {\n    res = real_posix_memalign(memptr, alignment, size);\n  }\n  else\n  {\n    fprintf (stderr, PACKAGE_NAME\": posix_memalign is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return res;\n}\n\n#  if HAVE_MEMKIND\n\nvoid *memkind_malloc(memkind_t kind, size_t size)\n{\n  void *res = NULL;\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_malloc()            &&\n                      Extrae_get_trace_malloc_allocate()   &&\n                      size >= Extrae_get_trace_malloc_allocate_threshold();\n  /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n  if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n  if (real_memkind_malloc == NULL)\n  {\n    Extrae_malloctrace_init ();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf(stderr, PACKAGE_NAME\": memkind_malloc is at %p\\n\", real_memkind_malloc);\n    fprintf(stderr, PACKAGE_NAME\": memkind_malloc params %p %lu\\n\", kind, size);\n  } \n#endif\n\n  if (real_memkind_malloc != NULL && canInstrument)\n  {\n    Backend_Enter_Instrumentation (2+Caller_Count[CALLER_DYNAMIC_MEMORY]);\n    Probe_memkind_malloc_Entry (size);\n    TRACE_DYNAMIC_MEMORY_CALLER(LAST_READ_TIME, 3);\n    res = real_memkind_malloc(kind, size);\n    if (res != NULL)\n    {\n      Extrae_malloctrace_add (res);\n    }\n    Probe_memkind_malloc_Exit (res);\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_memkind_malloc != NULL)\n  {\n    res = real_memkind_malloc(kind, size);\n  }\n  else\n  {\n    fprintf (stderr, PACKAGE_NAME\": memkind_malloc is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return res;\n}\n\nvoid *memkind_calloc(memkind_t kind, size_t num, size_t size)\n{\n  void *res = NULL;\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_malloc()            &&\n                      Extrae_get_trace_malloc_allocate()   &&\n                      size >= Extrae_get_trace_malloc_allocate_threshold();\n  /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n  if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n  if (real_memkind_calloc == NULL)\n  {\n    Extrae_malloctrace_init ();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf(stderr, PACKAGE_NAME\": memkind_calloc is at %p\\n\", real_memkind_calloc);\n    fprintf(stderr, PACKAGE_NAME\": memkind_calloc params %p %lu %lu\\n\", kind, num, size);\n  }\n#endif\n\n  if (real_memkind_calloc != NULL && canInstrument)\n  {\n    Backend_Enter_Instrumentation (2+Caller_Count[CALLER_DYNAMIC_MEMORY]);\n    Probe_memkind_calloc_Entry (num, size);\n    TRACE_DYNAMIC_MEMORY_CALLER(LAST_READ_TIME, 3);\n    res = real_memkind_calloc(kind, num, size);\n    if (res != NULL)\n    {\n      Extrae_malloctrace_add (res); \n    }\n    Probe_memkind_calloc_Exit (res);\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_memkind_calloc != NULL)\n  {\n    res = real_memkind_calloc(kind, num, size);\n  }\n  else\n  {\n    fprintf (stderr, PACKAGE_NAME\": memkind_calloc is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return res;\n}\n\nvoid *memkind_realloc(memkind_t kind, void *ptr, size_t size)\n{\n  void *res = NULL;\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_malloc()            &&\n                      Extrae_get_trace_malloc_allocate()   &&\n                      size >= Extrae_get_trace_malloc_allocate_threshold();\n  /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n  if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n  if (real_memkind_realloc == NULL)\n  {\n    Extrae_malloctrace_init ();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf(stderr, PACKAGE_NAME\": memkind_realloc is at %p\\n\", real_memkind_realloc);\n    fprintf(stderr, PACKAGE_NAME\": memkind_realloc params %p %p %lu\\n\", kind, ptr, size);\n  }\n#endif\n\n  if (real_memkind_realloc != NULL && canInstrument)\n  {\n    Backend_Enter_Instrumentation (2+Caller_Count[CALLER_DYNAMIC_MEMORY]);\n    Probe_memkind_realloc_Entry (ptr, size);\n    TRACE_DYNAMIC_MEMORY_CALLER(LAST_READ_TIME, 3);\n    res = real_memkind_realloc(kind, ptr, size);\n    if (res != NULL)\n    {\n      Extrae_malloctrace_remove (ptr);\n      Extrae_malloctrace_add (res);\n    }\n    Probe_memkind_realloc_Exit (res);\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_memkind_realloc != NULL)\n  {\n    res = real_memkind_realloc(kind, ptr, size);\n  }\n  else\n  {\n    fprintf (stderr, PACKAGE_NAME\": memkind_realloc is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return res;\n}\n\nint memkind_posix_memalign(memkind_t kind, void **memptr, size_t alignment, size_t size)\n{\n  int res = 0;\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_malloc()            &&\n                      Extrae_get_trace_malloc_allocate()   &&\n                      size >= Extrae_get_trace_malloc_allocate_threshold();\n  /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n  if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n  if (real_memkind_posix_memalign == NULL)\n  {\n    Extrae_malloctrace_init ();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument)\n  {\n    fprintf(stderr, PACKAGE_NAME\": memkind_posix_memalign is at %p\\n\", real_memkind_posix_memalign);\n    fprintf(stderr, PACKAGE_NAME\": memkind_posix_memalign params %p %p %lu %lu\\n\", kind, memptr, alignment, size);\n  } \n#endif\n\n  if (real_memkind_posix_memalign != NULL && canInstrument)\n  {\n    Backend_Enter_Instrumentation (2+Caller_Count[CALLER_DYNAMIC_MEMORY]);\n    Probe_memkind_posix_memalign_Entry (size);\n    TRACE_DYNAMIC_MEMORY_CALLER(LAST_READ_TIME, 3);\n    res = real_memkind_posix_memalign(kind, memptr, alignment, size);\n    if (res == 0)\n    {\n      Extrae_malloctrace_add (*memptr);\n    }\n    Probe_memkind_posix_memalign_Exit (*memptr);\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_memkind_posix_memalign != NULL)\n  {\n    res = real_memkind_posix_memalign(kind, memptr, alignment, size);\n  }\n  else\n  {\n    fprintf (stderr, PACKAGE_NAME\": memkind_posix_memalign is not hooked! exiting!!\\n\");\n    abort();\n  }\n  return res;\n}\n\nvoid memkind_free(memkind_t kind, void *ptr)\n{\n  int canInstrument = EXTRAE_INITIALIZED()                 &&\n                      mpitrace_on                          &&\n                      Extrae_get_trace_malloc();\n  /* Can't be evaluated before because the compiler optimizes the if's clauses, and THREADID calls a null callback if Extrae is not yet initialized */\n  if (canInstrument) canInstrument = !Backend_inInstrumentation(THREADID);\n\n  if (real_memkind_free == NULL)\n  {\n    Extrae_malloctrace_init ();\n  }\n\n#if defined(DEBUG)\n  if (canInstrument && !__in_free) // fprintf() seems to call free()!\n  {\n    __in_free = TRUE;\n    fprintf (stderr, PACKAGE_NAME\": memkind_free is at %p\\n\", real_memkind_free);\n    fprintf (stderr, PACKAGE_NAME\": memkind_free params %p %p\\n\", kind, ptr);\n    __in_free = FALSE;\n  }\n#endif\n  \n  int present = Extrae_malloctrace_remove (ptr);\n  \n  if (Extrae_get_trace_malloc_free() && real_memkind_free != NULL && canInstrument && present)\n  {\n    Backend_Enter_Instrumentation (2+Caller_Count[CALLER_DYNAMIC_MEMORY]);\n    Probe_memkind_free_Entry (ptr);\n    real_memkind_free (kind, ptr);\n    Probe_memkind_free_Exit ();\n    Backend_Leave_Instrumentation ();\n  }\n  else if (real_memkind_free != NULL)\n  {\n    real_memkind_free (kind, ptr);\n  }\n  else\n  {\n    fprintf (stderr, PACKAGE_NAME\": memkind_free is not hooked! exiting!!\\n\");\n    abort();\n  }\n}\n\n#  endif /* HAVE_MEMKIND */\n\n# endif /* -DPIC */\n\n#endif /* INSTRUMENT_DYNAMIC_MEMORY */\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/src/tracer/wrappers/MPI/persistent_requests.c",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/doc/user-guide.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/doc/images/extrae-post-installation.png",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/doc/user-guide/img1.png",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/doc/user-guide/img3.png",
        "/tmp/vanessa/spack-stage/spack-stage-extrae-3.4.1-fofgceuw2vbfjycjknfnocg5oweja66k/spack-src/doc/user-guide/img2.png"
    ],
    "total_files": 975
}