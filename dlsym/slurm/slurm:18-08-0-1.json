{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/src/common/layouts_mgr.h": "/*****************************************************************************\\\n *  layouts_mgr.h - layouts manager data structures and main functions\n *****************************************************************************\n *  Initially written by Francois Chevallier <chevallierfrancois@free.fr>\n *  at Bull for slurm-2.6.\n *  Adapted by Matthieu Hautreux <matthieu.hautreux@cea.fr> for slurm-14.11.\n *  Enhanced by Matthieu Hautreux <matthieu.hautreux@cea.fr> for slurm-15.x.\n *\n *  This file is part of Slurm, a resource management program.\n *  For details, see <https://slurm.schedmd.com/>.\n *  Please also read the included file: DISCLAIMER.\n *\n *  Slurm is free software; you can redistribute it and/or modify it under\n *  the terms of the GNU General Public License as published by the Free\n *  Software Foundation; either version 2 of the License, or (at your option)\n *  any later version.\n *\n *  In addition, as a special exception, the copyright holders give permission\n *  to link the code of portions of this program with the OpenSSL library under\n *  certain conditions as described in each individual source file, and\n *  distribute linked combinations including the two. You must obey the GNU\n *  General Public License in all respects for all of the code used other than\n *  OpenSSL. If you modify file(s) with this exception, you may extend this\n *  exception to your version of the file(s), but you are not obligated to do\n *  so. If you do not wish to do so, delete this exception statement from your\n *  version.  If you delete this exception statement from all source files in\n *  the program, then also delete it here.\n *\n *  Slurm is distributed in the hope that it will be useful, but WITHOUT ANY\n *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n *  details.\n *\n *  You should have received a copy of the GNU General Public License along\n *  with Slurm; if not, write to the Free Software Foundation, Inc.,\n *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.\n\\*****************************************************************************/\n\n#ifndef __LAYOUTS_MGR_1NRINRSD__INC__\n#define __LAYOUTS_MGR_1NRINRSD__INC__\n\n#include \"src/common/list.h\"\n#include \"src/common/xhash.h\"\n#include \"src/common/xtree.h\"\n#include \"src/common/pack.h\"\n#include \"src/common/parse_config.h\"\n\n#include \"src/common/layout.h\"\n#include \"src/common/entity.h\"\n\n/*\n * Layouts are managed through a \"layouts manager\" of type layouts_mgr_t.\n *\n * The layouts_mgr_t manages the layouts and entities loaded through the list\n * of layouts specified in the Slurm configuration file (slurm.conf)\n *\n * At startup, Slurm initialize one layouts_mgr_t using layouts_init()\n * and then load the required layouts defined in the configuration using\n * layouts_load_config().\n *\n * The different layouts and entities can then be queried using either\n * layouts_get_layout() and layouts_get_entity().\n *\n * Note that each entity contains a list of nodes appearing inside the\n * associated layouts.\n */\n\n/*\n * Potential enhancement to complete: agregate specified plugin etypes in a\n *      xhash in the mgr, avoiding same string to be duplicated again and again.\n *      (in short: apply the same logic for etypes as for entity data keys.)\n */\n\ntypedef enum layouts_keydef_types_en {\n\tL_T_ERROR = 0,\n\tL_T_STRING,\n\tL_T_LONG,\n\tL_T_UINT16,\n\tL_T_UINT32,\n\tL_T_BOOLEAN,\n\tL_T_FLOAT,\n\tL_T_DOUBLE,\n\tL_T_LONG_DOUBLE,\n\tL_T_CUSTOM,\n} layouts_keydef_types_t;\n\n/* keyspec flags */\n#define KEYSPEC_RDONLY        0x00000001\n\n#define KEYSPEC_UPDATE_CHILDREN_SUM   0x00010000\n#define KEYSPEC_UPDATE_CHILDREN_AVG   0x00020000\n#define KEYSPEC_UPDATE_CHILDREN_MIN   0x00040000\n#define KEYSPEC_UPDATE_CHILDREN_MAX   0x00080000\n#define KEYSPEC_UPDATE_CHILDREN_COUNT 0x00110000\n#define KEYSPEC_UPDATE_CHILDREN_MASK  0x00FF0000\n\n#define KEYSPEC_UPDATE_PARENTS_SUM    0x01000000\n#define KEYSPEC_UPDATE_PARENTS_AVG    0x02000000\n#define KEYSPEC_UPDATE_PARENTS_MIN    0x04000000\n#define KEYSPEC_UPDATE_PARENTS_MAX    0x08000000\n#define KEYSPEC_UPDATE_PARENTS_FSHARE 0x11000000\n#define KEYSPEC_UPDATE_PARENTS_MASK   0xFF000000\n\ntypedef struct layouts_keyspec_st {\n\tchar*\t\t\tkey;\n\tlayouts_keydef_types_t\ttype;\n\tuint32_t                flags;\n\tchar*\t\t\tref_key; /* reference key to use for update\n\t\t\t\t\t  * NULL means use the same key in my\n\t\t\t\t\t  * neighborhood */\n\tvoid\t\t\t(*custom_destroy)(void*);\n\tchar*\t\t\t(*custom_dump)(void*);\n} layouts_keyspec_t;\n\ntypedef struct layouts_plugin_spec_st {\n\tconst s_p_options_t*\t\toptions;\n\tconst layouts_keyspec_t*\tkeyspec;\n\tint\t\t\t\tstruct_type;\n\tconst char**\t\t\tetypes;\n\tbool\t\t\t\tautomerge;\n\tbool\t\t\t\tautoupdate;\n} layouts_plugin_spec_t;\n\n/*****************************************************************************\\\n *                             PLUGIN FUNCTIONS                              *\n\\*****************************************************************************/\n\n/*\n * layouts_init - intialize the layouts mgr, load the required plugins\n *        and initialize the internal hash tables for entities, keydefs and\n *        layouts.\n *\n * Return SLURM_SUCCESS or SLURM_ERROR if all the required layouts were not\n * loaded correctly.\n *\n * Notes: this call do not try to read and parse the layouts configuration\n * files. It only loads the layouts plugins, dlsym the layout API and conf\n * elements to prepare the reading and parsing performed in the adhoc call\n * layouts_load_config()\n *\n */\nint layouts_init(void);\n\n/*\n * layouts_fini - uninitialize the layouts mgr and free the internal\n *        hash tables.\n */\nint layouts_fini(void);\n\n/*\n * layouts_load_config - use the layouts plugins details loaded during\n *        layouts_init() and read+parse the different layouts\n *        configuration files, creating the entities and the relational\n *        structures associated the eaf of them.\n *\n * IN recover - update entities information with the latest available\n *              information depending upon value\n *              0 = use no saved state information, rebuild everything from\n *\t\t    layouts conf files contents\n *              1 = recover saved entities information\n *              2 = recover saved entities information\n *\n * Return SLURM_SUCCESS or SLURM_ERROR if all the required layouts were not\n * loaded correctly.\n */\nint layouts_load_config(int recover);\n\n/*\n * layouts_get_layout - return the layout from a given type\n *\n * Return a pointer to the layout_t struct of the layout or NULL if not found\n */\nlayout_t* layouts_get_layout(const char* type);\n\n/*\n * layouts_get_entity - return the entity from a given name\n *\n * Return a pointer to the entity_t struct of the entity or NULL if not found\n */\nentity_t* layouts_get_entity(const char* name);\n\n/*\n * layouts_pack_layout - pack the layout of the target type into the provided\n *        buffer.\n *\n * The buffer will be appended with multiple strings representing an expanded\n * form of its configuration element, terminated by a \"\\0\" string.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_pack_layout(char *l_type, char *entities, char *type,\n\t\t\tuint32_t flags, Buf buffer);\n\n/*\n * layouts_update_layout - update a particular layout loading the information\n *        provided in the input buffer.\n *\n * The buffer must contain multiple strings corresponding to the different\n * configuration lines similar to those that can be put in a configuration\n * file that will be parsed and integrated.\n *\n * Note that the entities key/value entries will be updated only.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_update_layout(char *l_type, Buf buffer);\n\n/*\n * layouts_state_save_layout - save the state of a particular layout\n *        in the adhoc file in slurm state save location.\n *\n * The file produced will be an ASCII file created from the configuration\n * strings packed using layouts_pack_layout(). Thus it will be the expanded\n * form of the current configuration of the layout that could be used as\n * a perfect updated replacement of the layout configuration file.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_state_save_layout(char* l_type);\n\n/*\n * layouts_state_save - save the state of all the loaded layouts iterating\n *        over each one of them and applying layouts_state_save_layout().\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_state_save(void);\n\n/*\n * layouts_entity_get_kv_type - get the type of the value associated with a key\n *        of an entity in a particular layout.\n *\n * The returned type is a member of the layouts_keydef_types_t enum :\n * L_T_ERROR, L_T_STRING, L_T_LONG, L_T_UINT16, ...\n *\n * Return the requested type or SLURM_ERROR in case of failure\n */\nint layouts_entity_get_kv_type(char* layout, char* entity,\n\t\t\t       char* key);\n\n/*\n * layouts_entity_get_kv_flags - get the keyspec flags associated with the\n *        targeted key/value pair of an entity in a particular layout.\n *\n * Return the associated flags or SLURM_ERROR in case of failure\n */\nint layouts_entity_get_kv_flags(char* layout, char* entity,\n\t\t\t\tchar* key);\n\n/*\n * layouts_entity_push_kv - update the layout internal states to take into\n *        account the current state of the targeted key/value pair.\n *\n * This ensures that the child and/or parents of the targeted entity in the\n * targeted layout are synchronized with the current value associated with\n * the key.\n *\n * Note: this call only makes sense when the targeted k/v is a k/v that helps\n *       to dynamically compute its parents and/or children. It is a\n *       no-op otherwise that just returns SLURM_SUCCESS.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_push_kv(char* layout, char* entity,\n\t\t\t   char* key);\n\n/*\n * layouts_entity_pull_kv - synchronize the targeted key/value pair based on\n *        the states of their neighborhood in the targeted layout.\n *\n * This ensures that the K/V is up-to-date and correspond to the values that\n *        its neighborhood in the layout think it should have.\n *\n * Note: this call only makes sense when the targeted k/v is a k/v that is\n *       dynamically computed based on its parents and/or children. It is a\n *       no-op otherwise that just returns SLURM_SUCCESS.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_pull_kv(char* layout, char* entity,\n\t\t\t   char* key);\n\n/*\n * layouts_entity_set_kv - update an entity with a new value for a particular\n *        key in the targeted layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note : in case the key/value is already set for the entity, the content of\n * the provided buffer will override the current content. In case the key/value\n * already exists, it will be xfree and a new memory allocation will be\n * performed and the content of the provided buffer dumped into it.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_set_kv(char* layout, char* entity,\n\t\t\t  char* key, void* value,\n\t\t\t  layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_set_kv_ref - replace an entity key value with a new memory\n *        area for a particular key in the targeted layout\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note : in case the key/value is already set for the entity, the older value\n * will be free and the provided buffer will be associated to the new value.\n * Once done, the caller must not free the provided buffer has it will then\n * be owned by the layout logic and will be free automatically when the layout\n * framework will be unloaded or at a next call to that function.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_set_kv_ref(char* layout, char* entity,\n\t\t\t      char* key, void* value,\n\t\t\t      layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_setpush_kv - combination of layouts_entity_set_kv and\n *        layouts_entity_push_kv to update an entity with a new value and force\n *        the synchronization of its neighborhood in the layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note: see layouts_entity_push_kv.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_setpush_kv(char* layout, char* entity,\n\t\t\t      char* key, void* value,\n\t\t\t      layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_setpush_kv - combination of layouts_entity_set_kv_ref and\n *        layouts_entity_push_kv to replace an entity key value with a new\n *        memory area and force the synchronization of its neighborhood in\n *        the layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note: see layouts_entity_push_kv.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_setpush_kv_ref(char* layout, char* entity,\n\t\t\t\t  char* key, void* value,\n\t\t\t\t  layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_get_kv - get the value associated with a key of an entity\n *        in a particular layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note : the destination buffer will be filled with the content of the\n * value associated with the requested key in the entity except for these\n * types for which :\n *   L_T_STRING  : value must be the address of the char* that will be\n *                 xstrduped with the key value. The char* will have to be\n *                 xfree() after that.\n *   L_T_CUSTOM : value must be the address of the char* that will result\n *                of the custom_dump function. The char* will have to be\n *                xfree() after that.\n *   L_T_ERROR : will return SLURM_ERROR in all cases.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_get_kv(char* layout, char* entity,\n\t\t\t  char* key, void* value,\n\t\t\t  layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_get_kv_ref - get a pointer to the value associated with a key\n *        of an entity in a particular layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note : this call must be used with caution as the pointer could be free\n * sooner or later by the underlying layout engine in reply to the execution\n * of the layouts_entity_set_kv_ref().\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_get_kv_ref(char* layout, char* entity,\n\t\t\t      char* key, void** pvalue,\n\t\t\t      layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_pullget_kv - combination of layouts_entity_pull_kv and\n *        layouts_entity_get_kv to retrieve the up-to-date value of a particular\n *        entity key in the targeted layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note: see layouts_entity_pull_kv.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_pullget_kv(char* layout, char* entity,\n\t\t\t      char* key, void* value,\n\t\t\t      layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_pullget_kv - combination of layouts_entity_pull_kv_ref and\n *        layouts_entity_get_kv to retrieve a reference to the up-to-date value\n *        of a particular entity key in the targeted layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value.\n *\n * Note: see layouts_entity_pull_kv_ref.\n *\n * Return SLURM_SUCCES or SLURM_ERROR in case of failure\n */\nint layouts_entity_pullget_kv_ref(char* layout, char* entity,\n\t\t\t\t  char* key, void** value,\n\t\t\t\t  layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_get_mkv - get the values associated with a set of keys of an\n *        entity in a particular layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspec associated with the key. To skip\n * that check the caller will have to pass a 0 value. This is mandatory for\n * cases where the keyspecs of the requested keys do not share the same type.\n *\n * Note : the destination buffer will be sequentially filled with the content of\n * the values associated with the requested keys in the entity.\n * If the length of the buffer is too small, the remaining references will not\n * be added and the counter of missed keys incremented as necessary.\n * The first encountered error terminates the logic and the missing elements\n * counter will reflect all the unprocessed elements including the faulty one.\n\n * Special care must be taken for the following types of key :\n *   L_T_STRING  : a char* will be added to the buffer. It will be xstrduped\n *                 with the associated key value. The char* will have to be\n *                 xfree() after that.\n *   L_T_CUSTOM : a char* will be added to the buffer. It will be xstrduped\n *                with the result of the custom_dump function. It will have to\n *                be xfree() after that.\n *   L_T_ERROR : will generate an error that will force the function to return\n *               the count of missing elements (at least 1, depending on where\n *               this type first appeared in the ordered list of keys to get.\n *\n * Note: keys correspond to a list of keys that can be represented as\n * an hostlist expression (i.e. keys[1-10]).\n *\n * Return SLURM_SUCCES or the count of missed keys/references\n */\nint layouts_entity_get_mkv(char* layout, char* entity,\n\t\t\t   char* keys, void* value, size_t length,\n\t\t\t   layouts_keydef_types_t key_type);\n\n/*\n * layouts_entity_get_mkv_ref - get a set of pointers to the values associated\n *        with a set of keys of an entity in a particular layout.\n *\n * The input key_type will force the call to check types consistency between\n * the requester and the underlying keyspecs associated with the keys. To skip\n * that check the caller will have to pass a 0 value. This is mandatory for cases\n * where the keyspecs of the requested keys do not share the same type.\n *\n * The output buffer will be filled with the different references.\n * If the length of the buffer is too small, the remaining references will not\n * be added and the counter of missed keys incremented as necessary.\n * The first encountered error terminates the logic and the missing elements\n * counter will reflect all the unprocessed elements including the faulty one.\n *\n * Note: this call must be used with caution as the pointers could be free\n * sooner or later by the underlying layout engine in reply to the execution\n * of the layouts_entity_set_kv_ref().\n *\n * Note: keys correspond to a list of keys that can be represented as\n * an hostlist expression (i.e. keys[1-10]).\n *\n * Return SLURM_SUCCES or the count of missed keys/references\n */\nint layouts_entity_get_mkv_ref(char* layout, char* entity,\n\t\t\t       char* keys, void* buffer, size_t length,\n\t\t\t       layouts_keydef_types_t key_type);\n\n#endif /* end of include guard: __LAYOUTS_MGR_1NRINRSD__INC__ */\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/src/common/layouts_mgr.c": "/*****************************************************************************\\\n *  layouts_mgr.c - layouts manager data structures and main functions\n *****************************************************************************\n *  Initially written by Francois Chevallier <chevallierfrancois@free.fr>\n *  at Bull for slurm-2.6.\n *  Adapted by Matthieu Hautreux <matthieu.hautreux@cea.fr> for slurm-14.11.\n *  Enhanced by Matthieu Hautreux <matthieu.hautreux@cea.fr> for slurm-15.x.\n *\n *  This file is part of Slurm, a resource management program.\n *  For details, see <https://slurm.schedmd.com/>.\n *  Please also read the included file: DISCLAIMER.\n *\n *  Slurm is free software; you can redistribute it and/or modify it under\n *  the terms of the GNU General Public License as published by the Free\n *  Software Foundation; either version 2 of the License, or (at your option)\n *  any later version.\n *\n *  In addition, as a special exception, the copyright holders give permission\n *  to link the code of portions of this program with the OpenSSL library under\n *  certain conditions as described in each individual source file, and\n *  distribute linked combinations including the two. You must obey the GNU\n *  General Public License in all respects for all of the code used other than\n *  OpenSSL. If you modify file(s) with this exception, you may extend this\n *  exception to your version of the file(s), but you are not obligated to do\n *  so. If you do not wish to do so, delete this exception statement from your\n *  version.  If you delete this exception statement from all source files in\n *  the program, then also delete it here.\n *\n *  Slurm is distributed in the hope that it will be useful, but WITHOUT ANY\n *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n *  details.\n *\n *  You should have received a copy of the GNU General Public License along\n *  with Slurm; if not, write to the Free Software Foundation, Inc.,\n *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.\n\\*****************************************************************************/\n\n#include <ctype.h>\n#include <pthread.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n\n#include \"layouts_mgr.h\"\n\n#include \"slurm/slurm.h\"\n#include \"slurm/slurm_errno.h\"\n#include \"src/common/entity.h\"\n#include \"src/common/layout.h\"\n#include \"src/common/hostlist.h\"\n#include \"src/common/list.h\"\n#include \"src/common/node_conf.h\"\n#include \"src/common/pack.h\"\n#include \"src/common/plugin.h\"\n#include \"src/common/read_config.h\"\n#include \"src/common/slurm_protocol_api.h\"\n#include \"src/common/strlcpy.h\"\n#include \"src/common/timers.h\"\n#include \"src/common/xstring.h\"\n#include \"src/common/xtree.h\"\n#include \"src/common/xmalloc.h\"\n\n#define PATHLEN 256\n\n/* use to specify which layout callbacks to perform while loading data\n * from conf files, state files or input buffers */\n#define CONF_DONE       0x00000001\n#define PARSE_ENTITY    0x00000002\n#define UPDATE_DONE     0x00000004\n#define PARSE_RELATIONS 0x00000008\n\n/*****************************************************************************\\\n *                            STRUCTURES AND TYPES                           *\n\\*****************************************************************************/\n\n/*\n * layouts_conf_spec_t - structure used to keep track of layouts conf details\n */\ntypedef struct layouts_conf_spec_st {\n\tchar* whole_name;\n\tchar* name;\n\tchar* type;\n} layouts_conf_spec_t;\n\nstatic void layouts_conf_spec_free(void* x)\n{\n\tlayouts_conf_spec_t* spec = (layouts_conf_spec_t*)x;\n\txfree(spec->whole_name);\n\txfree(spec->type);\n\txfree(spec->name);\n\txfree(spec);\n}\n\n/*\n * layout ops - operations associated to layout plugins\n *\n * This struct is populated while opening the plugin and linking the\n * associated symbols. See layout_syms description for the name of the \"public\"\n * symbols associated to this structure fields.\n *\n * Notes : the layouts plugins are able to access the entities hashtable in order\n * to read/create/modify entities as necessary during the load_entities and\n * build_layout API calls.\n *\n */\ntypedef struct layout_ops_st {\n\tlayouts_plugin_spec_t*\tspec;\n\tint (*conf_done) (xhash_t* entities, layout_t* layout,\n\t\t\t  s_p_hashtbl_t* tbl);\n\tvoid (*entity_parsing) (entity_t* e, s_p_hashtbl_t* etbl,\n\t\t\t\tlayout_t* layout);\n\tint (*update_done) (layout_t* layout, entity_t** e_array,\n\t\t\t    int e_cnt);\n} layout_ops_t;\n\n/*\n * layout plugin symbols - must be synchronized with ops structure definition\n *        as previously detailed, that's why though being a global constant,\n *        it is placed in this section.\n */\nconst char *layout_syms[] = {\n\t\"plugin_spec\",             /* holds constants, definitions, ... */\n\t\"layouts_p_conf_done\",     /* */\n\t\"layouts_p_entity_parsing\",\n\t\"layouts_p_update_done\",\n};\n\n/*\n * layout_plugin_t - it is the structure holding the plugin context of the\n *        associated layout plugin as well as the ptr to the dlsymed calls.\n *        It is used by the layouts manager to operate on the different layouts\n *        loaded during the layouts framework initialization\n */\ntypedef struct layout_plugin_st {\n\tplugin_context_t* context;\n\tlayout_t* layout;\n\tchar* name;\n\tlayout_ops_t* ops;\n} layout_plugin_t;\n\nstatic void _layout_plugins_destroy(layout_plugin_t *lp)\n{\n\tplugin_context_destroy(lp->context);\n\t/* it might be interesting to also dlclose the ops here */\n\txfree(lp->name);\n\txfree(lp->ops);\n}\n/*\n * layouts_keydef_t - entities similar keys share a same key definition\n *       in order to avoid loosing too much memory duplicating similar data\n *       like the key str itself and custom destroy/dump functions.\n *\n * The layouts manager keeps an hash table of the various keydefs and use\n * the factorized details while parsing the configuration and creating the\n * entity_data_t structs associated to the entities.\n *\n * Note custom_* functions are used if they are not NULL* and type equals\n * L_T_CUSTOM\n */\ntypedef struct layouts_keydef_st {\n\tchar*\t\t\tkey; /* lower case key prefixed by the\n\t\t\t\t\t\"%layout_type%.\" string */\n\tchar*\t\t\tshortkey; /* original key as defined in\n\t\t\t\t\t     the layout keys definition */\n\tlayouts_keydef_types_t\ttype;\n\tuint32_t                flags;\n\tvoid\t\t\t(*custom_destroy)(void* value);\n\tchar*\t\t\t(*custom_dump)(void* value);\n\tlayout_plugin_t*\tplugin;\n\tchar*\t\t\tref_key; /* lower case reference key prefixed by\n\t\t\t\t\t    the \"%layout_type%.\" might be NULL \n\t\t\t\t\t    if not defined. */\n\tchar*\t\t\tref_shortkey; /* original ref key as defined in\n\t\t\t\t\t\t the layout keys definition,\n\t\t\t\t\t\t might be null too. */\n\n} layouts_keydef_t;\n\n/*\n * layouts_keydef_idfunc - identity function to build an hash table of\n *        layouts_keydef_t\n */\nstatic const char* layouts_keydef_idfunc(void* item)\n{\n\tlayouts_keydef_t* keydef = (layouts_keydef_t*)item;\n\treturn keydef->key;\n}\n\n/*\n * layouts_mgr_t - the main structure holding all the layouts, entities and\n *        shared keydefs as well as conf elements and plugins details.\n */\ntypedef struct layouts_mgr_st {\n\tpthread_mutex_t lock;\n\tbool\tinit_done;\t/* Set if memory allocated for arrays/List */\n\tlayout_plugin_t *plugins;\n\tuint32_t plugins_count;\n\tList    layouts_desc;  /* list of the layouts requested in conf */\n\txhash_t *layouts;      /* hash tbl of loaded layout structs (by type) */\n\txhash_t *entities;     /* hash tbl of loaded entity structs (by name) */\n\txhash_t *keydefs;      /* info on key types, how to free them etc */\n} layouts_mgr_t;\n\n/*****************************************************************************\\\n *                                  GLOBALS                                  *\n\\*****************************************************************************/\n\n/** global structure holding layouts and entities */\nstatic layouts_mgr_t layouts_mgr = {PTHREAD_MUTEX_INITIALIZER, false};\nstatic layouts_mgr_t* mgr = &layouts_mgr;\n\n/*****************************************************************************\\\n *                                  HELPERS                                  *\n\\*****************************************************************************/\n\n/* entities added to the layouts mgr hash table come from the heap,\n * this function will help to free them while freeing the hash table */\nstatic void _entity_free(void* item)\n{\n\tentity_t* entity = (entity_t*) item;\n\tentity_free(entity);\n\txfree(entity);\n}\n\n/* layouts added to the layouts mgr hash table come from the heap,\n * this function will help to free them while freeing the hash table */\nstatic void _layout_free(void* item)\n{\n\tlayout_t* layout = (layout_t*) item;\n\tlayout_free(layout);\n\txfree(layout);\n}\n\n/* keydef added to the layouts mgr hash table come from the heap,\n * this function will help to free them while freeing the hash table */\nstatic void _layouts_keydef_free(void* x)\n{\n\tlayouts_keydef_t* keydef = (layouts_keydef_t*)x;\n\txfree(keydef->key);\n\txfree(keydef->shortkey);\n\txfree(keydef->ref_key);\n\txfree(keydef->ref_shortkey);\n\txfree(keydef);\n}\n\n/* generic xfree callback */\nstatic void xfree_as_callback(void* p)\n{\n\txfree(p);\n}\n\n/* safer behavior than plain strncat */\nstatic char* _cat(char* dest, const char* src, size_t n)\n{\n\tsize_t len;\n\tchar* r;\n\tif (n == 0)\n\t\treturn dest;\n\tlen = strlen(dest);\n\tif (n - len - 1 <= 0) {\n\t\tdest[n - 1] = 0;\n\t\treturn dest;\n\t}\n\tr = strncat(dest, src, n - len - 1);\n\tdest[n - 1] = 0;\n\treturn r;\n}\n\nstatic char* _trim(char* str)\n{\n\tchar* str_modifier;\n\tif (!str)\n\t\treturn str;\n\twhile (*str && isspace(*str)) ++str;\n\tstr_modifier = str + strlen(str) - 1;\n\twhile (str_modifier >= str && isspace(*str_modifier)) {\n\t\t*str_modifier = '\\0';\n\t\t--str_modifier;\n\t}\n\treturn str;\n}\n\n/* check if str is in strings (null terminated string array) */\n/* TODO: replace this with a xhash instead for next modification */\nstatic int _string_in_array(const char* str, const char** strings)\n{\n\txassert(strings); /* if etypes no specified in plugin, no new entity\n\t\t\t     should be created */\n\tfor (; *strings; ++strings) {\n\t\tif (!xstrcmp(str, *strings))\n\t\t\treturn 1;\n\t}\n\treturn 0;\n}\n\nstatic void _normalize_keydef_keycore(char* buffer, uint32_t size,\n\t\t\t\t      const char* key, const char* plugtype,\n\t\t\t\t      bool cat)\n{\n\tint i;\n\tchar keytmp[PATHLEN];\n\n\tfor (i = 0; plugtype[i] && i < PATHLEN - 1; ++i) {\n\t\tkeytmp[i] = tolower(plugtype[i]);\n\t}\n\tkeytmp[i] = 0;\n\tif (cat) {\n\t\t_cat(buffer, keytmp, size);\n\t} else {\n\t\tstrlcpy(buffer, keytmp, size);\n\t}\n\t_cat(buffer, \".\", size);\n\tfor (i = 0; key[i] && i < PATHLEN - 1; ++i) {\n\t\tkeytmp[i] = tolower(key[i]);\n\t}\n\tkeytmp[i] = 0;\n\t_cat(buffer, keytmp, size);\n}\n\nstatic void _normalize_keydef_key(char* buffer, uint32_t size,\n\t\t\t\t  const char* key, const char* plugtype)\n{\n\t_normalize_keydef_keycore(buffer, size, key, plugtype, false);\n}\n\nstatic void _normalize_keydef_mgrkey(char* buffer, uint32_t size,\n\t\t\t\t     const char* key, const char* plugtype)\n{\n\tstrlcpy(buffer, \"mgr.\", size);\n\t_normalize_keydef_keycore(buffer, size, key, plugtype, true);\n}\n\nstatic void _entity_add_data(entity_t* e, const char* key, void* data)\n{\n\tlayouts_keydef_t* hkey = xhash_get(mgr->keydefs, key);\n\txassert(hkey);\n\tvoid (*freefunc)(void* p) = xfree_as_callback;\n\tif (hkey && hkey->type == L_T_CUSTOM) {\n\t\tfreefunc = hkey->custom_destroy;\n\t}\n\tentity_set_data_ref(e, hkey->key, data, freefunc);\n}\n\n/*\n * used in both automerge and autoupdate calls when dealing with\n * advanced operations (SUM,MIN,MAX,AVG,...) while setting new key values\n */\n#define _entity_update_kv_helper(type_t, operator)\t\t\t\\\n\ttype_t* lvalue = (type_t*) oldvalue;\t\t\t\t\\\n\ttype_t* rvalue = (type_t*) value;\t\t\t\t\\\n\tuint32_t* divider;\t\t\t\t\t\t\\\n\tswitch (operator) {\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_SET:\t\t\t\t\t\t\\\n\t\t*lvalue = *rvalue;\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_ADD:\t\t\t\t\t\t\\\n\t\t*lvalue += *rvalue;\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_SUB:\t\t\t\t\t\t\\\n\t\t*lvalue -= *rvalue;\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_MUL:\t\t\t\t\t\t\\\n\t\t*lvalue *= *rvalue;\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_DIV:\t\t\t\t\t\t\\\n\t\tif (*rvalue != (type_t) 0)\t\t\t\t\\\n\t\t\t*lvalue /= *rvalue;\t\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t\terror(\"layouts: entity_update: \"\t\t\\\n\t\t\t      \"key=%s val=0 operator=\"\t\t\t\\\n\t\t\t      \"DIV !! skipping !!\",\t\t\t\\\n\t\t\t      keydef->key);\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_AVG:\t\t\t\t\t\t\\\n\t\tdivider = (uint32_t*) value;\t\t\t\t\\\n\t\tif (*divider != (uint32_t) 0)\t\t\t\t\\\n\t\t\t*lvalue /= (type_t) *divider;\t\t\t\\\n\t\telse {\t\t\t\t\t\t\t\\\n\t\t\terror(\"layouts: entity_update: \"\t\t\\\n\t\t\t      \"key=%s val=0 operator=\"\t\t\t\\\n\t\t\t      \"AVG !! skipping !!\",\t\t\t\\\n\t\t\t      keydef->key);\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_SET_IF_MIN:\t\t\t\t\t\\\n\t\tif (*rvalue < *lvalue)\t\t\t\t\t\\\n\t\t\t*lvalue = *rvalue;\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tcase S_P_OPERATOR_SET_IF_MAX:\t\t\t\t\t\\\n\t\tif (*rvalue > *lvalue)\t\t\t\t\t\\\n\t\t\t*lvalue = *rvalue;\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\tdefault:\t\t\t\t\t\t\t\\\n\t\tbreak;\t\t\t\t\t\t\t\\\n\t}\n\nstatic int _layouts_autoupdate_layout(layout_t* layout);\nstatic int _layouts_autoupdate_layout_if_allowed(layout_t* layout);\n\n/*****************************************************************************\\\n *                       LAYOUTS INTERNAL LOCKLESS API                       *\n\\*****************************************************************************/\n\nlayouts_keydef_t* _layouts_entity_get_kv_keydef(layout_t* l, entity_t* e,\n\t\t\t\t\t\tchar* key)\n{\n\tchar keytmp[PATHLEN];\n\tif (l == NULL || e == NULL || key == NULL)\n\t\treturn NULL;\n\t_normalize_keydef_key(keytmp, PATHLEN, key, l->type);\n\treturn xhash_get(mgr->keydefs, keytmp);\n}\n\nint _layouts_entity_get_kv_type(layout_t* l, entity_t* e, char* key)\n{\n\tlayouts_keydef_t* keydef;\n\tkeydef = _layouts_entity_get_kv_keydef(l, e, key);\n\tif (keydef != NULL) {\n\t\treturn keydef->type;\n\t}\n\treturn SLURM_ERROR;\n}\n\nint _layouts_entity_get_kv_flags(layout_t* l, entity_t* e, char* key)\n{\n\tlayouts_keydef_t* keydef;\n\tkeydef = _layouts_entity_get_kv_keydef(l, e, key);\n\tif (keydef != NULL) {\n\t\treturn keydef->flags;\n\t}\n\treturn SLURM_ERROR;\n}\n\nint _layouts_entity_get_kv_size(layout_t* l, entity_t* e, char* key, size_t *size)\n{\n\tlayouts_keydef_t* keydef;\n\tkeydef = _layouts_entity_get_kv_keydef(l, e, key);\n\tif (keydef != NULL) {\n\t\tswitch(keydef->type) {\n\t\tcase L_T_ERROR:\n\t\t\treturn SLURM_ERROR;\n\t\tcase L_T_STRING:\n\t\t\t*size = sizeof(void*);\n\t\t\tbreak;\n\t\tcase L_T_CUSTOM:\n\t\t\t*size = sizeof(void*);\n\t\t\tbreak;\n\t\tcase L_T_LONG:\n\t\t\t*size = sizeof(long);\n\t\t\tbreak;\n\t\tcase L_T_UINT16:\n\t\t\t*size = sizeof(uint16_t);\n\t\t\tbreak;\n\t\tcase L_T_UINT32:\n\t\t\t*size = sizeof(uint32_t);\n\t\t\tbreak;\n\t\tcase L_T_BOOLEAN:\n\t\t\t*size = sizeof(bool);\n\t\t\tbreak;\n\t\tcase L_T_FLOAT:\n\t\t\t*size = sizeof(float);\n\t\t\tbreak;\n\t\tcase L_T_DOUBLE:\n\t\t\t*size = sizeof(double);\n\t\t\tbreak;\n\t\tcase L_T_LONG_DOUBLE:\n\t\t\t*size = sizeof(long double);\n\t\t\tbreak;\n\t\t}\n\t} else\n\t\treturn SLURM_ERROR;\n\treturn SLURM_SUCCESS;\n}\n\nbool _layouts_entity_check_kv_keytype(layout_t* l, entity_t* e, char* key,\n\t\t\t\t      layouts_keydef_types_t key_type)\n{\n\tlayouts_keydef_types_t real_type;\n\tif (l == NULL || e == NULL || key == NULL)\n\t\treturn SLURM_ERROR;\n\tif (key_type) {\n\t\treal_type = _layouts_entity_get_kv_type(l, e, key);\n\t\treturn (real_type == key_type);\n\t}\n\t/* no key type provided, consider that as a no-check request */\n\treturn true;\n}\n\nint _layouts_entity_push_kv(layout_t* l, entity_t* e, char* key)\n{\n\t/* a more advanced implementation should only pull what is necessary\n\t * instead of forcing a full autoupdate */\n\treturn _layouts_autoupdate_layout_if_allowed(l);\n}\n\nint _layouts_entity_pull_kv(layout_t* l, entity_t* e, char* key)\n{\n\t/* a more advanced implementation should only pull what is necessary\n\t * instead of forcing a full autoupdate */\n\treturn _layouts_autoupdate_layout_if_allowed(l);\n}\n\nint _layouts_entity_set_kv(layout_t* l, entity_t* e, char* key, void* value,\n\t\t\t   layouts_keydef_types_t key_type)\n{\n\tvoid* data;\n\tsize_t size;\n\tlayouts_keydef_types_t real_type;\n\tchar key_keydef[PATHLEN];\n\n\tif (l == NULL || e == NULL || key == NULL || value == NULL)\n\t\treturn SLURM_ERROR;\n\n\treal_type = _layouts_entity_get_kv_type(l, e, key);\n\tif (key_type > 0 && real_type != key_type)\n\t\treturn SLURM_ERROR;\n\n\t_normalize_keydef_key(key_keydef, PATHLEN, key, l->type);\n\n\tswitch(real_type) {\n\tcase L_T_ERROR:\n\t\treturn SLURM_ERROR;\n\tcase L_T_STRING:\n\t\tdata = xstrdup(value);\n\t\treturn entity_set_data_ref(e, key_keydef, data,\n\t\t\t\t\t   xfree_as_callback);\n\tcase L_T_CUSTOM:\n\t\t/* TBD : add a custom_set call */\n\t\tvalue = NULL;\n\t\treturn SLURM_ERROR;\n\tcase L_T_LONG:\n\t\tsize = sizeof(long);\n\t\tbreak;\n\tcase L_T_UINT16:\n\t\tsize = sizeof(uint16_t);\n\t\tbreak;\n\tcase L_T_UINT32:\n\t\tsize = sizeof(uint32_t);\n\t\tbreak;\n\tcase L_T_BOOLEAN:\n\t\tsize = sizeof(bool);\n\t\tbreak;\n\tcase L_T_FLOAT:\n\t\tsize = sizeof(float);\n\t\tbreak;\n\tcase L_T_DOUBLE:\n\t\tsize = sizeof(double);\n\t\tbreak;\n\tcase L_T_LONG_DOUBLE:\n\t\tsize = sizeof(long double);\n\t\tbreak;\n\tdefault:\n\t\tvalue = NULL;\n\t\treturn SLURM_ERROR;\n\t}\n\treturn entity_set_data(e, key_keydef, value, size);\n}\n\nint _layouts_entity_set_kv_ref(layout_t* l, entity_t* e, char* key, void* value,\n\t\t\t       layouts_keydef_types_t key_type)\n{\n\tint rc = SLURM_ERROR;\n\tchar key_keydef[PATHLEN];\n\n\tif (l == NULL || e == NULL || key == NULL || value == NULL)\n\t\treturn rc;\n\n\tif (!_layouts_entity_check_kv_keytype(l, e, key, key_type))\n\t\treturn rc;\n\n\t_normalize_keydef_key(key_keydef, PATHLEN, key, l->type);\n\treturn entity_set_data_ref(e, key_keydef, value, xfree_as_callback);\n}\n\nint _layouts_entity_setpush_kv(layout_t* l, entity_t* e, char* key, void* value,\n\t\t\t       layouts_keydef_types_t key_type)\n{\n\tint rc = SLURM_ERROR;\n\tif (_layouts_entity_set_kv(l, e, key, value, key_type) == SLURM_SUCCESS)\n\t\trc = _layouts_entity_push_kv(l, e, key);\n\treturn rc;\n}\n\nint _layouts_entity_setpush_kv_ref(layout_t* l, entity_t* e, char* key,\n\t\t\t\t   void* value, layouts_keydef_types_t key_type)\n{\n\tint rc = SLURM_ERROR;\n\tif (_layouts_entity_set_kv_ref(l, e, key, value, key_type) ==\n\t    SLURM_SUCCESS)\n\t\trc = _layouts_entity_push_kv(l, e, key);\n\treturn rc;\n}\n\nint _layouts_entity_get_kv(layout_t* l, entity_t* e, char* key, void* value,\n\t\t\t   layouts_keydef_types_t key_type)\n{\n\tvoid* data;\n\tsize_t size;\n\tlayouts_keydef_types_t real_type;\n\tchar key_keydef[PATHLEN];\n\tchar ** pstr;\n\n\tif (l == NULL || e == NULL || key == NULL || value == NULL)\n\t\treturn SLURM_ERROR;\n\n\treal_type = _layouts_entity_get_kv_type(l, e, key);\n\tif (key_type > 0 && real_type != key_type)\n\t\treturn SLURM_ERROR;\n\n\t_normalize_keydef_key(key_keydef, PATHLEN, key, l->type);\n\n\tdata = entity_get_data_ref(e, key_keydef);\n\tif (data == NULL) {\n\t\treturn SLURM_ERROR;\n\t}\n\n\tswitch(real_type) {\n\tcase L_T_STRING:\n\t\tpstr = (char**) value;\n\t\t*pstr = xstrdup(data);\n\t\treturn SLURM_SUCCESS;\n\tcase L_T_CUSTOM:\n\t\t/* TBD : add a custom_get call */\n\t\tpstr = (char**) value;\n\t\t*pstr = NULL;\n\t\treturn SLURM_ERROR;\n\tcase L_T_LONG:\n\t\tsize = sizeof(long);\n\t\tbreak;\n\tcase L_T_UINT16:\n\t\tsize = sizeof(uint16_t);\n\t\tbreak;\n\tcase L_T_UINT32:\n\t\tsize = sizeof(uint32_t);\n\t\tbreak;\n\tcase L_T_BOOLEAN:\n\t\tsize = sizeof(bool);\n\t\tbreak;\n\tcase L_T_FLOAT:\n\t\tsize = sizeof(float);\n\t\tbreak;\n\tcase L_T_DOUBLE:\n\t\tsize = sizeof(double);\n\t\tbreak;\n\tcase L_T_LONG_DOUBLE:\n\t\tsize = sizeof(long double);\n\t\tbreak;\n\tcase L_T_ERROR:\n\tdefault:\n\t\treturn SLURM_ERROR;\n\t}\n\tmemcpy(value, data, size);\n\treturn SLURM_SUCCESS;\n}\n\nint _layouts_entity_get_mkv(layout_t* l, entity_t* e, char* keys, void* value,\n\t\t\t    size_t length, layouts_keydef_types_t key_type)\n{\n\tchar *key = NULL;\n\thostlist_t kl;\n\tsize_t processed = 0;\n\tsize_t elt_size = sizeof(void*);;\n\tint rc = 0;\n\n\t/* expand in order the requested keys (in hostlist format)\n\t * and iterate over each one of them, collecting the different\n\t * values into the provided buffer.\n\t * if no more space is available in the buffer, then just count\n\t * the missing elements for the exit code.\n\t * the first error encountered fakes a full buffer to just add\n\t * the remaining keys to the missing elements count before\n\t * exiting. */\n\tkl = hostlist_create(keys);\n\twhile ((key = hostlist_shift(kl))) {\n\t\tif (processed >= length) {\n\t\t\trc++;\n\t\t} else if (_layouts_entity_get_kv_size(l, e, key, &elt_size) ||\n\t\t\t   (processed + elt_size) > length ||\n\t\t\t   _layouts_entity_get_kv(l, e, key, value, key_type)) {\n\t\t\trc++;\n\t\t\tprocessed = length;\n\t\t} else {\n\t\t\tvalue += elt_size;\n\t\t\tprocessed += elt_size;\n\t\t}\n\t\tfree(key);\n\t}\n\thostlist_destroy(kl);\n\n\treturn rc;\n}\n\nint _layouts_entity_get_kv_ref(layout_t* l, entity_t* e,\n\t\t\t       char* key, void** value,\n\t\t\t       layouts_keydef_types_t key_type)\n{\n\tint rc = SLURM_ERROR;\n\tchar key_keydef[PATHLEN];\n\tvoid* data;\n\n\tif (l == NULL || e == NULL || key == NULL || value == NULL)\n\t\treturn rc;\n\n\tif (!_layouts_entity_check_kv_keytype(l, e, key, key_type))\n\t\treturn rc;\n\n\t_normalize_keydef_key(key_keydef, PATHLEN, key, l->type);\n\tdata = entity_get_data_ref(e, key_keydef);\n\tif (data != NULL) {\n\t\t*value = data;\n\t\trc = SLURM_SUCCESS;\n\t}\n\treturn rc;\n}\n\nint _layouts_entity_get_mkv_ref(layout_t* l, entity_t* e, char* keys,\n\t\t\t\tvoid* value, size_t length,\n\t\t\t\tlayouts_keydef_types_t key_type)\n{\n\tchar *key = NULL;\n\thostlist_t kl;\n\tsize_t processed = 0;\n\tsize_t elt_size = sizeof(void*);\n\tint rc = 0;\n\n\t/* expand in order the requested keys (in hostlist format)\n\t * and iterate over each one of them, collecting the different\n\t * references into the provided buffer.\n\t * if no more space is available in the buffer, then just count\n\t * the missing elements for the exit code.\n\t * the first error encountered fakes a full buffer to just add\n\t * the remaining keys to the missing elements count before\n\t * exiting. */\n\tkl = hostlist_create(keys);\n\twhile ((key = hostlist_shift(kl))) {\n\t\tif (processed >= length) {\n\t\t\trc++;\n\t\t} else if (_layouts_entity_get_kv_ref(l, e, key, value, key_type)) {\n\t\t\trc++;\n\t\t\tprocessed = length;\n\t\t} else {\n\t\t\tvalue += elt_size;\n\t\t\tprocessed += elt_size;\n\t\t}\n\t\tfree(key);\n\t}\n\thostlist_destroy(kl);\n\n\treturn rc;\n}\n\nint _layouts_entity_pullget_kv(layout_t* l, entity_t* e, char* key, void* value,\n\t\t\t       layouts_keydef_types_t key_type)\n{\n\tint rc = SLURM_ERROR;\n\tif (!_layouts_entity_check_kv_keytype(l, e, key, key_type))\n\t\treturn rc;\n\tif (_layouts_entity_pull_kv(l, e, key) == SLURM_SUCCESS)\n\t\trc = _layouts_entity_get_kv(l, e, key, value, key_type);\n\treturn rc;\n}\n\nint _layouts_entity_pullget_kv_ref(layout_t* l, entity_t* e,\n\t\t\t\t   char* key, void** value,\n\t\t\t\t   layouts_keydef_types_t key_type)\n{\n\tint rc = SLURM_ERROR;\n\tif (!_layouts_entity_check_kv_keytype(l, e, key, key_type))\n\t\treturn rc;\n\tif (_layouts_entity_pull_kv(l, e, key) == SLURM_SUCCESS)\n\t\trc = _layouts_entity_get_kv_ref(l, e, key, value, key_type);\n\treturn rc;\n}\n\n/*****************************************************************************\\\n *                                MANAGER INIT                               *\n\\*****************************************************************************/\n\nstatic void _layouts_init_keydef(xhash_t* keydefs,\n\t\t\t\t const layouts_keyspec_t* plugin_keyspec,\n\t\t\t\t layout_plugin_t* plugin)\n{\n\tchar keytmp[PATHLEN];\n\n\tconst layouts_keyspec_t* current;\n\tlayouts_keydef_t* nkeydef;\n\n\t/* A layout plugin may have no data to store to entities but still\n\t * being valid. */\n\tif (!plugin_keyspec)\n\t\treturn;\n\n\t/* iterate over the keys of the plugin */\n\tfor (current = plugin_keyspec; current->key; ++current) {\n\t\t/* if not end of list, a keyspec key is mandatory */\n\t\t_normalize_keydef_key(keytmp, PATHLEN, current->key,\n\t\t\t\t      plugin->layout->type);\n\t\txassert(xhash_get(keydefs, keytmp) == NULL);\n\t\tnkeydef = (layouts_keydef_t*)\n\t\t\txmalloc(sizeof(layouts_keydef_t));\n\t\tnkeydef->key = xstrdup(keytmp);\n\t\tnkeydef->shortkey = xstrdup(current->key);\n\t\tnkeydef->type = current->type;\n\t\tnkeydef->flags = current->flags;\n\t\tnkeydef->custom_destroy = current->custom_destroy;\n\t\tnkeydef->custom_dump = current->custom_dump;\n\t\tnkeydef->plugin = plugin;\n\t\tif (current->ref_key != NULL) {\n\t\t\t_normalize_keydef_key(keytmp, PATHLEN, current->ref_key,\n\t\t\t\t\t      plugin->layout->type);\n\t\t\tnkeydef->ref_key = xstrdup(keytmp);\n\t\t\tnkeydef->ref_shortkey = xstrdup(current->ref_key);\n\t\t} else {\n\t\t\tnkeydef->ref_key = NULL;\n\t\t\tnkeydef->ref_shortkey = NULL;\n\t\t}\n\t\txhash_add(keydefs, nkeydef);\n\t}\n\n\t/* then add keys managed by the layouts_mgr directly */\n\tswitch(plugin->layout->struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\t_normalize_keydef_mgrkey(keytmp, PATHLEN, \"enclosed\",\n\t\t\t\t\t plugin->layout->type);\n\t\txassert(xhash_get(keydefs, keytmp) == NULL);\n\t\tnkeydef = (layouts_keydef_t*)\n\t\t\txmalloc(sizeof(layouts_keydef_t));\n\t\tnkeydef->key = xstrdup(keytmp);\n\t\tnkeydef->shortkey = xstrdup(\"Enclosed\");\n\t\tnkeydef->type = L_T_STRING;\n\t\tnkeydef->plugin = plugin;\n\t\txhash_add(keydefs, nkeydef);\n\t\tbreak;\n\t}\n}\n\nstatic void _debug_output_keydefs (void* item, void* args)\n{\n\tlayouts_keydef_t* keydef = (layouts_keydef_t*) item;\n\tdebug3(\"layouts/keydefs: loaded: %s flags=0x%08lx refkey=%s\",\n\t       keydef->key, (long unsigned int) keydef->flags,\n\t       (keydef->ref_key == NULL) ? \"-\":keydef->ref_key);\n\n}\n\nstatic int _layouts_init_layouts_walk_helper(void* x, void* arg)\n{\n\tlayouts_conf_spec_t* spec = (layouts_conf_spec_t*)x;\n\tint* i = (int*)arg;\n\tlayout_plugin_t* plugin = &mgr->plugins[*i];\n\tconst char* plugin_type = \"layouts\";\n\tchar plugin_name[PATHLEN];\n\tvoid* inserted_item;\n\tplugin_context_t* plugin_context;\n\n\tsnprintf(plugin_name, PATHLEN,\n\t\t \"layouts/%s_%s\", spec->type, spec->name);\n\tplugin->ops = (layout_ops_t*)xmalloc(sizeof(layout_ops_t));\n\tdebug2(\"layouts: loading %s...\", spec->whole_name);\n\tplugin->context = plugin_context = plugin_context_create(\n\t\tplugin_type,\n\t\tplugin_name,\n\t\t(void**)plugin->ops,\n\t\tlayout_syms,\n\t\tsizeof(layout_syms));\n\tif (!plugin_context) {\n\t\terror(\"layouts: error loading %s.\", plugin_name);\n\t\treturn SLURM_ERROR;\n\t}\n\tif (!plugin->ops->spec) {\n\t\terror(\"layouts: plugin_spec must be valid (%s plugin).\",\n\t\t      plugin_name);\n\t\treturn SLURM_ERROR;\n\n\t}\n\tplugin->name = xstrdup(spec->whole_name);\n\tplugin->layout = (layout_t*)xmalloc(sizeof(layout_t));\n\tlayout_init(plugin->layout, spec->name, spec->type, 0,\n\t\t    plugin->ops->spec->struct_type);\n\tif ((inserted_item = xhash_add(mgr->layouts, plugin->layout)))\n\t\txassert(inserted_item == plugin->layout);\n\t_layouts_init_keydef(mgr->keydefs,\n\t\t\t     plugin->ops->spec->keyspec,\n\t\t\t     plugin);\n\txhash_walk(mgr->keydefs, _debug_output_keydefs, NULL);\n\t++*i;\n\treturn SLURM_SUCCESS;\n}\n\nstatic void _layouts_mgr_parse_global_conf(layouts_mgr_t* mgr)\n{\n\tchar* layouts;\n\tchar* parser;\n\tchar* saveptr = NULL;\n\tchar* slash;\n\tlayouts_conf_spec_t* nspec;\n\n\tmgr->layouts_desc = list_create(layouts_conf_spec_free);\n\tlayouts = slurm_get_layouts();\n\tparser = strtok_r(layouts, \",\", &saveptr);\n\twhile (parser) {\n\t\tnspec = (layouts_conf_spec_t*)xmalloc(\n\t\t\tsizeof(layouts_conf_spec_t));\n\t\tnspec->whole_name = xstrdup(_trim(parser));\n\t\tslash = strchr(parser, '/');\n\t\tif (slash) {\n\t\t\t*slash = 0;\n\t\t\tnspec->type = xstrdup(_trim(parser));\n\t\t\tnspec->name = xstrdup(_trim(slash+1));\n\t\t} else {\n\t\t\tnspec->type = xstrdup(_trim(parser));\n\t\t\tnspec->name = xstrdup(\"default\");\n\t\t}\n\t\tlist_append(mgr->layouts_desc, nspec);\n\t\tparser = strtok_r(NULL, \",\", &saveptr);\n\t}\n\txfree(layouts);\n}\n\nstatic void _layouts_mgr_free(layouts_mgr_t* mgr)\n{\n\t/* free the configuration details */\n\tFREE_NULL_LIST(mgr->layouts_desc);\n\n\t/* FIXME: can we do a faster free here? since each node removal will\n\t * modify either the entities or layouts for back (or forward)\n\t * references. */\n\txhash_free(mgr->layouts);\n\txhash_free(mgr->entities);\n\txhash_free(mgr->keydefs);\n\tmgr->init_done = false;\n}\n\nstatic void _layouts_mgr_init(layouts_mgr_t* mgr)\n{\n\tif (mgr->init_done)\n\t\t_layouts_mgr_free(mgr);\n\tmgr->init_done = true;\n\t_layouts_mgr_parse_global_conf(mgr);\n\tmgr->layouts = xhash_init(layout_hashable_identify_by_type,\n\t\t\t\t  _layout_free);\n\tmgr->entities = xhash_init(entity_hashable_identify,\n\t\t\t\t   _entity_free);\n\tmgr->keydefs = xhash_init(layouts_keydef_idfunc,\n\t\t\t\t  _layouts_keydef_free);\n}\n\n/*****************************************************************************\\\n *                               CONFIGURATION                               *\n\\*****************************************************************************/\n\nstatic char* _conf_get_filename(const char* type)\n{\n\tchar path[PATHLEN];\n\tchar* final_path;\n\tstrlcpy(path, \"layouts.d/\", PATHLEN);\n\t_cat(path, type, PATHLEN);\n\t_cat(path, \".conf\", PATHLEN);\n\tfinal_path = get_extra_conf_path(path);\n\treturn final_path;\n}\n\nstatic char* _state_get_filename(const char* type)\n{\n\treturn xstrdup_printf(\"%s/layouts_state_%s\",\n\t\t\t      slurmctld_conf.state_save_location,\n\t\t\t      type);\n}\n\nstatic s_p_hashtbl_t* _conf_make_hashtbl(int struct_type,\n\t\t\t\t\t const s_p_options_t* layout_options)\n{\n\ts_p_hashtbl_t* tbl = NULL;\n\ts_p_hashtbl_t* tbl_relational = NULL;\n\ts_p_hashtbl_t* tbl_layout = NULL;\n\ts_p_options_t* relational_options = NULL;\n\n\t/* generic line option */\n\tstatic s_p_options_t global_options_entity[] = {\n\t\t{\"Entity\", S_P_STRING},\n\t\t{\"Type\", S_P_STRING},\n\t\t{NULL}\n\t};\n\tstatic s_p_options_t global_options[] = {\n\t\t{\"Priority\", S_P_UINT32},\n\t\t{\"Entity\", S_P_EXPLINE, NULL, NULL, global_options_entity},\n\t\t{NULL}\n\t};\n\n\t/* available for constructing a tree */\n\tstatic s_p_options_t tree_options_entity[] = {\n\t\t{\"Enclosed\", S_P_STRING},\n\t\t{NULL}\n\t};\n\tstatic s_p_options_t tree_options[] = {\n\t\t{\"Root\", S_P_STRING},\n\t\t{\"Entity\", S_P_EXPLINE, NULL, NULL, tree_options_entity},\n\t\t{NULL}\n\t};\n\n\txassert(layout_options);\n\n\tswitch(struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\trelational_options = tree_options;\n\t\tbreak;\n\tdefault:\n\t\tfatal(\"layouts: does not know what relation structure to \"\n\t\t      \"use for type %d\", struct_type);\n\t}\n\n\ttbl = s_p_hashtbl_create(global_options);\n\ttbl_relational = s_p_hashtbl_create(relational_options);\n\ttbl_layout = s_p_hashtbl_create(layout_options);\n\n\ts_p_hashtbl_merge_keys(tbl, tbl_relational);\n\ts_p_hashtbl_merge_keys(tbl, tbl_layout);\n\n\ts_p_hashtbl_destroy(tbl_relational);\n\ts_p_hashtbl_destroy(tbl_layout);\n\n\treturn tbl;\n}\n\n#define _layouts_load_merge(type_t, s_p_get_type) {\t\t\t\\\n\t\ttype_t  rvalue;\t\t\t\t\t\t\\\n\t\ttype_t* value = &rvalue;\t\t\t\t\\\n\t\ttype_t* oldvalue;\t\t\t\t\t\\\n\t\tslurm_parser_operator_t operator = S_P_OPERATOR_SET;\t\\\n\t\tif (!s_p_get_type(&rvalue, option_key, etbl)) {\t\t\\\n\t\t\t/* no value to merge/create */\t\t\t\\\n\t\t\tcontinue;\t\t\t\t\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t\ts_p_get_operator(&operator, option_key, etbl);\t\t\\\n\t\toldvalue = (type_t*)entity_get_data_ref(e, key_keydef); \\\n\t\tif (oldvalue) {\t\t\t\t\t\t\\\n\t\t\t_entity_update_kv_helper(type_t, operator);\t\\\n\t\t} else {\t\t\t\t\t\t\\\n\t\t\ttype_t* newalloc = (type_t*)\t\t\t\\\n\t\t\t\txmalloc(sizeof(type_t));\t\t\\\n\t\t\t*newalloc = *value;\t\t\t\t\\\n\t\t\t_entity_add_data(e, key_keydef, newalloc);\t\\\n\t\t}\t\t\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\t\\\n\n#define _layouts_merge_check(type1, type2)\t\t\t\\\n\t(entity_option->type == type1 && keydef->type == type2)\n\nstatic void _layouts_load_automerge(layout_plugin_t* plugin, entity_t* e,\n\t\t\t\t    s_p_hashtbl_t* etbl, uint32_t flags)\n{\n\tconst s_p_options_t* layout_option;\n\tconst s_p_options_t* entity_option;\n\tlayouts_keydef_t* keydef;\n\tchar key_keydef[PATHLEN];\n\tchar* option_key;\n\n\tfor (layout_option = plugin->ops->spec->options;\n\t     layout_option && xstrcasecmp(\"Entity\", layout_option->key);\n\t     ++layout_option);\n\txassert(layout_option);\n\n\tfor (entity_option = layout_option->line_options;\n\t     entity_option->key;\n\t     ++entity_option) {\n\t\toption_key = entity_option->key;\n\t\t_normalize_keydef_key(key_keydef, PATHLEN, option_key,\n\t\t\t\t      plugin->layout->type);\n\t\tkeydef = xhash_get(mgr->keydefs, key_keydef);\n\t\tif (!keydef) {\n\t\t\t/* key is not meant to be automatically handled,\n\t\t\t * ignore it for this function */\n\t\t\tcontinue;\n\t\t}\n\t\t/* do not perform automerge on updates for read-only keys */\n\t\tif (flags & UPDATE_DONE &&\n\t\t    keydef->flags & KEYSPEC_RDONLY) {\n\t\t\tdebug4(\"layouts: do not try to merge RDONLY key '%s'\",\n\t\t\t       keydef->key);\n\t\t\tcontinue;\n\t\t}\n\t\tif (_layouts_merge_check(S_P_LONG, L_T_LONG)) {\n\t\t\t_layouts_load_merge(long, s_p_get_long);\n\t\t} else if (_layouts_merge_check(S_P_UINT16, L_T_UINT16)) {\n\t\t\t_layouts_load_merge(uint16_t, s_p_get_uint16);\n\t\t} else if (_layouts_merge_check(S_P_UINT32, L_T_UINT32)) {\n\t\t\t_layouts_load_merge(uint32_t, s_p_get_uint32);\n\t\t} else if (_layouts_merge_check(S_P_BOOLEAN, L_T_BOOLEAN)) {\n\t\t\tbool newvalue;\n\t\t\tif (s_p_get_boolean(&newvalue, option_key, etbl)) {\n\t\t\t\tbool *newalloc = xmalloc(sizeof(bool));\n\t\t\t\t*newalloc = newvalue;\n\t\t\t\t_entity_add_data(e, key_keydef, newalloc);\n\t\t\t}\n\t\t} else if (_layouts_merge_check(S_P_LONG, L_T_LONG)) {\n\t\t\t_layouts_load_merge(long, s_p_get_long);\n\t\t} else if (_layouts_merge_check(S_P_FLOAT, L_T_FLOAT)) {\n\t\t\t_layouts_load_merge(float, s_p_get_float);\n\t\t} else if (_layouts_merge_check(S_P_DOUBLE, L_T_DOUBLE)) {\n\t\t\t_layouts_load_merge(double, s_p_get_double);\n\t\t} else if (_layouts_merge_check(S_P_LONG_DOUBLE,\n\t\t\t\t\t\tL_T_LONG_DOUBLE)) {\n\t\t\t_layouts_load_merge(long double, s_p_get_long_double);\n\t\t} else if (_layouts_merge_check(S_P_STRING, L_T_STRING)) {\n\t\t\tchar* newvalue;\n\t\t\tif (s_p_get_string(&newvalue, option_key, etbl)) {\n\t\t\t\t_entity_add_data(e, key_keydef, newvalue);\n\t\t\t}\n\t\t}\n\t}\n}\n\n/* extract Enlosed= attributes providing the relational structures info */\nstatic void _layouts_parse_relations(layout_plugin_t* plugin, entity_t* e,\n\t\t\t\t     s_p_hashtbl_t* entity_tbl)\n{\n\tchar* e_enclosed;\n\tchar* e_already_enclosed;\n\tchar* e_new_enclosed;\n\tchar key[PATHLEN];\n\tswitch(plugin->layout->struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\tif (s_p_get_string(&e_enclosed, \"Enclosed\", entity_tbl)) {\n\t\t\t_normalize_keydef_mgrkey(key, PATHLEN, \"enclosed\",\n\t\t\t\t\t\t plugin->layout->type);\n\t\t\te_already_enclosed = (char*)\n\t\t\t\tentity_get_data_ref(e, key);\n\t\t\tif (e_already_enclosed) {\n\t\t\t\te_new_enclosed = (char*) xmalloc(\n\t\t\t\t\tstrlen(e_already_enclosed) +\n\t\t\t\t\tstrlen(e_enclosed) + 2);\n\t\t\t\tstrcat(e_new_enclosed, e_already_enclosed);\n\t\t\t\tstrcat(e_new_enclosed, \",\");\n\t\t\t\tstrcat(e_new_enclosed, e_enclosed);\n\t\t\t\txfree(e_enclosed);\n\t\t\t\te_enclosed = e_new_enclosed;\n\t\t\t}\n\t\t\t_entity_add_data(e, key, e_enclosed);\n\t\t}\n\t\tbreak;\n\t}\n}\n\nstatic int _layouts_read_config_post(layout_plugin_t* plugin,\n\t\t\t\t     s_p_hashtbl_t* tbl)\n{\n\tchar* root_nodename;\n\tentity_t* e;\n\tentity_node_t* enode;\n\txtree_node_t* root_node;\n\txtree_t* tree;\n\tswitch(plugin->layout->struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\ttree = layout_get_tree(plugin->layout);\n\t\txassert(tree);\n\t\tif (!s_p_get_string(&root_nodename, \"Root\", tbl)) {\n\t\t\terror(\"layouts: unable to construct the layout tree, \"\n\t\t\t      \"no root node specified\");\n\t\t\txfree(root_nodename);\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t\te = xhash_get(mgr->entities, _trim(root_nodename));\n\t\tif (!e) {\n\t\t\terror(\"layouts: unable to find specified root \"\n\t\t\t      \"entity `%s'\", _trim(root_nodename));\n\t\t\txfree(root_nodename);\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t\txfree(root_nodename);\n\n\t\tif (!(enode = entity_add_node(e, plugin->layout)))\n\t\t\txassert(enode);\n\t\tif (!(root_node = xtree_add_child(\n\t\t\t      tree, NULL, enode, XTREE_APPEND)))\n\t\t\txassert(root_node);\n\t\tenode->node = (void*) root_node;\n\t\tbreak;\n\t}\n\treturn SLURM_SUCCESS;\n}\n\n/*\n * _layouts_load_config_common - called by layouts_read_config,\n *       layouts_read_state or layouts_update_config with either a\n *       filename or a buffer as well as a flag to indicate if it\n *       is a full load or not (state save only)\n */\nstatic int _layouts_load_config_common(layout_plugin_t* plugin,\n\t\t\t\t       char* filename, Buf buffer,\n\t\t\t\t       uint32_t flags)\n{\n\ts_p_hashtbl_t* tbl = NULL;\n\ts_p_hashtbl_t** entities_tbl = NULL;\n\ts_p_hashtbl_t* entity_tbl = NULL;\n\tint entities_tbl_count = 0, i;\n\tentity_t** updated_entities = NULL;\n\tint rc = SLURM_SUCCESS;\n\n\tuint32_t l_priority;\n\n\tentity_t* e;\n\tchar* e_name = NULL;\n\tchar* e_type = NULL;\n\n\tif (!plugin->ops->spec->options) {\n\t\t/* no option in this layout plugin, nothing to parse */\n\t\treturn SLURM_SUCCESS;\n\t}\n\n\ttbl = _conf_make_hashtbl(plugin->layout->struct_type,\n\t\t\t\t plugin->ops->spec->options);\n\tif (filename) {\n\t\tif (s_p_parse_file(tbl, NULL, filename, false) == SLURM_ERROR) {\n\t\t\tinfo(\"layouts: something went wrong when opening/reading \"\n\t\t\t      \"'%s': %m\", filename);\n\t\t\trc = SLURM_ERROR;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tdebug3(\"layouts: configuration file '%s' is loaded\", filename);\n\t} else if (buffer) {\n\t\tif (s_p_parse_buffer(tbl, NULL, buffer, false) == SLURM_ERROR) {\n\t\t\terror(\"layouts: something went wrong when parsing \"\n\t\t\t      \"buffer : %m\");\n\t\t\trc = SLURM_ERROR;\n\t\t\tgoto cleanup;\n\t\t}\n\t\tdebug3(\"layouts: buffer loaded\");\n\t} else {\n\t\terror(\"layouts: invalid usage of _layouts_load_config_common\");\n\t\trc = SLURM_ERROR;\n\t\tgoto cleanup;\n\t}\n\n\tif (s_p_get_uint32(&l_priority, \"Priority\", tbl)) {\n\t\tplugin->layout->priority = l_priority;\n\t}\n\n\t/* get the config hash tables of the defined entities */\n\tif (!s_p_get_expline(&entities_tbl, &entities_tbl_count,\n\t\t\t     \"Entity\", tbl)) {\n\t\terror(\"layouts: no valid Entity found, can not append any \"\n\t\t      \"information nor construct relations for %s/%s\",\n\t\t      plugin->layout->type, plugin->layout->name);\n\t\trc = SLURM_ERROR;\n\t\tgoto cleanup;\n\t}\n\n\t/* stage 0: xmalloc an array of entity_t* to save the updated entity_t\n\t * and give their references in the update_done layout callback */\n\tupdated_entities = (entity_t**)\n\t\txmalloc(entities_tbl_count*sizeof(entity_t*));\n\n\t/* stage 1: create the described entities or update them */\n\tfor (i = 0; i < entities_tbl_count; ++i) {\n\t\tupdated_entities[i] = NULL;\n\t\tentity_tbl = entities_tbl[i];\n\t\txfree(e_name);\n\t\txfree(e_type);\n\t\tif (!s_p_get_string(&e_name, \"Entity\", entity_tbl)) {\n\t\t\tinfo(\"layouts: no name associated to entity[%d], \"\n\t\t\t      \"skipping...\", i);\n\t\t\trc = SLURM_ERROR;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* look for the entity in the entities hash table*/\n\t\te = xhash_get(mgr->entities, e_name);\n\t\tif (!e) {\n\t\t\t/* if the entity does not already exists, create it */\n\t\t\tif (!s_p_get_string(&e_type, \"Type\", entity_tbl)) {\n\t\t\t\tinfo(\"layouts: entity '%s' does not already \"\n\t\t\t\t     \"exists and no type was specified, \"\n\t\t\t\t     \"skipping\", e_name);\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!_string_in_array(e_type,\n\t\t\t\t\t      plugin->ops->spec->etypes)) {\n\t\t\t\tinfo(\"layouts: entity '%s' type (%s) is \"\n\t\t\t\t     \"invalid, skipping\", e_name, e_type);\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\te = (entity_t*)xmalloc(sizeof(entity_t));\n\t\t\tentity_init(e, e_name, e_type);\n\t\t\txhash_add(mgr->entities, e);\n\n\t\t} else if (s_p_get_string(&e_type, \"Type\", entity_tbl)) {\n\t\t\t/* if defined, check that the type is consistent */\n\t\t\tif (!_string_in_array(e_type,\n\t\t\t\t\t      plugin->ops->spec->etypes)) {\n\t\t\t\tinfo(\"layouts: entity '%s' type (%s) is \"\n\t\t\t\t     \"invalid, skipping\", e_name, e_type);\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!e->type || xstrcmp(e_type, e->type)) {\n\t\t\t\tinfo(\"layouts: entity '%s' type (%s) differs \"\n\t\t\t\t     \"from already registered entity type (%s)\"\n\t\t\t\t     \" skipping\", e_name, e_type, e->type);\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\n\t\t/* ** Full load config only (flags==0) **\n\t\t * look for \"Enclosed\" pragmas identifying the relations\n\t\t * among entities and kep that along with the entity for\n\t\t * stage 2 */\n\t\tif (flags & PARSE_RELATIONS)\n\t\t\t_layouts_parse_relations(plugin, e, entity_tbl);\n\n\t\t/*\n\t\t * if the layout plugin requests automerge, try to automatically\n\t\t * parse the conf hash table using the s_p_option_t description\n\t\t * of the plugin, creating the key/vlaue with the right value\n\t\t * type and adding them to the entity key hash table.\n\t\t */\n\t\tif (plugin->ops->spec->automerge) {\n\t\t\t_layouts_load_automerge(plugin, e, entity_tbl, flags);\n\t\t}\n\n\t\t/*\n\t\t * in case the automerge was not sufficient, the layout parsing\n\t\t * callback is called for further actions.\n\t\t */\n\t\tif ((flags & PARSE_ENTITY) && plugin->ops->entity_parsing) {\n\t\t\tplugin->ops->entity_parsing(e, entity_tbl,\n\t\t\t\t\t\t    plugin->layout);\n\t\t}\n\n\t\t/* add the entity ref to the array for further usage when\n\t\t * calling the update_done layout callback */\n\t\tupdated_entities[i] = e;\n\t}\n\txfree(e_name);\n\txfree(e_type);\n\n\t/* ** Full load config only (flags==0) **\n\t * post-read-and-build (post stage 1)\n\t * ensure that a Root entity was defined and set it as the root of\n\t * the relational structure of the layout.\n\t * fails in case of error as a root is mandatory to walk the relational\n\t * structure of the layout */\n\tif ((flags & CONF_DONE) &&\n\t    _layouts_read_config_post(plugin, tbl) != SLURM_SUCCESS) {\n\t\tgoto cleanup;\n\t}\n\n\t/* ** Full load config only (flags==0) **\n\t * call the layout plugin conf_done callback for further\n\t * layout specific actions.\n\t */\n\tif ((flags & CONF_DONE) && plugin->ops->conf_done) {\n\t\tif (!plugin->ops->conf_done(mgr->entities, plugin->layout,\n\t\t\t\t\t    tbl)) {\n\t\t\terror(\"layouts: plugin %s/%s has an error parsing its\"\n\t\t\t      \" configuration\", plugin->layout->type,\n\t\t\t      plugin->layout->name);\n\t\t\trc = SLURM_ERROR;\n\t\t\tgoto cleanup;\n\t\t}\n\t}\n\n\t/*\n\t * In case we are processing an update (not a startup configuration)\n\t * if the layout plugin requests autoupdate, call the autoupdate\n\t * function on the current layout in order to set the inherited values\n\t * according to the newly modified ones.\n\t * (in startup configuration, the autoupdate is performed in stage 3\n\t *  when the relational structures are available)\n\t */\n\tif ((flags & UPDATE_DONE) && plugin->ops->spec->autoupdate) {\n\t\t_layouts_autoupdate_layout(plugin->layout);\n\t}\n\n\t/*\n\t * Call the layout plugin update_done callback for further\n\t * layout specific actions.\n\t * Note : some entries of the updated_entities array might be NULL\n\t * reflecting an issue while trying to analyze the corresponding\n\t * parsed hash table.\n\t */\n\tif ((flags & UPDATE_DONE) && plugin->ops->update_done) {\n\t\tif (!plugin->ops->update_done(plugin->layout, updated_entities,\n\t\t\t\t\t      entities_tbl_count)) {\n\t\t\terror(\"layouts: plugin %s/%s has an error reacting to\"\n\t\t\t      \" entities update\", plugin->layout->type,\n\t\t\t      plugin->layout->name);\n\t\t\trc = SLURM_ERROR;\n\t\t\tgoto cleanup;\n\t\t}\n\t}\n\txfree(updated_entities);\n\ncleanup:\n\ts_p_hashtbl_destroy(tbl);\n\n\treturn rc;\n}\n\n/*\n * _layouts_read_config - called after base entities are loaded successfully\n *\n * This function is the stage 1 of the layouts loading stage, where we collect\n * info on all the entities and store them in a global hash table.\n * Entities that do not already exist are created, otherwise updated.\n *\n * Information concerning the relations among entities provided by the\n * 'Enclosed' conf pragma are also extracted here for further usage in stage 2.\n *\n * When layout plugins callbacks are called, relational structures among\n * entities are not yet built.\n */\nstatic int _layouts_read_config(layout_plugin_t* plugin)\n{\n\tint rc;\n\tchar* filename = _conf_get_filename(plugin->layout->type);\n\tif (!filename) {\n\t\tfatal(\"layouts: cannot find configuration file for \"\n\t\t      \"required layout '%s'\", plugin->name);\n\t}\n\trc = _layouts_load_config_common(plugin, filename, NULL,\n\t\t\t\t\t CONF_DONE |\n\t\t\t\t\t PARSE_ENTITY | PARSE_RELATIONS);\n\txfree(filename);\n\treturn rc;\n}\n\n/*\n * _layouts_read_state - called to restore saved state of layout entities\n *\n * This function is the stage 1.1 of the layouts loading stage, where we collect\n * info on all the entities stored in the state of the layout and store/update\n * them in the global hash table.\n *\n * Information concerning the relations among entities provided by the\n * 'Enclosed' conf pragma are not taken into account for now and will be those\n * loaded during stage 1.\n *\n * No layout plugins callbacks are called when doing that for now.\n */\nstatic int _layouts_read_state(layout_plugin_t* plugin)\n{\n\tint rc = SLURM_SUCCESS;\n\tstruct stat stat_buf;\n\tchar *filename = _state_get_filename(plugin->layout->type);\n\tif (!filename) {\n\t\terror(\"layouts: unable to build read state filename of layout\"\n\t\t      \" '%s/%s'\", plugin->layout->type, plugin->layout->name);\n\t\treturn SLURM_ERROR;\n\t}\n\t/* check availability of the file otherwise it will later block\n\t * waiting for a file to appear (in s_p_parse_file) */\n\tif (stat(filename, &stat_buf) < 0) {\n\t\tdebug(\"layouts: skipping non existent state file for '%s/%s'\",\n\t\t      plugin->layout->type, plugin->layout->name);\n\t} else {\n\t\trc = _layouts_load_config_common(plugin, filename, NULL,\n\t\t\t\t\t\t PARSE_ENTITY);\n\t}\n\txfree(filename);\n\treturn rc;\n}\n\nstatic int _layouts_update_state(layout_plugin_t* plugin, Buf buffer)\n{\n\treturn _layouts_load_config_common(plugin, NULL, buffer,\n\t\t\t\t\t   PARSE_ENTITY | UPDATE_DONE);\n}\n\ntypedef struct _layouts_build_xtree_walk_st {\n\tlayout_t* layout;\n\tchar* enclosed_key;\n\txtree_t* tree;\n} _layouts_build_xtree_walk_t;\n\nuint8_t _layouts_build_xtree_walk(xtree_node_t* node,\n\t\t\t\t  uint8_t which,\n\t\t\t\t  uint32_t level,\n\t\t\t\t  void* arg)\n{\n\t_layouts_build_xtree_walk_t* p = (_layouts_build_xtree_walk_t*)arg;\n\tentity_t* e;\n\tentity_node_t* enode;\n\tchar* enclosed_str;\n\tchar* enclosed_name;\n\thostlist_t enclosed_hostlist;\n\tentity_t* enclosed_e;\n\txtree_node_t* enclosed_node;\n\n\txassert(arg);\n\n\t/* get the entity from the entity node associated with the tree node */\n\tenode = (entity_node_t*) xtree_node_get_data(node);\n\txassert(enode);\n\te = enode->entity;\n\txassert(e);\n\n\t/*\n\t * FIXME: something goes wrong with the order...\n\t * after a first growing, the first new child is called with preorder.\n\t *\n\t * for now, testing each time and use enclosed_str to know if it has\n\t * been processed.\n\t */\n\tif (which != XTREE_GROWING && which != XTREE_PREORDER)\n\t\treturn 1;\n\n\tenclosed_str = (char*) entity_get_data_ref(e, p->enclosed_key);\n\n\tif (enclosed_str) {\n\t\tenclosed_hostlist = hostlist_create(enclosed_str);\n\t\tentity_delete_data(e, p->enclosed_key);\n\t\twhile ((enclosed_name = hostlist_shift(enclosed_hostlist))) {\n\t\t\tenclosed_e = xhash_get(mgr->entities, enclosed_name);\n\t\t\tif (!enclosed_e) {\n\t\t\t\terror(\"layouts: entity '%s' specified in \"\n\t\t\t\t      \"enclosed entities of entity '%s' \"\n\t\t\t\t      \"not found, ignoring.\",\n\t\t\t\t      enclosed_name, e->name);\n\t\t\t\tfree(enclosed_name);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tfree(enclosed_name);\n\t\t\t/* create an entity node associated to the entity\n\t\t\t * for this layout */\n\t\t\tenode = entity_add_node(enclosed_e, p->layout);\n\t\t\txassert(enode);\n\t\t\t/* add it to the tree, getting an xtree_node_t ref */\n\t\t\tif (!(enclosed_node = xtree_add_child(\n\t\t\t\t      p->tree, node, enode, XTREE_APPEND)))\n\t\t\t\txassert(enclosed_node);\n\t\t\t/* store the xtree_node_t ref in the entity node. It\n\t\t\t * will be used to access this layout tree from the\n\t\t\t * entity when necessary through the entity node */\n\t\t\tenode->node = enclosed_node;\n\t\t}\n\t\thostlist_destroy(enclosed_hostlist);\n\t}\n\n\treturn 1;\n}\n\n/*\n * _layouts_build_relations - called after _layouts_read_config to create the\n *        relational structure of the layout according to the topological\n *        details parsed in stage 1. This is the stage 2 of the layouts\n *        configuration load.\n *\n * This function is the stage 2 of the layouts loading stage, where we use\n * the relational details extracted from the parsing stage (Enclosed pragmas\n * and Root entity) to build the relational structure of the layout.\n *\n */\nstatic int _layouts_build_relations(layout_plugin_t* plugin)\n{\n\txtree_t* tree;\n\txtree_node_t* root_node;\n\tchar key[PATHLEN];\n\tswitch(plugin->layout->struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\ttree = layout_get_tree(plugin->layout);\n\t\txassert(tree);\n\t\troot_node = xtree_get_root(tree);\n\t\t_normalize_keydef_mgrkey(key, PATHLEN, \"enclosed\",\n\t\t\t\t\t plugin->layout->type);\n\t\t_layouts_build_xtree_walk_t p = {\n\t\t\tplugin->layout,\n\t\t\tkey,\n\t\t\ttree\n\t\t};\n\t\txtree_walk(tree,\n\t\t\t   root_node,\n\t\t\t   0,\n\t\t\t   XTREE_LEVEL_MAX,\n\t\t\t   _layouts_build_xtree_walk,\n\t\t\t   &p);\n\t\tbreak;\n\t}\n\treturn SLURM_SUCCESS;\n}\n\n/*****************************************************************************\\\n *                                  STATE DUMP                               *\n\\*****************************************************************************/\n\n/*\n * _pack_args_t : helper struct/type used when passing args among the various\n * functions used when packing layouts into a buffer as a set of strings.\n */\ntypedef struct _pack_args {\n\tBuf        buffer;\n\tchar       *current_line;\n\tlayout_t   *layout;\n\thostlist_t list_entities;\n\tchar       *type;\n\tuint32_t   all;\n\tuint32_t   flags;\n\tuint32_t   record_count;\n} _pack_args_t;\n\n/*\n * _pack_data_key : internal function used to get the key=val\n * string representation of a particular entity data value\n */\nstatic char* _pack_data_key(layouts_keydef_t* keydef, void* value)\n{\n\tchar val;\n\tif (!keydef) {\n\t\treturn NULL;\n\t}\n\tswitch(keydef->type) {\n\tcase L_T_ERROR:\n\t\treturn NULL;\n\tcase L_T_STRING:\n\t\treturn xstrdup_printf(\"%s=%s\", keydef->shortkey,\n\t\t\t\t      (char*)value);\n\tcase L_T_LONG:\n\t\treturn xstrdup_printf(\"%s=%ld\", keydef->shortkey,\n\t\t\t\t      *(long*)value);\n\tcase L_T_UINT16:\n\t\treturn xstrdup_printf(\"%s=%u\", keydef->shortkey,\n\t\t\t\t      *(uint16_t*)value);\n\tcase L_T_UINT32:\n\t\treturn xstrdup_printf(\"%s=%\"PRIu32, keydef->shortkey,\n\t\t\t\t      *(uint32_t*)value);\n\tcase L_T_BOOLEAN:\n\t\tval = *(bool*)value;\n\t\treturn xstrdup_printf(\"%s=%s\", keydef->shortkey,\n\t\t\t\t      val ? \"true\" : \"false\");\n\tcase L_T_FLOAT:\n\t\treturn xstrdup_printf(\"%s=%f\", keydef->shortkey,\n\t\t\t\t      *(float*)value);\n\tcase L_T_DOUBLE:\n\t\treturn xstrdup_printf(\"%s=%f\", keydef->shortkey,\n\t\t\t\t      *(double*)value);\n\tcase L_T_LONG_DOUBLE:\n\t\treturn xstrdup_printf(\"%s=%Lf\", keydef->shortkey,\n\t\t\t\t      *(long double*)value);\n\tcase L_T_CUSTOM:\n\t\tif (keydef->custom_dump) {\n\t\t\treturn keydef->custom_dump(value);\n\t\t} else\n\t\t\treturn NULL;\n\t}\n\treturn NULL;\n}\n\n/*\n * _pack_entity_layout_data : internal function used to append the\n * key/value of a entity data element corresponding to the targeted\n * layout when walking an entity list of entity data elements\n *\n * - append the \" %key%=%val%\" to the char* received as an input arg member\n *\n */\nstatic void _pack_entity_layout_data(void* item, void* arg)\n{\n\tentity_data_t* data;\n\t_pack_args_t *pargs;\n\n\tlayouts_keydef_t* keydef;\n\tchar *data_dump;\n\n\txassert(item);\n\txassert(arg);\n\n\tdata = (entity_data_t*) item;\n\tpargs = (_pack_args_t *) arg;\n\n\t/* the pack args must contain a valid char* to append to */\n\txassert(pargs->current_line);\n\n\t/* we must be able to get the keydef associated to the data key */\n\txassert(data);\n\tkeydef = xhash_get(mgr->keydefs, data->key);\n\txassert(keydef);\n\n\t/* only dump keys related to the targeted layout */\n\tif (!xstrncmp(keydef->plugin->layout->type, pargs->layout->type,\n\t\t      PATHLEN)) {\n\t\tdata_dump = _pack_data_key(keydef, data->value);\n\t\t/* avoid printing any error in case of NULL pointer returned */\n\t\tif (data_dump) {\n\t\t\txstrcat(pargs->current_line, \" \");\n\t\t\txstrcat(pargs->current_line, data_dump);\n\t\t\txfree(data_dump);\n\t\t}\n\t}\n\n\treturn;\n}\n\n/*\n * _pack_layout_tree : internal function used when walking a layout tree\n *\n * - print one line per entity with the following pattern :\n *  Entity=%name% [Type=%type%] [Enclosed=%childrens%] [key1=val1 ...]\n *\n * - potentially print an header line if the entity is the root like :\n *  Root=%name%\n *\n */\nstatic uint8_t _pack_layout_tree(xtree_node_t* node, uint8_t which,\n\t\t\t\t uint32_t level, void* arg)\n{\n\t_pack_args_t *pargs;\n\txtree_node_t* child;\n\tentity_node_t* enode;\n\thostlist_t enclosed;\n\tchar *enclosed_str = NULL, *e_name = NULL, *e_type = NULL;\n\tBuf buffer;\n\tchar *strdump, *str = NULL;\n\n\t/* only need to work for preorder and leaf cases */\n\tif (which != XTREE_PREORDER && which != XTREE_LEAF) {\n\t\treturn 1;\n\t}\n\n\t/* get the buffer we need to pack the data too */\n\tpargs = (_pack_args_t *) arg;\n\tbuffer = pargs->buffer;\n\n\t/* aggregate children names to build the Enclosed=.. value */\n\tif (which == XTREE_PREORDER) {\n\t\tenclosed = hostlist_create(NULL);\n\t\tchild = node->start;\n\t\twhile (child) {\n\t\t\tenode = (entity_node_t*) xtree_node_get_data(child);\n\t\t\tif (!enode || !enode->entity) {\n\t\t\t\thostlist_push(enclosed, \"NULL\");\n\t\t\t} else {\n\t\t\t\thostlist_push(enclosed, enode->entity->name);\n\t\t\t}\n\t\t\tchild = child->next;\n\t\t}\n\t\thostlist_uniq(enclosed);\n\t\tif (hostlist_count(enclosed) > 0) {\n\t\t\tenclosed_str = hostlist_ranged_string_xmalloc(enclosed);\n\t\t}\n\t\thostlist_destroy(enclosed);\n\t}\n\n\t/* get the entity associated to this xtree node */\n\tenode = (entity_node_t*) xtree_node_get_data(node);\n\tif (!enode || !enode->entity) {\n\t\te_name = (char*) \"NULL\";\n\t\te_type = NULL;\n\t} else {\n\t\te_name = enode->entity->name;\n\t\te_type = enode->entity->type;\n\t}\n\n\t/* print this entity as root if necessary */\n\tif (level == 0 && !(pargs->flags & LAYOUTS_DUMP_NOLAYOUT)\n\t    && pargs->type == NULL) {\n\t\tif (pargs->all != 0 ||\n\t\t    pargs->list_entities == NULL ||\n\t\t    hostlist_find(pargs->list_entities, e_name) != -1) {\n\t\t\tstr = xstrdup_printf(\"Root=%s\\n\", e_name);\n\t\t\tpackstr(str, buffer);\n\t\t\tpargs->record_count++;\n\t\t\txfree(str);\n\t\t}\n\t}\n\n\t/* print entity name and type when possible */\n\tstr = xstrdup_printf(\"Entity=%s\", e_name);\n\tif (e_type) {\n\t\tstrdump = xstrdup_printf(\"%s Type=%s\", str, e_type);\n\t\txfree(str);\n\t\tstr = strdump;\n\t}\n\n\t/* add entity keys matching the layout to the current str */\n\tpargs->current_line = str;\n\tif (enode && enode->entity) {\n\t\txhash_walk(enode->entity->data, _pack_entity_layout_data,\n\t\t\t   pargs);\n\t}\n\t/* the current line might have been extended/remalloced, so\n\t * we need to sync it again in str for further actions */\n\tstr = pargs->current_line;\n\tpargs->current_line = NULL;\n\n\t/* don't print enclosed if no_relation option */\n\tif ((pargs->flags & LAYOUTS_DUMP_NOLAYOUT)\n\t    && enclosed_str != NULL\n\t    && pargs->list_entities == NULL) {\n\t\txfree(enclosed_str);\n\t\txfree(str);\n\t\treturn 1;\n\t}\n\n\t/* don't print non enclosed if no \"entities char*\" option */\n\tif (pargs->all == 0\n\t    && pargs->list_entities == NULL\n\t    && enclosed_str == NULL ) {\n\t\txfree(str);\n\t\treturn 1;\n\t}\n\n\t/* don't print entities if not named in \"entities char*\" */\n\tif (pargs->all == 0\n\t    && pargs->list_entities != NULL\n\t    && hostlist_find(pargs->list_entities, e_name) == -1) {\n\t\txfree(str);\n\t\treturn 1;\n\t}\n\n\t/* don't print entities if not type of \"type char*\" */\n\tif (pargs->type != NULL\n\t    && (e_type == NULL || xstrcasecmp(e_type, pargs->type)!=0)) {\n\t\txfree(str);\n\t\treturn 1;\n\t}\n\n\t/* print enclosed entities if any */\n\tif (!enclosed_str) {\n\t\txstrcat(str, \"\\n\");\n\t} else {\n\t\tstrdump = xstrdup_printf(\"%s Enclosed=%s\\n\", str, enclosed_str);\n\t\txfree(enclosed_str);\n\t\txfree(str);\n\t\tstr = strdump;\n\t}\n\n\tpackstr(str, buffer);\n\tpargs->record_count++;\n\txfree(str);\n\n\treturn 1;\n}\n\n/* helper function used by layouts_save_state when walking through\n * the various layouts to save their state in Slurm state save location */\nstatic void _state_save_layout(void* item, void* arg)\n{\n\tlayout_t* layout = (layout_t*)item;\n\tlayouts_state_save_layout(layout->type);\n}\n\n/*****************************************************************************\\\n *                            ENTITIES KVs AUTOUPDATE                        *\n\\*****************************************************************************/\n\n/*\n * helper structure used when walking the tree of relational nodes in order\n * to automatically update the entities KVs based on their inheritance\n * relationships\n */\ntypedef struct _autoupdate_tree_args {\n\tentity_node_t* enode;\n\tuint8_t which;\n\tuint32_t level;\n} _autoupdate_tree_args_t;\n\n/*\n * helper function used to update a particular KV value of an entity according\n * to a particular operator looking for the right type to apply during the \n * operation\n */\nstatic int _autoupdate_entity_kv(layouts_keydef_t* keydef,\n\t\t\t\t layouts_keydef_t* ref_keydef,\n\t\t\t\t slurm_parser_operator_t operator,\n\t\t\t\t void* oldvalue, void* value)\n{\n\tint rc = SLURM_ERROR;\n\n\tif (keydef->type != ref_keydef->type)\n\t\treturn rc;\n\n\tif (keydef->type == L_T_LONG) {\n\t\t_entity_update_kv_helper(long, operator);\n\t} else if (keydef->type == L_T_UINT16) {\n\t\t_entity_update_kv_helper(uint16_t, operator);\n\t} else if (keydef->type == L_T_UINT32) {\n\t\t_entity_update_kv_helper(uint32_t, operator);\n\t} else if (keydef->type == L_T_FLOAT) {\n\t\t_entity_update_kv_helper(float, operator);\n\t} else if (keydef->type == L_T_DOUBLE) {\n\t\t_entity_update_kv_helper(double, operator);\n\t} else if (keydef->type == L_T_LONG_DOUBLE) {\n\t\t_entity_update_kv_helper(long double, operator);\n\t} else {\n\t\t// L_T_BOOLEAN, L_T_STRING, L_T_CUSTOM not yet supported\n\t\treturn rc;\n\t}\n\n\treturn SLURM_SUCCESS;\n}\n\n/*\n * helper function used to update KVs of an entity using its xtree_node\n * looking for known inheritance in the neighborhood (parents/children) */\nstatic void _tree_update_node_entity_data(void* item, void* arg)\n{\n\tuint32_t action;\n\tentity_data_t* data;\n\t_autoupdate_tree_args_t *pargs;\n\tlayouts_keydef_t* keydef;\n\tlayouts_keydef_t* ref_keydef;\n\tslurm_parser_operator_t operator;\n\txtree_node_t *node, *child;\n\tentity_node_t *enode, *cnode;\n\tvoid* oldvalue;\n\tvoid* value;\n\tuint32_t count;\n\tint setter;\n\n\txassert(item);\n\txassert(arg);\n\n\tdata = (entity_data_t*) item;\n\tpargs = (_autoupdate_tree_args_t *) arg;\n\tcnode = pargs->enode;\n\n\t/* we must be able to get the keydef associated to the data key */\n\txassert(data);\n\tkeydef = xhash_get(mgr->keydefs, data->key);\n\txassert(keydef);\n\n\t/* only work on keys that depend of their neighborhood */\n\tif (!(keydef->flags & KEYSPEC_UPDATE_CHILDREN_MASK) &&\n\t    !(keydef->flags & KEYSPEC_UPDATE_PARENTS_MASK)) {\n\t\treturn;\n\t}\n\n\t/* if children dependant and we are at leaf level, nothing to do */\n\tif (keydef->flags & KEYSPEC_UPDATE_CHILDREN_MASK &&\n\t    pargs->which == XTREE_LEAF)\n\t\treturn;\n\n\t/* only work on keys related to the targeted layout */\n\tif (xstrncmp(keydef->plugin->layout->type, pargs->enode->layout->type,\n\t\t     PATHLEN)) {\n\t\treturn;\n\t}\n\n\t/* get ref_key (identical if not defined) */\n\tif (keydef->ref_key != NULL) {\n\t\tref_keydef = xhash_get(mgr->keydefs, keydef->ref_key);\n\t\tif (!ref_keydef) {\n\t\t\tdebug2(\"layouts: autoupdate: key='%s': invalid \"\n\t\t\t       \"ref_key='%s'\", keydef->key, keydef->ref_key);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tref_keydef = keydef;\n\t}\n\n\t/* process parents aggregation\n\t * for now, xtree only provides one parent so any update op\n\t * (MAX, MIN, FSHARE, ...) is a setter */\n\tif ((action = keydef->flags & KEYSPEC_UPDATE_PARENTS_MASK) &&\n\t    (pargs->which == XTREE_PREORDER || pargs->which == XTREE_LEAF) &&\n\t    (node = ((xtree_node_t*)pargs->enode->node)->parent) != NULL ) {\n\n\t\t/* get current node value reference */\n\t\toldvalue = entity_get_data_ref(cnode->entity, keydef->key);\n\t\tif (!oldvalue)\n\t\t\treturn;\n\n\t\t/* get siblings count */\n\t\tchild = node->start;\n\t\tcount = 0;\n\t\twhile (child) {\n\t\t\tcount++;\n\t\t\tchild = child->next;\n\t\t}\n\n\t\t/* get parent node KV data ref */\n\t\tenode = (entity_node_t*) xtree_node_get_data(node);\n\t\tvalue = entity_get_data_ref(enode->entity, ref_keydef->key);\n\t\tif (!value)\n\t\t\treturn;\n\n\t\t/* only set operation currently provided for parents except\n\t\t * for fshare action */\n\t\t_autoupdate_entity_kv(keydef, ref_keydef, S_P_OPERATOR_SET,\n\t\t\t\t      oldvalue, value);\n\t\tif (action == KEYSPEC_UPDATE_PARENTS_FSHARE) {\n\t\t\t_autoupdate_entity_kv(keydef, ref_keydef,\n\t\t\t\t\t      S_P_OPERATOR_AVG,\n\t\t\t\t\t      oldvalue, (void*) &count);\n\t\t}\n\n\t\treturn;\n\t}\n\n\t/* process children aggregation */\n\tif ((action = keydef->flags & KEYSPEC_UPDATE_CHILDREN_MASK) &&\n\t    pargs->which == XTREE_ENDORDER) {\n\n\t\t/* get current node value reference */\n\t\toldvalue = entity_get_data_ref(cnode->entity, keydef->key);\n\t\tif (!oldvalue)\n\t\t\treturn;\n\n\t\t/* get children count */\n\t\tnode = (xtree_node_t*)cnode->node;\n\t\tchild = node->start;\n\t\tcount = 0;\n\t\twhile (child) {\n\t\t\tcount++;\n\t\t\tchild = child->next;\n\t\t}\n\n\t\t/* no action if no children */\n\t\tif (count == 0)\n\t\t\treturn;\n\n\t\t/* if count action, do what is necessary and return */\n\t\tif (action == KEYSPEC_UPDATE_CHILDREN_COUNT) {\n\t\t\t_autoupdate_entity_kv(keydef, ref_keydef,\n\t\t\t\t\t      S_P_OPERATOR_SET,\n\t\t\t\t\t      oldvalue, (void*) &count);\n\t\t\treturn;\n\t\t}\n\n\t\t/* iterate on the children */\n\t\tsetter = 1;\n\t\tchild = node->start;\n\t\twhile (child) {\n\t\t\t/* get child node KV data ref */\n\t\t\tenode = (entity_node_t*) xtree_node_get_data(child);\n\t\t\tvalue = entity_get_data_ref(enode->entity,\n\t\t\t\t\t\t    ref_keydef->key);\n\n\t\t\tif (!value) {\n\t\t\t\t/* try next child */\n\t\t\t\tchild = child-> next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tswitch (action) {\n\t\t\tcase KEYSPEC_UPDATE_CHILDREN_SUM:\n\t\t\tcase KEYSPEC_UPDATE_CHILDREN_AVG:\n\t\t\t\t/* first child is a setter */\n\t\t\t\tif (setter) {\n\t\t\t\t\toperator = S_P_OPERATOR_SET;\n\t\t\t\t\tsetter = 0;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\toperator = S_P_OPERATOR_ADD;\n\t\t\t\tbreak;\n\t\t\tcase KEYSPEC_UPDATE_CHILDREN_MIN:\n\t\t\t\toperator = S_P_OPERATOR_SET_IF_MIN;\n\t\t\t\tbreak;\n\t\t\tcase KEYSPEC_UPDATE_CHILDREN_MAX:\n\t\t\t\toperator = S_P_OPERATOR_SET_IF_MAX;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t/* should not be called! */\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t/* update the value according to the operator */\n\t\t\t_autoupdate_entity_kv(keydef, ref_keydef, operator,\n\t\t\t\t\t      oldvalue, value);\n\n\t\t\t/* then next child */\n\t\t\tchild = child-> next;\n\t\t}\n\n\t\t/* if average action, do what is necessary before return */\n\t\tif (action == KEYSPEC_UPDATE_CHILDREN_AVG) {\n\t\t\t_autoupdate_entity_kv(keydef, ref_keydef,\n\t\t\t\t\t      S_P_OPERATOR_AVG,\n\t\t\t\t\t      oldvalue, (void*) &count);\n\t\t\treturn;\n\t\t}\n\n\t\treturn;\n\t}\n\n}\n\n/*\n * _autoupdate_layout_tree : internal function used when automatically\n * updating elements of a layout tree using _layouts_autoupdate_layout */\nstatic uint8_t _autoupdate_layout_tree(xtree_node_t* node, uint8_t which,\n\t\t\t\t       uint32_t level, void* arg)\n{\n\tentity_node_t* cnode;\n\t_autoupdate_tree_args_t sync_args;\n\n\t/* only need to work for preorder, leaf and endorder cases */\n\tif (which != XTREE_PREORDER &&\n\t    which != XTREE_LEAF &&\n\t    which != XTREE_ENDORDER) {\n\t\treturn 1;\n\t}\n\n\t/* extract current node entity_node to next browsing */\n\tcnode = (entity_node_t*) xtree_node_get_data(node);\n\tif (!cnode)\n\t\treturn 1;\n\n\t/* prepare downcall args */\n\tsync_args.enode = cnode;\n\tsync_args.which = which;\n\tsync_args.level = level;\n\n\t/* iterate over the K/V of the entity, syncing them according\n\t * to their autoupdate flags */\n\txhash_walk(cnode->entity->data, _tree_update_node_entity_data,\n\t\t   &sync_args);\n\n\treturn 1;\n}\n\n/* helper function used to automatically update a layout internal\n * entities KVs based on inheritance relations (parents/children) */\nstatic int _layouts_autoupdate_layout(layout_t* layout)\n{\n\t/* autoupdate according to the layout struct type */\n\tswitch(layout->struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\txtree_walk(layout->tree, NULL, 0,\n\t\t\t   XTREE_LEVEL_MAX,\n\t\t\t   _autoupdate_layout_tree, NULL);\n\t\tbreak;\n\t}\n\n\treturn SLURM_SUCCESS;\n}\n\n/* helper function used to automatically update a layout internal\n * entities KVs based on inheritance relations (parents/children)\n * only when allowed by the associated plugin */\nstatic int _layouts_autoupdate_layout_if_allowed(layout_t* layout)\n{\n\tint i, rc = SLURM_ERROR;\n\t/* look if the corresponding layout plugin enables autoupdate */\n\tfor (i = 0; i < mgr->plugins_count; i++) {\n\t\tif (mgr->plugins[i].layout == layout) {\n\t\t\t/* no autoupdate allowed, return success */\n\t\t\tif (!mgr->plugins[i].ops->spec->autoupdate)\n\t\t\t\trc = SLURM_SUCCESS;\n\t\t\telse\n\t\t\t\trc = _layouts_autoupdate_layout(layout);\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn rc;\n}\n\n/*****************************************************************************\\\n *                                   DEBUG DUMP                              *\n\\*****************************************************************************/\n\n/*\n * For debug purposes, dump functions helping to print the layout mgr\n * internal states in a file after the load.\n */\n#if 0\nstatic char* _dump_data_key(layouts_keydef_t* keydef, void* value)\n{\n\tchar val;\n\tif (!keydef) {\n\t\treturn xstrdup(\"ERROR_bad_keydef\");\n\t}\n\tswitch(keydef->type) {\n\tcase L_T_ERROR:\n\t\treturn xstrdup(\"ERROR_keytype!\");\n\tcase L_T_STRING:\n\t\treturn xstrdup((char*)value);\n\tcase L_T_LONG:\n\t\treturn xstrdup_printf(\"%ld\", *(long*)value);\n\tcase L_T_UINT16:\n\t\treturn xstrdup_printf(\"%u\", *(uint16_t*)value);\n\tcase L_T_UINT32:\n\t\treturn xstrdup_printf(\"%ul\", *(uint32_t*)value);\n\tcase L_T_BOOLEAN:\n\t\tval = *(bool*)value;\n\t\treturn xstrdup_printf(\"%s\", val ? \"true\" : \"false\");\n\tcase L_T_FLOAT:\n\t\treturn xstrdup_printf(\"%f\", *(float*)value);\n\tcase L_T_DOUBLE:\n\t\treturn xstrdup_printf(\"%f\", *(double*)value);\n\tcase L_T_LONG_DOUBLE:\n\t\treturn xstrdup_printf(\"%Lf\", *(long double*)value);\n\tcase L_T_CUSTOM:\n\t\tif (keydef->custom_dump) {\n\t\t\treturn keydef->custom_dump(value);\n\t\t}\n\t\treturn xstrdup_printf(\"custom_ptr(%p)\", value);\n\t}\n\treturn NULL;\n}\n\nstatic void _dump_entity_data(void* item, void* arg)\n{\n\tentity_data_t* data = (entity_data_t*)item;\n\tFILE* fdump = (FILE*)arg;\n\tlayouts_keydef_t* keydef;\n\tchar* data_dump;\n\n\txassert(data);\n\tkeydef = xhash_get(mgr->keydefs, data->key);\n\txassert(keydef);\n\tdata_dump = _dump_data_key(keydef, data->value);\n\n\tfprintf(fdump, \"data %s (type: %d): %s\\n\",\n\t\tdata->key, keydef->type, data_dump);\n\n\txfree(data_dump);\n}\n\nstatic void _dump_entities(void* item, void* arg)\n{\n\tentity_t* entity = (entity_t*)item;\n\tFILE* fdump = (FILE*)arg;\n\tfprintf(fdump, \"-- entity %s --\\n\", entity->name);\n\tfprintf(fdump, \"type: %s\\nnode count: %d\\nptr: %p\\n\",\n\t\tentity->type, list_count(entity->nodes), entity->ptr);\n\txhash_walk(entity->data, _dump_entity_data, fdump);\n}\n\nstatic uint8_t _dump_layout_tree(xtree_node_t* node, uint8_t which,\n\t\t\t\t uint32_t level, void* arg)\n{\n\tFILE* fdump = (FILE*)arg;\n\tentity_t* e;\n\tentity_node_t* enode;\n\tif (which != XTREE_PREORDER && which != XTREE_LEAF) {\n\t\treturn 1;\n\t}\n\tenode = (entity_node_t*) xtree_node_get_data(node);\n\tif (!enode || !enode->entity) {\n\t\tfprintf(fdump, \"NULL_entity\\n\");\n\t}\n\telse {\n\t\tfprintf(fdump, \"%*s%s\\n\", level, \" \", enode->entity->name);\n\t}\n\treturn 1;\n}\n\nstatic void _dump_layouts(void* item, void* arg)\n{\n\tlayout_t* layout = (layout_t*)item;\n\tFILE* fdump = (FILE*)arg;\n\tfprintf(fdump, \"-- layout %s --\\n\"\n\t\t\"type: %s\\n\"\n\t\t\"priority: %u\\n\"\n\t\t\"struct_type: %d\\n\"\n\t\t\"relational ptr: %p\\n\",\n\t\tlayout->name,\n\t\tlayout->type,\n\t\tlayout->priority,\n\t\tlayout->struct_type,\n\t\tlayout->tree);\n\tswitch(layout->struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\tfprintf(fdump, \"struct_type(string): tree, count: %d\\n\"\n\t\t\t\"entities list:\\n\",\n\t\t\txtree_get_count(layout->tree));\n\t\txtree_walk(layout->tree, NULL, 0, XTREE_LEVEL_MAX,\n\t\t\t   _dump_layout_tree, fdump);\n\t\tbreak;\n\t}\n}\n#endif\n\n\n/*****************************************************************************\\\n *                             SLURM LAYOUTS API                             *\n\\*****************************************************************************/\n\nint layouts_init(void)\n{\n\tint i = 0;\n\tuint32_t layouts_count;\n\n\tdebug3(\"layouts: layouts_init()...\");\n\n\tif (mgr->plugins) {\n\t\treturn SLURM_SUCCESS;\n\t}\n\n\tslurm_mutex_lock(&layouts_mgr.lock);\n\n\t_layouts_mgr_init(&layouts_mgr);\n\tlayouts_count = list_count(layouts_mgr.layouts_desc);\n\tif (layouts_count == 0)\n\t\tinfo(\"layouts: no layout to initialize\");\n\telse\n\t\tinfo(\"layouts: %d layout(s) to initialize\", layouts_count);\n\n\tmgr->plugins = xmalloc(sizeof(layout_plugin_t) * layouts_count);\n\tlist_for_each(layouts_mgr.layouts_desc,\n\t\t      _layouts_init_layouts_walk_helper,\n\t\t      &i);\n\tmgr->plugins_count = i;\n\n\tif (mgr->plugins_count != layouts_count) {\n\t\terror(\"layouts: only %d/%d layouts loaded, aborting...\",\n\t\t      mgr->plugins_count, layouts_count);\n\t\tfor (i = 0; i < mgr->plugins_count; i++) {\n\t\t\t_layout_plugins_destroy(&mgr->plugins[i]);\n\t\t}\n\t\txfree(mgr->plugins);\n\t\tmgr->plugins = NULL;\n\t} else if (layouts_count > 0) {\n\t\tinfo(\"layouts: layouts_init done : %d layout(s) \"\n\t\t     \"initialized\", layouts_count);\n\t}\n\n\tslurm_mutex_unlock(&layouts_mgr.lock);\n\n\treturn mgr->plugins_count == layouts_count ?\n\t\tSLURM_SUCCESS : SLURM_ERROR;\n}\n\nint layouts_fini(void)\n{\n\tint i;\n\n\tdebug3(\"layouts: layouts_fini()...\");\n\n\t/* push layouts states to the state save location */\n\tlayouts_state_save();\n\n\tslurm_mutex_lock(&mgr->lock);\n\n\t/*\n\t * free the layouts before destroying the plugins,\n\t * otherwise we will get trouble xfreeing the layouts whose\n\t * memory is owned by the plugins structs\n\t */\n\t_layouts_mgr_free(mgr);\n\n\tfor (i = 0; i < mgr->plugins_count; i++) {\n\t\t_layout_plugins_destroy(&mgr->plugins[i]);\n\t}\n\txfree(mgr->plugins);\n\tmgr->plugins = NULL;\n\tmgr->plugins_count = 0;\n\n\tslurm_mutex_unlock(&mgr->lock);\n\n\tinfo(\"layouts: all layouts are now unloaded.\");\n\n\treturn SLURM_SUCCESS;\n}\n\nint layouts_load_config(int recover)\n{\n\tint i, rc, inx;\n\tstruct node_record *node_ptr;\n\tlayout_t *layout;\n\tuint32_t layouts_count;\n\tentity_t *entity;\n\tentity_node_t *enode;\n\tvoid *ptr;\n\n\tinfo(\"layouts: loading entities/relations information\");\n\trc = SLURM_SUCCESS;\n\n\tslurm_mutex_lock(&mgr->lock);\n\tif (xhash_count(layouts_mgr.entities)) {\n\t\tslurm_mutex_unlock(&mgr->lock);\n\t\treturn rc;\n\t}\n\n\t/*\n\t * create a base layout to contain the configured nodes\n\t * Notes : it might be moved to its own external layout in the\n\t * slurm source layouts directory.\n\t */\n\tlayout = (layout_t*) xmalloc(sizeof(layout_t));\n\tlayout_init(layout, \"slurm\", \"base\", 0, LAYOUT_STRUCT_TREE);\n\tif (xtree_add_child(layout->tree, NULL, NULL, XTREE_APPEND) == NULL) {\n\t\terror(\"layouts: unable to create base layout tree root\"\n\t\t      \", aborting\");\n\t\tgoto exit;\n\t}\n\n\t/*\n\t * generate and store the slurm node entities,\n\t * add them to the base layout at the same time\n\t */\n\tfor (inx = 0, node_ptr = node_record_table_ptr; inx < node_record_count;\n\t     inx++, node_ptr++) {\n\t\tdebug3(\"layouts: loading node %s\", node_ptr->name);\n\t\txassert (node_ptr->magic == NODE_MAGIC);\n\t\txassert (node_ptr->config_ptr->magic == CONFIG_MAGIC);\n\n\t\t/* init entity structure on the heap */\n\t\tentity = (entity_t*) xmalloc(sizeof(struct entity_st));\n\t\tentity_init(entity, node_ptr->name, \"Node\");\n\t\tentity->ptr = node_ptr;\n\n\t\t/* add to mgr entity hashtable */\n\t\tif (xhash_add(layouts_mgr.entities,(void*)entity) == NULL) {\n\t\t\terror(\"layouts: unable to add entity of node %s\"\n\t\t\t      \"in the hashtable, aborting\", node_ptr->name);\n\t\t\tentity_free(entity);\n\t\t\txfree(entity);\n\t\t\trc = SLURM_ERROR;\n\t\t\tbreak;\n\t\t}\n\n\t\t/* add to the base layout (storing a callback ref to the\n\t\t * layout node pointing to it) */\n\t\tenode = entity_add_node(entity, layout);\n\t\tptr = xtree_add_child(layout->tree, layout->tree->root,\n\t\t\t\t      (void*)enode, XTREE_APPEND);\n\t\tif (!ptr) {\n\t\t\terror(\"layouts: unable to add entity of node %s\"\n\t\t\t      \"in the hashtable, aborting\", node_ptr->name);\n\t\t\tentity_free(entity);\n\t\t\txfree(entity);\n\t\t\trc = SLURM_ERROR;\n\t\t\tbreak;\n\t\t} else {\n\t\t\tenode->node = ptr;\n\t\t}\n\t}\n\tdebug(\"layouts: %d/%d nodes in hash table, rc=%d\",\n\t      xhash_count(layouts_mgr.entities), node_record_count, rc);\n\n\tif (rc != SLURM_SUCCESS)\n\t\tgoto exit;\n\n\t/* add the base layout to the layouts manager dedicated hashtable */\n\tif (xhash_add(layouts_mgr.layouts, (void*)layout) == NULL) {\n\t\terror(\"layouts: unable to add base layout into the hashtable\");\n\t\tlayout_free(layout);\n\t\trc = SLURM_ERROR;\n\t}\n\n\t/* check that we get as many layouts as initiliazed plugins\n\t * as layouts are added and referenced by type.\n\t * do +1 in the operation as the base layout is currently managed\n\t * separately.\n\t * If this base layout is moved to a dedicated plugin and automatically\n\t * added to the mgr layouts_desc at init, the +1 will have to be\n\t * removed here as it will be counted as the other plugins in the sum\n\t */\n\tlayouts_count = xhash_count(layouts_mgr.layouts);\n\tif ( layouts_count != mgr->plugins_count + 1) {\n\t\terror(\"layouts: %d/%d layouts added to hashtable, aborting\",\n\t\t      layouts_count, mgr->plugins_count+1);\n\t\trc = SLURM_ERROR;\n\t}\n\nexit:\n\tif (rc != SLURM_SUCCESS) {\n\t\tlayout_free(layout);\n\t\txfree(layout);\n\t} else {\n\t\tdebug(\"layouts: loading stage 1\");\n\t\tfor (i = 0; i < mgr->plugins_count; ++i) {\n\t\t\tdebug3(\"layouts: reading config for %s\",\n\t\t\t       mgr->plugins[i].name);\n\t\t\tif (_layouts_read_config(&mgr->plugins[i]) !=\n\t\t\t    SLURM_SUCCESS) {\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (recover) {\n\t\t\tdebug(\"layouts: loading stage 1.1 (restore state)\");\n\t\t\tfor (i = 0; i < mgr->plugins_count; ++i) {\n\t\t\t\tdebug3(\"layouts: reading state of %s\",\n\t\t\t\t       mgr->plugins[i].name);\n\t\t\t\t_layouts_read_state(&mgr->plugins[i]);\n\t\t\t}\n\t\t}\n\t\tdebug(\"layouts: loading stage 2\");\n\t\tfor (i = 0; i < mgr->plugins_count; ++i) {\n\t\t\tdebug3(\"layouts: creating relations for %s\",\n\t\t\t       mgr->plugins[i].name);\n\t\t\tif (_layouts_build_relations(&mgr->plugins[i]) !=\n\t\t\t    SLURM_SUCCESS) {\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tdebug(\"layouts: loading stage 3\");\n\t\tfor (i = 0; i < mgr->plugins_count; ++i) {\n\t\t\tdebug3(\"layouts: autoupdating %s\",\n\t\t\t       mgr->plugins[i].name);\n\t\t\tif (mgr->plugins[i].ops->spec->autoupdate) {\n\t\t\t\tif (_layouts_autoupdate_layout(mgr->plugins[i].\n\t\t\t\t\t\t\t       layout) !=\n\t\t\t\t    SLURM_SUCCESS) {\n\t\t\t\t\trc = SLURM_ERROR;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n/*\n * For debug purposes, print the layout mgr internal states\n * in a file after the load.\n */\n#if 0\n\t/* temporary section to test layouts */\n\tFILE* fdump = fopen(\"/tmp/slurm-layouts-dump.txt\", \"wb\");\n\n\txhash_walk(mgr->entities, _dump_entities, fdump);\n\txhash_walk(mgr->layouts,  _dump_layouts,  fdump);\n\n\tif (fdump)\n\t\tfclose(fdump);\n#endif\n\n\tslurm_mutex_unlock(&mgr->lock);\n\n\treturn rc;\n}\n\nlayout_t* layouts_get_layout_nolock(const char* type)\n{\n\treturn (layout_t*)xhash_get(mgr->layouts, type);\n}\n\nlayout_t* layouts_get_layout(const char* type)\n{\n\tlayout_t *layout = NULL;\n\tslurm_mutex_lock(&mgr->lock);\n\tlayout = layouts_get_layout_nolock(type);\n\tslurm_mutex_unlock(&mgr->lock);\n\treturn layout;\n}\n\nentity_t* layouts_get_entity_nolock(const char* name)\n{\n\treturn (entity_t*)xhash_get(mgr->entities, name);\n}\n\nentity_t* layouts_get_entity(const char* name)\n{\n\tentity_t* e;\n\tslurm_mutex_lock(&mgr->lock);\n\te = layouts_get_entity_nolock(name);\n\tslurm_mutex_unlock(&mgr->lock);\n\treturn e;\n}\n\n\nint layouts_pack_layout(char *l_type, char *char_entities, char *type,\n\t\t\tuint32_t flags, Buf buffer)\n{\n\t_pack_args_t pargs;\n\tlayout_t* layout;\n\tint orig_offset, fini_offset;\n\tchar *str;\n\n\tslurm_mutex_lock(&mgr->lock);\n\n\tlayout = layouts_get_layout_nolock(l_type);\n\tif (layout == NULL) {\n\t\tslurm_mutex_unlock(&mgr->lock);\n\t\tinfo(\"unable to get layout of type '%s'\", l_type);\n\t\treturn SLURM_ERROR;\n\t}\n\t/* initialize args for recursive packing */\n\tpargs.buffer = buffer;\n\tpargs.layout = layout;\n\tpargs.current_line = NULL;\n\tpargs.all = 0;\n\tpargs.list_entities = NULL;\n\tif (char_entities != NULL) {\n\t\tif (xstrcmp(char_entities, \"*\") == 0)\n\t\t\tpargs.all = 1;\n\t\telse\n\t\t\tpargs.list_entities = hostlist_create(char_entities);\n\t}\n\tpargs.type = type;\n\tpargs.flags = flags;\n\tpargs.record_count = 0;\n\torig_offset = get_buf_offset(buffer);\n\tpack32(pargs.record_count, buffer);\n\n\t/* start by packing the layout priority in case we are dumping state */\n\tif (pargs.flags & LAYOUTS_DUMP_STATE) {\n\t\tstr = xstrdup_printf(\"Priority=%u\\n\", layout->priority);\n\t\tpackstr(str, buffer);\n\t\tpargs.record_count++;\n\t\txfree(str);\n\t}\n\n\t/* pack according to the layout struct type */\n\tswitch (layout->struct_type) {\n\tcase LAYOUT_STRUCT_TREE:\n\t\txtree_walk(layout->tree, NULL, 0, XTREE_LEVEL_MAX,\n\t\t\t   _pack_layout_tree, &pargs);\n\t\tbreak;\n\t}\n\n\tif (pargs.list_entities != NULL)\n\t\tslurm_hostlist_destroy(pargs.list_entities);\n\n\tfini_offset = get_buf_offset(buffer);\n\tset_buf_offset(buffer, orig_offset);\n\tpack32(pargs.record_count, buffer);\n\tset_buf_offset(buffer, fini_offset);\n\n\tslurm_mutex_unlock(&mgr->lock);\n\n\treturn SLURM_SUCCESS;\n}\n\nint layouts_update_layout(char *l_type, Buf buffer)\n{\n\tint i, rc;\n\tslurm_mutex_lock(&mgr->lock);\n\tfor (i = 0; i < mgr->plugins_count; i++) {\n\t\tif (!xstrcmp(mgr->plugins[i].name, l_type)) {\n\t\t\trc = _layouts_update_state((layout_plugin_t*)\n\t\t\t\t\t\t   &mgr->plugins[i],\n\t\t\t\t\t\t   buffer);\n\t\t\tslurm_mutex_unlock(&mgr->lock);\n\t\t\treturn rc;\n\t\t}\n\t}\n\tinfo(\"%s: no plugin matching layout=%s, skipping\", __func__, l_type);\n\tslurm_mutex_unlock(&mgr->lock);\n\treturn SLURM_ERROR;\n}\n\nint layouts_autoupdate_layout(char *l_type)\n{\n\tint rc = SLURM_ERROR;\n\tlayout_t* layout;\n\n\tslurm_mutex_lock(&mgr->lock);\n\tlayout = layouts_get_layout_nolock(l_type);\n\tif (layout == NULL) {\n\t\tinfo(\"unable to get layout of type '%s'\", l_type);\n\t} else {\n\t\trc = _layouts_autoupdate_layout(layout);\n\t}\n\tslurm_mutex_unlock(&mgr->lock);\n\n\treturn rc;\n}\n\nint layouts_state_save_layout(char* l_type)\n{\n\tint error_code = 0, log_fd, offset;\n\tchar *old_file = NULL, *new_file = NULL, *reg_file = NULL;\n\tstatic int high_buffer_size = (16 * 1024);\n\tBuf buffer = init_buf(high_buffer_size);\n\tFILE* fdump;\n\tuint32_t utmp32, record_count = 0;\n\tchar *tmp_str = NULL;\n\n\tDEF_TIMERS;\n\tSTART_TIMER;\n\n\t/* pack the targeted layout into a tmp buffer */\n\terror_code = layouts_pack_layout(l_type, \"*\", NULL,\n\t\t\t\t\t LAYOUTS_DUMP_STATE, buffer);\n\tif (error_code != SLURM_SUCCESS) {\n\t\terror(\"unable to save layout[%s] state\", l_type);\n\t\treturn error_code;\n\t}\n\n\t/* rewind the freshly created buffer to unpack it into a file */\n\toffset = get_buf_offset(buffer);\n\thigh_buffer_size = MAX(high_buffer_size, offset);\n\tset_buf_offset(buffer, 0);\n\n\t/* create working files */\n\treg_file = _state_get_filename(l_type);\n\told_file = xstrdup_printf(\"%s.old\", reg_file);\n\tnew_file = xstrdup_printf(\"%s.new\", reg_file);\n\tlog_fd = creat(new_file, 0600);\n\tif (log_fd < 0 || !(fdump = fdopen(log_fd, \"w\"))) {\n\t\terror(\"Can't save state, create file %s error %m\",\n\t\t      new_file);\n\t\terror_code = errno;\n\t} else {\n\t\t/* extract the amount of records and then proceed\n\t\t * then dump packed strings into the temporary file */\n\t\tsafe_unpack32(&record_count, buffer);\n\t\tdebug(\"layouts/%s: dumping %u records into state file\",\n\t\t      l_type, record_count);\n\t\twhile (get_buf_offset(buffer) < offset) {\n\t\t\tsafe_unpackstr_xmalloc(&tmp_str, &utmp32, buffer);\n\t\t\tif (tmp_str != NULL) {\n\t\t\t\tif (*tmp_str == '\\0') {\n\t\t\t\t\txfree(tmp_str);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfprintf(fdump, \"%s\", tmp_str);\n\t\t\t\txfree(tmp_str);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\tunpack_error:\n\t\t\tbreak;\n\t\t}\n\t\tfflush(fdump);\n\t\tfsync(log_fd);\n\t\tfclose(fdump);\n\t}\n\tif (error_code)\n\t\t(void) unlink(new_file);\n\telse {\t\t\t/* file shuffle */\n\t\t(void) unlink(old_file);\n\t\tif (link(reg_file, old_file))\n\t\t\tdebug4(\"unable to create link for %s -> %s: %m\",\n\t\t\t       reg_file, old_file);\n\t\t(void) unlink(reg_file);\n\t\tif (link(new_file, reg_file))\n\t\t\tdebug4(\"unable to create link for %s -> %s: %m\",\n\t\t\t       new_file, reg_file);\n\t\t(void) unlink(new_file);\n\t}\n\txfree(old_file);\n\txfree(reg_file);\n\txfree(new_file);\n\n\tfree_buf(buffer);\n\n\tEND_TIMER2(\"layouts_state_save_layout\");\n\n\treturn SLURM_SUCCESS;\n}\n\nint layouts_state_save(void)\n{\n\tDEF_TIMERS;\n\tSTART_TIMER;\n\txhash_walk(mgr->layouts,  _state_save_layout, NULL);\n\tEND_TIMER2(\"layouts_state_save\");\n\treturn SLURM_SUCCESS;\n}\n\n#define _layouts_entity_wrapper(func, l, e, r...)\t\t\t\\\n\tlayout_t* layout;\t\t\t\t\t\t\\\n\tentity_t* entity;\t\t\t\t\t\t\\\n\tint rc;\t\t\t\t\t\t\t\t\\\n\tslurm_mutex_lock(&mgr->lock);\t\t\t\t\t\\\n\tlayout = layouts_get_layout_nolock(l);\t\t\t\t\\\n\tentity = layouts_get_entity_nolock(e);\t\t\t\t\\\n\trc = func(layout, entity, ##r);\t\t\t\t\t\\\n\tslurm_mutex_unlock(&mgr->lock);\t\t\t\t\t\\\n\treturn rc;\t\t\t\t\t\t\t\\\n\nint layouts_entity_get_kv_type(char* l, char* e, char* key)\n{\n\t_layouts_entity_wrapper(_layouts_entity_get_kv_type,l,e,key);\n}\n\nint layouts_entity_get_kv_flags(char* l, char* e, char* key)\n{\n\t_layouts_entity_wrapper(_layouts_entity_get_kv_flags, l, e, key);\n}\n\nint layouts_entity_push_kv(char* l, char* e, char* key)\n{\n\t_layouts_entity_wrapper(_layouts_entity_push_kv, l, e, key);\n}\n\nint layouts_entity_pull_kv(char* l, char* e, char* key)\n{\n\t_layouts_entity_wrapper(_layouts_entity_pull_kv, l, e, key);\n}\n\nint layouts_entity_set_kv(char* l, char* e, char* key, void* value,\n\t\t\t  layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_set_kv, l, e,\n\t\t\t\tkey, value, key_type);\n}\n\nint layouts_entity_set_kv_ref(char* l, char* e, char* key, void* value,\n\t\t\t      layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_set_kv_ref, l, e,\n\t\t\t\tkey, value, key_type);\n}\n\nint layouts_entity_setpush_kv(char* l, char* e, char* key, void* value,\n\t\t\t      layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_setpush_kv, l, e,\n\t\t\t\tkey, value, key_type);\n}\n\nint layouts_entity_setpush_kv_ref(char* l, char* e, char* key, void* value,\n\t\t\t\t  layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_setpush_kv_ref, l, e,\n\t\t\t\tkey, value, key_type);\n}\n\nint layouts_entity_get_kv(char* l, char* e, char* key, void* value,\n\t\t\t  layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_get_kv, l, e,\n\t\t\t\tkey, value, key_type);\n}\n\nint layouts_entity_get_mkv(char* l, char* e, char* keys, void* value,\n\t\t\t   size_t size, layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_get_mkv, l, e,\n\t\t\t\tkeys, value, size, key_type);\n}\n\nint layouts_entity_get_kv_ref(char* l, char* e, char* key, void** value,\n\t\t\t      layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_get_kv_ref, l, e,\n\t\t\t\tkey, value, key_type);\n}\n\nint layouts_entity_get_mkv_ref(char* l, char* e, char* keys, void* value,\n\t\t\t       size_t size, layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_get_mkv_ref, l, e,\n\t\t\t\tkeys, value, size, key_type);\n}\n\nint layouts_entity_pullget_kv(char* l, char* e, char* key, void* value,\n\t\t\t      layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_pullget_kv, l, e,\n\t\t\t\tkey, value, key_type);\n}\n\nint layouts_entity_pullget_kv_ref(char* l, char* e, char* key, void** value,\n\t\t\t\t  layouts_keydef_types_t key_type)\n{\n\t_layouts_entity_wrapper(_layouts_entity_pullget_kv_ref, l, e,\n\t\t\t\tkey, value, key_type);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/src/common/plugin.c": "/*****************************************************************************\\\n *  plugin.h - plugin architecture implementation.\n *****************************************************************************\n *  Copyright (C) 2002-2007 The Regents of the University of California.\n *  Copyright (C) 2008-2009 Lawrence Livermore National Security.\n *  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).\n *  Written by Jay Windley <jwindley@lnxi.com>.\n *  CODE-OCEC-09-009. All rights reserved.\n *  Portions Copyright (C) 2012 SchedMD LLC.\n *  Written by Danny Auble <da@schedmd.com>\n *\n *  This file is part of Slurm, a resource management program.\n *  For details, see <https://slurm.schedmd.com/>.\n *  Please also read the included file: DISCLAIMER.\n *\n *  Slurm is free software; you can redistribute it and/or modify it under\n *  the terms of the GNU General Public License as published by the Free\n *  Software Foundation; either version 2 of the License, or (at your option)\n *  any later version.\n *\n *  In addition, as a special exception, the copyright holders give permission\n *  to link the code of portions of this program with the OpenSSL library under\n *  certain conditions as described in each individual source file, and\n *  distribute linked combinations including the two. You must obey the GNU\n *  General Public License in all respects for all of the code used other than\n *  OpenSSL. If you modify file(s) with this exception, you may extend this\n *  exception to your version of the file(s), but you are not obligated to do\n *  so. If you do not wish to do so, delete this exception statement from your\n *  version.  If you delete this exception statement from all source files in\n *  the program, then also delete it here.\n *\n *  Slurm is distributed in the hope that it will be useful, but WITHOUT ANY\n *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n *  details.\n *\n *  You should have received a copy of the GNU General Public License along\n *  with Slurm; if not, write to the Free Software Foundation, Inc.,\n *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.\n\\*****************************************************************************/\n\n#include \"config.h\"\n\n#include <dlfcn.h>\n#include <errno.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n#include \"src/common/xmalloc.h\"\n#include \"src/common/log.h\"\n#include \"src/common/plugrack.h\"\n#include \"src/common/strlcpy.h\"\n#include \"src/common/xstring.h\"\n#include \"src/common/slurm_protocol_api.h\"\n#include \"slurm/slurm_errno.h\"\n\nstrong_alias(plugin_get_syms,         slurm_plugin_get_syms);\nstrong_alias(plugin_load_and_link,    slurm_plugin_load_and_link);\nstrong_alias(plugin_strerror,         slurm_plugin_strerror);\nstrong_alias(plugin_unload,           slurm_plugin_unload);\n\n/* dlerror() on AIX sometimes fails, revert to strerror() as needed */\nstatic char *_dlerror(void)\n{\n\tint error_code = errno;\n\tchar *rc = dlerror();\n\n\tif ((rc == NULL) || (rc[0] == '\\0'))\n\t\trc = strerror(error_code);\n\n\treturn rc;\n}\n\nconst char * plugin_strerror(plugin_err_t e)\n{\n\tswitch (e) {\n\t\tcase EPLUGIN_SUCCESS:\n\t\t\treturn (\"Success\");\n\t\tcase EPLUGIN_NOTFOUND:\n\t\t\treturn (\"Plugin file not found\");\n\t\tcase EPLUGIN_ACCESS_ERROR:\n\t\t\treturn (\"Plugin access denied\");\n\t\tcase EPLUGIN_DLOPEN_FAILED:\n\t\t\treturn (\"Dlopen of plugin file failed\");\n\t\tcase EPLUGIN_INIT_FAILED:\n\t\t\treturn (\"Plugin init() callback failed\");\n\t\tcase EPLUGIN_MISSING_NAME:\n\t\t\treturn (\"Plugin name/type/version symbol missing\");\n\t\tcase EPLUGIN_MISSING_SYMBOL:\n\t\t\treturn (\"Plugin missing a required symbol use \"\n\t\t\t\t\"debug3 to see\");\n\t\tcase EPLUGIN_BAD_VERSION:\n\t\t\treturn (\"Incompatible plugin version\");\n\t}\n\treturn (\"Unknown error\");\n}\n\nint\nplugin_peek( const char *fq_path,\n\t\t\t char *plugin_type,\n\t\t\t const size_t type_len,\n\t\t\t uint32_t *plugin_version )\n{\n\tplugin_handle_t plug;\n\tchar *type;\n\tuint32_t *version;\n\n\tplug = dlopen( fq_path, RTLD_LAZY );\n\tif ( plug == NULL ) {\n\t\tdebug3( \"plugin_peek: dlopen(%s): %s\", fq_path, _dlerror() );\n\t\treturn SLURM_ERROR;\n\t}\n\tif ( ( type = dlsym( plug, PLUGIN_TYPE ) ) != NULL ) {\n\t\tif ( plugin_type != NULL ) {\n\t\t\tstrlcpy(plugin_type, type, type_len);\n\t\t}\n\t} else {\n\t\tdlclose( plug );\n\t\t/* could be vestigial library, don't treat as an error */\n\t\tverbose( \"%s: not a Slurm plugin\", fq_path );\n\t\treturn SLURM_ERROR;\n\t}\n\n\tversion = (uint32_t *) dlsym(plug, PLUGIN_VERSION);\n\tif (!version) {\n\t\tverbose(\"%s: plugin_version symbol not defined\", fq_path);\n\t} else if ((*version != SLURM_VERSION_NUMBER) && xstrcmp(type,\"spank\")){\n\t\t/* NOTE: We could alternatly test just the MAJOR.MINOR values */\n\t\tint plugin_major, plugin_minor, plugin_micro;\n\t\tplugin_major = SLURM_VERSION_MAJOR(*version);\n\t\tplugin_minor = SLURM_VERSION_MINOR(*version);\n\t\tplugin_micro = SLURM_VERSION_MICRO(*version);\n\t\tdlclose(plug);\n\t\tinfo(\"%s: Incompatible Slurm plugin version (%d.%d.%d)\",\n\t\t     fq_path, plugin_major, plugin_minor, plugin_micro);\n\t\treturn SLURM_ERROR;\n\t}\n\n\tdlclose( plug );\n\treturn SLURM_SUCCESS;\n}\n\nplugin_err_t\nplugin_load_from_file(plugin_handle_t *p, const char *fq_path)\n{\n\tplugin_handle_t plug;\n\tint (*init)(void);\n\tuint32_t *version;\n\tchar *type = NULL;\n\n\t*p = PLUGIN_INVALID_HANDLE;\n\n\t/*\n\t *  Check for file existence and access permissions\n\t */\n\tif (access(fq_path, R_OK) < 0) {\n\t\tif (errno == ENOENT)\n\t\t\treturn EPLUGIN_NOTFOUND;\n\t\telse\n\t\t\treturn EPLUGIN_ACCESS_ERROR;\n\t}\n\n\t/*\n\t * Try to open the shared object.\n\t *\n\t * Use RTLD_LAZY to allow plugins to use symbols that may be\n\t * defined in only one slurm entity (e.g. srun and not slurmd),\n\t * when the use of that symbol is restricted to within the\n\t * entity from which it is available. (i.e. srun symbols are only\n\t * used in the context of srun, not slurmd.)\n\t *\n\t */\n\tplug = dlopen(fq_path, RTLD_LAZY);\n\tif (plug == NULL) {\n\t\terror(\"plugin_load_from_file: dlopen(%s): %s\",\n\t\t      fq_path,\n\t\t      _dlerror());\n\t\treturn EPLUGIN_DLOPEN_FAILED;\n\t}\n\n\t/* Now see if our required symbols are defined. */\n\tif ((dlsym(plug, PLUGIN_NAME) == NULL) ||\n\t    ((type = dlsym(plug, PLUGIN_TYPE)) == NULL)) {\n\t\tdlclose(plug);\n\t\treturn EPLUGIN_MISSING_NAME;\n\t}\n\n\tversion = (uint32_t *) dlsym(plug, PLUGIN_VERSION);\n\tif (!version) {\n\t\tverbose(\"%s: plugin_version symbol not defined\", fq_path);\n\t} else if ((*version != SLURM_VERSION_NUMBER) && xstrcmp(type,\"spank\")){\n\t\t/* NOTE: We could alternatly test just the MAJOR.MINOR values */\n\t\tint plugin_major, plugin_minor, plugin_micro;\n\t\tplugin_major = SLURM_VERSION_MAJOR(*version);\n\t\tplugin_minor = SLURM_VERSION_MINOR(*version);\n\t\tplugin_micro = SLURM_VERSION_MICRO(*version);\n\t\tdlclose(plug);\n\t\tinfo(\"%s: Incompatible Slurm plugin version (%d.%d.%d)\",\n\t\t     fq_path, plugin_major, plugin_minor, plugin_micro);\n\t\treturn EPLUGIN_BAD_VERSION;\n\t}\n\n\t/*\n\t * Now call its init() function, if present.  If the function\n\t * returns nonzero, unload the plugin and signal an error.\n\t */\n\tif ((init = dlsym(plug, \"init\")) != NULL) {\n\t\tif ((*init)() != 0) {\n\t\t\tdlclose(plug);\n\t\t\treturn EPLUGIN_INIT_FAILED;\n\t\t}\n\t}\n\n\t*p = plug;\n\treturn EPLUGIN_SUCCESS;\n}\n\nplugin_handle_t\nplugin_load_and_link(const char *type_name, int n_syms,\n\t\t     const char *names[], void *ptrs[])\n{\n\tplugin_handle_t plug = PLUGIN_INVALID_HANDLE;\n\tstruct stat st;\n\tchar *head = NULL, *dir_array = NULL, *so_name = NULL;\n\tchar *file_name = NULL;\n\tint i = 0;\n\tplugin_err_t err = EPLUGIN_NOTFOUND;\n\n\tif (!type_name)\n\t\treturn plug;\n\tso_name = xstrdup_printf(\"%s.so\", type_name);\n\twhile (so_name[i]) {\n\t\tif (so_name[i] == '/')\n\t\t\tso_name[i] = '_';\n\t\ti++;\n\t}\n\tif (!(dir_array = slurm_get_plugin_dir())) {\n\t\terror(\"plugin_load_and_link: No plugin dir given\");\n\t\txfree(so_name);\n\t\treturn plug;\n\t}\n\n\thead = dir_array;\n\tfor (i = 0; ; i++) {\n\t\tbool got_colon = 0;\n\t\tif (dir_array[i] == ':') {\n\t\t\tdir_array[i] = '\\0';\n\t\t\tgot_colon = 1;\n\t\t} else if (dir_array[i] != '\\0')\n\t\t\tcontinue;\n\n\t\tfile_name = xstrdup_printf(\"%s/%s\", head, so_name);\n\t\tdebug3(\"Trying to load plugin %s\", file_name);\n\t\tif ((stat(file_name, &st) < 0) || (!S_ISREG(st.st_mode))) {\n\t\t\tdebug4(\"%s: Does not exist or not a regular file.\",\n\t\t\t       file_name);\n\t\t\txfree(file_name);\n\t\t\terr = EPLUGIN_NOTFOUND;\n\t\t} else {\n\t\t\tif ((err = plugin_load_from_file(&plug, file_name))\n\t\t\t   == EPLUGIN_SUCCESS) {\n\t\t\t\tif (plugin_get_syms(plug, n_syms,\n\t\t\t\t\t\t    names, ptrs) >= n_syms) {\n\t\t\t\t\tdebug3(\"Success.\");\n\t\t\t\t\txfree(file_name);\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t(void) dlclose(plug);\n\t\t\t\t\terr = EPLUGIN_MISSING_SYMBOL;\n\t\t\t\t\tplug = PLUGIN_INVALID_HANDLE;\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\tplug = PLUGIN_INVALID_HANDLE;\n\t\t\txfree(file_name);\n\t\t}\n\n\t\tif (got_colon) {\n\t\t\thead = dir_array + i + 1;\n\t\t} else\n\t\t\tbreak;\n\t}\n\n\txfree(dir_array);\n\txfree(so_name);\n\terrno = err;\n\treturn plug;\n}\n/*\n * Must test plugin validity before doing dlopen() and dlsym()\n * operations because some implementations of these functions\n * crash if the library handle is not valid.\n */\n\nvoid\nplugin_unload( plugin_handle_t plug )\n{\n\tvoid (*fini)(void);\n\n\tif ( plug != PLUGIN_INVALID_HANDLE ) {\n\t\tif ( ( fini = dlsym( plug, \"fini\" ) ) != NULL ) {\n\t\t\t(*fini)();\n\t\t}\n#ifndef MEMORY_LEAK_DEBUG\n/**************************************************************************\\\n * To test for memory leaks, set MEMORY_LEAK_DEBUG to 1 using\n * \"configure --enable-memory-leak-debug\" then execute\n *\n * Note that without --enable-memory-leak-debug the daemon will\n * unload the shared objects at exit thus preventing valgrind\n * to display the stack where the eventual leaks may be.\n * It is always best to test with and without --enable-memory-leak-debug.\n\\**************************************************************************/\n\t\t(void) dlclose( plug );\n#endif\n\t}\n}\n\n\nvoid *\nplugin_get_sym( plugin_handle_t plug, const char *name )\n{\n\tif ( plug != PLUGIN_INVALID_HANDLE )\n\t\treturn dlsym( plug, name );\n\telse\n\t\treturn NULL;\n}\n\nconst char *\nplugin_get_name( plugin_handle_t plug )\n{\n\tif ( plug != PLUGIN_INVALID_HANDLE )\n\t\treturn (const char *) dlsym( plug, PLUGIN_NAME );\n\telse\n\t\treturn NULL;\n}\n\nconst char *\nplugin_get_type( plugin_handle_t plug )\n{\n\tif ( plug != PLUGIN_INVALID_HANDLE )\n\t\treturn (const char *) dlsym( plug, PLUGIN_TYPE );\n\telse\n\t\treturn NULL;\n}\n\nuint32_t\nplugin_get_version( plugin_handle_t plug )\n{\n\tuint32_t *ptr;\n\n\tif (plug == PLUGIN_INVALID_HANDLE)\n\t\treturn 0;\n\tptr = (uint32_t *) dlsym(plug, PLUGIN_VERSION);\n\treturn ptr ? *ptr : 0;\n}\n\nint\nplugin_get_syms( plugin_handle_t plug,\n\t\t int n_syms,\n\t\t const char *names[],\n\t\t void *ptrs[] )\n{\n\tint i, count;\n\n\tcount = 0;\n\tfor ( i = 0; i < n_syms; ++i ) {\n\t\tptrs[ i ] = dlsym( plug, names[ i ] );\n\t\tif ( ptrs[ i ] )\n\t\t\t++count;\n\t\telse\n\t\t\tdebug3(\"Couldn't find sym '%s' in the plugin\",\n\t\t\t       names[ i ]);\n\t}\n\n\treturn count;\n}\n\n/*\n * Create a priority context\n */\nextern plugin_context_t *plugin_context_create(\n\tconst char *plugin_type, const char *uler_type,\n\tvoid *ptrs[], const char *names[], size_t names_size)\n{\n\tplugin_context_t *c;\n\tint n_names;\n\n\tif (!uler_type) {\n\t\tdebug3(\"plugin_context_create: no uler type\");\n\t\treturn NULL;\n\t} else if (!plugin_type) {\n\t\tdebug3(\"plugin_context_create: no plugin type\");\n\t\treturn NULL;\n\t} else if (!names) {\n\t\terror(\"plugin_context_create: no symbols given for plugin %s\",\n\t\t      plugin_type);\n\t\treturn NULL;\n\t} else if (!ptrs) {\n\t\terror(\"plugin_context_create: no ptrs given for plugin %s\",\n\t\t      plugin_type);\n\t\treturn NULL;\n\t}\n\n\tc = xmalloc(sizeof(plugin_context_t));\n\tc->type = xstrdup(uler_type);\n\tc->cur_plugin = PLUGIN_INVALID_HANDLE;\n\n\tn_names = names_size / sizeof(char *);\n\n\t/* Find the correct plugin. */\n\tc->cur_plugin = plugin_load_and_link(c->type, n_names, names, ptrs);\n\tif (c->cur_plugin != PLUGIN_INVALID_HANDLE)\n\t\treturn c;\n\n\tif (errno != EPLUGIN_NOTFOUND) {\n\t\terror(\"Couldn't load specified plugin name for %s: %s\",\n\t\t      c->type, plugin_strerror(errno));\n\t\tgoto fail;\n\t}\n\n\terror(\"Couldn't find the specified plugin name for %s \"\n\t      \"looking at all files\",\n\t      c->type);\n\n\t/* Get plugin list. */\n\tif (!c->plugin_list) {\n\t\tchar *plugin_dir;\n\t\tc->plugin_list = plugrack_create();\n\t\tif (!c->plugin_list) {\n\t\t\terror(\"cannot create plugin manager\");\n\t\t\tgoto fail;\n\t\t}\n\t\tplugrack_set_major_type(c->plugin_list, plugin_type);\n\t\tplugrack_set_paranoia(\n\t\t\tc->plugin_list, PLUGRACK_PARANOIA_NONE, 0);\n\t\tplugin_dir = slurm_get_plugin_dir();\n\t\tplugrack_read_dir(c->plugin_list, plugin_dir);\n\t\txfree(plugin_dir);\n\t}\n\n\tc->cur_plugin = plugrack_use_by_type(c->plugin_list, c->type);\n\tif (c->cur_plugin == PLUGIN_INVALID_HANDLE) {\n\t\terror(\"cannot find %s plugin for %s\", plugin_type, c->type);\n\t\tgoto fail;\n\t}\n\n\t/* Dereference the API. */\n\tif (plugin_get_syms(c->cur_plugin, n_names, names, ptrs) < n_names) {\n\t\terror(\"incomplete %s plugin detected\", plugin_type);\n\t\tgoto fail;\n\t}\n\n\treturn c;\nfail:\n\tplugin_context_destroy(c);\n\treturn NULL;\n}\n\n/*\n * Destroy a context\n */\nextern int plugin_context_destroy(plugin_context_t *c)\n{\n\tint rc = SLURM_SUCCESS;\n\t/*\n\t * Must check return code here because plugins might still\n\t * be loaded and active.\n\t */\n\tif (c->plugin_list) {\n\t\tif (plugrack_destroy(c->plugin_list) != SLURM_SUCCESS)\n\t\t\trc = SLURM_ERROR;\n\t} else\n\t\tplugin_unload(c->cur_plugin);\n\n\txfree(c->type);\n\txfree(c);\n\n\treturn rc;\n}\n\n/*\n * Return a list of plugin names that match the given type.\n *\n * IN plugin_type - Type of plugin to search for in the plugin_dir.\n * RET list of plugin names, NULL if none found.\n */\nextern List plugin_get_plugins_of_type(char *plugin_type)\n{\n\tList plugin_names = NULL;\n\tchar *plugin_dir = NULL, *dir = NULL, *save_ptr = NULL;\n\tchar *type_under = NULL, *type_slash = NULL;\n\tDIR *dirp;\n\tstruct dirent *e;\n\tint len;\n\n\tif (!(plugin_dir = slurm_get_plugin_dir())) {\n\t\terror(\"%s: No plugin dir given\", __func__);\n\t\tgoto done;\n\t}\n\n\ttype_under = xstrdup_printf(\"%s_\", plugin_type);\n\ttype_slash = xstrdup_printf(\"%s/\", plugin_type);\n\n\tdir = strtok_r(plugin_dir, \":\", &save_ptr);\n\twhile (dir) {\n\t\t/* Open the directory. */\n\t\tif (!(dirp = opendir(dir))) {\n\t\t\terror(\"cannot open plugin directory %s\", dir);\n\t\t\tgoto done;\n\t\t}\n\n\t\twhile (1) {\n\t\t\tchar full_name[128];\n\n\t\t\tif (!(e = readdir( dirp )))\n\t\t\t\tbreak;\n\t\t\t/* Check only files with \"plugintype_\" in them. */\n\t\t\tif (xstrncmp(e->d_name, type_under, strlen(type_under)))\n\t\t\t\tcontinue;\n\n\t\t\tlen = strlen(e->d_name);\n\t\t\tlen -= 3;\n\t\t\t/* Check only shared object files */\n\t\t\tif (xstrcmp(e->d_name+len, \".so\"))\n\t\t\t\tcontinue;\n\t\t\t/* add one for the / */\n\t\t\tlen++;\n\t\t\txassert(len < sizeof(full_name));\n\t\t\tsnprintf(full_name, len, \"%s%s\",\n\t\t\t\t type_slash, e->d_name + strlen(type_slash));\n\n\t\t\tif (!plugin_names)\n\t\t\t\tplugin_names = list_create(slurm_destroy_char);\n\t\t\tif (!list_find_first(plugin_names,\n\t\t\t\t\t     slurm_find_char_in_list,\n\t\t\t\t\t     full_name))\n\t\t\t\tlist_append(plugin_names, xstrdup(full_name));\n\t\t}\n\t\tclosedir(dirp);\n\n\t\tdir = strtok_r(NULL, \":\", &save_ptr);\n\t}\n\ndone:\n\txfree(plugin_dir);\n\txfree(type_under);\n\txfree(type_slash);\n\n\treturn plugin_names;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/src/common/plugstack.c": "/*****************************************************************************\\\n *  plugstack.c -- stackable plugin architecture for node job kontrol (SPANK)\n *****************************************************************************\n *  Copyright (C) 2005-2007 The Regents of the University of California.\n *  Copyright (C) 2008-2010 Lawrence Livermore National Security.\n *  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).\n *  CODE-OCEC-09-009. All rights reserved.\n *\n *  This file is part of Slurm, a resource management program.\n *  For details, see <https://slurm.schedmd.com/>.\n *  Please also read the included file: DISCLAIMER.\n *\n *  Slurm is free software; you can redistribute it and/or modify it under\n *  the terms of the GNU General Public License as published by the Free\n *  Software Foundation; either version 2 of the License, or (at your option)\n *  any later version.\n *\n *  In addition, as a special exception, the copyright holders give permission\n *  to link the code of portions of this program with the OpenSSL library under\n *  certain conditions as described in each individual source file, and\n *  distribute linked combinations including the two. You must obey the GNU\n *  General Public License in all respects for all of the code used other than\n *  OpenSSL. If you modify file(s) with this exception, you may extend this\n *  exception to your version of the file(s), but you are not obligated to do\n *  so. If you do not wish to do so, delete this exception statement from your\n *  version.  If you delete this exception statement from all source files in\n *  the program, then also delete it here.\n *\n *  Slurm is distributed in the hope that it will be useful, but WITHOUT ANY\n *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n *  details.\n *\n *  You should have received a copy of the GNU General Public License along\n *  with Slurm; if not, write to the Free Software Foundation, Inc.,\n *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.\n\\*****************************************************************************/\n\n#define _GNU_SOURCE\n\n#include \"config.h\"\n\n#include <ctype.h>\n#include <dlfcn.h>\n#include <glob.h>\n#include <libgen.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"src/common/plugin.h\"\n#include \"src/common/xmalloc.h\"\n#include \"src/common/xstring.h\"\n#include \"src/common/xassert.h\"\n#include \"src/common/strlcpy.h\"\n#include \"src/common/read_config.h\"\n#include \"src/common/plugstack.h\"\n#include \"src/common/optz.h\"\n#include \"src/common/job_options.h\"\n#include \"src/common/env.h\"\n\n#include \"src/slurmd/slurmstepd/slurmstepd_job.h\"\n\n#include \"slurm/spank.h\"\n\n#define REQUIRED \"required\"\n#define OPTIONAL \"optional\"\n#define INCLUDE  \"include\"\n\nstruct spank_plugin_operations {\n\tspank_f *init;\n\tspank_f *slurmd_init;\n\tspank_f *job_prolog;\n\tspank_f *init_post_opt;\n\tspank_f *local_user_init;\n\tspank_f *user_init;\n\tspank_f *task_init_privileged;\n\tspank_f *user_task_init;\n\tspank_f *task_post_fork;\n\tspank_f *task_exit;\n\tspank_f *job_epilog;\n\tspank_f *slurmd_exit;\n\tspank_f *exit;\n};\n\nconst int n_spank_syms = 13;\nconst char *spank_syms[] = {\n\t\"slurm_spank_init\",\n\t\"slurm_spank_slurmd_init\",\n\t\"slurm_spank_job_prolog\",\n\t\"slurm_spank_init_post_opt\",\n\t\"slurm_spank_local_user_init\",\n\t\"slurm_spank_user_init\",\n\t\"slurm_spank_task_init_privileged\",\n\t\"slurm_spank_task_init\",\n\t\"slurm_spank_task_post_fork\",\n\t\"slurm_spank_task_exit\",\n\t\"slurm_spank_job_epilog\",\n\t\"slurm_spank_slurmd_exit\",\n\t\"slurm_spank_exit\"\n};\n\nstruct spank_plugin {\n\tconst char *name;\n\tchar *fq_path;\n\tplugin_handle_t plugin;\n\tbool required;\n\tint ac;\n\tchar **argv;\n\tstruct spank_plugin_operations ops;\n\tstruct spank_option *opts;\n\tstruct spank_stack *stack;\n};\n\n/*\n *  SPANK Plugin options\n */\n\n#define SPANK_OPTION_ENV_PREFIX \"_SLURM_SPANK_OPTION_\"\n\nstruct spank_plugin_opt {\n\tstruct spank_option *opt;   /* Copy of plugin option info           */\n\tstruct spank_plugin *plugin;/* Link back to plugin structure        */\n\tint optval;                 /* Globally unique value                */\n\tint found:1;                /* 1 if option was found, 0 otherwise   */\n\tint disabled:1;             /* 1 if option is cached but disabled   */\n\tchar *optarg;               /* Option argument.                     */\n};\n\n/*\n *  SPANK plugin context type (local, remote, allocator)\n */\nenum spank_context_type {\n\tS_TYPE_NONE,\n\tS_TYPE_LOCAL,           /* LOCAL == srun              */\n\tS_TYPE_REMOTE,          /* REMOTE == slurmstepd       */\n\tS_TYPE_ALLOCATOR,       /* ALLOCATOR == sbatch/salloc */\n\tS_TYPE_SLURMD,          /* SLURMD == slurmd           */\n\tS_TYPE_JOB_SCRIPT,      /* JOB_SCRIPT == prolog/epilog*/\n};\n\n/*\n *  SPANK plugin hook types:\n */\ntypedef enum step_fn {\n\tSPANK_INIT = 0,\n\tSPANK_SLURMD_INIT,\n\tSPANK_JOB_PROLOG,\n\tSPANK_INIT_POST_OPT,\n\tLOCAL_USER_INIT,\n\tSTEP_USER_INIT,\n\tSTEP_TASK_INIT_PRIV,\n\tSTEP_USER_TASK_INIT,\n\tSTEP_TASK_POST_FORK,\n\tSTEP_TASK_EXIT,\n\tSPANK_JOB_EPILOG,\n\tSPANK_SLURMD_EXIT,\n\tSPANK_EXIT\n} step_fn_t;\n\n/*\n *  Job information in prolog/epilog context:\n */\nstruct job_script_info {\n\tuint32_t  jobid;\n\tuid_t     uid;\n};\n\nstruct spank_handle {\n#   define SPANK_MAGIC 0x00a5a500\n\tint                  magic;  /* Magic identifier to ensure validity. */\n\tstruct spank_plugin *plugin; /* Current plugin using handle          */\n\tstep_fn_t            phase;  /* Which spank fn are we called from?   */\n\tvoid               * job;    /* Reference to current srun|slurmd job */\n\tstepd_step_task_info_t * task;   /* Reference to current\n\t\t\t\t\t      * task (if valid) */\n\tstruct spank_stack  *stack;  /* Reference to the current plugin stack*/\n};\n\n/*\n *  SPANK stack. The stack of loaded plugins and associated state.\n */\nstruct spank_stack {\n\tenum spank_context_type type;/*  Type of context for this stack      */\n\tList plugin_list;\t     /*  Stack of spank plugins              */\n\tList option_cache;           /*  Cache of plugin options in this ctx */\n\tint  spank_optval;           /*  optvalue for next plugin option     */\n\tconst char * plugin_path;    /*  default path to search for plugins  */\n};\n\n/*\n *  The global spank plugin stack:\n */\nstatic struct spank_stack *global_spank_stack = NULL;\n\n/*\n *  Forward declarations\n */\nstatic int _spank_plugin_options_cache(struct spank_plugin *p);\nstatic int _spank_stack_load (struct spank_stack *stack, const char *file);\nstatic void _spank_plugin_destroy (struct spank_plugin *);\nstatic void _spank_plugin_opt_destroy (struct spank_plugin_opt *);\nstatic int spank_stack_get_remote_options(struct spank_stack *, job_options_t);\nstatic int spank_stack_get_remote_options_env (struct spank_stack *, char **);\nstatic int spank_stack_set_remote_options_env (struct spank_stack * stack);\nstatic int dyn_spank_set_job_env (const char *var, const char *val, int ovwt);\nstatic char *_opt_env_name(struct spank_plugin_opt *p, char *buf, size_t siz);\n\nstatic void spank_stack_destroy (struct spank_stack *stack)\n{\n\tFREE_NULL_LIST (stack->plugin_list);\n\tFREE_NULL_LIST (stack->option_cache);\n\txfree (stack->plugin_path);\n\txfree (stack);\n}\n\nstatic struct spank_stack *\nspank_stack_create (const char *file, enum spank_context_type type)\n{\n\tslurm_ctl_conf_t *conf;\n\tstruct spank_stack *stack = xmalloc (sizeof (*stack));\n\n\tconf = slurm_conf_lock();\n\tstack->plugin_path = xstrdup (conf->plugindir);\n\tslurm_conf_unlock();\n\n\tstack->type = type;\n\tstack->spank_optval = 0xfff;\n\tstack->plugin_list =\n\t\tlist_create ((ListDelF) _spank_plugin_destroy);\n\tstack->option_cache =\n\t\tlist_create ((ListDelF) _spank_plugin_opt_destroy);\n\n\tif (_spank_stack_load (stack, file) < 0) {\n\t\tspank_stack_destroy (stack);\n\t\treturn (NULL);\n\t}\n\n\treturn (stack);\n}\n\nstatic List get_global_option_cache (void)\n{\n\tif (global_spank_stack)\n\t\treturn (global_spank_stack->option_cache);\n\telse\n\t\treturn (NULL);\n}\n\n\nstatic int plugin_in_list (List l, struct spank_plugin *sp)\n{\n\tint rc = 0;\n\tstruct spank_plugin *p;\n\tListIterator i = list_iterator_create (l);\n\twhile ((p = list_next (i))) {\n\t\tif (p->fq_path == sp->fq_path) {\n\t\t\trc = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\tlist_iterator_destroy (i);\n\treturn (rc);\n}\n\nstatic void _argv_append(char ***argv, int ac, const char *newarg)\n{\n\t*argv = xrealloc(*argv, (++ac + 1) * sizeof(char *));\n\t(*argv)[ac] = NULL;\n\t(*argv)[ac - 1] = xstrdup(newarg);\n\treturn;\n}\n\ntypedef enum {\n   CF_ERROR = 0,\n   CF_OPTIONAL,\n   CF_REQUIRED,\n   CF_INCLUDE,\n} cf_line_t;\n\nstatic cf_line_t _plugin_stack_line_type (const char *str)\n{\n\tif (xstrcmp(str, REQUIRED) == 0)\n\t\treturn (CF_REQUIRED);\n\telse if (xstrcmp(str, OPTIONAL) == 0)\n\t\treturn (CF_OPTIONAL);\n\telse if (xstrcmp(str, INCLUDE) == 0)\n\t\treturn (CF_INCLUDE);\n\telse {\n\t\terror(\"spank: Invalid option \\\"%s\\\". Must be %s, %s or %s\",\n\t\t     str, REQUIRED, OPTIONAL, INCLUDE);\n\t\treturn (CF_ERROR);\n\t}\n}\n\n\nstatic int\n_plugin_stack_parse_line(char *line, char **plugin, int *acp, char ***argv,\n\t\t\t cf_line_t * type)\n{\n\tint ac;\n\tconst char *separators = \" \\t\\n\";\n\tchar *path;\n\tchar *option;\n\tchar *s;\n\tchar **av;\n\tchar *sp;\n\n\t*plugin = NULL;\n\t*argv = NULL;\n\t*acp = 0;\n\n\t/* Nullify any comments\n\t */\n\tif ((s = strchr(line, '#')))\n\t\t*s = '\\0';\n\n\tif (!(option = strtok_r(line, separators, &sp)))\n\t\treturn (0);\n\n\tif (((*type) = _plugin_stack_line_type(option)) == CF_ERROR)\n\t\treturn (-1);\n\n\tif (!(path = strtok_r(NULL, separators, &sp)))\n\t\treturn (-1);\n\n\tac = 0;\n\tav = NULL;\n\n\twhile ((s = strtok_r(NULL, separators, &sp)))\n\t\t_argv_append(&av, ac++, s);\n\n\t*plugin = xstrdup(path);\n\t*argv = av;\n\t*acp = ac;\n\n\treturn (0);\n}\n\nstatic struct spank_plugin *_spank_plugin_create(struct spank_stack *stack,\n\t\t\t\t\t\t char *path, int ac,\n\t\t\t\t\t\t char **av, bool required)\n{\n\tstruct spank_plugin *plugin;\n\tplugin_handle_t p;\n\tplugin_err_t e;\n\tstruct spank_plugin_operations ops;\n\n\tif ((e = plugin_load_from_file(&p, path)) != EPLUGIN_SUCCESS) {\n\t\terror (\"spank: %s: %s\", path, plugin_strerror(e));\n\t\treturn NULL;\n\t}\n\n\tif (plugin_get_syms(p, n_spank_syms, spank_syms, (void **)&ops) == 0) {\n\t\terror(\"spank: \\\"%s\\\" exports 0 symbols\", path);\n\t\treturn NULL;\n\t}\n\n\tplugin = xmalloc(sizeof(struct spank_plugin));\n\n\tplugin->fq_path = path;\t/* fq_path is xstrdup'd in *process_line */\n\tplugin->plugin = p;\n\tplugin->name = plugin_get_name(p);\t/* no need to dup */\n\tplugin->required = required;\n\tplugin->ac = ac;\n\tplugin->argv = av;\n\tplugin->ops = ops;\n\tplugin->stack = stack;\n\n\t/*\n\t *  Do not load static plugin options table in allocator context.\n\t */\n\tif (stack->type != S_TYPE_ALLOCATOR)\n\t\tplugin->opts = plugin_get_sym(p, \"spank_options\");\n\n\treturn (plugin);\n}\n\nvoid _spank_plugin_destroy(struct spank_plugin *sp)\n{\n\tif (sp == NULL)\n\t\treturn;\n\n\txfree(sp->fq_path);\n\n\t/* No need to free \"name\" it was defined within plugin */\n\tsp->name = NULL;\n\n\tplugin_unload(sp->plugin);\n\tsp->plugin = NULL;\n\tif (sp->argv) {\n\t\tint i;\n\t\tfor (i = 0; sp->argv[i]; i++)\n\t\t\txfree(sp->argv[i]);\n\t\txfree(sp->argv);\n\t}\n\txfree(sp);\n\treturn;\n}\n\nstatic char *\n_spank_plugin_find (const char *path, const char *file)\n{\n\tchar dir [4096];\n\tchar *p, *entry;\n\tint pathlen = strlen (path);\n\n\tif (strlcpy(dir, path, sizeof (dir)) > sizeof (dir))\n\t\treturn (NULL);\n\n\t/*\n\t * Ensure PATH ends with a :\n\t */\n\tif (dir[pathlen - 1] != ':') {\n\t\tdir[pathlen] = ':';\n\t\tdir[pathlen+1] = '\\0';\n\t}\n\n\tentry = dir;\n\twhile ((p = strchr(entry, ':'))) {\n\t\tchar *fq_path;\n\t\t*(p++) = '\\0';\n\n\t\tfq_path = xstrdup (entry);\n\t\tif (entry [strlen(entry) - 1] != '/')\n\t\t\txstrcatchar (fq_path, '/');\n\t\txstrcat (fq_path, file);\n\n\t\tif (plugin_peek (fq_path, NULL, 0, NULL) != SLURM_ERROR)\n\t\t\treturn (fq_path);\n\n\t\txfree (fq_path);\n\t\tentry = p;\n\t}\n\n\treturn (NULL);\n}\n\nstatic int _spank_conf_include (struct spank_stack *,\n\tconst char *, int, const char *);\n\nstatic int\nspank_stack_plugin_valid_for_context (struct spank_stack *stack,\n\tstruct spank_plugin *p)\n{\n\tswitch (stack->type) {\n\tcase S_TYPE_JOB_SCRIPT:\n\t\tif (p->ops.job_prolog || p->ops.job_epilog)\n\t\t\treturn (1);\n\t\tbreak;\n\tcase S_TYPE_SLURMD:\n\t\tif (p->ops.slurmd_init || p->ops.slurmd_exit)\n\t\t\treturn (1);\n\t\tbreak;\n\tcase S_TYPE_LOCAL:\n\tcase S_TYPE_ALLOCATOR:\n\tcase S_TYPE_REMOTE:\n\t\t/*\n\t\t *  For backwards compatibility: All plugins were\n\t\t *   always loaded in these contexts, so continue\n\t\t *   to do so\n\t\t */\n\t\treturn (1);\n\tdefault:\n\t\treturn (0);\n\t}\n\treturn (0);\n}\n\nstatic int\n_spank_stack_process_line(struct spank_stack *stack,\n\tconst char *file, int line, char *buf)\n{\n\tchar **argv;\n\tint ac;\n\tchar *path;\n\tcf_line_t type = CF_REQUIRED;\n\tbool required;\n\n\tstruct spank_plugin *p;\n\n\tif (_plugin_stack_parse_line(buf, &path, &ac, &argv, &type) < 0) {\n\t\terror(\"spank: %s:%d: Invalid line. Ignoring.\", file, line);\n\t\treturn (0);\n\t}\n\n       if (type == CF_INCLUDE) {\n\t       int rc = _spank_conf_include (stack, file, line, path);\n\t       xfree (path);\n\t       return (rc);\n       }\n\n\tif (path == NULL)\t/* No plugin listed on this line */\n\t\treturn (0);\n\n\tif (path[0] != '/') {\n\t\tchar *f;\n\n\t\tif ((f = _spank_plugin_find (stack->plugin_path, path))) {\n\t\t\txfree (path);\n\t\t\tpath = f;\n\t\t}\n\t}\n\n\trequired = (type == CF_REQUIRED);\n\tif (!(p = _spank_plugin_create(stack, path, ac, argv, required))) {\n\t\tif (required)\n\t\t\terror (\"spank: %s:%d:\"\n\t\t\t       \" Failed to load plugin %s. Aborting.\",\n\t\t\t       file, line, path);\n\t\telse\n\t\t\tverbose (\"spank: %s:%d:\"\n\t\t\t\t \"Failed to load optional plugin %s. Ignored.\",\n\t\t\t\t file, line, path);\n\t\treturn (required ? -1 : 0);\n\t}\n\n\tif (plugin_in_list (stack->plugin_list, p)) {\n\t\terror (\"spank: %s: cowardly refusing to load a second time\",\n\t\t\tp->fq_path);\n\t\t_spank_plugin_destroy (p);\n\t\treturn (0);\n\t}\n\n\tif (!spank_stack_plugin_valid_for_context (stack, p)) {\n\t\tdebug2 (\"spank: %s: no callbacks in this context\", p->fq_path);\n\t\t_spank_plugin_destroy (p);\n\t\treturn (0);\n\t}\n\n\tdebug (\"spank: %s:%d: Loaded plugin %s\",\n\t\t\tfile, line, xbasename (p->fq_path));\n\n\tlist_append (stack->plugin_list, p);\n\t_spank_plugin_options_cache(p);\n\n\treturn (0);\n}\n\nstatic int _spank_stack_load(struct spank_stack *stack, const char *path)\n{\n\tint rc = 0;\n\tint line;\n\tchar buf[4096];\n\tint fd;\n\tFILE *fp;\n\n\tdebug (\"spank: opening plugin stack %s\", path);\n\n\t/*\n\t *  Try to open plugstack.conf. A missing config file is not an\n\t *   error, but is equivalent to an empty file.\n\t */\n\tif ((fd = open(path, O_RDONLY | O_CLOEXEC)) < 0 ||\n\t    (fp = fdopen(fd, \"r\")) == NULL) {\n\t\tif (errno == ENOENT)\n\t\t\treturn (0);\n\t\terror(\"spank: Failed to open %s: %m\", path);\n\t\treturn (-1);\n\t}\n\n\tline = 1;\n\twhile (fgets(buf, sizeof(buf), fp)) {\n\t\trc = _spank_stack_process_line(stack, path, line, buf);\n\t\tif (rc < 0)\n\t\t\tbreak;\n\t\tline++;\n\t}\n\n\tfclose(fp);\n\treturn (rc);\n}\n\nstatic int _spank_conf_include (struct spank_stack *stack,\n\t\tconst char *file, int lineno, const char *pattern)\n{\n\tint rc = 0;\n\tglob_t gl;\n\tsize_t i;\n\tchar *copy = NULL;\n\n\tif (pattern == NULL) {\n\t\terror (\"%s: %d: Invalid include directive\", file, lineno);\n\t\treturn (SLURM_ERROR);\n\t}\n\n\tif (pattern[0] != '/') {\n\t\tchar *dirc = xstrdup (file);\n\t\tchar *dname = dirname (dirc);\n\n\t\tif (dname != NULL)  {\n\t\t\txstrfmtcat (copy, \"%s/%s\", dname, pattern);\n\t\t\tpattern = copy;\n\t\t}\n\t\txfree (dirc);\n\t}\n\n\tdebug (\"%s: %d: include \\\"%s\\\"\", file, lineno, pattern);\n\n\trc = glob (pattern, 0, NULL, &gl);\n\tswitch (rc) {\n\t  case 0:\n\t  \tfor (i = 0; i < gl.gl_pathc; i++) {\n\t\t\trc = _spank_stack_load (stack, gl.gl_pathv[i]);\n\t\t\tif (rc < 0)\n\t\t\t\tbreak;\n\t\t}\n\t  \tbreak;\n\t  case GLOB_NOMATCH:\n\t\tbreak;\n\t  case GLOB_NOSPACE:\n\t\terrno = ENOMEM;\n\t\tbreak;\n\t  case GLOB_ABORTED:\n\t\tverbose (\"%s:%d: cannot read dir %s: %m\",\n\t\t\tfile, lineno, pattern);\n\t\tbreak;\n\t  default:\n\t\terror (\"Unknown glob(3) return code = %d\", rc);\n\t\tbreak;\n\t}\n\n\txfree (copy);\n\tglobfree (&gl);\n\treturn (rc);\n}\n\nstatic int\n_spank_handle_init(struct spank_handle *spank, struct spank_stack *stack,\n\t\tvoid * arg, int taskid, step_fn_t fn)\n{\n\tmemset(spank, 0, sizeof(*spank));\n\tspank->magic = SPANK_MAGIC;\n\tspank->plugin = NULL;\n\n\tspank->phase = fn;\n\tspank->stack = stack;\n\n\tif (arg != NULL) {\n\t\tspank->job = arg;\n\t\tif (stack->type == S_TYPE_REMOTE && taskid >= 0) {\n\t\t\tspank->task = ((stepd_step_rec_t *) arg)->task[taskid];\n\t\t}\n\t}\n\treturn (0);\n}\n\nstatic const char *_step_fn_name(step_fn_t type)\n{\n\tswitch (type) {\n\tcase SPANK_INIT:\n\t\treturn (\"init\");\n\tcase SPANK_SLURMD_INIT:\n\t\treturn (\"slurmd_init\");\n\tcase SPANK_JOB_PROLOG:\n\t\treturn (\"job_prolog\");\n\tcase SPANK_INIT_POST_OPT:\n\t\treturn (\"init_post_opt\");\n\tcase LOCAL_USER_INIT:\n\t\treturn (\"local_user_init\");\n\tcase STEP_USER_INIT:\n\t\treturn (\"user_init\");\n\tcase STEP_TASK_INIT_PRIV:\n\t\treturn (\"task_init_privileged\");\n\tcase STEP_USER_TASK_INIT:\n\t\treturn (\"task_init\");\n\tcase STEP_TASK_POST_FORK:\n\t\treturn (\"task_post_fork\");\n\tcase STEP_TASK_EXIT:\n\t\treturn (\"task_exit\");\n\tcase SPANK_JOB_EPILOG:\n\t\treturn (\"job_epilog\");\n\tcase SPANK_SLURMD_EXIT:\n\t\treturn (\"slurmd_exit\");\n\tcase SPANK_EXIT:\n\t\treturn (\"exit\");\n\t}\n\n\t/* NOTREACHED */\n\treturn (\"unknown\");\n}\n\nstatic spank_f *spank_plugin_get_fn (struct spank_plugin *sp, step_fn_t type)\n{\n\tswitch (type) {\n\tcase SPANK_INIT:\n\t\treturn (sp->ops.init);\n\tcase SPANK_SLURMD_INIT:\n\t\treturn (sp->ops.slurmd_init);\n\tcase SPANK_JOB_PROLOG:\n\t\treturn (sp->ops.job_prolog);\n\tcase SPANK_INIT_POST_OPT:\n\t\treturn (sp->ops.init_post_opt);\n\tcase LOCAL_USER_INIT:\n\t\treturn (sp->ops.local_user_init);\n\tcase STEP_USER_INIT:\n\t\treturn (sp->ops.user_init);\n\tcase STEP_TASK_INIT_PRIV:\n\t\treturn (sp->ops.task_init_privileged);\n\tcase STEP_USER_TASK_INIT:\n\t\treturn (sp->ops.user_task_init);\n\tcase STEP_TASK_POST_FORK:\n\t\treturn (sp->ops.task_post_fork);\n\tcase STEP_TASK_EXIT:\n\t\treturn (sp->ops.task_exit);\n\tcase SPANK_JOB_EPILOG:\n\t\treturn (sp->ops.job_epilog);\n\tcase SPANK_SLURMD_EXIT:\n\t\treturn (sp->ops.slurmd_exit);\n\tcase SPANK_EXIT:\n\t\treturn (sp->ops.exit);\n\tdefault:\n\t\terror (\"Unhandled spank function type=%d\\n\", type);\n\t\treturn (NULL);\n\t}\n\treturn (NULL);\n}\n\nstatic int _do_call_stack(struct spank_stack *stack,\n\tstep_fn_t type, void * job, int taskid)\n{\n\tint rc = 0;\n\tListIterator i;\n\tstruct spank_plugin *sp;\n\tstruct spank_handle spank[1];\n\tconst char *fn_name;\n\n\tif (!stack)\n\t\treturn (-1);\n\n\tif (_spank_handle_init(spank, stack, job, taskid, type) < 0) {\n\t\terror(\"spank: Failed to initialize handle for plugins\");\n\t\treturn (-1);\n\t}\n\n\tfn_name = _step_fn_name(type);\n\n\ti = list_iterator_create(stack->plugin_list);\n\twhile ((sp = list_next(i))) {\n\t\tconst char *name = xbasename(sp->fq_path);\n\t\tspank_f *spank_fn;\n\n\t\tspank->plugin = sp;\n\n\t\tspank_fn = spank_plugin_get_fn (sp, type);\n\t\tif (!spank_fn)\n\t\t\tcontinue;\n\n\t\trc = (*spank_fn) (spank, sp->ac, sp->argv);\n\t\tdebug2(\"spank: %s: %s = %d\", name, fn_name, rc);\n\n\t\tif ((rc < 0) && sp->required) {\n\t\t\terror(\"spank: required plugin %s: \"\n\t\t\t      \"%s() failed with rc=%d\", name, fn_name, rc);\n\t\t\tbreak;\n\t\t} else\n\t\t\trc = 0;\n\t}\n\n\tlist_iterator_destroy(i);\n\n\treturn (rc);\n}\n\nstruct spank_stack *spank_stack_init(enum spank_context_type context)\n{\n\tslurm_ctl_conf_t *conf = slurm_conf_lock();\n\tconst char *path = conf->plugstack;\n\tslurm_conf_unlock();\n\n\treturn spank_stack_create (path, context);\n}\n\nint _spank_init(enum spank_context_type context, stepd_step_rec_t * job)\n{\n\tstruct spank_stack *stack;\n\n\tif (!(stack = spank_stack_init (context)))\n\t\treturn (-1);\n\tglobal_spank_stack = stack;\n\n\treturn (_do_call_stack(stack, SPANK_INIT, job, -1));\n}\n\nstatic int spank_stack_post_opt (struct spank_stack * stack,\n\t\t\t\t stepd_step_rec_t *job)\n{\n\t/*\n\t *  Get any remote options from job launch message:\n\t */\n\tif (spank_stack_get_remote_options(stack, job->options) < 0) {\n\t\terror(\"spank: Unable to get remote options\");\n\t\treturn (-1);\n\t}\n\n\t/*\n\t *  Get any remote option passed thru environment\n\t */\n\tif (spank_stack_get_remote_options_env(stack, job->env) < 0) {\n\t\terror(\"spank: Unable to get remote options from environment\");\n\t\treturn (-1);\n\t}\n\n\t/*\n\t * Now clear any remaining options passed through environment\n\t */\n\tspank_clear_remote_options_env (job->env);\n\n\t/*\n\t *  Now that all options have been processed, we can\n\t *   call the post_opt handlers here in remote context.\n\t */\n\treturn (_do_call_stack(stack, SPANK_INIT_POST_OPT, job, -1));\n\n}\n\nstatic int spank_init_remote (stepd_step_rec_t *job)\n{\n\tif (_spank_init (S_TYPE_REMOTE, job) < 0)\n\t\treturn (-1);\n\n\t/*\n\t * _spank_init initializes global_spank_stack\n\t */\n\treturn (spank_stack_post_opt (global_spank_stack, job));\n}\n\nint spank_init (stepd_step_rec_t * job)\n{\n\tif (job)\n\t\treturn spank_init_remote (job);\n\telse\n\t\treturn _spank_init (S_TYPE_LOCAL, NULL);\n}\n\nint spank_init_allocator (void)\n{\n\treturn _spank_init (S_TYPE_ALLOCATOR, NULL);\n}\n\nint spank_slurmd_init (void)\n{\n\treturn _spank_init (S_TYPE_SLURMD, NULL);\n}\n\nint spank_init_post_opt (void)\n{\n\tstruct spank_stack *stack = global_spank_stack;\n\n\t/*\n\t *  Set remote options in our environment and the\n\t *   spank_job_env so that we can always pull them out\n\t *   on the remote side and/or job prolog epilog.\n\t */\n\tspank_stack_set_remote_options_env (stack);\n\n\treturn (_do_call_stack(stack, SPANK_INIT_POST_OPT, NULL, -1));\n}\n\nint spank_user(stepd_step_rec_t * job)\n{\n\treturn (_do_call_stack(global_spank_stack, STEP_USER_INIT, job, -1));\n}\n\nint spank_local_user(struct spank_launcher_job_info *job)\n{\n\treturn (_do_call_stack(global_spank_stack, LOCAL_USER_INIT, job, -1));\n}\n\nint spank_task_privileged(stepd_step_rec_t *job, int taskid)\n{\n\treturn (_do_call_stack(global_spank_stack, STEP_TASK_INIT_PRIV, job, taskid));\n}\n\nint spank_user_task(stepd_step_rec_t * job, int taskid)\n{\n\treturn (_do_call_stack(global_spank_stack, STEP_USER_TASK_INIT, job, taskid));\n}\n\nint spank_task_post_fork(stepd_step_rec_t * job, int taskid)\n{\n\treturn (_do_call_stack(global_spank_stack, STEP_TASK_POST_FORK, job, taskid));\n}\n\nint spank_task_exit(stepd_step_rec_t * job, int taskid)\n{\n\treturn (_do_call_stack(global_spank_stack, STEP_TASK_EXIT, job, taskid));\n}\n\nint spank_slurmd_exit (void)\n{\n\tint rc;\n\trc =  _do_call_stack (global_spank_stack, SPANK_SLURMD_EXIT, NULL, 0);\n\tspank_stack_destroy (global_spank_stack);\n\tglobal_spank_stack = NULL;\n\treturn (rc);\n}\n\nint spank_fini(stepd_step_rec_t * job)\n{\n\tint rc = _do_call_stack(global_spank_stack, SPANK_EXIT, job, -1);\n\n\tspank_stack_destroy (global_spank_stack);\n\tglobal_spank_stack = NULL;\n\n\treturn (rc);\n}\n\n/*\n *  Run job_epilog or job_prolog callbacks in a private spank context.\n */\nstatic int spank_job_script (step_fn_t fn, uint32_t jobid, uid_t uid)\n{\n\tint rc = 0;\n\tstruct spank_stack *stack;\n\tstruct job_script_info jobinfo = { jobid, uid };\n\n\tstack = spank_stack_init (S_TYPE_JOB_SCRIPT);\n\tif (!stack)\n\t\treturn (-1);\n\tglobal_spank_stack = stack;\n\n\trc = _do_call_stack (stack, fn, &jobinfo, -1);\n\n\tspank_stack_destroy (stack);\n\tglobal_spank_stack = NULL;\n\treturn (rc);\n}\n\nint spank_job_prolog (uint32_t jobid, uid_t uid)\n{\n\treturn spank_job_script (SPANK_JOB_PROLOG, jobid, uid);\n}\n\nint spank_job_epilog (uint32_t jobid, uid_t uid)\n{\n\treturn spank_job_script (SPANK_JOB_EPILOG, jobid, uid);\n}\n\n/*\n *  SPANK options functions\n */\n\nstatic int _spank_next_option_val(struct spank_stack *stack)\n{\n\treturn (stack->spank_optval++);\n}\n\nstatic struct spank_option * _spank_option_copy(struct spank_option *opt)\n{\n\tstruct spank_option *copy = xmalloc (sizeof (*copy));\n\n\tmemset (copy, 0, sizeof (*copy));\n\n\tcopy->name = xstrdup (opt->name);\n\tcopy->has_arg = opt->has_arg;\n\tcopy->val = opt->val;\n\tcopy->cb = opt->cb;\n\n\tif (opt->arginfo)\n\t\tcopy->arginfo = xstrdup (opt->arginfo);\n\tif (opt->usage)\n\t\tcopy->usage = xstrdup (opt->usage);\n\n\treturn (copy);\n}\n\nstatic void _spank_option_destroy(struct spank_option *opt)\n{\n\txfree (opt->name);\n\txfree (opt->arginfo);\n\txfree (opt->usage);\n\txfree (opt);\n}\n\nstatic struct spank_plugin_opt *_spank_plugin_opt_create(struct\n\t\t\t\t\t\t\t spank_plugin *p,\n\t\t\t\t\t\t\t struct\n\t\t\t\t\t\t\t spank_option *opt,\n\t\t\t\t\t\t\t int disabled)\n{\n\tstruct spank_plugin_opt *spopt = xmalloc(sizeof(*spopt));\n\tspopt->opt = _spank_option_copy (opt);\n\tspopt->plugin = p;\n\tspopt->optval = _spank_next_option_val(p->stack);\n\tspopt->found = 0;\n\tspopt->optarg = NULL;\n\n\tspopt->disabled = disabled;\n\n\treturn (spopt);\n}\n\nvoid _spank_plugin_opt_destroy(struct spank_plugin_opt *spopt)\n{\n\t_spank_option_destroy (spopt->opt);\n\txfree(spopt->optarg);\n\txfree(spopt);\n}\n\nstatic int _opt_by_val(struct spank_plugin_opt *opt, int *optvalp)\n{\n\treturn (opt->optval == *optvalp);\n}\n\nstatic int _opt_by_name(struct spank_plugin_opt *opt, char *optname)\n{\n\treturn (xstrcmp(opt->opt->name, optname) == 0);\n}\n\nstatic int\n_spank_option_register(struct spank_plugin *p, struct spank_option *opt)\n{\n\tint disabled = 0;\n\tstruct spank_plugin_opt *spopt;\n\tstruct spank_stack *stack;\n\tList option_cache;\n\n\tstack = p->stack;\n\tif (stack == NULL) {\n\t\terror (\"spank: %s: can't determine plugin context\", p->name);\n\t\treturn (ESPANK_BAD_ARG);\n\t}\n\toption_cache = stack->option_cache;\n\n\tspopt = list_find_first(option_cache,\n\t\t\t(ListFindF) _opt_by_name, opt->name);\n\tif (spopt) {\n\t\tstruct spank_plugin *q = spopt->plugin;\n\t\tinfo(\"spank: option \\\"%s\\\" provided by both %s and %s\",\n\t\t\t\topt->name, xbasename(p->fq_path),\n\t\t\t\txbasename(q->fq_path));\n\t\t/*\n\t\t *  Disable this option, but still cache it, in case\n\t\t *    options are loaded in a different order on the\n\t\t *    remote side.\n\t\t */\n\t\tdisabled = 1;\n\t}\n\n\tif ((strlen(opt->name) > SPANK_OPTION_MAXLEN)) {\n\t\terror(\"spank: option \\\"%s\\\" provided by %s too long. \"\n\t\t      \"Ignoring.\", opt->name, p->name);\n\t\treturn (ESPANK_NOSPACE);\n\t}\n\n\tdebug (\"SPANK: appending plugin option \\\"%s\\\"\", opt->name);\n\tlist_append(option_cache, _spank_plugin_opt_create(p, opt, disabled));\n\n\treturn (ESPANK_SUCCESS);\n}\n\nspank_err_t spank_option_register(spank_t sp, struct spank_option *opt)\n{\n\tif (sp->phase != SPANK_INIT)\n\t\treturn (ESPANK_BAD_ARG);\n\n\tif (!sp->plugin)\n\t\terror (\"Uh, oh, no current plugin!\");\n\n\tif (!opt || !opt->name || !opt->usage)\n\t\treturn (ESPANK_BAD_ARG);\n\n\treturn (_spank_option_register(sp->plugin, opt));\n}\n\nstatic int _spank_plugin_options_cache(struct spank_plugin *p)\n{\n\tstruct spank_option *opt = p->opts;\n\n\tif ((opt == NULL) || opt->name == NULL)\n\t\treturn (0);\n\n\tfor (; opt && opt->name != NULL; opt++)\n\t\t_spank_option_register(p, opt);\n\n\treturn (0);\n}\n\nstatic int _add_one_option(struct option **optz,\n\t\t\t   struct spank_plugin_opt *spopt)\n{\n\tstruct option opt;\n\n\topt.name = spopt->opt->name;\n\topt.has_arg = spopt->opt->has_arg;\n\topt.flag = NULL;\n\topt.val = spopt->optval;\n\n\tif (optz_add(optz, &opt) < 0) {\n\t\tif (errno == EEXIST) {\n\t\t\terror (\"Ignoring conflicting option \\\"%s\\\" \"\n\t\t\t       \"in plugin \\\"%s\\\"\",\n\t\t\t       opt.name, spopt->plugin->name);\n\t\t} else {\n\t\t\terror(\"Unable to add option \\\"%s\\\" \"\n\t\t\t      \"from plugin \\\"%s\\\"\",\n\t\t\t      opt.name, spopt->plugin->name);\n\t\t}\n\n\t\treturn (-1);\n\t}\n\n\treturn (0);\n}\n\n\nstruct option *spank_option_table_create(const struct option *orig)\n{\n\tstruct spank_plugin_opt *spopt;\n\tstruct option *opts = NULL;\n\tListIterator i = NULL;\n\n\tList option_cache = get_global_option_cache();\n\tif (option_cache == NULL)\n\t\treturn (NULL);\n\n\topts = optz_create();\n\n\t/*\n\t *  Start with original options:\n\t */\n\tif ((orig != NULL) && (optz_append(&opts, orig) < 0)) {\n\t\toptz_destroy(opts);\n\t\treturn (NULL);\n\t}\n\n\tif (option_cache == NULL || (list_count(option_cache) == 0))\n\t\treturn (opts);\n\n\ti = list_iterator_create(option_cache);\n\twhile ((spopt = list_next(i))) {\n\t\tif (!spopt->disabled && (_add_one_option (&opts, spopt) < 0))\n\t\t\tspopt->disabled = 1;\n\t}\n\n\tlist_iterator_destroy(i);\n\n\treturn (opts);\n}\n\nvoid spank_option_table_destroy(struct option *optz)\n{\n\toptz_destroy(optz);\n}\n\nstatic int _do_option_cb(struct spank_plugin_opt *opt, const char *arg)\n{\n\tint rc = 0;\n\n\txassert(opt);\n\txassert(arg);\n\n\t/*\n\t *  Call plugin callback if such a one exists\n\t */\n\tif (opt->opt->cb\n\t    && (rc = ((*opt->opt->cb) (opt->opt->val, arg, 0))) < 0)\n\t\treturn (rc);\n\n\t/*\n\t *  Set optarg and \"found\" so that option will be forwarded\n\t *    to remote side.\n\t */\n\tif (opt->opt->has_arg)\n\t\topt->optarg = xstrdup(arg);\n\topt->found = 1;\n\n\treturn rc;\n}\n\nextern int spank_process_option(int optval, const char *arg)\n{\n\tstruct spank_plugin_opt *opt;\n\tint rc = 0;\n\tList option_cache = get_global_option_cache();\n\n\tif (option_cache == NULL || (list_count(option_cache) == 0)) {\n\t\terror(\"No spank option cache\");\n\t\treturn (-1);\n\t}\n\n\topt = list_find_first(option_cache, (ListFindF)_opt_by_val, &optval);\n\tif (!opt) {\n\t\terror(\"Failed to find spank option for optval: %d\", optval);\n\t\treturn (-1);\n\t}\n\n\tif ((rc = _do_option_cb(opt, arg))) {\n\t\terror(\"Invalid --%s argument: %s\", opt->opt->name, arg);\n\t\treturn (rc);\n\t}\n\n\treturn (0);\n}\n\nextern int spank_process_env_options()\n{\n\tchar var[1024];\n\tconst char *arg;\n\tstruct spank_plugin_opt *option;\n\tListIterator i;\n\tList option_cache = get_global_option_cache();\n\tint rc = 0;\n\n\tif (option_cache == NULL || (list_count(option_cache) == 0))\n\t\treturn 0;\n\n\ti = list_iterator_create(option_cache);\n\twhile ((option = list_next(i))) {\n\t\tchar *env_name;\n\t\tenv_name = xstrdup_printf(\"SLURM_SPANK_%s\",\n\t\t\t\t\t  _opt_env_name(option, var,\n\t\t\t\t\t\t\tsizeof(var)));\n\t\tif (!(arg = getenv(env_name))) {\n\t\t\txfree(env_name);\n\t\t\tcontinue;\n\t\t}\n\n\t\tif ((rc = _do_option_cb(option, arg))) {\n\t\t\terror(\"Invalid argument (%s) for environment variable: %s\",\n\t\t\t      arg, env_name);\n\t\t\txfree(env_name);\n\t\t\tbreak;\n\t\t}\n\t\txfree(env_name);\n\t}\n\tlist_iterator_destroy(i);\n\n\treturn rc;\n}\n\nstatic char *\n_find_word_boundary(char *str, char *from, char **next)\n{\n\tchar *p = from;\n\n\t/*\n\t * Back up past any non-whitespace if we are pointing in\n\t *  the middle of a word.\n\t */\n\twhile ((p != str) && !isspace ((int)*p))\n\t\t--p;\n\n\t/*\n\t * Next holds next word boundary\n\t */\n\t*next = p+1;\n\n\t/*\n\t * Now move back to the end of the previous word\n\t */\n\twhile ((p != str) && isspace ((int)*p))\n\t\t--p;\n\n\tif (p == str) {\n\t\t*next = str;\n\t\treturn (NULL);\n\t}\n\n\treturn (p+1);\n}\n\nstatic char *\n_get_next_segment (char **from, int width, char *buf, int bufsiz)\n{\n\tint len;\n\tchar * seg = *from;\n\tchar *p;\n\n\tif (**from == '\\0')\n\t\treturn (NULL);\n\n\tif ((len = strlen (*from)) <= width) {\n\t\t*from = *from + len;\n\t\treturn (seg);\n\t}\n\n\tif (!(p = _find_word_boundary (seg, *from + width, from))) {\n\t\t/*\n\t\t *\tNeed to break up a word. Use user-supplied buffer.\n\t\t */\n\t\tstrlcpy (buf, seg, width+1);\n\t\tbuf [width - 1]  = '-';\n\t\t/*\n\t\t * Adjust from to character eaten by '-'\n\t\t *  And return pointer to buf.\n\t\t */\n\t\t*from = seg + width - 1;\n\t\treturn (buf);\n\t}\n\n\t*p = '\\0';\n\n\treturn (seg);\n}\n\nstatic int\n_term_columns (void)\n{\n\tchar *val;\n\tint  cols = 80;\n\n\tif ((val = getenv (\"COLUMNS\"))) {\n\t\tchar *p;\n\t\tlong lval = strtol (val, &p, 10);\n\n\t\tif (p && (*p == '\\0'))\n\t\t\tcols = (int) lval;\n\t}\n\n\treturn (cols);\n}\n\nstatic void\n_spank_opt_print(struct spank_option *opt, FILE * fp, int left_pad, int width)\n{\n\tint n;\n\tchar *equals = \"\";\n\tchar *arginfo = \"\";\n\tchar *p, *q;\n\tchar info [81];\n\tchar seg [81];\n\tchar buf [4096];\n\n\tint  columns = _term_columns ();\n\tint  descrsiz = columns - width;\n\n\tif (opt->arginfo) {\n\t\tequals = \"=\";\n\t\targinfo = opt->arginfo;\n\t}\n\n\tn = snprintf(info, sizeof(info), \"%*s--%s%s%s\",\n\t\t     left_pad, \"\", opt->name, equals, arginfo);\n\n\tif ((n < 0) || (n > columns)) {\n\t\tconst char trunc[] = \"+\";\n\t\tint len = strlen(trunc);\n\t\tp = info + columns - len - 1;\n\t\tsnprintf(p, len + 1, \"%s\", trunc);\n\t}\n\n\n\tq = buf;\n\tstrlcpy (buf, opt->usage, sizeof (buf));\n\n\tp = _get_next_segment (&q, descrsiz, seg, sizeof (seg));\n\n\tif (n < width)\n\t\tfprintf(fp, \"%-*s%s\\n\", width, info, p);\n\telse\n\t\tfprintf(fp, \"\\n%s\\n%*s%s\\n\", info, width, \"\", p);\n\n\t/* Get remaining line-wrapped lines.\n\t */\n\twhile ((p = _get_next_segment (&q, descrsiz, seg, sizeof (seg))))\n\t\tfprintf(fp, \"%*s%s\\n\", width, \"\", p);\n\n\treturn;\n}\n\nint spank_print_options(FILE * fp, int left_pad, int width)\n{\n\tstruct spank_plugin_opt *p;\n\tListIterator i;\n\tList option_cache = get_global_option_cache();\n\n\tif ((option_cache == NULL) || (list_count(option_cache) == 0))\n\t\treturn (0);\n\n\tfprintf(fp, \"\\nOptions provided by plugins:\\n\");\n\n\ti = list_iterator_create(option_cache);\n\twhile ((p = list_next(i))) {\n\t\tif (p->disabled)\n\t\t\tcontinue;\n\t\t_spank_opt_print(p->opt, fp, left_pad, width);\n\t}\n\tlist_iterator_destroy(i);\n\n\treturn (0);\n}\n\n#define OPT_TYPE_SPANK 0x4400\n\nstatic char _canonical_char (char c)\n{\n\tif (!isalnum ((int)c))\n\t\treturn '_';\n\telse\n\t\treturn c;\n}\n\n/*\n *  Create spank option environment variable name from option name.\n */\nstatic char * _opt_env_name (struct spank_plugin_opt *p, char *buf, size_t siz)\n{\n\tconst char * name = p->opt->name;\n\tconst char * pname = p->plugin->name;\n\tint i, n;\n\n\tstrlcpy (buf, SPANK_OPTION_ENV_PREFIX, siz);\n\n\t/*\n\t *  First append the plugin name associated with this option:\n\t */\n\tn = 0;\n\tfor (i = strlen (buf); i < siz - 1 && n < strlen (pname); i++)\n\t    buf[i] = _canonical_char (pname[n++]);\n\n\t/*\n\t *  Append _\n\t */\n\tbuf[i] = '_';\n\tbuf[i+1] = '\\0';\n\n\t/*\n\t *  Now incorporate the option name:\n\t */\n\tn = 0;\n\tfor (i = strlen (buf); i < siz - 1 && n < strlen (name); i++)\n\t    buf[i] = _canonical_char (name[n++]);\n\tbuf[i] = '\\0';\n\n\treturn (buf);\n}\n\nstatic int _option_setenv (struct spank_plugin_opt *option)\n{\n\tchar var[1024];\n\tchar *arg = option->optarg;\n\n\t_opt_env_name(option, var, sizeof(var));\n\n\t/*\n\t * Old glibc behavior was to set the variable with an empty value if\n\t * the option was NULL. Newer glibc versions will segfault instead,\n\t * so feed it an empty string when necessary to maintain backwards\n\t * compatibility.\n\t */\n\tif (!option->optarg)\n\t\targ = \"\";\n\n\tif (setenv(var, arg, 1) < 0)\n\t\terror(\"failed to set %s=%s in env\", var, arg);\n\n\t/*\n\t * Use the possibly-NULL value and let the command itself figure\n\t * out how to handle it. This will usually result in \"(null)\"\n\t * instead of \"\" used above.\n\t */\n\n\tif (dyn_spank_set_job_env(var, option->optarg, 1) < 0)\n\t\terror(\"failed to set %s=%s in env\", var, option->optarg);\n\n\treturn (0);\n}\n\nstatic int spank_stack_set_remote_options_env (struct spank_stack *stack)\n{\n\tstruct spank_plugin_opt *p;\n\tListIterator i;\n\tList option_cache;\n\n\tif (stack == NULL)\n\t\treturn (0);\n\toption_cache = stack->option_cache;\n\n\tif ((option_cache == NULL) || (list_count(option_cache) == 0))\n\t\treturn (0);\n\n\ti = list_iterator_create(option_cache);\n\twhile ((p = list_next(i))) {\n\t\tif (p->found)\n\t\t\t_option_setenv (p);\n\t}\n\tlist_iterator_destroy(i);\n\treturn (0);\n}\n\nint spank_set_remote_options(job_options_t opts)\n{\n\tstruct spank_plugin_opt *p;\n\tListIterator i;\n\tList option_cache;\n\n\tif (global_spank_stack == NULL)\n\t\treturn (0);\n\toption_cache = global_spank_stack->option_cache;\n\n\tif ((option_cache == NULL) || (list_count(option_cache) == 0))\n\t\treturn (0);\n\n\ti = list_iterator_create(option_cache);\n\twhile ((p = list_next(i))) {\n\t\tchar optstr[1024];\n\n\t\tif (!p->found)\n\t\t\tcontinue;\n\n\t\tsnprintf(optstr, sizeof(optstr), \"%s:%s\",\n\t\t\t p->opt->name, p->plugin->name);\n\n\t\tjob_options_append(opts, OPT_TYPE_SPANK, optstr,\n\t\t\t\t   p->optarg);\n\t}\n\tlist_iterator_destroy(i);\n\treturn (0);\n}\n\nstruct opt_find_args {\n\tconst char *optname;\n\tconst char *plugin_name;\n};\n\nstatic int _opt_find(struct spank_plugin_opt *p,\n\t\t     struct opt_find_args *args)\n{\n\tif (xstrcmp(p->plugin->name, args->plugin_name) != 0)\n\t\treturn (0);\n\tif (xstrcmp(p->opt->name, args->optname) != 0)\n\t\treturn (0);\n\treturn (1);\n}\n\nstatic struct spank_plugin_opt *\nspank_stack_find_option_by_name(struct spank_stack *stack, const char *str)\n{\n\tstruct spank_plugin_opt *opt = NULL;\n\tstruct opt_find_args args;\n\tchar buf[256];\n\tchar *name;\n\tList option_cache = stack->option_cache;\n\n\tif (strlcpy(buf, str, sizeof(buf)) >= sizeof(buf)) {\n\t\terror(\"plugin option \\\"%s\\\" too big. Ignoring.\", str);\n\t\treturn (NULL);\n\t}\n\n\tif (!(name = strchr(buf, ':'))) {\n\t\terror(\"Malformed plugin option \\\"%s\\\" received. Ignoring\",\n\t\t      str);\n\t\treturn (NULL);\n\t}\n\n\t*(name++) = '\\0';\n\n\targs.optname = buf;\n\targs.plugin_name = name;\n\n\tif (option_cache) {\n\t\topt = list_find_first(option_cache, (ListFindF) _opt_find,\n\t\t\t\t      &args);\n\t\tif (opt == NULL) {\n\t\t\terror(\"Warning: SPANK plugin \\\"%s\\\" option \\\"%s\\\" not \"\n\t\t\t      \"found\", name, buf);\n\t\t\treturn (NULL);\n\t\t}\n\t} else {\n\t\terror(\"Warning: no SPANK plugin found to process option \\\"%s\\\"\",\n\t\t      name);\n\t\treturn (NULL);\n\t}\n\n\treturn (opt);\n}\n\nspank_err_t\nspank_option_getopt (spank_t sp, struct spank_option *opt, char **argp)\n{\n\tconst char *val;\n\tchar var[1024];\n\tList option_cache;\n\tstruct spank_plugin_opt *spopt;\n\n\tif (argp)\n\t\t*argp = NULL;\n\n\tif (!sp->plugin) {\n\t\terror (\"spank_option_getopt: Not called from a plugin!?\");\n\t\treturn (ESPANK_NOT_AVAIL);\n\t}\n\n\tif (sp->phase == SPANK_INIT)\n\t\treturn (ESPANK_NOT_AVAIL);\n\n\tif (!opt || !opt->name)\n\t\treturn (ESPANK_BAD_ARG);\n\n\tif (opt->has_arg && !argp)\n\t\treturn (ESPANK_BAD_ARG);\n\n\t/*\n\t *   First check the cache:\n\t */\n\toption_cache = sp->stack->option_cache;\n\tspopt = list_find_first (option_cache,\n\t\t\t\t (ListFindF) _opt_by_name,\n\t\t\t\t opt->name);\n\tif (spopt) {\n\t\t/*\n\t\t *  Return failure if option is cached but hasn't been\n\t\t *   used on the command line or specified by user.\n\t\t */\n\t\tif (!spopt->found)\n\t\t\treturn (ESPANK_ERROR);\n\n\t\tif (opt->has_arg && argp)\n\t\t\t*argp = spopt->optarg;\n\t\treturn (ESPANK_SUCCESS);\n\t}\n\n\t/*\n\t *  Otherwise, check current environment:\n\t *\n\t *  We need to check for variables that start with either\n\t *   the default spank option env prefix, or the default\n\t *   prefix + an *extra* prefix of SPANK_, in case we're\n\t *   running in prolog/epilog, where Slurm prepends SPANK_\n\t *   to all spank job environment variables.\n\t */\n\tspopt = _spank_plugin_opt_create (sp->plugin, opt, 0);\n\tmemcpy (var, \"SPANK_\", 6);\n\tif ((val = getenv (_opt_env_name(spopt, var+6, sizeof (var) - 6))) ||\n\t    (val = getenv (var))) {\n\t\tspopt->optarg = xstrdup (val);\n\t\tspopt->found = 1;\n\t\tif (opt->has_arg && argp)\n\t\t\t*argp = spopt->optarg;\n\t}\n\n\t/*\n\t *  Cache the result\n\t */\n\tlist_append (option_cache, spopt);\n\n\tif (!spopt->found)\n\t\treturn (ESPANK_ERROR);\n\n\treturn (ESPANK_SUCCESS);\n}\n\n\nint spank_get_remote_options_env (char **env)\n{\n\treturn spank_stack_get_remote_options_env (global_spank_stack, env);\n}\n\n\nstatic int\nspank_stack_get_remote_options_env (struct spank_stack *stack, char **env)\n{\n\tchar var [1024];\n\tconst char *arg;\n\tstruct spank_plugin_opt *option;\n\tListIterator i;\n\tList option_cache = stack->option_cache;\n\n\tif (!option_cache)\n\t\treturn (0);\n\n\ti = list_iterator_create (option_cache);\n\twhile ((option = list_next (i))) {\n\t\tstruct spank_option *p = option->opt;\n\n\t\tif (!(arg = getenvp (env, _opt_env_name (option, var, sizeof(var)))))\n\t\t\tcontinue;\n\n\t\tif (p->cb && (((*p->cb) (p->val, arg, 1)) < 0)) {\n\t\t\terror (\"spank: failed to process option %s=%s\",\n\t\t\t       p->name, arg);\n\t\t}\n\n\t\t/*\n\t\t *  Now remove the environment variable.\n\t\t *   It is no longer needed.\n\t\t */\n\t\tunsetenvp (env, var);\n\n\t}\n\tlist_iterator_destroy (i);\n\n\treturn (0);\n}\n\nint spank_get_remote_options(job_options_t opts)\n{\n\treturn spank_stack_get_remote_options (global_spank_stack, opts);\n}\n\nstatic int\nspank_stack_get_remote_options(struct spank_stack *stack, job_options_t opts)\n{\n\tconst struct job_option_info *j;\n\n\tjob_options_iterator_reset(opts);\n\twhile ((j = job_options_next(opts))) {\n\t\tstruct spank_plugin_opt *opt;\n\t\tstruct spank_option *p;\n\n\t\tif (j->type != OPT_TYPE_SPANK)\n\t\t\tcontinue;\n\n\t\tif (!(opt = spank_stack_find_option_by_name(stack, j->option)))\n\t\t\tcontinue;\n\n\t\tp = opt->opt;\n\n\t\tif (p->cb && (((*p->cb) (p->val, j->optarg, 1)) < 0)) {\n\t\t\terror(\"spank: failed to process option %s=%s\",\n\t\t\t      p->name, j->optarg);\n\t\t}\n\t}\n\n\treturn (0);\n}\n\n/*\n *  Clear any environment variables for spank options.\n *   spank option env vars  have a prefix of SPANK_OPTION_ENV_PREFIX,\n *   or SPANK_ + SPANK_OPTION_ENV_PREFIX\n */\nint spank_clear_remote_options_env (char **env)\n{\n\tchar **ep;\n\tint len = strlen (SPANK_OPTION_ENV_PREFIX);\n\n\tfor (ep = env; *ep; ep++) {\n\t\tchar *p = *ep;\n\t\tif (xstrncmp (*ep, \"SPANK_\", 6) == 0)\n\t\t\tp = *ep+6;\n\t\tif (xstrncmp (p, SPANK_OPTION_ENV_PREFIX, len) == 0) {\n\t\t\tchar *end = strchr (p+len, '=');\n\t\t\tif (end) {\n\t\t\t\tchar name[1024];\n\t\t\t\tmemcpy (name, *ep, end - *ep);\n\t\t\t\tname [end - *ep] = '\\0';\n\t\t\t\tdebug (\"unsetenv (%s)\\n\", name);\n\t\t\t\tunsetenvp (env, name);\n\t\t\t}\n\t\t}\n\t}\n\treturn (0);\n}\n\n\n\nstatic int tasks_execd (spank_t spank)\n{\n\treturn ( (spank->phase == STEP_TASK_POST_FORK)\n\t      || (spank->phase == STEP_TASK_EXIT)\n\t      || (spank->phase == SPANK_EXIT) );\n}\n\nstatic spank_err_t\n_global_to_local_id(stepd_step_rec_t *job, uint32_t gid, uint32_t *p2uint32)\n{\n\tint i;\n\t*p2uint32 = (uint32_t) -1;\n\tif ((job == NULL) || (gid >= job->ntasks))\n\t\treturn (ESPANK_BAD_ARG);\n\tfor (i = 0; i < job->node_tasks; i++) {\n\t\tif (job->task[i]->gtid == gid) {\n\t\t\t*p2uint32 = job->task[i]->id;\n\t\t\treturn (ESPANK_SUCCESS);\n\t\t}\n\t}\n\treturn (ESPANK_NOEXIST);\n}\n\n\n/*\n *  Return 1 if spank_item_t is valid for S_TYPE_LOCAL\n */\nstatic int _valid_in_local_context (spank_item_t item)\n{\n\tint rc = 0;\n\tswitch (item) {\n\tcase S_JOB_UID:\n\tcase S_JOB_GID:\n\tcase S_JOB_ID:\n\tcase S_JOB_STEPID:\n\tcase S_JOB_ARGV:\n\tcase S_JOB_ENV:\n\tcase S_JOB_TOTAL_TASK_COUNT:\n\tcase S_JOB_NNODES:\n\t\trc = 1;\n\t\tbreak;\n\tdefault:\n\t\trc = 0;\n\t}\n\treturn (rc);\n}\n\nstatic int _valid_in_allocator_context (spank_item_t item)\n{\n\tswitch (item) {\n\t  case S_JOB_UID:\n\t  case S_JOB_GID:\n\t\t  return 1;\n\t  default:\n\t\t  return 0;\n\t}\n}\n\nstatic spank_err_t _check_spank_item_validity (spank_t spank, spank_item_t item)\n{\n\t/*\n\t *  Valid in all contexts:\n\t */\n\tswitch (item) {\n\t  case S_SLURM_VERSION:\n\t  case S_SLURM_VERSION_MAJOR:\n\t  case S_SLURM_VERSION_MINOR:\n\t  case S_SLURM_VERSION_MICRO:\n\t\t  return ESPANK_SUCCESS;\n\t  default:\n\t\t  break; /* fallthru */\n\t}\n\n\t/*\n\t *  No spank_item_t is available in slurmd context at this time.\n\t */\n\tif (spank->stack->type == S_TYPE_SLURMD)\n\t\treturn ESPANK_NOT_AVAIL;\n\telse if (spank->stack->type == S_TYPE_JOB_SCRIPT) {\n\t\tif (item != S_JOB_UID && item != S_JOB_ID)\n\t\t\treturn ESPANK_NOT_AVAIL;\n\t}\n\telse if (spank->stack->type == S_TYPE_LOCAL) {\n\t\tif (!_valid_in_local_context (item))\n\t\t\treturn ESPANK_NOT_REMOTE;\n\t\telse if (spank->job == NULL)\n\t\t\treturn ESPANK_NOT_AVAIL;\n\t}\n\telse if (spank->stack->type == S_TYPE_ALLOCATOR) {\n\t\tif (_valid_in_allocator_context (item)) {\n\t\t\tif (spank->job)\n\t\t\t\treturn ESPANK_SUCCESS;\n\t\t\telse\n\t\t\t\treturn ESPANK_NOT_AVAIL;\n\t\t}\n\t\telse if (_valid_in_local_context (item))\n\t\t\treturn ESPANK_BAD_ARG;\n\t\telse\n\t\t\treturn ESPANK_NOT_REMOTE;\n\t}\n\n\t/* All items presumably valid in remote context */\n\treturn ESPANK_SUCCESS;\n}\n\n/*\n *  Global functions for SPANK plugins\n */\n\nconst char * spank_strerror (spank_err_t err)\n{\n\tswitch (err) {\n\tcase ESPANK_SUCCESS:\n\t\treturn \"Success\";\n\tcase ESPANK_ERROR:\n\t\treturn \"Generic error\";\n\tcase ESPANK_BAD_ARG:\n\t\treturn \"Bad argument\";\n\tcase ESPANK_NOT_TASK:\n\t\treturn \"Not in task context\";\n\tcase ESPANK_ENV_EXISTS:\n\t\treturn \"Environment variable exists\";\n\tcase ESPANK_ENV_NOEXIST:\n\t\treturn \"No such environment variable\";\n\tcase ESPANK_NOSPACE:\n\t\treturn \"Buffer too small\";\n\tcase ESPANK_NOT_REMOTE:\n\t\treturn \"Valid only in remote context\";\n\tcase ESPANK_NOEXIST:\n\t\treturn \"Id/PID does not exist on this node\";\n\tcase ESPANK_NOT_EXECD:\n\t\treturn \"Lookup by PID requested, but no tasks running\";\n\tcase ESPANK_NOT_AVAIL:\n\t\treturn \"Item not available from this callback\";\n\tcase ESPANK_NOT_LOCAL:\n\t\treturn \"Valid only in local or allocator context\";\n\t}\n\n\treturn \"Unknown\";\n}\n\nint spank_symbol_supported (const char *name)\n{\n\tint i;\n\n\tif (name == NULL)\n\t\treturn (-1);\n\n\tfor (i = 0; i < n_spank_syms; i++) {\n\t\tif (xstrcmp (spank_syms [i], name) == 0)\n\t\t\treturn (1);\n\t}\n\n\treturn (0);\n}\n\nint spank_remote(spank_t spank)\n{\n\tif ((spank == NULL) || (spank->magic != SPANK_MAGIC))\n\t\treturn (-1);\n\tif (spank->stack->type == S_TYPE_REMOTE)\n\t\treturn (1);\n\telse\n\t\treturn (0);\n}\n\nspank_context_t spank_context (void)\n{\n\tif (global_spank_stack == NULL)\n\t\treturn S_CTX_ERROR;\n\tswitch (global_spank_stack->type) {\n\t  case S_TYPE_REMOTE:\n\t\t  return S_CTX_REMOTE;\n\t  case S_TYPE_LOCAL:\n\t\t  return S_CTX_LOCAL;\n\t  case S_TYPE_ALLOCATOR:\n\t\t  return S_CTX_ALLOCATOR;\n\t  case S_TYPE_SLURMD:\n\t\t  return S_CTX_SLURMD;\n\t  case S_TYPE_JOB_SCRIPT:\n\t\t  return S_CTX_JOB_SCRIPT;\n\t  default:\n\t\t  return S_CTX_ERROR;\n\t}\n\n\treturn S_CTX_ERROR;\n}\n\nspank_err_t spank_get_item(spank_t spank, spank_item_t item, ...)\n{\n\tint *p2int;\n\tuint32_t *p2uint32;\n\tuint64_t *p2uint64;\n\tuint32_t  uint32;\n\tuint16_t *p2uint16;\n\tuid_t *p2uid;\n\tgid_t *p2gid;\n\tgid_t **p2gids;\n\tpid_t *p2pid;\n\tpid_t  pid;\n\tchar ***p2argv;\n\tchar **p2str;\n\tchar **p2vers;\n\tstepd_step_task_info_t *task;\n\tstepd_step_rec_t  *slurmd_job = NULL;\n\tstruct spank_launcher_job_info *launcher_job = NULL;\n\tstruct job_script_info *s_job_info = NULL;\n\tva_list vargs;\n\tspank_err_t rc = ESPANK_SUCCESS;\n\n\tif ((spank == NULL) || (spank->magic != SPANK_MAGIC))\n\t\treturn (ESPANK_BAD_ARG);\n\n\t/*\n\t *  Check for validity of the given item in the current context\n\t */\n\trc = _check_spank_item_validity (spank, item);\n\tif (rc != ESPANK_SUCCESS)\n\t\treturn (rc);\n\n\tif (spank->stack->type == S_TYPE_LOCAL)\n\t\tlauncher_job = spank->job;\n\telse if (spank->stack->type == S_TYPE_REMOTE)\n\t\tslurmd_job = spank->job;\n\telse if (spank->stack->type == S_TYPE_JOB_SCRIPT)\n\t\ts_job_info = spank->job;\n\n\tva_start(vargs, item);\n\tswitch (item) {\n\tcase S_JOB_UID:\n\t\tp2uid = va_arg(vargs, uid_t *);\n\t\tif (spank->stack->type == S_TYPE_LOCAL)\n\t\t\t*p2uid = launcher_job->uid;\n\t\telse if (spank->stack->type == S_TYPE_REMOTE)\n\t\t\t*p2uid = slurmd_job->uid;\n\t\telse if (spank->stack->type == S_TYPE_JOB_SCRIPT)\n\t\t\t*p2uid = s_job_info->uid;\n\t\telse\n\t\t\t*p2uid = getuid();\n\t\tbreak;\n\tcase S_JOB_GID:\n\t\tp2gid = va_arg(vargs, gid_t *);\n\t\tif (spank->stack->type == S_TYPE_LOCAL)\n\t\t\t*p2gid = launcher_job->gid;\n\t\telse if (spank->stack->type == S_TYPE_REMOTE)\n\t\t\t*p2gid = slurmd_job->gid;\n\t\telse\n\t\t\t*p2gid = getgid();\n\t\tbreak;\n\tcase S_JOB_SUPPLEMENTARY_GIDS:\n\t\tp2gids = va_arg(vargs, gid_t **);\n\t\tp2int = va_arg(vargs, int *);\n\t\tif (slurmd_job) {\n\t\t\t*p2gids = slurmd_job->gids;\n\t\t\t*p2int = slurmd_job->ngids;\n\t\t} else {\n\t\t\t*p2gids = NULL;\n\t\t\t*p2int = 0;\n\t\t}\n\t\tbreak;\n\tcase S_JOB_ID:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (spank->stack->type == S_TYPE_LOCAL)\n\t\t\t*p2uint32 = launcher_job->jobid;\n\t\telse if (spank->stack->type == S_TYPE_REMOTE)\n\t\t\t*p2uint32 = slurmd_job->jobid;\n\t\telse if (spank->stack->type == S_TYPE_JOB_SCRIPT)\n\t\t\t*p2uint32 = s_job_info->jobid;\n\t\tbreak;\n\tcase S_JOB_STEPID:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (spank->stack->type == S_TYPE_LOCAL)\n\t\t\t*p2uint32 = launcher_job->stepid;\n\t\telse if (slurmd_job)\n\t\t\t*p2uint32 = slurmd_job->stepid;\n\t\telse\n\t\t\t*p2uint32 = 0;\n\t\tbreak;\n\tcase S_JOB_NNODES:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (spank->stack->type == S_TYPE_LOCAL) {\n\t\t\tif (launcher_job->step_layout)\n\t\t\t\t*p2uint32 = launcher_job->step_layout->\n\t\t\t\t\t    node_cnt;\n\t\t\telse {\n\t\t\t\t*p2uint32 = 0;\n\t\t\t\trc = ESPANK_ENV_NOEXIST;\n\t\t\t}\n\t\t} else if (slurmd_job)\n\t\t\t*p2uint32 = slurmd_job->nnodes;\n\t\telse\n\t\t\t*p2uint32 = 0;\n\t\tbreak;\n\tcase S_JOB_NODEID:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (slurmd_job)\n\t\t\t*p2uint32 = slurmd_job->nodeid;\n\t\telse\n\t\t\t*p2uint32 = 0;\n\t\tbreak;\n\tcase S_JOB_LOCAL_TASK_COUNT:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (slurmd_job)\n\t\t\t*p2uint32 = slurmd_job->node_tasks;\n\t\telse\n\t\t\t*p2uint32 = 0;\n\t\tbreak;\n\tcase S_JOB_TOTAL_TASK_COUNT:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (spank->stack->type == S_TYPE_LOCAL) {\n\t\t\tif (launcher_job->step_layout)\n\t\t\t\t*p2uint32 = launcher_job->step_layout->\n\t\t\t\t\t    task_cnt;\n\t\t\telse {\n\t\t\t\t*p2uint32 = 0;\n\t\t\t\trc = ESPANK_ENV_NOEXIST;\n\t\t\t}\n\t\t} else if (slurmd_job)\n\t\t\t*p2uint32 = slurmd_job->ntasks;\n\t\telse\n\t\t\t*p2uint32 = 0;\n\t\tbreak;\n\tcase S_JOB_NCPUS:\n\t\tp2uint16 = va_arg(vargs, uint16_t *);\n\t\tif (slurmd_job)\n\t\t\t*p2uint16 = slurmd_job->cpus;\n\t\telse\n\t\t\t*p2uint16 = 0;\n\t\tbreak;\n\tcase S_STEP_CPUS_PER_TASK:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (slurmd_job)\n\t\t\t*p2uint32 = slurmd_job->cpus_per_task;\n\t\telse\n\t\t\t*p2uint32 = 0;\n\t\tbreak;\n\tcase S_JOB_ARGV:\n\t\tp2int = va_arg(vargs, int *);\n\t\tp2argv = va_arg(vargs, char ***);\n\t\tif (spank->stack->type == S_TYPE_LOCAL) {\n\t\t\t*p2int = launcher_job->argc;\n\t\t\t*p2argv = launcher_job->argv;\n\t\t} else if (slurmd_job) {\n\t\t\t*p2int = slurmd_job->argc;\n\t\t\t*p2argv = slurmd_job->argv;\n\t\t} else {\n\t\t\t*p2int = 0;\n\t\t\t*p2argv = NULL;\n\t\t}\n\t\tbreak;\n\tcase S_JOB_ENV:\n\t\tp2argv = va_arg(vargs, char ***);\n\t\tif (slurmd_job)\n\t\t\t*p2argv = slurmd_job->env;\n\t\telse\n\t\t\t*p2argv = NULL;\n\t\tbreak;\n\tcase S_TASK_ID:\n\t\tp2int = va_arg(vargs, int *);\n\t\tif (!spank->task) {\n\t\t\t*p2int = -1;\n\t\t\trc = ESPANK_NOT_TASK;\n\t\t} else {\n\t\t\t*p2int = spank->task->id;\n\t\t}\n\t\tbreak;\n\tcase S_TASK_GLOBAL_ID:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (!spank->task) {\n\t\t\trc = ESPANK_NOT_TASK;\n\t\t} else {\n\t\t\t*p2uint32 = spank->task->gtid;\n\t\t}\n\t\tbreak;\n\tcase S_TASK_EXIT_STATUS:\n\t\tp2int = va_arg(vargs, int *);\n\t\tif (!spank->task || !spank->task->exited) {\n\t\t\trc = ESPANK_NOT_TASK;\n\t\t} else {\n\t\t\t*p2int = spank->task->estatus;\n\t\t}\n\t\tbreak;\n\tcase S_TASK_PID:\n\t\tp2pid = va_arg(vargs, pid_t *);\n\t\tif (!spank->task) {\n\t\t\trc = ESPANK_NOT_TASK;\n\t\t\t*p2pid = 0;\n\t\t} else {\n\t\t\t*p2pid = spank->task->pid;\n\t\t}\n\t\tbreak;\n\tcase S_JOB_PID_TO_GLOBAL_ID:\n\t\tpid = va_arg(vargs, pid_t);\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\t*p2uint32 = (uint32_t) -1;\n\n\t\tif (!tasks_execd(spank))\n\t\t\trc = ESPANK_NOT_EXECD;\n\t\telse if (!(task = job_task_info_by_pid (slurmd_job, pid)))\n\t\t\trc = ESPANK_NOEXIST;\n\t\telse\n\t\t\t*p2uint32 = task->gtid;\n\t\tbreak;\n\tcase S_JOB_PID_TO_LOCAL_ID:\n\t\tpid = va_arg(vargs, pid_t);\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\t*p2uint32 = (uint32_t) -1;\n\n\t\tif (!tasks_execd(spank))\n\t\t\trc = ESPANK_NOT_EXECD;\n\t\telse if (!(task = job_task_info_by_pid (slurmd_job, pid)))\n\t\t\trc = ESPANK_NOEXIST;\n\t\telse\n\t\t\t*p2uint32 = task->id;\n\t\tbreak;\n\tcase S_JOB_LOCAL_TO_GLOBAL_ID:\n\t\tuint32 = va_arg(vargs, uint32_t);\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\t*p2uint32 = (uint32_t) -1;\n\n\t\tif (slurmd_job && (uint32 <= slurmd_job->node_tasks) &&\n\t\t    slurmd_job->task && slurmd_job->task[uint32]) {\n\t\t\t*p2uint32 = slurmd_job->task[uint32]->gtid;\n\t\t} else\n\t\t\trc = ESPANK_NOEXIST;\n\t\tbreak;\n\tcase S_JOB_GLOBAL_TO_LOCAL_ID:\n\t\tuint32 = va_arg(vargs, uint32_t);\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\trc = _global_to_local_id (slurmd_job, uint32, p2uint32);\n\t\tbreak;\n\tcase S_JOB_ALLOC_CORES:\n\t\tp2str = va_arg(vargs, char **);\n\t\tif (slurmd_job)\n\t\t\t*p2str = slurmd_job->job_alloc_cores;\n\t\telse\n\t\t\t*p2str = NULL;\n\t\tbreak;\n\tcase S_JOB_ALLOC_MEM:\n\t\tp2uint64 = va_arg(vargs, uint64_t *);\n\t\tif (slurmd_job)\n\t\t\t*p2uint64 = slurmd_job->job_mem;\n\t\telse\n\t\t\t*p2uint64 = 0;\n\t\tbreak;\n\tcase S_STEP_ALLOC_CORES:\n\t\tp2str = va_arg(vargs, char **);\n\t\tif (slurmd_job)\n\t\t\t*p2str = slurmd_job->step_alloc_cores;\n\t\telse\n\t\t\t*p2str = NULL;\n\t\tbreak;\n\tcase S_STEP_ALLOC_MEM:\n\t\tp2uint64 = va_arg(vargs, uint64_t *);\n\t\tif (slurmd_job)\n\t\t\t*p2uint64 = slurmd_job->step_mem;\n\t\telse\n\t\t\t*p2uint64 = 0;\n\t\tbreak;\n\tcase S_SLURM_RESTART_COUNT:\n\t\tp2uint32 = va_arg(vargs, uint32_t *);\n\t\tif (slurmd_job)\n\t\t\t*p2uint32 = slurmd_job->restart_cnt;\n\t\telse\n\t\t\t*p2uint32 = 0;\n\t\tbreak;\n\tcase S_SLURM_VERSION:\n\t\tp2vers = va_arg(vargs, char  **);\n\t\t*p2vers = SLURM_VERSION_STRING;\n\t\tbreak;\n\tcase S_SLURM_VERSION_MAJOR:\n\t\tp2vers = va_arg(vargs, char  **);\n\t\t*p2vers = SLURM_MAJOR;\n\t\tbreak;\n\tcase S_SLURM_VERSION_MINOR:\n\t\tp2vers = va_arg(vargs, char  **);\n\t\t*p2vers = SLURM_MINOR;\n\t\tbreak;\n\tcase S_SLURM_VERSION_MICRO:\n\t\tp2vers = va_arg(vargs, char  **);\n\t\t*p2vers = SLURM_MICRO;\n\t\tbreak;\n\tdefault:\n\t\trc = ESPANK_BAD_ARG;\n\t\tbreak;\n\t}\n\tva_end(vargs);\n\treturn (rc);\n}\n\nspank_err_t spank_env_access_check (spank_t spank)\n{\n\tif ((spank == NULL) || (spank->magic != SPANK_MAGIC))\n\t\treturn (ESPANK_BAD_ARG);\n\tif (spank->stack->type != S_TYPE_REMOTE)\n\t\treturn (ESPANK_NOT_REMOTE);\n\tif (spank->job == NULL)\n\t\treturn (ESPANK_BAD_ARG);\n\treturn (ESPANK_SUCCESS);\n\n}\n\nspank_err_t spank_getenv(spank_t spank, const char *var, char *buf,\n\t\t\t int len)\n{\n\tchar *val;\n\tspank_err_t err = spank_env_access_check (spank);\n\n\tif (err != ESPANK_SUCCESS)\n\t\treturn (err);\n\n\tif (len < 0)\n\t\treturn (ESPANK_BAD_ARG);\n\n\tif (!(val = getenvp(((stepd_step_rec_t *) spank->job)->env, var)))\n\t\treturn (ESPANK_ENV_NOEXIST);\n\n\tif (strlcpy(buf, val, len) >= len)\n\t\treturn (ESPANK_NOSPACE);\n\n\treturn (ESPANK_SUCCESS);\n}\n\nspank_err_t spank_setenv(spank_t spank, const char *var, const char *val,\n\t\t\t int overwrite)\n{\n\tstepd_step_rec_t * job;\n\tspank_err_t err = spank_env_access_check (spank);\n\n\tif (err != ESPANK_SUCCESS)\n\t\treturn (err);\n\n\tif ((var == NULL) || (val == NULL))\n\t\treturn (ESPANK_BAD_ARG);\n\n\tjob = spank->job;\n\n\tif (getenvp(job->env, var) && !overwrite)\n\t\treturn (ESPANK_ENV_EXISTS);\n\n\tif (setenvf(&job->env, var, \"%s\", val) < 0)\n\t\treturn (ESPANK_ERROR);\n\n\treturn (ESPANK_SUCCESS);\n}\n\nspank_err_t spank_unsetenv (spank_t spank, const char *var)\n{\n\tspank_err_t err = spank_env_access_check (spank);\n\n\tif (err != ESPANK_SUCCESS)\n\t\treturn (err);\n\n\tif (var == NULL)\n\t\treturn (ESPANK_BAD_ARG);\n\n\tunsetenvp(((stepd_step_rec_t *) spank->job)->env, var);\n\n\treturn (ESPANK_SUCCESS);\n}\n\n\n/*\n *  Dynamically loaded versions of spank_*_job_env\n */\nconst char *dyn_spank_get_job_env(const char *name)\n{\n\tvoid *h = dlopen(NULL, 0);\n\tchar * (*fn)(const char *n);\n\tchar *rc;\n\n\tfn = dlsym(h, \"spank_get_job_env\");\n\tif (fn == NULL) {\n\t\t(void) dlclose(h);\n\t\treturn NULL;\n\t}\n\n\trc = ((*fn) (name));\n/*\t(void) dlclose(h);\tNOTE: DO NOT CLOSE OR SPANK WILL BREAK */\n\treturn rc;\n}\n\nint dyn_spank_set_job_env(const char *n, const char *v, int overwrite)\n{\n\tvoid *h = dlopen(NULL, 0);\n\tint (*fn)(const char *n, const char *v, int overwrite);\n\tint rc;\n\n\tfn = dlsym(h, \"spank_set_job_env\");\n\tif (fn == NULL) {\n\t\t(void) dlclose(h);\n\t\treturn (-1);\n\t}\n\n\trc = ((*fn) (n, v, overwrite));\n/*\t(void) dlclose(h);\tNOTE: DO NOT CLOSE OR SPANK WILL BREAK */\n\treturn rc;\n}\n\nextern int dyn_spank_unset_job_env(const char *n)\n{\n\tvoid *h = dlopen(NULL, 0);\n\tint (*fn)(const char *n);\n\tint rc;\n\n\tfn = dlsym(h, \"spank_unset_job_env\");\n\tif (fn == NULL) {\n\t\t(void) dlclose(h);\n\t\treturn (-1);\n\t}\n\n\trc = ((*fn) (n));\n/*\t(void) dlclose(h);\tNOTE: DO NOT CLOSE OR SPANK WILL BREAK */\n\treturn rc;\n}\n\nstatic spank_err_t spank_job_control_access_check (spank_t spank)\n{\n\tif ((spank == NULL) || (spank->magic != SPANK_MAGIC))\n\t\treturn (ESPANK_BAD_ARG);\n\n\tif (spank_remote (spank))\n\t\treturn (ESPANK_NOT_LOCAL);\n\n\tif (spank->stack->type == S_TYPE_SLURMD)\n\t\treturn (ESPANK_NOT_AVAIL);\n\n\treturn (ESPANK_SUCCESS);\n}\n\n\nspank_err_t spank_job_control_getenv (spank_t spank, const char *var,\n\t\t\tchar *buf, int len)\n{\n\tconst char *val;\n\tspank_err_t err;\n\n\tif ((err = spank_job_control_access_check (spank)))\n\t\treturn (err);\n\n\tif ((var == NULL) || (buf == NULL) || (len <= 0))\n\t\treturn (ESPANK_BAD_ARG);\n\n\tval = dyn_spank_get_job_env (var);\n\tif (val == NULL)\n\t\treturn (ESPANK_ENV_NOEXIST);\n\n\tif (strlcpy (buf, val, len) >= len)\n\t\treturn (ESPANK_NOSPACE);\n\n\treturn (ESPANK_SUCCESS);\n}\n\nspank_err_t spank_job_control_setenv (spank_t spank, const char *var,\n\t\t\tconst char *val, int overwrite)\n{\n\tspank_err_t err;\n\n\tif ((err = spank_job_control_access_check (spank)))\n\t\treturn (err);\n\n\tif ((var == NULL) || (val == NULL))\n\t\treturn (ESPANK_BAD_ARG);\n\n\tif (dyn_spank_set_job_env (var, val, overwrite) < 0)\n\t\treturn (ESPANK_BAD_ARG);\n\n\treturn (ESPANK_SUCCESS);\n}\n\nspank_err_t spank_job_control_unsetenv (spank_t spank, const char *var)\n{\n\tspank_err_t err;\n\n\tif ((err = spank_job_control_access_check (spank)))\n\t\treturn (err);\n\n\tif (var == NULL)\n\t\treturn (ESPANK_BAD_ARG);\n\n\tif (dyn_spank_unset_job_env (var) < 0)\n\t\treturn (ESPANK_BAD_ARG);\n\n\treturn (ESPANK_SUCCESS);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/src/plugins/switch/nrt/nrt.c": "/*****************************************************************************\\\n *  nrt.c - Library routines for initiating jobs using IBM's NRT (Network\n *          Routing Table)\n *****************************************************************************\n *  Copyright (C) 2004-2007 The Regents of the University of California.\n *  Copyright (C) 2008 Lawrence Livermore National Security.\n *  Copyright (C) 2011-2014 SchedMD LLC.\n *  Original switch/federation plugin written by Jason King <jking@llnl.gov>\n *  Largely re-written for NRT support by Morris Jette <jette@schedmd.com>\n *\n *  This file is part of Slurm, a resource management program.\n *  For details, see <https://slurm.schedmd.com/>.\n *  Please also read the included file: DISCLAIMER.\n *\n *  Slurm is free software; you can redistribute it and/or modify it under\n *  the terms of the GNU General Public License as published by the Free\n *  Software Foundation; either version 2 of the License, or (at your option)\n *  any later version.\n *\n *  In addition, as a special exception, the copyright holders give permission\n *  to link the code of portions of this program with the OpenSSL library under\n *  certain conditions as described in each individual source file, and\n *  distribute linked combinations including the two. You must obey the GNU\n *  General Public License in all respects for all of the code used other than\n *  OpenSSL. If you modify file(s) with this exception, you may extend this\n *  exception to your version of the file(s), but you are not obligated to do\n *  so. If you do not wish to do so, delete this exception statement from your\n *  version.  If you delete this exception statement from all source files in\n *  the program, then also delete it here.\n *\n *  Slurm is distributed in the hope that it will be useful, but WITHOUT ANY\n *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n *  details.\n *\n *  You should have received a copy of the GNU General Public License along\n *  with Slurm; if not, write to the Free Software Foundation, Inc.,\n *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.\n *****************************************************************************\n *  NOTE: The NRT API communicates with IBM's Protocol Network Services Deamon\n *  (PNSD). PNSD logs are written to /tmp/serverlog.\n *\n *  NOTE: To get good POE error message it may be necessary to execute\n *  export LANG=en_US\n *\n *  NOTE: POE core files always written to /tmp\n *\n *  NOTE: POE and PMD initiallly load /usr/lib64/libpermapi.so rather than the\n *  library specified by MP_PRE_RMLIB in /etc/poe.limits. For now we need to\n *  put Slurm's libpermapi.so in /usr/lib64. IBM to address later.\n\\*****************************************************************************/\n\n#include \"config.h\"\n\n#include <assert.h>\n#include <arpa/inet.h>\n#include <dlfcn.h>\n#include <nrt.h>\n#include <pthread.h>\n#include <stdlib.h>\n#include <sys/socket.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n\n#include \"slurm/slurm_errno.h\"\n#include \"src/common/slurm_xlator.h\"\n#include \"src/common/strlcpy.h\"\n#include \"src/common/read_config.h\"\n#include \"src/common/node_conf.h\"\n#include \"src/plugins/switch/nrt/nrt_keys.h\"\n#include \"src/plugins/switch/nrt/slurm_nrt.h\"\n\n/* This plugin may execute on a head node WITHOUT the libnrt.so file.\n * Dynamically load the library only on demand. */\nvoid *nrt_handle = NULL;\nchar *nrt_sym[]  = {\n\t\"nrt_command\",\n\tNULL\n};\ntypedef struct {\n\tint (*nrt_command)(int version, nrt_cmd_type_t cmd_type, void *cmd);\n} nrt_api_t;\nnrt_api_t nrt_api;\n\nstatic int nrt_cmd_wrap(int version, nrt_cmd_type_t cmd_type, void *cmd)\n{\n\tint i, rc;\n\n\tif (!nrt_handle) {\n\t\tvoid **api_pptr = (void **) &nrt_api;\n#ifdef LIBNRT_SO\n\t\tnrt_handle = dlopen(LIBNRT_SO, RTLD_LAZY);\n#endif\n\t\tif (!nrt_handle)\n\t\t\tfatal(\"Can not open libnrt.so\");\n\n\t\tdlerror();\t/* Clear any existing error */\n\t\tfor ( i = 0; nrt_sym[i]; ++i ) {\n\t\t        api_pptr[i] = dlsym(nrt_handle, nrt_sym[i]);\n\t\t        if (!api_pptr[i]) {\n\t\t\t\tfatal(\"Can't find %s in libnrt.so\",\n\t\t\t\t      nrt_sym[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\trc = ((*(nrt_api.nrt_command))(version, cmd_type, cmd));\n\treturn rc;\n}\n\nextern int drain_nodes ( char *nodes, char *reason, uint32_t reason_uid );\n\n/*\n * Definitions local to this module\n */\n#define NRT_NULL_MAGIC  \t0xDEAFDEAF\n#define NRT_NODEINFO_MAGIC\t0xc00cc00a\n#define NRT_JOBINFO_MAGIC\t0xc00cc00b\n\n#define NRT_LIBSTATE_MAGIC\t0xc00cc00c\n#define NRT_HOSTLEN\t\t20\n#define NRT_NODECOUNT\t\t128\n#define NRT_HASHCOUNT\t\t128\n#define NRT_MAX_ADAPTERS (NRT_MAX_ADAPTERS_PER_TYPE * NRT_MAX_ADAPTER_TYPES)\n#define NRT_MAX_PROTO_CNT\t20\n\n/* Use slurm protocol version as a global version number.\n */\n#define NRT_STATE_VERSION      \"PROTOCOL_VERSION\"\n\npthread_mutex_t\t\tglobal_lock = PTHREAD_MUTEX_INITIALIZER;\nextern bool\t\tnrt_need_state_save;\nslurm_nrt_libstate_t *\tnrt_state = NULL;\nmode_t\t\t\tnrt_umask;\n\n/*\n * Data structures specific to switch/nrt\n *\n * We are going to some trouble to keep these defs private so slurm\n * hackers not interested in the interconnect details can just pass around\n * the opaque types.  All use of the data structure internals is local to this\n * module.\n */\n\n/* Notes about job_key:\n * - It must be unique for every job step.\n * - It is a 32-bit quantity.\n * - We might use the bottom 16-bits of job ID an step ID, but that could\n *   result in conflicts for long-lived jobs or job steps.\n */\ntypedef struct slurm_nrt_window {\n\tnrt_window_id_t window_id;\n\twin_state_t state;\n\tnrt_job_key_t job_key;\n} slurm_nrt_window_t;\n\ntypedef struct slurm_nrt_block {\n\tuint32_t rcontext_block_use;\t/* RDMA context blocks used */\n\tnrt_job_key_t job_key;\n} slurm_nrt_block_t;\n\ntypedef struct slurm_nrt_adapter {\n\tchar adapter_name[NRT_MAX_ADAPTER_NAME_LEN];\n\tnrt_adapter_t adapter_type;\n\tnrt_cau_index_t cau_indexes_avail;\n\tnrt_cau_index_t cau_indexes_used;\n\tnrt_imm_send_slot_t immed_slots_avail;\n\tnrt_imm_send_slot_t immed_slots_used;\n\tin_addr_t ipv4_addr;\n\tstruct in6_addr ipv6_addr;\n\tnrt_logical_id_t lid;\n\tnrt_network_id_t network_id;\n\tnrt_port_id_t port_id;\n\tuint64_t rcontext_block_count;\t/* # of RDMA context blocks */\n\tuint64_t rcontext_block_used;\t/* # of RDMA context blocks used */\n\tuint16_t block_count;\n\tslurm_nrt_block_t *block_list;\n\tuint64_t special;\n\tnrt_window_id_t window_count;\n\tslurm_nrt_window_t *window_list;\n} slurm_nrt_adapter_t;\n\nstruct slurm_nrt_nodeinfo {\n\tuint32_t magic;\n\tchar name[NRT_HOSTLEN];\n\tuint32_t adapter_count;\n\tslurm_nrt_adapter_t *adapter_list;\n\tstruct slurm_nrt_nodeinfo *next;\n\tnrt_node_number_t node_number;\n};\n\nstruct slurm_nrt_libstate {\n\tuint32_t magic;\n\tuint32_t node_count;\n\tuint32_t node_max;\n\tslurm_nrt_nodeinfo_t *node_list;\n\tuint32_t hash_max;\n\tslurm_nrt_nodeinfo_t **hash_table;\n\tnrt_job_key_t key_index;\n};\n\nstruct slurm_nrt_jobinfo {\n\tuint32_t magic;\n\t/* version from nrt_version() */\n\t/* adapter from lid in table */\n\t/* uid from getuid() */\n\t/* pid from getpid() */\n\tnrt_job_key_t job_key;\n\tuint8_t bulk_xfer;\t/* flag */\n\tuint32_t bulk_xfer_resources;\n\tuint16_t cau_indexes;\n\tuint16_t immed_slots;\n\tuint8_t ip_v4;\t\t/* flag */\n\tuint8_t user_space;\t/* flag */\n\tuint16_t tables_per_task;\n\tnrt_tableinfo_t *tableinfo;\n\n\thostlist_t nodenames;\n\tuint32_t num_tasks;\n};\n\ntypedef struct {\n\tchar adapter_name[NRT_MAX_ADAPTER_NAME_LEN];\n\tnrt_adapter_t adapter_type;\n} nrt_cache_entry_t;\n\n\ntypedef struct nrt_protocol_info {\n\tchar protocol_name[NRT_MAX_PROTO_NAME_LEN];\n} nrt_protocol_info_t;\n\ntypedef struct nrt_protocol_table {\n\tnrt_protocol_info_t protocol_table[NRT_MAX_PROTO_CNT];\n\tint protocol_table_cnt;\t/* Count of entries in protocol_table */\n} nrt_protocol_table_t;\n\ntypedef struct slurm_nrt_suspend_info {\n\tuint32_t job_key_count;\n\tuint32_t job_key_array_size;\n\tnrt_job_key_t *job_key;\n} slurm_nrt_suspend_info_t;\n\nstatic int lid_cache_size = 0;\nstatic nrt_cache_entry_t lid_cache[NRT_MAX_ADAPTERS];\nstatic bool dynamic_window_err = false;\t/* print error only once */\n\n/* Keep track of local ID so slurmd can determine which switch tables\n * are for that particular node */\nstatic uint64_t my_lpar_id = 0;\nstatic uint64_t my_lid = 0;\nstatic bool     my_lpar_id_set = false;\nstatic uint64_t my_network_id = 0;\nstatic bool     my_network_id_set = false;\n\n/* Local functions */\nstatic char *\t_adapter_type_str(nrt_adapter_t type);\nstatic int\t_add_block_use(slurm_nrt_jobinfo_t *jp,\n\t\t\t       slurm_nrt_adapter_t *adapter);\nstatic int\t_add_immed_use(char *hostname, slurm_nrt_jobinfo_t *jp,\n\t\t\t       slurm_nrt_adapter_t *adapter);\nstatic int\t_allocate_windows_all(slurm_nrt_jobinfo_t *jp, char *hostname,\n\t\t\tuint32_t node_id, nrt_task_id_t task_id,\n\t\t\tnrt_adapter_t adapter_type, int network_id,\n\t\t\tnrt_protocol_table_t *protocol_table, int instances,\n\t\t\tint task_inx);\nstatic int\t_allocate_window_single(char *adapter_name,\n\t\t\tslurm_nrt_jobinfo_t *jp, char *hostname,\n\t\t\tuint32_t node_id, nrt_task_id_t task_id,\n\t\t\tnrt_adapter_t adapter_type, int network_id,\n\t\t\tnrt_protocol_table_t *protocol_table, int instances,\n\t\t\tint task_inx);\nstatic slurm_nrt_libstate_t *_alloc_libstate(void);\nstatic slurm_nrt_nodeinfo_t *_alloc_node(slurm_nrt_libstate_t *lp, char *name);\nstatic int\t_copy_node(slurm_nrt_nodeinfo_t *dest,\n\t\t\t   slurm_nrt_nodeinfo_t *src);\nstatic int\t_fake_unpack_adapters(Buf buf, slurm_nrt_nodeinfo_t *n,\n\t\t\t\t      uint16_t protocol_version);\nstatic int\t_fill_in_adapter_cache(void);\nstatic slurm_nrt_nodeinfo_t *\n\t\t_find_node(slurm_nrt_libstate_t *lp, char *name);\nstatic slurm_nrt_window_t *\n\t\t_find_window(slurm_nrt_adapter_t *adapter, uint16_t window_id);\nstatic slurm_nrt_window_t *_find_free_window(slurm_nrt_adapter_t *adapter);\nstatic slurm_nrt_nodeinfo_t *_find_node(slurm_nrt_libstate_t *lp, char *name);\nstatic bool\t_free_block_use(slurm_nrt_jobinfo_t *jp,\n\t\t\t\tslurm_nrt_adapter_t *adapter);\nstatic void\t_free_libstate(slurm_nrt_libstate_t *lp);\nstatic int\t_get_adapters(slurm_nrt_nodeinfo_t *n);\nstatic int\t_get_my_id(void);\nstatic void\t_hash_add_nodeinfo(slurm_nrt_libstate_t *state,\n\t\t\t\t   slurm_nrt_nodeinfo_t *node);\nstatic int\t_hash_index(char *name);\nstatic void\t_hash_rebuild(slurm_nrt_libstate_t *state);\nstatic void\t_init_adapter_cache(void);\nstatic preemption_state_t _job_preempt_state(nrt_job_key_t job_key);\nstatic int\t_job_step_window_state(slurm_nrt_jobinfo_t *jp,\n\t\t\t\t       hostlist_t hl, win_state_t state);\nstatic int\t_load_min_window_id(char *adapter_name,\n\t\t\t\t    nrt_adapter_t adapter_type);\nstatic nrt_job_key_t _next_key(void);\nstatic int\t_pack_libstate(slurm_nrt_libstate_t *lp, Buf buffer,\n\t\t\t       uint16_t protocol_version);\nstatic void\t_pack_tableinfo(nrt_tableinfo_t *tableinfo, Buf buf,\n\t\t\t\tslurm_nrt_jobinfo_t *jp,\n\t\t\t\tuint16_t protocol_version);\nstatic char *\t_state_str(win_state_t state);\nstatic int\t_unload_window_all_jobs(char *adapter_name,\n\t\t\t\t\tnrt_adapter_t adapter_type,\n\t\t\t\t\tnrt_window_id_t window_id);\nstatic int\t_unpack_libstate(slurm_nrt_libstate_t *lp, Buf buffer);\nstatic int\t_unpack_nodeinfo(slurm_nrt_nodeinfo_t *n, Buf buf,\n\t\t\t\t bool believe_window_status,\n\t\t\t\t uint16_t protocol_version);\nstatic int\t_unpack_tableinfo(nrt_tableinfo_t *tableinfo,\n\t\t\t\t  Buf buf, slurm_nrt_jobinfo_t *jp,\n\t\t\t\t  uint16_t protocol_version);\nstatic int\t_wait_for_all_windows(nrt_tableinfo_t *tableinfo);\nstatic int\t_wait_for_window_unloaded(char *adapter_name,\n\t\t\t\t\t  nrt_adapter_t adapter_type,\n\t\t\t\t\t  nrt_window_id_t window_id,\n\t\t\t\t\t  int retry);\nstatic int\t_wait_job(nrt_job_key_t job_key,preemption_state_t want_state,\n\t\t\t  int max_wait_secs);\nstatic char *\t_win_state_str(win_state_t state);\nstatic int\t_window_state_set(slurm_nrt_jobinfo_t *jp, char *hostname,\n\t\t\t\t  win_state_t state);\n\n/* The lid caching functions were created to avoid unnecessary\n * function calls each time we need to load network tables on a node.\n * _init_cache() simply initializes the cache to save values and\n * needs to be called before any other cache functions are called.\n *\n * Used by: slurmd/slurmstepd\n */\nstatic void\n_init_adapter_cache(void)\n{\n\tlid_cache_size = 0;\n}\n\n/* Use nrt_adapter_resources to cache information about local adapters.\n *\n * Used by: slurmstepd\n */\nstatic int\n_fill_in_adapter_cache(void)\n{\n\tint err, i, j, rc = SLURM_SUCCESS;\n\tnrt_cmd_query_adapter_types_t adapter_types;\n\tunsigned int num_adapter_types;\n\tnrt_adapter_t adapter_type[NRT_MAX_ADAPTER_TYPES];\n\tnrt_cmd_query_adapter_names_t adapter_names;\n\tunsigned int max_windows, num_adapter_names;\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"_fill_in_adapter_cache: begin\");\n\n\tadapter_types.num_adapter_types = &num_adapter_types;\n\tadapter_types.adapter_types = adapter_type;\n\tfor (i = 0; i < 2; i++) {\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_TYPES,\n\t\t\t\t   &adapter_types);\n\t\tif (err != NRT_EAGAIN)\n\t\t\tbreak;\n\t\terror(\"nrt_cmd_wrap(adapter_types): %s\", nrt_err_str(err));\n\t\terror(\"Is pnsd daemon started? Retrying...\");\n\t\t/* Run \"/opt/ibmhpc/pecurrent/ppe.pami/pnsd/pnsd -A\" */\n\t\tsleep(5);\n\t}\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(adapter_types): %s\", nrt_err_str(err));\n\t\treturn SLURM_ERROR;\n\t}\n\n\tfor (i = 0; i < num_adapter_types; i++) {\n\t\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\t\tinfo(\"adapter_type[%d]: %u\", i, adapter_type[i]);\n\n\t\tadapter_names.adapter_type = adapter_type[i];\n\t\tadapter_names.num_adapter_names = &num_adapter_names;\n\t\tadapter_names.max_windows = &max_windows;\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_NAMES,\n\t\t\t\t   &adapter_names);\n\t\tif (err != NRT_SUCCESS) {\n\t\t\terror(\"nrt_cmd_wrap(adapter_names, %u): %s\",\n\t\t\t      adapter_names.adapter_type, nrt_err_str(err));\n\t\t\trc = SLURM_ERROR;\n\t\t\tcontinue;\n\t\t}\n\t\tfor (j = 0; j < num_adapter_names; j++) {\n\t\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\t\tinfo(\"adapter_names[%d]: %s\",\n\t\t\t\t     j, adapter_names.adapter_names[j]);\n\t\t\t}\n\t\t\tlid_cache[lid_cache_size].adapter_type = adapter_names.\n\t\t\t\t\t\t\t\t adapter_type;\n\t\t\tstrlcpy(lid_cache[lid_cache_size].adapter_name,\n\t\t\t\tadapter_names.adapter_names[j],\n\t\t\t\tNRT_MAX_ADAPTER_NAME_LEN);\n\t\t\tlid_cache_size++;\n\t\t}\n\t}\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"_fill_in_adapter_cache: complete: %d\", rc);\n\n\treturn rc;\n}\n\n/* The idea behind keeping the hash table was to avoid a linear\n * search of the node list each time we want to retrieve or\n * modify a node's data.  The _hash_index function translates\n * a node name to an index into the hash table.\n *\n * Used by: slurmctld\n */\nstatic int\n_hash_index(char *name)\n{\n\tint index = 0;\n\tint j;\n\n\txassert(name);\n\n\t/* Multiply each character by its numerical position in the\n\t * name string to add a bit of entropy, because host names such\n\t * as cluster[0001-1000] can cause excessive index collisions.\n\t */\n\tfor (j = 1; *name; name++, j++)\n\t\tindex += (int)*name * j;\n\tindex %= nrt_state->hash_max;\n\n\treturn index;\n}\n\n/* Tries to find a node fast using the hash table\n *\n * Used by: slurmctld\n */\nstatic slurm_nrt_nodeinfo_t *\n_find_node(slurm_nrt_libstate_t *lp, char *name)\n{\n\tint i;\n\tslurm_nrt_nodeinfo_t *n;\n\tstruct node_record *node_ptr;\n\n\txassert(name);\n\txassert(lp);\n\n\tif (lp->node_count == 0)\n\t\treturn NULL;\n\n\tif (lp->hash_table) {\n\t\ti = _hash_index(name);\n\t\tn = lp->hash_table[i];\n\t\twhile (n) {\n\t\t\txassert(n->magic == NRT_NODEINFO_MAGIC);\n\t\t\tif (!xstrncmp(n->name, name, NRT_HOSTLEN))\n\t\t\t\treturn n;\n\t\t\tn = n->next;\n\t\t}\n\t}\n\n\t/* This code is only needed if NodeName and NodeHostName differ */\n\tnode_ptr = find_node_record(name);\n\tif (node_ptr && lp->hash_table) {\n\t\ti = _hash_index(node_ptr->node_hostname);\n\t\tn = lp->hash_table[i];\n\t\twhile (n) {\n\t\t\txassert(n->magic == NRT_NODEINFO_MAGIC);\n\t\t\tif (!xstrncmp(n->name, node_ptr->node_hostname,\n\t\t\t\t      NRT_HOSTLEN))\n\t\t\t\treturn n;\n\t\t\tn = n->next;\n\t\t}\n\t}\n\n\treturn NULL;\n}\n\n/* Add the hash entry for a newly created slurm_nrt_nodeinfo_t\n */\nstatic void\n_hash_add_nodeinfo(slurm_nrt_libstate_t *state, slurm_nrt_nodeinfo_t *node)\n{\n\tint index;\n\n\txassert(state);\n\txassert(state->hash_table);\n\txassert(state->hash_max >= state->node_count);\n\tif (!node->name[0])\n\t\treturn;\n\tindex = _hash_index(node->name);\n\tnode->next = state->hash_table[index];\n\tstate->hash_table[index] = node;\n}\n\n/* Recreates the hash table for the node list.\n *\n * Used by: slurmctld\n */\nstatic void\n_hash_rebuild(slurm_nrt_libstate_t *state)\n{\n\tint i;\n\n\txassert(state);\n\n\tif (state->hash_table)\n\t\txfree(state->hash_table);\n\tif ((state->node_count > state->hash_max) || (state->hash_max == 0))\n\t\tstate->hash_max += NRT_HASHCOUNT;\n\tstate->hash_table = (slurm_nrt_nodeinfo_t **)\n\t\t\t    xmalloc(sizeof(slurm_nrt_nodeinfo_t *) *\n\t\t\t    state->hash_max);\n\tfor (i = 0; i < state->node_count; i++)\n\t\t_hash_add_nodeinfo(state, &(state->node_list[i]));\n}\n\nstatic slurm_nrt_window_t *\n_find_window(slurm_nrt_adapter_t *adapter, uint16_t window_id)\n{\n\tint i;\n\tslurm_nrt_window_t *window;\n\n\tfor (i = 0; i < adapter->window_count; i++) {\n\t\twindow = &adapter->window_list[i];\n\t\tif (window->window_id == window_id)\n\t\t\treturn window;\n\t}\n\n\tdebug3(\"Unable to _find_window %hu on adapter %s\",\n\t       window_id, adapter->adapter_name);\n\treturn (slurm_nrt_window_t *) NULL;\n}\n\n/*\n * For one node, free all of the RDMA blocks and windows belonging to a\n * particular job step (as identified by the job_key).\n */\nstatic void\n_free_resources_by_job(slurm_nrt_jobinfo_t *jp, char *node_name)\n{\n\tslurm_nrt_nodeinfo_t *node;\n\tslurm_nrt_adapter_t *adapter;\n\tslurm_nrt_window_t *window;\n\tint i, j;\n\n\t/* debug3(\"_free_resources_by_job_key(%u, %s)\", jp->job_key, node_name); */\n\tif ((node = _find_node(nrt_state, node_name)) == NULL)\n\t\treturn;\n\n\tif (node->adapter_list == NULL) {\n\t\terror(\"switch/nrt: _free_resources_by_job, \"\n\t\t      \"adapter_list NULL for node %s\", node_name);\n\t\treturn;\n\t}\n\tfor (i = 0; i < node->adapter_count; i++) {\n\t\tadapter = &node->adapter_list[i];\n\n\t\t(void) _free_block_use(jp, adapter);\n\t\tif (adapter->window_list == NULL) {\n\t\t\terror(\"switch/nrt: _free_resources_by_job, \"\n\t\t\t      \"window_list NULL for node %s adapter %s\",\n\t\t\t      node->name, adapter->adapter_name);\n\t\t\tcontinue;\n\t\t}\n\t\t/* We could check here to see if this adapter's name\n\t\t * is in the nrt_jobinfo tablinfo list to avoid the next\n\t\t * loop if the adapter isn't in use by the job step.\n\t\t * However, the added searching and string comparisons\n\t\t * probably aren't worth it, especially since MOST job\n\t\t * steps will use all of the adapters.\n\t\t */\n\t\tfor (j = 0; j < adapter->window_count; j++) {\n\t\t\twindow = &adapter->window_list[j];\n\n\t\t\tif (window->job_key == jp->job_key) {\n\t\t\t\t/* debug3(\"Freeing adapter %s window %d\",\n\t\t\t\t   adapter->name, window->id); */\n\t\t\t\twindow->state = NRT_WIN_AVAILABLE;\n\t\t\t\twindow->job_key = 0;\n\t\t\t\tif (jp->immed_slots >\n\t\t\t\t    adapter->immed_slots_used) {\n\t\t\t\t\terror(\"switch/nrt: immed_slots_used \"\n\t\t\t\t\t      \"underflow\");\n\t\t\t\t\tadapter->immed_slots_used = 0;\n\t\t\t\t} else {\n\t\t\t\t\tadapter->immed_slots_used -=\n\t\t\t\t\t\tjp->immed_slots;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/*\n * Find all of the windows used by this job step and set their\n * status to \"state\".\n *\n * Used by: slurmctld\n */\nstatic int\n_job_step_window_state(slurm_nrt_jobinfo_t *jp, hostlist_t hl,\n\t\t       win_state_t state)\n{\n\thostlist_iterator_t hi;\n\tchar *host;\n\tint err, rc = SLURM_SUCCESS;\n\n\txassert(!hostlist_is_empty(hl));\n\n\tif ((jp == NULL) || (jp->magic == NRT_NULL_MAGIC)) {\n\t\tdebug2(\"(%s: %d: %s) job->switch_job was NULL\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn SLURM_ERROR;\n\t}\n\n\txassert(jp->magic == NRT_JOBINFO_MAGIC);\n\n\tif ((jp == NULL) || (hostlist_is_empty(hl)))\n\t\treturn SLURM_ERROR;\n\n\tif ((jp->tables_per_task == 0) || (jp->tableinfo == NULL) ||\n\t    (jp->tableinfo[0].table_length == 0) || (!jp->user_space))\n\t\treturn SLURM_SUCCESS;\n\n\thi = hostlist_iterator_create(hl);\n\tslurm_mutex_lock(&global_lock);\n\twhile ((host = hostlist_next(hi))) {\n\t\terr = _window_state_set(jp, host, state);\n\t\trc = MAX(rc, err);\n\t\tfree(host);\n\t}\n\tslurm_mutex_unlock(&global_lock);\n\thostlist_iterator_destroy(hi);\n\n\treturn rc;\n}\n\nstatic char *_state_str(win_state_t state)\n{\n\tif (state == NRT_WIN_UNAVAILABLE)\n\t\treturn \"Unavailable\";\n\tif (state == NRT_WIN_INVALID)\n\t\treturn \"Invalid\";\n\tif (state == NRT_WIN_AVAILABLE)\n\t\treturn \"Available\";\n\tif (state == NRT_WIN_RESERVED)\n\t\treturn \"Reserved\";\n\tif (state == NRT_WIN_READY)\n\t\treturn \"Ready\";\n\tif (state == NRT_WIN_RUNNING)\n\t\treturn \"Running\";\n\treturn \"Unknown\";\n}\n\n/* Find the correct NRT structs and set the state\n * of the switch windows for the specified task_id.\n *\n * Used by: slurmctld\n */\nstatic int\n_window_state_set(slurm_nrt_jobinfo_t *jp, char *hostname, win_state_t state)\n{\n\tslurm_nrt_nodeinfo_t *node = NULL;\n\tslurm_nrt_adapter_t *adapter = NULL;\n\tslurm_nrt_window_t *window = NULL;\n\tint i, j;\n\tint rc = SLURM_SUCCESS;\n\tbool adapter_found;\n\tuint16_t win_id = 0;\n\tnrt_job_key_t job_key = jp->job_key;\n\tnrt_table_id_t table_cnt = jp->tables_per_task;\n\tnrt_tableinfo_t *tableinfo = jp->tableinfo;\n\tnrt_task_id_t task_id;\n\n\txassert(tableinfo);\n\txassert(hostname);\n\n\tnode = _find_node(nrt_state, hostname);\n\tif (node == NULL) {\n\t\terror(\"Failed to find node in node_list: %s\", hostname);\n\t\treturn SLURM_ERROR;\n\t}\n\tif (node->adapter_list == NULL) {\n\t\terror(\"Found node, but adapter_list is NULL\");\n\t\treturn SLURM_ERROR;\n\t}\n\n\tfor (i = 0; i < table_cnt; i++) {\n\t\tif (tableinfo[i].table == NULL) {\n\t\t\terror(\"tableinfo[%d].table is NULL\", i);\n\t\t\trc = SLURM_ERROR;\n\t\t\tcontinue;\n\t\t}\n\n\t\tadapter_found = false;\n\t\t/* Find the adapter that matches the one in tableinfo */\n\t\tfor (j = 0; j < node->adapter_count; j++) {\n\t\t\tadapter = &node->adapter_list[j];\n\t\t\tif (xstrcasecmp(adapter->adapter_name,\n\t\t\t\t\ttableinfo[i].adapter_name))\n\t\t\t\tcontinue;\n\t\t\tfor (task_id = 0; task_id < tableinfo[i].table_length;\n\t\t\t     task_id++) {\n\t\t\t\tif (adapter->adapter_type == NRT_IB) {\n\t\t\t\t\tnrt_ib_task_info_t *ib_tbl_ptr;\n\t\t\t\t\tib_tbl_ptr  = tableinfo[i].table;\n\t\t\t\t\tib_tbl_ptr += task_id;\n\t\t\t\t\tif (ib_tbl_ptr == NULL) {\n\t\t\t\t\t\terror(\"tableinfo[%d].table[%d]\"\n\t\t\t\t\t\t      \" is NULL\", i, task_id);\n\t\t\t\t\t\trc = SLURM_ERROR;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (adapter->lid ==\n\t\t\t\t\t    ib_tbl_ptr->base_lid) {\n\t\t\t\t\t\tadapter_found = true;\n\t\t\t\t\t\twin_id = ib_tbl_ptr->win_id;\n\t\t\t\t\t\tdebug3(\"Setting status %s \"\n\t\t\t\t\t\t       \"adapter %s lid %hu \"\n\t\t\t\t\t\t       \"window %hu for task %d\",\n\t\t\t\t\t\t       _state_str(state),\n\t\t\t\t\t\t       adapter->adapter_name,\n\t\t\t\t\t\t       ib_tbl_ptr->base_lid,\n\t\t\t\t\t\t       ib_tbl_ptr->win_id,\n\t\t\t\t\t\t       task_id);\n\t\t\t\t\t}\n\t\t\t\t} else if (adapter->adapter_type == NRT_HFI) {\n\t\t\t\t\tnrt_hfi_task_info_t *hfi_tbl_ptr;\n\t\t\t\t\thfi_tbl_ptr  = tableinfo[i].table;\n\t\t\t\t\thfi_tbl_ptr += task_id;\n\t\t\t\t\tif (hfi_tbl_ptr == NULL) {\n\t\t\t\t\t\terror(\"tableinfo[%d].table[%d]\"\n\t\t\t\t\t\t      \" is NULL\", i, task_id);\n\t\t\t\t\t\trc = SLURM_ERROR;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (adapter->lid == hfi_tbl_ptr->lid) {\n\t\t\t\t\t\tadapter_found = true;\n\t\t\t\t\t\twin_id = hfi_tbl_ptr->win_id;\n\t\t\t\t\t\tdebug3(\"Setting status %s \"\n\t\t\t\t\t\t       \"adapter %s lid %hu \"\n\t\t\t\t\t\t       \"window %hu for task %d\",\n\t\t\t\t\t\t       _state_str(state),\n\t\t\t\t\t\t       adapter->adapter_name,\n\t\t\t\t\t\t       hfi_tbl_ptr->lid,\n\t\t\t\t\t\t       hfi_tbl_ptr->win_id,\n\t\t\t\t\t\t       task_id);\n\t\t\t\t\t}\n\t\t\t\t}\n#if NRT_VERSION < 1300\n\t\t\t\telse if ((adapter->adapter_type==NRT_HPCE) ||\n\t\t\t\t\t   (adapter->adapter_type==NRT_KMUX)) {\n\t\t\t\t\tnrt_hpce_task_info_t *hpce_tbl_ptr;\n\t\t\t\t\thpce_tbl_ptr  = tableinfo[i].table;\n\t\t\t\t\thpce_tbl_ptr += task_id;\n\t\t\t\t\tif (hpce_tbl_ptr == NULL) {\n\t\t\t\t\t\terror(\"tableinfo[%d].table[%d]\"\n\t\t\t\t\t\t      \" is NULL\", i, task_id);\n\t\t\t\t\t\trc = SLURM_ERROR;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif (adapter->network_id ==\n\t\t\t\t\t    tableinfo[i].network_id) {\n\t\t\t\t\t\tadapter_found = true;\n\t\t\t\t\t\twin_id = hpce_tbl_ptr->win_id;\n\t\t\t\t\t\tdebug3(\"Setting status %s \"\n\t\t\t\t\t\t       \"adapter %s window %hu \"\n\t\t\t\t\t\t       \"for task %d\",\n\t\t\t\t\t\t       _state_str(state),\n\t\t\t\t\t\t       adapter->adapter_name,\n\t\t\t\t\t\t       hpce_tbl_ptr->win_id,\n\t\t\t\t\t\t       task_id);\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t\telse {\n\t\t\t\t\terror(\"switch/nrt: _window_state_set:\"\n\t\t\t\t\t      \" Missing support for adapter \"\n\t\t\t\t\t      \"type %s\",\n\t\t\t\t\t      _adapter_type_str(adapter->\n\t\t\t\t\t\t\t\tadapter_type));\n\t\t\t\t}\n\n\t\t\t\twindow = _find_window(adapter, win_id);\n\t\t\t\tif (window) {\n\t\t\t\t\twindow->state = state;\n\t\t\t\t\tif (state == NRT_WIN_UNAVAILABLE) {\n\t\t\t\t\t\twindow->job_key = job_key;\n\t\t\t\t\t\tadapter->immed_slots_used +=\n\t\t\t\t\t\t\tjp->immed_slots;\n\t\t\t\t\t} else\n\t\t\t\t\t\twindow->job_key = 0;\n\t\t\t\t}\n\t\t\t}  /* for each task */\n\t\t\tif (adapter_found) {\n\t\t\t\t_add_block_use(jp, adapter);\n\t\t\t} else {\n\t\t\t\terror(\"switch/nrt: Did not find adapter %s of \"\n\t\t\t\t      \"type %s with lid %hu \",\n\t\t\t\t      adapter->adapter_name,\n\t\t\t\t      _adapter_type_str(adapter->adapter_type),\n\t\t\t\t      adapter->lid);\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}  /* for each adapter */\n\t}  /* for each table */\n\n\treturn rc;\n}\n\n/* If the node is already in the node list then simply return\n * a pointer to it, otherwise dynamically allocate memory to the\n * node list if necessary.\n *\n * Used by: slurmctld\n */\nstatic slurm_nrt_nodeinfo_t *\n_alloc_node(slurm_nrt_libstate_t *lp, char *name)\n{\n\tslurm_nrt_nodeinfo_t *n = NULL;\n\tint new_bufsize;\n\tbool need_hash_rebuild = false;\n\n\txassert(lp);\n\n\tif (name != NULL) {\n\t\tn = _find_node(lp, name);\n\t\tif (n != NULL)\n\t\t\treturn n;\n\t}\n\n\tnrt_need_state_save = true;\n\n\tif (lp->node_count >= lp->node_max) {\n\t\tlp->node_max += NRT_NODECOUNT;\n\t\tnew_bufsize = lp->node_max * sizeof(slurm_nrt_nodeinfo_t);\n\t\tif (lp->node_list == NULL) {\n\t\t\tlp->node_list = (slurm_nrt_nodeinfo_t *)\n\t\t\t\t\txmalloc(new_bufsize);\n\t\t} else {\n\t\t\tlp->node_list = (slurm_nrt_nodeinfo_t *)\n\t\t\t\t\txrealloc(lp->node_list, new_bufsize);\n\t\t}\n\t\tneed_hash_rebuild = true;\n\t}\n\tif (lp->node_list == NULL) {\n\t\tslurm_seterrno(ENOMEM);\n\t\treturn NULL;\n\t}\n\n\tn = lp->node_list + (lp->node_count++);\n\tn->magic = NRT_NODEINFO_MAGIC;\n\tn->name[0] = '\\0';\n\tn->adapter_list = (slurm_nrt_adapter_t *)\n\t\t\t  xmalloc(NRT_MAXADAPTERS *\n\t\t\t  sizeof(struct slurm_nrt_adapter));\n\n\tif (name != NULL) {\n\t\tstrlcpy(n->name, name, NRT_HOSTLEN);\n\t\tif (need_hash_rebuild || (lp->node_count > lp->hash_max))\n\t\t\t_hash_rebuild(lp);\n\t\telse\n\t\t\t_hash_add_nodeinfo(lp, n);\n\t}\n\n\treturn n;\n}\n\nstatic slurm_nrt_window_t *\n_find_free_window(slurm_nrt_adapter_t *adapter)\n{\n\tstatic int last_inx = 0;\n\tslurm_nrt_window_t *window;\n\tint i;\n\n\tfor (i = 0; i < adapter->window_count; i++, last_inx++) {\n\t\tif (last_inx >= adapter->window_count)\n\t\t\tlast_inx = 0;\n\t\twindow = &adapter->window_list[last_inx];\n\t\tif (window->state == NRT_WIN_AVAILABLE)\n\t\t\treturn window;\n\t}\n\n\tslurm_seterrno(ESLURM_INTERCONNECT_BUSY);\n\treturn (slurm_nrt_window_t *) NULL;\n}\n\nstatic void _table_alloc(nrt_tableinfo_t *tableinfo, int table_inx,\n\t\t\t nrt_adapter_t adapter_type)\n{\n\tint table_size;\n\n\tif (tableinfo[table_inx].table)\n\t\treturn;\n\tif (adapter_type == NRT_IB)\n\t\ttable_size = sizeof(nrt_ib_task_info_t);\n\telse if (adapter_type == NRT_HFI)\n\t\ttable_size = sizeof(nrt_hfi_task_info_t);\n\telse if (adapter_type == NRT_IPONLY)\n\t\ttable_size = sizeof(nrt_ip_task_info_t);\n#if NRT_VERSION < 1300\n\telse if ((adapter_type == NRT_HPCE) || (adapter_type == NRT_KMUX))\n\t\ttable_size = sizeof(nrt_hpce_task_info_t);\n#endif\n\telse {\n\t\terror(\"Missing support for adapter type %s\",\n\t\t      _adapter_type_str(adapter_type));\n\t\treturn;\n\t}\n\ttableinfo[table_inx].table = xmalloc(table_size *\n\t\t\t\t\t     tableinfo[table_inx].\n\t\t\t\t\t     table_length);\n\treturn;\n}\n\n/* Track RDMA or CAU resources allocated to a job on each adapter */\nstatic int\n_add_block_use(slurm_nrt_jobinfo_t *jp, slurm_nrt_adapter_t *adapter)\n{\n\tint i;\n\tslurm_nrt_block_t *block_ptr, *free_block;\n\tnrt_cau_index_t new_cau_count = 0;\n\tuint64_t new_rcontext_blocks  = 0;\n\n\t/*\n\t * Validate sufficient CAU resources\n\t *\n\t * From Bill LePera, IBM, July 14, 2012:\n\t * CAU indexes on HFI are allocated on a job-context basis.  That means\n\t * the CAU indexes are shared among tables with the same job key and\n\t * context ID.  In this scenario you would set the total number of CAU\n\t * indexes desired in the num_cau_indexs field for all the tables with\n\t * the same job key and context ID, but PNSD will only allocate that\n\t * number one time for all the tables.  For example, If job key 1234,\n\t * context ID 0 is striped across four networks, it will have four\n\t * NRTs.  If that job requests 2 CAU indexes, the num_cau_indexes field\n\t * in each NRT should be set to 2.  However, PNSD will only allocate 2\n\t * indexes for that job.\n\t */\n\tif (jp->cau_indexes) {\n\t\tif (adapter->cau_indexes_avail < jp->cau_indexes) {\n\t\t\tinfo(\"switch/nrt: Insufficient cau_indexes resources \"\n\t\t\t     \"on adapter %s (%hu < %hu)\",\n\t\t\t     adapter->adapter_name, adapter->cau_indexes_avail,\n\t\t\t     jp->cau_indexes);\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t\tnew_cau_count = adapter->cau_indexes_used + jp->cau_indexes;\n\t\tif (adapter->cau_indexes_avail < new_cau_count) {\n\t\t\tinfo(\"switch/nrt: Insufficient cau_indexes resources \"\n\t\t\t     \"available on adapter %s (%hu < %hu)\",\n\t\t\t     adapter->adapter_name, adapter->cau_indexes_avail,\n\t\t\t     new_cau_count);\n\t\t\tslurm_seterrno(ESLURM_INTERCONNECT_BUSY);\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t}\n\n\t/* Validate sufficient RDMA resources */\n\tif (jp->bulk_xfer && jp->bulk_xfer_resources) {\n\t\tif (adapter->rcontext_block_count < jp->bulk_xfer_resources) {\n\t\t\tinfo(\"switch/nrt: Insufficient bulk_xfer resources on \"\n\t\t\t     \"adapter %s (%\"PRIu64\" < %u)\",\n\t\t\t     adapter->adapter_name,\n\t\t\t     adapter->rcontext_block_count,\n\t\t\t     jp->bulk_xfer_resources);\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t\tnew_rcontext_blocks = adapter->rcontext_block_used +\n\t\t\t\t      jp->bulk_xfer_resources;\n\t\tif (adapter->rcontext_block_count < new_rcontext_blocks) {\n\t\t\tinfo(\"switch/nrt: Insufficient bulk_xfer resources \"\n\t\t\t     \"available on adapter %s (%\"PRIu64\" < %\"PRIu64\")\",\n\t\t\t     adapter->adapter_name,\n\t\t\t     adapter->rcontext_block_count,\n\t\t\t     new_rcontext_blocks);\n\t\t\tslurm_seterrno(ESLURM_INTERCONNECT_BUSY);\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t} else {\n\t\tjp->bulk_xfer_resources = 0;\t/* match jp->bulk_xfer */\n\t}\n\n\tif ((new_cau_count == 0) && (new_rcontext_blocks == 0))\n\t\treturn SLURM_SUCCESS;\t/* No work */\n\n\t/* Add job_key to our table and update the resource used information */\n\tfree_block = NULL;\n\tblock_ptr = adapter->block_list;\n\tfor (i = 0; i < adapter->block_count; i++, block_ptr++) {\n\t\tif (block_ptr->job_key == jp->job_key) {\n\t\t\tfree_block = block_ptr;\n\t\t\tbreak;\n\t\t} else if ((block_ptr->job_key == 0) && (free_block == 0)) {\n\t\t\tfree_block = block_ptr;\n\t\t}\n\t}\n\tif (free_block == NULL) {\n\t\txrealloc(adapter->block_list,\n\t\t\t sizeof(slurm_nrt_block_t) *\n\t\t\t\t (adapter->block_count + 8));\n\t\tfree_block = adapter->block_list + adapter->block_count;\n\t\tadapter->block_count += 8;\n\t}\n\n\tfree_block->job_key = jp->job_key;\n\tfree_block->rcontext_block_use = jp->bulk_xfer_resources;\n\tif (new_cau_count)\n\t\tadapter->cau_indexes_used    = new_cau_count;\n\tif (new_rcontext_blocks)\n\t\tadapter->rcontext_block_used = new_rcontext_blocks;\n\n#if 0\n\tblock_ptr = adapter->block_list;\n\tfor (i = 0; i < adapter->block_count; i++, block_ptr++) {\n\t\tif (block_ptr->job_key) {\n\t\t\tinfo(\"adapter:%s block:%d job_key:%u blocks:%u\",\n\t\t\t     adapter->adapter_name, i, block_ptr->job_key,\n\t\t\t     free_block->rcontext_block_use);\n\t\t}\n\t}\n#endif\n\treturn SLURM_SUCCESS;\n}\n\nstatic int _add_immed_use(char *hostname, slurm_nrt_jobinfo_t *jp,\n\t\t\t  slurm_nrt_adapter_t *adapter)\n{\n\tif (adapter->immed_slots_avail < jp->immed_slots) {\n\t\tinfo(\"switch/nrt: Insufficient immediate slots on \"\n\t\t     \"node %s adapter %s\",\n\t\t     hostname, adapter->adapter_name);\n\t\treturn SLURM_ERROR;\n\t}\n\n\tadapter->immed_slots_used += jp->immed_slots;\n\tif (adapter->immed_slots_avail < adapter->immed_slots_used) {\n\t\tinfo(\"switch/nrt: Insufficient immediate slots available on \"\n\t\t     \"node %s adapter %s\",\n\t\t     hostname, adapter->adapter_name);\n\t\tadapter->immed_slots_used -= jp->immed_slots;\n\t\tslurm_seterrno(ESLURM_INTERCONNECT_BUSY);\n\t\treturn SLURM_ERROR;\n\t}\n\n\treturn SLURM_SUCCESS;\n}\n\nstatic bool\n_free_block_use(slurm_nrt_jobinfo_t *jp, slurm_nrt_adapter_t *adapter)\n{\n\tslurm_nrt_block_t *block_ptr;\n\tbool found_job = false;\n\tint i;\n\n\tif ((jp->bulk_xfer && jp->bulk_xfer_resources) || jp->cau_indexes) {\n\t\tblock_ptr = adapter->block_list;\n\t\tfor (i = 0; i < adapter->block_count; i++, block_ptr++) {\n\t\t\tif (block_ptr->job_key != jp->job_key)\n\t\t\t\tcontinue;\n\n\t\t\tif (jp->cau_indexes > adapter->cau_indexes_used) {\n\t\t\t\terror(\"switch/nrt: cau_indexes_used underflow\");\n\t\t\t\tadapter->cau_indexes_used = 0;\n\t\t\t} else {\n\t\t\t\tadapter->cau_indexes_used -= jp->cau_indexes;\n\t\t\t}\n\n\t\t\tif (block_ptr->rcontext_block_use >\n\t\t\t    adapter->rcontext_block_used) {\n\t\t\t\terror(\"switch/nrt: rcontext_block_used \"\n\t\t\t\t      \"underflow\");\n\t\t\t\tadapter->rcontext_block_used = 0;\n\t\t\t} else {\n\t\t\t\tadapter->rcontext_block_used -=\n\t\t\t\t\tblock_ptr->rcontext_block_use;\n\t\t\t}\n\t\t\tblock_ptr->job_key = 0;\n\t\t\tblock_ptr->rcontext_block_use = 0;\n\t\t\tfound_job = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn found_job;\n}\n\n/* For a given process, fill out an nrt_creator_per_task_input_t\n * struct (an array of these makes up the network table loaded\n * for each job).  Assign adapters, lids and switch windows to\n * each task in a job.\n *\n * Used by: slurmctld\n */\nstatic int\n_allocate_windows_all(slurm_nrt_jobinfo_t *jp, char *hostname,\n\t\t      uint32_t node_id, nrt_task_id_t task_id,\n\t\t      nrt_adapter_t adapter_type, int network_id,\n\t\t      nrt_protocol_table_t *protocol_table, int instances,\n\t\t      int task_inx)\n{\n\tnrt_tableinfo_t *tableinfo = jp->tableinfo;\n\tnrt_job_key_t job_key = jp->job_key;\n\tbool ip_v4 = jp->ip_v4;\n\tbool user_space = jp->user_space;\n\tnrt_node_number_t node_number;\n\tslurm_nrt_nodeinfo_t *node;\n\tslurm_nrt_adapter_t *adapter;\n\tslurm_nrt_window_t *window;\n\tnrt_context_id_t context_id;\n\tnrt_table_id_t table_id;\n\tint i, j, table_inx;\n\n\txassert(tableinfo);\n\txassert(hostname);\n\n\tdebug2(\"in _allocate_windows_all\");\n\tnode = _find_node(nrt_state, hostname);\n\tif (node == NULL) {\n\t\terror(\"Failed to find node in node_list: %s\", hostname);\n\t\treturn SLURM_ERROR;\n\t}\n\n\t/* From Bill LePera, IBM, 4/18/2012:\n\t * The node_number field is normally set to the 32-bit IPv4 address\n\t * of the local node's host name. */\n\tnode_number = node->node_number;\n\n\t/* Reserve a window on each adapter for this task */\n\ttable_inx = -1;\n\tfor (context_id = 0; context_id < protocol_table->protocol_table_cnt;\n\t     context_id++) {\n\t\ttable_id = -1;\n\t\tfor (i = 0; i < node->adapter_count; i++) {\n\t\t\tadapter = &node->adapter_list[i];\n\t\t\tif ((adapter_type != NRT_MAX_ADAPTER_TYPES) &&\n\t\t\t    (adapter->adapter_type != adapter_type))\n\t\t\t\tcontinue;\n//\t\t\tif ((network_id >= 0) &&\n//\t\t\t    (adapter->network_id != network_id))\n//\t\t\t\tcontinue;\n\t\t\tif (user_space &&\n\t\t\t    (adapter->adapter_type == NRT_IPONLY))\n\t\t\t\tcontinue;\n\t\t\tif ((context_id == 0) && (task_inx == 0) &&\n\t\t\t    (_add_block_use(jp, adapter))) {\n\t\t\t\tgoto alloc_fail;\n\t\t\t}\n\t\t\tfor (j = 0; j < instances; j++) {\n\t\t\t\ttable_id++;\n\t\t\t\ttable_inx++;\n\t\t\t\tif (table_inx >= jp->tables_per_task) {\n\t\t\t\t\terror(\"switch/nrt: adapter count too \"\n\t\t\t\t\t      \"high, host=%s\", hostname);\n\t\t\t\t\tgoto alloc_fail;\n\t\t\t\t}\n\t\t\t\tif (user_space) {\n\t\t\t\t\twindow = _find_free_window(adapter);\n\t\t\t\t\tif (window == NULL) {\n\t\t\t\t\t\tinfo(\"switch/nrt: \"\n\t\t\t\t\t\t      \"No free windows on \"\n\t\t\t\t\t\t     \"node %s adapter %s\",\n\t\t\t\t\t\t     node->name,\n\t\t\t\t\t\t     adapter->adapter_name);\n\t\t\t\t\t\tgoto alloc_fail;\n\t\t\t\t\t}\n\t\t\t\t\tif (_add_immed_use(hostname, jp,\n\t\t\t\t\t\t\t   adapter))\n\t\t\t\t\t\tgoto alloc_fail;\n\t\t\t\t\twindow->state = NRT_WIN_UNAVAILABLE;\n\t\t\t\t\twindow->job_key = job_key;\n\t\t\t\t}\n\n\t\t\t\tif (!user_space) {\n\t\t\t\t\tnrt_ip_task_info_t *ip_table;\n\t\t\t\t\t_table_alloc(tableinfo, table_inx,\n\t\t\t\t\t\t     NRT_IPONLY);\n\t\t\t\t\tip_table = (nrt_ip_task_info_t *)\n\t\t\t\t\t\t   tableinfo[table_inx].table;\n\t\t\t\t\tip_table += task_id;\n\t\t\t\t\tip_table->node_number  = node_number;\n\t\t\t\t\tip_table->task_id      = task_id;\n\t\t\t\t\tif (ip_v4) {\n\t\t\t\t\t\tmemcpy(&ip_table->ip.ipv4_addr,\n\t\t\t\t\t\t       &adapter->ipv4_addr,\n\t\t\t\t\t\t       sizeof(in_addr_t));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tmemcpy(&ip_table->ip.ipv6_addr,\n\t\t\t\t\t\t       &adapter->ipv6_addr,\n\t\t\t\t\t\t       sizeof(struct in6_addr));\n\t\t\t\t\t}\n\t\t\t\t} else if (adapter->adapter_type == NRT_IB) {\n\t\t\t\t\tnrt_ib_task_info_t *ib_table;\n\t\t\t\t\t_table_alloc(tableinfo, table_inx,\n\t\t\t\t\t\t     adapter->adapter_type);\n\t\t\t\t\tib_table = (nrt_ib_task_info_t *)\n\t\t\t\t\t\t   tableinfo[table_inx].table;\n\t\t\t\t\tib_table += task_id;\n\t\t\t\t\tstrlcpy(ib_table->device_name,\n\t\t\t\t\t\tadapter->adapter_name,\n\t\t\t\t\t\tNRT_MAX_DEVICENAME_SIZE);\n\t\t\t\t\tib_table->base_lid = adapter->lid;\n\t\t\t\t\tib_table->port_id  = 1;\n\t\t\t\t\tib_table->lmc      = 0;\n\t\t\t\t\tib_table->node_number = node_number;\n\t\t\t\t\tib_table->task_id  = task_id;\n\t\t\t\t\tib_table->win_id   = window->window_id;\n\t\t\t\t} else if (adapter->adapter_type == NRT_HFI) {\n\t\t\t\t\tnrt_hfi_task_info_t *hfi_table;\n\t\t\t\t\t_table_alloc(tableinfo, table_inx,\n\t\t\t\t\t\t     adapter->adapter_type);\n\t\t\t\t\thfi_table = (nrt_hfi_task_info_t *)\n\t\t\t\t\t\t    tableinfo[table_inx].table;\n\t\t\t\t\thfi_table += task_id;\n\t\t\t\t\thfi_table->lid = adapter->lid;\n\t\t\t\t\thfi_table->lpar_id = adapter->special;\n\t\t\t\t\thfi_table->task_id = task_id;\n\t\t\t\t\thfi_table->win_id = window->window_id;\n\t\t\t\t}\n#if NRT_VERSION < 1300\n\t\t\t\telse if ((adapter->adapter_type == NRT_HPCE)||\n\t\t\t\t\t   (adapter->adapter_type == NRT_KMUX)){\n\t\t\t\t\tnrt_hpce_task_info_t *hpce_table;\n\t\t\t\t\t_table_alloc(tableinfo, table_inx,\n\t\t\t\t\t\t     adapter->adapter_type);\n\t\t\t\t\thpce_table = (nrt_hpce_task_info_t *)\n\t\t\t\t\t\t     tableinfo[table_inx].table;\n\t\t\t\t\thpce_table += task_id;\n\t\t\t\t\thpce_table->node_number = node_number;\n\t\t\t\t\thpce_table->task_id = task_id;\n\t\t\t\t\thpce_table->win_id = window->window_id;\n\t\t\t\t}\n#endif\n\t\t\t\telse {\n\t\t\t\t\terror(\"switch/nrt: Missing support \"\n\t\t\t\t\t      \"for adapter type %s\",\n\t\t\t\t\t      _adapter_type_str(adapter->\n\t\t\t\t\t\t\t\tadapter_type));\n\t\t\t\t\tgoto alloc_fail;\n\t\t\t\t}\n\n\t\t\t\tstrlcpy(tableinfo[table_inx].adapter_name,\n\t\t\t\t\tadapter->adapter_name,\n\t\t\t\t\tNRT_MAX_ADAPTER_NAME_LEN);\n\t\t\t\ttableinfo[table_inx].adapter_type = adapter->\n\t\t\t\t\t\t\t\t    adapter_type;\n\t\t\t\ttableinfo[table_inx].network_id = adapter->\n\t\t\t\t\t\t\t\t  network_id;\n\t\t\t\tstrlcpy(tableinfo[table_inx].protocol_name,\n\t\t\t\t\tprotocol_table->\n\t\t\t\t\tprotocol_table[context_id].\n\t\t\t\t\tprotocol_name,\n\t\t\t\t\tNRT_MAX_PROTO_NAME_LEN);\n\t\t\t\ttableinfo[table_inx].context_id = context_id;\n\t\t\t\ttableinfo[table_inx].instance   = j + 1;\n\t\t\t\ttableinfo[table_inx].table_id   = table_id;\n\t\t\t}  /* for each table */\n\t\t}  /* for each context */\n\t}  /* for each adapter */\n\n\tif (++table_inx < jp->tables_per_task) {\n\t\t/* This node has too few adapters of this type */\n\t\terror(\"switch/nrt: adapter count too low, host=%s\", hostname);\n\t\tdrain_nodes(hostname, \"Too few switch adapters\", 0);\n\t\tgoto alloc_fail;\n\t}\n\n\treturn SLURM_SUCCESS;\n\nalloc_fail:\n\t/* Unable to allocate all necessary resources.\n\t * Free what has been allocated so far. */\n\t_free_resources_by_job(jp, hostname);\n\treturn SLURM_ERROR;\n}\n\n\n/* For a given process, fill out an nrt_creator_per_task_input_t\n * struct (an array of these makes up the network table loaded\n * for each job).  Assign a single adapter, lid and switch window to\n * a task in a job.\n *\n * Used by: slurmctld\n */\nstatic int\n_allocate_window_single(char *adapter_name, slurm_nrt_jobinfo_t *jp,\n\t\t\tchar *hostname, uint32_t node_id,\n\t\t\tnrt_task_id_t task_id, nrt_adapter_t adapter_type,\n\t\t\tint network_id, nrt_protocol_table_t *protocol_table,\n\t\t        int instances, int task_inx)\n{\n\tnrt_tableinfo_t *tableinfo = jp->tableinfo;\n\tnrt_job_key_t job_key = jp->job_key;\n\tbool ip_v4 = jp->ip_v4;\n\tbool user_space = jp->user_space;\n\tnrt_node_number_t node_number;\n\tslurm_nrt_nodeinfo_t *node;\n\tslurm_nrt_adapter_t *adapter = NULL;\n\tslurm_nrt_window_t *window;\n\tint i, table_inx;\n\tnrt_context_id_t context_id;\n\tnrt_table_id_t table_id;\n\n\txassert(tableinfo);\n\txassert(hostname);\n\n\tnode = _find_node(nrt_state, hostname);\n\tif (node == NULL) {\n\t\terror(\"switch/nrt: Failed to find node in node_list: %s\",\n\t\t      hostname);\n\t\treturn SLURM_ERROR;\n\t}\n\tif (!adapter_name)\t/* Fix CLANG false positive */\n\t\treturn SLURM_ERROR;\n\n\t/* From Bill LePera, IBM, 4/18/2012:\n\t * The node_number field is normally set to the 32-bit IPv4 address\n\t * of the local node's host name. */\n\tnode_number = node->node_number;\n\n\t/* find the adapter */\n\tfor (i = 0; i < node->adapter_count; i++) {\n\t\tdebug2(\"adapter %s at index %d\",\n\t\t       node->adapter_list[i].adapter_name, i);\n\t\tif (adapter_name) {\n\t\t\tif (!xstrcasecmp(node->adapter_list[i].adapter_name,\n\t\t\t\t\t adapter_name)) {\n\t\t\t\tadapter = &node->adapter_list[i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tif ((adapter_type != NRT_MAX_ADAPTER_TYPES) &&\n\t\t    (node->adapter_list[i].adapter_type == adapter_type)) {\n\t\t\tadapter = &node->adapter_list[i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (adapter == NULL) {\n\t\tinfo(\"switch/nrt: Failed to find adapter %s of type %s on \"\n\t\t     \"node %s\",\n\t\t     adapter_name, _adapter_type_str(adapter_type), hostname);\n\t\treturn SLURM_ERROR;\n\t}\n\n\ttable_inx = -1;\n\tfor (context_id = 0; context_id < protocol_table->protocol_table_cnt;\n\t     context_id++) {\n\t\tif ((context_id == 0) && (task_inx == 0) &&\n\t\t    (_add_block_use(jp, adapter))) {\n\t\t\tgoto alloc_fail;\n\t\t}\n\t\tfor (table_id = 0; table_id < instances; table_id++) {\n\t\t\ttable_inx++;\n\t\t\tif (user_space) {\n\t\t\t\t/* Reserve a window on the adapter for task */\n\t\t\t\twindow = _find_free_window(adapter);\n\t\t\t\tif (window == NULL) {\n\t\t\t\t\tinfo(\"switch/nrt: No free windows \"\n\t\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t\t     node->name,\n\t\t\t\t\t     adapter->adapter_name);\n\t\t\t\t\tgoto alloc_fail;\n\t\t\t\t}\n\t\t\t\tif (_add_immed_use(hostname, jp, adapter))\n\t\t\t\t\tgoto alloc_fail;\n\t\t\t\twindow->state = NRT_WIN_UNAVAILABLE;\n\t\t\t\twindow->job_key = job_key;\n\t\t\t}\n\n\t\t\tif (!user_space) {\n\t\t\t\tnrt_ip_task_info_t *ip_table;\n\t\t\t\t_table_alloc(tableinfo, table_inx, NRT_IPONLY);\n\t\t\t\tip_table = (nrt_ip_task_info_t *)\n\t\t\t\t\t   tableinfo[table_inx].table;\n\t\t\t\tip_table += task_id;\n\t\t\t\tip_table->node_number  = node_number;\n\t\t\t\tip_table->task_id      = task_id;\n\t\t\t\tif (ip_v4) {\n\t\t\t\t\tmemcpy(&ip_table->ip.ipv4_addr,\n\t\t\t\t\t       &adapter->ipv4_addr,\n\t\t\t\t\t       sizeof(in_addr_t));\n\t\t\t\t} else {\n\t\t\t\t\tmemcpy(&ip_table->ip.ipv6_addr,\n\t\t\t\t\t       &adapter->ipv6_addr,\n\t\t\t\t\t       sizeof(struct in6_addr));\n\t\t\t\t}\n\t\t\t} else if (adapter_type == NRT_IB) {\n\t\t\t\tnrt_ib_task_info_t *ib_table;\n\t\t\t\t_table_alloc(tableinfo, table_inx,\n\t\t\t\t\t     adapter_type);\n\t\t\t\tib_table = (nrt_ib_task_info_t *)\n\t\t\t\t\t   tableinfo[table_inx].table;\n\t\t\t\tib_table += task_id;\n\t\t\t\tstrlcpy(ib_table->device_name, adapter_name,\n\t\t\t\t\tNRT_MAX_DEVICENAME_SIZE);\n\t\t\t\tib_table->base_lid = adapter->lid;\n\t\t\t\tib_table->port_id  = 1;\n\t\t\t\tib_table->lmc      = 0;\n\t\t\t\tib_table->node_number = node_number;\n\t\t\t\tib_table->task_id  = task_id;\n\t\t\t\tib_table->win_id   = window->window_id;\n\t\t\t} else if (adapter_type == NRT_HFI) {\n\t\t\t\tnrt_hfi_task_info_t *hfi_table;\n\t\t\t\t_table_alloc(tableinfo, table_inx,\n\t\t\t\t\t     adapter_type);\n\t\t\t\thfi_table = (nrt_hfi_task_info_t *)\n\t\t\t\t\t    tableinfo[table_inx].table;\n\t\t\t\thfi_table += task_id;\n\t\t\t\thfi_table->lid = adapter->lid;\n\t\t\t\thfi_table->lpar_id = adapter->special;\n\t\t\t\thfi_table->task_id = task_id;\n\t\t\t\thfi_table->win_id = window->window_id;\n\t\t\t}\n#if NRT_VERSION < 1300\n\t\t\telse if ((adapter_type == NRT_HPCE) ||\n\t\t\t\t   (adapter_type == NRT_KMUX)) {\n\t\t\t\tnrt_hpce_task_info_t *hpce_table;\n\t\t\t\t_table_alloc(tableinfo, table_inx,\n\t\t\t\t\t     adapter_type);\n\t\t\t\thpce_table = (nrt_hpce_task_info_t *)\n\t\t\t\t\t     tableinfo[table_inx].table;\n\t\t\t\thpce_table += task_id;\n\t\t\t\thpce_table->task_id = task_id;\n\t\t\t\thpce_table->win_id = window->window_id;\n\t\t\t}\n#endif\n\t\t\telse {\n\t\t\t\terror(\"Missing support for adapter type %s\",\n\t\t\t\t      _adapter_type_str(adapter_type));\n\t\t\t\tgoto alloc_fail;\n\t\t\t}\n\n\t\t\tstrlcpy(tableinfo[table_inx].adapter_name, adapter_name,\n\t\t\t\tNRT_MAX_ADAPTER_NAME_LEN);\n\t\t\ttableinfo[table_inx].adapter_type = adapter->\n\t\t\t\t\t\t\t    adapter_type;\n\t\t\ttableinfo[table_inx].network_id = adapter->network_id;\n\t\t\tstrlcpy(tableinfo[table_inx].protocol_name,\n\t\t\t\tprotocol_table->protocol_table[context_id].\n\t\t\t\tprotocol_name,\n\t\t\t\tNRT_MAX_PROTO_NAME_LEN);\n\t\t\ttableinfo[table_inx].context_id = context_id;\n\t\t\ttableinfo[table_inx].instance   = table_id + 1;\n\t\t\ttableinfo[table_inx].table_id   = table_id;\n\t\t}  /* for each table */\n\t}  /* for each context */\n\n\treturn SLURM_SUCCESS;\n\nalloc_fail:\n\t/* Unable to allocate all necessary resources.\n\t * Free what has been allocated so far. */\n\t_free_resources_by_job(jp, hostname);\n\treturn SLURM_ERROR;\n}\n\nstatic char *\n_win_state_str(win_state_t state)\n{\n\tif (state == NRT_WIN_UNAVAILABLE)\n\t\treturn \"Unavailable\";\n\telse if (state == NRT_WIN_INVALID)\n\t\treturn \"Invalid\";\n\telse if (state == NRT_WIN_AVAILABLE)\n\t\treturn \"Available\";\n\telse if (state == NRT_WIN_RESERVED)\n\t\treturn \"Reserved\";\n\telse if (state == NRT_WIN_READY)\n\t\treturn \"Ready\";\n\telse if (state == NRT_WIN_RUNNING)\n\t\treturn \"Running\";\n\telse {\n\t\tstatic char buf[16];\n\t\tsnprintf(buf, sizeof(buf), \"%d\", state);\n\t\treturn buf;\n\t}\n}\n\nstatic char *\n_adapter_type_str(nrt_adapter_t type)\n{\n\tstatic char buf[10];\n\n\tswitch (type) {\n\tcase NRT_IB:\n\t\treturn \"IB\";\n\tcase NRT_HFI:\n\t\treturn \"HFI\";\n\tcase NRT_IPONLY:\n\t\treturn \"IP_ONLY\";\n#if NRT_VERSION < 1300\n\tcase NRT_HPCE:\n\t\treturn \"HPC_Ethernet\";\n\tcase NRT_KMUX:\n\t\treturn \"Kernel_Emulated_HPCE\";\n#endif\n\tdefault:\n\t\tsnprintf(buf, sizeof(buf), \"%d\", type);\n\t\treturn buf;\n\t}\n\n\treturn NULL;\t/* Never used */\n}\n\nstatic char *\n_port_status_str(nrt_port_status_t status)\n{\n\tif (status == 0)\n\t\treturn \"Down\";\n\telse if (status == 1)\n\t\treturn \"Up\";\n\telse if (status == 2)\n\t\treturn \"Unconfig\";\n\telse {\n\t\tstatic char buf[16];\n\t\tsnprintf(buf, sizeof(buf), \"%d\", status);\n\t\treturn buf;\n\t}\n}\n\n/* Used by: slurmd */\nstatic void\n_print_adapter_info(nrt_adapter_info_t *adapter_info)\n{\n\tchar addr_v4_str[128], addr_v6_str[128];\n\tint i;\n\n\tif (!adapter_info) {\n\t\terror(\"_print_adapter_info with NULL adapter_info\");\n\t\treturn;\n\t}\n\n\tinfo(\"--Begin Adapter Info--\");\n\tinfo(\"  adapter_name: %s\", adapter_info->adapter_name);\n\tinfo(\"  adapter_type: %s\",\n\t     _adapter_type_str(adapter_info->adapter_type));\n\tinfo(\"  cau_indexes_avail: %hu\", adapter_info->cau_indexes_avail);\n\tinfo(\"  immed_slots_avail: %hu\", adapter_info->immed_slots_avail);\n\tinet_ntop(AF_INET, &adapter_info->node_number,\n\t\t  addr_v4_str, sizeof(addr_v4_str));\n\tinfo(\"  node_number: %s\", addr_v4_str);\n\tinfo(\"  num_ports: %hu\", adapter_info->num_ports);\n\tinfo(\"  rcontext_block_count: %\"PRIu64\"\",\n\t     adapter_info->rcontext_block_count);\n\tinfo(\"  window_count: %hu\", adapter_info->window_count);\n\tfor (i = 0; i < adapter_info->num_ports; i++) {\n\t\tinet_ntop(AF_INET,\n\t\t\t  &adapter_info->port[i].ipv4_addr,\n\t\t\t  addr_v4_str, sizeof(addr_v4_str));\n\t\tinet_ntop(AF_INET6,\n\t\t\t  &adapter_info->port[i].ipv6_addr,\n\t\t\t  addr_v6_str, sizeof(addr_v6_str));\n\t\tinfo(\"    port_id:%hu status:%s lid:%u \"\n\t\t     \"network_id:%lu special:%lu \"\n\t\t     \"ipv4_addr:%s ipv6_addr:%s/%hu\",\n\t\t     adapter_info->port[i].port_id,\n\t\t     _port_status_str(adapter_info->port[i].status),\n\t\t     adapter_info->port[i].lid,\n\t\t     adapter_info->port[i].network_id,\n\t\t     adapter_info->port[i].special,\n\t\t     addr_v4_str, addr_v6_str,\n\t\t     adapter_info->port[i].ipv6_prefix_len);\n\t}\n#if 0\n\t/* This always seems to count up from 0 to window_count-1 */\n\tfor (i = 0; i < adapter_info->window_count; i++)\n\t\tinfo(\"    window_id: %u\", adapter_info->window_list[i]);\n#endif\n\tinfo(\"--End Adapter Info--\");\n}\n\n/* Used by: slurmd */\nstatic void\n_print_adapter_status(nrt_cmd_status_adapter_t *status_adapter)\n{\n\tint i;\n\tnrt_window_id_t window_cnt;\n\tnrt_status_t *status = *(status_adapter->status_array);\n\tchar window_str[128];\n\thostset_t hs;\n\n\ths = hostset_create(\"\");\n\tinfo(\"--Begin Adapter Status--\");\n\tinfo(\"  adapter_name: %s\", status_adapter->adapter_name);\n\tinfo(\"  adapter_type: %s\",\n\t     _adapter_type_str(status_adapter->adapter_type));\n\twindow_cnt = *(status_adapter->window_count);\n\tinfo(\"  window_count: %hu\", window_cnt);\n\tinfo(\"  --------\");\n\tfor (i = 0; i < window_cnt; i++) {\n\t\tif ((status[i].state == NRT_WIN_AVAILABLE) &&\n\t\t    (i >= NRT_DEBUG_CNT)) {\n\t\t\tsnprintf(window_str, sizeof(window_str), \"%d\",\n\t\t\t\t status[i].window_id);\n\t\t\thostset_insert(hs, window_str);\n\t\t\tcontinue;\n\t\t}\n\t\tinfo(\"  window_id: %hu\", status[i].window_id);\n\t\tinfo(\"  state: %s\", _win_state_str(status[i].state));\n\t\tif (status[i].state >= NRT_WIN_RESERVED) {\n\t\t\tinfo(\"  bulk_xfer: %hu\", status[i].bulk_transfer);\n\t\t\tinfo(\"  client_pid: %u\",\n\t\t\t     (uint32_t)status[i].client_pid);\n\t\t\tinfo(\"  rcontext_blocks: %u\",\n\t\t\t     status[i].rcontext_blocks);\n\t\t\tinfo(\"  uid: %u\", (uint32_t) status[i].uid);\n\t\t}\n\t\tinfo(\"  --------\");\n\t}\n\tif (hostset_count(hs) > 0) {\n\t\thostset_ranged_string(hs, sizeof(window_str), window_str);\n\t\tinfo(\"  suppress data for available windows %s\", window_str);\n\t\tinfo(\"  --------\");\n\t}\n\tinfo(\"--End Adapter Status--\");\n\thostset_destroy(hs);\n}\n\n/* Used by: slurmd, slurmctld */\nstatic void\n_print_nodeinfo(slurm_nrt_nodeinfo_t *n)\n{\n\tint i, j;\n\tslurm_nrt_adapter_t *a;\n\tslurm_nrt_window_t *w;\n\tchar addr_str[128];\n\tchar window_str[128];\n\thostset_t hs;\n\n\txassert(n);\n\txassert(n->magic == NRT_NODEINFO_MAGIC);\n\n\tinfo(\"--Begin Node Info--\");\n\tinfo(\"  node: %s\", n->name);\n\tinet_ntop(AF_INET, &n->node_number, addr_str,sizeof(addr_str));\n\tinfo(\"  node_number: %s\", addr_str);\n\tinfo(\"  adapter_count: %u\", n->adapter_count);\n\tfor (i = 0; i < n->adapter_count; i++) {\n\t\ta = n->adapter_list + i;\n\t\tinfo(\"  adapter_name: %s\", a->adapter_name);\n\t\tinfo(\"    adapter_type: %s\",\n\t\t     _adapter_type_str(a->adapter_type));\n\t\tinfo(\"    cau_indexes_avail: %hu\", a->cau_indexes_avail);\n\t\tif (a->cau_indexes_used) {\n\t\t\t/* This information is only available in Power7-IH\n\t\t\t * and only in slurmctld's data structure */\n\t\t\tinfo(\"    cau_indexes_used:  %hu\",a->cau_indexes_used);\n\t\t}\n\t\tinfo(\"    immed_slots_avail: %hu\", a->immed_slots_avail);\n\t\tif (a->immed_slots_used) {\n\t\t\t/* This information is only available in Power7-IH\n\t\t\t * and only in slurmctld's data structure */\n\t\t\tinfo(\"    immed_slots_used:  %hu\",a->immed_slots_used);\n\t\t}\n\t\tinet_ntop(AF_INET, &a->ipv4_addr, addr_str, sizeof(addr_str));\n\t\tinfo(\"    ipv4_addr: %s\", addr_str);\n\t\tinet_ntop(AF_INET6, &a->ipv6_addr, addr_str, sizeof(addr_str));\n\t\tinfo(\"    ipv6_addr: %s\", addr_str);\n\t\tinfo(\"    lid: %u\", a->lid);\n\t\tinfo(\"    network_id: %lu\", a->network_id);\n\n\t\tinfo(\"    port_id: %hu\", a->port_id);\n\t\tinfo(\"    rcontext_block_count: %\"PRIu64\"\",\n\t\t     a->rcontext_block_count);\n\t\tinfo(\"    rcontext_block_used:  %\"PRIu64\"\",\n\t\t     a->rcontext_block_used);\n\t\tinfo(\"    special: %lu\", a->special);\n\n\t\tinfo(\"    window_count: %hu\", a->window_count);\n\t\ths = hostset_create(\"\");\n\t\tw = a->window_list;\n\t\tfor (j = 0; j < a->window_count; j++) {\n\t\t\tif ((w[j].state == NRT_WIN_AVAILABLE) &&\n\t\t\t    (j >= NRT_DEBUG_CNT)) {\n\t\t\t\tsnprintf(window_str, sizeof(window_str), \"%d\",\n\t\t\t\t\t w[j].window_id);\n\t\t\t\thostset_insert(hs, window_str);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tinfo(\"      window:%hu state:%s job_key:%u\",\n\t\t\t     w[j].window_id, _win_state_str(w[j].state),\n\t\t\t     w[j].job_key);\n\t\t}\n\t\tif (hostset_count(hs) > 0) {\n\t\t\thostset_ranged_string(hs, sizeof(window_str),\n\t\t\t\t\t      window_str);\n\t\t\tinfo(\"      suppress data for available windows %s\",\n\t\t\t     window_str);\n\t\t\tinfo(\"      -------- \");\n\t\t}\n\t\thostset_destroy(hs);\n\n\t\tinfo(\"    block_count: %hu\", a->block_count);\n\t\tfor (j = 0; j < a->block_count; j++) {\n\t\t\tif (a->block_list[j].job_key) {\n\t\t\t\tinfo(\"      job_key[%d]: %u\",\n\t\t\t\t     j, a->block_list[j].job_key);\n\t\t\t}\n\t\t}\n\t}\n\tinfo(\"--End Node Info--\");\n}\n\n/* Used by: slurmctld */\nstatic void\n_print_libstate(const slurm_nrt_libstate_t *l)\n{\n\tint i;\n\n\txassert(l);\n\txassert(l->magic == NRT_LIBSTATE_MAGIC);\n\n\tinfo(\"--Begin libstate--\");\n\tinfo(\"  node_count = %u\", l->node_count);\n\tinfo(\"  node_max = %u\", l->node_max);\n\tinfo(\"  hash_max = %u\", l->hash_max);\n\tinfo(\"  key_index = %u\", l->key_index);\n\tfor (i = 0; i < l->node_count; i++) {\n\t\t_print_nodeinfo(&l->node_list[i]);\n\t}\n\tinfo(\"--End libstate--\");\n}\n/* Used by: all */\nstatic void\n_print_table(void *table, int size, nrt_adapter_t adapter_type, bool ip_v4)\n{\n\tchar addr_str[128];\n\tint i;\n\n\txassert(table);\n\txassert(size > 0);\n\n\tinfo(\"--Begin NRT table--\");\n\tfor (i = 0; i < size; i++) {\n\t\tif (adapter_type == NRT_IB) {\n\t\t\tnrt_ib_task_info_t *ib_tbl_ptr;\n\t\t\tib_tbl_ptr = table;\n\t\t\tib_tbl_ptr += i;\n\t\t\tinfo(\"  task_id: %u\", ib_tbl_ptr->task_id);\n\t\t\tinfo(\"  win_id: %hu\", ib_tbl_ptr->win_id);\n\t\t\tinet_ntop(AF_INET, &ib_tbl_ptr->node_number, addr_str,\n\t\t\t\t  sizeof(addr_str));\n\t\t\tinfo(\"  node_number: %s\", addr_str);\n/*\t\t\tinfo(\"  node_number: %u\", ib_tbl_ptr->node_number); */\n\t\t\tinfo(\"  device_name: %s\", ib_tbl_ptr->device_name);\n\t\t\tinfo(\"  base_lid: %u\", ib_tbl_ptr->base_lid);\n\t\t\tinfo(\"  port_id: %hu\", ib_tbl_ptr->port_id);\n\t\t\tinfo(\"  lmc: %hu\", ib_tbl_ptr->lmc);\n\t\t\tinfo(\"  port_status: %hu\", ib_tbl_ptr->port_status);\n\t\t} else if (adapter_type == NRT_HFI) {\n\t\t\tnrt_hfi_task_info_t *hfi_tbl_ptr;\n\t\t\thfi_tbl_ptr = table;\n\t\t\thfi_tbl_ptr += i;\n\t\t\tinfo(\"  task_id: %u\", hfi_tbl_ptr->task_id);\n\t\t\tinfo(\"  lpar_id: %u\", hfi_tbl_ptr->lpar_id);\n\t\t\tinfo(\"  lid: %u\", hfi_tbl_ptr->lid);\n\t\t\tinfo(\"  win_id: %hu\", hfi_tbl_ptr->win_id);\n\t\t}\n#if NRT_VERSION < 1300\n\t\telse if ((adapter_type == NRT_HPCE) ||\n\t\t           (adapter_type == NRT_KMUX)) {\n\t\t\tnrt_hpce_task_info_t *hpce_tbl_ptr;\n\t\t\thpce_tbl_ptr = table;\n\t\t\thpce_tbl_ptr += i;\n\t\t\tinfo(\"  task_id: %u\", hpce_tbl_ptr->task_id);\n\t\t\tinfo(\"  win_id: %hu\", hpce_tbl_ptr->win_id);\n\t\t\tinet_ntop(AF_INET, &hpce_tbl_ptr->node_number,\n\t\t\t\t  addr_str, sizeof(addr_str));\n\t\t\tinfo(\"  node_number: %s\", addr_str);\n/*\t\t\tinfo(\"  node_number: %u\", hpce_tbl_ptr->node_number); */\n\t\t\tinfo(\"  device_name: %s\", hpce_tbl_ptr->device_name);\n\t\t}\n#endif\n\t\telse if (adapter_type == NRT_IPONLY) {\n\t\t\tnrt_ip_task_info_t *ip_tbl_ptr;\n\t\t\tchar addr_str[128];\n\t\t\tip_tbl_ptr = table;\n\t\t\tip_tbl_ptr += i;\n\t\t\tinfo(\"  task_id: %u\", ip_tbl_ptr->task_id);\n\t\t\tinet_ntop(AF_INET, &ip_tbl_ptr->node_number, addr_str,\n\t\t\t\t  sizeof(addr_str));\n\t\t\tinfo(\"  node_number: %s\", addr_str);\n/*\t\t\tinfo(\"  node_number: %u\", ip_tbl_ptr->node_number); */\n\t\t\tif (ip_v4) {\n\t\t\t\tinet_ntop(AF_INET, &ip_tbl_ptr->ip.ipv4_addr,\n\t\t\t\t\t  addr_str, sizeof(addr_str));\n\t\t\t\tinfo(\"  ipv4_addr: %s\", addr_str);\n\t\t\t} else {\n\t\t\t\tinet_ntop(AF_INET6, &ip_tbl_ptr->ip.ipv6_addr,\n\t\t\t\t\t  addr_str, sizeof(addr_str));\n\t\t\t\tinfo(\"  ipv6_addr: %s\", addr_str);\n\t\t\t}\n\t\t} else {\n\t\t\terror(\"Unsupported adapter_type: %s\",\n\t\t\t      _adapter_type_str(adapter_type));\n\t\t}\n\t\tinfo(\"  ------\");\n\t}\n\tinfo(\"--End NRT table--\");\n}\n\n/* Used by: slurmd, slurmctld */\nstatic void\n_print_jobinfo(slurm_nrt_jobinfo_t *j)\n{\n\tint i;\n\tchar buf[128];\n\tnrt_adapter_t adapter_type;\n\n\tif ((j == NULL) || (j->magic == NRT_NULL_MAGIC)) {\n\t\tdebug2(\"(%s: %d: %s) job->switch_job was NULL\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn;\n\t}\n\n\txassert(j->magic == NRT_JOBINFO_MAGIC);\n\n\tinfo(\"--Begin Jobinfo--\");\n\tinfo(\"  job_key: %u\", j->job_key);\n\tinfo(\"  bulk_xfer: %hu\", j->bulk_xfer);\n\tinfo(\"  bulk_xfer_resources: %u\", j->bulk_xfer_resources);\n\tinfo(\"  cau_indexes: %hu\", j->cau_indexes);\n\tinfo(\"  immed_slots: %hu\", j->immed_slots);\n\tinfo(\"  ip_v4: %hu\", j->ip_v4);\n\tinfo(\"  user_space: %hu\", j->user_space);\n\tinfo(\"  tables_per_task: %hu\", j->tables_per_task);\n\tif (j->nodenames)\n\t\thostlist_ranged_string(j->nodenames, sizeof(buf), buf);\n\telse\n\t\tstrcpy(buf, \"(NULL)\");\n\tinfo(\"  nodenames: %s (slurmctld internal use only)\", buf);\n\tinfo(\"  num_tasks: %d\", j->num_tasks);\n\tfor (i = 0; i < j->tables_per_task; i++) {\n\t\tinfo(\"--Header NRT table--\");\n\t\tinfo(\"  adapter_name: %s\", j->tableinfo[i].adapter_name);\n\t\tinfo(\"  adapter_type: %s\",\n\t\t     _adapter_type_str(j->tableinfo[i].adapter_type));\n\t\tinfo(\"  context_id: %u\", j->tableinfo[i].context_id);\n\t\tinfo(\"  instance: %u\", j->tableinfo[i].instance);\n\t\tinfo(\"  network_id: %lu\", j->tableinfo[i].network_id);\n\t\tinfo(\"  protocol_name: %s\", j->tableinfo[i].protocol_name);\n\t\tinfo(\"  table_id: %u\", j->tableinfo[i].table_id);\n\t\tif (j->user_space)\n\t\t\tadapter_type = j->tableinfo[i].adapter_type;\n\t\telse\n\t\t\tadapter_type = NRT_IPONLY;\n\t\t_print_table(j->tableinfo[i].table,\n\t\t\t     j->tableinfo[i].table_length, adapter_type,\n\t\t\t     j->ip_v4);\n\t}\n\tinfo(\"--End Jobinfo--\");\n}\n\nstatic void\n_print_load_table(nrt_cmd_load_table_t *load_table)\n{\n\tnrt_table_info_t *table_info = load_table->table_info;\n\tnrt_adapter_t adapter_type;\n\n\tinfo(\"--- Begin load table ---\");\n\tinfo(\"  num_tasks: %u\", table_info->num_tasks);\n\tinfo(\"  job_key: %u\", table_info->job_key);\n\tinfo(\"  uid: %u\", (uint32_t)table_info->uid);\n\tinfo(\"  pid: %u\", (uint32_t)table_info->pid);\n\tinfo(\"  network_id: %lu\", table_info->network_id);\n\tinfo(\"  adapter_type: %s\",_adapter_type_str(table_info->adapter_type));\n\tinfo(\"  is_user_space: %d\", (int)table_info->is_user_space);\n\tinfo(\"  is_ipv4: %hu\", (int)table_info->is_ipv4);\n\tinfo(\"  context_id: %u\", table_info->context_id);\n\tinfo(\"  table_id: %u\", table_info->table_id);\n\tinfo(\"  job_name: %s\", table_info->job_name);\n\tinfo(\"  protocol_name: %s\", table_info->protocol_name);\n\tinfo(\"  use_bulk_transfer: %hu\", (int)table_info->use_bulk_transfer);\n\tinfo(\"  bulk_transfer_resources: %u\",\n\t     table_info->bulk_transfer_resources);\n\tinfo(\"  immed_send_slots_per_win: %u\",\n\t     table_info->immed_send_slots_per_win);\n\tinfo(\"  num_cau_indexes: %u\", table_info->num_cau_indexes);\n\tif (table_info->is_user_space)\n\t\tadapter_type = table_info->adapter_type;\n\telse\n\t\tadapter_type = NRT_IPONLY;\n\t_print_table(load_table->per_task_input, table_info->num_tasks,\n\t\t     adapter_type, table_info->is_ipv4);\n\tinfo(\"--- End load table ---\");\n}\n\nstatic slurm_nrt_libstate_t *\n_alloc_libstate(void)\n{\n\tslurm_nrt_libstate_t *tmp;\n\n\ttmp = (slurm_nrt_libstate_t *) xmalloc(sizeof(slurm_nrt_libstate_t));\n\ttmp->magic = NRT_LIBSTATE_MAGIC;\n\ttmp->node_count = 0;\n\ttmp->node_max = 0;\n\ttmp->node_list = NULL;\n\ttmp->hash_max = 0;\n\ttmp->hash_table = NULL;\n\t/* Start key from random point, old key values are cached,\n\t * which seems to prevent re-use for a while */\n\ttmp->key_index = (nrt_job_key_t) time(NULL);\n\n\treturn tmp;\n}\n\n/* Allocate and initialize memory for the persistent libstate.\n *\n * Used by: slurmctld\n */\nextern int\nnrt_init(void)\n{\n\tslurm_nrt_libstate_t *tmp;\n\n\ttmp = _alloc_libstate();\n\tslurm_mutex_lock(&global_lock);\n\txassert(!nrt_state);\n\tnrt_state = tmp;\n\tslurm_mutex_unlock(&global_lock);\n\n\treturn SLURM_SUCCESS;\n}\n\nextern int\nnrt_slurmctld_init(void)\n{\n\t/* No op */\n\treturn SLURM_SUCCESS;\n}\n\nextern int\nnrt_slurmd_init(void)\n{\n\t/*\n\t * This is a work-around for the nrt_* functions calling umask(0)\n\t */\n\tnrt_umask = umask(0077);\n\tumask(nrt_umask);\n\n\treturn SLURM_SUCCESS;\n}\n\nextern int\nnrt_slurmd_step_init(void)\n{\n\t/*\n\t * This is a work-around for the nrt_* functions calling umask(0)\n\t */\n\tnrt_umask = umask(0077);\n\tumask(nrt_umask);\n\n\t_init_adapter_cache();\n\t_fill_in_adapter_cache();\n\n\treturn SLURM_SUCCESS;\n}\n\n/* Used by: slurmd, slurmctld */\nextern int\nnrt_alloc_jobinfo(slurm_nrt_jobinfo_t **j)\n{\n\tslurm_nrt_jobinfo_t *new;\n\n\txassert(j != NULL);\n\tnew = (slurm_nrt_jobinfo_t *) xmalloc(sizeof(slurm_nrt_jobinfo_t));\n\tnew->magic = NRT_JOBINFO_MAGIC;\n\tnew->job_key = (nrt_job_key_t) -1;\n\t*j = new;\n\n\treturn 0;\n}\n\n/* Used by: slurmd, slurmctld */\nextern int\nnrt_alloc_nodeinfo(slurm_nrt_nodeinfo_t **n)\n{\n\tslurm_nrt_nodeinfo_t *new;\n\n\txassert(n);\n\n\tnew = (slurm_nrt_nodeinfo_t *) xmalloc(sizeof(slurm_nrt_nodeinfo_t));\n\tnew->adapter_list = (slurm_nrt_adapter_t *)\n\t\t\t    xmalloc(sizeof(slurm_nrt_adapter_t) *\n\t\t\t    NRT_MAX_ADAPTER_TYPES * NRT_MAX_ADAPTERS_PER_TYPE);\n\tnew->magic = NRT_NODEINFO_MAGIC;\n\tnew->adapter_count = 0;\n\tnew->next = NULL;\n\n\t*n = new;\n\n\treturn 0;\n}\n\nstatic int _get_my_id(void)\n{\n\tint err, i, j, k, rc = SLURM_SUCCESS;\n\tnrt_cmd_query_adapter_types_t adapter_types;\n\tunsigned int num_adapter_types;\n\tnrt_adapter_t adapter_type[NRT_MAX_ADAPTER_TYPES];\n\tnrt_cmd_query_adapter_names_t adapter_names;\n\tunsigned int max_windows, num_adapter_names;\n\tnrt_cmd_query_adapter_info_t query_adapter_info;\n\tnrt_adapter_info_t adapter_info;\n\tnrt_status_t *status_array = NULL;\n\n\tadapter_types.num_adapter_types = &num_adapter_types;\n\tadapter_types.adapter_types = adapter_type;\n\tadapter_info.window_list = NULL;\n\tfor (i = 0; i < 2; i++) {\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_TYPES,\n\t\t\t\t   &adapter_types);\n\t\tif (err != NRT_EAGAIN)\n\t\t\tbreak;\n\t\tusleep(1000);\n\t}\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(adapter_types): %s\", nrt_err_str(err));\n\t\treturn SLURM_ERROR;\n\t}\n\n\tfor (i = 0; i < num_adapter_types; i++) {\n\t\tadapter_names.adapter_type = adapter_type[i];\n\t\tadapter_names.num_adapter_names = &num_adapter_names;\n\t\tadapter_names.max_windows = &max_windows;\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_NAMES,\n\t\t\t\t  &adapter_names);\n\t\tif (err != NRT_SUCCESS) {\n\t\t\terror(\"nrt_cmd_wrap(adapter_names, %s): %s\",\n\t\t\t      _adapter_type_str(adapter_names.adapter_type),\n\t\t\t      nrt_err_str(err));\n\t\t\trc = SLURM_ERROR;\n\t\t\tcontinue;\n\t\t}\n\t\tfor (j = 0; j < num_adapter_names; j++) {\n\t\t\tif (my_network_id_set && my_lpar_id_set)\n\t\t\t\tbreak;\n\t\t\tif (my_network_id_set &&\n\t\t\t    (adapter_names.adapter_type != NRT_HFI))\n\t\t\t\tcontinue;\n\t\t\tquery_adapter_info.adapter_name = adapter_names.\n\t\t\t\t\t\t\t  adapter_names[j];\n\t\t\tquery_adapter_info.adapter_type = adapter_names.\n\t\t\t\t\t\t\t  adapter_type;\n\t\t\tquery_adapter_info.adapter_info = &adapter_info;\n\t\t\tadapter_info.window_list = xmalloc(max_windows *\n\t\t\t\t\t\t   sizeof(nrt_window_id_t));\n\t\t\terr = nrt_cmd_wrap(NRT_VERSION,\n\t\t\t\t\t   NRT_CMD_QUERY_ADAPTER_INFO,\n\t\t\t\t\t   &query_adapter_info);\n\t\t\tif (err != NRT_SUCCESS) {\n\t\t\t\terror(\"nrt_cmd_wrap(adapter_into, %s, %s): %s\",\n\t\t\t\t      query_adapter_info.adapter_name,\n\t\t\t\t      _adapter_type_str(query_adapter_info.\n\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t      nrt_err_str(err));\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (!my_network_id_set &&\n\t\t\t    (adapter_info.node_number != 0)) {\n\t\t\t\tmy_network_id  = adapter_info.node_number;\n\t\t\t\tmy_network_id_set = true;\n\t\t\t}\n\t\t\tif (my_lpar_id_set ||\n\t\t\t    (adapter_names.adapter_type != NRT_HFI))\n\t\t\t\tcontinue;\n\t\t\tfor (k = 0; k < adapter_info.num_ports; k++) {\n\t\t\t\tif (adapter_info.port[k].status != 1)\n\t\t\t\t\tcontinue;\n\t\t\t\tmy_lpar_id = adapter_info.port[k].special;\n\t\t\t\tmy_lid = adapter_info.port[k].lid;\n\t\t\t\tmy_lpar_id_set = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\txfree(adapter_info.window_list);\n\t}\n\tif (status_array)\n\t\tfree(status_array);\n\n\treturn rc;\n}\n\n/* Load the minimum usable window ID on a given adapater.\n *\n * NOTES: Bill LePera, IBM: Out of 256 windows on each HFI device, the first\n * 4 are reserved for the HFI device driver's use. Next are the dynamic windows\n * (default 32), followed by the windows available to be scheduled by PNSD\n * and the job schedulers. This is why the output of nrt_status shows the\n * first window number reported as 36. */\nstatic int\n_load_min_window_id(char *adapter_name, nrt_adapter_t adapter_type)\n{\n\tFILE *fp;\n\tchar buf[128], path[256];\n\tsize_t sz;\n\tint min_window_id = 0;\n\n\tif (adapter_type != NRT_HFI)\n\t\treturn min_window_id;\n\n\tmin_window_id = 4;\n\tsnprintf(path, sizeof(path),\n\t\t \"/sys/devices/virtual/hfi/%s/num_dynamic_win\", adapter_name);\n\tfp = fopen(path, \"r\");\n\tif (fp) {\n\t\tmemset(buf, 0, sizeof(buf));\n\t\tsz = fread(buf, 1, sizeof(buf), fp);\n\t\tif (sz) {\n\t\t\tbuf[sz] = '\\0';\n\t\t\tmin_window_id += strtol(buf, NULL, 0);\n\t\t}\n\t\t(void) fclose(fp);\n\t}\n\n\treturn min_window_id;\n}\n\nstatic int\n_get_adapters(slurm_nrt_nodeinfo_t *n)\n{\n\tint err, i, j, k, rc = SLURM_SUCCESS;\n\tnrt_cmd_query_adapter_types_t adapter_types;\n\tunsigned int num_adapter_types;\n\tnrt_adapter_t adapter_type[NRT_MAX_ADAPTER_TYPES];\n\tnrt_cmd_query_adapter_names_t adapter_names;\n\tunsigned int max_windows, num_adapter_names;\n\tnrt_cmd_status_adapter_t adapter_status;\n\tnrt_cmd_query_adapter_info_t query_adapter_info;\n\tnrt_adapter_info_t adapter_info;\n\tnrt_status_t *status_array = NULL;\n\tnrt_window_id_t window_count;\n\tint min_window_id = 0, total_adapters = 0;\n\tslurm_nrt_adapter_t *adapter_ptr;\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"_get_adapters: begin\");\n\n\tadapter_types.num_adapter_types = &num_adapter_types;\n\tadapter_types.adapter_types = adapter_type;\n\tadapter_info.window_list = NULL;\n\tfor (i = 0; i < 2; i++) {\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_TYPES,\n\t\t\t\t   &adapter_types);\n\t\tif (err != NRT_EAGAIN)\n\t\t\tbreak;\n\t\terror(\"nrt_cmd_wrap(adapter_types): %s\", nrt_err_str(err));\n\t\terror(\"Is PNSD daemon started? Retrying...\");\n\t\t/* Run \"/opt/ibmhpc/pecurrent/ppe.pami/pnsd/pnsd -A\" */\n\t\tsleep(5);\n\t}\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(adapter_types): %s\", nrt_err_str(err));\n\t\treturn SLURM_ERROR;\n\t}\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tfor (i = 0; i < num_adapter_types; i++) {\n\t\t\tinfo(\"nrt_cmd_wrap(adapter_types): %s\",\n\t\t\t     _adapter_type_str(adapter_types.adapter_types[i]));\n\t\t}\n\t}\n\n\tfor (i = 0; i < num_adapter_types; i++) {\n\t\tadapter_names.adapter_type = adapter_type[i];\n\t\tadapter_names.num_adapter_names = &num_adapter_names;\n\t\tadapter_names.max_windows = &max_windows;\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_NAMES,\n\t\t\t\t   &adapter_names);\n\t\tif (err != NRT_SUCCESS) {\n\t\t\terror(\"nrt_cmd_wrap(adapter_names, %s): %s\",\n\t\t\t      _adapter_type_str(adapter_names.adapter_type),\n\t\t\t      nrt_err_str(err));\n\t\t\trc = SLURM_ERROR;\n\t\t\tcontinue;\n\t\t}\n\n\t\t/* Get the total adapter count here and print afterwards. */\n\t\ttotal_adapters += num_adapter_names;\n\t\tif (total_adapters > NRT_MAXADAPTERS)\n\t\t\tcontinue;\n\n\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\tfor (j = 0; j < num_adapter_names; j++) {\n\t\t\t\tinfo(\"nrt_cmd_wrap(adapter_names, %s, %s) \"\n\t\t\t\t     \"max_windows: %hu\",\n\t\t\t\t      adapter_names.adapter_names[j],\n\t\t\t\t      _adapter_type_str(adapter_names.\n\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t      max_windows);\n\t\t\t}\n\t\t}\n\n\t\tfor (j = 0; j < num_adapter_names; j++) {\n\t\t\tmin_window_id = _load_min_window_id(\n\t\t\t\t\t\tadapter_names.adapter_names[j],\n\t\t\t\t\t\tadapter_names.adapter_type);\n\t\t\tif (status_array) {\n\t\t\t\tfree(status_array);\n\t\t\t\tstatus_array = NULL;\n\t\t\t}\n\t\t\tadapter_status.adapter_name = adapter_names.\n\t\t\t\t\t\t      adapter_names[j];\n\t\t\tadapter_status.adapter_type = adapter_names.\n\t\t\t\t\t\t      adapter_type;\n\t\t\tadapter_status.status_array = &status_array;\n\t\t\tadapter_status.window_count = &window_count;\n\t\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_STATUS_ADAPTER,\n\t\t\t\t\t   &adapter_status);\n\t\t\tif (err != NRT_SUCCESS) {\n\t\t\t\terror(\"nrt_cmd_wrap(status_adapter, %s, %s): %s\",\n\t\t\t\t      adapter_status.adapter_name,\n\t\t\t\t      _adapter_type_str(adapter_status.\n\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t      nrt_err_str(err));\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (window_count > max_windows) {\n\t\t\t\t/* This happens if IP_ONLY devices are\n\t\t\t\t * allocated with tables_per_task > 0 */\n\t\t\t\tchar *reason;\n\t\t\t\tif (adapter_status.adapter_type == NRT_IPONLY)\n\t\t\t\t\treason = \", Known libnrt bug\";\n\t\t\t\telse\n\t\t\t\t\treason = \"\";\n\t\t\t\tdebug(\"nrt_cmd_wrap(status_adapter, %s, %s): \"\n\t\t\t\t      \"window_count > max_windows (%u > %hu)%s\",\n\t\t\t\t      adapter_status.adapter_name,\n\t\t\t\t      _adapter_type_str(adapter_status.\n\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t      window_count, max_windows, reason);\n\t\t\t\t/* Reset value to avoid logging bad data */\n\t\t\t\twindow_count = max_windows;\n\t\t\t}\n\t\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\t\tinfo(\"nrt_cmd_wrap(status_adapter, %s, %s)\",\n\t\t\t\t     adapter_status.adapter_name,\n\t\t\t\t     _adapter_type_str(adapter_status.\n\t\t\t\t\t\t       adapter_type));\n\t\t\t\t_print_adapter_status(&adapter_status);\n\t\t\t}\n\t\t\tadapter_ptr = &n->adapter_list[n->adapter_count];\n\t\t\tstrlcpy(adapter_ptr->adapter_name,\n\t\t\t\tadapter_status.adapter_name,\n\t\t\t\tNRT_MAX_ADAPTER_NAME_LEN);\n\t\t\tadapter_ptr->adapter_type = adapter_status.\n\t\t\t\t\t\t    adapter_type;\n\t\t\tadapter_ptr->window_count = adapter_status.\n\t\t\t\t\t\t    window_count[0];\n\t\t\tadapter_ptr->window_list =\n\t\t\t\txmalloc(sizeof(slurm_nrt_window_t) *\n\t\t\t\t\twindow_count);\n\t\t\tn->adapter_count++;\n\n\t\t\tfor (k = 0; k < window_count; k++) {\n\t\t\t\tslurm_nrt_window_t *window_ptr;\n\t\t\t\twindow_ptr = adapter_ptr->window_list + k;\n\t\t\t\twindow_ptr->window_id = status_array[k].\n\t\t\t\t\t\t\twindow_id;\n\t\t\t\twindow_ptr->state = status_array[k].state;\n\t\t\t\t/* window_ptr->job_key = Not_Available */\n\t\t\t\tif ((adapter_ptr->adapter_type == NRT_HFI) &&\n\t\t\t\t    (!dynamic_window_err) &&\n\t\t\t\t    (window_ptr->window_id < min_window_id)) {\n\t\t\t\t\terror(\"switch/nrt: Dynamic window \"\n\t\t\t\t\t      \"configuration error for %s, \"\n\t\t\t\t\t      \"window_id=%u < min_window_id:%d\",\n\t\t\t\t\t      adapter_status.adapter_name,\n\t\t\t\t\t      window_ptr->window_id,\n\t\t\t\t\t      min_window_id);\n\t\t\t\t\tdynamic_window_err = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/* Now get adapter info (port_id, network_id, etc.) */\n\t\t\tquery_adapter_info.adapter_name = adapter_names.\n\t\t\t\t\t\t\t  adapter_names[j];\n\t\t\tquery_adapter_info.adapter_type = adapter_names.\n\t\t\t\t\t\t\t  adapter_type;\n\t\t\tquery_adapter_info.adapter_info = &adapter_info;\n\t\t\tadapter_info.window_list = xmalloc(max_windows *\n\t\t\t\t\t\t   sizeof(nrt_window_id_t));\n\t\t\terr = nrt_cmd_wrap(NRT_VERSION,\n\t\t\t\t\t   NRT_CMD_QUERY_ADAPTER_INFO,\n\t\t\t\t\t   &query_adapter_info);\n\t\t\tif (err != NRT_SUCCESS) {\n\t\t\t\terror(\"nrt_cmd_wrap(adapter_into, %s, %s): %s\",\n\t\t\t\t      query_adapter_info.adapter_name,\n\t\t\t\t      _adapter_type_str(query_adapter_info.\n\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t      nrt_err_str(err));\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\t\tinfo(\"nrt_cmd_wrap(adapter_info, %s, %s)\",\n\t\t\t\t     query_adapter_info.adapter_name,\n\t\t\t\t     _adapter_type_str(query_adapter_info.\n\t\t\t\t\t\t       adapter_type));\n\t\t\t\t_print_adapter_info(&adapter_info);\n\t\t\t}\n\t\t\tif (adapter_info.node_number != 0) {\n\t\t\t\tn->node_number = adapter_info.node_number;\n\t\t\t\tmy_network_id  = adapter_info.node_number;\n\t\t\t\tmy_network_id_set = true;\n\t\t\t}\n\t\t\tadapter_ptr->cau_indexes_avail =\n\t\t\t\tadapter_info.cau_indexes_avail;\n\t\t\tadapter_ptr->immed_slots_avail =\n\t\t\t\tadapter_info.immed_slots_avail;\n\t\t\tadapter_ptr->rcontext_block_count =\n\t\t\t\tadapter_info.rcontext_block_count;\n\t\t\tfor (k = 0; k < adapter_info.num_ports; k++) {\n\t\t\t\tif (adapter_info.port[k].status != 1)\n\t\t\t\t\tcontinue;\n\t\t\t\tadapter_ptr->ipv4_addr = adapter_info.port[k].\n\t\t\t\t\t\t\t ipv4_addr;\n\t\t\t\tadapter_ptr->ipv6_addr = adapter_info.port[k].\n\t\t\t\t\t\t\t ipv6_addr;\n\t\t\t\tadapter_ptr->lid = adapter_info.port[k].lid;\n\t\t\t\tadapter_ptr->network_id = adapter_info.port[k].\n\t\t\t\t\t\t\t  network_id;\n\t\t\t\tadapter_ptr->port_id = adapter_info.port[k].\n\t\t\t\t\t\t       port_id;\n\t\t\t\tadapter_ptr->special = adapter_info.port[k].\n\t\t\t\t\t\t       special;\n\t\t\t\tif (adapter_ptr->adapter_type == NRT_HFI) {\n\t\t\t\t\tmy_lpar_id = adapter_ptr->special;\n\t\t\t\t\tmy_lid = adapter_ptr->lid;\n\t\t\t\t\tmy_lpar_id_set = true;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ((adapter_ptr->ipv4_addr == 0) &&\n\t\t\t    (adapter_info.num_ports > 0)) {\n\t\t\t\tadapter_ptr->ipv4_addr = adapter_info.port[0].\n\t\t\t\t\t\t\t ipv4_addr;\n\t\t\t\tadapter_ptr->ipv6_addr = adapter_info.port[0].\n\t\t\t\t\t\t\t ipv6_addr;\n\t\t\t}\n\t\t\txfree(adapter_info.window_list);\n\t\t}\n\t\tif (status_array) {\n\t\t\tfree(status_array);\n\t\t\tstatus_array = NULL;\n\t\t}\n\n\t}\n\n\tif (total_adapters > NRT_MAXADAPTERS) {\n\t\tfatal(\"switch/nrt: More adapters found (%u) on \"\n\t\t      \"node than supported (%u). \"\n\t\t      \"Increase NRT_MAXADAPTERS and rebuild slurm\",\n\t\t      total_adapters, NRT_MAXADAPTERS);\n\t}\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t_print_nodeinfo(n);\n\t\tinfo(\"_get_adapters: complete: %d\", rc);\n\t}\n\treturn rc;\n}\n\n/* Assumes a pre-allocated nodeinfo structure and uses _get_adapters\n * to do the dirty work.  We probably collect more information about\n * the adapters on a give node than we need to, but it was done\n * in the interest of being prepared for future requirements.\n *\n * Used by: slurmd\n */\nextern int\nnrt_build_nodeinfo(slurm_nrt_nodeinfo_t *n, char *name)\n{\n\tint err;\n\n\txassert(n);\n\txassert(n->magic == NRT_NODEINFO_MAGIC);\n\txassert(name);\n\n\tstrlcpy(n->name, name, NRT_HOSTLEN);\n\tslurm_mutex_lock(&global_lock);\n\terr = _get_adapters(n);\n\tslurm_mutex_unlock(&global_lock);\n\n\treturn err;\n}\n\n/* Used by: all */\nextern int\nnrt_pack_nodeinfo(slurm_nrt_nodeinfo_t *n, Buf buf,\n\t\t  uint16_t protocol_version)\n{\n\tslurm_nrt_adapter_t *a;\n\tuint16_t dummy16;\n\tint i, j, offset;\n\n\txassert(n);\n\txassert(n->magic == NRT_NODEINFO_MAGIC);\n\txassert(buf);\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_pack_nodeinfo():\");\n\t\t_print_nodeinfo(n);\n\t}\n\toffset = get_buf_offset(buf);\n\tpack32(n->magic, buf);\n\tpackmem(n->name, NRT_HOSTLEN, buf);\n\tpack32(n->node_number, buf);\n\tpack32(n->adapter_count, buf);\n\tfor (i = 0; i < n->adapter_count; i++) {\n\t\ta = n->adapter_list + i;\n\t\tpackmem(a->adapter_name, NRT_MAX_ADAPTER_NAME_LEN, buf);\n\t\tdummy16 = a->adapter_type;\n\t\tpack16(dummy16, buf);\t/* adapter_type is an int */\n\t\tpack16(a->cau_indexes_avail, buf);\n\t\tpack16(a->immed_slots_avail, buf);\n\t\tpack32(a->ipv4_addr, buf);\n\t\tfor (j = 0; j < 16; j++)\n\t\t\tpack8(a->ipv6_addr.s6_addr[j], buf);\n\t\tpack32(a->lid, buf);\n\t\tpack64(a->network_id, buf);\n\t\tpack8(a->port_id, buf);\n\t\tpack64(a->rcontext_block_count, buf);\n\t\tpack64(a->special, buf);\n\t\tpack16(a->window_count, buf);\n\t\tfor (j = 0; j < a->window_count; j++) {\n\t\t\tuint32_t state = a->window_list[j].state;\n\t\t\tpack16(a->window_list[j].window_id, buf);\n\t\t\tpack32(state, buf);\n\t\t\tpack32(a->window_list[j].job_key, buf);\n\t\t}\n\t}\n\n\treturn(get_buf_offset(buf) - offset);\n}\n\n/* Used by: all */\nstatic int\n_copy_node(slurm_nrt_nodeinfo_t *dest, slurm_nrt_nodeinfo_t *src)\n{\n\tint i, j;\n\tslurm_nrt_adapter_t *sa = NULL;\n\tslurm_nrt_adapter_t *da = NULL;\n\n\txassert(dest);\n\txassert(src);\n\txassert(dest->magic == NRT_NODEINFO_MAGIC);\n\txassert(src->magic == NRT_NODEINFO_MAGIC);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"_copy_node():\");\n\t\t_print_nodeinfo(src);\n\t}\n\n\tstrlcpy(dest->name, src->name, NRT_HOSTLEN);\n\tdest->node_number = src->node_number;\n\tdest->adapter_count = src->adapter_count;\n\tfor (i = 0; i < dest->adapter_count; i++) {\n\t\tsa = src->adapter_list + i;\n\t\tda = dest->adapter_list +i;\n\t\tstrlcpy(da->adapter_name, sa->adapter_name,\n\t\t\tNRT_MAX_ADAPTER_NAME_LEN);\n\t\tda->adapter_type = sa->adapter_type;\n\t\tda->cau_indexes_avail = sa->cau_indexes_avail;\n\t\tda->immed_slots_avail = sa->immed_slots_avail;\n\t\tda->ipv4_addr    = sa->ipv4_addr;\n\t\tda->ipv6_addr    = sa->ipv6_addr;\n\t\tda->lid          = sa->lid;\n\t\tda->network_id   = sa->network_id;\n\t\tda->port_id      = sa->port_id;\n\t\tda->rcontext_block_count = sa->rcontext_block_count;\n\t\tda->special      = sa->special;\n\t\tda->window_count = sa->window_count;\n\t\tda->window_list = (slurm_nrt_window_t *)\n\t\t\t\t  xmalloc(sizeof(slurm_nrt_window_t) *\n\t\t\t\t  da->window_count);\n\t\tfor (j = 0; j < da->window_count; j++) {\n\t\t\tda->window_list[j].window_id = sa->window_list[j].\n\t\t\t\t\t\t       window_id;\n\t\t\tda->window_list[j].state = sa->window_list[j].state;\n\t\t\tda->window_list[j].job_key = sa->window_list[j].\n\t\t\t\t\t\t     job_key;\n\t\t}\n\t}\n\n\treturn SLURM_SUCCESS;\n}\n\nstatic int\n_cmp_ipv6(struct in6_addr *addr1, struct in6_addr *addr2)\n{\n\tint i;\n\n\tfor (i = 0; i < 16; i++) {\n\t\tif (addr1->s6_addr[i] != addr2->s6_addr[i])\n\t\t\treturn 1;\n\t}\n\n\treturn 0;\n}\n\n/* Throw away adapter window portion of the nodeinfo.\n *\n * Used by: _unpack_nodeinfo\n */\nstatic int\n_fake_unpack_adapters(Buf buf, slurm_nrt_nodeinfo_t *n,\n\t\t      uint16_t protocol_version)\n{\n\tslurm_nrt_adapter_t *tmp_a = NULL;\n\tslurm_nrt_window_t *tmp_w = NULL;\n\tuint16_t dummy16;\n\tuint32_t dummy32;\n\tchar *name_ptr;\n\tuint8_t  port_id;\n\tuint16_t adapter_type, cau_indexes_avail, immed_slots_avail;\n\tuint16_t window_count;\n\tuint32_t adapter_count, ipv4_addr, lid;\n\tuint64_t network_id, rcontext_block_count, special;\n\tstruct in6_addr ipv6_addr;\n\tint i, j, k;\n\n\tsafe_unpack32(&adapter_count, buf);\n\tif (n && (n->adapter_count != adapter_count)) {\n\t\terror(\"switch/nrt: node %s adapter count reset from %u to %u\",\n\t\t      n->name, n->adapter_count, adapter_count);\n\t\tif (n->adapter_count < adapter_count)\n\t\t\tdrain_nodes(n->name, \"Too few switch adapters\", 0);\n\t}\n\tfor (i = 0; i < adapter_count; i++) {\n\t\tsafe_unpackmem_ptr(&name_ptr, &dummy32, buf);\n\t\tif (dummy32 != NRT_MAX_ADAPTER_NAME_LEN)\n\t\t\tgoto unpack_error;\n\t\tsafe_unpack16(&adapter_type, buf);\n\t\tsafe_unpack16(&cau_indexes_avail, buf);\n\t\tsafe_unpack16(&immed_slots_avail, buf);\n\t\tsafe_unpack32(&ipv4_addr, buf);\n\t\tfor (j = 0; j < 16; j++)\n\t\t\tsafe_unpack8(&ipv6_addr.s6_addr[j], buf);\n\t\tsafe_unpack32(&lid, buf);\n\t\tsafe_unpack64(&network_id, buf);\n\t\tsafe_unpack8 (&port_id, buf);\n\t\tsafe_unpack64(&rcontext_block_count, buf);\n\t\tsafe_unpack64(&special, buf);\n\t\tsafe_unpack16(&window_count, buf);\n\n\t\t/* no copy, just advances buf counters */\n\t\tfor (j = 0; j < window_count; j++) {\n\t\t\tsafe_unpack16(&dummy16, buf);\t/* window_id */\n\t\t\tsafe_unpack32(&dummy32, buf);\t/* state */\n\t\t\tsafe_unpack32(&dummy32, buf);\t/* job_key */\n\t\t}\n\n\t\tfor (j = 0; j < n->adapter_count; j++) {\n\t\t\ttmp_a = n->adapter_list + j;\n\t\t\tif (xstrcmp(tmp_a->adapter_name, name_ptr))\n\t\t\t\tcontinue;\n\t\t\tif (tmp_a->cau_indexes_avail != cau_indexes_avail) {\n\t\t\t\tinfo(\"switch/nrt: resetting cau_indexes_avail \"\n\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\ttmp_a->cau_indexes_avail = cau_indexes_avail;\n\t\t\t}\n\t\t\tif (tmp_a->immed_slots_avail != immed_slots_avail) {\n\t\t\t\tinfo(\"switch/nrt: resetting immed_slots_avail \"\n\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\ttmp_a->immed_slots_avail = immed_slots_avail;\n\t\t\t}\n\t\t\tif (tmp_a->ipv4_addr != ipv4_addr) {\n\t\t\t\tinfo(\"switch/nrt: resetting ipv4_addr \"\n\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\ttmp_a->ipv4_addr = ipv4_addr;\n\t\t\t}\n\t\t\tif (_cmp_ipv6(&tmp_a->ipv6_addr, &ipv6_addr) != 0) {\n\t\t\t\tinfo(\"switch/nrt: resetting ipv6_addr \"\n\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\tfor (k = 0; k < 16; k++) {\n\t\t\t\t\ttmp_a->ipv6_addr.s6_addr[k] =\n\t\t\t\t\t\tipv6_addr.s6_addr[k];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (tmp_a->lid != lid) {\n\t\t\t\tinfo(\"switch/nrt: resetting lid \"\n\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\ttmp_a->lid = lid;\n\t\t\t}\n\t\t\tif (tmp_a->network_id != network_id) {\n\t\t\t\tinfo(\"switch/nrt: resetting network_id \"\n\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\ttmp_a->network_id = network_id;\n\t\t\t}\n\t\t\tif (tmp_a->port_id != port_id) {\n\t\t\t\tinfo(\"switch/nrt: resetting port_id \"\n\t\t\t\t     \"on node %s adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\ttmp_a->port_id = port_id;\n\t\t\t}\n\t\t\tif (tmp_a->rcontext_block_count !=\n\t\t\t    rcontext_block_count) {\n\t\t\t\tinfo(\"switch/nrt: resetting \"\n\t\t\t\t     \"rcontext_block_count on node %s \"\n\t\t\t\t     \"adapter %s\",\n\t\t\t\t     n->name, tmp_a->adapter_name);\n\t\t\t\ttmp_a->rcontext_block_count =\n\t\t\t\t\trcontext_block_count;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\n\t\tif (j == n->adapter_count) {\n\t\t\terror(\"switch/nrt: node %s adapter %s being added\",\n\t\t\t      n->name, name_ptr);\n\t\t\tn->adapter_count++;\n\t\t\txrealloc(n->adapter_list,\n\t\t\t\t sizeof(slurm_nrt_adapter_t) *\n\t\t\t\t n->adapter_count);\n\t\t\ttmp_a = n->adapter_list + j;\n\t\t\tstrlcpy(tmp_a->adapter_name, name_ptr,\n\t\t\t\tNRT_MAX_ADAPTER_NAME_LEN);\n\t\t\ttmp_a->adapter_type = adapter_type;\n\t\t\t/* tmp_a->block_count = 0 */\n\t\t\t/* tmp_a->block_list = NULL */\n\t\t\ttmp_a->cau_indexes_avail = cau_indexes_avail;\n\t\t\ttmp_a->immed_slots_avail = immed_slots_avail;\n\t\t\ttmp_a->ipv4_addr = ipv4_addr;\n\t\t\tfor (k = 0; k < 16; k++) {\n\t\t\t\ttmp_a->ipv6_addr.s6_addr[k] =\n\t\t\t\t\tipv6_addr.s6_addr[k];\n\t\t\t}\n\t\t\ttmp_a->lid = lid;\n\t\t\ttmp_a->network_id = network_id;\n\t\t\ttmp_a->port_id = port_id;\n\t\t\ttmp_a->rcontext_block_count = rcontext_block_count;\n\t\t\ttmp_a->special = special;\n\t\t\ttmp_a->window_count = window_count;\n\t\t\ttmp_w = (slurm_nrt_window_t *)\n\t\t\t\txmalloc(sizeof(slurm_nrt_window_t) *\n\t\t\t\ttmp_a->window_count);\n\t\t\tfor (k = 0; k < tmp_a->window_count; k++) {\n\t\t\t\ttmp_w[k].state = NRT_WIN_AVAILABLE;\n\t\t\t\ttmp_w[k].job_key = 0;\n\t\t\t}\n\t\t\ttmp_a->window_list = tmp_w;\n\t\t}\n\t}\n\n\treturn SLURM_SUCCESS;\n\nunpack_error:\n\treturn SLURM_ERROR;\n}\n\n\n/* Unpack nodeinfo and update persistent libstate.\n *\n * If believe_window_status is true, we honor the window status variables\n * from the packed nrt_nodeinfo_t.  If it is false we set the status of\n * all windows to NRT_WIN_AVAILABLE.\n *\n * Used by: slurmctld\n */\nstatic int\n_unpack_nodeinfo(slurm_nrt_nodeinfo_t *n, Buf buf, bool believe_window_status,\n\t\t uint16_t protocol_version)\n{\n\tint i, j, rc = SLURM_SUCCESS;\n\tslurm_nrt_adapter_t *tmp_a = NULL;\n\tslurm_nrt_window_t *tmp_w = NULL;\n\tnrt_node_number_t node_number;\n\tuint32_t size;\n\tslurm_nrt_nodeinfo_t *tmp_n = NULL;\n\tchar *name_ptr, name[NRT_HOSTLEN];\n\tuint32_t magic;\n\tuint16_t dummy16;\n\n\t/* NOTE!  We don't care at this point whether n is valid.\n\t * If it's NULL, we will just forego the copy at the end.\n\t */\n\txassert(buf);\n\n\t/* Extract node name from buffer */\n\tsafe_unpack32(&magic, buf);\n\tif (magic != NRT_NODEINFO_MAGIC)\n\t\tslurm_seterrno_ret(EBADMAGIC_NRT_NODEINFO);\n\tsafe_unpackmem_ptr(&name_ptr, &size, buf);\n\tif (size != NRT_HOSTLEN)\n\t\tgoto unpack_error;\n\tmemcpy(name, name_ptr, size);\n\tsafe_unpack32(&node_number, buf);\n\n\t/* When the slurmctld is in normal operating mode (NOT backup mode),\n\t * the global nrt_state structure should NEVER be NULL at the time that\n\t * this function is called.  Therefore, if nrt_state is NULL here,\n\t * we assume that the controller is in backup mode.  In backup mode,\n\t * the slurmctld only unpacks RPCs to find out their identity.\n\t * Most of the RPCs, including the one calling this function, are\n\t * simply ignored.\n\t *\n\t * So, here we just do a fake unpack to advance the buffer pointer.\n\t */\n\tif (nrt_state == NULL) {\n\t\tif (_fake_unpack_adapters(buf, NULL, protocol_version)\n\t\t    != SLURM_SUCCESS) {\n\t\t\tslurm_seterrno_ret(EUNPACK);\n\t\t} else {\n\t\t\treturn SLURM_SUCCESS;\n\t\t}\n\t}\n\n\t/* If we already have nodeinfo for this node, we ignore this message.\n\t * The slurmctld's view of window allocation is always better than\n\t * the slurmd's view.  We only need the slurmd's view if the slurmctld\n\t * has no nodeinfo at all for that node.\n\t */\n\tif (name != NULL) {\n\t\ttmp_n = _find_node(nrt_state, name);\n\t\tif (tmp_n != NULL) {\n\t\t\ttmp_n->node_number = node_number;\n\t\t\tif (_fake_unpack_adapters(buf, tmp_n, protocol_version)\n\t\t\t    != SLURM_SUCCESS) {\n\t\t\t\tslurm_seterrno_ret(EUNPACK);\n\t\t\t} else {\n\t\t\t\tgoto copy_node;\n\t\t\t}\n\t\t}\n\t}\n\n\t/*\n\t * Update global libstate with this nodes' info.\n\t */\n\ttmp_n = _alloc_node(nrt_state, name);\n\tif (tmp_n == NULL)\n\t\treturn SLURM_ERROR;\n\ttmp_n->magic = magic;\n\ttmp_n->node_number = node_number;\n\tsafe_unpack32(&tmp_n->adapter_count, buf);\n\tif (tmp_n->adapter_count > NRT_MAXADAPTERS) {\n\t\terror(\"switch/nrt: More adapters found on node %s than \"\n\t\t      \"supported. Increase NRT_MAXADAPTERS and rebuild slurm\",\n\t\t      name);\n\t\ttmp_n->adapter_count = NRT_MAXADAPTERS;\n\t}\n\tfor (i = 0; i < tmp_n->adapter_count; i++) {\n\t\ttmp_a = tmp_n->adapter_list + i;\n\t\tsafe_unpackmem_ptr(&name_ptr, &size, buf);\n\t\tif (size != NRT_MAX_ADAPTER_NAME_LEN)\n\t\t\tgoto unpack_error;\n\t\tmemcpy(tmp_a->adapter_name, name_ptr, size);\n\t\tsafe_unpack16(&dummy16, buf);\n\t\ttmp_a->adapter_type = dummy16;\t/* adapter_type is an int */\n\t\tsafe_unpack16(&tmp_a->cau_indexes_avail, buf);\n\t\tsafe_unpack16(&tmp_a->immed_slots_avail, buf);\n\t\tsafe_unpack32(&tmp_a->ipv4_addr, buf);\n\t\tfor (j = 0; j < 16; j++) {\n\t\t\tsafe_unpack8(&tmp_a->ipv6_addr.s6_addr[j], buf);\n\t\t}\n\t\tsafe_unpack32(&tmp_a->lid, buf);\n\t\tsafe_unpack64(&tmp_a->network_id, buf);\n\t\tsafe_unpack8(&tmp_a->port_id, buf);\n\t\tsafe_unpack64(&tmp_a->rcontext_block_count, buf);\n\t\tsafe_unpack64(&tmp_a->special, buf);\n\t\tsafe_unpack16(&tmp_a->window_count, buf);\n\t\ttmp_w = (slurm_nrt_window_t *)\n\t\t\txmalloc(sizeof(slurm_nrt_window_t) *\n\t\t\ttmp_a->window_count);\n\t\tfor (j = 0; j < tmp_a->window_count; j++) {\n\t\t\tsafe_unpack16(&tmp_w[j].window_id, buf);\n\t\t\tsafe_unpack32(&tmp_w[j].state, buf);\n\t\t\tsafe_unpack32(&tmp_w[j].job_key, buf);\n\t\t\tif (!believe_window_status) {\n\t\t\t\ttmp_w[j].state = NRT_WIN_AVAILABLE;\n\t\t\t\ttmp_w[j].job_key = 0;\n\t\t\t}\n\t\t}\n\t\ttmp_a->window_list = tmp_w;\n\t\ttmp_w = NULL;  /* don't free if unpack error on next adapter */\n\t}\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"_unpack_nodeinfo\");\n\t\t_print_nodeinfo(tmp_n);\n\t}\n\ncopy_node:\n\t/* Only copy the node_info structure if the caller wants it */\n\tif ((n != NULL) && (_copy_node(n, tmp_n) != SLURM_SUCCESS))\n\t\trc = SLURM_ERROR;\n\treturn rc;\n\nunpack_error:\n\txfree(tmp_w);\n\tslurm_seterrno_ret(EUNPACK);\n}\n\n/* Unpack nodeinfo and update persistent libstate.\n *\n * Used by: slurmctld\n */\nextern int\nnrt_unpack_nodeinfo(slurm_nrt_nodeinfo_t *n, Buf buf, uint16_t protocol_version)\n{\n\tint rc;\n\n\tslurm_mutex_lock(&global_lock);\n\trc = _unpack_nodeinfo(n, buf, false, protocol_version);\n\tslurm_mutex_unlock(&global_lock);\n\treturn rc;\n}\n\n/* Used by: slurmd, slurmctld */\nextern void\nnrt_free_nodeinfo(slurm_nrt_nodeinfo_t *n, bool ptr_into_array)\n{\n\tslurm_nrt_adapter_t *adapter;\n\tint i;\n\n\tif (!n)\n\t\treturn;\n\n\txassert(n->magic == NRT_NODEINFO_MAGIC);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_free_nodeinfo\");\n\t\t_print_nodeinfo(n);\n\t}\n\n\tif (n->adapter_list) {\n\t\tadapter = n->adapter_list;\n\t\tfor (i = 0; i < n->adapter_count; i++)\n\t\t\txfree(adapter[i].window_list);\n\t\txfree(n->adapter_list);\n\t}\n\tif (!ptr_into_array)\n\t\txfree(n);\n}\n\n/* Find all of the windows used by job step \"jp\" on the hosts\n * designated in hostlist \"hl\" and mark their state NRT_WIN_AVAILABLE.\n *\n * Used by: slurmctld\n */\nextern int\nnrt_job_step_complete(slurm_nrt_jobinfo_t *jp, hostlist_t hl)\n{\n\thostlist_t uniq_hl;\n\thostlist_iterator_t hi;\n\tchar *node_name;\n\n\txassert(!hostlist_is_empty(hl));\n\tif ((jp == NULL) || (jp->magic == NRT_NULL_MAGIC)) {\n\t\tdebug2(\"(%s: %d: %s) job->switch_job was NULL\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn SLURM_ERROR;\n\t}\n\n\txassert(jp->magic == NRT_JOBINFO_MAGIC);\n\n\tif ((jp == NULL) || (hostlist_is_empty(hl)))\n\t\treturn SLURM_ERROR;\n\n\tif ((jp->tables_per_task == 0) || (jp->tableinfo == NULL) ||\n\t    (jp->tableinfo[0].table_length == 0))\n\t\treturn SLURM_SUCCESS;\n\n\t/* The hl hostlist may contain duplicate node_names (poe -hostfile\n\t * triggers duplicates in the hostlist).  Since there\n\t * is no reason to call _free_resources_by_job more than once\n\t * per node_name, we create a new unique hostlist.\n\t */\n\tuniq_hl = hostlist_copy(hl);\n\thostlist_uniq(uniq_hl);\n\thi = hostlist_iterator_create(uniq_hl);\n\n\tslurm_mutex_lock(&global_lock);\n\tif (nrt_state != NULL) {\n\t\twhile ((node_name = hostlist_next(hi)) != NULL) {\n\t\t\t_free_resources_by_job(jp, node_name);\n\t\t\tfree(node_name);\n\t\t}\n\t} else { /* nrt_state == NULL */\n\t\t/* If there is no state at all, the job is already cleaned\n\t\t * up. :)  This should really only happen when the backup\n\t\t * controller is calling job_fini() just before it takes over\n\t\t * the role of active controller.\n\t\t */\n\t\tdebug(\"nrt_job_step_complete called when nrt_state == NULL\");\n\t}\n\tslurm_mutex_unlock(&global_lock);\n\n\thostlist_iterator_destroy(hi);\n\thostlist_destroy(uniq_hl);\n\treturn SLURM_SUCCESS;\n}\n\n/* Find all of the windows used by job step \"jp\" and mark their\n * state NRT_WIN_UNAVAILABLE.\n *\n * Used by the slurmctld at startup time to restore the allocation\n * status of any job steps that were running at the time the previous\n * slurmctld was shutdown.  Also used to restore the allocation\n * status after a call to switch_g_clear().\n */\nextern int\nnrt_job_step_allocated(slurm_nrt_jobinfo_t *jp, hostlist_t hl)\n{\n\tint rc;\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_job_step_allocated: resetting window state\");\n\t\t_print_jobinfo(jp);\n\t}\n\n\trc = _job_step_window_state(jp, hl, NRT_WIN_UNAVAILABLE);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_job_step_allocated: window state reset complete\");\n\t\t_print_libstate(nrt_state);\n\t}\n\n\treturn rc;\n}\n\n/* Assign a unique key to each job.  The key is used later to\n * gain access to the network table loaded on each node of a job.\n *\n * Used by: slurmctld\n */\nstatic nrt_job_key_t\n_next_key(void)\n{\n\tnrt_job_key_t key;\n\n\txassert(nrt_state);\n\n\tslurm_mutex_lock(&global_lock);\n\tkey = nrt_state->key_index;\n\tif (key == 0)\n\t\tkey++;\n\tnrt_state->key_index = (nrt_job_key_t) (key + 1);\n\tslurm_mutex_unlock(&global_lock);\n\n\treturn key;\n}\n\n/* Translate a protocol string (e.g. \"lapi,mpi\" into a table.\n * Caller must free returned value. */\nstatic nrt_protocol_table_t *_get_protocol_table(char *protocol)\n{\n\tnrt_protocol_table_t *protocol_table;\n\tchar *protocol_str, *save_ptr = NULL, *token;\n\tint i;\n\n\tprotocol_table = xmalloc(sizeof(nrt_protocol_table_t));\n\n\tif (!protocol)\n\t\tprotocol = \"mpi\";\n\tprotocol_str = xstrdup(protocol);\n\ttoken = strtok_r(protocol_str, \",\", &save_ptr);\n\twhile (token) {\n\t\tfor (i = 0; i < protocol_table->protocol_table_cnt; i++) {\n\t\t\tif (!xstrcmp(token, protocol_table->protocol_table[i].\n\t\t\t\t\t    protocol_name))\n\t\t\t\tbreak;\n\t\t}\n\t\tif ((i >= protocol_table->protocol_table_cnt) &&\n\t\t    (i < NRT_MAX_PROTO_CNT)) {\n\t\t\t/* Need to add new protocol type */\n\t\t\tstrlcpy(protocol_table->protocol_table[i].protocol_name,\n\t\t\t\ttoken, NRT_MAX_PROTO_NAME_LEN);\n\t\t\tprotocol_table->protocol_table_cnt++;\n\t\t}\n\t\ttoken = strtok_r(NULL, \",\", &save_ptr);\n\t}\n\txfree(protocol_str);\n\n\treturn protocol_table;\n}\n\n/* For an adapter type, return it's relative priority to use as a default */\nstatic inline int\n_adapter_type_pref(nrt_adapter_t adapter_type)\n{\n\tif (adapter_type == NRT_IPONLY)\n\t\treturn 9;\n\tif (adapter_type == NRT_HFI)\n\t\treturn 8;\n\tif (adapter_type == NRT_IB)\n\t\treturn 7;\n#if NRT_VERSION < 1300\n\tif (adapter_type == NRT_HPCE)\n\t\treturn 6;\n\tif (adapter_type == NRT_KMUX)\n\t\treturn 5;\n#endif\n\treturn 0;\n}\n\n/* Setup everything for the job.  Assign tasks across\n * nodes based on the hostlist given and create the network table used\n * on all nodes of the job.\n *\n * Used by: slurmctld\n */\nextern int\nnrt_build_jobinfo(slurm_nrt_jobinfo_t *jp, hostlist_t hl,\n\t\t  uint16_t *tasks_per_node, uint32_t **tids, bool sn_all,\n\t\t  char *adapter_name, nrt_adapter_t dev_type,\n\t\t  bool bulk_xfer, uint32_t bulk_xfer_resources,\n\t\t  bool ip_v4, bool user_space, char *protocol, int instances,\n\t\t  int cau, int immed)\n{\n\tint nnodes, nprocs = 0;\n\thostlist_iterator_t hi;\n\tchar *host = NULL;\n\tint i, j;\n\tslurm_nrt_nodeinfo_t *node;\n\tint rc;\n\tnrt_adapter_t adapter_type = NRT_MAX_ADAPTER_TYPES;\n\tint network_id = -1;\n\tnrt_protocol_table_t *protocol_table = NULL;\n\tnrt_adapter_t def_adapter_type = NRT_ADAP_UNSUPPORTED;\n\tint def_adapter_count = 0;\n\tint def_adapter_inx   = -1;\n\n\n\tif ((jp == NULL) || (jp->magic == NRT_NULL_MAGIC)) {\n\t\tdebug2(\"(%s: %d: %s) job->switch_job was NULL\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn SLURM_ERROR;\n\t}\n\n\txassert(jp->magic == NRT_JOBINFO_MAGIC);\n\txassert(tasks_per_node);\n\n\tif (dev_type != NRT_MAX_ADAPTER_TYPES)\n\t\tadapter_type = dev_type;\n\n\tnnodes = hostlist_count(hl);\n\tfor (i = 0; i < nnodes; i++)\n\t\tnprocs += tasks_per_node[i];\n\n\tif ((nnodes <= 0) || (nprocs <= 0))\n\t\tslurm_seterrno_ret(EINVAL);\n\n\tjp->bulk_xfer   = (uint8_t) bulk_xfer;\n\tjp->bulk_xfer_resources = bulk_xfer_resources;\n\tjp->ip_v4       = (uint8_t) ip_v4;\n\tjp->job_key     = _next_key();\n\tjp->nodenames   = hostlist_copy(hl);\n\tjp->num_tasks   = nprocs;\n\tjp->user_space  = (uint8_t) user_space;\n\n\t/*\n\t * Peek at the first host to figure out tables_per_task and adapter\n\t * type. This driver assumes that all nodes have the same number of\n\t * adapters per node.  Bad things will happen if this assumption is\n\t * incorrect.\n\t */\n\thi = hostlist_iterator_create(hl);\n\thost = hostlist_next(hi);\n\tslurm_mutex_lock(&global_lock);\n\tnode = _find_node(nrt_state, host);\n\tif (host != NULL)\n\t\tfree(host);\n\tif (node && node->adapter_list) {\n\t\tfor (i = 0; i < node->adapter_count; i++) {\n\t\t\tnrt_adapter_t ad_type;\n\t\t\t/* Match specific adapter name */\n\t\t\tif (adapter_name &&\n\t\t\t    xstrcmp(adapter_name,\n\t\t\t\t    node->adapter_list[i].adapter_name)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t/* Match specific adapter type (IB, HFI, etc) */\n\t\t\tad_type = node->adapter_list[i].adapter_type;\n\t\t\tif ((adapter_type != NRT_MAX_ADAPTER_TYPES) &&\n\t\t\t    (adapter_type != ad_type))\n\t\t\t\tcontinue;\n\t\t\tif (jp->user_space && (ad_type == NRT_IPONLY))\n\t\t\t\tcontinue;\n\n\t\t\t/* Identify highest-priority adapter type */\n\t\t\tif (_adapter_type_pref(def_adapter_type) <\n\t\t\t    _adapter_type_pref(ad_type)) {\n\t\t\t\tdef_adapter_type  = ad_type;\n\t\t\t\tdef_adapter_count = 1;\n\t\t\t\tdef_adapter_inx   = i;\n\t\t\t} else if (_adapter_type_pref(def_adapter_type) ==\n\t\t\t           _adapter_type_pref(ad_type)) {\n\t\t\t\tdef_adapter_count++;\n\t\t\t}\n\t\t}\n\t\tif (!sn_all && (def_adapter_count > 0)) {\n\t\t\tif (!adapter_name) {\n\t\t\t\tadapter_name = node->\n\t\t\t\t\t       adapter_list[def_adapter_inx].\n\t\t\t\t\t       adapter_name;\n\t\t\t}\n\t\t\tnetwork_id = node->adapter_list[def_adapter_inx].\n\t\t\t\t     network_id;\n\t\t\tdef_adapter_count = 1;\n\t\t}\n\t\tif ((adapter_type == NRT_MAX_ADAPTER_TYPES) &&\n\t\t    (def_adapter_count > 0))\n\t\t\tadapter_type = def_adapter_type;\n\t}\n\tif (def_adapter_count >= 1) {\n\t\tjp->tables_per_task = def_adapter_count;\n\t} else {\n\t\tjp->tables_per_task = 0;\n\t\tinfo(\"switch/nrt: no adapter found for job\");\n\t}\n\tslurm_mutex_unlock(&global_lock);\n\tif (jp->tables_per_task == 0) {\n\t\thostlist_iterator_destroy(hi);\n\t\treturn SLURM_FAILURE;\n\t}\n\thostlist_iterator_reset(hi);\n\n\t/* Even for 1 node jobs the network needs to be set up. */\n\n\tif (adapter_type == NRT_IPONLY) {\n\t\t/* If tables_per_task != 0 for adapter_type == NRT_IPONLY\n\t\t * then the device's window count in NRT is incremented.\n\t\t * When we later read the adapter information, the adapter\n\t\t * reports a maximum window count of zero and a current\n\t\t * window count that is non zero. However, setting the value\n\t\t * to zero results in the MPI job failing. This appears to\n\t\t * be due to a bug in IBM's NRT library. */\n\t\t/* jp->tables_per_task = 0; */\n\t}\n\tif ((adapter_type == NRT_HFI) && jp->user_space) {\n\t\tjp->cau_indexes = (uint16_t) cau;\n\t\tjp->immed_slots = (uint16_t) immed;\n\t} else {\n\t\t/* The table load will always fail if cau_indexes or\n\t\t * immed_slots are non-zero unless running on an HFI network\n\t\t * with User Space communications, so ignore user options.\n\t\t * Alternately we can check for non-zero user option and\n\t\t * return SLURM_FAILURE here. */\n\t\tif ((cau != 0) || (immed != 0)) {\n\t\t\tdebug(\"switch/nrt: cau:%hu immed:%hu ignored for job\",\n\t\t\t      cau, immed);\n\t\t}\n\t\tjp->cau_indexes = 0;\n\t\tjp->immed_slots = 0;\n\t}\n\n\tif (instances <= 0) {\n\t\tinfo(\"switch/nrt: invalid instances specification (%d)\",\n\t\t     instances);\n\t\thostlist_iterator_destroy(hi);\n\t\treturn SLURM_FAILURE;\n\t}\n\tjp->tables_per_task *= instances;\n\n\tprotocol_table = _get_protocol_table(protocol);\n\tif ((protocol_table == NULL) ||\n\t    (protocol_table->protocol_table_cnt <= 0)) {\n\t\tinfo(\"switch/nrt: invalid protocol specification (%s)\",\n\t\t     protocol);\n\t\txfree(protocol_table);\n\t\thostlist_iterator_destroy(hi);\n\t\treturn SLURM_FAILURE;\n\t}\n\tjp->tables_per_task *= protocol_table->protocol_table_cnt;\n\n\t/* Allocate memory for each nrt_tableinfo_t */\n\tjp->tableinfo = (nrt_tableinfo_t *) xmalloc(jp->tables_per_task *\n\t\t\t\t\t\t    sizeof(nrt_tableinfo_t));\n\tfor (i = 0; i < jp->tables_per_task; i++) {\n\t\tjp->tableinfo[i].table_length = nprocs;\n\t\t/* jp->tableinfo[i].table allocated with windows function */\n\t}\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"Allocating windows: adapter_name:%s adapter_type:%s\",\n\t\t     adapter_name, _adapter_type_str(adapter_type));\n\t} else {\n\t\tdebug3(\"Allocating windows\");\n\t}\n\n\tif (jp->tables_per_task) {\n\t\tslurm_mutex_lock(&global_lock);\n\t\tfor  (i = 0; i < nnodes; i++) {\n\t\t\thost = hostlist_next(hi);\n\t\t\tif (!host)\n\t\t\t\terror(\"Failed to get next host\");\n\n\t\t\tfor (j = 0; j < tasks_per_node[i]; j++) {\n\t\t\t\tif (adapter_name == NULL) {\n\t\t\t\t\trc = _allocate_windows_all(jp, host, i,\n\t\t\t\t\t\t\t\ttids[i][j],\n\t\t\t\t\t\t\t\tadapter_type,\n\t\t\t\t\t\t\t\tnetwork_id,\n\t\t\t\t\t\t\t\tprotocol_table,\n\t\t\t\t\t\t\t\tinstances, j);\n\t\t\t\t} else {\n\t\t\t\t\trc = _allocate_window_single(\n\t\t\t\t\t\t\t\tadapter_name,\n\t\t\t\t\t\t\t\tjp, host, i,\n\t\t\t\t\t\t\t\ttids[i][j],\n\t\t\t\t\t\t\t\tadapter_type,\n\t\t\t\t\t\t\t\tnetwork_id,\n\t\t\t\t\t\t\t\tprotocol_table,\n\t\t\t\t\t\t\t\tinstances, j);\n\t\t\t\t}\n\t\t\t\tif (rc != SLURM_SUCCESS) {\n\t\t\t\t\tslurm_mutex_unlock(&global_lock);\n\t\t\t\t\tgoto fail;\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree(host);\n\t\t}\n\t\tslurm_mutex_unlock(&global_lock);\n\t}\n\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_build_jobinfo\");\n\t\t_print_jobinfo(jp);\n\t}\n\n\thostlist_iterator_destroy(hi);\n\txfree(protocol_table);\n\treturn SLURM_SUCCESS;\n\nfail:\n\tfree(host);\n\thostlist_iterator_destroy(hi);\n\txfree(protocol_table);\n\t(void) nrt_job_step_complete(jp, hl);\t/* Release resources already\n\t\t\t\t\t\t * allocated */\n\t/* slurmctld will call nrt_free_jobinfo(jp) to free memory */\n\treturn SLURM_FAILURE;\n}\n\nstatic void\n_pack_tableinfo(nrt_tableinfo_t *tableinfo, Buf buf, slurm_nrt_jobinfo_t *jp,\n\t\tuint16_t protocol_version)\n{\n\tuint32_t adapter_type;\n\tbool ip_v4;\n\tint i, j;\n\n\txassert(tableinfo);\n\txassert(jp);\n\n\tip_v4 = jp->ip_v4;\n\tpackmem(tableinfo->adapter_name, NRT_MAX_ADAPTER_NAME_LEN, buf);\n\tadapter_type = tableinfo->adapter_type;\n\tpack32(adapter_type, buf);\n\tpack16(tableinfo->context_id, buf);\n\tpack32(tableinfo->instance, buf);\n\tpack64(tableinfo->network_id, buf);\n\tpackmem(tableinfo->protocol_name, NRT_MAX_PROTO_NAME_LEN, buf);\n\tif (!jp->user_space)\n\t\tadapter_type = NRT_IPONLY;\n\tpack16(tableinfo->table_id, buf);\n\tpack32(tableinfo->table_length, buf);\n\n\tif (adapter_type == NRT_IB) {\n\t\tnrt_ib_task_info_t *ib_tbl_ptr;\n\t\tfor (i = 0, ib_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, ib_tbl_ptr++) {\n\t\t\tpackmem(ib_tbl_ptr->device_name,\n\t\t\t\tNRT_MAX_DEVICENAME_SIZE, buf);\n\t\t\tpack32(ib_tbl_ptr->base_lid, buf);\n\t\t\tpack8(ib_tbl_ptr->lmc, buf);\n\t\t\tpack32(ib_tbl_ptr->node_number, buf);\n\t\t\tpack8(ib_tbl_ptr->port_id, buf);\n\t\t\tpack32(ib_tbl_ptr->task_id, buf);\n\t\t\tpack16(ib_tbl_ptr->win_id, buf);\n\t\t}\n\t} else if (adapter_type == NRT_IPONLY) {\n\t\tnrt_ip_task_info_t *ip_tbl_ptr;\n\t\tfor (i = 0, ip_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, ip_tbl_ptr++) {\n\t\t\tif (ip_v4) {\n\t\t\t\tpackmem((char *) &ip_tbl_ptr->ip.ipv4_addr,\n\t\t\t\t\tsizeof(in_addr_t), buf);\n\t\t\t} else {\n\t\t\t\tfor (j = 0; j < 16; j++) {\n\t\t\t\t\tpack8(ip_tbl_ptr->ip.ipv6_addr.\n\t\t\t\t\t      s6_addr[j], buf);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpack32(ip_tbl_ptr->node_number, buf);\n\t\t\tpack16(ip_tbl_ptr->reserved, buf);\n\t\t\tpack32(ip_tbl_ptr->task_id, buf);\n\t\t}\n\t} else if (adapter_type == NRT_HFI) {\n\t\tnrt_hfi_task_info_t *hfi_tbl_ptr;\n\t\tfor (i = 0, hfi_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, hfi_tbl_ptr++) {\n\t\t\tuint16_t tmp_16;\n\t\t\tuint8_t  tmp_8;\n\t\t\tpack32(hfi_tbl_ptr->task_id, buf);\n\t\t\ttmp_16 = hfi_tbl_ptr->lid;\n\t\t\tpack16(tmp_16, buf);\n\t\t\ttmp_8 = hfi_tbl_ptr->lpar_id;\n\t\t\tpack8(tmp_8, buf);\n\t\t\ttmp_8 = hfi_tbl_ptr->win_id;\n\t\t\tpack8(tmp_8, buf);\n\t\t}\n\t}\n#if NRT_VERSION < 1300\n\telse if ((adapter_type == NRT_HPCE) || (adapter_type == NRT_KMUX)) {\n\t\tnrt_hpce_task_info_t *hpce_tbl_ptr;\n\t\tfor (i = 0, hpce_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, hpce_tbl_ptr++) {\n\t\t\tpack32(hpce_tbl_ptr->task_id, buf);\n\t\t\tpack16(hpce_tbl_ptr->win_id, buf);\n\t\t\tpack32(hpce_tbl_ptr->node_number, buf);\n\t\t\tpackmem(hpce_tbl_ptr->device_name,\n\t\t\t\tNRT_MAX_DEVICENAME_SIZE, buf);\n\t\t}\n\t}\n#endif\n\telse {\n\t\terror(\"_pack_tableinfo: Missing support for adapter type %s\",\n\t\t      _adapter_type_str(adapter_type));\n\t}\n}\n\n/* Used by: all */\nextern int\nnrt_pack_jobinfo(slurm_nrt_jobinfo_t *j, Buf buf, uint16_t protocol_version)\n{\n\tint i;\n\n\txassert(buf);\n\n\t/*\n\t * There is nothing to pack, so pack in magic telling unpack not to\n\t * attempt to unpack anything.\n\t */\n\tif ((j == NULL) || (j->magic == NRT_NULL_MAGIC)) {\n\t\tpack32(NRT_NULL_MAGIC, buf);\n\t\treturn SLURM_SUCCESS;\n\t}\n\n\txassert(j->magic == NRT_JOBINFO_MAGIC);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_pack_jobinfo:\");\n\t\t_print_jobinfo(j);\n\t}\n\n\tpack32(j->magic, buf);\n\tpack32(j->job_key, buf);\n\tpack8(j->bulk_xfer, buf);\n\tpack32(j->bulk_xfer_resources, buf);\n\tpack16(j->cau_indexes, buf);\n\tpack16(j->immed_slots, buf);\n\tpack8(j->ip_v4, buf);\n\tpack8(j->user_space, buf);\n\tpack16(j->tables_per_task, buf);\n\tpack32(j->num_tasks, buf);\n\n\tfor (i = 0; i < j->tables_per_task; i++)\n\t\t_pack_tableinfo(&j->tableinfo[i], buf, j, protocol_version);\n\n\treturn SLURM_SUCCESS;\n}\n\n/* return 0 on success, -1 on failure */\nstatic int\n_unpack_tableinfo(nrt_tableinfo_t *tableinfo, Buf buf, slurm_nrt_jobinfo_t *jp,\n\t\t  uint16_t protocol_version)\n{\n\tuint32_t tmp_32, adapter_type;\n\tuint16_t tmp_16;\n\tuint8_t  tmp_8;\n\tchar *name_ptr;\n\tint i, j;\n\tbool ip_v4;\n\n\txassert(jp);\n\txassert(tableinfo);\n\n\tsafe_unpackmem_ptr(&name_ptr, &tmp_32, buf);\n\tif (tmp_32 != NRT_MAX_ADAPTER_NAME_LEN)\n\t\tgoto unpack_error;\n\tmemcpy(tableinfo->adapter_name, name_ptr, tmp_32);\n\tsafe_unpack32(&adapter_type, buf);\n\ttableinfo->adapter_type = (int) adapter_type;\n\tsafe_unpack16(&tableinfo->context_id, buf);\n\tsafe_unpack32(&tableinfo->instance, buf);\n\tsafe_unpack64(&tableinfo->network_id, buf);\n\tsafe_unpackmem_ptr(&name_ptr, &tmp_32, buf);\n\tif (tmp_32 != NRT_MAX_PROTO_NAME_LEN)\n\t\tgoto unpack_error;\n\tmemcpy(tableinfo->protocol_name, name_ptr, tmp_32);\n\tip_v4 = jp->ip_v4;\n\tif (!jp->user_space)\n\t\tadapter_type = NRT_IPONLY;\n\tsafe_unpack16(&tableinfo->table_id, buf);\n\tsafe_unpack32(&tableinfo->table_length, buf);\n\n\tif (adapter_type == NRT_IB) {\n\t\tnrt_ib_task_info_t *ib_tbl_ptr;\n\t\ttableinfo->table = (nrt_ib_task_info_t *)\n\t\t\t\t   xmalloc(tableinfo->table_length *\n\t\t\t\t   sizeof(nrt_ib_task_info_t));\n\t\tfor (i = 0, ib_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, ib_tbl_ptr++) {\n\t\t\tsafe_unpackmem(ib_tbl_ptr->device_name, &tmp_32, buf);\n\t\t\tif (tmp_32 != NRT_MAX_DEVICENAME_SIZE)\n\t\t\t\tgoto unpack_error;\n\t\t\tsafe_unpack32(&ib_tbl_ptr->base_lid, buf);\n\t\t\tsafe_unpack8(&ib_tbl_ptr->lmc, buf);\n\t\t\tsafe_unpack32(&ib_tbl_ptr->node_number, buf);\n\t\t\tsafe_unpack8(&ib_tbl_ptr->port_id, buf);\n\t\t\tsafe_unpack32(&ib_tbl_ptr->task_id, buf);\n\t\t\tsafe_unpack16(&ib_tbl_ptr->win_id, buf);\n\t\t}\n\t} else if (adapter_type == NRT_IPONLY) {\n\t\tnrt_ip_task_info_t *ip_tbl_ptr;\n\t\ttableinfo->table = (nrt_ip_task_info_t *)\n\t\t\t\t   xmalloc(tableinfo->table_length *\n\t\t\t\t   sizeof(nrt_ip_task_info_t));\n\t\tfor (i = 0, ip_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, ip_tbl_ptr++) {\n\t\t\tif (ip_v4) {\n\t\t\t\tsafe_unpackmem((char *)\n\t\t\t\t\t       &ip_tbl_ptr->ip.ipv4_addr,\n\t\t\t\t\t       &tmp_32, buf);\n\t\t\t\tif (tmp_32 != sizeof(in_addr_t))\n\t\t\t\t\tgoto unpack_error;\n\t\t\t} else {\n\t\t\t\tfor (j = 0; j < 16; j++) {\n\t\t\t\t\tsafe_unpack8(&ip_tbl_ptr->ip.ipv6_addr.\n\t\t\t\t\t\t     s6_addr[j], buf);\n\t\t\t\t}\n\t\t\t}\n\t\t\tsafe_unpack32(&ip_tbl_ptr->node_number, buf);\n\t\t\tsafe_unpack16(&ip_tbl_ptr->reserved, buf);\n\t\t\tsafe_unpack32(&ip_tbl_ptr->task_id, buf);\n\t\t}\n\t} else if (adapter_type == NRT_HFI) {\n\t\tnrt_hfi_task_info_t *hfi_tbl_ptr;\n\t\ttableinfo->table = (nrt_hfi_task_info_t *)\n\t\t\t\t   xmalloc(tableinfo->table_length *\n\t\t\t\t   sizeof(nrt_hfi_task_info_t));\n\t\tfor (i = 0, hfi_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, hfi_tbl_ptr++) {\n\n\t\t\tsafe_unpack32(&hfi_tbl_ptr->task_id, buf);\n\t\t\tsafe_unpack16(&tmp_16, buf);\n\t\t\thfi_tbl_ptr->lid = tmp_16;\n\t\t\tsafe_unpack8(&tmp_8, buf);\n\t\t\thfi_tbl_ptr->lpar_id = tmp_8;\n\t\t\tsafe_unpack8(&tmp_8, buf);\n\t\t\thfi_tbl_ptr->win_id = tmp_8;\n\t\t}\n\t}\n#if NRT_VERSION < 1300\n\telse if ((adapter_type == NRT_HPCE) || (adapter_type == NRT_KMUX)) {\n\t\tnrt_hpce_task_info_t *hpce_tbl_ptr;\n\t\ttableinfo->table = (nrt_hpce_task_info_t *)\n\t\t\t\t   xmalloc(tableinfo->table_length *\n\t\t\t\t   sizeof(nrt_hpce_task_info_t));\n\t\tfor (i = 0, hpce_tbl_ptr = tableinfo->table;\n\t\t     i < tableinfo->table_length;\n\t\t     i++, hpce_tbl_ptr++) {\n\t\t\tsafe_unpack32(&hpce_tbl_ptr->task_id, buf);\n\t\t\tsafe_unpack16(&hpce_tbl_ptr->win_id, buf);\n\t\t\tsafe_unpack32(&hpce_tbl_ptr->node_number, buf);\n\t\t\tsafe_unpackmem(hpce_tbl_ptr->device_name, &tmp_32,buf);\n\t\t\tif (tmp_32 != NRT_MAX_DEVICENAME_SIZE)\n\t\t\t\tgoto unpack_error;\n\t\t}\n\t}\n#endif\n\telse {\n\t\terror(\"_unpack_tableinfo: Missing support for adapter type %s\",\n\t\t      _adapter_type_str(adapter_type));\n\t}\n\n\treturn SLURM_SUCCESS;\n\nunpack_error: /* safe_unpackXX are macros which jump to unpack_error */\n\terror(\"unpack error in _unpack_tableinfo\");\n\treturn SLURM_ERROR;\n}\n\n/* Used by: all */\nextern int\nnrt_unpack_jobinfo(slurm_nrt_jobinfo_t **j_pptr, Buf buf,\n\t\t   uint16_t protocol_version)\n{\n\tint i;\n\tslurm_nrt_jobinfo_t *j;\n\n\txassert(j_pptr);\n\txassert(buf);\n\n\tnrt_alloc_jobinfo(j_pptr);\n\tj = *j_pptr;\n\n\tsafe_unpack32(&j->magic, buf);\n\n\tif (j->magic == NRT_NULL_MAGIC) {\n\t\tdebug2(\"(%s: %d: %s) Nothing to unpack.\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn SLURM_SUCCESS;\n\t}\n\n\txassert(j->magic == NRT_JOBINFO_MAGIC);\n\n\tsafe_unpack32(&j->job_key, buf);\n\tsafe_unpack8(&j->bulk_xfer, buf);\n\tsafe_unpack32(&j->bulk_xfer_resources, buf);\n\tsafe_unpack16(&j->cau_indexes, buf);\n\tsafe_unpack16(&j->immed_slots, buf);\n\tsafe_unpack8(&j->ip_v4, buf);\n\tsafe_unpack8(&j->user_space, buf);\n\tsafe_unpack16(&j->tables_per_task, buf);\n\tsafe_unpack32(&j->num_tasks, buf);\n\n\tj->tableinfo = (nrt_tableinfo_t *) xmalloc(j->tables_per_task *\n\t\t\t\t\t\t   sizeof(nrt_tableinfo_t));\n\tfor (i = 0; i < j->tables_per_task; i++) {\n\t\tif (_unpack_tableinfo(&j->tableinfo[i], buf, j,\n\t\t\t\t      protocol_version))\n\t\t\tgoto unpack_error;\n\t}\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_unpack_jobinfo:\");\n\t\t_print_jobinfo(j);\n\t}\n\n\treturn SLURM_SUCCESS;\n\nunpack_error:\n\terror(\"nrt_unpack_jobinfo error\");\n\n\tnrt_free_jobinfo(*j_pptr);\n\t*j_pptr = NULL;\n\n\tslurm_seterrno_ret(EUNPACK);\n\treturn SLURM_ERROR;\n}\n\n/* Used by: all */\nextern void\nnrt_free_jobinfo(slurm_nrt_jobinfo_t *jp)\n{\n\tint i;\n\tnrt_tableinfo_t *tableinfo;\n\n\tif (!jp)\n\t\treturn;\n\n\tif (jp->magic != NRT_JOBINFO_MAGIC) {\n\t\terror(\"jp is not a switch/nrt slurm_nrt_jobinfo_t\");\n\t\treturn;\n\t}\n\n\tjp->magic = 0;\n\tif ((jp->tables_per_task > 0) && (jp->tableinfo != NULL)) {\n\t\tfor (i = 0; i < jp->tables_per_task; i++) {\n\t\t\ttableinfo = &jp->tableinfo[i];\n\t\t\txfree(tableinfo->table);\n\t\t}\n\t}\n\txfree(jp->tableinfo);\n\tif (jp->nodenames)\n\t\thostlist_destroy(jp->nodenames);\n\n\txfree(jp);\n\tjp = NULL;\n\n\treturn;\n}\n\n/* Return data to code for which jobinfo is an opaque type.\n *\n * Used by: all\n */\nextern int\nnrt_get_jobinfo(slurm_nrt_jobinfo_t *jp, int key, void *data)\n{\n\tnrt_tableinfo_t **tableinfo = (nrt_tableinfo_t **) data;\n\tint *tables_per = (int *) data;\n\tint *job_key = (int *) data;\n\n\tif ((jp == NULL) || (jp->magic == NRT_NULL_MAGIC)) {\n\t\tdebug2(\"(%s: %d: %s) job->switch_job was NULL\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn SLURM_SUCCESS;\n\t}\n\n\txassert(jp->magic == NRT_JOBINFO_MAGIC);\n\n\tswitch (key) {\n\t\tcase NRT_JOBINFO_TABLEINFO:\n\t\t\t*tableinfo = jp->tableinfo;\n\t\t\tbreak;\n\t\tcase NRT_JOBINFO_TABLESPERTASK:\n\t\t\t*tables_per = (int) jp->tables_per_task;\n\t\t\tbreak;\n\t\tcase NRT_JOBINFO_KEY:\n\t\t\t*job_key = (int) jp->job_key;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tslurm_seterrno_ret(EINVAL);\n\t}\n\n\treturn SLURM_SUCCESS;\n}\n\n/*\n * Check up to \"retry\" times for \"window_id\" on \"adapter_name\"\n * to switch to the NRT_WIN_AVAILABLE.  Sleep one second between\n * each retry.\n *\n * Used by: slurmd\n */\nstatic int\n_wait_for_window_unloaded(char *adapter_name, nrt_adapter_t adapter_type,\n\t\t\t  nrt_window_id_t window_id, int retry)\n{\n\tint err, i, j;\n\tint rc = SLURM_ERROR;\n\tnrt_cmd_status_adapter_t status_adapter;\n\tnrt_status_t *status_array = NULL;\n\tnrt_window_id_t window_count;\n\n\tstatus_adapter.adapter_name = adapter_name;\n\tstatus_adapter.adapter_type = adapter_type;\n\tstatus_adapter.status_array = &status_array;\n\tstatus_adapter.window_count = &window_count;\n\n\tfor (i = 0; i < retry; i++) {\n\t\tif (i > 0)\n\t\t\tusleep(100000);\n\n\t\tif (status_array) {\n\t\t\tfree(status_array);\n\t\t\tstatus_array = NULL;\n\t\t}\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_STATUS_ADAPTER,\n\t\t\t\t   &status_adapter);\n\t\tif (err != NRT_SUCCESS) {\n\t\t\terror(\"nrt_status_adapter(%s, %s): %s\", adapter_name,\n\t\t\t      _adapter_type_str(adapter_type),\n\t\t\t      nrt_err_str(err));\n\t\t\tbreak;\n\t\t}\n\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\tinfo(\"_wait_for_window_unloaded\");\n\t\t\t_print_adapter_status(&status_adapter);\n\t\t}\n\t\tif (!status_array)\t/* Fix for CLANG false positive */\n\t\t\tbreak;\n\t\tfor (j = 0; j < window_count; j++) {\n\t\t\tif (status_array[j].window_id == window_id)\n\t\t\t\tbreak;\n\t\t}\n\t\tif (j >= window_count) {\n\t\t\terror(\"nrt_status_adapter(%s, %s), window %hu not \"\n\t\t\t      \"found\",\n\t\t\t      adapter_name, _adapter_type_str(adapter_type),\n\t\t\t      window_id);\n\t\t\tbreak;\n\t\t}\n\t\tdebug2(\"nrt_status_adapter(%s, %s), window %u state %s\",\n\t\t       adapter_name,\n\t\t       _adapter_type_str(adapter_type), window_id,\n\t\t       _win_state_str(status_array[j].state));\n\t\tif (status_array[j].state == NRT_WIN_AVAILABLE) {\n\t\t\trc = SLURM_SUCCESS;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (status_array)\n\t\tfree(status_array);\n\n\treturn rc;\n}\n\n/*\n * Look through the table and find all of the NRT that are for an adapter on\n * this node.  Wait until the window from each local NRT is in the\n * NRT_WIN_AVAILABLE.\n *\n * Used by: slurmd\n */\nstatic int\n_wait_for_all_windows(nrt_tableinfo_t *tableinfo)\n{\n\tint err, i, rc = SLURM_SUCCESS;\n\tint retry = 15;\n\tnrt_window_id_t window_id = 0;\n\n\tif (!my_lpar_id_set && !my_network_id_set)\n\t\t_get_my_id();\n\n\tfor (i = 0; i < tableinfo->table_length; i++) {\n\t\tif (tableinfo->adapter_type == NRT_IB) {\n\t\t\tnrt_ib_task_info_t *ib_tbl_ptr;\n\t\t\tib_tbl_ptr = (nrt_ib_task_info_t *) tableinfo->table;\n\t\t\tib_tbl_ptr += i;\n\t\t\tif (ib_tbl_ptr->node_number != my_network_id)\n\t\t\t\tcontinue;\n\t\t\twindow_id = ib_tbl_ptr->win_id;\n\t\t} else if (tableinfo->adapter_type == NRT_HFI) {\n\t\t\tnrt_hfi_task_info_t *hfi_tbl_ptr;\n\t\t\thfi_tbl_ptr = (nrt_hfi_task_info_t *) tableinfo->table;\n\t\t\thfi_tbl_ptr += i;\n\t\t\tif ((hfi_tbl_ptr->lpar_id != my_lpar_id) ||\n\t\t\t    (hfi_tbl_ptr->lid != my_lid))\n\t\t\t\tcontinue;\n\t\t\twindow_id = hfi_tbl_ptr->win_id;\n\t\t}\n#if NRT_VERSION < 1300\n\t\telse if ((tableinfo->adapter_type == NRT_HPCE) ||\n\t\t           (tableinfo->adapter_type == NRT_KMUX)) {\n\t\t\tnrt_hpce_task_info_t *hpce_tbl_ptr;\n\t\t\thpce_tbl_ptr = (nrt_hpce_task_info_t *) tableinfo->\n\t\t\t\t\t\t\t\ttable;\n\t\t\thpce_tbl_ptr += i;\n\t\t\tif (hpce_tbl_ptr->node_number != my_network_id)\n\t\t\t\tcontinue;\n\t\t\twindow_id = hpce_tbl_ptr->win_id;\n\t\t}\n#endif\n\t\telse {\n\t\t\terror(\"_wait_for_all_windows: Missing support for \"\n\t\t\t      \"adapter_type %s\",\n\t\t\t      _adapter_type_str(tableinfo->adapter_type));\n\t\t}\n\n\t\terr = _wait_for_window_unloaded(tableinfo->adapter_name,\n\t\t\t\t\t\ttableinfo->adapter_type,\n\t\t\t\t\t\twindow_id, retry);\n\t\tif (err != SLURM_SUCCESS) {\n\t\t\terror(\"Window %hu adapter %s did not \"\n\t\t\t      \"become free within %d seconds\",\n\t\t\t      window_id, tableinfo->adapter_name, retry);\n\t\t\trc = err;\n\t\t}\n\t}\n\n\treturn rc;\n}\n\n/* Load a network table on node.  If table contains more than one window\n * for a given adapter, load the table only once for that adapter.\n *\n * Used by: slurmd\n *\n * Notes on context_id and table_id from Bill LePera, IBM, 6/7/2012:\n *\n * Each NRT is uniquely identified by a combination of three elements: job_key,\n * context_id, and table_id.  context_id and table_id usually start at zero and\n * are incremented based on how many NRTs are required to define all the\n * resources used for a job, based on factors like striping, instances, and\n * number of protocols.\n *\n * For example, a scheduler building an NRT for a job using a single protocol,\n * single network (no striping), and a single instance would set both\n * context_id and table_id to zero.  A multi-protocol job (one that used both\n * MPI and PAMI, for example), would build at least one NRT for each protocol.\n * In this case, there would be two NRTs, with context_id 0 and 1.  If you are\n * still using a single network and single instance, the table_id's for both\n * NRTs would be zero, and these would be the only two NRTs needed for the job.\n *\n * The table_id is incremented on a per-protocol basis, based on number of\n * networks (or stripes) and number of instances.  For example, a single-\n * protocol job running across two networks using four instances would need\n * 2 * 4 = 8 NRTs, with context_id set to 0 for each, and table_id 0 - 7.  If\n * this same job was a multi-protocol job, you would need 16 NRTs total\n * (2 protocols * 2 networks * 4 instances), with context_id 0 and 1, and\n * table_id 0-7 within each protocol.\n */\nextern int\nnrt_load_table(slurm_nrt_jobinfo_t *jp, int uid, int pid, char *job_name)\n{\n\tint i;\n\tint err;\n\tchar *adapter_name;\n\tint rc;\n\tnrt_cmd_load_table_t load_table;\n\tnrt_table_info_t table_info;\n\n\tif ((jp == NULL) || (jp->magic == NRT_NULL_MAGIC)) {\n\t\tdebug2(\"(%s: %d: %s) job->switch_job was NULL\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn SLURM_ERROR;\n\t}\n\n\txassert(jp->magic == NRT_JOBINFO_MAGIC);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_load_table\");\n\t\t_print_jobinfo(jp);\n\t}\n\n\tfor (i = 0; i < jp->tables_per_task; i++) {\n\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\tnrt_adapter_t adapter_type;\n\t\t\tif (jp->user_space)\n\t\t\t\tadapter_type = jp->tableinfo[i].adapter_type;\n\t\t\telse\n\t\t\t\tadapter_type = NRT_IPONLY;\n\t\t\t_print_table(jp->tableinfo[i].table,\n\t\t\t\t     jp->tableinfo[i].table_length,\n\t\t\t\t     adapter_type, jp->ip_v4);\n\t\t}\n\n\t\tadapter_name = jp->tableinfo[i].adapter_name;\n\t\tif (jp->user_space) {\n\t\t\trc = _wait_for_all_windows(&jp->tableinfo[i]);\n\t\t\tif (rc != SLURM_SUCCESS)\n\t\t\t\treturn rc;\n\t\t}\n\n\t\tif (adapter_name == NULL)\n\t\t\tcontinue;\n\n\t\tmemset(&table_info, 0, sizeof(nrt_table_info_t));\n\t\ttable_info.num_tasks = jp->tableinfo[i].table_length;\n\t\ttable_info.job_key = jp->job_key;\n\t\t/* Enable job preeption and release of resources */\n#ifdef PREEMPT_RELEASE_RESOURCES_MASK\n\t\ttable_info.job_options = PREEMPT_RELEASE_RESOURCES_MASK;\n#endif\n\t\ttable_info.uid = uid;\n\t\ttable_info.network_id = jp->tableinfo[i].network_id;\n\t\ttable_info.pid = pid;\n\t\ttable_info.adapter_type = jp->tableinfo[i].adapter_type;\n\t\tif (jp->user_space)\n\t\t\ttable_info.is_user_space = 1;\n\t\tif (jp->ip_v4)\n\t\t\ttable_info.is_ipv4 = 1;\n\t\t/* IP V6: table_info.is_ipv4 initialized above by memset() */\n\t\ttable_info.context_id = jp->tableinfo[i].context_id;\n\t\ttable_info.table_id = jp->tableinfo[i].table_id;\n\t\tif (job_name) {\n\t\t\tchar *sep = strrchr(job_name,'/');\n\t\t\tif (sep)\n\t\t\t\tsep++;\n\t\t\telse\n\t\t\t\tsep = job_name;\n\t\t\tstrlcpy(table_info.job_name, sep,\n\t\t\t\tNRT_MAX_JOB_NAME_LEN);\n\t\t} else {\n\t\t\ttable_info.job_name[0] = '\\0';\n\t\t}\n\t\tstrlcpy(table_info.protocol_name,\n\t\t\tjp->tableinfo[i].protocol_name,\n\t\t\tNRT_MAX_PROTO_NAME_LEN);\n\t\ttable_info.use_bulk_transfer = jp->bulk_xfer;\n\t\ttable_info.bulk_transfer_resources = jp->bulk_xfer_resources;\n\t\t/* The following fields only apply to Power7 processors\n\t\t * and have no effect on x86 processors:\n\t\t * immed_send_slots_per_win\n\t\t * num_cau_indexes */\n\t\ttable_info.num_cau_indexes = jp->cau_indexes;\n\t\ttable_info.immed_send_slots_per_win = jp->immed_slots;\n\t\tload_table.table_info = &table_info;\n\t\tload_table.per_task_input = jp->tableinfo[i].table;\n\n\t\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\t\t_print_load_table(&load_table);\n\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_LOAD_TABLE,\n\t\t\t\t   &load_table);\n\t\tif (err != NRT_SUCCESS) {\n\t\t\terror(\"nrt_cmd_wrap(load table): %s\", nrt_err_str(err));\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t}\n\tumask(nrt_umask);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"nrt_load_table complete\");\n\n\treturn SLURM_SUCCESS;\n}\n\nstatic int\n_unload_window_all_jobs(char *adapter_name, nrt_adapter_t adapter_type,\n\t\t\tnrt_window_id_t window_id)\n{\n\tint err, i;\n\tnrt_cmd_unload_window_t unload_window;\n\tnrt_cmd_query_jobs_t nrt_jobs;\n\tnrt_job_key_t job_count, *job_keys = NULL;\n\n\tnrt_jobs.adapter_name = adapter_name;\n\tnrt_jobs.adapter_type = adapter_type;\n\tnrt_jobs.job_count = &job_count;\n\tnrt_jobs.job_keys = &job_keys;\n\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_JOBS, &nrt_jobs);\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(query_jobs, %s, %s): %s\",\n\t\t       adapter_name, _adapter_type_str(adapter_type),\n\t\t       nrt_err_str(err));\n\t\tif (job_keys)\n\t\t\tfree(job_keys);\n\t\treturn err;\n\t}\n\n\tfor (i = 0; i < job_count; i++) {\n\t\tunload_window.adapter_name = adapter_name;\n\t\tunload_window.adapter_type = adapter_type;\n\t\tunload_window.job_key = job_keys[i];\n\t\tunload_window.window_id = window_id;\n\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_UNLOAD_WINDOW,\n\t\t\t\t   &unload_window);\n\t\tif (err == NRT_SUCCESS) {\n\t\t\tinfo(\"nrt_cmd_wrap(unload_window, %s, %s, %u, %hu)\",\n\t\t\t      adapter_name, _adapter_type_str(adapter_type),\n\t\t\t      job_keys[i], window_id);\n\t\t}\n\t}\n\n\tif (job_keys)\n\t\tfree(job_keys);\n\treturn SLURM_FAILURE;\n}\n\nstatic int _unload_job_table(slurm_nrt_jobinfo_t *jp)\n{\n\tint err, i, rc = SLURM_SUCCESS;\n\tnrt_cmd_unload_table_t unload_table;\n\n\tunload_table.job_key = jp->job_key;\n\tfor (i = 0; i < jp->tables_per_task; i++) {\n\t\tunload_table.context_id = jp->tableinfo[i].context_id;\n\t\tunload_table.table_id   = jp->tableinfo[i].table_id;\n\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\tinfo(\"Unload table for job_key:%u \"\n\t\t\t     \"context_id:%u table_id:%u\",\n\t\t\t     unload_table.job_key, unload_table.context_id,\n\t\t\t     unload_table.table_id);\n\t\t\t}\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_UNLOAD_TABLE,\n\t\t\t\t   &unload_table);\n\t\tif (err != NRT_SUCCESS) {\n\t\t\terror(\"Unable to unload table for job_key:%u \"\n\t\t\t      \"context_id:%u table_id:%u error:%s\",\n\t\t\t      unload_table.job_key, unload_table.context_id,\n\t\t\t      unload_table.table_id, nrt_err_str(err));\n\t\t\trc = SLURM_ERROR;\n\t\t}\n\t}\n\treturn rc;\n}\n\n/* Assumes that, on error, new switch state information will be\n * read from node.\n *\n * Used by: slurmd\n */\nextern int\nnrt_unload_table(slurm_nrt_jobinfo_t *jp)\n{\n\tif ((jp == NULL) || (jp->magic == NRT_NULL_MAGIC)) {\n\t\tdebug2(\"(%s: %d: %s) job->switch_job was NULL\",\n\t\t       THIS_FILE, __LINE__, __func__);\n\t\treturn SLURM_ERROR;\n\t}\n\n\txassert(jp->magic == NRT_JOBINFO_MAGIC);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tinfo(\"nrt_unload_table\");\n\t\t_print_jobinfo(jp);\n\t}\n\n\treturn _unload_job_table(jp);\n}\n\nextern int\nnrt_fini(void)\n{\n\treturn SLURM_SUCCESS;\n}\n\nstatic void\n_free_libstate(slurm_nrt_libstate_t *lp)\n{\n\tint i;\n\n\tif (!lp)\n\t\treturn;\n\tif (lp->node_list != NULL) {\n\t\tfor (i = 0; i < lp->node_count; i++)\n\t\t\tnrt_free_nodeinfo(&lp->node_list[i], true);\n\t\txfree(lp->node_list);\n\t}\n\txfree(lp->hash_table);\n\txfree(lp);\n}\n\n/* Used by: slurmctld */\nstatic int\n_pack_libstate(slurm_nrt_libstate_t *lp, Buf buffer, uint16_t protocol_version)\n{\n\tint offset;\n\tint i;\n\n\txassert(lp);\n\txassert(lp->magic == NRT_LIBSTATE_MAGIC);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n \t\tinfo(\"_pack_libstate\");\n\t\t_print_libstate(lp);\n\t}\n\n\toffset = get_buf_offset(buffer);\n\tpackstr(NRT_STATE_VERSION, buffer);\n\tpack16(SLURM_PROTOCOL_VERSION, buffer);\n\tpack32(lp->magic, buffer);\n\tpack32(lp->node_count, buffer);\n\tfor (i = 0; i < lp->node_count; i++)\n\t\t(void)nrt_pack_nodeinfo(&lp->node_list[i], buffer,\n\t\t\t\t\tprotocol_version);\n\t/* don't pack hash_table, we'll just rebuild on restore */\n\tpack32(lp->key_index, buffer);\n\n\treturn(get_buf_offset(buffer) - offset);\n}\n\n/* Used by: slurmctld */\nextern void\nnrt_libstate_save(Buf buffer, bool free_flag)\n{\n\tslurm_mutex_lock(&global_lock);\n\n\tif (nrt_state != NULL)\n\t\t_pack_libstate(nrt_state, buffer, SLURM_PROTOCOL_VERSION);\n\n\t/* Clean up nrt_state since backup slurmctld can repeatedly\n\t * save and restore state */\n\tif (free_flag) {\n\t\t_free_libstate(nrt_state);\n\t\tnrt_state = NULL;\t/* freed above */\n\t}\n\tslurm_mutex_unlock(&global_lock);\n}\n\n/* Used by: slurmctld */\nstatic int\n_unpack_libstate(slurm_nrt_libstate_t *lp, Buf buffer)\n{\n\tchar *ver_str = NULL;\n\tuint32_t ver_str_len;\n\tuint16_t protocol_version = NO_VAL16;\n\tuint32_t node_count;\n\tint i;\n\n\t/* Validate state version */\n\tsafe_unpackstr_xmalloc(&ver_str, &ver_str_len, buffer);\n\tdebug3(\"Version string in job_state header is %s\", ver_str);\n\tif (ver_str && !xstrcmp(ver_str, NRT_STATE_VERSION))\n\t\tsafe_unpack16(&protocol_version, buffer);\n\n\tif (protocol_version == NO_VAL16) {\n\t\terror(\"******************************************************\");\n\t\terror(\"Can not recover switch/nrt state, incompatible version\");\n\t\terror(\"******************************************************\");\n\t\txfree(ver_str);\n\t\treturn EFAULT;\n\t}\n\txfree(ver_str);\n\n\txassert(lp->magic == NRT_LIBSTATE_MAGIC);\n\tsafe_unpack32(&lp->magic, buffer);\n\tsafe_unpack32(&node_count, buffer);\n\tfor (i = 0; i < node_count; i++) {\n\t\tif (_unpack_nodeinfo(NULL, buffer, false,\n\t\t\t\t     protocol_version) != SLURM_SUCCESS)\n\t\t\tgoto unpack_error;\n\t}\n\tif (lp->node_count != node_count) {\n\t\terror(\"Failed to recover switch state of all nodes (%u of %u)\",\n\t\t      lp->node_count, node_count);\n\t\treturn SLURM_ERROR;\n\t}\n\tsafe_unpack32(&lp->key_index, buffer);\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t \tinfo(\"_unpack_libstate\");\n\t\t_print_libstate(lp);\n\t}\n\n\treturn SLURM_SUCCESS;\n\nunpack_error:\n\terror(\"unpack error in _unpack_libstate\");\n\tslurm_seterrno_ret(EBADMAGIC_NRT_LIBSTATE);\n\treturn SLURM_ERROR;\n}\n\n/* Used by: slurmctld */\nextern int\nnrt_libstate_restore(Buf buffer)\n{\n\tint rc;\n\n\tslurm_mutex_lock(&global_lock);\n\txassert(!nrt_state);\n\n\tnrt_state = _alloc_libstate();\n\tif (!nrt_state) {\n\t\terror(\"nrt_libstate_restore nrt_state is NULL\");\n\t\tslurm_mutex_unlock(&global_lock);\n\t\treturn SLURM_FAILURE;\n\t}\n\trc = _unpack_libstate(nrt_state, buffer);\n\tslurm_mutex_unlock(&global_lock);\n\n\treturn rc;\n}\n\nextern int\nnrt_libstate_clear(void)\n{\n\tint i, j, k;\n\tslurm_nrt_nodeinfo_t *node;\n\tslurm_nrt_adapter_t *adapter;\n\tslurm_nrt_window_t *window;\n\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"Clearing state on all windows in global NRT state\");\n\telse\n\t\tdebug3(\"Clearing state on all windows in global NRT state\");\n\n\tslurm_mutex_lock(&global_lock);\n\tif (!nrt_state || !nrt_state->node_list) {\n\t\terror(\"nrt_state or node_list not initialized!\");\n\t\tslurm_mutex_unlock(&global_lock);\n\t\treturn SLURM_ERROR;\n\t}\n\n\tfor (i = 0; i < nrt_state->node_count; i++) {\n\t\tnode = &nrt_state->node_list[i];\n\t\tif (!node->adapter_list)\n\t\t\tcontinue;\n\t\tfor (j = 0; j < node->adapter_count; j++) {\n\t\t\tadapter = &node->adapter_list[i];\n\t\t\tif (!adapter || !adapter->window_list)\n\t\t\t\tcontinue;\n\t\t\tfor (k = 0; k < adapter->window_count; k++) {\n\t\t\t\twindow = &adapter->window_list[k];\n\t\t\t\tif (!window)\n\t\t\t\t\tcontinue;\n\t\t\t\twindow->state = NRT_WIN_UNAVAILABLE;\n\t\t\t}\n\t\t}\n\t}\n\tslurm_mutex_unlock(&global_lock);\n\n\treturn SLURM_SUCCESS;\n}\n\nextern int\nnrt_clear_node_state(void)\n{\n\tstatic bool first_use = true;\n\tint err, i, j, k, rc = SLURM_SUCCESS;\n\tnrt_cmd_query_adapter_types_t adapter_types;\n\tunsigned int num_adapter_types;\n\tnrt_adapter_t adapter_type[NRT_MAX_ADAPTER_TYPES];\n\tnrt_cmd_query_adapter_names_t adapter_names;\n\tunsigned int max_windows, num_adapter_names;\n\tnrt_cmd_status_adapter_t adapter_status;\n\tnrt_window_id_t window_count;\n\tnrt_status_t *status_array = NULL;\n\twin_state_t state;\n\tnrt_cmd_clean_window_t clean_window;\n\tchar window_str[128];\n\tbool orphan_procs = false;\n\thostset_t hs = NULL;\n\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"nrt_clear_node_state: begin\");\n\n\tadapter_types.num_adapter_types = &num_adapter_types;\n\tadapter_types.adapter_types = adapter_type;\n\tfor (i = 0; i < 2; i++) {\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_TYPES,\n\t\t\t\t   &adapter_types);\n\t\tif (err != NRT_EAGAIN)\n\t\t\tbreak;\n\t\terror(\"nrt_cmd_wrap(adapter_types): %s\", nrt_err_str(err));\n\t\terror(\"Is pnsd daemon started? Retrying...\");\n\t\t/* Run \"/opt/ibmhpc/pecurrent/ppe.pami/pnsd/pnsd -A\" */\n\t\tsleep(5);\n\t}\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(adapter_types): %s\", nrt_err_str(err));\n\t\treturn SLURM_ERROR;\n\t}\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tfor (i = 0; i < num_adapter_types; i++) {\n\t\t\tinfo(\"nrt_cmd_wrap(adapter_types): %s\",\n\t\t\t    _adapter_type_str(adapter_types.adapter_types[i]));\n\t\t}\n\t}\n\n\tfor (i = 0; i < num_adapter_types; i++) {\n\t\tadapter_names.adapter_type = adapter_type[i];\n\t\tadapter_names.num_adapter_names = &num_adapter_names;\n\t\tadapter_names.max_windows = &max_windows;\n\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_ADAPTER_NAMES,\n\t\t\t\t   &adapter_names);\n\t\tif (err != NRT_SUCCESS) {\n\t\t\terror(\"nrt_cmd_wrap(adapter_names, %s): %s\",\n\t\t\t      _adapter_type_str(adapter_names.adapter_type),\n\t\t\t      nrt_err_str(err));\n\t\t\trc = SLURM_ERROR;\n\t\t\tcontinue;\n\t\t}\n\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\tfor (j = 0; j < num_adapter_names; j++) {\n\t\t\t\tinfo(\"nrt_cmd_wrap(adapter_names, %s, %s) \"\n\t\t\t\t     \"max_windows: %hu\",\n\t\t\t\t     adapter_names.adapter_names[j],\n\t\t\t\t     _adapter_type_str(adapter_names.\n\t\t\t\t\t\t       adapter_type),\n\t\t\t\t     max_windows);\n\t\t\t}\n\t\t}\n\n\t\tfor (j = 0; j < num_adapter_names; j++) {\n\t\t\tif (status_array) {\n\t\t\t\tfree(status_array);\n\t\t\t\tstatus_array = NULL;\n\t\t\t}\n\t\t\tadapter_status.adapter_name = adapter_names.\n\t\t\t\t\t\t      adapter_names[j];\n\t\t\tadapter_status.adapter_type = adapter_names.\n\t\t\t\t\t\t      adapter_type;\n\t\t\tadapter_status.status_array = &status_array;\n\t\t\tadapter_status.window_count = &window_count;\n\t\t\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_STATUS_ADAPTER,\n\t\t\t\t\t   &adapter_status);\n\t\t\tif (err != NRT_SUCCESS) {\n\t\t\t\terror(\"nrt_cmd_wrap(status_adapter, %s, %s): %s\",\n\t\t\t\t      adapter_status.adapter_name,\n\t\t\t\t      _adapter_type_str(adapter_status.\n\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t      nrt_err_str(err));\n\t\t\t\trc = SLURM_ERROR;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (window_count > max_windows) {\n\t\t\t\t/* This happens if IP_ONLY devices are\n\t\t\t\t * allocated with tables_per_task > 0 */\n\t\t\t\tchar *reason;\n\t\t\t\tif (adapter_status.adapter_type == NRT_IPONLY)\n\t\t\t\t\treason = \", Known libnrt bug\";\n\t\t\t\telse\n\t\t\t\t\treason = \"\";\n\t\t\t\tif (first_use) {\n\t\t\t\t\terror(\"nrt_cmd_wrap(status_adapter, \"\n\t\t\t\t\t      \"%s, %s): window_count > \"\n\t\t\t\t\t      \"max_windows (%u > %hu)%s\",\n\t\t\t\t\t      adapter_status.adapter_name,\n\t\t\t\t\t      _adapter_type_str(adapter_status.\n\t\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t\t      window_count, max_windows,\n\t\t\t\t\t      reason);\n\t\t\t\t} else {\n\t\t\t\t\tdebug(\"nrt_cmd_wrap(status_adapter, \"\n\t\t\t\t\t      \"%s, %s): window_count > \"\n\t\t\t\t\t      \"max_windows (%u > %hu)%s\",\n\t\t\t\t\t      adapter_status.adapter_name,\n\t\t\t\t\t      _adapter_type_str(adapter_status.\n\t\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t\t      window_count, max_windows,\n\t\t\t\t\t      reason);\n\t\t\t\t}\n\t\t\t\t/* Reset value to avoid logging bad data */\n\t\t\t\twindow_count = max_windows;\n\t\t\t}\n\t\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\t\tinfo(\"nrt_cmd_wrap(status_adapter, %s, %s) \"\n\t\t\t\t     \"window_count: %hu\",\n\t\t\t\t     adapter_status.adapter_name,\n\t\t\t\t     _adapter_type_str(adapter_status.\n\t\t\t\t\t\t       adapter_type),\n\t\t\t\t     window_count);\n\t\t\t\tfor (k = 0; k < window_count; k++) {\n\t\t\t\t\twin_state_t state = status_array[k].\n\t\t\t\t\t\t\t    state;\n\t\t\t\t\tif ((state == NRT_WIN_AVAILABLE) &&\n\t\t\t\t\t    (k >= NRT_DEBUG_CNT))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tinfo(\"window_id:%d uid:%d pid:%d \"\n\t\t\t\t\t     \"state:%s\",\n\t\t\t\t\t     status_array[k].window_id,\n\t\t\t\t\t     status_array[k].uid,\n\t\t\t\t\t     status_array[k].client_pid,\n\t\t\t\t\t     _win_state_str(state));\n\t\t\t\t}\n\n\t\t\t\ths = hostset_create(\"\");\n\t\t\t}\n\t\t\tfor (k = 0; k < window_count; k++) {\n\t\t\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\t\t\tsnprintf(window_str,\n\t\t\t\t\t\t sizeof(window_str), \"%d\",\n\t\t\t\t\t\t clean_window.window_id);\n\t\t\t\t\thostset_insert(hs, window_str);\n\t\t\t\t}\n\t\t\t\tstate = status_array[k].state;\n\t\t\t\tif ((state == NRT_WIN_RESERVED) ||\n\t\t\t\t    (state == NRT_WIN_READY) ||\n\t\t\t\t    (state == NRT_WIN_RUNNING)) {\n\t\t\t\t\t_unload_window_all_jobs(\n\t\t\t\t\t\tadapter_status.adapter_name,\n\t\t\t\t\t\tadapter_status.adapter_type,\n\t\t\t\t\t\tstatus_array[k].window_id);\n\t\t\t\t}\n\t\t\t\tclean_window.adapter_name = adapter_names.\n\t\t\t\t\t\t\t    adapter_names[j];\n\t\t\t\tclean_window.adapter_type = adapter_names.\n\t\t\t\t\t\t\t    adapter_type;\n\t\t\t\tclean_window.leave_inuse_or_kill = KILL;\n\t\t\t\tclean_window.window_id = status_array[k].\n\t\t\t\t\t\t\t window_id;\n\t\t\t\terr = nrt_cmd_wrap(NRT_VERSION,\n\t\t\t\t\t\t   NRT_CMD_CLEAN_WINDOW,\n\t\t\t\t\t\t   &clean_window);\n\t\t\t\tif (err == NRT_WRONG_WINDOW_STATE)\n\t\t\t\t\torphan_procs = true;\n\t\t\t\tif (err != NRT_SUCCESS) {\n\t\t\t\t\terror(\"nrt_cmd_wrap(clean_window, \"\n\t\t\t\t\t      \"%s, %s, %u): %s\",\n\t\t\t\t\t      clean_window.adapter_name,\n\t\t\t\t\t      _adapter_type_str(clean_window.\n\t\t\t\t\t\t\t\tadapter_type),\n\t\t\t\t\t      clean_window.window_id,\n\t\t\t\t\t      nrt_err_str(err));\n\t\t\t\t\trc = SLURM_ERROR;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\t\t\tif (hostset_count(hs) > 0) {\n\t\t\t\t\thostset_ranged_string(hs,\n\t\t\t\t\t\t\t      sizeof(window_str),\n\t\t\t\t\t\t\t      window_str);\n\t\t\t\t\tinfo(\"nrt_cmd_wrap(clean_window, \"\n\t\t\t\t\t     \"%s, %s, %s)\",\n\t\t\t\t\t     adapter_names.adapter_names[j],\n\t\t\t\t\t     _adapter_type_str(adapter_names.\n\t\t\t\t\t\t\t       adapter_type),\n\t\t\t\t\t     window_str);\n\t\t\t\t}\n\t\t\t\thostset_destroy(hs);\n\t\t\t}\n\t\t}\n\t}\n\tif (status_array)\n\t\tfree(status_array);\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"nrt_clear_node_state: complete:%d\", rc);\n\tif (orphan_procs) {\n\t\terror(\"switch/nrt: THERE APPEAR TO BE ORPHAN PROCESSES \"\n\t\t      \"HOLDING SWITCH WINDOWS\");\n\t\terror(\"switch/nrt: You must manually find and kill these \"\n\t\t      \"processes before using this node\");\n\t\terror(\"switch/nrt: Use of ProctrackType=proctrack/cgroup \"\n\t\t      \"generally prevents this\");\n\t}\n\n\treturn rc;\n}\n\nextern char *nrt_err_str(int rc)\n{\n\tstatic char str[16];\n\n\tswitch (rc) {\n\tcase NRT_ALREADY_LOADED:\n\t\treturn \"Already loaded\";\n\tcase NRT_BAD_VERSION:\n\t\treturn \"Bad version\";\n\tcase NRT_CAU_EXCEEDED:\n\t\treturn \"CAU index request exeeds available resources\";\n\tcase NRT_CAU_RESERVE:\n\t\treturn \"Error during CAU index reserve\";\n\tcase NRT_CAU_UNRESERVE:\n\t\treturn \"Error during CAU index unreserve\";\n\tcase NRT_EADAPTER:\n\t\treturn \"Invalid adapter name\";\n\tcase NRT_EADAPTYPE:\n\t\treturn \"Invalid adapter type\";\n\tcase NRT_EAGAIN:\n\t\treturn \"Try call again later\";\n\tcase NRT_EINVAL:\n\t\treturn \"Invalid input paramter\";\n\tcase NRT_EIO:\n\t\treturn \"Adapter reported a DOWN state\";\n\tcase NRT_EMEM:\n\t\treturn \"Memory allocation error\";\n\tcase NRT_EPERM:\n\t\treturn \"Permission denied, not root\";\n\tcase NRT_ERR_COMMAND_TYPE:\n\t\treturn \"Invalid command type\";\n\tcase NRT_ESYSTEM:\n\t\treturn \"A system error occured\";\n\tcase NRT_IMM_SEND_RESERVE:\n\t\treturn \"Error during immediate send slot reserve\";\n\tcase NRT_NO_FREE_WINDOW:\n\t\treturn \"No free window\";\n\tcase NRT_NO_RDMA_AVAIL:\n\t\treturn \"No RDMA windows available\";\n\tcase NRT_NTBL_LOAD_FAILED:\n\t\treturn \"Failed to load NTBL\";\n\tcase NRT_NTBL_NOT_FOUND:\n\t\treturn \"NTBL not found\";\n\tcase NRT_NTBL_UNLOAD_FAILED:\n\t\treturn \"Failed to unload NTBL\";\n\tcase NRT_OP_NOT_VALID:\n\t\treturn \"Requested operation not valid for given device\";\n\tcase NRT_PNSDAPI:\n\t\treturn \"Error communicating with Protocol Network Services \"\n\t\t       \"Daemon\";\n\tcase NRT_RDMA_CLEAN_FAILED:\n\t\treturn \"Task RDMA cleanup failed\";\n\tcase NRT_SUCCESS:\n\t\treturn \"Success\";\n\tcase NRT_TIMEOUT:\n\t\treturn \"No response back from PNSD/job\";\n\tcase NRT_UNKNOWN_ADAPTER:\n\t\treturn \"Unknown adaper\";\n\tcase NRT_WIN_CLOSE_FAILED:\n\t\treturn \"Task can not close window\";\n\tcase NRT_WIN_OPEN_FAILED:\n\t\treturn \"Task can not open window\";\n\tcase NRT_WRONG_PREEMPT_STATE:\n\t\treturn \"Invalid preemption state\";\n\tcase NRT_WRONG_WINDOW_STATE:\n\t\treturn \"Wrong window state\";\n\t}\n\n\tsnprintf(str, sizeof(str), \"%d\", rc);\n\treturn str;\n}\n\n\n/* Determine if a token is the name of an adapter\n * IN token - token from job's \"network\" specification\n * IN list - hostlist of allocated nodes\n * RET - True if token is a adapter name, false otherwise */\nextern bool nrt_adapter_name_check(char *token, hostlist_t hl)\n{\n\tint i;\n\thostlist_iterator_t hi;\n\tslurm_nrt_nodeinfo_t *node;\n\tchar *host;\n\tbool name_found = false;\n\n\tif (!token || !hl)\n\t\treturn name_found;\n\n\thi = hostlist_iterator_create(hl);\n\thost = hostlist_next(hi);\n\thostlist_iterator_destroy(hi);\n\tslurm_mutex_lock(&global_lock);\n\tnode = _find_node(nrt_state, host);\n\tif (host)\n\t\tfree(host);\n\tif (node && node->adapter_list) {\n\t\tfor (i = 0; i < node->adapter_count; i++) {\n\t\t\tif (xstrcmp(token,node->adapter_list[i].adapter_name))\n\t\t\t\tcontinue;\n\t\t\tname_found = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\tslurm_mutex_unlock(&global_lock);\n\n\treturn name_found;\n}\n\nstatic preemption_state_t _job_preempt_state(nrt_job_key_t job_key)\n{\n\tnrt_cmd_query_preemption_state_t preempt_state;\n\tpreemption_state_t state;\n\tint err;\n\n\tpreempt_state.job_key\t= job_key;\n\tpreempt_state.state\t= &state;\n\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_QUERY_PREEMPTION_STATE,\n\t\t\t   &preempt_state);\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(preempt_state, %u): %s\",\n\t\t      job_key, nrt_err_str(err));\n\t\treturn PES_INIT;\t/* No good return value for error */\n\t}\n\treturn state;\n}\n\nstatic char *_job_state_str(preemption_state_t curr_state)\n{\n\tstatic char buf[10];\n\n\tswitch (curr_state) {\n\tcase PES_INIT:\n\t\treturn \"Init\";\n\tcase PES_JOB_RUNNING:\n\t\treturn \"Running\";\n\tcase PES_PREEMPTION_INPROGRESS:\n\t\treturn \"Preemption_in_progress\";\n\tcase PES_JOB_PREEMPTED:\n\t\treturn \"Preempted\";\n\tcase PES_PREEMPTION_FAILED:\n\t\treturn \"Preemption_failed\";\n\tcase PES_RESUME_INPROGRESS:\n\t\treturn \"Resume_in_progress\";\n\tcase PES_RESUME_FAILED:\n\t\treturn \"Resume_failed\";\n\tdefault:\n\t\tsnprintf(buf, sizeof(buf), \"%d\", curr_state);\n\t\treturn buf;\n\t}\n}\n\n/* Return 0 when job in desired state, -1 on error */\nstatic int _wait_job(nrt_job_key_t job_key, preemption_state_t want_state,\n\t\t     int max_wait_secs)\n{\n\tpreemption_state_t curr_state;\n\tchar *state_str = NULL;\n\ttime_t start_time = time(NULL), now;\n\tint i;\n\n\tfor (i = 0; ; i++) {\n\t\tif (i)\n\t\t\tusleep(100000);\n\t\tcurr_state = _job_preempt_state(job_key);\n\t\t/* Job's state is initially PES_INIT, even when running.\n\t\t * It only goes to state PES_JOB_RUNNING after suspend and\n\t\t * resume. */\n\t\tif ((curr_state == want_state) ||\n\t\t    ((curr_state == PES_INIT) &&\n\t\t     (want_state == PES_JOB_RUNNING))) {\n\t\t\tdebug(\"switch/nrt: Desired job state in %d msec\",\n\t\t\t      (100 * i));\n\t\t\treturn 0;\n\t\t}\n\t\t/* info(\"job_key:%u state:%d\", job_key, curr_state); */\n\t\tif ((curr_state == PES_PREEMPTION_FAILED) ||\n\t\t    (curr_state == PES_RESUME_FAILED))\n\t\t\treturn -1;\n\t\tif (want_state == PES_JOB_RUNNING) {\n\t\t\tif ((curr_state != PES_INIT) &&\n\t\t\t    (curr_state != PES_RESUME_INPROGRESS))\n\t\t\t\treturn -1;\n\t\t} else if (want_state == PES_JOB_PREEMPTED) {\n\t\t\tif (curr_state != PES_PREEMPTION_INPROGRESS)\n\t\t\t\treturn 0;\n\t\t} else {\n\t\t\terror(\"_wait_job: invalid desired state: %d\",\n\t\t\t      want_state);\n\t\t\treturn -1;\n\t\t}\n\t\tif (max_wait_secs) {\n\t\t\tnow = time(NULL);\n\t\t\tif ((now - start_time) > max_wait_secs)\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (want_state == PES_JOB_RUNNING)\n\t\tstate_str = \"Running\";\n\telse if (want_state == PES_JOB_PREEMPTED)\n\t\tstate_str = \"Preempted\";\n\terror(\"switch/nrt: Desired job state of %s not reached in %d sec, \"\n\t      \"Current job state is %s\",\n\t      state_str, (int)(now - start_time), _job_state_str(curr_state));\n\treturn -1;\n}\n\nextern int nrt_preempt_job_test(slurm_nrt_jobinfo_t *jp)\n{\n#ifdef PREEMPT_RELEASE_RESOURCES_MASK\n\tif (jp->cau_indexes) {\n\t\tinfo(\"Unable to preempt job with allocated CAU\");\n\t\treturn SLURM_ERROR;\n\t}\n\treturn SLURM_SUCCESS;\n#else\n\tinfo(\"switch/nrt: This version of libnrt.so does not support job \"\n\t     \"suspend/resume\");\n\treturn SLURM_ERROR;\n#endif\n}\n\nextern void nrt_suspend_job_info_get(slurm_nrt_jobinfo_t *jp,\n\t\t\t\t     void **suspend_info)\n{\n\tslurm_nrt_suspend_info_t *susp_info_ptr;\n\tif (!jp)\n\t\treturn;\n\tif (*suspend_info == NULL) {\n\t\tsusp_info_ptr = xmalloc(sizeof(slurm_nrt_suspend_info_t));\n\t\tsusp_info_ptr->job_key_array_size = 8;\n\t\tsusp_info_ptr->job_key = xmalloc(sizeof(nrt_job_key_t) * 8);\n\t\t*suspend_info = susp_info_ptr;\n\t} else {\n\t\tsusp_info_ptr = *suspend_info;\n\t\tif ((susp_info_ptr->job_key_count + 1) >=\n\t\t    susp_info_ptr->job_key_array_size) {\n\t\t\tsusp_info_ptr->job_key_array_size *= 2;\n\t\t\txrealloc(susp_info_ptr->job_key,\n\t\t\t\t sizeof(nrt_job_key_t) *\n\t\t\t\t susp_info_ptr->job_key_array_size);\n\t\t}\n\t}\n\tsusp_info_ptr->job_key[susp_info_ptr->job_key_count++] = jp->job_key;\n}\n\nextern void nrt_suspend_job_info_pack(void *suspend_info, Buf buffer,\n\t\t\t\t      uint16_t protocol_version)\n{\n\tslurm_nrt_suspend_info_t *susp_info_ptr;\n\n\tif (!suspend_info) {\n\t\tuint32_t tmp_32 = 0;\n\t\tpack32(tmp_32, buffer);\n\t\treturn;\n\t}\n\tsusp_info_ptr = (slurm_nrt_suspend_info_t *) suspend_info;\n\tpack32(susp_info_ptr->job_key_count, buffer);\n\tpack32_array(susp_info_ptr->job_key, susp_info_ptr->job_key_count,\n\t\t     buffer);\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tint i;\n\t\tfor (i = 0; i < susp_info_ptr->job_key_count; i++) {\n\t\t\tinfo(\"nrt_suspend_job_info_pack: job_key[%d]:%u\",\n\t\t\t     i, susp_info_ptr->job_key[i]);\n\t\t}\n\t}\n}\n\nextern int nrt_suspend_job_info_unpack(void **suspend_info, Buf buffer,\n\t\t\t\t       uint16_t protocol_version)\n{\n\tslurm_nrt_suspend_info_t *susp_info_ptr = NULL;\n\tuint32_t tmp_32;\n\n\t*suspend_info = NULL;\n\tsafe_unpack32(&tmp_32, buffer);\n\tif (tmp_32 == 0)\n\t\treturn SLURM_SUCCESS;\n\n\tsusp_info_ptr = xmalloc(sizeof(slurm_nrt_suspend_info_t));\n\tsusp_info_ptr->job_key_count = tmp_32;\n\tsusp_info_ptr->job_key_array_size = tmp_32;\n\tsafe_unpack32_array(&susp_info_ptr->job_key, &tmp_32, buffer);\n\tif (tmp_32 != susp_info_ptr->job_key_count)\n\t\tgoto unpack_error;\n\t*suspend_info = susp_info_ptr;\n\tif (debug_flags & DEBUG_FLAG_SWITCH) {\n\t\tint i;\n\t\tfor (i = 0; i < susp_info_ptr->job_key_count; i++) {\n\t\t\tinfo(\"nrt_suspend_job_info_pack: job_key[%d]:%u\",\n\t\t\t     i, susp_info_ptr->job_key[i]);\n\t\t}\n\t}\n\n\treturn SLURM_SUCCESS;\n\nunpack_error:\n\terror(\"nrt_suspend_job_info_unpack: unpack error\");\n\txfree(susp_info_ptr->job_key);\n\txfree(susp_info_ptr);\n\treturn SLURM_ERROR;\n}\n\nextern void nrt_suspend_job_info_free(void *suspend_info)\n{\n\tslurm_nrt_suspend_info_t *susp_info_ptr;\n\n\tsusp_info_ptr = (slurm_nrt_suspend_info_t *) suspend_info;\n\tif (susp_info_ptr) {\n\t\txfree(susp_info_ptr->job_key);\n\t\txfree(susp_info_ptr);\n\t}\n}\n\nstatic int _preempt_job(nrt_job_key_t job_key, int max_wait_secs)\n{\n\tnrt_cmd_preempt_job_t preempt_job;\n\tint err;\n\n\tpreempt_job.job_key\t= job_key;\n#ifdef PREEMPT_RELEASE_RESOURCES_MASK\n\tpreempt_job.option\t= PREEMPT_RELEASE_RESOURCES_MASK;\n#else\n\tpreempt_job.option\t= 0x0001;\n#endif\n\tpreempt_job.timeout_val\t= NULL;    /* Should be set? What value? */\n\tif (_wait_job(job_key, PES_JOB_RUNNING, max_wait_secs))\n\t\treturn SLURM_ERROR;\n\t/* NOTE: This function is non-blocking.\n\t * To detect completeion, poll on NRT_CMD_QUERY_PREEMPTION_STATE */\n\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_PREEMPT_JOB, &preempt_job);\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(preempt job, %u): %s\", job_key,\n\t\t      nrt_err_str(err));\n\t\treturn SLURM_ERROR;\n\t}\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"nrt_cmd_wrap(preempting job, %u)\", job_key);\n\tif (_wait_job(job_key, PES_JOB_PREEMPTED, max_wait_secs))\n\t\treturn SLURM_ERROR;\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"nrt_cmd_wrap(preempted job, %u)\", job_key);\n\treturn SLURM_SUCCESS;\n}\n\nextern int nrt_preempt_job(void *suspend_info, int max_wait_secs)\n{\n\tslurm_nrt_suspend_info_t *susp_info_ptr;\n\tint err, i, rc = SLURM_SUCCESS;\n\n\tsusp_info_ptr = (slurm_nrt_suspend_info_t *) suspend_info;\n\tif (susp_info_ptr) {\n\t\tfor (i = 0; i < susp_info_ptr->job_key_count; i++) {\n\t\t\terr = _preempt_job(susp_info_ptr->job_key[i],\n\t\t\t\t\t   max_wait_secs);\n\t\t\tif (err != SLURM_SUCCESS)\n\t\t\t\trc = err;\n\t\t}\n\t}\n\treturn rc;\n}\n\nstatic int _resume_job(nrt_job_key_t job_key, int max_wait_secs)\n{\n\tnrt_cmd_resume_job_t resume_job;\n\tint err;\n\n\tresume_job.job_key\t= job_key;\n#ifdef PREEMPT_RELEASE_RESOURCES_MASK\n\tresume_job.option\t= PREEMPT_RELEASE_RESOURCES_MASK;\n#else\n\tresume_job.option\t= 0x0001;\n#endif\n\tresume_job.timeout_val\t= NULL;    /* Should be set? What value? */\n\t/* NOTE: This function is non-blocking.\n\t * To detect completeion, poll on NRT_CMD_QUERY_PREEMPTION_STATE */\n\terr = nrt_cmd_wrap(NRT_VERSION, NRT_CMD_RESUME_JOB, &resume_job);\n\tif (err != NRT_SUCCESS) {\n\t\terror(\"nrt_cmd_wrap(resume job, %u): %s\", job_key,\n\t\t      nrt_err_str(err));\n\t\treturn SLURM_ERROR;\n\t}\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"nrt_cmd_wrap(resuming job, %u)\", job_key);\n\tif (_wait_job(job_key, PES_JOB_RUNNING, max_wait_secs))\n\t\treturn SLURM_ERROR;\n\tif (debug_flags & DEBUG_FLAG_SWITCH)\n\t\tinfo(\"nrt_cmd_wrap(resumed job, %u)\", job_key);\n\treturn SLURM_SUCCESS;\n}\n\nextern int nrt_resume_job(void *suspend_info, int max_wait_secs)\n{\n\tslurm_nrt_suspend_info_t *susp_info_ptr;\n\tint err, i, rc = SLURM_SUCCESS;\n\n\tsusp_info_ptr = (slurm_nrt_suspend_info_t *) suspend_info;\n\tif (susp_info_ptr) {\n\t\tfor (i = 0; i < susp_info_ptr->job_key_count; i++) {\n\t\t\terr = _resume_job(susp_info_ptr->job_key[i],\n\t\t\t\t\t  max_wait_secs);\n\t\t\tif (err != SLURM_SUCCESS)\n\t\t\t\trc = err;\n\t\t}\n\t}\n\treturn rc;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/src/plugins/mpi/pmi2/setup.c": "/*****************************************************************************\\\n **  setup.c - PMI2 server setup\n *****************************************************************************\n *  Copyright (C) 2011-2012 National University of Defense Technology.\n *  Written by Hongjia Cao <hjcao@nudt.edu.cn>.\n *  All rights reserved.\n *  Portions copyright (C) 2015 Mellanox Technologies Inc.\n *  Written by Artem Y. Polyakov <artemp@mellanox.com>.\n *  All rights reserved.\n *  Portions copyright (C) 2017 SchedMD LLC.\n *\n *  This file is part of Slurm, a resource management program.\n *  For details, see <https://slurm.schedmd.com/>.\n *  Please also read the included file: DISCLAIMER.\n *\n *  Slurm is free software; you can redistribute it and/or modify it under\n *  the terms of the GNU General Public License as published by the Free\n *  Software Foundation; either version 2 of the License, or (at your option)\n *  any later version.\n *\n *  In addition, as a special exception, the copyright holders give permission\n *  to link the code of portions of this program with the OpenSSL library under\n *  certain conditions as described in each individual source file, and\n *  distribute linked combinations including the two. You must obey the GNU\n *  General Public License in all respects for all of the code used other than\n *  OpenSSL. If you modify file(s) with this exception, you may extend this\n *  exception to your version of the file(s), but you are not obligated to do\n *  so. If you do not wish to do so, delete this exception statement from your\n *  version.  If you delete this exception statement from all source files in\n *  the program, then also delete it here.\n *\n *  Slurm is distributed in the hope that it will be useful, but WITHOUT ANY\n *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n *  details.\n *\n *  You should have received a copy of the GNU General Public License along\n *  with Slurm; if not, write to the Free Software Foundation, Inc.,\n *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.\n\\*****************************************************************************/\n\n#if defined(__FreeBSD__)\n#include <sys/socket.h>\t/* AF_INET */\n#endif\n\n#include <dlfcn.h>\n#include <fcntl.h>\n#include <poll.h>\n#include <signal.h>\n#include <stdlib.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/un.h>\n#include <unistd.h>\n\n#include \"src/common/slurm_xlator.h\"\n#include \"src/common/net.h\"\n#include \"src/common/proc_args.h\"\n#include \"src/common/slurm_mpi.h\"\n#include \"src/common/xstring.h\"\n#include \"src/slurmd/slurmstepd/slurmstepd_job.h\"\n#include \"src/slurmd/common/reverse_tree_math.h\"\n\n#include \"setup.h\"\n#include \"tree.h\"\n#include \"pmi.h\"\n#include \"spawn.h\"\n#include \"kvs.h\"\n#include \"ring.h\"\n\n#define PMI2_SOCK_ADDR_FMT \"%s/sock.pmi2.%u.%u\"\n\n\nextern char **environ;\n\nstatic bool run_in_stepd = 0;\n\nint  tree_sock;\nint *task_socks;\nchar tree_sock_addr[128];\npmi2_job_info_t job_info;\npmi2_tree_info_t tree_info;\n\nstatic char *fmt_tree_sock_addr = NULL;\n\nextern bool\nin_stepd(void)\n{\n\treturn run_in_stepd;\n}\n\nstatic void\n_remove_tree_sock(void)\n{\n\tif (fmt_tree_sock_addr) {\n\t\tunlink(fmt_tree_sock_addr);\n\t\txfree(fmt_tree_sock_addr);\n\t}\n}\n\nstatic int\n_setup_stepd_job_info(const stepd_step_rec_t *job, char ***env)\n{\n\tchar *p;\n\tint i;\n\n\tmemset(&job_info, 0, sizeof(job_info));\n\n\tif (job->pack_jobid && (job->pack_jobid != NO_VAL)) {\n\t\tjob_info.jobid  = job->pack_jobid;\n\t\tjob_info.stepid = job->stepid;\n\t\tjob_info.nnodes = job->pack_nnodes;\n\t\tjob_info.nodeid = job->nodeid + job->node_offset;\n\t\tjob_info.ntasks = job->pack_ntasks;\n\t\tjob_info.ltasks = job->node_tasks;\n\t\tjob_info.gtids = xmalloc(job_info.ltasks * sizeof(uint32_t));\n\t\tfor (i = 0; i < job_info.ltasks; i ++) {\n\t\t\tjob_info.gtids[i] = job->task[i]->gtid +\n\t\t\t\t\t    job->pack_task_offset;\n\t\t}\n\t} else {\n\t\tjob_info.jobid  = job->jobid;\n\t\tjob_info.stepid = job->stepid;\n\t\tjob_info.nnodes = job->nnodes;\n\t\tjob_info.nodeid = job->nodeid;\n\t\tjob_info.ntasks = job->ntasks;\n\t\tjob_info.ltasks = job->node_tasks;\n\t\tjob_info.gtids = xmalloc(job_info.ltasks * sizeof(uint32_t));\n\t\tfor (i = 0; i < job_info.ltasks; i ++) {\n\t\t\tjob_info.gtids[i] = job->task[i]->gtid;\n\t\t}\n\t}\n\n\tp = getenvp(*env, PMI2_PMI_DEBUGGED_ENV);\n\tif (p) {\n\t\tjob_info.pmi_debugged = atoi(p);\n\t} else {\n\t\tjob_info.pmi_debugged = 0;\n\t}\n\tp = getenvp(*env, PMI2_SPAWN_SEQ_ENV);\n\tif (p) { \t\t/* spawned */\n\t\tjob_info.spawn_seq = atoi(p);\n\t\tunsetenvp(*env, PMI2_SPAWN_SEQ_ENV);\n\t\tp = getenvp(*env, PMI2_SPAWNER_JOBID_ENV);\n\t\tjob_info.spawner_jobid = xstrdup(p);\n\t\tunsetenvp(*env, PMI2_SPAWNER_JOBID_ENV);\n\t} else {\n\t\tjob_info.spawn_seq = 0;\n\t\tjob_info.spawner_jobid = NULL;\n\t}\n\tp = getenvp(*env, PMI2_PMI_JOBID_ENV);\n\tif (p) {\n\t\tjob_info.pmi_jobid = xstrdup(p);\n\t\tunsetenvp(*env, PMI2_PMI_JOBID_ENV);\n\t} else {\n\t\txstrfmtcat(job_info.pmi_jobid, \"%u.%u\", job_info.jobid,\n\t\t\t   job_info.stepid);\n\t}\n\tp = getenvp(*env, PMI2_STEP_NODES_ENV);\n\tif (!p) {\n\t\terror(\"mpi/pmi2: unable to find nodes in job environment\");\n\t\treturn SLURM_ERROR;\n\t} else {\n\t\tjob_info.step_nodelist = xstrdup(p);\n\t\tunsetenvp(*env, PMI2_STEP_NODES_ENV);\n\t}\n\t/*\n\t * how to get the mapping info from stepd directly?\n\t * there is the task distribution info in the launch_tasks_request_msg_t,\n\t * but it is not stored in the stepd_step_rec_t.\n\t */\n\tp = getenvp(*env, PMI2_PROC_MAPPING_ENV);\n\tif (!p) {\n\t\terror(\"PMI2_PROC_MAPPING_ENV not found\");\n\t\treturn SLURM_ERROR;\n\t} else {\n\t\tjob_info.proc_mapping = xstrdup(p);\n\t\tunsetenvp(*env, PMI2_PROC_MAPPING_ENV);\n\t}\n\n\tjob_info.job_env = env_array_copy((const char **)*env);\n\n\tjob_info.MPIR_proctable = NULL;\n\tjob_info.srun_opt = NULL;\n\n\t/* get the SLURM_STEP_RESV_PORTS\n\t */\n\tp = getenvp(*env, SLURM_STEP_RESV_PORTS);\n\tif (!p) {\n\t\tdebug(\"%s: %s not found in env\", __func__, SLURM_STEP_RESV_PORTS);\n\t} else {\n\t\tjob_info.resv_ports = xstrdup(p);\n\t\tinfo(\"%s: SLURM_STEP_RESV_PORTS found %s\", __func__, p);\n\t}\n\treturn SLURM_SUCCESS;\n}\n\nstatic int\n_setup_stepd_tree_info(char ***env)\n{\n\thostlist_t hl;\n\tchar *srun_host;\n\tuint16_t port;\n\tchar *p;\n\tint tree_width;\n\n\t/* job info available */\n\n\tmemset(&tree_info, 0, sizeof(tree_info));\n\n\thl = hostlist_create(job_info.step_nodelist);\n\tp = hostlist_nth(hl, job_info.nodeid); /* strdup-ed */\n\ttree_info.this_node = xstrdup(p);\n\tfree(p);\n\n\t/* this only controls the upward communication tree width */\n\tp = getenvp(*env, PMI2_TREE_WIDTH_ENV);\n\tif (p) {\n\t\ttree_width = atoi(p);\n\t\tif (tree_width < 2) {\n\t\t\tinfo(\"invalid PMI2 tree width value (%d) detected. \"\n\t\t\t     \"fallback to default value.\", tree_width);\n\t\t\ttree_width = slurm_get_tree_width();\n\t\t}\n\t} else {\n\t\ttree_width = slurm_get_tree_width();\n\t}\n\n\t/* TODO: cannot launch 0 tasks on node */\n\n\t/*\n\t * In tree position calculation, root of the tree is srun with id 0.\n\t * Stepd's id will be its nodeid plus 1.\n\t */\n\treverse_tree_info(job_info.nodeid + 1, job_info.nnodes + 1,\n\t\t\t  tree_width, &tree_info.parent_id,\n\t\t\t  &tree_info.num_children, &tree_info.depth,\n\t\t\t  &tree_info.max_depth);\n\ttree_info.parent_id --;\t       /* restore real nodeid */\n\tif (tree_info.parent_id < 0) {\t/* parent is srun */\n\t\ttree_info.parent_node = NULL;\n\t} else {\n\t\tp = hostlist_nth(hl, tree_info.parent_id);\n\t\ttree_info.parent_node = xstrdup(p);\n\t\tfree(p);\n\t}\n\thostlist_destroy(hl);\n\n\ttree_info.pmi_port = 0;\t/* not used */\n\n\tsrun_host = getenvp(*env, \"SLURM_SRUN_COMM_HOST\");\n\tif (!srun_host) {\n\t\terror(\"mpi/pmi2: unable to find srun comm ifhn in env\");\n\t\treturn SLURM_ERROR;\n\t}\n\tp = getenvp(*env, PMI2_SRUN_PORT_ENV);\n\tif (!p) {\n\t\terror(\"mpi/pmi2: unable to find srun pmi2 port in env\");\n\t\treturn SLURM_ERROR;\n\t}\n\tport = atoi(p);\n\n\ttree_info.srun_addr = xmalloc(sizeof(slurm_addr_t));\n\tslurm_set_addr(tree_info.srun_addr, port, srun_host);\n\n\tunsetenvp(*env, PMI2_SRUN_PORT_ENV);\n\n\t/* init kvs seq to 0. TODO: reduce array size */\n\ttree_info.children_kvs_seq = xmalloc(sizeof(uint32_t) *\n\t\t\t\t\t     job_info.nnodes);\n\n\treturn SLURM_SUCCESS;\n}\n\n/*\n * setup sockets for slurmstepd\n */\nstatic int\n_setup_stepd_sockets(const stepd_step_rec_t *job, char ***env)\n{\n\tstruct sockaddr_un sa;\n\tint i;\n\tchar *spool;\n\n\tdebug(\"mpi/pmi2: setup sockets\");\n\n\ttree_sock = socket(AF_UNIX, SOCK_STREAM, 0);\n\tif (tree_sock < 0) {\n\t\terror(\"mpi/pmi2: failed to create tree socket: %m\");\n\t\treturn SLURM_ERROR;\n\t}\n\tsa.sun_family = PF_UNIX;\n\n\t/*\n\t * tree_sock_addr has to remain unformatted since the formatting\n\t * happens on the slurmd side\n\t */\n\tspool = slurm_get_slurmd_spooldir(NULL);\n\tsnprintf(tree_sock_addr, sizeof(tree_sock_addr), PMI2_SOCK_ADDR_FMT,\n\t\t spool, job_info.jobid, job_info.stepid);\n\t/*\n\t * Make sure we adjust for the spool dir coming in on the address to\n\t * point to the right spot.\n\t */\n\txstrsubstitute(spool, \"%n\", job->node_name);\n\txstrsubstitute(spool, \"%h\", job->node_name);\n\tsnprintf(sa.sun_path, sizeof(sa.sun_path), PMI2_SOCK_ADDR_FMT,\n\t\t spool, job_info.jobid, job_info.stepid);\n\t/*\n\t * We need to unlink this later so we need a formatted version of the\n\t * string to unlink.\n\t */\n\tfmt_tree_sock_addr = xstrdup(sa.sun_path);\n\n\tunlink(sa.sun_path);    /* remove possible old socket */\n\txfree(spool);\n\n\tif (bind(tree_sock, (struct sockaddr *)&sa, SUN_LEN(&sa)) < 0) {\n\t\terror(\"mpi/pmi2: failed to bind tree socket: %m\");\n\t\tunlink(sa.sun_path);\n\t\treturn SLURM_ERROR;\n\t}\n\tif (listen(tree_sock, 64) < 0) {\n\t\terror(\"mpi/pmi2: failed to listen tree socket: %m\");\n\t\tunlink(sa.sun_path);\n\t\treturn SLURM_ERROR;\n\t}\n\n\ttask_socks = xmalloc(2 * job->node_tasks * sizeof(int));\n\tfor (i = 0; i < job->node_tasks; i ++) {\n\t\tsocketpair(AF_UNIX, SOCK_STREAM, 0, &task_socks[i * 2]);\n\t\t/* this must be delayed after the tasks have been forked */\n/* \t\tclose(TASK_PMI_SOCK(i)); */\n\t}\n\treturn SLURM_SUCCESS;\n}\n\nstatic int\n_setup_stepd_kvs(char ***env)\n{\n\tint rc = SLURM_SUCCESS, i = 0, pp_cnt = 0;\n\tchar *p, env_key[32], *ppkey, *ppval;\n\n\tkvs_seq = 1;\n\trc = temp_kvs_init();\n\tif (rc != SLURM_SUCCESS)\n\t\treturn rc;\n\n\trc = kvs_init();\n\tif (rc != SLURM_SUCCESS)\n\t\treturn rc;\n\n\t/* preput */\n\tp = getenvp(*env, PMI2_PREPUT_CNT_ENV);\n\tif (p) {\n\t\tpp_cnt = atoi(p);\n\t}\n\n\tfor (i = 0; i < pp_cnt; i ++) {\n\t\tsnprintf(env_key, 32, PMI2_PPKEY_ENV\"%d\", i);\n\t\tp = getenvp(*env, env_key);\n\t\tppkey = p; /* getenvp will not modify p */\n\t\tsnprintf(env_key, 32, PMI2_PPVAL_ENV\"%d\", i);\n\t\tp = getenvp(*env, env_key);\n\t\tppval = p;\n\t\tkvs_put(ppkey, ppval);\n\t}\n\n\t/*\n\t * For PMI11.\n\t * A better logic would be to put PMI_process_mapping in KVS only if\n\t * the task distribution method is not \"arbitrary\", because in\n\t * \"arbitrary\" distribution the process mapping varible is not correct.\n\t * MPICH2 may deduce the clique info from the hostnames. But that\n\t * is rather costly.\n\t */\n\tkvs_put(\"PMI_process_mapping\", job_info.proc_mapping);\n\n\treturn SLURM_SUCCESS;\n}\n\nextern int\npmi2_setup_stepd(const stepd_step_rec_t *job, char ***env)\n{\n\tint rc;\n\n\trun_in_stepd = true;\n\n\t/* job info */\n\trc = _setup_stepd_job_info(job, env);\n\tif (rc != SLURM_SUCCESS)\n\t\treturn rc;\n\n\t/* tree info */\n\trc = _setup_stepd_tree_info(env);\n\tif (rc != SLURM_SUCCESS)\n\t\treturn rc;\n\n\t/* sockets */\n\trc = _setup_stepd_sockets(job, env);\n\tif (rc != SLURM_SUCCESS)\n\t\treturn rc;\n\n\t/* kvs */\n\trc = _setup_stepd_kvs(env);\n\tif (rc != SLURM_SUCCESS)\n\t\treturn rc;\n\n\t/* TODO: finalize pmix_ring state somewhere */\n\t/* initialize pmix_ring state */\n\trc = pmix_ring_init(&job_info, env);\n\tif (rc != SLURM_SUCCESS)\n\t\treturn rc;\n\n\treturn SLURM_SUCCESS;\n}\n\nextern void\npmi2_cleanup_stepd(void)\n{\n\tclose(tree_sock);\n\t_remove_tree_sock();\n}\n/**************************************************************/\n\n/* returned string should be xfree-ed by caller */\nstatic char *\n_get_proc_mapping(const mpi_plugin_client_info_t *job)\n{\n\tuint32_t node_cnt, task_cnt, task_mapped, node_task_cnt, **tids;\n\tuint32_t task_dist, block;\n\tuint16_t *tasks, *rounds;\n\tint i, start_id, end_id;\n\tchar *mapping = NULL;\n\n\tnode_cnt = job->step_layout->node_cnt;\n\ttask_cnt = job->step_layout->task_cnt;\n\ttask_dist = job->step_layout->task_dist & SLURM_DIST_STATE_BASE;\n\ttasks = job->step_layout->tasks;\n\ttids = job->step_layout->tids;\n\n\t/* for now, PMI2 only supports vector processor mapping */\n\n\tif ((task_dist & SLURM_DIST_NODEMASK) == SLURM_DIST_NODECYCLIC) {\n\t\tmapping = xstrdup(\"(vector\");\n\n\t\trounds = xmalloc (node_cnt * sizeof(uint16_t));\n\t\ttask_mapped = 0;\n\t\twhile (task_mapped < task_cnt) {\n\t\t\tstart_id = 0;\n\t\t\t/* find start_id */\n\t\t\twhile (start_id < node_cnt) {\n\t\t\t\twhile (start_id < node_cnt &&\n\t\t\t\t       ( rounds[start_id] >= tasks[start_id] ||\n\t\t\t\t\t (task_mapped !=\n\t\t\t\t\t  tids[start_id][rounds[start_id]]) )) {\n\t\t\t\t\tstart_id ++;\n\t\t\t\t}\n\t\t\t\tif (start_id >= node_cnt)\n\t\t\t\t\tbreak;\n\t\t\t\t/* block is always 1 */\n\t\t\t\t/* find end_id */\n\t\t\t\tend_id = start_id;\n\t\t\t\twhile (end_id < node_cnt &&\n\t\t\t\t       ( rounds[end_id] < tasks[end_id] &&\n\t\t\t\t\t (task_mapped ==\n\t\t\t\t\t  tids[end_id][rounds[end_id]]) )) {\n\t\t\t\t\trounds[end_id] ++;\n\t\t\t\t\ttask_mapped ++;\n\t\t\t\t\tend_id ++;\n\t\t\t\t}\n\t\t\t\txstrfmtcat(mapping, \",(%u,%u,1)\", start_id,\n\t\t\t\t\t   end_id - start_id);\n\t\t\t\tstart_id = end_id;\n\t\t\t}\n\t\t}\n\t\txfree(rounds);\n\t\txstrcat(mapping, \")\");\n\t} else if (task_dist == SLURM_DIST_ARBITRARY) {\n\t\t/*\n\t\t * MPICH2 will think that each task runs on a seperate node.\n\t\t * The program will run, but no SHM will be used for\n\t\t * communication.\n\t\t */\n\t\tmapping = xstrdup(\"(vector\");\n\t\txstrfmtcat(mapping, \",(0,%u,1)\", job->step_layout->task_cnt);\n\t\txstrcat(mapping, \")\");\n\n\t} else if (task_dist == SLURM_DIST_PLANE) {\n\t\tmapping = xstrdup(\"(vector\");\n\n\t\trounds = xmalloc (node_cnt * sizeof(uint16_t));\n\t\ttask_mapped = 0;\n\t\twhile (task_mapped < task_cnt) {\n\t\t\tstart_id = 0;\n\t\t\t/* find start_id */\n\t\t\twhile (start_id < node_cnt) {\n\t\t\t\twhile (start_id < node_cnt &&\n\t\t\t\t       ( rounds[start_id] >= tasks[start_id] ||\n\t\t\t\t\t (task_mapped !=\n\t\t\t\t\t  tids[start_id][rounds[start_id]]) )) {\n\t\t\t\t\tstart_id ++;\n\t\t\t\t}\n\t\t\t\tif (start_id >= node_cnt)\n\t\t\t\t\tbreak;\n\t\t\t\t/* find start block. block may be less\n\t\t\t\t * than plane size */\n\t\t\t\tblock = 0;\n\t\t\t\twhile (rounds[start_id] < tasks[start_id] &&\n\t\t\t\t       (task_mapped ==\n\t\t\t\t\ttids[start_id][rounds[start_id]])) {\n\t\t\t\t\tblock ++;\n\t\t\t\t\trounds[start_id] ++;\n\t\t\t\t\ttask_mapped ++;\n\t\t\t\t}\n\t\t\t\t/* find end_id */\n\t\t\t\tend_id = start_id + 1;\n\t\t\t\twhile (end_id < node_cnt &&\n\t\t\t\t       (rounds[end_id] + block - 1 <\n\t\t\t\t\ttasks[end_id])) {\n\t\t\t\t\tfor (i = 0;\n\t\t\t\t\t     i < tasks[end_id] - rounds[end_id];\n\t\t\t\t\t     i ++) {\n\t\t\t\t\t\tif (task_mapped + i !=\n\t\t\t\t\t\t    tids[end_id][rounds[end_id]\n\t\t\t\t\t\t\t\t + i]) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (i != block)\n\t\t\t\t\t\tbreak;\n\t\t\t\t\trounds[end_id] += block;\n\t\t\t\t\ttask_mapped += block;\n\t\t\t\t\tend_id ++;\n\t\t\t\t}\n\t\t\t\txstrfmtcat(mapping, \",(%u,%u,%u)\", start_id,\n\t\t\t\t\t   end_id - start_id, block);\n\t\t\t\tstart_id = end_id;\n\t\t\t}\n\t\t}\n\t\txfree(rounds);\n\t\txstrcat(mapping, \")\");\n\n\t} else {\t\t/* BLOCK mode */\n\t\tmapping = xstrdup(\"(vector\");\n\t\tstart_id = 0;\n\t\tnode_task_cnt = tasks[start_id];\n\t\tfor (i = start_id + 1; i < node_cnt; i ++) {\n\t\t\tif (node_task_cnt == tasks[i])\n\t\t\t\tcontinue;\n\t\t\txstrfmtcat(mapping, \",(%u,%u,%u)\", start_id,\n\t\t\t\t   i - start_id, node_task_cnt);\n\t\t\tstart_id = i;\n\t\t\tnode_task_cnt = tasks[i];\n\t\t}\n\t\txstrfmtcat(mapping, \",(%u,%u,%u))\", start_id, i - start_id,\n\t\t\t   node_task_cnt);\n\t}\n\n\tdebug(\"mpi/pmi2: processor mapping: %s\", mapping);\n\treturn mapping;\n}\n\nstatic int\n_setup_srun_job_info(const mpi_plugin_client_info_t *job)\n{\n\tchar *p;\n\tvoid *handle = NULL, *sym = NULL;\n\n\tmemset(&job_info, 0, sizeof(job_info));\n\n\tif (job->pack_jobid && (job->pack_jobid != NO_VAL)) {\n\t\tjob_info.jobid  = job->pack_jobid;\n\t\tjob_info.stepid = job->stepid;\n\t\tjob_info.nnodes = job->step_layout->node_cnt;\n\t\tjob_info.ntasks = job->step_layout->task_cnt;\n\t} else {\n\t\tjob_info.jobid  = job->jobid;\n\t\tjob_info.stepid = job->stepid;\n\t\tjob_info.nnodes = job->step_layout->node_cnt;\n\t\tjob_info.ntasks = job->step_layout->task_cnt;\n\t}\n\tjob_info.nodeid = -1;\t/* id in tree. not used. */\n\tjob_info.ltasks = 0;\t/* not used */\n\tjob_info.gtids = NULL;\t/* not used */\n\n\tp = getenv(PMI2_PMI_DEBUGGED_ENV);\n\tif (p) {\n\t\tjob_info.pmi_debugged = atoi(p);\n\t} else {\n\t\tjob_info.pmi_debugged = 0;\n\t}\n\tp = getenv(PMI2_SPAWN_SEQ_ENV);\n\tif (p) { \t\t/* spawned */\n\t\tjob_info.spawn_seq = atoi(p);\n\t\tp = getenv(PMI2_SPAWNER_JOBID_ENV);\n\t\tjob_info.spawner_jobid = xstrdup(p);\n\t\t/* env unset in stepd */\n\t} else {\n\t\tjob_info.spawn_seq = 0;\n\t\tjob_info.spawner_jobid = NULL;\n\t}\n\n\tjob_info.step_nodelist = xstrdup(job->step_layout->node_list);\n\tjob_info.proc_mapping = _get_proc_mapping(job);\n\tif (job_info.proc_mapping == NULL) {\n\t\treturn SLURM_ERROR;\n\t}\n\tp = getenv(PMI2_PMI_JOBID_ENV);\n\tif (p) {\t\t/* spawned */\n\t\tjob_info.pmi_jobid = xstrdup(p);\n\t} else {\n\t\txstrfmtcat(job_info.pmi_jobid, \"%u.%u\", job_info.jobid,\n\t\t\t   job_info.stepid);\n\t}\n\tjob_info.job_env = env_array_copy((const char **)environ);\n\n\t/* hjcao: this is really dirty.\n\t   But writing a new launcher is not desirable. */\n\thandle = dlopen(NULL, RTLD_LAZY);\n\tif (handle == NULL) {\n\t\terror(\"mpi/pmi2: failed to dlopen()\");\n\t\treturn SLURM_ERROR;\n\t}\n\tsym = dlsym(handle, \"MPIR_proctable\");\n\tif (sym == NULL) {\n\t\t/* if called directly in API, there may be no symbol available */\n\t\tverbose (\"mpi/pmi2: failed to find symbol 'MPIR_proctable'\");\n\t\tjob_info.MPIR_proctable = NULL;\n\t} else {\n\t\tjob_info.MPIR_proctable = *(MPIR_PROCDESC **)sym;\n\t}\n\tsym = dlsym(handle, \"opt\");\n\tif (sym == NULL) {\n\t\tverbose(\"mpi/pmi2: failed to find symbol 'opt'\");\n\t\tjob_info.srun_opt = NULL;\n\t} else {\n\t\tjob_info.srun_opt = (slurm_opt_t *)sym;\n\t}\n\tdlclose(handle);\n\n\treturn SLURM_SUCCESS;\n}\n\nstatic int\n_setup_srun_tree_info(void)\n{\n\tchar *p;\n\tuint16_t p_port;\n\tchar *spool;\n\n\tmemset(&tree_info, 0, sizeof(tree_info));\n\n\ttree_info.this_node = \"launcher\"; /* not used */\n\ttree_info.parent_id = -2;   /* not used */\n\ttree_info.parent_node = NULL; /* not used */\n\ttree_info.num_children = job_info.nnodes;\n\ttree_info.depth = 0;\t /* not used */\n\ttree_info.max_depth = 0; /* not used */\n\t/* pmi_port set in _setup_srun_sockets */\n\tp = getenv(PMI2_SPAWNER_PORT_ENV);\n\tif (p) {\t\t/* spawned */\n\t\tp_port = atoi(p);\n\t\ttree_info.srun_addr = xmalloc(sizeof(slurm_addr_t));\n\t\t/* assume there is always a lo interface */\n\t\tslurm_set_addr(tree_info.srun_addr, p_port, \"127.0.0.1\");\n\t} else\n\t\ttree_info.srun_addr = NULL;\n\n\t/*\n\t * FIXME: We need to handle %n and %h in the spool dir, but don't have\n\t * the node name here\n\t */\n\tspool = slurm_get_slurmd_spooldir(NULL);\n\tsnprintf(tree_sock_addr, 128, PMI2_SOCK_ADDR_FMT,\n\t\t spool, job_info.jobid, job_info.stepid);\n\txfree(spool);\n\n\t/* init kvs seq to 0. TODO: reduce array size */\n\ttree_info.children_kvs_seq = xmalloc(sizeof(uint32_t) *\n\t\t\t\t\t     job_info.nnodes);\n\n\treturn SLURM_SUCCESS;\n}\n\nstatic int\n_setup_srun_socket(const mpi_plugin_client_info_t *job)\n{\n\tif (net_stream_listen(&tree_sock,\n\t\t\t      &tree_info.pmi_port) < 0) {\n\t\terror(\"mpi/pmi2: Failed to create tree socket\");\n\t\treturn SLURM_ERROR;\n\t}\n\tdebug(\"mpi/pmi2: srun pmi port: %hu\", tree_info.pmi_port);\n\n\treturn SLURM_SUCCESS;\n}\n\nstatic int\n_setup_srun_kvs(void)\n{\n\tint rc;\n\n\tkvs_seq = 1;\n\trc = temp_kvs_init();\n\treturn rc;\n}\n\nstatic int\n_setup_srun_environ(const mpi_plugin_client_info_t *job, char ***env)\n{\n\t/* ifhn will be set in SLURM_SRUN_COMM_HOST by slurmd */\n\tenv_array_overwrite_fmt(env, PMI2_SRUN_PORT_ENV, \"%hu\",\n\t\t\t\ttree_info.pmi_port);\n\tenv_array_overwrite_fmt(env, PMI2_STEP_NODES_ENV, \"%s\",\n\t\t\t\tjob_info.step_nodelist);\n\tenv_array_overwrite_fmt(env, PMI2_PROC_MAPPING_ENV, \"%s\",\n\t\t\t\tjob_info.proc_mapping);\n\treturn SLURM_SUCCESS;\n}\n\ninline static int\n_tasks_launched (void)\n{\n\tint i, all_launched = 1;\n\tif (job_info.MPIR_proctable == NULL)\n\t\treturn 1;\n\n\tfor (i = 0; i < job_info.ntasks; i ++) {\n\t\tif (job_info.MPIR_proctable[i].pid == 0) {\n\t\t\tall_launched = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn all_launched;\n}\n\nstatic void *\n_task_launch_detection(void *unused)\n{\n\tspawn_resp_t *resp;\n\ttime_t start;\n\tint rc = 0;\n\n\t/*\n\t * mpir_init() is called in plugins/launch/slurm/launch_slurm.c before\n\t * mpi_hook_client_prelaunch() is called in api/step_launch.c\n\t */\n\tstart = time(NULL);\n\twhile (_tasks_launched() == 0) {\n\t\tusleep(1000*50);\n\t\tif (time(NULL) - start > 600) {\n\t\t\trc = 1;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\t/* send a resp to spawner srun */\n\tresp = spawn_resp_new();\n\tresp->seq = job_info.spawn_seq;\n\tresp->jobid = xstrdup(job_info.pmi_jobid);\n\tresp->error_cnt = 0;\t/* TODO */\n\tresp->rc = rc;\n\tresp->pmi_port = tree_info.pmi_port;\n\n\tspawn_resp_send_to_srun(resp);\n\tspawn_resp_free(resp);\n\treturn NULL;\n}\n\nextern int\npmi2_setup_srun(const mpi_plugin_client_info_t *job, char ***env)\n{\n\tstatic pthread_mutex_t setup_mutex = PTHREAD_MUTEX_INITIALIZER;\n\tstatic pthread_cond_t setup_cond  = PTHREAD_COND_INITIALIZER;\n\tstatic int global_rc = NO_VAL16;\n\tint rc = SLURM_SUCCESS;\n\n\trun_in_stepd = false;\n\tif ((job->pack_jobid == NO_VAL) || (job->pack_jobid == job->jobid)) {\n\t\trc = _setup_srun_job_info(job);\n\t\tif (rc == SLURM_SUCCESS)\n\t\t\trc = _setup_srun_tree_info();\n\t\tif (rc == SLURM_SUCCESS)\n\t\t\trc = _setup_srun_socket(job);\n\t\tif (rc == SLURM_SUCCESS)\n\t\t\trc = _setup_srun_kvs();\n\t\tif (rc == SLURM_SUCCESS)\n\t\t\trc = _setup_srun_environ(job, env);\n\t\tif ((rc == SLURM_SUCCESS) && job_info.spawn_seq) {\n\t\t\tslurm_thread_create_detached(NULL,\n\t\t\t\t\t\t     _task_launch_detection,\n\t\t\t\t\t\t     NULL);\n\t\t}\n\t\tslurm_mutex_lock(&setup_mutex);\n\t\tglobal_rc = rc;\n\t\tslurm_cond_broadcast(&setup_cond);\n\t\tslurm_mutex_unlock(&setup_mutex);\n\t} else {\n\t\tslurm_mutex_lock(&setup_mutex);\n\t\twhile (global_rc == NO_VAL16)\n\t\t\tslurm_cond_wait(&setup_cond, &setup_mutex);\n\t\trc = global_rc;\n\t\tslurm_mutex_unlock(&setup_mutex);\n\t\tif (rc == SLURM_SUCCESS)\n\t\t\trc = _setup_srun_environ(job, env);\n \t}\n\n\treturn rc;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/src/plugins/proctrack/sgi_job/proctrack_sgi_job.c": "/*****************************************************************************\\\n *  proctrack_sgi_job.c - process tracking via SGI's \"job\" module.\n *****************************************************************************\n *  Copyright (C) 2005 The Regents of the University of California.\n *  Produced at Lawrence Livermore National Laboratory (cf, DISCLAIMER).\n *  Written by Mark Grondona <mgrondona@llnl.gov>\n *  CODE-OCEC-09-009. All rights reserved.\n *\n *  This file is part of Slurm, a resource management program.\n *  For details, see <https://slurm.schedmd.com/>.\n *  Please also read the included file: DISCLAIMER.\n *\n *  Slurm is free software; you can redistribute it and/or modify it under\n *  the terms of the GNU General Public License as published by the Free\n *  Software Foundation; either version 2 of the License, or (at your option)\n *  any later version.\n *\n *  In addition, as a special exception, the copyright holders give permission\n *  to link the code of portions of this program with the OpenSSL library under\n *  certain conditions as described in each individual source file, and\n *  distribute linked combinations including the two. You must obey the GNU\n *  General Public License in all respects for all of the code used other than\n *  OpenSSL. If you modify file(s) with this exception, you may extend this\n *  exception to your version of the file(s), but you are not obligated to do\n *  so. If you do not wish to do so, delete this exception statement from your\n *  version.  If you delete this exception statement from all source files in\n *  the program, then also delete it here.\n *\n *  Slurm is distributed in the hope that it will be useful, but WITHOUT ANY\n *  WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n *  FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more\n *  details.\n *\n *  You should have received a copy of the GNU General Public License along\n *  with Slurm; if not, write to the Free Software Foundation, Inc.,\n *  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301  USA.\n\\*****************************************************************************/\n\n#include <dlfcn.h>\n#include <inttypes.h>\n#include <signal.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <unistd.h>\n\n#include \"slurm/slurm.h\"\n#include \"slurm/slurm_errno.h\"\n#include \"src/common/log.h\"\n\n#include \"src/slurmd/slurmstepd/slurmstepd_job.h\"\n\nconst char plugin_name[]      = \"Process tracking via SGI job module\";\nconst char plugin_type[]      = \"proctrack/sgi_job\";\nconst uint32_t plugin_version = SLURM_VERSION_NUMBER;\n\n/*\n * We can't include <job.h> since its prototypes conflict with some\n *  of Slurm's. Instead, put important function protypes and\n *  the jid_t typedef here:\n */\ntypedef uint64_t jid_t;\n\ntypedef jid_t (*create_f)    (jid_t jid_requested, uid_t uid, int options);\ntypedef jid_t (*getjid_f)    (pid_t pid);\ntypedef jid_t (*waitjid_f)   (jid_t jid, int *status, int options);\ntypedef int   (*killjid_f)   (jid_t jid, int sig);\ntypedef jid_t (*detachpid_f) (pid_t pid);\ntypedef jid_t (*attachpid_f) (pid_t pid, jid_t jid_requested);\ntypedef int   (*getpidlist_f)(jid_t jid, pid_t *pid, int bufsize);\ntypedef int   (*getpidcnt_f) (jid_t jid);\n\n/*\n *  Handle to libjob.so\n */\nstatic void *libjob_handle = NULL;\n\n/*\n *  libjob operations we'll need in this plugin\n */\nstatic struct job_operations {\n\tcreate_f     create;\n\tgetjid_f     getjid;\n\twaitjid_f    waitjid;\n\tkilljid_f    killjid;\n\tdetachpid_f  detachpid;\n\tattachpid_f  attachpid;\n\tgetpidlist_f getpidlist;\n\tgetpidcnt_f  getpidcnt;\n} job_ops;\n\n\n/*\n * init() is called when the plugin is loaded, before any other functions\n * are called.  Put global initialization here.\n */\nint init (void)\n{\n\t/*  We dlopen() libjob.so instead of directly linking to it\n\t *   because of symbols like \"job_create\" in libjob which\n\t *   conflict with symbols in slurmd. dlopening the library\n\t *   prevents these symbols from going into the global namespace.\n\t */\n\tif ((libjob_handle = dlopen (\"libjob.so\", RTLD_LAZY)) == NULL) {\n\t\terror (\"Unable to open libjob.so: %m\");\n\t\treturn SLURM_ERROR;\n\t}\n\n\tjob_ops.create    = dlsym (libjob_handle, \"job_create\");\n\tjob_ops.getjid    = dlsym (libjob_handle, \"job_getjid\");\n\tjob_ops.waitjid   = dlsym (libjob_handle, \"job_waitjid\");\n\tjob_ops.killjid   = dlsym (libjob_handle, \"job_killjid\");\n\tjob_ops.detachpid = dlsym (libjob_handle, \"job_detachpid\");\n\tjob_ops.attachpid = dlsym (libjob_handle, \"job_attachpid\");\n\tjob_ops.getpidlist= dlsym (libjob_handle, \"job_getpidlist\");\n\tjob_ops.getpidcnt = dlsym (libjob_handle, \"job_getpidcnt\");\n\n\tif (!job_ops.create)\n\t\terror (\"Unable to resolve job_create in libjob.so\");\n\tif (!job_ops.getjid)\n\t\terror (\"Unable to resolve job_getjid in libjob.so\");\n\tif (!job_ops.waitjid)\n\t\terror (\"Unable to resolve job_waitjid in libjob.so\");\n\tif (!job_ops.killjid)\n\t\terror (\"Unable to resolve job_killjid in libjob.so\");\n\tif (!job_ops.detachpid)\n\t\terror (\"Unable to resolve job_detachpid in libjob.so\");\n\tif (!job_ops.attachpid)\n\t\terror (\"Unable to resolve job_attachpid in libjob.so\");\n\tif (!job_ops.getpidlist)\n\t\terror (\"Unable to resolve job_getpidlist in libjob.so\");\n\tif (!job_ops.getpidcnt)\n\t\terror (\"Unable to resolve job_getpidcnt in libjob.so\");\n\n\tdebug (\"successfully loaded libjob.so\");\n\treturn SLURM_SUCCESS;\n}\n\nint fini (void)\n{\n\tdlclose (libjob_handle);\n\treturn SLURM_SUCCESS;\n}\n\njid_t _job_create (jid_t jid, uid_t uid, int options)\n{\n\treturn ((*job_ops.create) (jid, uid, options));\n}\n\njid_t _job_getjid (pid_t pid)\n{\n\treturn ((*job_ops.getjid) (pid));\n}\n\njid_t _job_waitjid (jid_t jid, int *status, int options)\n{\n\treturn ((*job_ops.waitjid) (jid, status, options));\n}\n\nint _job_killjid (jid_t jid, int sig)\n{\n\treturn ((*job_ops.killjid) (jid, sig));\n}\n\nint _job_detachpid (pid_t pid)\n{\n\treturn ((*job_ops.detachpid) (pid));\n}\n\nint _job_attachpid (pid_t pid, jid_t jid)\n{\n\treturn ((*job_ops.attachpid) (pid, jid));\n}\n\nint _job_getpidlist (jid_t jid, pid_t *pid, int bufsize)\n{\n\treturn ((*job_ops.getpidlist) (jid, pid, bufsize));\n}\n\nint _job_getpidcnt (jid_t jid)\n{\n\treturn ((*job_ops.getpidcnt) (jid));\n}\n\nint proctrack_p_create (stepd_step_rec_t *job)\n{\n\tif (!libjob_handle)\n\t\tinit();\n\n\tif ((job->cont_id = _job_create (0, job->uid, 0)) == (jid_t) -1) {\n\t\terror (\"Failed to create job container: %m\");\n\t\treturn SLURM_ERROR;\n\t}\n\n\tdebug (\"created jid 0x%08lx\", job->cont_id);\n\n\treturn SLURM_SUCCESS;\n}\n\n/* NOTE: This function is called after slurmstepd spawns all user tasks.\n * Since the slurmstepd was placed in the job container when the container\n * was created and all of it's spawned tasks are placed into the container\n * when forked, all we need to do is remove the slurmstepd from the container\n * (once) at this time. */\nint proctrack_p_add (stepd_step_rec_t *job, pid_t pid)\n{\n\tstatic bool first = 1;\n\n\tif (!first)\n\t\treturn SLURM_SUCCESS;\n\n\tfirst = 0;\n\n\t/*\n\t *  Detach ourselves from the job container now that there\n\t *   is at least one other process in it.\n\t */\n\tif (_job_detachpid(getpid()) == (jid_t) -1) {\n\t\terror(\"Failed to detach from job container: %m\");\n\t\treturn SLURM_ERROR;\n\t}\n\n\treturn SLURM_SUCCESS;\n}\n\nint proctrack_p_signal (uint64_t id, int sig)\n{\n\tif ( (_job_killjid ((jid_t) id, sig) < 0)\n\t   && (errno != ENODATA) && (errno != EBADF) )\n\t\treturn (SLURM_ERROR);\n\treturn (SLURM_SUCCESS);\n}\n\nint proctrack_p_destroy (uint64_t id)\n{\n\tint status;\n\t_job_waitjid ((jid_t) id, &status, 0);\n\t/*  Assume any error means job doesn't exist. Therefore,\n\t *   return SUCCESS to slurmd so it doesn't retry continuously\n\t */\n\treturn SLURM_SUCCESS;\n}\n\nuint64_t proctrack_p_find (pid_t pid)\n{\n\tjid_t jid;\n\n\tif ((jid = _job_getjid (pid)) == (jid_t) -1)\n\t\treturn ((uint64_t) 0);\n\n\treturn ((uint64_t) jid);\n}\n\nbool proctrack_p_has_pid (uint64_t cont_id, pid_t pid)\n{\n\tjid_t jid;\n\n\tif ((jid = _job_getjid (pid)) == (jid_t) -1)\n\t\treturn false;\n\tif ((uint64_t)jid != cont_id)\n\t\treturn false;\n\n\treturn true;\n}\n\nint proctrack_p_wait (uint64_t id)\n{\n\tint status;\n\tif (_job_waitjid ((jid_t) id, &status, 0) == (jid_t)-1)\n\t\treturn SLURM_ERROR;\n\n\treturn SLURM_SUCCESS;\n}\n\nint proctrack_p_get_pids(uint64_t cont_id, pid_t **pids, int *npids)\n{\n\tint pidcnt, bufsize;\n\tpid_t *p;\n\n\tpidcnt = _job_getpidcnt((jid_t)cont_id);\n\tif (pidcnt > 0) {\n\t\t/*\n\t\t * FIXME - The \"+ 128\" is a rough attempt to allow for\n\t\t * the fact that _job_getpidcnt() followed by _job_get_pidlist\n\t\t * is not atomic.\n\t\t */\n\t\tbufsize = sizeof(pid_t) * (pidcnt + 128);\n\t\tp = (pid_t *)xmalloc(bufsize);\n\t\tpidcnt = _job_getpidlist((jid_t)cont_id, p, bufsize);\n\t\tif (pidcnt == -1) {\n\t\t\terror(\"job_getpidlist() failed: %m\");\n\t\t\t*pids = NULL;\n\t\t\t*npids = 0;\n\t\t\txfree(p);\n\t\t\treturn SLURM_ERROR;\n\t\t}\n\t\t*pids = p;\n\t\t*npids = pidcnt;\n\t} else {\n\t\t*pids = NULL;\n\t\t*npids = 0;\n\t}\n\n\treturn SLURM_SUCCESS;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/auxdir/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsdelf*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='NetBSD ld.elf_so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd* | netbsdelf*-gnu)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd* | netbsdelf*-gnu)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n\t_LT_TAGVAR(link_all_deplibs, $1)=no\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/auxdir/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=\"2.4.6 Debian-2.4.6-2\"\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname $scriptversion Debian-2.4.6-2\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/s/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -specs=*             GCC specs files\n      # -stdlib=*            select c++ std lib with clang\n      # -fsanitize=*         Clang/GCC memory and address sanitizer\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*| \\\n      -specs=*|-fsanitize=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink)\n\t  libs=\"$deplibs %DEPLIBS%\"\n\t  test \"X$link_all_deplibs\" != Xno && libs=\"$libs $dependency_libs\"\n\t  ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n\t      if $opt_preserve_dup_deps; then\n\t\tcase \"$tmp_libs \" in\n\t\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t\tesac\n\t      fi\n\t      func_append tmp_libs \" $deplib\"\n\t    done\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  *)\n\t    func_fatal_configuration \"$modename: unknown library version type '$version_type'\"\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/contribs/slurm_completion_help/slurm.vim",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/contribs/cray/libalps_test_programs.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/plane_ex1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/plane_ex7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/k_function.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/Slurm_Individual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/hdf5_job_outline.png",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/arch.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/schedmd.png",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/ibm_pe_fig2.png",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/ibm_pe_fig1.png",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/squeue_color.png",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/plane_ex6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/plane_ex4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/allocation_pies.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/plane_ex3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/plane_ex5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/coding_style.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/rosetta.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/mc_support.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/plane_ex2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/topo_ex1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/slurm_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/entities.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/Slurm_Entity.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/hdf5_task_attr.png",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/fonts.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/example_usage.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/topo_ex2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-slurm-18-08-0-1-m46gxnzodmn2sro47llf35n5jtpcpt3z/spack-src/doc/html/usage_pies.gif"
    ],
    "total_files": 2479
}