{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/lib/CL/devices/common.c": "/* common.c - common code that can be reused between device driver\n              implementations\n\n   Copyright (c) 2011-2013 Universidad Rey Juan Carlos\n                 2011-2019 Pekka J\u00e4\u00e4skel\u00e4inen\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to\n   deal in the Software without restriction, including without limitation the\n   rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n   sell copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in\n   all copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n   FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n   IN THE SOFTWARE.\n*/\n\n/* for posix_memalign and strdup */\n#define _BSD_SOURCE\n#define _DEFAULT_SOURCE\n#define _POSIX_C_SOURCE 200809L\n\n#include <assert.h>\n#include <limits.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <utlist.h>\n\n#ifdef _MSC_VER\n#include \"vccompat.hpp\"\n#endif\n\n#include \"common.h\"\n#include \"pocl_shared.h\"\n\n#include \"config.h\"\n#include \"config2.h\"\n#include \"devices.h\"\n#include \"pocl_cache.h\"\n#include \"pocl_debug.h\"\n#include \"pocl_file_util.h\"\n#include \"pocl_image_util.h\"\n#include \"pocl_mem_management.h\"\n#include \"pocl_runtime_config.h\"\n#include \"pocl_timing.h\"\n#include \"pocl_util.h\"\n\n#ifdef HAVE_GETRLIMIT\n#include <sys/time.h>\n#include <sys/resource.h>\n#include <unistd.h>\n#endif\n\n#ifdef HAVE_LIBDL\n#if defined(__APPLE__)\n#define _DARWIN_C_SOURCE\n#endif\n#include <dlfcn.h>\n#endif\n\n#ifdef OCS_AVAILABLE\n#include \"pocl_llvm.h\"\n#endif\n\n#include \"_kernel_constants.h\"\n\n#if defined(__x86_64__) || defined(__i386__)\n#define CPU_IS_X86 1\n#endif\n\n#define WORKGROUP_STRING_LENGTH 1024\n\n/**\n * Generate code from the final bitcode using the LLVM\n * tools.\n *\n * Uses an existing (cached) one, if available.\n */\n\n#ifdef OCS_AVAILABLE\nint\nllvm_codegen (char *output, unsigned device_i, cl_kernel kernel,\n              cl_device_id device, _cl_command_node *command, int specialize)\n{\n  POCL_MEASURE_START (llvm_codegen);\n  int error = 0;\n  void *llvm_module = NULL;\n\n  char tmp_module[POCL_FILENAME_LENGTH];\n  char tmp_objfile[POCL_FILENAME_LENGTH];\n\n  char *objfile = NULL;\n  uint64_t objfile_size = 0;\n\n  cl_program program = kernel->program;\n\n  const char *kernel_name = kernel->name;\n\n  /* $/parallel.bc */\n  char parallel_bc_path[POCL_FILENAME_LENGTH];\n  pocl_cache_work_group_function_path (parallel_bc_path, program, device_i,\n                                       kernel, command, specialize);\n\n  /* $/kernel.so */\n  char final_binary_path[POCL_FILENAME_LENGTH];\n  pocl_cache_final_binary_path (final_binary_path, program, device_i, kernel,\n                                command, specialize);\n\n  if (pocl_exists (final_binary_path))\n    goto FINISH;\n\n  assert (strlen (final_binary_path) < (POCL_FILENAME_LENGTH - 3));\n\n  error = pocl_llvm_generate_workgroup_function_nowrite (\n      device_i, device, kernel, command, &llvm_module, specialize);\n  if (error)\n    {\n      POCL_MSG_PRINT_LLVM (\"pocl_llvm_generate_workgroup_function() failed\"\n                           \" for kernel %s\\n\",\n                           kernel_name);\n      goto FINISH;\n    }\n  assert (llvm_module != NULL);\n\n  if (pocl_get_bool_option (\"POCL_LEAVE_KERNEL_COMPILER_TEMP_FILES\", 0))\n    {\n      POCL_MSG_PRINT_LLVM (\"Writing parallel.bc to %s.\\n\", parallel_bc_path);\n      error = pocl_cache_write_kernel_parallel_bc (\n          llvm_module, program, device_i, kernel, command, specialize);\n    }\n  else\n    {\n      char kernel_parallel_path[POCL_FILENAME_LENGTH];\n      pocl_cache_kernel_cachedir_path (kernel_parallel_path, program, device_i,\n                                       kernel, \"\", command, specialize);\n      error = pocl_mkdir_p (kernel_parallel_path);\n    }\n  if (error)\n    {\n      POCL_MSG_PRINT_GENERAL (\"writing parallel.bc failed for kernel %s\\n\",\n                              kernel->name);\n      goto FINISH;\n    }\n\n  /* May happen if another thread is building the same program & wins the llvm\n     lock. */\n  if (pocl_exists (final_binary_path))\n    goto FINISH;\n\n  error = pocl_llvm_codegen (device, llvm_module, &objfile, &objfile_size);\n  if (error)\n    {\n      POCL_MSG_PRINT_LLVM (\"pocl_llvm_codegen() failed for kernel %s\\n\",\n                           kernel_name);\n      goto FINISH;\n    }\n\n  if (pocl_exists (final_binary_path))\n    goto FINISH;\n\n  /* Write temporary kernel.so.o, required for the final linking step.\n     Use append-write because tmp_objfile is already temporary, thus\n     we don't need to create new temporary... */\n  error = pocl_cache_write_kernel_objfile (tmp_objfile, objfile, objfile_size);\n  if (error)\n    {\n      POCL_MSG_PRINT_LLVM (\"writing %s failed for kernel %s\\n\",\n                           tmp_objfile, kernel_name);\n      goto FINISH;\n    }\n  else\n    {\n      POCL_MSG_PRINT_LLVM (\"written %s size %zu\\n\",\n                          tmp_objfile, (size_t)objfile_size);\n    }\n\n  /* temporary filename for kernel.so */\n  if (pocl_cache_tempname (tmp_module, \".so\", NULL))\n    {\n      POCL_MSG_PRINT_LLVM (\"Creating temporary kernel.so file\"\n                           \" for kernel %s FAILED\\n\",\n                           kernel_name);\n      goto FINISH;\n    }\n  else\n    POCL_MSG_PRINT_LLVM (\"Temporary kernel.so file\"\n                         \" for kernel %s : %s\\n\",\n                         kernel_name, tmp_module);\n\n  POCL_MSG_PRINT_INFO (\"Linking final module\\n\");\n\n  /* Link through Clang driver interface who knows the correct toolchains\n     for all of its targets.  */\n  const char *cmd_line[64] =\n    {CLANG, \"-o\", tmp_module, tmp_objfile};\n  const char **device_ld_arg = device->final_linkage_flags;\n  const char **pos = &cmd_line[4];\n  while ((*pos++ = *device_ld_arg++)) {}\n\n  error = pocl_invoke_clang (device, cmd_line);\n\n  if (error)\n    {\n      POCL_MSG_PRINT_LLVM (\"Linking kernel.so.o -> kernel.so has failed\\n\");\n      goto FINISH;\n    }\n\n  /* rename temporary kernel.so */\n  error = pocl_rename (tmp_module, final_binary_path);\n  if (error)\n    {\n      POCL_MSG_PRINT_LLVM (\"Renaming temporary kernel.so to final has failed.\\n\");\n      goto FINISH;\n    }\n\n  /* if LEAVE_COMPILER_FILES, rename temporary kernel.so.o, else delete it */\n  if (pocl_get_bool_option (\"POCL_LEAVE_KERNEL_COMPILER_TEMP_FILES\", 0))\n    {\n      char objfile_path[POCL_FILENAME_LENGTH];\n      strcpy (objfile_path, final_binary_path);\n      strcat (objfile_path, \".o\");\n      error = pocl_rename (tmp_objfile, objfile_path);\n      if (error)\n        POCL_MSG_PRINT_LLVM (\"Renaming temporary kernel.so.o to final .o has failed.\\n\");\n    }\n  else\n    {\n      error = pocl_remove (tmp_objfile);\n      if (error)\n        POCL_MSG_PRINT_LLVM (\"Removing temporary kernel.so.o has failed.\\n\");\n    }\n\nFINISH:\n  pocl_destroy_llvm_module (llvm_module);\n  POCL_MEM_FREE (objfile);\n  POCL_MEASURE_FINISH (llvm_codegen);\n\n  if (error)\n    return error;\n  else\n    {\n      memcpy (output, final_binary_path, POCL_FILENAME_LENGTH);\n      return 0;\n    }\n}\n#endif\n\n\n/**\n * Populates the device specific image data structure used by kernel\n * from given kernel image argument\n */\nvoid\npocl_fill_dev_image_t (dev_image_t *di, struct pocl_argument *parg,\n                       cl_device_id device)\n{\n  cl_mem mem = *(cl_mem *)parg->value;\n  di->_width = mem->image_width;\n  di->_height = mem->image_height;\n  di->_depth = mem->image_depth;\n  di->_row_pitch = mem->image_row_pitch;\n  di->_slice_pitch = mem->image_slice_pitch;\n  di->_order = mem->image_channel_order;\n  di->_image_array_size = mem->image_array_size;\n  di->_data_type = mem->image_channel_data_type;\n  pocl_get_image_information (mem->image_channel_order,\n                              mem->image_channel_data_type,\n                              &(di->_num_channels), &(di->_elem_size));\n\n  IMAGE1D_TO_BUFFER (mem);\n  di->_data = (mem->device_ptrs[device->dev_id].mem_ptr);\n}\n\nvoid\npocl_copy_mem_object (cl_device_id dest_dev, cl_mem dest,\n                      size_t dest_offset,\n                      cl_device_id source_dev, cl_mem source,\n                      size_t source_offset, size_t cb)\n{\n  /* if source_dev is NULL -> src and dest dev must be the same */\n  cl_device_id src_dev = (source_dev) ? source_dev : dest_dev;\n\n  /* if source and destination are on the same global mem  */\n  if (src_dev->global_mem_id == dest_dev->global_mem_id)\n    {\n      src_dev->ops->copy \n        (dest_dev->data, \n         &dest->device_ptrs[dest_dev->dev_id],\n         dest,\n         &source->device_ptrs[src_dev->dev_id],\n         source,\n         dest_offset, source_offset,\n         cb);\n    }\n  else\n    {\n      void* tofree = NULL;\n      void* tmp = NULL;\n      if (source->flags & CL_MEM_USE_HOST_PTR)\n        tmp = source->mem_host_ptr;\n      else if (dest->flags & CL_MEM_USE_HOST_PTR)\n        tmp = dest->mem_host_ptr;\n      else\n        {\n          tmp = malloc (dest->size);\n          tofree = tmp;\n        }\n      \n      src_dev->ops->read \n        (src_dev->data, tmp, \n          &source->device_ptrs[src_dev->dev_id],\n          source,\n          source_offset, cb);\n      dest_dev->ops->write \n        (dest_dev->data, tmp, \n         &dest->device_ptrs[dest_dev->dev_id],\n          dest, dest_offset,\n         cb);\n      free (tofree);\n    }\n  return;\n}\n\nvoid\npocl_migrate_mem_objects (_cl_command_node * volatile node)\n{\n  size_t i;\n  cl_mem *mem_objects = node->command.migrate.mem_objects;\n  \n  for (i = 0; i < node->command.migrate.num_mem_objects; ++i)\n    {\n      pocl_copy_mem_object (node->device,\n                            mem_objects[i], 0,\n                            node->command.migrate.source_devices[i], \n                            mem_objects[i], 0, mem_objects[i]->size);\n      \n      return;\n    }\n}\n\nvoid\npocl_ndrange_node_cleanup(_cl_command_node *node)\n{\n  cl_uint i;\n  for (i = 0; i < node->command.run.kernel->meta->num_args; ++i)\n    {\n      pocl_aligned_free (node->command.run.arguments[i].value);\n    }\n  free (node->command.run.arguments);\n\n  POname(clReleaseKernel)(node->command.run.kernel);\n}\n\nvoid\npocl_mem_objs_cleanup (cl_event event)\n{\n  size_t i;\n  for (i = 0; i < event->num_buffers; ++i)\n    {\n      assert(event->mem_objs[i] != NULL);\n      POname(clReleaseMemObject) (event->mem_objs[i]);\n    }\n  free (event->mem_objs);\n  event->mem_objs = NULL;\n  event->num_buffers = 0;\n}\n\n/**\n * executes given command. Call with node->event UNLOCKED.\n */\nvoid\npocl_exec_command (_cl_command_node * volatile node)\n{\n  unsigned i;\n  /* because of POCL_UPDATE_EVENT_ */\n  cl_event event = node->event;\n  cl_device_id dev = node->device;\n  _cl_command_t *cmd = &node->command;\n  switch (node->type)\n    {\n    case CL_COMMAND_READ_BUFFER:\n      pocl_update_event_running (event);\n      assert (dev->ops->read);\n      dev->ops->read\n        (dev->data,\n         cmd->read.dst_host_ptr,\n         cmd->read.src_mem_id,\n         event->mem_objs[0],\n         cmd->read.offset,\n         cmd->read.size);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Read Buffer           \");\n      break;\n\n    case CL_COMMAND_WRITE_BUFFER:\n      pocl_update_event_running (event);\n      assert (dev->ops->write);\n      dev->ops->write\n        (dev->data,\n         cmd->write.src_host_ptr,\n         cmd->write.dst_mem_id,\n         event->mem_objs[0],\n         cmd->write.offset,\n         cmd->write.size);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Write Buffer          \");\n      break;\n\n    case CL_COMMAND_COPY_BUFFER:\n      pocl_update_event_running (event);\n      assert (dev->ops->copy);\n      dev->ops->copy\n        (dev->data,\n         cmd->copy.dst_mem_id,\n         event->mem_objs[1],\n         cmd->copy.src_mem_id,\n         event->mem_objs[0],\n         cmd->copy.dst_offset,\n         cmd->copy.src_offset,\n         cmd->copy.size);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Copy Buffer           \");\n      break;\n\n    case CL_COMMAND_FILL_BUFFER:\n      pocl_update_event_running (event);\n      assert (dev->ops->memfill);\n      dev->ops->memfill\n        (dev->data,\n         cmd->memfill.dst_mem_id,\n         event->mem_objs[0],\n         cmd->memfill.size,\n         cmd->memfill.offset,\n         cmd->memfill.pattern,\n         cmd->memfill.pattern_size);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Fill Buffer           \");\n      pocl_aligned_free (cmd->memfill.pattern);\n      break;\n\n    case CL_COMMAND_READ_BUFFER_RECT:\n      pocl_update_event_running (event);\n      assert (dev->ops->read_rect);\n      dev->ops->read_rect\n        (dev->data,\n         cmd->read_rect.dst_host_ptr,\n         cmd->read_rect.src_mem_id,\n         event->mem_objs[0],\n         cmd->read_rect.buffer_origin,\n         cmd->read_rect.host_origin,\n         cmd->read_rect.region,\n         cmd->read_rect.buffer_row_pitch,\n         cmd->read_rect.buffer_slice_pitch,\n         cmd->read_rect.host_row_pitch,\n         cmd->read_rect.host_slice_pitch);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Read Buffer Rect      \");\n      break;\n\n    case CL_COMMAND_COPY_BUFFER_RECT:\n      pocl_update_event_running (event);\n      assert (dev->ops->copy_rect);\n      dev->ops->copy_rect\n        (dev->data,\n         cmd->copy_rect.dst_mem_id,\n         event->mem_objs[1],\n         cmd->copy_rect.src_mem_id,\n         event->mem_objs[0],\n         cmd->copy_rect.dst_origin,\n         cmd->copy_rect.src_origin,\n         cmd->copy_rect.region,\n         cmd->copy_rect.dst_row_pitch,\n         cmd->copy_rect.dst_slice_pitch,\n         cmd->copy_rect.src_row_pitch,\n         cmd->copy_rect.src_slice_pitch);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Copy Buffer Rect      \");\n      break;\n\n    case CL_COMMAND_WRITE_BUFFER_RECT:\n      pocl_update_event_running (event);\n      assert (dev->ops->write_rect);\n      dev->ops->write_rect\n        (dev->data,\n         cmd->write_rect.src_host_ptr,\n         cmd->write_rect.dst_mem_id,\n         event->mem_objs[0],\n         cmd->write_rect.buffer_origin,\n         cmd->write_rect.host_origin,\n         cmd->write_rect.region,\n         cmd->write_rect.buffer_row_pitch,\n         cmd->write_rect.buffer_slice_pitch,\n         cmd->write_rect.host_row_pitch,\n         cmd->write_rect.host_slice_pitch);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Write Buffer Rect     \");\n      break;\n\n    case CL_COMMAND_MIGRATE_MEM_OBJECTS:\n      pocl_update_event_running (event);\n      pocl_migrate_mem_objects (node);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Migrate Buffer        \");\n      break;\n\n    case CL_COMMAND_MAP_BUFFER:\n      pocl_update_event_running (event);\n      assert (dev->ops->map_mem);\n      POCL_LOCK_OBJ (event->mem_objs[0]);\n        dev->ops->map_mem (dev->data,\n                           cmd->map.mem_id,\n                           event->mem_objs[0],\n                           cmd->map.mapping);\n      (event->mem_objs[0])->map_count++;\n      POCL_UNLOCK_OBJ (event->mem_objs[0]);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Map Buffer            \");\n      break;\n\n    case CL_COMMAND_COPY_IMAGE_TO_BUFFER:\n      pocl_update_event_running (event);\n      assert (dev->ops->read_image_rect);\n      dev->ops->read_image_rect (\n          dev->data,\n          event->mem_objs[0],\n          cmd->read_image.src_mem_id,\n          NULL,\n          cmd->read_image.dst_mem_id,\n          cmd->read_image.origin,\n          cmd->read_image.region,\n          cmd->read_image.dst_row_pitch,\n          cmd->read_image.dst_slice_pitch,\n          cmd->read_image.dst_offset);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event CopyImageToBuffer       \");\n      break;\n\n    case CL_COMMAND_READ_IMAGE:\n      pocl_update_event_running (event);\n      assert (dev->ops->read_image_rect);\n      dev->ops->read_image_rect (\n          dev->data,\n          event->mem_objs[0],\n          cmd->read_image.src_mem_id,\n          cmd->read_image.dst_host_ptr,\n          NULL,\n          cmd->read_image.origin,\n          cmd->read_image.region,\n          cmd->read_image.dst_row_pitch,\n          cmd->read_image.dst_slice_pitch,\n          cmd->read_image.dst_offset);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Read Image            \");\n      break;\n\n    case CL_COMMAND_COPY_BUFFER_TO_IMAGE:\n      pocl_update_event_running (event);\n      assert (dev->ops->write_image_rect);\n      dev->ops->write_image_rect (\n          dev->data,\n          event->mem_objs[1],\n          cmd->write_image.dst_mem_id,\n          NULL,\n          cmd->write_image.src_mem_id,\n          cmd->write_image.origin,\n          cmd->write_image.region,\n          cmd->write_image.src_row_pitch,\n          cmd->write_image.src_slice_pitch,\n          cmd->write_image.src_offset);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event CopyBufferToImage       \");\n      break;\n\n    case CL_COMMAND_WRITE_IMAGE:\n        pocl_update_event_running (event);\n        assert (dev->ops->write_image_rect);\n        dev->ops->write_image_rect (\n            dev->data,\n            event->mem_objs[0],\n            cmd->write_image.dst_mem_id,\n            cmd->write_image.src_host_ptr,\n            NULL,\n            cmd->write_image.origin,\n            cmd->write_image.region,\n            cmd->write_image.src_row_pitch,\n            cmd->write_image.src_slice_pitch,\n            cmd->write_image.src_offset);\n        POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Write Image           \");\n        break;\n\n    case CL_COMMAND_COPY_IMAGE:\n        pocl_update_event_running (event);\n        assert (dev->ops->copy_image_rect);\n        dev->ops->copy_image_rect(\n              dev->data,\n              event->mem_objs[0],\n              event->mem_objs[1],\n              cmd->copy_image.src_mem_id,\n              cmd->copy_image.dst_mem_id,\n              cmd->copy_image.src_origin,\n              cmd->copy_image.dst_origin,\n              cmd->copy_image.region);\n        POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Copy Image            \");\n        break;\n\n    case CL_COMMAND_FILL_IMAGE:\n      pocl_update_event_running (event);\n      assert (dev->ops->fill_image);\n      dev->ops->fill_image\n        (dev->data,\n         event->mem_objs[0],\n         cmd->fill_image.mem_id,\n         cmd->fill_image.origin,\n         cmd->fill_image.region,\n         cmd->fill_image.fill_pixel,\n         cmd->fill_image.pixel_size);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Fill Image            \");\n      POCL_MEM_FREE (cmd->fill_image.fill_pixel);\n      break;\n\n    case CL_COMMAND_MAP_IMAGE:\n      pocl_update_event_running (event);\n      POCL_LOCK_OBJ (event->mem_objs[0]);\n      assert (dev->ops->map_image != NULL);\n      dev->ops->map_image (dev->data,\n                           cmd->map.mem_id,\n                           event->mem_objs[0],\n                           cmd->map.mapping);\n     (event->mem_objs[0])->map_count++;\n      POCL_UNLOCK_OBJ (event->mem_objs[0]);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Map Image             \");\n      break;\n\n    case CL_COMMAND_UNMAP_MEM_OBJECT:\n      pocl_update_event_running (event);\n      POCL_LOCK_OBJ (event->mem_objs[0]);\n      if (event->mem_objs[0]->is_image == CL_FALSE\n          || IS_IMAGE1D_BUFFER (event->mem_objs[0]))\n        {\n          assert (dev->ops->unmap_mem != NULL);\n          dev->ops->unmap_mem (dev->data,\n                               cmd->unmap.mem_id,\n                               event->mem_objs[0],\n                               cmd->unmap.mapping);\n        }\n      else\n        {\n          assert (dev->ops->unmap_image != NULL);\n          dev->ops->unmap_image (dev->data,\n                                 cmd->unmap.mem_id,\n                                 event->mem_objs[0],\n                                 cmd->unmap.mapping);\n        }\n      assert ((cmd->unmap.mapping)->unmap_requested > 0);\n      DL_DELETE((event->mem_objs[0])->mappings,\n                cmd->unmap.mapping);\n      (event->mem_objs[0])->map_count--;\n      POCL_MEM_FREE (cmd->unmap.mapping);\n      POCL_UNLOCK_OBJ (event->mem_objs[0]);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Unmap Mem obj         \");\n      break;\n\n    case CL_COMMAND_NDRANGE_KERNEL:\n      pocl_update_event_running (event);\n      assert (event == node->event);\n      assert (dev->ops->run);\n      dev->ops->run (dev->data, node);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Enqueue NDRange       \");\n      pocl_ndrange_node_cleanup(node);\n      break;\n\n    case CL_COMMAND_NATIVE_KERNEL:\n      pocl_update_event_running (event);\n      assert (dev->ops->run_native);\n      dev->ops->run_native (dev->data, node);\n      POCL_MEM_FREE (node->command.native.args);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event Native Kernel         \");\n      break;\n\n    case CL_COMMAND_MARKER:\n      pocl_update_event_running (event);\n      POCL_UPDATE_EVENT_COMPLETE(event);\n      break;\n\n    case CL_COMMAND_BARRIER:\n      pocl_update_event_running (event);\n      POCL_UPDATE_EVENT_COMPLETE(event);\n      break;\n\n    case CL_COMMAND_SVM_FREE:\n      pocl_update_event_running (event);\n      if (cmd->svm_free.pfn_free_func)\n        cmd->svm_free.pfn_free_func(\n           cmd->svm_free.queue,\n           cmd->svm_free.num_svm_pointers,\n           cmd->svm_free.svm_pointers,\n           cmd->svm_free.data);\n      else\n        for (i = 0; i < cmd->svm_free.num_svm_pointers; i++)\n          dev->ops->svm_free (dev, cmd->svm_free.svm_pointers[i]);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event SVM Free              \");\n      break;\n\n    case CL_COMMAND_SVM_MAP:\n      pocl_update_event_running (event);\n      if (DEVICE_MMAP_IS_NOP (dev))\n        ; // no-op\n      else\n        {\n          assert (dev->ops->svm_map);\n          dev->ops->svm_map (dev, cmd->svm_map.svm_ptr);\n        }\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event SVM Map              \");\n      break;\n\n    case CL_COMMAND_SVM_UNMAP:\n      pocl_update_event_running (event);\n      if (DEVICE_MMAP_IS_NOP (dev))\n        ; // no-op\n      else\n        {\n          assert (dev->ops->svm_unmap);\n          dev->ops->svm_unmap (dev, cmd->svm_unmap.svm_ptr);\n        }\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event SVM Unmap             \");\n      break;\n\n    case CL_COMMAND_SVM_MEMCPY:\n      pocl_update_event_running (event);\n      assert (dev->ops->svm_copy);\n      dev->ops->svm_copy (dev,\n                          cmd->svm_memcpy.dst,\n                          cmd->svm_memcpy.src,\n                          cmd->svm_memcpy.size);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event SVM Memcpy            \");\n      break;\n\n    case CL_COMMAND_SVM_MEMFILL:\n      pocl_update_event_running (event);\n      assert (dev->ops->svm_fill);\n      dev->ops->svm_fill (dev,\n                          cmd->svm_fill.svm_ptr,\n                          cmd->svm_fill.size,\n                          cmd->svm_fill.pattern,\n                          cmd->svm_fill.pattern_size);\n      POCL_UPDATE_EVENT_COMPLETE_MSG (event, \"Event SVM MemFill           \");\n      pocl_aligned_free (cmd->svm_fill.pattern);\n      break;\n\n    default:\n      POCL_ABORT_UNIMPLEMENTED(\"\");\n      break;\n    }   \n  pocl_mem_manager_free_command (node);\n}\n\n/* call with brc_event UNLOCKED. */\nvoid\npocl_broadcast (cl_event brc_event)\n{\n  event_node *target;\n  event_node *tmp;\n\n  while ((target = brc_event->notify_list))\n    {\n      pocl_lock_events_inorder (brc_event, target->event);\n      /* remove event from wait list */\n      LL_FOREACH (target->event->wait_list, tmp)\n        {\n          if (tmp->event == brc_event)\n            {\n              LL_DELETE (target->event->wait_list, tmp);\n              pocl_mem_manager_free_event_node (tmp);\n              break;\n            }\n        }\n\n        if ((target->event->status == CL_SUBMITTED)\n            || (target->event->status == CL_QUEUED))\n          {\n            target->event->command->device->ops->notify (\n                target->event->command->device, target->event, brc_event);\n          }\n\n        LL_DELETE (brc_event->notify_list, target);\n        pocl_unlock_events_inorder (brc_event, target->event);\n        pocl_mem_manager_free_event_node (target);\n    }\n}\n\n/**\n * Populates the device specific sampler data structure used by kernel\n * from given kernel sampler argument\n */\nvoid\npocl_fill_dev_sampler_t (dev_sampler_t *ds, struct pocl_argument *parg)\n{\n  cl_sampler sampler = *(cl_sampler *)parg->value;\n\n  *ds = (sampler->normalized_coords == CL_TRUE) ? CLK_NORMALIZED_COORDS_TRUE\n                                                : CLK_NORMALIZED_COORDS_FALSE;\n\n  switch (sampler->addressing_mode)\n    {\n    case CL_ADDRESS_NONE:\n      *ds |= CLK_ADDRESS_NONE; break;\n    case CL_ADDRESS_CLAMP_TO_EDGE:\n      *ds |= CLK_ADDRESS_CLAMP_TO_EDGE; break;\n    case CL_ADDRESS_CLAMP:\n      *ds |= CLK_ADDRESS_CLAMP; break;\n    case CL_ADDRESS_REPEAT:\n      *ds |= CLK_ADDRESS_REPEAT; break;\n    case CL_ADDRESS_MIRRORED_REPEAT:\n      *ds |= CLK_ADDRESS_MIRRORED_REPEAT; break;\n  }\n\n  switch (sampler->filter_mode)\n    {\n    case CL_FILTER_NEAREST:\n      *ds |= CLK_FILTER_NEAREST; break;\n    case CL_FILTER_LINEAR :\n      *ds |= CLK_FILTER_LINEAR; break;\n  }\n}\n\n/* CPU driver stuff */\ntypedef struct pocl_dlhandle_cache_item pocl_dlhandle_cache_item;\nstruct pocl_dlhandle_cache_item\n{\n  pocl_kernel_hash_t hash;\n\n  /* The specialization properties. */\n  /* The local dimensions. */\n  size_t local_wgs[3];\n  /* If global offset must be zero for this WG function version. */\n  int goffs_zero;\n  /* Maximum grid dimension this WG function works with. */\n  size_t max_grid_dim_width;\n\n  void *wg;\n  void *dlhandle;\n  pocl_dlhandle_cache_item *next;\n  pocl_dlhandle_cache_item *prev;\n  unsigned ref_count;\n};\n\nstatic pocl_dlhandle_cache_item *pocl_dlhandle_cache;\nstatic pocl_lock_t pocl_llvm_codegen_lock;\nstatic pocl_lock_t pocl_dlhandle_lock;\nstatic int pocl_dlhandle_cache_initialized;\n\n/* only to be called in basic/pthread/<other cpu driver> init */\nvoid\npocl_init_dlhandle_cache ()\n{\n  if (!pocl_dlhandle_cache_initialized)\n    {\n      POCL_INIT_LOCK (pocl_llvm_codegen_lock);\n      POCL_INIT_LOCK (pocl_dlhandle_lock);\n      pocl_dlhandle_cache_initialized = 1;\n   }\n}\n\nstatic unsigned handle_count = 0;\n#define MAX_CACHE_ITEMS 128\n\n/* must be called with pocl_dlhandle_lock LOCKED */\nstatic pocl_dlhandle_cache_item *\nget_new_dlhandle_cache_item ()\n{\n  pocl_dlhandle_cache_item *ci = NULL;\n  const char *dl_error = NULL;\n\n  if (pocl_dlhandle_cache)\n    {\n      ci = pocl_dlhandle_cache->prev;\n      while (ci->ref_count > 0 && ci != pocl_dlhandle_cache)\n        ci = ci->prev;\n    }\n\n  if ((handle_count >= MAX_CACHE_ITEMS) && ci && (ci != pocl_dlhandle_cache))\n    {\n      DL_DELETE (pocl_dlhandle_cache, ci);\n      dlclose (ci->dlhandle);\n      dl_error = dlerror ();\n      if (dl_error != NULL)\n        POCL_ABORT (\"dlclose() failed with error: %s\\n\", dl_error);\n      memset (ci, 0, sizeof (pocl_dlhandle_cache_item));\n    }\n  else\n    {\n      ++handle_count;\n      ci = (pocl_dlhandle_cache_item *)calloc (\n          1, sizeof (pocl_dlhandle_cache_item));\n    }\n\n  return ci;\n}\n\nvoid\npocl_release_dlhandle_cache (_cl_command_node *cmd)\n{\n  pocl_dlhandle_cache_item *ci = NULL, *found = NULL;\n\n  POCL_LOCK (pocl_dlhandle_lock);\n  DL_FOREACH (pocl_dlhandle_cache, ci)\n  {\n    if ((memcmp (ci->hash, cmd->command.run.hash, sizeof (pocl_kernel_hash_t))\n         == 0)\n        && (ci->local_wgs[0] == cmd->command.run.pc.local_size[0])\n        && (ci->local_wgs[1] == cmd->command.run.pc.local_size[1])\n        && (ci->local_wgs[2] == cmd->command.run.pc.local_size[2]))\n      {\n        found = ci;\n        break;\n      }\n  }\n\n  assert (found != NULL);\n  assert (found->ref_count > 0);\n  --found->ref_count;\n  POCL_UNLOCK (pocl_dlhandle_lock);\n}\n\n/**\n * Checks if a built binary is found in the disk for the given kernel command,\n * if not, builds the kernel, caches it, and returns the file name of the\n * end result.\n *\n * @param command The kernel run command.\n * @param specialized 1 if should check the per-command specialized one instead\n * of the generic one.\n * @returns The filename of the built binary in the disk.\n */\nchar *\npocl_check_kernel_disk_cache (_cl_command_node *command, int specialized)\n{\n  char *module_fn = NULL;\n  _cl_command_run *run_cmd = &command->command.run;\n  cl_kernel k = run_cmd->kernel;\n  cl_program p = k->program;\n  unsigned dev_i = command->device_i;\n\n  /* First try to find a static WG binary for the local size as they\n     are always more efficient than the dynamic ones.  Also, in case\n     of reqd_wg_size, there might not be a dynamic sized one at all.  */\n  module_fn = malloc (POCL_FILENAME_LENGTH);\n  pocl_cache_final_binary_path (module_fn, p, dev_i, k, command, specialized);\n\n  if (pocl_exists (module_fn))\n    {\n      POCL_MSG_PRINT_INFO (\"Using a cached WG function: %s\\n\", module_fn);\n      return module_fn;\n    }\n\n  /* static WG binary for the local size does not exist. If we have the LLVM IR\n   * (program.bc), try to compile a new parallel.bc and static binary */\n  if (p->binaries[dev_i])\n    {\n#ifdef OCS_AVAILABLE\n      POCL_LOCK (pocl_llvm_codegen_lock);\n      int error = llvm_codegen (module_fn, dev_i, k, command->device, command,\n                                specialized);\n      POCL_UNLOCK (pocl_llvm_codegen_lock);\n      if (error)\n        POCL_ABORT (\"Final linking of kernel %s failed.\\n\", k->name);\n      POCL_MSG_PRINT_INFO (\"Built a WG function: %s\\n\", module_fn);\n      return module_fn;\n#else\n      /* TODO: This should be caught earlier. */\n      if (!p->pocl_binaries[dev_i])\n        POCL_ABORT (\"pocl device without online compilation support\"\n                    \" cannot compile LLVM IRs to machine code!\\n\");\n#endif\n    }\n  else\n    {\n      module_fn = malloc (POCL_FILENAME_LENGTH);\n      /* First try to find a specialized WG binary, if allowed by the\n         command. */\n      if (!run_cmd->force_generic_wg_func)\n        pocl_cache_final_binary_path (module_fn, p, dev_i, k, command, 0);\n\n      if (run_cmd->force_generic_wg_func || !pocl_exists (module_fn))\n        {\n          /* Then check for a dynamic (non-specialized) kernel. */\n          pocl_cache_final_binary_path (module_fn, p, dev_i, k, command, 1);\n          if (!pocl_exists (module_fn))\n            POCL_ABORT (\"Generic WG function binary does not exist.\\n\");\n          POCL_MSG_PRINT_INFO (\"Using a cached generic WG function: %s\\n\",\n                               module_fn);\n        }\n      else\n        POCL_MSG_PRINT_INFO (\"Using a cached specialized WG function: %s\\n\",\n                             module_fn);\n    }\n  return module_fn;\n}\n\n/* Returns the width of the widest dimension in the grid of the given\n   run command. */\nsize_t\npocl_cmd_max_grid_dim_width (_cl_command_run *cmd)\n{\n  return max (max (cmd->pc.local_size[0] * cmd->pc.num_groups[0],\n                   cmd->pc.local_size[1] * cmd->pc.num_groups[1]),\n              cmd->pc.local_size[2] * cmd->pc.local_size[2]);\n}\n\n/* Look for a dlhandle in the dlhandle cache for the given kernel command.\n   If found, push the handle up in the cache to improve cache hit speed,\n   and return it. Otherwise return NULL. The caller should hold\n   pocl_dlhandle_lock. */\nstatic pocl_dlhandle_cache_item *\nfetch_dlhandle_cache_item (_cl_command_run *run_cmd)\n{\n  pocl_dlhandle_cache_item *ci = NULL, *tmp = NULL;\n  size_t max_grid_width = pocl_cmd_max_grid_dim_width (run_cmd);\n  DL_FOREACH_SAFE (pocl_dlhandle_cache, ci, tmp)\n  {\n    if ((memcmp (ci->hash, run_cmd->hash, sizeof (pocl_kernel_hash_t)) == 0)\n        && (ci->local_wgs[0] == run_cmd->pc.local_size[0])\n        && (ci->local_wgs[1] == run_cmd->pc.local_size[1])\n        && (ci->local_wgs[2] == run_cmd->pc.local_size[2])\n        && (max_grid_width <= ci->max_grid_dim_width)\n        && (!ci->goffs_zero\n            || (run_cmd->pc.global_offset[0] == 0\n                && run_cmd->pc.global_offset[1] == 0\n                && run_cmd->pc.global_offset[2] == 0)))\n      {\n        /* move to the front of the line */\n        DL_DELETE (pocl_dlhandle_cache, ci);\n        DL_PREPEND (pocl_dlhandle_cache, ci);\n        ++ci->ref_count;\n        run_cmd->wg = ci->wg;\n        return ci;\n      }\n  }\n  return NULL;\n}\n\n/**\n * Checks if the kernel command has been built and has been loaded with\n * dlopen, and reuses its handle. If not, checks if a built binary is found\n * in the disk, if not, builds the kernel and puts it to respective\n * caches.\n *\n * The initial refcount may be 0, in case we're just pre-compiling kernels\n * (or compiling them for binaries), and not actually need them immediately.\n *\n * TODO: This function is really specific to CPU (host) drivers since dlhandles\n * imply program loading to the same process as the host. Move to basic.c? */\nvoid\npocl_check_kernel_dlhandle_cache (_cl_command_node *command,\n                                  unsigned initial_refcount, int specialize)\n{\n  char workgroup_string[WORKGROUP_STRING_LENGTH];\n  pocl_dlhandle_cache_item *ci = NULL, *tmp = NULL;\n  const char *dl_error = NULL;\n  _cl_command_run *run_cmd = &command->command.run;\n\n  POCL_LOCK (pocl_dlhandle_lock);\n  ci = fetch_dlhandle_cache_item (run_cmd);\n  if (ci != NULL)\n    {\n      POCL_UNLOCK (pocl_dlhandle_lock);\n      return;\n    }\n\n  /* Not found, build a new kernel and cache its dlhandle. */\n  ci = get_new_dlhandle_cache_item ();\n  memcpy (ci->hash, run_cmd->hash, sizeof (pocl_kernel_hash_t));\n  ci->local_wgs[0] = run_cmd->pc.local_size[0];\n  ci->local_wgs[1] = run_cmd->pc.local_size[1];\n  ci->local_wgs[2] = run_cmd->pc.local_size[2];\n  ci->ref_count = initial_refcount;\n\n  ci->goffs_zero = run_cmd->pc.global_offset[0] == 0\n                   && run_cmd->pc.global_offset[1] == 0\n                   && run_cmd->pc.global_offset[2] == 0;\n\n  size_t max_grid_width = pocl_cmd_max_grid_dim_width (run_cmd);\n  ci->max_grid_dim_width = max_grid_width;\n\n  char *module_fn = pocl_check_kernel_disk_cache (command, specialize);\n\n  // reset possibly existing error from calls from an ICD loader\n  (void)dlerror();\n  ci->dlhandle = dlopen (module_fn, RTLD_NOW | RTLD_LOCAL);\n  dl_error = dlerror ();\n\n  if (ci->dlhandle == NULL || dl_error != NULL)\n    POCL_ABORT (\"dlopen(\\\"%s\\\") failed with '%s'.\\n\"\n                \"note: missing symbols in the kernel binary might be\"\n                \" reported as 'file not found' errors.\\n\",\n                module_fn, dl_error);\n\n  snprintf (workgroup_string, WORKGROUP_STRING_LENGTH,\n            \"_pocl_kernel_%s_workgroup\", run_cmd->kernel->name);\n\n  ci->wg = dlsym (ci->dlhandle, workgroup_string);\n  dl_error = dlerror ();\n\n  if (ci->wg == NULL || dl_error != NULL)\n    {\n      // Older OSX dyld APIs need the name without the underscore.\n      snprintf (workgroup_string, WORKGROUP_STRING_LENGTH,\n                \"pocl_kernel_%s_workgroup\", run_cmd->kernel->name);\n      ci->wg = dlsym (ci->dlhandle, workgroup_string);\n      dl_error = dlerror ();\n\n      if (ci->wg == NULL || dl_error != NULL)\n        POCL_ABORT (\"dlsym(\\\"%s\\\", \\\"%s\\\") failed with '%s'.\\n\"\n                    \"note: missing symbols in the kernel binary might be\"\n                    \" reported as 'file not found' errors.\\n\",\n                    module_fn, workgroup_string, dl_error);\n    }\n\n  run_cmd->wg = ci->wg;\n  DL_PREPEND (pocl_dlhandle_cache, ci);\n\n  POCL_UNLOCK (pocl_dlhandle_lock);\n  /***************************************************************************/\n  POCL_MEM_FREE (module_fn);\n}\n\n#define MIN_MAX_MEM_ALLOC_SIZE (128*1024*1024)\n\n/* accounting object for the main memory */\nstatic pocl_global_mem_t system_memory = {POCL_LOCK_INITIALIZER, 0, 0, 0};\n\nvoid\npocl_setup_device_for_system_memory (cl_device_id device)\n{\n  /* set up system memory limits, if required */\n  if (system_memory.total_alloc_limit == 0)\n  {\n      /* global_mem_size contains the entire memory size,\n       * and we need to leave some available for OS & other programs\n       * this sets it to 3/4 for systems with <=7gig mem,\n       * for >7 it sets to (total-2gigs)\n       */\n      cl_ulong alloc_limit = device->global_mem_size;\n      if (alloc_limit > ((cl_ulong)7 << 30))\n        system_memory.total_alloc_limit = alloc_limit - ((cl_ulong)2 << 30);\n      else\n        {\n          cl_ulong temp = (alloc_limit >> 2);\n          system_memory.total_alloc_limit = alloc_limit - temp;\n        }\n\n      system_memory.max_ever_allocated =\n          system_memory.currently_allocated = 0;\n\n      /* in some cases (e.g. ARM32 pocl on ARM64 system with >4G ram),\n       * global memory is correctly reported but larger than can be\n       * used; limit to pointer size */\n      if (system_memory.total_alloc_limit > UINTPTR_MAX)\n        system_memory.total_alloc_limit = UINTPTR_MAX;\n\n      /* apply rlimit settings */\n#ifdef HAVE_GETRLIMIT\n      struct rlimit limits;\n      int ret = getrlimit (RLIMIT_DATA, &limits);\n      if ((ret == 0) && (system_memory.total_alloc_limit > limits.rlim_cur))\n        system_memory.total_alloc_limit = limits.rlim_cur;\n#endif\n  }\n\n  device->global_mem_size = system_memory.total_alloc_limit;\n\n  int limit_memory_gb = pocl_get_int_option (\"POCL_MEMORY_LIMIT\", 0);\n  if (limit_memory_gb > 0)\n    {\n      cl_ulong limited_memory = (cl_ulong)limit_memory_gb << 30;\n      if (device->global_mem_size > limited_memory)\n        device->global_mem_size = limited_memory;\n      else\n        POCL_MSG_WARN (\"requested POCL_MEMORY_LIMIT %i GBs is larger than\"\n                       \" physical memory size (%u) GBs, ignoring\\n\",\n                       limit_memory_gb,\n                       (unsigned)(device->global_mem_size >> 30));\n    }\n\n  if (device->global_mem_size < MIN_MAX_MEM_ALLOC_SIZE)\n    POCL_ABORT(\"Not enough memory to run on this device.\\n\");\n\n  /* Maximum allocation size: we don't have hardware limits, so we\n   * can potentially allocate the whole memory for a single buffer, unless\n   * of course there are limits set at the operating system level. Of course\n   * we still have to respect the OpenCL-commanded minimum */\n\n  cl_ulong alloc_limit = pocl_size_ceil2_64 (device->global_mem_size / 4);\n\n  if (alloc_limit < MIN_MAX_MEM_ALLOC_SIZE)\n    alloc_limit = MIN_MAX_MEM_ALLOC_SIZE;\n\n  // set up device properties..\n  device->global_memory = &system_memory;\n  device->max_mem_alloc_size = alloc_limit;\n\n  // TODO in theory now if alloc_limit was > rlim_cur and < rlim_max\n  // we should try and setrlimit to alloc_limit, or allocations might fail\n}\n\nvoid\npocl_reinit_system_memory()\n{\n  system_memory.currently_allocated = 0;\n  system_memory.max_ever_allocated = 0;\n}\n\n/* set maximum allocation sizes for buffers and images */\nvoid\npocl_set_buffer_image_limits(cl_device_id device)\n{\n  pocl_setup_device_for_system_memory(device);\n\n  assert (device->global_mem_size > 0);\n  assert (device->max_compute_units > 0);\n  assert (device->max_mem_alloc_size > 0);\n\n  /* these should be ideally setup by hwloc or proc/cpuinfo;\n   * if not, set them to some reasonable values\n   */\n  if (device->local_mem_size == 0)\n    {\n      cl_ulong s = pocl_size_ceil2_64 (device->global_mem_size / 1024);\n      s = min (s, 512UL * 1024);\n      device->local_mem_size = s;\n      device->max_constant_buffer_size = s;\n    }\n\n  /* We don't have hardware limitations on the buffer-backed image sizes,\n   * so we set the maximum size in terms of the maximum amount of pixels\n   * that fix in max_mem_alloc_size. A single pixel can take up to 4 32-bit channels,\n   * i.e. 16 bytes.\n   */\n  size_t max_pixels = device->max_mem_alloc_size/16;\n  if (max_pixels > device->image_max_buffer_size)\n    device->image_max_buffer_size = max_pixels;\n\n  /* Similarly, we can take the 2D image size limit to be the largest power of 2\n   * whose square fits in image_max_buffer_size; since the 2D image size limit\n   * starts at a power of 2, it's a simple matter of doubling.\n   * This is actually completely arbitrary, another equally valid option\n   * would be to have each maximum dimension match the image_max_buffer_size.\n   */\n  max_pixels = device->image2d_max_width;\n  // keep doubing until we go over\n  while (max_pixels <= device->image_max_buffer_size/max_pixels)\n    max_pixels *= 2;\n  // halve before assignment\n  max_pixels /= 2;\n  if (max_pixels > device->image2d_max_width)\n    device->image2d_max_width = device->image2d_max_height = max_pixels;\n\n  /* Same thing for 3D images, of course with cubes. Again, totally arbitrary. */\n  max_pixels = device->image3d_max_width;\n  // keep doubing until we go over\n  while (max_pixels*max_pixels <= device->image_max_buffer_size/max_pixels)\n    max_pixels *= 2;\n  // halve before assignment\n  max_pixels /= 2;\n  if (max_pixels > device->image3d_max_width)\n  device->image3d_max_width = device->image3d_max_height =\n    device->image3d_max_depth = max_pixels;\n\n}\n\nvoid*\npocl_aligned_malloc_global_mem(cl_device_id device, size_t align, size_t size)\n{\n  pocl_global_mem_t *mem = device->global_memory;\n  void *retval = NULL;\n\n  POCL_LOCK (mem->pocl_lock);\n  if ((mem->total_alloc_limit - mem->currently_allocated) < size)\n    goto ERROR;\n\n  retval = pocl_aligned_malloc (align, size);\n  if (!retval)\n    goto ERROR;\n\n  mem->currently_allocated += size;\n  if (mem->max_ever_allocated < mem->currently_allocated)\n    mem->max_ever_allocated = mem->currently_allocated;\n  assert(mem->currently_allocated <= mem->total_alloc_limit);\n\nERROR:\n  POCL_UNLOCK (mem->pocl_lock);\n\n  return retval;\n}\n\nvoid\npocl_free_global_mem(cl_device_id device, void* ptr, size_t size)\n{\n  pocl_global_mem_t *mem = device->global_memory;\n\n  POCL_LOCK (mem->pocl_lock);\n  assert(mem->currently_allocated >= size);\n  mem->currently_allocated -= size;\n  POCL_UNLOCK (mem->pocl_lock);\n\n  POCL_MEM_FREE(ptr);\n}\n\n\nvoid\npocl_print_system_memory_stats()\n{\n  POCL_MSG_PRINT_F (MEMORY, INFO, \"\",\n                    \"____ Total available system memory  : %10\" PRIu64 \" KB\\n\"\n                    \" ____ Currently used system memory   : %10\" PRIu64 \" KB\\n\"\n                    \" ____ Max used system memory         : %10\" PRIu64\n                    \" KB\\n\",\n                    system_memory.total_alloc_limit >> 10,\n                    system_memory.currently_allocated >> 10,\n                    system_memory.max_ever_allocated >> 10);\n}\n\n/* Unique hash for a device + program build + kernel name combination.\n   NOTE: this does NOT take into account the local WG sizes or other\n   specialization properties. */\nvoid\npocl_calculate_kernel_hash (cl_program program, unsigned kernel_i,\n                            unsigned device_i)\n{\n  SHA1_CTX hash_ctx;\n  pocl_SHA1_Init (&hash_ctx);\n\n  char *n = program->kernel_meta[kernel_i].name;\n  pocl_SHA1_Update (&hash_ctx, (uint8_t *)program->build_hash[device_i],\n                    sizeof (SHA1_digest_t));\n  pocl_SHA1_Update (&hash_ctx, (uint8_t *)n, strlen (n));\n\n  uint8_t digest[SHA1_DIGEST_SIZE];\n  pocl_SHA1_Final (&hash_ctx, digest);\n\n  memcpy (program->kernel_meta[kernel_i].build_hash[device_i], digest,\n          sizeof (pocl_kernel_hash_t));\n}\n\n/* default WG size in each dimension & total WG size.\n * this should be reasonable for CPU */\n#define DEFAULT_WG_SIZE 4096\n\nstatic const char *final_ld_flags[] =\n  {\"-lm\", \"-nostartfiles\", HOST_LD_FLAGS_ARRAY, NULL};\n\nstatic cl_device_partition_property basic_partition_properties[1] = { 0 };\nstatic const cl_image_format supported_image_formats[] = {\n  { CL_A, CL_SNORM_INT8 },\n  { CL_A, CL_SNORM_INT16 },\n  { CL_A, CL_UNORM_INT8 },\n  { CL_A, CL_UNORM_INT16 },\n  { CL_A, CL_SIGNED_INT8 },\n  { CL_A, CL_SIGNED_INT16 },\n  { CL_A, CL_SIGNED_INT32 },\n  { CL_A, CL_UNSIGNED_INT8 },\n  { CL_A, CL_UNSIGNED_INT16 },\n  { CL_A, CL_UNSIGNED_INT32 },\n  { CL_A, CL_FLOAT },\n  { CL_RGBA, CL_SNORM_INT8 },\n  { CL_RGBA, CL_SNORM_INT16 },\n  { CL_RGBA, CL_UNORM_INT8 },\n  { CL_RGBA, CL_UNORM_INT16 },\n  { CL_RGBA, CL_SIGNED_INT8 },\n  { CL_RGBA, CL_SIGNED_INT16 },\n  { CL_RGBA, CL_SIGNED_INT32 },\n  { CL_RGBA, CL_UNSIGNED_INT8 },\n  { CL_RGBA, CL_UNSIGNED_INT16 },\n  { CL_RGBA, CL_UNSIGNED_INT32 },\n  { CL_RGBA, CL_HALF_FLOAT },\n  { CL_RGBA, CL_FLOAT },\n  { CL_ARGB, CL_SNORM_INT8 },\n  { CL_ARGB, CL_UNORM_INT8 },\n  { CL_ARGB, CL_SIGNED_INT8 },\n  { CL_ARGB, CL_UNSIGNED_INT8 },\n  { CL_BGRA, CL_SNORM_INT8 },\n  { CL_BGRA, CL_UNORM_INT8 },\n  { CL_BGRA, CL_SIGNED_INT8 },\n  { CL_BGRA, CL_UNSIGNED_INT8 }\n};\n\nvoid\npocl_init_default_device_infos (cl_device_id dev)\n{\n  size_t i;\n\n  dev->type = CL_DEVICE_TYPE_CPU;\n  dev->max_work_item_dimensions = 3;\n  dev->final_linkage_flags = final_ld_flags;\n  dev->extensions = DEFAULT_DEVICE_EXTENSIONS;\n\n  SETUP_DEVICE_CL_VERSION(HOST_DEVICE_CL_VERSION_MAJOR, HOST_DEVICE_CL_VERSION_MINOR)\n  /*\n    The hard restriction will be the context data which is\n    stored in stack that can be as small as 8K in Linux.\n    Thus, there should be enough work-items alive to fill up\n    the SIMD lanes times the vector units, but not more than\n    that to avoid stack overflow and cache trashing.\n  */\n  int max_wg\n      = pocl_get_int_option (\"POCL_MAX_WORK_GROUP_SIZE\", DEFAULT_WG_SIZE);\n  assert (max_wg > 0);\n  max_wg = min (max_wg, DEFAULT_WG_SIZE);\n  if (max_wg < 0)\n    max_wg = DEFAULT_WG_SIZE;\n\n  dev->max_work_item_sizes[0] = dev->max_work_item_sizes[1]\n      = dev->max_work_item_sizes[2] = dev->max_work_group_size = max_wg;\n\n  dev->preferred_wg_size_multiple = 8;\n#ifdef OCS_AVAILABLE\n  cpu_setup_vector_widths (dev);\n#else\n  dev->preferred_vector_width_char = POCL_DEVICES_PREFERRED_VECTOR_WIDTH_CHAR;\n  dev->preferred_vector_width_short = POCL_DEVICES_PREFERRED_VECTOR_WIDTH_SHORT;\n  dev->preferred_vector_width_int = POCL_DEVICES_PREFERRED_VECTOR_WIDTH_INT;\n  dev->preferred_vector_width_long = POCL_DEVICES_PREFERRED_VECTOR_WIDTH_LONG;\n  dev->preferred_vector_width_float = POCL_DEVICES_PREFERRED_VECTOR_WIDTH_FLOAT;\n  /* TODO: figure out what the difference between preferred and native widths are */\n  dev->native_vector_width_char = POCL_DEVICES_NATIVE_VECTOR_WIDTH_CHAR;\n  dev->native_vector_width_short = POCL_DEVICES_NATIVE_VECTOR_WIDTH_SHORT;\n  dev->native_vector_width_int = POCL_DEVICES_NATIVE_VECTOR_WIDTH_INT;\n  dev->native_vector_width_long = POCL_DEVICES_NATIVE_VECTOR_WIDTH_LONG;\n  dev->native_vector_width_float = POCL_DEVICES_NATIVE_VECTOR_WIDTH_FLOAT;\n\n#ifdef _CL_DISABLE_DOUBLE\n  dev->native_vector_width_double = 0;\n  dev->preferred_vector_width_double = 0;\n#else\n  dev->native_vector_width_double = POCL_DEVICES_NATIVE_VECTOR_WIDTH_DOUBLE;\n  dev->preferred_vector_width_double = POCL_DEVICES_PREFERRED_VECTOR_WIDTH_DOUBLE;\n#endif\n#ifdef _CL_DISABLE_HALF\n  dev->preferred_vector_width_half = 0;\n  dev->native_vector_width_half = 0;\n#else\n  dev->preferred_vector_width_half = POCL_DEVICES_PREFERRED_VECTOR_WIDTH_HALF;\n  dev->native_vector_width_half = POCL_DEVICES_NATIVE_VECTOR_WIDTH_HALF;\n#endif\n\n#endif\n\n  dev->grid_width_specialization_limit = USHRT_MAX;\n  dev->address_bits = HOST_DEVICE_ADDRESS_BITS;\n  dev->image_support = CL_TRUE;\n  /* Use the minimum values until we get a more sensible upper limit from\n     somewhere. */\n  dev->max_read_image_args = dev->max_write_image_args\n      = dev->max_read_write_image_args = 128;\n  dev->image2d_max_width = dev->image2d_max_height = 8192;\n  dev->image3d_max_width = dev->image3d_max_height = dev->image3d_max_depth = 2048;\n  dev->max_samplers = 16;\n\n  for (i = 0; i < NUM_OPENCL_IMAGE_TYPES; ++i)\n    {\n      dev->num_image_formats[i]\n          = sizeof (supported_image_formats) / sizeof (cl_image_format);\n      dev->image_formats[i] = supported_image_formats;\n    }\n\n  dev->image_max_buffer_size = 65536;\n  dev->image_max_array_size = 2048;\n  dev->max_constant_args = 8;\n  dev->max_mem_alloc_size = 0;\n  dev->max_parameter_size = 1024;\n  dev->min_data_type_align_size = MAX_EXTENDED_ALIGNMENT;\n  dev->mem_base_addr_align = MAX_EXTENDED_ALIGNMENT;\n  dev->half_fp_config = 0;\n  dev->single_fp_config = CL_FP_ROUND_TO_NEAREST | CL_FP_INF_NAN;\n#ifdef __x86_64__\n  dev->single_fp_config |= (CL_FP_DENORM | CL_FP_ROUND_TO_INF\n                            | CL_FP_ROUND_TO_ZERO\n                            | CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT);\n#ifdef OCS_AVAILABLE\n  if (cpu_has_fma())\n    dev->single_fp_config |= CL_FP_FMA;\n#endif\n#endif\n\n#ifdef _CL_DISABLE_DOUBLE\n  dev->double_fp_config = 0;\n#else\n  /* TODO: all of these are the minimum mandated, but not all CPUs may actually\n   * support all of them. */\n  dev->double_fp_config = CL_FP_FMA | CL_FP_ROUND_TO_NEAREST\n                          | CL_FP_ROUND_TO_ZERO | CL_FP_ROUND_TO_INF\n                          | CL_FP_INF_NAN | CL_FP_DENORM;\n  /* this is a workaround for issue 28 in https://github.com/Oblomov/clinfo\n   * https://github.com/Oblomov/clinfo/issues/28 */\n  dev->double_fp_config |= CL_FP_CORRECTLY_ROUNDED_DIVIDE_SQRT;\n#endif\n\n  dev->global_mem_cache_type = CL_NONE;\n  dev->global_mem_cacheline_size = 0;\n  dev->global_mem_cache_size = 0;\n  dev->global_mem_size = 0;\n  dev->max_constant_buffer_size = 0;\n  dev->max_constant_args = 8;\n  dev->local_mem_type = CL_GLOBAL;\n  dev->local_mem_size = 0;\n  dev->error_correction_support = CL_FALSE;\n  dev->host_unified_memory = CL_TRUE;\n\n  dev->profiling_timer_resolution = pocl_timer_resolution;\n\n  dev->endian_little = !(WORDS_BIGENDIAN);\n  dev->available = CL_TRUE;\n  dev->compiler_available = CL_TRUE;\n  dev->spmd = CL_FALSE;\n  dev->arg_buffer_launcher = CL_FALSE;\n  dev->workgroup_pass = CL_TRUE;\n  dev->execution_capabilities = CL_EXEC_KERNEL | CL_EXEC_NATIVE_KERNEL;\n  dev->platform = 0;\n\n  dev->parent_device = NULL;\n  /* These two are only used for subdevices.\n   * Each subdevice has these two setup when created.\n   * The subdevice will then use these CUs:\n   *  [start, start+1, ..., start+count-1]\n   * this may not work with more complicated partitioning schemes,\n   * but is good enough for now. */\n  dev->core_start = 0;\n  dev->core_count = 0;\n  /* basic does not support partitioning */\n  dev->max_sub_devices = 1;\n  dev->num_partition_properties = 1;\n  dev->partition_properties = basic_partition_properties;\n  dev->num_partition_types = 0;\n  dev->partition_type = NULL;\n\n  dev->device_side_printf = 1;\n  dev->printf_buffer_size = PRINTF_BUFFER_SIZE * 1024;\n\n  dev->vendor = \"pocl\";\n  dev->profile = \"FULL_PROFILE\";\n  /* Note: The specification describes identifiers being delimited by\n     only a single space character. Some programs that check the device's\n     extension  string assume this rule. Future extension additions should\n     ensure that there is no more than a single space between\n     identifiers. */\n  dev->global_as_id = dev->local_as_id = dev->constant_as_id = 0;\n\n  dev->should_allocate_svm = 0;\n  /* OpenCL 2.0 properties */\n  dev->svm_caps = CL_DEVICE_SVM_COARSE_GRAIN_BUFFER\n                  | CL_DEVICE_SVM_FINE_GRAIN_BUFFER\n                  | CL_DEVICE_SVM_ATOMICS;\n  /* TODO these are minimums, figure out whats a reasonable value */\n  dev->max_events = 1024;\n  dev->max_queues = 1;\n  dev->max_pipe_args = 16;\n  dev->max_pipe_active_res = 1;\n  dev->max_pipe_packet_size = 1024;\n  dev->dev_queue_pref_size = 16 * 1024;\n  dev->dev_queue_max_size = 256 * 1024;\n  dev->on_dev_queue_props = CL_QUEUE_OUT_OF_ORDER_EXEC_MODE_ENABLE\n                               | CL_QUEUE_PROFILING_ENABLE;\n  dev->on_host_queue_props = CL_QUEUE_PROFILING_ENABLE;\n  dev->has_64bit_long = 1;\n  dev->autolocals_to_args = POCL_AUTOLOCALS_TO_ARGS_ALWAYS;\n  dev->device_alloca_locals = 0;\n\n#ifdef OCS_AVAILABLE\n\n  dev->llvm_target_triplet = OCL_KERNEL_TARGET;\n#ifdef HOST_CPU_FORCED\n  dev->llvm_cpu = OCL_KERNEL_TARGET_CPU;\n#else\n  dev->llvm_cpu = get_llvm_cpu_name ();\n#endif\n\n  dev->spirv_version = \"SPIR-V_1.2\";\n#else /* No compiler, no CPU info */\n  dev->llvm_cpu = NULL;\n  dev->llvm_target_triplet = \"\";\n#endif\n\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/lib/CL/devices/devices.c": "/* Definition of available OpenCL devices.\n\n   Copyright (c) 2011 Universidad Rey Juan Carlos and\n                 2012-2018 Pekka J\u00e4\u00e4skel\u00e4inen\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n\n   The above copyright notice and this permission notice shall be included in\n   all copies or substantial portions of the Software.\n\n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   THE SOFTWARE.\n*/\n\n#define _GNU_SOURCE\n\n#include <string.h>\n#include <ctype.h>\n\n#ifdef __linux__\n#include <limits.h>\n#include <signal.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <sys/types.h>\n#include <ucontext.h>\n#endif\n\n#ifndef _MSC_VER\n#  include <unistd.h>\n#else\n#  include \"vccompat.hpp\"\n#endif\n\n#include \"common.h\"\n#include \"config.h\"\n#include \"devices.h\"\n#include \"pocl_cache.h\"\n#include \"pocl_debug.h\"\n#include \"pocl_runtime_config.h\"\n#include \"pocl_tracing.h\"\n\n#ifdef OCS_AVAILABLE\n#include \"pocl_llvm.h\"\n#endif\n\n#if defined(TCE_AVAILABLE)\n#include \"tce/ttasim/ttasim.h\"\n#endif\n\n#include \"hsa/pocl-hsa.h\"\n\n#if defined(BUILD_ACCEL)\n#include \"accel/accel.h\"\n#endif\n\n#define MAX_DEV_NAME_LEN 64\n\n#ifndef PATH_MAX\n#define PATH_MAX 4096\n#endif\n\n#ifdef HAVE_LIBDL\n#if defined(__APPLE__)\n#define _DARWIN_C_SOURCE\n#endif\n#include <dlfcn.h>\n#endif\n\n/* the enabled devices */\nstatic struct _cl_device_id* pocl_devices = NULL;\nunsigned int pocl_num_devices = 0;\n\n/* Init function prototype */\ntypedef void (*init_device_ops)(struct pocl_device_ops*);\n\n/* All init function for device operations available to pocl */\nstatic init_device_ops pocl_devices_init_ops[] = {\n#ifdef BUILD_BASIC\n  NULL,\n#endif\n#ifdef BUILD_PTHREAD\n  NULL,\n#endif\n#if defined(TCE_AVAILABLE)\n  NULL,\n#endif\n#if defined(BUILD_HSA)\n  NULL,\n#endif\n#if defined(BUILD_CUDA)\n  NULL,\n#endif\n#if defined(BUILD_ACCEL)\n  NULL,\n#endif\n};\n\n#define POCL_NUM_DEVICE_TYPES (sizeof(pocl_devices_init_ops) / sizeof((pocl_devices_init_ops)[0]))\n\nchar pocl_device_types[POCL_NUM_DEVICE_TYPES][30] = {\n#ifdef BUILD_BASIC\n  \"basic\",\n#endif\n#ifdef BUILD_PTHREAD\n  \"pthread\",\n#endif\n#if defined(TCE_AVAILABLE)\n  \"ttasim\",\n#endif\n#if defined(BUILD_HSA)\n  \"hsa\",\n#endif\n#if defined(BUILD_CUDA)\n  \"cuda\",\n#endif\n#if defined(BUILD_ACCEL)\n  \"accel\",\n#endif\n};\n\nstatic struct pocl_device_ops pocl_device_ops[POCL_NUM_DEVICE_TYPES];\n\n// first setup\nstatic unsigned first_init_done = 0;\nstatic unsigned init_in_progress = 0;\nstatic unsigned device_count[POCL_NUM_DEVICE_TYPES];\n\n// after calling drivers uninit, we may have to re-init the devices.\nstatic unsigned devices_active = 0;\n\nstatic pocl_lock_t pocl_init_lock = POCL_LOCK_INITIALIZER;\n\nstatic void *pocl_device_handles[POCL_NUM_DEVICE_TYPES];\n\n#ifndef _MSC_VER\n#define POCL_PATH_SEPARATOR \"/\"\n#else\n#define POCL_PATH_SEPARATOR \"\\\\\"\n#endif\n\nstatic void\nget_pocl_device_lib_path (char *result, char *device_name)\n{\n  Dl_info info;\n  if (dladdr ((void *)get_pocl_device_lib_path, &info))\n    {\n      char const *soname = info.dli_fname;\n      strcpy (result, soname);\n      char *last_slash = strrchr (result, POCL_PATH_SEPARATOR[0]);\n      *(++last_slash) = '\\0';\n      if (strlen (result) > 0)\n        {\n#ifdef ENABLE_POCL_BUILDING\n          if (pocl_get_bool_option (\"POCL_BUILDING\", 0))\n            {\n              strcat (result, \"devices\");\n              strcat (result, POCL_PATH_SEPARATOR);\n              if (strncmp(device_name, \"ttasim\", 6) == 0)\n                {\n                  strcat (result, \"tce\");\n                }\n              else\n                {\n                  strcat (result, device_name);\n                }\n              strcat (result, POCL_PATH_SEPARATOR);\n            }\n          else\n#endif\n            {\n              strcat (result, POCL_INSTALL_PRIVATE_LIBDIR_REL);\n            }\n          strcat (result, POCL_PATH_SEPARATOR);\n          strcat (result, \"libpocl-devices-\");\n          strcat (result, device_name);\n          strcat (result, \".so\");\n          return;\n        }\n    }\n}\n\n/**\n * Get the number of specified devices from environment\n */\nint pocl_device_get_env_count(const char *dev_type)\n{\n  const char *dev_env = getenv(POCL_DEVICES_ENV);\n  char *ptr, *saveptr = NULL, *tofree, *token;\n  unsigned int dev_count = 0;\n  if (dev_env == NULL)\n    {\n      return -1;\n    }\n  ptr = tofree = strdup(dev_env);\n  while ((token = strtok_r (ptr, \" \", &saveptr)) != NULL)\n    {\n      if(strcmp(token, dev_type) == 0)\n        dev_count++;\n      ptr = NULL;\n    }\n  POCL_MEM_FREE(tofree);\n\n  return dev_count;\n}\n\nunsigned int\npocl_get_devices(cl_device_type device_type, struct _cl_device_id **devices, unsigned int num_devices)\n{\n  unsigned int i, dev_added = 0;\n\n  int offline_compile = pocl_get_bool_option(\"POCL_OFFLINE_COMPILE\", 0);\n\n  for (i = 0; i < pocl_num_devices; ++i)\n    {\n      if (!offline_compile && (pocl_devices[i].available != CL_TRUE))\n        continue;\n\n      if (device_type == CL_DEVICE_TYPE_DEFAULT)\n        {\n          devices[dev_added] = &pocl_devices[i];\n          ++dev_added;\n          break;\n        }\n\n      if (pocl_devices[i].type & device_type)\n        {\n            if (dev_added < num_devices)\n              {\n                devices[dev_added] = &pocl_devices[i];\n                ++dev_added;\n              }\n            else\n              {\n                break;\n              }\n        }\n    }\n  return dev_added;\n}\n\nunsigned int\npocl_get_device_type_count(cl_device_type device_type)\n{\n  int count = 0;\n  unsigned int i;\n\n  int offline_compile = pocl_get_bool_option(\"POCL_OFFLINE_COMPILE\", 0);\n\n  for (i = 0; i < pocl_num_devices; ++i)\n    {\n      if (!offline_compile && (pocl_devices[i].available != CL_TRUE))\n        continue;\n\n      if (device_type == CL_DEVICE_TYPE_DEFAULT)\n        return 1;\n\n      if (pocl_devices[i].type & device_type)\n        {\n           ++count;\n        }\n    }\n\n  return count;\n}\n\n\nstatic inline void\nstr_toupper(char *out, const char *in)\n{\n  int i;\n\n  for (i = 0; in[i] != '\\0'; i++)\n    out[i] = toupper(in[i]);\n  out[i] = '\\0';\n}\n\n/* This ugly hack is required because:\n *\n * OpenCL 1.2 specification, 6.3 Operators :\n *\n * A divide by zero with integer types does not cause an exception\n * but will result in an unspecified value. Division by zero for\n * floating-point types will result in \u00b1infinity or NaN as\n * prescribed by the IEEE-754 standard.\n *\n * FPU exceptions are masked by default on x86 linux, but integer divide\n * is not and there doesn't seem any sane way to mask it.\n *\n * This *might* be possible to fix with a LLVM pass (either check divisor\n * for 0, or perhaps some vector extension has a suitable instruction), but\n * it's likely to ruin the performance.\n */\n\n#ifdef ENABLE_HOST_CPU_DEVICES\n#ifdef __linux__\n#ifdef __x86_64__\n\n#define DIV_OPCODE_SIZE 1\n#define DIV_OPCODE_MASK 0xf6\n\n/* F6 /6, F6 /7, F7 /6, F7 /7 */\n#define DIV_OPCODE_1 0xf6\n#define DIV_OPCODE_2 0xf7\n#define DIV_MODRM_OPCODE_EXT_1 0x38 //  /7\n#define DIV_MODRM_OPCODE_EXT_2 0x30 //  /6\n\n#define MODRM_SIZE 1\n#define MODRM_MASK 0xC0\n#define REG2_MASK 0x38\n#define REG1_MASK 0x07\n#define ADDR_MODE_INDIRECT_ONE_BYTE_OFFSET 0x40\n#define ADDR_MODE_INDIRECT_FOUR_BYTE_OFFSET 0x80\n#define ADDR_MODE_INDIRECT 0x0\n#define ADDR_MODE_REGISTER_ONLY 0xC0\n#define REG_SP 0x4\n#define REG_BP 0x5\n#define SIB_BYTE 1\n#define IP_RELATIVE_INDEXING 4\n\nstatic struct sigaction sigfpe_action, old_sigfpe_action;\n\nstatic void\nsigfpe_signal_handler (int signo, siginfo_t *si, void *data)\n{\n  ucontext_t *uc;\n  uc = (ucontext_t *)data;\n  unsigned char *eip = (unsigned char *)(uc->uc_mcontext.gregs[REG_RIP]);\n\n  if ((signo == SIGFPE)\n      && ((si->si_code == FPE_INTDIV) || (si->si_code == FPE_INTOVF)))\n    {\n      /* Luckily for us, div-by-0 exceptions do NOT advance the IP register,\n       * so we have to disassemble the instruction (to know its length)\n       * and move IP past it. */\n      unsigned n = 0;\n\n      /* skip all prefixes */\n      while ((n < 4) && ((eip[n] & DIV_OPCODE_MASK) != DIV_OPCODE_MASK))\n        ++n;\n\n      /* too much prefixes = decoding failed */\n      if (n >= 4)\n        goto ORIGINAL_HANDLER;\n\n      /* check opcode */\n      unsigned opcode = eip[n];\n      if ((opcode != DIV_OPCODE_1) && (opcode != DIV_OPCODE_2))\n        goto ORIGINAL_HANDLER;\n      n += DIV_OPCODE_SIZE;\n\n      unsigned modrm = eip[n];\n      unsigned modmask = modrm & MODRM_MASK;\n      unsigned reg1mask = modrm & REG1_MASK;\n      unsigned reg2mask = modrm & REG2_MASK;\n      /* check opcode extension in ModR/M reg2 */\n      if ((reg2mask != DIV_MODRM_OPCODE_EXT_1)\n          && (reg2mask != DIV_MODRM_OPCODE_EXT_2))\n        goto ORIGINAL_HANDLER;\n      n += MODRM_SIZE;\n\n      /* handle immediates/registers */\n      if (modmask == ADDR_MODE_INDIRECT_ONE_BYTE_OFFSET)\n        n += 1;\n      if (modmask == ADDR_MODE_INDIRECT_FOUR_BYTE_OFFSET)\n        n += 4;\n      if (modmask == ADDR_MODE_INDIRECT)\n        n += 0;\n      if (modmask != ADDR_MODE_REGISTER_ONLY)\n        {\n          if (reg1mask == REG_SP)\n            n += SIB_BYTE;\n          if (reg1mask == REG_BP)\n            n += IP_RELATIVE_INDEXING;\n        }\n\n      uc->uc_mcontext.gregs[REG_RIP] += n;\n      return;\n    }\n  else\n    {\n    ORIGINAL_HANDLER:\n      (*old_sigfpe_action.sa_sigaction) (signo, si, data);\n    }\n}\n\n#endif\n#endif\n#endif\n\ncl_int\npocl_uninit_devices ()\n{\n  cl_int retval = CL_SUCCESS;\n\n  POCL_LOCK (pocl_init_lock);\n  if ((!devices_active) || (pocl_num_devices == 0))\n    goto FINISH;\n\n  POCL_MSG_PRINT_GENERAL (\"UNINIT all devices\\n\");\n\n  unsigned i, j, dev_index;\n\n  dev_index = 0;\n  cl_device_id d;\n  for (i = 0; i < POCL_NUM_DEVICE_TYPES; ++i)\n    {\n      if (pocl_devices_init_ops[i] == NULL)\n        continue;\n      assert (pocl_device_ops[i].init);\n      for (j = 0; j < device_count[i]; ++j)\n        {\n          d = &pocl_devices[dev_index];\n          if (d->available == 0)\n            continue;\n          if (d->ops->reinit == NULL || d->ops->uninit == NULL)\n            continue;\n          cl_int ret = d->ops->uninit (j, d);\n          if (ret != CL_SUCCESS)\n            {\n              retval = ret;\n              goto FINISH;\n            }\n          if (pocl_device_handles[i] != NULL)\n            {\n              dlclose (pocl_device_handles[i]);\n            }\n          ++dev_index;\n        }\n    }\n\nFINISH:\n  devices_active = 0;\n  POCL_UNLOCK (pocl_init_lock);\n\n  return retval;\n}\n\nstatic cl_int\npocl_reinit_devices ()\n{\n  assert (first_init_done);\n  cl_int retval = CL_SUCCESS;\n\n  if (devices_active)\n    return retval;\n\n  if (pocl_num_devices == 0)\n    return CL_DEVICE_NOT_FOUND;\n\n  POCL_MSG_WARN (\"REINIT all devices\\n\");\n\n  unsigned i, j, dev_index;\n\n  dev_index = 0;\n  cl_device_id d;\n  /* Init infos for each probed devices */\n  for (i = 0; i < POCL_NUM_DEVICE_TYPES; ++i)\n    {\n      assert (pocl_device_ops[i].init);\n      for (j = 0; j < device_count[i]; ++j)\n        {\n          d = &pocl_devices[dev_index];\n          if (d->available == 0)\n            continue;\n          if (d->ops->reinit == NULL || d->ops->uninit == NULL)\n            continue;\n          cl_int ret = d->ops->reinit (j, d);\n          if (ret != CL_SUCCESS)\n            {\n              retval = ret;\n              goto FINISH;\n            }\n\n          ++dev_index;\n        }\n    }\n\nFINISH:\n\n  devices_active = 1;\n  return retval;\n}\n\ncl_int\npocl_init_devices ()\n{\n  int errcode = CL_SUCCESS;\n\n  /* This is a workaround to a nasty problem with libhwloc: When\n     initializing basic, it calls libhwloc to query device info.\n     In case libhwloc has the OpenCL plugin installed, it initializes\n     it and it leads to initializing pocl again which leads to an\n     infinite loop. This only protects against recursive calls of\n     pocl_init_devices(), so must be done without pocl_init_lock held. */\n  if (init_in_progress)\n    return CL_SUCCESS; /* debatable, but what else can we do ? */\n\n  POCL_LOCK (pocl_init_lock);\n  init_in_progress = 1;\n\n  if (first_init_done)\n    {\n      if (!devices_active)\n        {\n          POCL_MSG_PRINT_GENERAL (\"FIRST INIT done; REINIT all devices\\n\");\n          pocl_reinit_devices (); // TODO err check\n        }\n      errcode = pocl_num_devices ? CL_SUCCESS : CL_DEVICE_NOT_FOUND;\n      goto ERROR;\n    }\n\n  /* first time initialization */\n  unsigned i, j, dev_index;\n  char env_name[1024];\n  char dev_name[MAX_DEV_NAME_LEN] = { 0 };\n\n  /* Set a global debug flag, so we don't have to call pocl_get_bool_option\n   * everytime we use the debug macros */\n#ifdef POCL_DEBUG_MESSAGES\n  const char* debug = pocl_get_string_option (\"POCL_DEBUG\", \"0\");\n  pocl_debug_messages_setup (debug);\n  pocl_stderr_is_a_tty = isatty(fileno(stderr));\n#endif\n\n  POCL_GOTO_ERROR_ON ((pocl_cache_init_topdir ()), CL_DEVICE_NOT_FOUND,\n                      \"Cache directory initialization failed\");\n\n  pocl_tracing_init ();\n\n#ifdef HAVE_SLEEP\n  int delay = pocl_get_int_option (\"POCL_STARTUP_DELAY\", 0);\n  if (delay > 0)\n    sleep (delay);\n#endif\n\n\n#ifdef ENABLE_HOST_CPU_DEVICES\n#ifdef __linux__\n#ifdef __x86_64__\n\n  if (pocl_get_bool_option (\"POCL_SIGFPE_HANDLER\", 1))\n    {\n\n#ifdef OCS_AVAILABLE\n      /* This is required to force LLVM to register its signal\n       * handlers, before pocl registers its own SIGFPE handler.\n       * LLVM otherwise calls this via\n       *    pocl_llvm_build_program ->\n       *    clang::PrintPreprocessedAction ->\n       *    CreateOutputFile -> RemoveFileOnSignal\n       * Registering our handlers before LLVM creates its sigaltstack\n       * leads to interesting crashes & bugs later.\n       */\n      char random_empty_file[POCL_FILENAME_LENGTH];\n      pocl_cache_tempname (random_empty_file, NULL, NULL);\n      pocl_llvm_remove_file_on_signal (random_empty_file);\n#endif\n\n      POCL_MSG_PRINT_GENERAL (\"Installing SIGFPE handler...\\n\");\n      sigfpe_action.sa_flags = SA_RESTART | SA_SIGINFO;\n      sigfpe_action.sa_sigaction = sigfpe_signal_handler;\n      int res = sigaction (SIGFPE, &sigfpe_action, &old_sigfpe_action);\n      assert (res == 0);\n    }\n\n#endif\n#endif\n#endif\n\n  /* Init operations */\n  for (i = 0; i < POCL_NUM_DEVICE_TYPES; ++i)\n    {\n      if (pocl_devices_init_ops[i] == NULL)\n        {\n          char device_library[PATH_MAX] = \"\";\n          get_pocl_device_lib_path (device_library, pocl_device_types[i]);\n          pocl_device_handles[i] = dlopen (device_library, RTLD_LAZY);\n          char init_device_ops_name[MAX_DEV_NAME_LEN + 21] = \"\";\n          strcat (init_device_ops_name, \"pocl_\");\n          strcat (init_device_ops_name, pocl_device_types[i]);\n          strcat (init_device_ops_name, \"_init_device_ops\");\n          if (pocl_device_handles[i] != NULL)\n            {\n              pocl_devices_init_ops[i] = (init_device_ops)dlsym (\n                  pocl_device_handles[i], init_device_ops_name);\n              if (pocl_devices_init_ops[i] != NULL)\n                {\n                  pocl_devices_init_ops[i](&pocl_device_ops[i]);\n                }\n              else\n                {\n                  POCL_MSG_ERR (\"Loading symbol %s from %s failed: %s\\n\",\n                                init_device_ops_name, device_library,\n                                dlerror ());\n                  device_count[i] = 0;\n                  continue;\n                }\n            }\n          else\n            {\n              POCL_MSG_WARN (\"Loading %s failed: %s\\n\", device_library,\n                             dlerror ());\n              device_count[i] = 0;\n              continue;\n            }\n        }\n      else\n        {\n          pocl_device_handles[i] = NULL;\n        }\n      pocl_devices_init_ops[i](&pocl_device_ops[i]);\n      assert(pocl_device_ops[i].device_name != NULL);\n\n      /* Probe and add the result to the number of probed devices */\n      assert(pocl_device_ops[i].probe);\n      device_count[i] = pocl_device_ops[i].probe(&pocl_device_ops[i]);\n      pocl_num_devices += device_count[i];\n    }\n\n  const char *dev_env = pocl_get_string_option (POCL_DEVICES_ENV, NULL);\n  POCL_GOTO_ERROR_ON ((pocl_num_devices == 0), CL_DEVICE_NOT_FOUND,\n                      \"no devices found. %s=%s\\n\", POCL_DEVICES_ENV, dev_env);\n\n  pocl_devices = (struct _cl_device_id*) calloc(pocl_num_devices, sizeof(struct _cl_device_id));\n  POCL_GOTO_ERROR_ON ((pocl_devices == NULL), CL_OUT_OF_HOST_MEMORY,\n                      \"Can not allocate memory for devices\\n\");\n\n  dev_index = 0;\n  /* Init infos for each probed devices */\n  for (i = 0; i < POCL_NUM_DEVICE_TYPES; ++i)\n    {\n      if (pocl_devices_init_ops[i] == NULL)\n        continue;\n      str_toupper (dev_name, pocl_device_ops[i].device_name);\n      assert(pocl_device_ops[i].init);\n      for (j = 0; j < device_count[i]; ++j)\n        {\n          cl_device_id dev = &pocl_devices[dev_index];\n          dev->ops = &pocl_device_ops[i];\n          dev->dev_id = dev_index;\n          POCL_INIT_OBJECT (dev);\n          dev->driver_version = PACKAGE_VERSION;\n          if (dev->version == NULL)\n            dev->version = \"OpenCL 2.0 pocl\";\n          dev->short_name = strdup (dev->ops->device_name);\n          /* The default value for the global memory space identifier is\n             the same as the device id. The device instance can then override\n             it to point to some other device's global memory id in case of\n             a shared global memory. */\n          pocl_devices[dev_index].global_mem_id = dev_index;\n\n          /* Check if there are device-specific parameters set in the\n             POCL_DEVICEn_PARAMETERS env. */\n          POCL_GOTO_ERROR_ON (\n              (snprintf (env_name, 1024, \"POCL_%s%d_PARAMETERS\", dev_name, j)\n               < 0),\n              CL_OUT_OF_HOST_MEMORY, \"Unable to generate the env string.\");\n          errcode = pocl_devices[dev_index].ops->init (\n              j, &pocl_devices[dev_index], getenv (env_name));\n          POCL_GOTO_ERROR_ON ((errcode != CL_SUCCESS), CL_DEVICE_NOT_AVAILABLE,\n                              \"Device %i / %s initialization failed!\", j,\n                              dev_name);\n\n          ++dev_index;\n        }\n    }\n\n  first_init_done = 1;\n  devices_active = 1;\nERROR:\n  init_in_progress = 0;\n  POCL_UNLOCK (pocl_init_lock);\n  return errcode;\n}\n\nint pocl_get_unique_global_mem_id ()\n{\n  static int global_id_counter = 1;\n  return global_id_counter++;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/include/vccompat.hpp": "/* pocl/include/vccompat.h - Compatibility header to provide some functions \n   which are not found from VC++. \n\n   All functions should be static inline so that they can be included in many places\n   without having problem of symbol collision.\n\n   Copyright (c) 2014 Mikael Lepist\u00f6 <elhigu@gmail.com>\n   \n   Permission is hereby granted, free of charge, to any person obtaining a copy\n   of this software and associated documentation files (the \"Software\"), to deal\n   in the Software without restriction, including without limitation the rights\n   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n   copies of the Software, and to permit persons to whom the Software is\n   furnished to do so, subject to the following conditions:\n   \n   The above copyright notice and this permission notice shall be included in\n   all copies or substantial portions of the Software.\n   \n   THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n   THE SOFTWARE.\n*/\n\n#ifndef VCCOMPAT_HPP\n#define VCCOMPAT_HPP\n\n#include <Windows.h>\n#define __restrict__ __restrict\n#define restrict __restrict\n\n#include <intrin.h>\n#define __builtin_popcount __popcnt\n\n// ERROR is used as label for goto in some OCL API functions\n#undef ERROR\n\n// if this causes linking problems, use inline function below...\n#define snprintf _snprintf\n\n/*\nstatic inline int snprintf(char *str, size_t size, const char *format, ...) {\n  va_list args;\n  va_start(args, format);\n  _snprintf(str, size, format, args);\n  va_end(args);\n}\n*/\n\nstatic inline char* strtok_r(char *str, const char *delim, char **saveptr) {\n  return strtok_s(str, delim, saveptr);\n}\n\n#define _USE_MATH_DEFINES\n\n#define srand48(x) srand(x)\n#define drand48() (double(rand()) / RAND_MAX)\n\n#include <sys/utime.h>\n#define utime _utime;\n\n#define RTLD_NOW 1\n#define RTLD_LOCAL 1\n\n/**\n * dl compatibility functions\n */\n\nstatic inline void* dlopen(const char* filename, int flags) {\n  return (void*)LoadLibrary(filename);\n}\n\nstatic inline int dlerror(void) {\n  return GetLastError();\n}\n\nstatic inline void *dlsym(void* handle, const char *symbol) {\n  return GetProcAddress((HMODULE)handle, symbol);\n}\n\n/**\n * Filesystem stuff\n */\n#include <io.h>\n#define R_OK    4       /* Test for read permission.  */\n#define W_OK    2       /* Test for write permission.  */\n#define F_OK    0       /* Test for existence.  */\n\n#include <stdlib.h>\n#include <direct.h>\n#include <process.h>\n\n#define mkdir(a,b) mkdir(a)\n\n/**\n * TODO: test these implementations...\n */\n\n/* Commented out: unused, and actually incorrect/unsafe.\nstatic inline void gen_random(char *s, const int len) {\n  static const char alphanum[] =\n    \"0123456789\"\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    \"abcdefghijklmnopqrstuvwxyz\";\n\n  for (int i = 0; i < len; ++i) {\n    s[i] = alphanum[rand() % (sizeof(alphanum)-1)];\n  }\n  s[len] = 0;\n}\n\nstatic inline void mkdtemp(char *temp) {\n  int rnd_start = strlen(temp) - 6;\n  gen_random(&temp[rnd_start], 6);\n  mkdir(temp);\n}\n*/\n\n/**\n * Memory allocation functions\n */\n#include <malloc.h>\n\nstatic int posix_memalign(void **p, size_t align, size_t size) { \n   void *buf = _aligned_malloc(size, align);\n   if (buf == NULL) return errno;\n   *p = buf;\n   return 0;\n}\n\n#define alloca _alloca\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/.git/objects/pack/pack-49600ab9e9d18af86c11c23b1a37560232d4e32d.pack",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/.git/objects/pack/pack-49600ab9e9d18af86c11c23b1a37560232d4e32d.idx",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/tests/runtime/clGetKernelArgInfo.spir64_nometa",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/tests/runtime/clGetKernelArgInfo.spir64_meta",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/tests/runtime/clGetKernelArgInfo.spir32_meta",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/tests/runtime/clGetKernelArgInfo.spir32_nometa",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example0/example0.spirv32",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example0/example0.spirv64",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example0/example0.spir64",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example0/example0.spir32",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/matrix1/matrix1.spir64",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/matrix1/matrix1.spir32",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example2/example2.spir64",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example2/example2.spir32",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example1/example1.spirv64",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example1/example1.spir64",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example1/example1.spir32",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example2a/example2a.spir64",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/example2a/example2a.spir32",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/pocl-android-sample/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/pocl-android-sample/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/pocl-android-sample/res/drawable-xhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/examples/pocl-android-sample/res/drawable-xxhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/doc/www/img/pocl-nvidia-SHOC-April17.png",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/doc/www/img/pocl-nvidia-SHOC-October20.png",
        "/tmp/vanessa/spack-stage/spack-stage-pocl-master-ob42acbbw4j5arkspsdov6t4f4fute7g/spack-src/doc/www/img/pocl-80x60.png"
    ],
    "total_files": 1753
}