{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/OSD/OSD_SharedLibrary.cxx": "// Copyright (c) 1998-1999 Matra Datavision\n// Copyright (c) 1999-2014 OPEN CASCADE SAS\n//\n// This file is part of Open CASCADE Technology software library.\n//\n// This library is free software; you can redistribute it and/or modify it under\n// the terms of the GNU Lesser General Public License version 2.1 as published\n// by the Free Software Foundation, with special exception defined in the file\n// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT\n// distribution for complete text of the license and disclaimer of any warranty.\n//\n// Alternatively, this file may be used under the terms of Open CASCADE\n// commercial license or contractual agreement.\n\n#ifndef _WIN32\n\n\n#include <OSD_Function.hxx>\n#include <OSD_LoadMode.hxx>\n#include <OSD_SharedLibrary.hxx>\n\n#include <stdio.h>\n#ifdef __some_crappy_system__\n/*\n * Values for 'mode' argument in dlopen().\n *\n*/\n#define RTLD_LAZY\t\t1\n#define RTLD_NOW\t        2\n/*\n * Interface to rld via unsupported __rld_libdl_interface() call.\n *\n */\n#define _LIBDL_RLD_DLOPEN\t1\n#define _LIBDL_RLD_DLCLOSE\t2\n#define _LIBDL_RLD_DLSYM\t3\n#define _LIBDL_RLD_DLERROR\t4\nextern \"C\" {void\t*dlopen(char *path, int mode);}\nextern \"C\" {void*   dlsym   (       void*  handle,char* name);}\nextern \"C\" {int     dlclose (       void  *handle  );}\nextern \"C\" {void    *dlerror (void);}\n#endif\n\n#include <dlfcn.h>\n\n#define BAD(X)  ((X) == NULL)\n\n// ----------------------------------------------------------------\n//\n// Create and initialize a shared library object to NULL\n//\n// ----------------------------------------------------------------\nOSD_SharedLibrary::OSD_SharedLibrary():myHandle(NULL),myName(NULL){\n}\n// ----------------------------------------------------------------\n//\n// Create and initialize a shared library object to the\n// name given as argument\n//\n// ----------------------------------------------------------------\nOSD_SharedLibrary::OSD_SharedLibrary(const Standard_CString aName):myHandle(NULL) \n{\n  if (aName != NULL) {\n    myName = new char [(strlen (aName) + 1 )];\n    strcpy (myName,aName);\n  }\n}\n// ----------------------------------------------------------------\n//\n// Name: Returns the shared library name\n//\n// ----------------------------------------------------------------\nStandard_CString  OSD_SharedLibrary::Name() const {\n  return myName; \n}\n// ----------------------------------------------------------------\n//\n// SetName: Sets a name to a shared library object\n//\n// ----------------------------------------------------------------\nvoid  OSD_SharedLibrary::SetName(const Standard_CString aName)  {\n  if (aName != NULL) {\n    myName = new char [(strlen (aName) + 1 )];\n    strcpy (myName,aName);\n  }\n}\n// ----------------------------------------------------------------\n//\n// DlOpen:   The dlopen function provides an interface to the dynamic \n// library loader to allow shared libraries to be loaded and called at\n// runtime.  \n// The dlopen function attempts to load filename, in the address space \n// of the process, resolving symbols as appropriate.  Any libraries that      \n// filename depends upon are also loaded.\n//\n// If mode is RTLD_LAZY, then the runtime loader does symbol resolution \n// only as needed.  Typically, this means that the first call\t\n// to a function in the newly loaded library will cause the resolution \n// of the address of that function to occur.  \n//\n// If mode is RTLD_NOW, then the runtime loader must do all\n// symbol binding during the dlopen call.  \n// The dlopen function returns a handle that is used by dlsym or \n// dlclose call.  If there is an error, a NULLpointer is returned.\n//\n// If a NULL filename is specified, dlopen returns a handle for the main      \n// executable, which allows access to dynamic symbols in the running program.\n//\n// ----------------------------------------------------------------\nStandard_Boolean  OSD_SharedLibrary::DlOpen(const OSD_LoadMode aMode ) {\nif (aMode == OSD_RTLD_LAZY){\n  myHandle = dlopen (myName,RTLD_LAZY);\n}\nelse if (aMode == OSD_RTLD_NOW){\n  myHandle = dlopen (myName,RTLD_NOW);\n}\n\nif (!BAD(myHandle)){\n  return Standard_True;\n }\nelse {\n  return Standard_False;\n }\n}\n// ----------------------------------------------------------------\n//\n// DlSymb: The dlsym function returns the address of the\t\n// symbol name found in the shared library corresponding to handle.  \n// If the symbol is not\tfound, a NULL\n// pointer is returned.\n//\n// ----------------------------------------------------------------\nOSD_Function  OSD_SharedLibrary::DlSymb(const Standard_CString aName )const{\nvoid (*fp)();\nfp =  (void (*)()) dlsym (myHandle,aName);\nif (!BAD(fp)){\n  return (OSD_Function)fp;\n }\nelse {\n  return (OSD_Function)NULL;\n }\n}\n// ----------------------------------------------------------------\n//\n//DlClose: The dlclose function deallocates the address space for the library\n//corresponding\tto handle.  If any user\tfunction continues to call a symbol\n//resolved in the address space\tof a library that has been since been deallo-\n//cated\tby dlclose, the\tresults\tare undefined.\n//\n// ----------------------------------------------------------------\nvoid OSD_SharedLibrary::DlClose()const{\n dlclose(myHandle);\n}\n// ----------------------------------------------------------------\n//\n// DlError:  returns a string\tdescribing the last error that\n// occurred from a call to dlopen, dlclose or dlsym.\n//\n// ----------------------------------------------------------------\nStandard_CString OSD_SharedLibrary::DlError()const{\nreturn (char*) dlerror();\n}\n// ----------------------------------------------------------------------------\n// Destroy\n// ----------------------------------------------------------------------------\nvoid OSD_SharedLibrary::Destroy() {\n  if (myName != NULL) {\n     delete [] myName;\n     myName = NULL;\n     myHandle = NULL;\n  }\n}\n\n#else\n\n//------------------------------------------------------------------------\n//-------------------  Windows NT sources for OSD_SharedLibrary ----------\n//------------------------------------------------------------------------\n\n//it is important to define STRICT and enforce including <windows.h> before\n//Standard_Macro.hxx undefines it and includes <windows.h> causing compilation errors\n#ifndef STRICT\n#define STRICT\n#endif\n#include <windows.h>\n\n#include <OSD_Path.hxx>\n#include <OSD_SharedLibrary.hxx>\n#include <TCollection_AsciiString.hxx>\n#include <TCollection_ExtendedString.hxx>\n\nstatic DWORD              lastDLLError;\n\nstatic wchar_t errMsg[1024];\nstatic char errMsgA[1024];\n\nOSD_SharedLibrary :: OSD_SharedLibrary () {\n\n myHandle = NULL;\n myName   = NULL;\n\n}  // end constructor ( 1 )\n\nOSD_SharedLibrary :: OSD_SharedLibrary ( const Standard_CString aFilename ) {\n\n myHandle = NULL;\n myName   = NULL;\n\n SetName ( aFilename );\n\n}  // end constructro ( 2 )\n\nvoid OSD_SharedLibrary :: SetName ( const Standard_CString aName ) {\n\n OSD_Path                path ( aName );\n TCollection_AsciiString name ( aName );\n\n if ( myName != NULL )\n\n  delete [] myName;\n\n myName = new Standard_Character[ strlen ( aName ) + 1 ];\n\n strcpy ( myName, aName );\n\n name = path.Name ();\n name.AssignCat (  path.Extension ()  );\n\n TCollection_ExtendedString nameW (name);\n#ifndef OCCT_UWP\n myHandle = GetModuleHandleW (nameW.ToWideString());\n#else\n myHandle = LoadPackagedLibrary (nameW.ToWideString(), NULL);\n FreeLibrary ((HMODULE) myHandle);\n#endif\n\n}  // end OSD_SharedLibrary :: SetName\n\nStandard_CString OSD_SharedLibrary :: Name () const {\n\n return myName;\n\n}  // end OSD_SharedLibrary :: Name\n\nStandard_Boolean OSD_SharedLibrary :: DlOpen ( const OSD_LoadMode /*Mode*/ ) {\n\n Standard_Boolean retVal = Standard_True;\n\n if (myHandle == NULL)\n {\n  TCollection_ExtendedString myNameW (myName);\n#ifndef OCCT_UWP\n  myHandle = (HINSTANCE)LoadLibraryExW (myNameW.ToWideString(), NULL, LOAD_WITH_ALTERED_SEARCH_PATH);\n#else\n  myHandle = (HINSTANCE)LoadPackagedLibrary (myNameW.ToWideString(), NULL);\n#endif\n  if ( myHandle == NULL ) {\n   lastDLLError = GetLastError ();\n   retVal       = Standard_False;\n  }\n }  // end if\n\n return retVal;\n\n}  // end OSD_SharedLibrary :: DlOpen\n\nOSD_Function OSD_SharedLibrary :: DlSymb ( const Standard_CString Name ) const {\n\n OSD_Function func = ( OSD_Function )GetProcAddress (  ( HMODULE )myHandle, Name  );\n\n if ( func == NULL )\n\n  lastDLLError = GetLastError ();\n\n return func;\n\n}  // end OSD_SharedLibrary :: DlSymb\n\nvoid OSD_SharedLibrary :: DlClose () const {\n\n FreeLibrary (  ( HMODULE )myHandle  );\n\n}  // end OSD_SharedLibrary :: DlClose\n\nStandard_CString OSD_SharedLibrary :: DlError () const {\n\n FormatMessageW (\n  FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ARGUMENT_ARRAY,\n  0, lastDLLError, MAKELANGID( LANG_NEUTRAL, SUBLANG_NEUTRAL ),\n   errMsg, 1024, ( va_list* )&myName\n );\n\n WideCharToMultiByte(CP_UTF8, 0, errMsg, -1, errMsgA, sizeof(errMsgA), NULL, NULL);\n return errMsgA;\n}  // end OSD_SharedLibrary :: DlError\n\nvoid OSD_SharedLibrary :: Destroy () {\n\n if ( myName != NULL ) delete [] myName;\n\n}  // end OSD_SharedLibrary :: Destroy\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/OSD/OSD_SharedLibrary.hxx": "// Created on: 1994-08-30\n// Created by: J.P. TIRAULT    \n// Copyright (c) 1994-1999 Matra Datavision\n// Copyright (c) 1999-2014 OPEN CASCADE SAS\n//\n// This file is part of Open CASCADE Technology software library.\n//\n// This library is free software; you can redistribute it and/or modify it under\n// the terms of the GNU Lesser General Public License version 2.1 as published\n// by the Free Software Foundation, with special exception defined in the file\n// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT\n// distribution for complete text of the license and disclaimer of any warranty.\n//\n// Alternatively, this file may be used under the terms of Open CASCADE\n// commercial license or contractual agreement.\n\n#ifndef _OSD_SharedLibrary_HeaderFile\n#define _OSD_SharedLibrary_HeaderFile\n\n#include <Standard.hxx>\n#include <Standard_DefineAlloc.hxx>\n#include <Standard_Handle.hxx>\n\n#include <Standard_Address.hxx>\n#include <Standard_PCharacter.hxx>\n#include <Standard_CString.hxx>\n#include <Standard_Boolean.hxx>\n#include <OSD_LoadMode.hxx>\n#include <OSD_Function.hxx>\n\n\n//! Interface to dynamic library loader.\n//! Provides tools to load a shared library\n//! and retrieve the address of an entry point.\nclass OSD_SharedLibrary \n{\npublic:\n\n  DEFINE_STANDARD_ALLOC\n\n  \n  //! Creates a SharedLibrary object with name NULL.\n  Standard_EXPORT OSD_SharedLibrary();\n  \n  //! Creates a SharedLibrary object with name aFilename.\n  Standard_EXPORT OSD_SharedLibrary(const Standard_CString aFilename);\n  \n  //! Sets a name associated to the shared object.\n  Standard_EXPORT void SetName (const Standard_CString aName);\n  \n  //! Returns the name associated to the shared object.\n  Standard_EXPORT Standard_CString Name() const;\n  \n  //! The DlOpen method provides an interface to the\n  //! dynamic library loader to allow shared libraries\n  //! to be loaded and called at runtime.  The DlOpen\n  //! function attempts to load Filename, in the address\n  //! space of the process, resolving symbols as appropriate.\n  //! Any libraries that Filename depends upon are also loaded.\n  //! If MODE is RTLD_LAZY, then the runtime loader\n  //! does symbol resolution only as needed.\n  //! Typically, this means that the first call to a function\n  //! in the newly\tloaded library will cause the resolution of\n  //! the\taddress\tof that\tfunction to occur.\n  //! If Mode is RTLD_NOW, then the runtime loader must do all\n  //! symbol binding during the DlOpen call.\n  //! The DlOpen method returns a\thandle that is used by DlSym\n  //! or DlClose.\n  //! If there is an error, Standard_False is returned,\n  //! Standard_True otherwise.\n  //! If a NULL Filename is specified, DlOpen returns a handle\n  //! for the main\texecutable, which allows access to dynamic\n  //! symbols in the running program.\n  Standard_EXPORT Standard_Boolean DlOpen (const OSD_LoadMode Mode);\n  \n  //! The dlsym function returns the address of the\n  //! symbol name found in the shared library.\n  //! If the symbol is not found, a NULL pointer is\n  //! returned.\n  Standard_EXPORT OSD_Function DlSymb (const Standard_CString Name) const;\n  \n  //! Deallocates the address space for the library\n  //! corresponding to the shared object.\n  //! If any user function continues to call a symbol\n  //! resolved in the address space of a library\n  //! that has been since been deallocated by DlClose,\n  //! the results are undefined.\n  Standard_EXPORT void DlClose() const;\n  \n  //! The dlerror function returns a string describing\n  //! the last error that occurred from\n  //! a call to DlOpen, DlClose or DlSym.\n  Standard_EXPORT Standard_CString DlError() const;\n  \n  //! Frees memory allocated.\n  Standard_EXPORT void Destroy();\n~OSD_SharedLibrary()\n{\n  Destroy();\n}\n\n\n\n\nprotected:\n\n\n\n\n\nprivate:\n\n\n\n  Standard_Address myHandle;\n  Standard_PCharacter myName;\n\n\n};\n\n\n\n\n\n\n\n#endif // _OSD_SharedLibrary_HeaderFile\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/OpenGl/OpenGl_Context.cxx": "// Created on: 2012-01-26\n// Created by: Kirill GAVRILOV\n// Copyright (c) 2012-2014 OPEN CASCADE SAS\n//\n// This file is part of Open CASCADE Technology software library.\n//\n// This library is free software; you can redistribute it and/or modify it under\n// the terms of the GNU Lesser General Public License version 2.1 as published\n// by the Free Software Foundation, with special exception defined in the file\n// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT\n// distribution for complete text of the license and disclaimer of any warranty.\n//\n// Alternatively, this file may be used under the terms of Open CASCADE\n// commercial license or contractual agreement.\n\n#if defined(_WIN32)\n  #include <windows.h>\n#endif\n\n#include <OpenGl_Context.hxx>\n\n#include <OpenGl_ArbTBO.hxx>\n#include <OpenGl_ArbIns.hxx>\n#include <OpenGl_ArbDbg.hxx>\n#include <OpenGl_ArbFBO.hxx>\n#include <OpenGl_ExtGS.hxx>\n#include <OpenGl_ArbSamplerObject.hxx>\n#include <OpenGl_ArbTexBindless.hxx>\n#include <OpenGl_GlCore45.hxx>\n#include <OpenGl_FrameBuffer.hxx>\n#include <OpenGl_FrameStats.hxx>\n#include <OpenGl_Sampler.hxx>\n#include <OpenGl_ShaderManager.hxx>\n#include <OpenGl_Workspace.hxx>\n#include <OpenGl_Aspects.hxx>\n#include <Graphic3d_TransformUtils.hxx>\n#include <Graphic3d_RenderingParams.hxx>\n\n#include <Message_Messenger.hxx>\n\n#include <NCollection_Vector.hxx>\n\n#include <Standard_ProgramError.hxx>\n\nIMPLEMENT_STANDARD_RTTIEXT(OpenGl_Context,Standard_Transient)\n\n#if defined(HAVE_EGL)\n  #include <EGL/egl.h>\n  #ifdef _MSC_VER\n    #pragma comment(lib, \"libEGL.lib\")\n  #endif\n#elif defined(_WIN32)\n  //\n#elif defined(__APPLE__) && !defined(MACOSX_USE_GLX)\n  #include <dlfcn.h>\n  #if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE\n    //\n  #else\n    #include <OpenGL/OpenGL.h>\n    #include <CoreGraphics/CoreGraphics.h>\n  #endif\n#else\n  #include <GL/glx.h> // glXGetProcAddress()\n#endif\n\nnamespace\n{\n  static const Handle(OpenGl_Resource) NULL_GL_RESOURCE;\n  static const OpenGl_Mat4 THE_IDENTITY_MATRIX;\n\n  //! Add key-value pair to the dictionary.\n  static void addInfo (TColStd_IndexedDataMapOfStringString& theDict,\n                       const TCollection_AsciiString& theKey,\n                       const TCollection_AsciiString& theValue)\n  {\n    theDict.ChangeFromIndex (theDict.Add (theKey, theValue)) = theValue;\n  }\n\n  //! Add key-value pair to the dictionary.\n  static void addInfo (TColStd_IndexedDataMapOfStringString& theDict,\n                       const TCollection_AsciiString& theKey,\n                       const char* theValue)\n  {\n    TCollection_AsciiString aValue (theValue != NULL ? theValue : \"\");\n    theDict.ChangeFromIndex (theDict.Add (theKey, aValue)) = aValue;\n  }\n}\n\n// =======================================================================\n// function : OpenGl_Context\n// purpose  :\n// =======================================================================\nOpenGl_Context::OpenGl_Context (const Handle(OpenGl_Caps)& theCaps)\n: core11     (NULL),\n  core11fwd  (NULL),\n  core15     (NULL),\n  core15fwd  (NULL),\n  core20     (NULL),\n  core20fwd  (NULL),\n  core32     (NULL),\n  core32back (NULL),\n  core33     (NULL),\n  core33back (NULL),\n  core41     (NULL),\n  core41back (NULL),\n  core42     (NULL),\n  core42back (NULL),\n  core43     (NULL),\n  core43back (NULL),\n  core44     (NULL),\n  core44back (NULL),\n  core45     (NULL),\n  core45back (NULL),\n  caps   (!theCaps.IsNull() ? theCaps : new OpenGl_Caps()),\n#if defined(GL_ES_VERSION_2_0)\n  hasHighp   (Standard_False),\n  hasUintIndex(Standard_False),\n  hasTexRGBA8(Standard_False),\n  hasFlatShading (OpenGl_FeatureNotAvailable),\n#else\n  hasHighp   (Standard_True),\n  hasUintIndex(Standard_True),\n  hasTexRGBA8(Standard_True),\n  hasFlatShading (OpenGl_FeatureInCore),\n#endif\n  hasGlslBitwiseOps  (OpenGl_FeatureNotAvailable),\n  hasDrawBuffers     (OpenGl_FeatureNotAvailable),\n  hasFloatBuffer     (OpenGl_FeatureNotAvailable),\n  hasHalfFloatBuffer (OpenGl_FeatureNotAvailable),\n  hasSampleVariables (OpenGl_FeatureNotAvailable),\n  hasGeometryStage   (OpenGl_FeatureNotAvailable),\n  arbDrawBuffers (Standard_False),\n  arbNPTW  (Standard_False),\n  arbTexRG (Standard_False),\n  arbTexFloat (Standard_False),\n  arbSamplerObject (NULL),\n  arbTexBindless (NULL),\n  arbTBO (NULL),\n  arbTboRGB32 (Standard_False),\n  arbIns (NULL),\n  arbDbg (NULL),\n  arbFBO (NULL),\n  arbFBOBlit (NULL),\n  arbSampleShading (Standard_False),\n  extFragDepth (Standard_False),\n  extDrawBuffers (Standard_False),\n  extGS  (NULL),\n  extBgra(Standard_False),\n  extAnis(Standard_False),\n  extPDS (Standard_False),\n  atiMem (Standard_False),\n  nvxMem (Standard_False),\n  oesSampleVariables (Standard_False),\n  oesStdDerivatives (Standard_False),\n  mySharedResources (new OpenGl_ResourcesMap()),\n  myDelayed         (new OpenGl_DelayReleaseMap()),\n  myUnusedResources (new OpenGl_ResourcesStack()),\n  myClippingState (),\n  myGlLibHandle (NULL),\n  myFuncs (new OpenGl_GlFunctions()),\n  myAnisoMax   (1),\n  myTexClamp   (GL_CLAMP_TO_EDGE),\n  myMaxTexDim  (1024),\n  myMaxTexCombined (1),\n  myMaxTexUnitsFFP (1),\n  myMaxDumpSizeX (1024),\n  myMaxDumpSizeY (1024),\n  myMaxClipPlanes (6),\n  myMaxMsaaSamples(0),\n  myMaxDrawBuffers (1),\n  myMaxColorAttachments (1),\n  myGlVerMajor (0),\n  myGlVerMinor (0),\n  myIsInitialized (Standard_False),\n  myIsStereoBuffers (Standard_False),\n  myIsGlNormalizeEnabled (Standard_False),\n  mySpriteTexUnit (Graphic3d_TextureUnit_0),\n  myHasRayTracing (Standard_False),\n  myHasRayTracingTextures (Standard_False),\n  myHasRayTracingAdaptiveSampling (Standard_False),\n  myHasRayTracingAdaptiveSamplingAtomic (Standard_False),\n  myFrameStats (new OpenGl_FrameStats()),\n#if !defined(GL_ES_VERSION_2_0)\n  myPointSpriteOrig (GL_UPPER_LEFT),\n  myRenderMode (GL_RENDER),\n  myPolygonMode (GL_FILL),\n#else\n  myPointSpriteOrig (0),\n  myRenderMode (0),\n  myPolygonMode (0),\n#endif\n  myToCullBackFaces (false),\n  myReadBuffer (0),\n  myDrawBuffers (0, 7),\n  myDefaultVao (0),\n  myColorMask (true),\n  myAlphaToCoverage (false),\n  myIsGlDebugCtx (Standard_False),\n  myResolution (Graphic3d_RenderingParams::THE_DEFAULT_RESOLUTION),\n  myResolutionRatio (1.0f),\n  myLineWidthScale (1.0f),\n  myLineFeather (1.0f),\n  myRenderScale (1.0f),\n  myRenderScaleInv (1.0f)\n{\n  myViewport[0] = 0;\n  myViewport[1] = 0;\n  myViewport[2] = 0;\n  myViewport[3] = 0;\n  myViewportVirt[0] = 0;\n  myViewportVirt[1] = 0;\n  myViewportVirt[2] = 0;\n  myViewportVirt[3] = 0;\n\n  myPolygonOffset.Mode   = Aspect_POM_Off;\n  myPolygonOffset.Factor = 0.0f;\n  myPolygonOffset.Units  = 0.0f;\n\n  // system-dependent fields\n#if defined(HAVE_EGL)\n  myDisplay  = (Aspect_Display          )EGL_NO_DISPLAY;\n  myWindow   = (Aspect_Drawable         )EGL_NO_SURFACE;\n  myGContext = (Aspect_RenderingContext )EGL_NO_CONTEXT;\n#elif defined(_WIN32)\n  myWindow   = NULL;\n  myWindowDC = NULL;\n  myGContext = NULL;\n#elif defined(__APPLE__) && !defined(MACOSX_USE_GLX)\n  // Vendors can not extend functionality on this system\n  // and developers are limited to OpenGL support provided by Mac OS X SDK.\n  // We retrieve function pointers from system library\n  // to generalize extensions support on all platforms.\n  // In this way we also reach binary compatibility benefit between OS releases\n  // if some newest functionality is optionally used.\n  // Notice that GL version / extension availability checks are required\n  // because function pointers may be available but not functionality itself\n  // (depends on renderer).\n#if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE\n  myGContext    = NULL;\n  myGlLibHandle = dlopen (\"/System/Library/Frameworks/OpenGLES.framework/OpenGLES\", RTLD_LAZY);\n#else\n  myGContext    = NULL;\n  myGlLibHandle = dlopen (\"/System/Library/Frameworks/OpenGL.framework/Versions/Current/OpenGL\", RTLD_LAZY);\n#endif\n#else\n  myDisplay =  NULL;\n  myWindow   = 0;\n  myGContext = 0;\n#endif\n\n  memset (myFuncs.operator->(), 0, sizeof(OpenGl_GlFunctions));\n  myShaderManager = new OpenGl_ShaderManager (this);\n}\n\n// =======================================================================\n// function : ~OpenGl_Context\n// purpose  :\n// =======================================================================\nOpenGl_Context::~OpenGl_Context()\n{\n  // release clean up queue\n  ReleaseDelayed();\n\n#if !defined(GL_ES_VERSION_2_0)\n  // release default VAO\n  if (myDefaultVao != 0\n   && IsValid()\n   && core32 != NULL)\n  {\n    core32->glDeleteVertexArrays (1, &myDefaultVao);\n  }\n  myDefaultVao = 0;\n#endif\n\n  // release default FBO\n  if (!myDefaultFbo.IsNull())\n  {\n    myDefaultFbo->Release (this);\n    myDefaultFbo.Nullify();\n  }\n\n  // release shared resources if any\n  if (mySharedResources->GetRefCount() <= 1)\n  {\n    myShaderManager.Nullify();\n    for (NCollection_DataMap<TCollection_AsciiString, Handle(OpenGl_Resource)>::Iterator anIter (*mySharedResources);\n         anIter.More(); anIter.Next())\n    {\n      anIter.Value()->Release (this);\n    }\n\n    // release delayed resources added during deletion of shared resources\n    while (!myUnusedResources->IsEmpty())\n    {\n      myUnusedResources->First()->Release (this);\n      myUnusedResources->RemoveFirst();\n    }\n  }\n  else if (myShaderManager->IsSameContext (this))\n  {\n    myShaderManager->SetContext (NULL);\n  }\n  mySharedResources.Nullify();\n  myDelayed.Nullify();\n\n  if (arbDbg != NULL\n   && myIsGlDebugCtx\n   && IsValid())\n  {\n    // reset callback\n  #if !defined(GL_ES_VERSION_2_0)\n    void* aPtr = NULL;\n    glGetPointerv (GL_DEBUG_CALLBACK_USER_PARAM, &aPtr);\n    if (aPtr == this)\n  #endif\n    {\n      arbDbg->glDebugMessageCallback (NULL, NULL);\n    }\n    myIsGlDebugCtx = Standard_False;\n  }\n}\n\n// =======================================================================\n// function : forcedRelease\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::forcedRelease()\n{\n  ReleaseDelayed();\n  for (NCollection_DataMap<TCollection_AsciiString, Handle(OpenGl_Resource)>::Iterator anIter (*mySharedResources);\n       anIter.More(); anIter.Next())\n  {\n    anIter.Value()->Release (this);\n  }\n  mySharedResources->Clear();\n  myShaderManager->clear();\n  myShaderManager->SetContext (NULL);\n\n  // release delayed resources added during deletion of shared resources\n  while (!myUnusedResources->IsEmpty())\n  {\n    myUnusedResources->First()->Release (this);\n    myUnusedResources->RemoveFirst();\n  }\n}\n\n// =======================================================================\n// function : ResizeViewport\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ResizeViewport (const Standard_Integer* theRect)\n{\n  core11fwd->glViewport (theRect[0], theRect[1], theRect[2], theRect[3]);\n  myViewport[0] = theRect[0];\n  myViewport[1] = theRect[1];\n  myViewport[2] = theRect[2];\n  myViewport[3] = theRect[3];\n  if (HasRenderScale())\n  {\n    myViewportVirt[0] = Standard_Integer(theRect[0] * myRenderScaleInv);\n    myViewportVirt[1] = Standard_Integer(theRect[1] * myRenderScaleInv);\n    myViewportVirt[2] = Standard_Integer(theRect[2] * myRenderScaleInv);\n    myViewportVirt[3] = Standard_Integer(theRect[3] * myRenderScaleInv);\n  }\n  else\n  {\n    myViewportVirt[0] = theRect[0];\n    myViewportVirt[1] = theRect[1];\n    myViewportVirt[2] = theRect[2];\n    myViewportVirt[3] = theRect[3];\n  }\n}\n\n#if !defined(GL_ES_VERSION_2_0)\ninline Standard_Integer stereoToMonoBuffer (const Standard_Integer theBuffer)\n{\n  switch (theBuffer)\n  {\n    case GL_BACK_LEFT:\n    case GL_BACK_RIGHT:\n      return GL_BACK;\n    case GL_FRONT_LEFT:\n    case GL_FRONT_RIGHT:\n      return GL_FRONT;\n    default:\n      return theBuffer;\n  }\n}\n#endif\n\n// =======================================================================\n// function : SetReadBuffer\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetReadBuffer (const Standard_Integer theReadBuffer)\n{\n#if !defined(GL_ES_VERSION_2_0)\n  myReadBuffer = !myIsStereoBuffers ? stereoToMonoBuffer (theReadBuffer) : theReadBuffer;\n  if (myReadBuffer < GL_COLOR_ATTACHMENT0\n   && arbFBO != NULL)\n  {\n    arbFBO->glBindFramebuffer (GL_FRAMEBUFFER, OpenGl_FrameBuffer::NO_FRAMEBUFFER);\n  }\n  ::glReadBuffer (myReadBuffer);\n#else\n  (void )theReadBuffer;\n#endif\n}\n\n// =======================================================================\n// function : SetDrawBuffer\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetDrawBuffer (const Standard_Integer theDrawBuffer)\n{\n#if !defined(GL_ES_VERSION_2_0)\n  const Standard_Integer aDrawBuffer = !myIsStereoBuffers ? stereoToMonoBuffer (theDrawBuffer) : theDrawBuffer;\n  if (aDrawBuffer < GL_COLOR_ATTACHMENT0\n   && arbFBO != NULL)\n  {\n    arbFBO->glBindFramebuffer (GL_FRAMEBUFFER, OpenGl_FrameBuffer::NO_FRAMEBUFFER);\n  }\n  ::glDrawBuffer (aDrawBuffer);\n\n  myDrawBuffers.Init (GL_NONE);\n  myDrawBuffers.SetValue (0, aDrawBuffer);\n#else\n  (void )theDrawBuffer;\n#endif\n}\n\n// =======================================================================\n// function : SetDrawBuffers\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetDrawBuffers (const Standard_Integer theNb, const Standard_Integer* theDrawBuffers)\n{\n  Standard_ASSERT_RETURN (hasDrawBuffers, \"Multiple draw buffers feature is not supported by the context\", Standard_ASSERT_DO_NOTHING());\n\n  if (myDrawBuffers.Length() < theNb)\n  {\n    // should actually never happen here\n    myDrawBuffers.Resize (0, theNb - 1, false);\n  }\n  myDrawBuffers.Init (GL_NONE);\n\n  Standard_Boolean useDefaultFbo = Standard_False;\n  for (Standard_Integer anI = 0; anI < theNb; ++anI)\n  {\n    if (theDrawBuffers[anI] < GL_COLOR_ATTACHMENT0 && theDrawBuffers[anI] != GL_NONE)\n    {\n      useDefaultFbo = Standard_True;\n    }\n    else\n    {\n      myDrawBuffers.SetValue (anI, theDrawBuffers[anI]);\n    }\n  }\n  if (arbFBO != NULL && useDefaultFbo)\n  {\n    arbFBO->glBindFramebuffer (GL_FRAMEBUFFER, OpenGl_FrameBuffer::NO_FRAMEBUFFER);\n  }\n\n  myFuncs->glDrawBuffers (theNb, (const GLenum*)theDrawBuffers);\n}\n\n// =======================================================================\n// function : SetCullBackFaces\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetCullBackFaces (bool theToEnable)\n{\n  if (myToCullBackFaces == theToEnable)\n  {\n    return;\n  }\n\n  myToCullBackFaces = theToEnable;\n  if (theToEnable)\n  {\n    //glCullFace (GL_BACK); GL_BACK by default\n    core11fwd->glEnable (GL_CULL_FACE);\n  }\n  else\n  {\n    core11fwd->glDisable (GL_CULL_FACE);\n  }\n}\n\n// =======================================================================\n// function : FetchState\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::FetchState()\n{\n#if !defined(GL_ES_VERSION_2_0)\n  // cache feedback mode state\n  if (core11 != NULL)\n  {\n    ::glGetIntegerv (GL_RENDER_MODE, &myRenderMode);\n  }\n\n  // cache read buffers state\n  ::glGetIntegerv (GL_READ_BUFFER, &myReadBuffer);\n\n  // cache draw buffers state\n  if (myDrawBuffers.Length() < myMaxDrawBuffers)\n  {\n    myDrawBuffers.Resize (0, myMaxDrawBuffers - 1, false);\n  }\n  myDrawBuffers.Init (GL_NONE);\n\n  Standard_Integer aDrawBuffer = GL_NONE;\n  if (myMaxDrawBuffers == 1)\n  {\n    ::glGetIntegerv (GL_DRAW_BUFFER, &aDrawBuffer);\n    myDrawBuffers.SetValue (0, aDrawBuffer);\n  }\n  else\n  {\n    for (Standard_Integer anI = 0; anI < myMaxDrawBuffers; ++anI)\n    {\n      ::glGetIntegerv (GL_DRAW_BUFFER0 + anI, &aDrawBuffer);\n      myDrawBuffers.SetValue (anI, aDrawBuffer);\n    }\n  }\n#endif\n}\n\n// =======================================================================\n// function : Share\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::Share (const Handle(OpenGl_Context)& theShareCtx)\n{\n  if (!theShareCtx.IsNull())\n  {\n    mySharedResources = theShareCtx->mySharedResources;\n    myDelayed         = theShareCtx->myDelayed;\n    myUnusedResources = theShareCtx->myUnusedResources;\n    myShaderManager   = theShareCtx->myShaderManager;\n  }\n}\n\n#if !defined(__APPLE__) || defined(MACOSX_USE_GLX)\n\n// =======================================================================\n// function : IsCurrent\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::IsCurrent() const\n{\n#if defined(HAVE_EGL)\n  if ((EGLDisplay )myDisplay  == EGL_NO_DISPLAY\n   || (EGLContext )myGContext == EGL_NO_CONTEXT)\n  {\n    return Standard_False;\n  }\n\n  return (((EGLDisplay )myDisplay  == eglGetCurrentDisplay())\n       && ((EGLContext )myGContext == eglGetCurrentContext())\n       && ((EGLSurface )myWindow   == eglGetCurrentSurface (EGL_DRAW)));\n#elif defined(_WIN32)\n  if (myWindowDC == NULL || myGContext == NULL)\n  {\n    return Standard_False;\n  }\n  return (( (HDC )myWindowDC == wglGetCurrentDC())\n      && ((HGLRC )myGContext == wglGetCurrentContext()));\n#else\n  if (myDisplay == NULL || myWindow == 0 || myGContext == 0)\n  {\n    return Standard_False;\n  }\n\n  return (   ((Display* )myDisplay  == glXGetCurrentDisplay())\n       &&  ((GLXContext )myGContext == glXGetCurrentContext())\n       && ((GLXDrawable )myWindow   == glXGetCurrentDrawable()));\n#endif\n}\n\n// =======================================================================\n// function : MakeCurrent\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::MakeCurrent()\n{\n#if defined(HAVE_EGL)\n  if ((EGLDisplay )myDisplay  == EGL_NO_DISPLAY\n   || (EGLContext )myGContext == EGL_NO_CONTEXT)\n  {\n    Standard_ProgramError_Raise_if (myIsInitialized, \"OpenGl_Context::Init() should be called before!\");\n    return Standard_False;\n  }\n\n  if (eglMakeCurrent ((EGLDisplay )myDisplay, (EGLSurface )myWindow, (EGLSurface )myWindow, (EGLContext )myGContext) != EGL_TRUE)\n  {\n    // if there is no current context it might be impossible to use glGetError() correctly\n    PushMessage (GL_DEBUG_SOURCE_WINDOW_SYSTEM, GL_DEBUG_TYPE_ERROR, 0, GL_DEBUG_SEVERITY_HIGH,\n                 \"eglMakeCurrent() has failed!\");\n    myIsInitialized = Standard_False;\n    return Standard_False;\n  }\n#elif defined(_WIN32)\n  if (myWindowDC == NULL || myGContext == NULL)\n  {\n    Standard_ProgramError_Raise_if (myIsInitialized, \"OpenGl_Context::Init() should be called before!\");\n    return Standard_False;\n  }\n\n  // technically it should be safe to activate already bound GL context\n  // however some drivers (Intel etc.) may FAIL doing this for unknown reason\n  if (IsCurrent())\n  {\n    myShaderManager->SetContext (this);\n    return Standard_True;\n  }\n  else if (wglMakeCurrent ((HDC )myWindowDC, (HGLRC )myGContext) != TRUE)\n  {\n    // notice that glGetError() couldn't be used here!\n    wchar_t* aMsgBuff = NULL;\n    DWORD anErrorCode = GetLastError();\n    FormatMessageW (FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,\n                    NULL, anErrorCode, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), (wchar_t* )&aMsgBuff, 0, NULL);\n    TCollection_ExtendedString aMsg (\"wglMakeCurrent() has failed. \");\n    if (aMsgBuff != NULL)\n    {\n      aMsg += (Standard_ExtString )aMsgBuff;\n      LocalFree (aMsgBuff);\n    }\n    PushMessage (GL_DEBUG_SOURCE_WINDOW_SYSTEM, GL_DEBUG_TYPE_ERROR, (unsigned int )anErrorCode, GL_DEBUG_SEVERITY_HIGH, aMsg);\n    myIsInitialized = Standard_False;\n    return Standard_False;\n  }\n#else\n  if (myDisplay == NULL || myWindow == 0 || myGContext == 0)\n  {\n    Standard_ProgramError_Raise_if (myIsInitialized, \"OpenGl_Context::Init() should be called before!\");\n    return Standard_False;\n  }\n\n  if (!glXMakeCurrent ((Display* )myDisplay, (GLXDrawable )myWindow, (GLXContext )myGContext))\n  {\n    // if there is no current context it might be impossible to use glGetError() correctly\n    PushMessage (GL_DEBUG_SOURCE_WINDOW_SYSTEM, GL_DEBUG_TYPE_ERROR, 0, GL_DEBUG_SEVERITY_HIGH,\n                 \"glXMakeCurrent() has failed!\");\n    myIsInitialized = Standard_False;\n    return Standard_False;\n  }\n#endif\n  myShaderManager->SetContext (this);\n  return Standard_True;\n}\n\n// =======================================================================\n// function : SwapBuffers\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SwapBuffers()\n{\n#if defined(HAVE_EGL)\n  if ((EGLSurface )myWindow != EGL_NO_SURFACE)\n  {\n    eglSwapBuffers ((EGLDisplay )myDisplay, (EGLSurface )myWindow);\n  }\n#elif defined(_WIN32)\n  if ((HDC )myWindowDC != NULL)\n  {\n    ::SwapBuffers ((HDC )myWindowDC);\n    glFlush();\n  }\n#else\n  if ((Display* )myDisplay != NULL)\n  {\n    glXSwapBuffers ((Display* )myDisplay, (GLXDrawable )myWindow);\n  }\n#endif\n}\n\n#endif // __APPLE__\n\n// =======================================================================\n// function : SetSwapInterval\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::SetSwapInterval (const Standard_Integer theInterval)\n{\n#if defined(HAVE_EGL)\n  if (::eglSwapInterval ((EGLDisplay )myDisplay, theInterval) == EGL_TRUE)\n  {\n    return Standard_True;\n  }\n#elif defined(_WIN32)\n  if (myFuncs->wglSwapIntervalEXT != NULL)\n  {\n    myFuncs->wglSwapIntervalEXT (theInterval);\n    return Standard_True;\n  }\n#elif defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE\n  //\n#elif defined(__APPLE__)\n  if (::CGLSetParameter (CGLGetCurrentContext(), kCGLCPSwapInterval, &theInterval) == kCGLNoError)\n  {\n    return Standard_True;\n  }\n#else\n  if (theInterval == -1\n   && myFuncs->glXSwapIntervalEXT != NULL)\n  {\n    typedef int (*glXSwapIntervalEXT_t_x)(Display* theDisplay, GLXDrawable theDrawable, int theInterval);\n    glXSwapIntervalEXT_t_x aFuncPtr = (glXSwapIntervalEXT_t_x )myFuncs->glXSwapIntervalEXT;\n    aFuncPtr ((Display* )myDisplay, (GLXDrawable )myWindow, theInterval);\n    return Standard_True;\n  }\n  else if (myFuncs->glXSwapIntervalSGI != NULL)\n  {\n    myFuncs->glXSwapIntervalSGI (theInterval);\n    return Standard_True;\n  }\n#endif\n  return Standard_False;\n}\n\n// =======================================================================\n// function : findProc\n// purpose  :\n// =======================================================================\nvoid* OpenGl_Context::findProc (const char* theFuncName)\n{\n#if defined(HAVE_EGL)\n  return (void* )eglGetProcAddress (theFuncName);\n#elif defined(_WIN32)\n  return (void* )wglGetProcAddress (theFuncName);\n#elif defined(__APPLE__) && !defined(MACOSX_USE_GLX)\n  return (myGlLibHandle != NULL) ? dlsym (myGlLibHandle, theFuncName) : NULL;\n#else\n  return (void* )glXGetProcAddress ((const GLubyte* )theFuncName);\n#endif\n}\n\n// =======================================================================\n// function : CheckExtension\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::CheckExtension (const char* theExtName) const\n{\n  if (theExtName  == NULL)\n  {\n#ifdef OCCT_DEBUG\n    std::cerr << \"CheckExtension called with NULL string!\\n\";\n#endif\n    return Standard_False;\n  }\n  else if (caps->contextNoExtensions)\n  {\n    return Standard_False;\n  }\n\n#if !defined(GL_ES_VERSION_2_0)\n  // available since OpenGL 3.0\n  // and the ONLY way to check extensions with OpenGL 3.1+ core profile\n  if (IsGlGreaterEqual (3, 0)\n   && myFuncs->glGetStringi != NULL)\n  {\n    GLint anExtNb = 0;\n    ::glGetIntegerv (GL_NUM_EXTENSIONS, &anExtNb);\n    const size_t anExtNameLen = strlen (theExtName);\n    for (GLint anIter = 0; anIter < anExtNb; ++anIter)\n    {\n      const char* anExtension = (const char* )myFuncs->glGetStringi (GL_EXTENSIONS, (GLuint )anIter);\n      const size_t aTestExtNameLen = strlen (anExtension);\n      if (aTestExtNameLen == anExtNameLen\n       && strncmp (anExtension, theExtName, anExtNameLen) == 0)\n      {\n        return Standard_True;\n      }\n    }\n    return Standard_False;\n  }\n#endif\n\n  // use old way with huge string for all extensions\n  const char* anExtString = (const char* )glGetString (GL_EXTENSIONS);\n  if (anExtString == NULL)\n  {\n    Messenger()->Send (\"TKOpenGL: glGetString (GL_EXTENSIONS) has returned NULL! No GL context?\", Message_Warning);\n    return Standard_False;\n  }\n  return CheckExtension (anExtString, theExtName);\n}\n\n// =======================================================================\n// function : CheckExtension\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::CheckExtension (const char* theExtString,\n                                                 const char* theExtName)\n{\n  if (theExtString == NULL)\n  {\n    return Standard_False;\n  }\n\n  // Search for theExtName in the extensions string.\n  // Use of strstr() is not sufficient because extension names can be prefixes of other extension names.\n  char* aPtrIter = (char* )theExtString;\n  const char*  aPtrEnd      = aPtrIter + strlen (theExtString);\n  const size_t anExtNameLen = strlen (theExtName);\n  while (aPtrIter < aPtrEnd)\n  {\n    const size_t n = strcspn (aPtrIter, \" \");\n    if ((n == anExtNameLen) && (strncmp (aPtrIter, theExtName, anExtNameLen) == 0))\n    {\n      return Standard_True;\n    }\n    aPtrIter += (n + 1);\n  }\n  return Standard_False;\n}\n\n#if !defined(__APPLE__) || defined(MACOSX_USE_GLX)\n\n// =======================================================================\n// function : Init\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::Init (const Standard_Boolean theIsCoreProfile)\n{\n  if (myIsInitialized)\n  {\n    return Standard_True;\n  }\n\n#if defined(HAVE_EGL)\n  myDisplay  = (Aspect_Display )eglGetCurrentDisplay();\n  myGContext = (Aspect_RenderingContext )eglGetCurrentContext();\n  myWindow   = (Aspect_Drawable )eglGetCurrentSurface(EGL_DRAW);\n#elif defined(_WIN32)\n  myWindowDC = (Aspect_Handle )wglGetCurrentDC();\n  myGContext = (Aspect_RenderingContext )wglGetCurrentContext();\n#else\n  myDisplay  = (Aspect_Display )glXGetCurrentDisplay();\n  myGContext = (Aspect_RenderingContext )glXGetCurrentContext();\n  myWindow   = (Aspect_Drawable )glXGetCurrentDrawable();\n#endif\n  if (myGContext == NULL)\n  {\n    return Standard_False;\n  }\n\n  init (theIsCoreProfile);\n  myIsInitialized = Standard_True;\n  return Standard_True;\n}\n\n#endif // __APPLE__\n\n// =======================================================================\n// function : Init\n// purpose  :\n// =======================================================================\n#if defined(HAVE_EGL)\nStandard_Boolean OpenGl_Context::Init (const Aspect_Drawable         theEglSurface,\n                                       const Aspect_Display          theEglDisplay,\n                                       const Aspect_RenderingContext theEglContext,\n                                       const Standard_Boolean        theIsCoreProfile)\n#elif defined(_WIN32)\nStandard_Boolean OpenGl_Context::Init (const Aspect_Handle           theWindow,\n                                       const Aspect_Handle           theWindowDC,\n                                       const Aspect_RenderingContext theGContext,\n                                       const Standard_Boolean        theIsCoreProfile)\n#elif defined(__APPLE__) && !defined(MACOSX_USE_GLX)\n\n#if defined(TARGET_OS_IPHONE) && TARGET_OS_IPHONE\nStandard_Boolean OpenGl_Context::Init (EAGLContext*                  theGContext,\n                                       const Standard_Boolean        theIsCoreProfile)\n#else\nStandard_Boolean OpenGl_Context::Init (NSOpenGLContext*              theGContext,\n                                       const Standard_Boolean        theIsCoreProfile)\n#endif\n\n#else\nStandard_Boolean OpenGl_Context::Init (const Aspect_Drawable         theWindow,\n                                       const Aspect_Display          theDisplay,\n                                       const Aspect_RenderingContext theGContext,\n                                       const Standard_Boolean        theIsCoreProfile)\n#endif\n{\n  Standard_ProgramError_Raise_if (myIsInitialized, \"OpenGl_Context::Init() should be called only once!\");\n#if defined(HAVE_EGL)\n  myWindow   = theEglSurface;\n  myGContext = theEglContext;\n  myDisplay  = theEglDisplay;\n#elif defined(_WIN32)\n  myWindow   = theWindow;\n  myGContext = theGContext;\n  myWindowDC = theWindowDC;\n#elif defined(__APPLE__) && !defined(MACOSX_USE_GLX)\n  myGContext = theGContext;\n#else\n  myWindow   = theWindow;\n  myGContext = theGContext;\n  myDisplay  = theDisplay;\n#endif\n  if (myGContext == NULL || !MakeCurrent())\n  {\n    return Standard_False;\n  }\n\n  init (theIsCoreProfile);\n  myIsInitialized = Standard_True;\n  return Standard_True;\n}\n\n// =======================================================================\n// function : ResetErrors\n// purpose  :\n// =======================================================================\nbool OpenGl_Context::ResetErrors (const bool theToPrintErrors)\n{\n  int aPrevErr = 0;\n  int anErr    = ::glGetError();\n  const bool hasError = anErr != GL_NO_ERROR;\n  if (!theToPrintErrors)\n  {\n    for (; anErr != GL_NO_ERROR && aPrevErr != anErr; aPrevErr = anErr, anErr = ::glGetError())\n    {\n      //\n    }\n    return hasError;\n  }\n\n  for (; anErr != GL_NO_ERROR && aPrevErr != anErr; aPrevErr = anErr, anErr = ::glGetError())\n  {\n    TCollection_ExtendedString anErrId;\n    switch (anErr)\n    {\n      case GL_INVALID_ENUM:      anErrId = \"GL_INVALID_ENUM\";      break;\n      case GL_INVALID_VALUE:     anErrId = \"GL_INVALID_VALUE\";     break;\n      case GL_INVALID_OPERATION: anErrId = \"GL_INVALID_OPERATION\"; break;\n    #ifdef GL_STACK_OVERFLOW\n      case GL_STACK_OVERFLOW:    anErrId = \"GL_STACK_OVERFLOW\";    break;\n      case GL_STACK_UNDERFLOW:   anErrId = \"GL_STACK_UNDERFLOW\";   break;\n    #endif\n      case GL_OUT_OF_MEMORY:     anErrId = \"GL_OUT_OF_MEMORY\";     break;\n      case GL_INVALID_FRAMEBUFFER_OPERATION:\n        anErrId = \"GL_INVALID_FRAMEBUFFER_OPERATION\";\n        break;\n      default:\n        anErrId = TCollection_ExtendedString(\"#\") + anErr;\n        break;\n    }\n\n    const TCollection_ExtendedString aMsg = TCollection_ExtendedString (\"Unhandled GL error: \") + anErrId;\n    PushMessage (GL_DEBUG_SOURCE_APPLICATION, GL_DEBUG_TYPE_OTHER, 0, GL_DEBUG_SEVERITY_LOW, aMsg);\n  }\n  return hasError;\n}\n\n// =======================================================================\n// function : ReadGlVersion\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ReadGlVersion (Standard_Integer& theGlVerMajor,\n                                    Standard_Integer& theGlVerMinor)\n{\n  // reset values\n  theGlVerMajor = 0;\n  theGlVerMinor = 0;\n\n#ifdef GL_MAJOR_VERSION\n  // available since OpenGL 3.0 and OpenGL 3.0 ES\n  GLint aMajor = 0, aMinor = 0;\n  glGetIntegerv (GL_MAJOR_VERSION, &aMajor);\n  glGetIntegerv (GL_MINOR_VERSION, &aMinor);\n  // glGetError() sometimes does not report an error here even if\n  // GL does not know GL_MAJOR_VERSION and GL_MINOR_VERSION constants.\n  // This happens on some renderers like e.g. Cygwin MESA.\n  // Thus checking additionally if GL has put anything to\n  // the output variables.\n  if (::glGetError() == GL_NO_ERROR && aMajor != 0 && aMinor != 0)\n  {\n    theGlVerMajor = aMajor;\n    theGlVerMinor = aMinor;\n    return;\n  }\n  for (GLenum anErr = ::glGetError(), aPrevErr = GL_NO_ERROR;; aPrevErr = anErr, anErr = ::glGetError())\n  {\n    if (anErr == GL_NO_ERROR\n     || anErr == aPrevErr)\n    {\n      break;\n    }\n  }\n#endif\n\n  // Read version string.\n  // Notice that only first two numbers split by point '2.1 XXXXX' are significant.\n  // Following trash (after space) is vendor-specific.\n  // New drivers also returns micro version of GL like '3.3.0' which has no meaning\n  // and should be considered as vendor-specific too.\n  const char* aVerStr = (const char* )glGetString (GL_VERSION);\n  if (aVerStr == NULL || *aVerStr == '\\0')\n  {\n    // invalid GL context\n    return;\n  }\n\n//#if defined(GL_ES_VERSION_2_0)\n  // skip \"OpenGL ES-** \" section\n  for (; *aVerStr != '\\0'; ++aVerStr)\n  {\n    if (*aVerStr >= '0' && *aVerStr <= '9')\n    {\n      break;\n    }\n  }\n//#endif\n\n  // parse string for major number\n  char aMajorStr[32];\n  char aMinorStr[32];\n  size_t aMajIter = 0;\n  while (aVerStr[aMajIter] >= '0' && aVerStr[aMajIter] <= '9')\n  {\n    ++aMajIter;\n  }\n  if (aMajIter == 0 || aMajIter >= sizeof(aMajorStr))\n  {\n    return;\n  }\n  memcpy (aMajorStr, aVerStr, aMajIter);\n  aMajorStr[aMajIter] = '\\0';\n\n  // parse string for minor number\n  aVerStr += aMajIter + 1;\n  size_t aMinIter = 0;\n  while (aVerStr[aMinIter] >= '0' && aVerStr[aMinIter] <= '9')\n  {\n    ++aMinIter;\n  }\n  if (aMinIter == 0 || aMinIter >= sizeof(aMinorStr))\n  {\n    return;\n  }\n  memcpy (aMinorStr, aVerStr, aMinIter);\n  aMinorStr[aMinIter] = '\\0';\n\n  // read numbers\n  theGlVerMajor = atoi (aMajorStr);\n  theGlVerMinor = atoi (aMinorStr);\n\n  if (theGlVerMajor <= 0)\n  {\n    theGlVerMajor = 0;\n    theGlVerMinor = 0;\n  }\n}\n\nstatic Standard_CString THE_DBGMSG_UNKNOWN = \"UNKNOWN\";\nstatic Standard_CString THE_DBGMSG_SOURCES[] =\n{\n  \".OpenGL\",    // GL_DEBUG_SOURCE_API\n  \".WinSystem\", // GL_DEBUG_SOURCE_WINDOW_SYSTEM\n  \".GLSL\",      // GL_DEBUG_SOURCE_SHADER_COMPILER\n  \".3rdParty\",  // GL_DEBUG_SOURCE_THIRD_PARTY\n  \"\",           // GL_DEBUG_SOURCE_APPLICATION\n  \".Other\"      // GL_DEBUG_SOURCE_OTHER\n};\n\nstatic Standard_CString THE_DBGMSG_TYPES[] =\n{\n  \"Error\",           // GL_DEBUG_TYPE_ERROR\n  \"Deprecated\",      // GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR\n  \"Undef. behavior\", // GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR\n  \"Portability\",     // GL_DEBUG_TYPE_PORTABILITY\n  \"Performance\",     // GL_DEBUG_TYPE_PERFORMANCE\n  \"Other\"            // GL_DEBUG_TYPE_OTHER\n};\n\nstatic Standard_CString THE_DBGMSG_SEV_HIGH   = \"High\";   // GL_DEBUG_SEVERITY_HIGH\nstatic Standard_CString THE_DBGMSG_SEV_MEDIUM = \"Medium\"; // GL_DEBUG_SEVERITY_MEDIUM\nstatic Standard_CString THE_DBGMSG_SEV_LOW    = \"Low\";    // GL_DEBUG_SEVERITY_LOW\n\n//! Callback for GL_ARB_debug_output extension\nstatic void APIENTRY debugCallbackWrap(unsigned int theSource,\n                                       unsigned int theType,\n                                       unsigned int theId,\n                                       unsigned int theSeverity,\n                                       int          /*theLength*/,\n                                       const char*  theMessage,\n                                       const void*  theUserParam)\n{\n  OpenGl_Context* aCtx = (OpenGl_Context* )theUserParam;\n  aCtx->PushMessage (theSource, theType, theId, theSeverity, theMessage);\n}\n\n// =======================================================================\n// function : PushMessage\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::PushMessage (const unsigned int theSource,\n                                  const unsigned int theType,\n                                  const unsigned int theId,\n                                  const unsigned int theSeverity,\n                                  const TCollection_ExtendedString& theMessage)\n{\n  if (caps->suppressExtraMsg\n   && theSource >= GL_DEBUG_SOURCE_API\n   && theSource <= GL_DEBUG_SOURCE_OTHER\n   && myFilters[theSource - GL_DEBUG_SOURCE_API].Contains (theId))\n  {\n    return;\n  }\n\n  Standard_CString& aSrc = (theSource >= GL_DEBUG_SOURCE_API\n                        && theSource <= GL_DEBUG_SOURCE_OTHER)\n                         ? THE_DBGMSG_SOURCES[theSource - GL_DEBUG_SOURCE_API]\n                         : THE_DBGMSG_UNKNOWN;\n  Standard_CString& aType = (theType >= GL_DEBUG_TYPE_ERROR\n                         && theType <= GL_DEBUG_TYPE_OTHER)\n                          ? THE_DBGMSG_TYPES[theType - GL_DEBUG_TYPE_ERROR]\n                          : THE_DBGMSG_UNKNOWN;\n  Standard_CString& aSev = theSeverity == GL_DEBUG_SEVERITY_HIGH\n                         ? THE_DBGMSG_SEV_HIGH\n                         : (theSeverity == GL_DEBUG_SEVERITY_MEDIUM\n                          ? THE_DBGMSG_SEV_MEDIUM\n                          : THE_DBGMSG_SEV_LOW);\n  Message_Gravity aGrav = theSeverity == GL_DEBUG_SEVERITY_HIGH\n                        ? Message_Alarm\n                        : (theSeverity == GL_DEBUG_SEVERITY_MEDIUM\n                         ? Message_Warning\n                         : Message_Info);\n\n  TCollection_ExtendedString aMsg;\n  aMsg += \"TKOpenGl\"; aMsg += aSrc;\n  aMsg += \" | Type: \";        aMsg += aType;\n  aMsg += \" | ID: \";          aMsg += (Standard_Integer )theId;\n  aMsg += \" | Severity: \";    aMsg += aSev;\n  aMsg += \" | Message:\\n  \";\n  aMsg += theMessage;\n  Messenger()->Send (aMsg, aGrav);\n}\n\n// =======================================================================\n// function : ExcludeMessage\n// purpose  :\n// ======================================================================\nStandard_Boolean OpenGl_Context::ExcludeMessage (const unsigned int theSource,\n                                                 const unsigned int theId)\n{\n  return theSource >= GL_DEBUG_SOURCE_API\n      && theSource <= GL_DEBUG_SOURCE_OTHER\n      && myFilters[theSource - GL_DEBUG_SOURCE_API].Add (theId);\n}\n\n// =======================================================================\n// function : IncludeMessage\n// purpose  :\n// ======================================================================\nStandard_Boolean OpenGl_Context::IncludeMessage (const unsigned int theSource,\n                                                 const unsigned int theId)\n{\n  return theSource >= GL_DEBUG_SOURCE_API\n      && theSource <= GL_DEBUG_SOURCE_OTHER\n      && myFilters[theSource - GL_DEBUG_SOURCE_API].Remove (theId);\n}\n\n// =======================================================================\n// function : checkWrongVersion\n// purpose  :\n// ======================================================================\nvoid OpenGl_Context::checkWrongVersion (Standard_Integer theGlVerMajor, Standard_Integer theGlVerMinor,\n                                        const char* theLastFailedProc)\n{\n  if (!IsGlGreaterEqual (theGlVerMajor, theGlVerMinor))\n  {\n    return;\n  }\n\n  PushMessage (GL_DEBUG_SOURCE_APPLICATION, GL_DEBUG_TYPE_ERROR, 0, GL_DEBUG_SEVERITY_HIGH,\n               TCollection_AsciiString()\n               + \"Error! OpenGL context reports version \"\n               + myGlVerMajor  + \".\" + myGlVerMinor\n               + \" but does not export required functions for \" + theGlVerMajor + \".\" + theGlVerMinor\n               + \" (\" + (theLastFailedProc != NULL ? theLastFailedProc : \"\") + \")\\n\"\n               + \"Please report this issue to OpenGL driver vendor '\" + myVendor + \"'\");\n\n  // lower internal version\n  if (theGlVerMinor > 0)\n  {\n    myGlVerMajor = theGlVerMajor;\n    myGlVerMinor = theGlVerMinor - 1;\n    return;\n  }\n#if defined(GL_ES_VERSION_2_0)\n  switch (theGlVerMajor)\n  {\n    case 3: myGlVerMajor = 2; myGlVerMinor = 0; return;\n  }\n#else\n  switch (theGlVerMajor)\n  {\n    case 2: myGlVerMajor = 1; myGlVerMinor = 5; return;\n    case 3: myGlVerMajor = 2; myGlVerMinor = 1; return;\n    case 4: myGlVerMajor = 3; myGlVerMinor = 3; return;\n  }\n#endif\n}\n\n// =======================================================================\n// function : init\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::init (const Standard_Boolean theIsCoreProfile)\n{\n  // read version\n  myGlVerMajor = 0;\n  myGlVerMinor = 0;\n  myMaxMsaaSamples = 0;\n  myMaxDrawBuffers = 1;\n  myMaxColorAttachments = 1;\n  ReadGlVersion (myGlVerMajor, myGlVerMinor);\n  myVendor = (const char* )::glGetString (GL_VENDOR);\n  myVendor.LowerCase();\n\n  if (caps->contextMajorVersionUpper != -1)\n  {\n    // synthetically restrict OpenGL version for testing\n    Standard_Integer aCtxVer[2] = { myGlVerMajor, myGlVerMinor };\n    bool isLowered = false;\n    if (myGlVerMajor > caps->contextMajorVersionUpper)\n    {\n      isLowered = true;\n      myGlVerMajor = caps->contextMajorVersionUpper;\n    #if defined(GL_ES_VERSION_2_0)\n      switch (myGlVerMajor)\n      {\n        case 2: myGlVerMinor = 0; break;\n      }\n    #else\n      switch (myGlVerMajor)\n      {\n        case 1: myGlVerMinor = 5; break;\n        case 2: myGlVerMinor = 1; break;\n        case 3: myGlVerMinor = 3; break;\n      }\n    #endif\n    }\n    if (caps->contextMinorVersionUpper != -1\n     && myGlVerMinor > caps->contextMinorVersionUpper)\n    {\n      isLowered = true;\n      myGlVerMinor = caps->contextMinorVersionUpper;\n    }\n    if (isLowered)\n    {\n      PushMessage (GL_DEBUG_SOURCE_APPLICATION, GL_DEBUG_TYPE_PORTABILITY, 0, GL_DEBUG_SEVERITY_MEDIUM,\n                   TCollection_AsciiString (\"OpenGL version \") + aCtxVer[0] + \".\" + aCtxVer[1]\n                   + \" has been lowered to \" + myGlVerMajor + \".\" + myGlVerMinor);\n    }\n  }\n\n  if (!caps->ffpEnable\n   && !IsGlGreaterEqual (2, 0))\n  {\n    caps->ffpEnable = true;\n    TCollection_ExtendedString aMsg =\n      TCollection_ExtendedString(\"OpenGL driver is too old! Context info:\\n\")\n                               + \"    Vendor:   \" + (const char* )::glGetString (GL_VENDOR)   + \"\\n\"\n                               + \"    Renderer: \" + (const char* )::glGetString (GL_RENDERER) + \"\\n\"\n                               + \"    Version:  \" + (const char* )::glGetString (GL_VERSION)  + \"\\n\"\n                               + \"  Fallback using deprecated fixed-function pipeline.\\n\"\n                               + \"  Visualization might work incorrectly.\\n\"\n                                 \"  Consider upgrading the graphics driver.\";\n    PushMessage (GL_DEBUG_SOURCE_APPLICATION, GL_DEBUG_TYPE_PORTABILITY, 0, GL_DEBUG_SEVERITY_HIGH, aMsg);\n  }\n\n#if defined(GL_ES_VERSION_2_0)\n  (void )theIsCoreProfile;\n  const bool isCoreProfile = false;\n#else\n\n  if (myVendor.Search (\"nvidia\") != -1)\n  {\n    // Buffer detailed info: Buffer object 1 (bound to GL_ARRAY_BUFFER_ARB, usage hint is GL_STATIC_DRAW)\n    // will use VIDEO memory as the source for buffer object operations.\n    ExcludeMessage (GL_DEBUG_SOURCE_API, 131185);\n  }\n  if (IsGlGreaterEqual (3, 0))\n  {\n    // retrieve auxiliary function in advance\n    FindProc (\"glGetStringi\", myFuncs->glGetStringi);\n  }\n\n  bool isCoreProfile = false;\n  if (IsGlGreaterEqual (3, 2))\n  {\n    isCoreProfile = (theIsCoreProfile == Standard_True);\n\n    // detect Core profile\n    if (!isCoreProfile)\n    {\n      GLint aProfile = 0;\n      ::glGetIntegerv (GL_CONTEXT_PROFILE_MASK, &aProfile);\n      isCoreProfile = (aProfile & GL_CONTEXT_CORE_PROFILE_BIT) != 0;\n    }\n  }\n#endif\n\n  core11     = NULL;\n  if (!isCoreProfile)\n  {\n    core11 = (OpenGl_GlCore11* )(&(*myFuncs));\n  }\n  core11fwd  = (OpenGl_GlCore11Fwd* )(&(*myFuncs));\n  core15     = NULL;\n  core15fwd  = NULL;\n  core20     = NULL;\n  core20fwd  = NULL;\n  core32     = NULL;\n  core32back = NULL;\n  core33     = NULL;\n  core33back = NULL;\n  core41     = NULL;\n  core41back = NULL;\n  core42     = NULL;\n  core42back = NULL;\n  core43     = NULL;\n  core43back = NULL;\n  core44     = NULL;\n  core44back = NULL;\n  core45     = NULL;\n  core45back = NULL;\n  arbTBO     = NULL;\n  arbTboRGB32 = Standard_False;\n  arbIns     = NULL;\n  arbDbg     = NULL;\n  arbFBO     = NULL;\n  arbFBOBlit = NULL;\n  extGS      = NULL;\n  myDefaultVao = 0;\n\n  //! Make record shorter to retrieve function pointer using variable with same name\n  const char* aLastFailedProc = NULL;\n  #define FindProcShort(theFunc) FindProcVerbose(aLastFailedProc, #theFunc, myFuncs->theFunc)\n\n#if defined(GL_ES_VERSION_2_0)\n\n  hasTexRGBA8 = IsGlGreaterEqual (3, 0)\n             || CheckExtension (\"GL_OES_rgb8_rgba8\");\n  // NPOT textures has limited support within OpenGL ES 2.0\n  // which are relaxed by OpenGL ES 3.0 or some extensions\n  //arbNPTW     = IsGlGreaterEqual (3, 0)\n  //           || CheckExtension (\"GL_OES_texture_npot\")\n  //           || CheckExtension (\"GL_NV_texture_npot_2D_mipmap\");\n  arbNPTW     = Standard_True;\n  arbTexRG    = IsGlGreaterEqual (3, 0)\n             || CheckExtension (\"GL_EXT_texture_rg\");\n  extBgra     = CheckExtension (\"GL_EXT_texture_format_BGRA8888\");\n  extAnis = CheckExtension (\"GL_EXT_texture_filter_anisotropic\");\n  extPDS  = IsGlGreaterEqual (3, 0)\n         || CheckExtension (\"GL_OES_packed_depth_stencil\");\n\n  core11fwd = (OpenGl_GlCore11Fwd* )(&(*myFuncs));\n  if (IsGlGreaterEqual (2, 0))\n  {\n    // enable compatible functions\n    core20    = (OpenGl_GlCore20*    )(&(*myFuncs));\n    core20fwd = (OpenGl_GlCore20Fwd* )(&(*myFuncs));\n    core15fwd = (OpenGl_GlCore15Fwd* )(&(*myFuncs));\n    arbFBO    = (OpenGl_ArbFBO*      )(&(*myFuncs));\n  }\n  if (IsGlGreaterEqual (3, 0)\n   && FindProcShort (glBlitFramebuffer))\n  {\n    arbFBOBlit = (OpenGl_ArbFBOBlit* )(&(*myFuncs));\n  }\n  if (IsGlGreaterEqual (3, 0)\n   && FindProcShort (glGenSamplers)\n   && FindProcShort (glDeleteSamplers)\n   && FindProcShort (glIsSampler)\n   && FindProcShort (glBindSampler)\n   && FindProcShort (glSamplerParameteri)\n   && FindProcShort (glSamplerParameteriv)\n   && FindProcShort (glSamplerParameterf)\n   && FindProcShort (glSamplerParameterfv)\n   && FindProcShort (glGetSamplerParameteriv)\n   && FindProcShort (glGetSamplerParameterfv))\n   //&& FindProcShort (glSamplerParameterIiv) // only on Desktop or with extensions GL_OES_texture_border_clamp/GL_EXT_texture_border_clamp\n   //&& FindProcShort (glSamplerParameterIuiv)\n   //&& FindProcShort (glGetSamplerParameterIiv)\n   //&& FindProcShort (glGetSamplerParameterIuiv))\n  {\n    arbSamplerObject = (OpenGl_ArbSamplerObject* )(&(*myFuncs));\n  }\n  extFragDepth = !IsGlGreaterEqual(3, 0)\n               && CheckExtension (\"GL_EXT_frag_depth\");\n  if (IsGlGreaterEqual (3, 1)\n   && FindProcShort (glTexStorage2DMultisample))\n  {\n    // MSAA RenderBuffers have been defined in OpenGL ES 3.0,\n    // but MSAA Textures - only in OpenGL ES 3.1+\n    ::glGetIntegerv (GL_MAX_SAMPLES, &myMaxMsaaSamples);\n  }\n\n  hasUintIndex = IsGlGreaterEqual (3, 0)\n              || CheckExtension (\"GL_OES_element_index_uint\");\n  hasHighp     = CheckExtension (\"GL_OES_fragment_precision_high\");\n  GLint aRange[2] = {0, 0};\n  GLint aPrec     = 0;\n  ::glGetShaderPrecisionFormat (GL_FRAGMENT_SHADER, GL_HIGH_FLOAT, aRange, &aPrec);\n  if (aPrec != 0)\n  {\n    hasHighp = Standard_True;\n  }\n\n  arbTexFloat = IsGlGreaterEqual (3, 0)\n             && FindProcShort (glTexImage3D);\n\n  const Standard_Boolean hasTexBuffer32  = IsGlGreaterEqual (3, 2) && FindProcShort (glTexBuffer);\n  const Standard_Boolean hasExtTexBuffer = CheckExtension (\"GL_EXT_texture_buffer\") && FindProc (\"glTexBufferEXT\", myFuncs->glTexBuffer);\n\n  if (hasTexBuffer32 || hasExtTexBuffer)\n  {\n    arbTBO = reinterpret_cast<OpenGl_ArbTBO*> (myFuncs.get());\n  }\n\n  // initialize debug context extension\n  if (CheckExtension (\"GL_KHR_debug\"))\n  {\n    // this functionality become a part of OpenGL ES 3.2\n    arbDbg = NULL;\n    // According to GL_KHR_debug spec, all functions should have KHR suffix.\n    // However, some implementations can export these functions without suffix.\n    if (FindProc (\"glDebugMessageControlKHR\",  myFuncs->glDebugMessageControl)\n     && FindProc (\"glDebugMessageInsertKHR\",   myFuncs->glDebugMessageInsert)\n     && FindProc (\"glDebugMessageCallbackKHR\", myFuncs->glDebugMessageCallback)\n     && FindProc (\"glGetDebugMessageLogKHR\",   myFuncs->glGetDebugMessageLog))\n    {\n      arbDbg = (OpenGl_ArbDbg* )(&(*myFuncs));\n    }\n\n    if (arbDbg != NULL\n     && caps->contextDebug)\n    {\n      // setup default callback\n      myIsGlDebugCtx = Standard_True;\n      arbDbg->glDebugMessageCallback (debugCallbackWrap, this);\n      ::glEnable (GL_DEBUG_OUTPUT);\n      if (caps->contextSyncDebug)\n      {\n        // note that some broken implementations (e.g. simulators) might generate error message on this call\n        ::glEnable (GL_DEBUG_OUTPUT_SYNCHRONOUS);\n      }\n    }\n  }\n\n  extDrawBuffers = CheckExtension (\"GL_EXT_draw_buffers\") && FindProc (\"glDrawBuffersEXT\", myFuncs->glDrawBuffers);\n  arbDrawBuffers = CheckExtension (\"GL_ARB_draw_buffers\") && FindProc (\"glDrawBuffersARB\", myFuncs->glDrawBuffers);\n\n  if (IsGlGreaterEqual (3, 0) && FindProcShort (glDrawBuffers))\n  {\n    hasDrawBuffers = OpenGl_FeatureInCore;\n  }\n  else if (extDrawBuffers || arbDrawBuffers)\n  {\n    hasDrawBuffers = OpenGl_FeatureInExtensions;\n  }\n\n  hasFloatBuffer     = IsGlGreaterEqual (3, 2) ? OpenGl_FeatureInCore :\n                       CheckExtension (\"GL_EXT_color_buffer_float\") ? OpenGl_FeatureInExtensions \n                                                                    : OpenGl_FeatureNotAvailable;\n  hasHalfFloatBuffer = IsGlGreaterEqual (3, 2) ? OpenGl_FeatureInCore :\n                       CheckExtension (\"GL_EXT_color_buffer_half_float\") ? OpenGl_FeatureInExtensions \n                                                                         : OpenGl_FeatureNotAvailable;\n\n  oesSampleVariables = CheckExtension (\"GL_OES_sample_variables\");\n  oesStdDerivatives  = CheckExtension (\"GL_OES_standard_derivatives\");\n  hasSampleVariables = IsGlGreaterEqual (3, 2) ? OpenGl_FeatureInCore :\n                       oesSampleVariables ? OpenGl_FeatureInExtensions\n                                          : OpenGl_FeatureNotAvailable;\n  hasGlslBitwiseOps = IsGlGreaterEqual (3, 0)\n                    ? OpenGl_FeatureInCore\n                    : OpenGl_FeatureNotAvailable;\n  // without hasHighp, dFdx/dFdy precision is considered too low for flat shading (visual artifacts)\n  hasFlatShading = IsGlGreaterEqual (3, 0)\n                 ? OpenGl_FeatureInCore\n                  : (oesStdDerivatives && hasHighp\n                   ? OpenGl_FeatureInExtensions\n                   : OpenGl_FeatureNotAvailable);\n  if (!IsGlGreaterEqual (3, 1)\n    && myVendor.Search(\"qualcomm\") != -1)\n  {\n    // dFdx/dFdy are completely broken on tested Adreno devices with versions below OpenGl ES 3.1\n    hasFlatShading = OpenGl_FeatureNotAvailable;\n  }\n\n  hasGeometryStage = IsGlGreaterEqual (3, 2)\n                   ? OpenGl_FeatureInCore\n                   : (CheckExtension (\"GL_EXT_geometry_shader\") && CheckExtension (\"GL_EXT_shader_io_blocks\")\n                     ? OpenGl_FeatureInExtensions\n                     : OpenGl_FeatureNotAvailable);\n#else\n\n  myTexClamp = IsGlGreaterEqual (1, 2) ? GL_CLAMP_TO_EDGE : GL_CLAMP;\n\n  hasTexRGBA8 = Standard_True;\n  arbDrawBuffers   = CheckExtension (\"GL_ARB_draw_buffers\");\n  arbNPTW          = CheckExtension (\"GL_ARB_texture_non_power_of_two\");\n  arbTexFloat      = IsGlGreaterEqual (3, 0)\n                  || CheckExtension (\"GL_ARB_texture_float\");\n  arbSampleShading = CheckExtension (\"GL_ARB_sample_shading\");\n  extBgra          = CheckExtension (\"GL_EXT_bgra\");\n  extAnis          = CheckExtension (\"GL_EXT_texture_filter_anisotropic\");\n  extPDS           = CheckExtension (\"GL_EXT_packed_depth_stencil\");\n  atiMem           = CheckExtension (\"GL_ATI_meminfo\");\n  nvxMem           = CheckExtension (\"GL_NVX_gpu_memory_info\");\n\n  hasDrawBuffers = IsGlGreaterEqual (2, 0) ? OpenGl_FeatureInCore :\n                   arbDrawBuffers ? OpenGl_FeatureInExtensions \n                                  : OpenGl_FeatureNotAvailable;\n\n  hasGlslBitwiseOps = IsGlGreaterEqual (3, 0)\n                    ? OpenGl_FeatureInCore\n                    : CheckExtension (\"GL_EXT_gpu_shader4\")\n                     ? OpenGl_FeatureInExtensions\n                     : OpenGl_FeatureNotAvailable;\n\n  hasFloatBuffer = hasHalfFloatBuffer =  IsGlGreaterEqual (3, 0) ? OpenGl_FeatureInCore :\n                                         CheckExtension (\"GL_ARB_color_buffer_float\") ? OpenGl_FeatureInExtensions\n                                                                                      : OpenGl_FeatureNotAvailable;\n\n  hasGeometryStage = IsGlGreaterEqual (3, 2)\n                   ? OpenGl_FeatureInCore\n                   : OpenGl_FeatureNotAvailable;\n\n  hasSampleVariables = IsGlGreaterEqual (4, 0) ? OpenGl_FeatureInCore :\n                        arbSampleShading ? OpenGl_FeatureInExtensions\n                                         : OpenGl_FeatureNotAvailable;\n\n  GLint aStereo = GL_FALSE;\n  glGetIntegerv (GL_STEREO, &aStereo);\n  myIsStereoBuffers = aStereo == 1;\n\n  // get number of maximum clipping planes\n  glGetIntegerv (GL_MAX_CLIP_PLANES,  &myMaxClipPlanes);\n#endif\n\n  if (hasDrawBuffers)\n  {\n    glGetIntegerv (GL_MAX_DRAW_BUFFERS,      &myMaxDrawBuffers);\n    glGetIntegerv (GL_MAX_COLOR_ATTACHMENTS, &myMaxColorAttachments);\n    if (myDrawBuffers.Length() < myMaxDrawBuffers)\n    {\n      myDrawBuffers.Resize (0, myMaxDrawBuffers - 1, false);\n    }\n  }\n\n  glGetIntegerv (GL_MAX_TEXTURE_SIZE, &myMaxTexDim);\n#if !defined(GL_ES_VERSION_2_0)\n  if (IsGlGreaterEqual (1, 3) && core11 != NULL)\n  {\n    // this is a maximum of texture units for FFP functionality,\n    // usually smaller than combined texture units available for GLSL\n    glGetIntegerv (GL_MAX_TEXTURE_UNITS, &myMaxTexUnitsFFP);\n    myMaxTexCombined = myMaxTexUnitsFFP;\n  }\n#endif\n  if (IsGlGreaterEqual (2, 0))\n  {\n    glGetIntegerv (GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS, &myMaxTexCombined);\n  }\n  mySpriteTexUnit = myMaxTexCombined >= 2\n                  ? Graphic3d_TextureUnit_1\n                  : Graphic3d_TextureUnit_0;\n\n  GLint aMaxVPortSize[2] = {0, 0};\n  glGetIntegerv (GL_MAX_VIEWPORT_DIMS, aMaxVPortSize);\n  myMaxDumpSizeX = Min (aMaxVPortSize[0], myMaxTexDim);\n  myMaxDumpSizeY = Min (aMaxVPortSize[1], myMaxTexDim);\n  if (myVendor == \"intel\")\n  {\n    // Intel drivers have known bug with empty dump for images with width>=5462\n    myMaxDumpSizeX = Min (myMaxDumpSizeX, 4096);\n  }\n\n  if (extAnis)\n  {\n    glGetIntegerv (GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT, &myAnisoMax);\n  }\n\n  myClippingState.Init();\n\n#if !defined(GL_ES_VERSION_2_0)\n\n  bool has12 = false;\n  bool has13 = false;\n  bool has14 = false;\n  bool has15 = false;\n  bool has20 = false;\n  bool has21 = false;\n  bool has30 = false;\n  bool has31 = false;\n  bool has32 = false;\n  bool has33 = false;\n  bool has40 = false;\n  bool has41 = false;\n  bool has42 = false;\n  bool has43 = false;\n  bool has44 = false;\n  bool has45 = false;\n\n  // retrieve platform-dependent extensions\n#if defined(HAVE_EGL)\n  //\n#elif defined(_WIN32)\n  if (FindProcShort (wglGetExtensionsStringARB))\n  {\n    const char* aWglExts = myFuncs->wglGetExtensionsStringARB (wglGetCurrentDC());\n    if (CheckExtension (aWglExts, \"WGL_EXT_swap_control\"))\n    {\n      FindProcShort (wglSwapIntervalEXT);\n    }\n    if (CheckExtension (aWglExts, \"WGL_ARB_pixel_format\"))\n    {\n      FindProcShort (wglChoosePixelFormatARB);\n    }\n    if (CheckExtension (aWglExts, \"WGL_ARB_create_context_profile\"))\n    {\n      FindProcShort (wglCreateContextAttribsARB);\n    }\n    if (CheckExtension (aWglExts, \"WGL_NV_DX_interop\"))\n    {\n      FindProcShort (wglDXSetResourceShareHandleNV);\n      FindProcShort (wglDXOpenDeviceNV);\n      FindProcShort (wglDXCloseDeviceNV);\n      FindProcShort (wglDXRegisterObjectNV);\n      FindProcShort (wglDXUnregisterObjectNV);\n      FindProcShort (wglDXObjectAccessNV);\n      FindProcShort (wglDXLockObjectsNV);\n      FindProcShort (wglDXUnlockObjectsNV);\n    }\n    if (CheckExtension (aWglExts, \"WGL_AMD_gpu_association\"))\n    {\n      FindProcShort (wglGetGPUIDsAMD);\n      FindProcShort (wglGetGPUInfoAMD);\n      FindProcShort (wglGetContextGPUIDAMD);\n    }\n  }\n#elif defined(__APPLE__)\n    //\n#else\n    const char* aGlxExts = ::glXQueryExtensionsString ((Display* )myDisplay, DefaultScreen ((Display* )myDisplay));\n    if (CheckExtension (aGlxExts, \"GLX_EXT_swap_control\"))\n    {\n      FindProcShort (glXSwapIntervalEXT);\n    }\n    if (CheckExtension (aGlxExts, \"GLX_SGI_swap_control\"))\n    {\n      FindProcShort (glXSwapIntervalSGI);\n    }\n    if (CheckExtension (aGlxExts, \"GLX_MESA_query_renderer\"))\n    {\n      FindProcShort (glXQueryRendererIntegerMESA);\n      FindProcShort (glXQueryCurrentRendererIntegerMESA);\n      FindProcShort (glXQueryRendererStringMESA);\n      FindProcShort (glXQueryCurrentRendererStringMESA);\n    }\n    //extSwapTear = CheckExtension (aGlxExts, \"GLX_EXT_swap_control_tear\");\n#endif\n\n  // load OpenGL 1.2 new functions\n  has12 = IsGlGreaterEqual (1, 2)\n       && FindProcShort (glBlendColor)\n       && FindProcShort (glBlendEquation)\n       && FindProcShort (glDrawRangeElements)\n       && FindProcShort (glTexImage3D)\n       && FindProcShort (glTexSubImage3D)\n       && FindProcShort (glCopyTexSubImage3D);\n  if (!has12)\n  {\n    checkWrongVersion (1, 2, aLastFailedProc);\n  }\n\n  // load OpenGL 1.3 new functions\n  has13 = IsGlGreaterEqual (1, 3)\n       && FindProcShort (glActiveTexture)\n       && FindProcShort (glSampleCoverage)\n       && FindProcShort (glCompressedTexImage3D)\n       && FindProcShort (glCompressedTexImage2D)\n       && FindProcShort (glCompressedTexImage1D)\n       && FindProcShort (glCompressedTexSubImage3D)\n       && FindProcShort (glCompressedTexSubImage2D)\n       && FindProcShort (glCompressedTexSubImage1D)\n       && FindProcShort (glGetCompressedTexImage);\n\n  if (!isCoreProfile)\n  {\n    has13 = has13\n       && FindProcShort (glClientActiveTexture)\n       && FindProcShort (glMultiTexCoord1d)\n       && FindProcShort (glMultiTexCoord1dv)\n       && FindProcShort (glMultiTexCoord1f)\n       && FindProcShort (glMultiTexCoord1fv)\n       && FindProcShort (glMultiTexCoord1i)\n       && FindProcShort (glMultiTexCoord1iv)\n       && FindProcShort (glMultiTexCoord1s)\n       && FindProcShort (glMultiTexCoord1sv)\n       && FindProcShort (glMultiTexCoord2d)\n       && FindProcShort (glMultiTexCoord2dv)\n       && FindProcShort (glMultiTexCoord2f)\n       && FindProcShort (glMultiTexCoord2fv)\n       && FindProcShort (glMultiTexCoord2i)\n       && FindProcShort (glMultiTexCoord2iv)\n       && FindProcShort (glMultiTexCoord2s)\n       && FindProcShort (glMultiTexCoord2sv)\n       && FindProcShort (glMultiTexCoord3d)\n       && FindProcShort (glMultiTexCoord3dv)\n       && FindProcShort (glMultiTexCoord3f)\n       && FindProcShort (glMultiTexCoord3fv)\n       && FindProcShort (glMultiTexCoord3i)\n       && FindProcShort (glMultiTexCoord3iv)\n       && FindProcShort (glMultiTexCoord3s)\n       && FindProcShort (glMultiTexCoord3sv)\n       && FindProcShort (glMultiTexCoord4d)\n       && FindProcShort (glMultiTexCoord4dv)\n       && FindProcShort (glMultiTexCoord4f)\n       && FindProcShort (glMultiTexCoord4fv)\n       && FindProcShort (glMultiTexCoord4i)\n       && FindProcShort (glMultiTexCoord4iv)\n       && FindProcShort (glMultiTexCoord4s)\n       && FindProcShort (glMultiTexCoord4sv)\n       && FindProcShort (glLoadTransposeMatrixf)\n       && FindProcShort (glLoadTransposeMatrixd)\n       && FindProcShort (glMultTransposeMatrixf)\n       && FindProcShort (glMultTransposeMatrixd);\n  }\n  if (!has13)\n  {\n    checkWrongVersion (1, 3, aLastFailedProc);\n  }\n\n  // load OpenGL 1.4 new functions\n  has14 = IsGlGreaterEqual (1, 4)\n       && FindProcShort (glBlendFuncSeparate)\n       && FindProcShort (glMultiDrawArrays)\n       && FindProcShort (glMultiDrawElements)\n       && FindProcShort (glPointParameterf)\n       && FindProcShort (glPointParameterfv)\n       && FindProcShort (glPointParameteri)\n       && FindProcShort (glPointParameteriv);\n  if (!has14)\n  {\n    checkWrongVersion (1, 4, aLastFailedProc);\n  }\n\n  // load OpenGL 1.5 new functions\n  has15 = IsGlGreaterEqual (1, 5)\n       && FindProcShort (glGenQueries)\n       && FindProcShort (glDeleteQueries)\n       && FindProcShort (glIsQuery)\n       && FindProcShort (glBeginQuery)\n       && FindProcShort (glEndQuery)\n       && FindProcShort (glGetQueryiv)\n       && FindProcShort (glGetQueryObjectiv)\n       && FindProcShort (glGetQueryObjectuiv)\n       && FindProcShort (glBindBuffer)\n       && FindProcShort (glDeleteBuffers)\n       && FindProcShort (glGenBuffers)\n       && FindProcShort (glIsBuffer)\n       && FindProcShort (glBufferData)\n       && FindProcShort (glBufferSubData)\n       && FindProcShort (glGetBufferSubData)\n       && FindProcShort (glMapBuffer)\n       && FindProcShort (glUnmapBuffer)\n       && FindProcShort (glGetBufferParameteriv)\n       && FindProcShort (glGetBufferPointerv);\n  if (has15)\n  {\n    if (!isCoreProfile)\n    {\n      core15 = (OpenGl_GlCore15* )(&(*myFuncs));\n    }\n    core15fwd = (OpenGl_GlCore15Fwd* )(&(*myFuncs));\n  }\n  else\n  {\n    checkWrongVersion (1, 5, aLastFailedProc);\n  }\n\n  // load OpenGL 2.0 new functions\n  has20 = IsGlGreaterEqual (2, 0)\n       && FindProcShort (glBlendEquationSeparate)\n       && FindProcShort (glDrawBuffers)\n       && FindProcShort (glStencilOpSeparate)\n       && FindProcShort (glStencilFuncSeparate)\n       && FindProcShort (glStencilMaskSeparate)\n       && FindProcShort (glAttachShader)\n       && FindProcShort (glBindAttribLocation)\n       && FindProcShort (glCompileShader)\n       && FindProcShort (glCreateProgram)\n       && FindProcShort (glCreateShader)\n       && FindProcShort (glDeleteProgram)\n       && FindProcShort (glDeleteShader)\n       && FindProcShort (glDetachShader)\n       && FindProcShort (glDisableVertexAttribArray)\n       && FindProcShort (glEnableVertexAttribArray)\n       && FindProcShort (glGetActiveAttrib)\n       && FindProcShort (glGetActiveUniform)\n       && FindProcShort (glGetAttachedShaders)\n       && FindProcShort (glGetAttribLocation)\n       && FindProcShort (glGetProgramiv)\n       && FindProcShort (glGetProgramInfoLog)\n       && FindProcShort (glGetShaderiv)\n       && FindProcShort (glGetShaderInfoLog)\n       && FindProcShort (glGetShaderSource)\n       && FindProcShort (glGetUniformLocation)\n       && FindProcShort (glGetUniformfv)\n       && FindProcShort (glGetUniformiv)\n       && FindProcShort (glGetVertexAttribdv)\n       && FindProcShort (glGetVertexAttribfv)\n       && FindProcShort (glGetVertexAttribiv)\n       && FindProcShort (glGetVertexAttribPointerv)\n       && FindProcShort (glIsProgram)\n       && FindProcShort (glIsShader)\n       && FindProcShort (glLinkProgram)\n       && FindProcShort (glShaderSource)\n       && FindProcShort (glUseProgram)\n       && FindProcShort (glUniform1f)\n       && FindProcShort (glUniform2f)\n       && FindProcShort (glUniform3f)\n       && FindProcShort (glUniform4f)\n       && FindProcShort (glUniform1i)\n       && FindProcShort (glUniform2i)\n       && FindProcShort (glUniform3i)\n       && FindProcShort (glUniform4i)\n       && FindProcShort (glUniform1fv)\n       && FindProcShort (glUniform2fv)\n       && FindProcShort (glUniform3fv)\n       && FindProcShort (glUniform4fv)\n       && FindProcShort (glUniform1iv)\n       && FindProcShort (glUniform2iv)\n       && FindProcShort (glUniform3iv)\n       && FindProcShort (glUniform4iv)\n       && FindProcShort (glUniformMatrix2fv)\n       && FindProcShort (glUniformMatrix3fv)\n       && FindProcShort (glUniformMatrix4fv)\n       && FindProcShort (glValidateProgram)\n       && FindProcShort (glVertexAttrib1d)\n       && FindProcShort (glVertexAttrib1dv)\n       && FindProcShort (glVertexAttrib1f)\n       && FindProcShort (glVertexAttrib1fv)\n       && FindProcShort (glVertexAttrib1s)\n       && FindProcShort (glVertexAttrib1sv)\n       && FindProcShort (glVertexAttrib2d)\n       && FindProcShort (glVertexAttrib2dv)\n       && FindProcShort (glVertexAttrib2f)\n       && FindProcShort (glVertexAttrib2fv)\n       && FindProcShort (glVertexAttrib2s)\n       && FindProcShort (glVertexAttrib2sv)\n       && FindProcShort (glVertexAttrib3d)\n       && FindProcShort (glVertexAttrib3dv)\n       && FindProcShort (glVertexAttrib3f)\n       && FindProcShort (glVertexAttrib3fv)\n       && FindProcShort (glVertexAttrib3s)\n       && FindProcShort (glVertexAttrib3sv)\n       && FindProcShort (glVertexAttrib4Nbv)\n       && FindProcShort (glVertexAttrib4Niv)\n       && FindProcShort (glVertexAttrib4Nsv)\n       && FindProcShort (glVertexAttrib4Nub)\n       && FindProcShort (glVertexAttrib4Nubv)\n       && FindProcShort (glVertexAttrib4Nuiv)\n       && FindProcShort (glVertexAttrib4Nusv)\n       && FindProcShort (glVertexAttrib4bv)\n       && FindProcShort (glVertexAttrib4d)\n       && FindProcShort (glVertexAttrib4dv)\n       && FindProcShort (glVertexAttrib4f)\n       && FindProcShort (glVertexAttrib4fv)\n       && FindProcShort (glVertexAttrib4iv)\n       && FindProcShort (glVertexAttrib4s)\n       && FindProcShort (glVertexAttrib4sv)\n       && FindProcShort (glVertexAttrib4ubv)\n       && FindProcShort (glVertexAttrib4uiv)\n       && FindProcShort (glVertexAttrib4usv)\n       && FindProcShort (glVertexAttribPointer);\n  if (has20)\n  {\n    const char* aGlslVer = (const char* )::glGetString (GL_SHADING_LANGUAGE_VERSION);\n    if (aGlslVer == NULL\n    || *aGlslVer == '\\0')\n    {\n      // broken context has been detected\n      PushMessage (GL_DEBUG_SOURCE_APPLICATION, GL_DEBUG_TYPE_ERROR, 0, GL_DEBUG_SEVERITY_HIGH,\n                   TCollection_AsciiString(\"Error! OpenGL context reports version \")\n                   + myGlVerMajor  + \".\" + myGlVerMinor + \" but reports wrong GLSL version\");\n      myGlVerMajor = 1;\n      myGlVerMinor = 5;\n    }\n    else\n    {\n      if (!isCoreProfile)\n      {\n        core20  = (OpenGl_GlCore20*    )(&(*myFuncs));\n      }\n      core20fwd = (OpenGl_GlCore20Fwd* )(&(*myFuncs));\n    }\n  }\n  else\n  {\n    checkWrongVersion (2, 0, aLastFailedProc);\n  }\n\n  // load OpenGL 2.1 new functions\n  has21 = IsGlGreaterEqual (2, 1)\n       && FindProcShort (glUniformMatrix2x3fv)\n       && FindProcShort (glUniformMatrix3x2fv)\n       && FindProcShort (glUniformMatrix2x4fv)\n       && FindProcShort (glUniformMatrix4x2fv)\n       && FindProcShort (glUniformMatrix3x4fv)\n       && FindProcShort (glUniformMatrix4x3fv);\n  if (!has21)\n  {\n    checkWrongVersion (2, 1, aLastFailedProc);\n  }\n\n  // load GL_ARB_framebuffer_object (added to OpenGL 3.0 core)\n  const bool hasFBO = (IsGlGreaterEqual (3, 0) || CheckExtension (\"GL_ARB_framebuffer_object\"))\n       && FindProcShort (glIsRenderbuffer)\n       && FindProcShort (glBindRenderbuffer)\n       && FindProcShort (glDeleteRenderbuffers)\n       && FindProcShort (glGenRenderbuffers)\n       && FindProcShort (glRenderbufferStorage)\n       && FindProcShort (glGetRenderbufferParameteriv)\n       && FindProcShort (glIsFramebuffer)\n       && FindProcShort (glBindFramebuffer)\n       && FindProcShort (glDeleteFramebuffers)\n       && FindProcShort (glGenFramebuffers)\n       && FindProcShort (glCheckFramebufferStatus)\n       && FindProcShort (glFramebufferTexture1D)\n       && FindProcShort (glFramebufferTexture2D)\n       && FindProcShort (glFramebufferTexture3D)\n       && FindProcShort (glFramebufferRenderbuffer)\n       && FindProcShort (glGetFramebufferAttachmentParameteriv)\n       && FindProcShort (glGenerateMipmap)\n       && FindProcShort (glBlitFramebuffer)\n       && FindProcShort (glRenderbufferStorageMultisample)\n       && FindProcShort (glFramebufferTextureLayer);\n\n  // load GL_ARB_vertex_array_object (added to OpenGL 3.0 core)\n  const bool hasVAO = (IsGlGreaterEqual (3, 0) || CheckExtension (\"GL_ARB_vertex_array_object\"))\n       && FindProcShort (glBindVertexArray)\n       && FindProcShort (glDeleteVertexArrays)\n       && FindProcShort (glGenVertexArrays)\n       && FindProcShort (glIsVertexArray);\n\n  // load GL_ARB_map_buffer_range (added to OpenGL 3.0 core)\n  const bool hasMapBufferRange = (IsGlGreaterEqual (3, 0) || CheckExtension (\"GL_ARB_map_buffer_range\"))\n       && FindProcShort (glMapBufferRange)\n       && FindProcShort (glFlushMappedBufferRange);\n\n  // load OpenGL 3.0 new functions\n  has30 = IsGlGreaterEqual (3, 0)\n       && hasFBO\n       && hasVAO\n       && hasMapBufferRange\n       && FindProcShort (glColorMaski)\n       && FindProcShort (glGetBooleani_v)\n       && FindProcShort (glGetIntegeri_v)\n       && FindProcShort (glEnablei)\n       && FindProcShort (glDisablei)\n       && FindProcShort (glIsEnabledi)\n       && FindProcShort (glBeginTransformFeedback)\n       && FindProcShort (glEndTransformFeedback)\n       && FindProcShort (glBindBufferRange)\n       && FindProcShort (glBindBufferBase)\n       && FindProcShort (glTransformFeedbackVaryings)\n       && FindProcShort (glGetTransformFeedbackVarying)\n       && FindProcShort (glClampColor)\n       && FindProcShort (glBeginConditionalRender)\n       && FindProcShort (glEndConditionalRender)\n       && FindProcShort (glVertexAttribIPointer)\n       && FindProcShort (glGetVertexAttribIiv)\n       && FindProcShort (glGetVertexAttribIuiv)\n       && FindProcShort (glVertexAttribI1i)\n       && FindProcShort (glVertexAttribI2i)\n       && FindProcShort (glVertexAttribI3i)\n       && FindProcShort (glVertexAttribI4i)\n       && FindProcShort (glVertexAttribI1ui)\n       && FindProcShort (glVertexAttribI2ui)\n       && FindProcShort (glVertexAttribI3ui)\n       && FindProcShort (glVertexAttribI4ui)\n       && FindProcShort (glVertexAttribI1iv)\n       && FindProcShort (glVertexAttribI2iv)\n       && FindProcShort (glVertexAttribI3iv)\n       && FindProcShort (glVertexAttribI4iv)\n       && FindProcShort (glVertexAttribI1uiv)\n       && FindProcShort (glVertexAttribI2uiv)\n       && FindProcShort (glVertexAttribI3uiv)\n       && FindProcShort (glVertexAttribI4uiv)\n       && FindProcShort (glVertexAttribI4bv)\n       && FindProcShort (glVertexAttribI4sv)\n       && FindProcShort (glVertexAttribI4ubv)\n       && FindProcShort (glVertexAttribI4usv)\n       && FindProcShort (glGetUniformuiv)\n       && FindProcShort (glBindFragDataLocation)\n       && FindProcShort (glGetFragDataLocation)\n       && FindProcShort (glUniform1ui)\n       && FindProcShort (glUniform2ui)\n       && FindProcShort (glUniform3ui)\n       && FindProcShort (glUniform4ui)\n       && FindProcShort (glUniform1uiv)\n       && FindProcShort (glUniform2uiv)\n       && FindProcShort (glUniform3uiv)\n       && FindProcShort (glUniform4uiv)\n       && FindProcShort (glTexParameterIiv)\n       && FindProcShort (glTexParameterIuiv)\n       && FindProcShort (glGetTexParameterIiv)\n       && FindProcShort (glGetTexParameterIuiv)\n       && FindProcShort (glClearBufferiv)\n       && FindProcShort (glClearBufferuiv)\n       && FindProcShort (glClearBufferfv)\n       && FindProcShort (glClearBufferfi)\n       && FindProcShort (glGetStringi);\n  if (!has30)\n  {\n    checkWrongVersion (3, 0, aLastFailedProc);\n  }\n\n  // load GL_ARB_uniform_buffer_object (added to OpenGL 3.1 core)\n  const bool hasUBO = (IsGlGreaterEqual (3, 1) || CheckExtension (\"GL_ARB_uniform_buffer_object\"))\n       && FindProcShort (glGetUniformIndices)\n       && FindProcShort (glGetActiveUniformsiv)\n       && FindProcShort (glGetActiveUniformName)\n       && FindProcShort (glGetUniformBlockIndex)\n       && FindProcShort (glGetActiveUniformBlockiv)\n       && FindProcShort (glGetActiveUniformBlockName)\n       && FindProcShort (glUniformBlockBinding);\n\n  // load GL_ARB_copy_buffer (added to OpenGL 3.1 core)\n  const bool hasCopyBufSubData = (IsGlGreaterEqual (3, 1) || CheckExtension (\"GL_ARB_copy_buffer\"))\n       && FindProcShort (glCopyBufferSubData);\n\n  if (has30)\n  {\n    // NPOT textures are required by OpenGL 2.0 specifications\n    // but doesn't hardware accelerated by some ancient OpenGL 2.1 hardware (GeForce FX, RadeOn 9700 etc.)\n    arbNPTW  = Standard_True;\n    arbTexRG = Standard_True;\n  }\n\n  // load OpenGL 3.1 new functions\n  has31 = IsGlGreaterEqual (3, 1)\n       && hasUBO\n       && hasCopyBufSubData\n       && FindProcShort (glDrawArraysInstanced)\n       && FindProcShort (glDrawElementsInstanced)\n       && FindProcShort (glTexBuffer)\n       && FindProcShort (glPrimitiveRestartIndex);\n  if (has31)\n  {\n    arbTBO = (OpenGl_ArbTBO* )(&(*myFuncs));\n    arbIns = (OpenGl_ArbIns* )(&(*myFuncs));\n  }\n  else\n  {\n    checkWrongVersion (3, 1, aLastFailedProc);\n\n    // initialize TBO extension (ARB)\n    if (CheckExtension (\"GL_ARB_texture_buffer_object\")\n     && FindProc (\"glTexBufferARB\", myFuncs->glTexBuffer))\n    {\n      arbTBO = (OpenGl_ArbTBO* )(&(*myFuncs));\n    }\n\n    // initialize hardware instancing extension (ARB)\n    if (CheckExtension (\"GL_ARB_draw_instanced\")\n     && FindProc (\"glDrawArraysInstancedARB\",   myFuncs->glDrawArraysInstanced)\n     && FindProc (\"glDrawElementsInstancedARB\", myFuncs->glDrawElementsInstanced))\n    {\n      arbIns = (OpenGl_ArbIns* )(&(*myFuncs));\n    }\n  }\n\n  arbTboRGB32 = CheckExtension (\"GL_ARB_texture_buffer_object_rgb32\");\n\n  // load GL_ARB_draw_elements_base_vertex (added to OpenGL 3.2 core)\n  const bool hasDrawElemsBaseVert = (IsGlGreaterEqual (3, 2) || CheckExtension (\"GL_ARB_draw_elements_base_vertex\"))\n       && FindProcShort (glDrawElementsBaseVertex)\n       && FindProcShort (glDrawRangeElementsBaseVertex)\n       && FindProcShort (glDrawElementsInstancedBaseVertex)\n       && FindProcShort (glMultiDrawElementsBaseVertex);\n\n  // load GL_ARB_provoking_vertex (added to OpenGL 3.2 core)\n  const bool hasProvokingVert = (IsGlGreaterEqual (3, 2) || CheckExtension (\"GL_ARB_provoking_vertex\"))\n       && FindProcShort (glProvokingVertex);\n\n  // load GL_ARB_sync (added to OpenGL 3.2 core)\n  const bool hasSync = (IsGlGreaterEqual (3, 2) || CheckExtension (\"GL_ARB_sync\"))\n       && FindProcShort (glFenceSync)\n       && FindProcShort (glIsSync)\n       && FindProcShort (glDeleteSync)\n       && FindProcShort (glClientWaitSync)\n       && FindProcShort (glWaitSync)\n       && FindProcShort (glGetInteger64v)\n       && FindProcShort (glGetSynciv);\n\n  // load GL_ARB_texture_multisample (added to OpenGL 3.2 core)\n  const bool hasTextureMultisample = (IsGlGreaterEqual (3, 2) || CheckExtension (\"GL_ARB_texture_multisample\"))\n       && FindProcShort (glTexImage2DMultisample)\n       && FindProcShort (glTexImage3DMultisample)\n       && FindProcShort (glGetMultisamplefv)\n       && FindProcShort (glSampleMaski);\n\n  // load OpenGL 3.2 new functions\n  has32 = IsGlGreaterEqual (3, 2)\n       && hasDrawElemsBaseVert\n       && hasProvokingVert\n       && hasSync\n       && hasTextureMultisample\n       && FindProcShort (glGetInteger64i_v)\n       && FindProcShort (glGetBufferParameteri64v)\n       && FindProcShort (glFramebufferTexture);\n  if (has32)\n  {\n    core32 = (OpenGl_GlCore32* )(&(*myFuncs));\n    if (isCoreProfile)\n    {\n      core32->glGenVertexArrays (1, &myDefaultVao);\n    }\n    else\n    {\n      core32back = (OpenGl_GlCore32Back* )(&(*myFuncs));\n    }\n    ::glGetIntegerv (GL_MAX_SAMPLES, &myMaxMsaaSamples);\n  }\n  else\n  {\n    checkWrongVersion (3, 2, aLastFailedProc);\n  }\n\n  // load GL_ARB_blend_func_extended (added to OpenGL 3.3 core)\n  const bool hasBlendFuncExtended = (IsGlGreaterEqual (3, 3) || CheckExtension (\"GL_ARB_blend_func_extended\"))\n       && FindProcShort (glBindFragDataLocationIndexed)\n       && FindProcShort (glGetFragDataIndex);\n\n  // load GL_ARB_sampler_objects (added to OpenGL 3.3 core)\n  const bool hasSamplerObjects = (IsGlGreaterEqual (3, 3) || CheckExtension (\"GL_ARB_sampler_objects\"))\n       && FindProcShort (glGenSamplers)\n       && FindProcShort (glDeleteSamplers)\n       && FindProcShort (glIsSampler)\n       && FindProcShort (glBindSampler)\n       && FindProcShort (glSamplerParameteri)\n       && FindProcShort (glSamplerParameteriv)\n       && FindProcShort (glSamplerParameterf)\n       && FindProcShort (glSamplerParameterfv)\n       && FindProcShort (glSamplerParameterIiv)\n       && FindProcShort (glSamplerParameterIuiv)\n       && FindProcShort (glGetSamplerParameteriv)\n       && FindProcShort (glGetSamplerParameterIiv)\n       && FindProcShort (glGetSamplerParameterfv)\n       && FindProcShort (glGetSamplerParameterIuiv);\n  if (hasSamplerObjects)\n  {\n    arbSamplerObject = (OpenGl_ArbSamplerObject* )(&(*myFuncs));\n  }\n\n  // load GL_ARB_timer_query (added to OpenGL 3.3 core)\n  const bool hasTimerQuery = (IsGlGreaterEqual (3, 3) || CheckExtension (\"GL_ARB_timer_query\"))\n       && FindProcShort (glQueryCounter)\n       && FindProcShort (glGetQueryObjecti64v)\n       && FindProcShort (glGetQueryObjectui64v);\n\n  // load GL_ARB_vertex_type_2_10_10_10_rev (added to OpenGL 3.3 core)\n  const bool hasVertType21010101rev = (IsGlGreaterEqual (3, 3) || CheckExtension (\"GL_ARB_vertex_type_2_10_10_10_rev\"))\n       && FindProcShort (glVertexAttribP1ui)\n       && FindProcShort (glVertexAttribP1uiv)\n       && FindProcShort (glVertexAttribP2ui)\n       && FindProcShort (glVertexAttribP2uiv)\n       && FindProcShort (glVertexAttribP3ui)\n       && FindProcShort (glVertexAttribP3uiv)\n       && FindProcShort (glVertexAttribP4ui)\n       && FindProcShort (glVertexAttribP4uiv);\n\n  if ( hasVertType21010101rev\n   && !isCoreProfile)\n  {\n    // load deprecated functions\n    const bool hasVertType21010101revExt =\n          FindProcShort (glVertexP2ui)\n       && FindProcShort (glVertexP2uiv)\n       && FindProcShort (glVertexP3ui)\n       && FindProcShort (glVertexP3uiv)\n       && FindProcShort (glVertexP4ui)\n       && FindProcShort (glVertexP4uiv)\n       && FindProcShort (glTexCoordP1ui)\n       && FindProcShort (glTexCoordP1uiv)\n       && FindProcShort (glTexCoordP2ui)\n       && FindProcShort (glTexCoordP2uiv)\n       && FindProcShort (glTexCoordP3ui)\n       && FindProcShort (glTexCoordP3uiv)\n       && FindProcShort (glTexCoordP4ui)\n       && FindProcShort (glTexCoordP4uiv)\n       && FindProcShort (glMultiTexCoordP1ui)\n       && FindProcShort (glMultiTexCoordP1uiv)\n       && FindProcShort (glMultiTexCoordP2ui)\n       && FindProcShort (glMultiTexCoordP2uiv)\n       && FindProcShort (glMultiTexCoordP3ui)\n       && FindProcShort (glMultiTexCoordP3uiv)\n       && FindProcShort (glMultiTexCoordP4ui)\n       && FindProcShort (glMultiTexCoordP4uiv)\n       && FindProcShort (glNormalP3ui)\n       && FindProcShort (glNormalP3uiv)\n       && FindProcShort (glColorP3ui)\n       && FindProcShort (glColorP3uiv)\n       && FindProcShort (glColorP4ui)\n       && FindProcShort (glColorP4uiv)\n       && FindProcShort (glSecondaryColorP3ui)\n       && FindProcShort (glSecondaryColorP3uiv);\n    (void )hasVertType21010101revExt;\n  }\n\n  // load OpenGL 3.3 extra functions\n  has33 = IsGlGreaterEqual (3, 3)\n       && hasBlendFuncExtended\n       && hasSamplerObjects\n       && hasTimerQuery\n       && hasVertType21010101rev\n       && FindProcShort (glVertexAttribDivisor);\n  if (has33)\n  {\n    core33 = (OpenGl_GlCore33* )(&(*myFuncs));\n    if (!isCoreProfile)\n    {\n      core33back = (OpenGl_GlCore33Back* )(&(*myFuncs));\n    }\n  }\n  else\n  {\n    checkWrongVersion (3, 3, aLastFailedProc);\n  }\n\n  // load GL_ARB_draw_indirect (added to OpenGL 4.0 core)\n  const bool hasDrawIndirect = (IsGlGreaterEqual (4, 0) || CheckExtension (\"GL_ARB_draw_indirect\"))\n       && FindProcShort (glDrawArraysIndirect)\n       && FindProcShort (glDrawElementsIndirect);\n\n  // load GL_ARB_gpu_shader_fp64 (added to OpenGL 4.0 core)\n  const bool hasShaderFP64 = (IsGlGreaterEqual (4, 0) || CheckExtension (\"GL_ARB_gpu_shader_fp64\"))\n       && FindProcShort (glUniform1d)\n       && FindProcShort (glUniform2d)\n       && FindProcShort (glUniform3d)\n       && FindProcShort (glUniform4d)\n       && FindProcShort (glUniform1dv)\n       && FindProcShort (glUniform2dv)\n       && FindProcShort (glUniform3dv)\n       && FindProcShort (glUniform4dv)\n       && FindProcShort (glUniformMatrix2dv)\n       && FindProcShort (glUniformMatrix3dv)\n       && FindProcShort (glUniformMatrix4dv)\n       && FindProcShort (glUniformMatrix2x3dv)\n       && FindProcShort (glUniformMatrix2x4dv)\n       && FindProcShort (glUniformMatrix3x2dv)\n       && FindProcShort (glUniformMatrix3x4dv)\n       && FindProcShort (glUniformMatrix4x2dv)\n       && FindProcShort (glUniformMatrix4x3dv)\n       && FindProcShort (glGetUniformdv);\n\n  // load GL_ARB_shader_subroutine (added to OpenGL 4.0 core)\n  const bool hasShaderSubroutine = (IsGlGreaterEqual (4, 0) || CheckExtension (\"GL_ARB_shader_subroutine\"))\n       && FindProcShort (glGetSubroutineUniformLocation)\n       && FindProcShort (glGetSubroutineIndex)\n       && FindProcShort (glGetActiveSubroutineUniformiv)\n       && FindProcShort (glGetActiveSubroutineUniformName)\n       && FindProcShort (glGetActiveSubroutineName)\n       && FindProcShort (glUniformSubroutinesuiv)\n       && FindProcShort (glGetUniformSubroutineuiv)\n       && FindProcShort (glGetProgramStageiv);\n\n  // load GL_ARB_tessellation_shader (added to OpenGL 4.0 core)\n  const bool hasTessellationShader = (IsGlGreaterEqual (4, 0) || CheckExtension (\"GL_ARB_tessellation_shader\"))\n       && FindProcShort (glPatchParameteri)\n       && FindProcShort (glPatchParameterfv);\n\n  // load GL_ARB_transform_feedback2 (added to OpenGL 4.0 core)\n  const bool hasTrsfFeedback2 = (IsGlGreaterEqual (4, 0) || CheckExtension (\"GL_ARB_transform_feedback2\"))\n       && FindProcShort (glBindTransformFeedback)\n       && FindProcShort (glDeleteTransformFeedbacks)\n       && FindProcShort (glGenTransformFeedbacks)\n       && FindProcShort (glIsTransformFeedback)\n       && FindProcShort (glPauseTransformFeedback)\n       && FindProcShort (glResumeTransformFeedback)\n       && FindProcShort (glDrawTransformFeedback);\n\n  // load GL_ARB_transform_feedback3 (added to OpenGL 4.0 core)\n  const bool hasTrsfFeedback3 = (IsGlGreaterEqual (4, 0) || CheckExtension (\"GL_ARB_transform_feedback3\"))\n       && FindProcShort (glDrawTransformFeedbackStream)\n       && FindProcShort (glBeginQueryIndexed)\n       && FindProcShort (glEndQueryIndexed)\n       && FindProcShort (glGetQueryIndexediv);\n\n  // load OpenGL 4.0 new functions\n  has40 = IsGlGreaterEqual (4, 0)\n      && hasDrawIndirect\n      && hasShaderFP64\n      && hasShaderSubroutine\n      && hasTessellationShader\n      && hasTrsfFeedback2\n      && hasTrsfFeedback3\n      && FindProcShort (glMinSampleShading)\n      && FindProcShort (glBlendEquationi)\n      && FindProcShort (glBlendEquationSeparatei)\n      && FindProcShort (glBlendFunci)\n      && FindProcShort (glBlendFuncSeparatei);\n  if (has40)\n  {\n    arbTboRGB32 = Standard_True; // in core since OpenGL 4.0\n  }\n  else\n  {\n    checkWrongVersion (4, 0, aLastFailedProc);\n  }\n\n  // load GL_ARB_ES2_compatibility (added to OpenGL 4.1 core)\n  const bool hasES2Compatibility = (IsGlGreaterEqual (4, 1) || CheckExtension (\"GL_ARB_ES2_compatibility\"))\n       && FindProcShort (glReleaseShaderCompiler)\n       && FindProcShort (glShaderBinary)\n       && FindProcShort (glGetShaderPrecisionFormat)\n       && FindProcShort (glDepthRangef)\n       && FindProcShort (glClearDepthf);\n\n  // load GL_ARB_get_program_binary (added to OpenGL 4.1 core)\n  const bool hasGetProgramBinary = (IsGlGreaterEqual (4, 1) || CheckExtension (\"GL_ARB_get_program_binary\"))\n       && FindProcShort (glGetProgramBinary)\n       && FindProcShort (glProgramBinary)\n       && FindProcShort (glProgramParameteri);\n\n\n  // load GL_ARB_separate_shader_objects (added to OpenGL 4.1 core)\n  const bool hasSeparateShaderObjects = (IsGlGreaterEqual (4, 1) || CheckExtension (\"GL_ARB_separate_shader_objects\"))\n       && FindProcShort (glUseProgramStages)\n       && FindProcShort (glActiveShaderProgram)\n       && FindProcShort (glCreateShaderProgramv)\n       && FindProcShort (glBindProgramPipeline)\n       && FindProcShort (glDeleteProgramPipelines)\n       && FindProcShort (glGenProgramPipelines)\n       && FindProcShort (glIsProgramPipeline)\n       && FindProcShort (glGetProgramPipelineiv)\n       && FindProcShort (glProgramUniform1i)\n       && FindProcShort (glProgramUniform1iv)\n       && FindProcShort (glProgramUniform1f)\n       && FindProcShort (glProgramUniform1fv)\n       && FindProcShort (glProgramUniform1d)\n       && FindProcShort (glProgramUniform1dv)\n       && FindProcShort (glProgramUniform1ui)\n       && FindProcShort (glProgramUniform1uiv)\n       && FindProcShort (glProgramUniform2i)\n       && FindProcShort (glProgramUniform2iv)\n       && FindProcShort (glProgramUniform2f)\n       && FindProcShort (glProgramUniform2fv)\n       && FindProcShort (glProgramUniform2d)\n       && FindProcShort (glProgramUniform2dv)\n       && FindProcShort (glProgramUniform2ui)\n       && FindProcShort (glProgramUniform2uiv)\n       && FindProcShort (glProgramUniform3i)\n       && FindProcShort (glProgramUniform3iv)\n       && FindProcShort (glProgramUniform3f)\n       && FindProcShort (glProgramUniform3fv)\n       && FindProcShort (glProgramUniform3d)\n       && FindProcShort (glProgramUniform3dv)\n       && FindProcShort (glProgramUniform3ui)\n       && FindProcShort (glProgramUniform3uiv)\n       && FindProcShort (glProgramUniform4i)\n       && FindProcShort (glProgramUniform4iv)\n       && FindProcShort (glProgramUniform4f)\n       && FindProcShort (glProgramUniform4fv)\n       && FindProcShort (glProgramUniform4d)\n       && FindProcShort (glProgramUniform4dv)\n       && FindProcShort (glProgramUniform4ui)\n       && FindProcShort (glProgramUniform4uiv)\n       && FindProcShort (glProgramUniformMatrix2fv)\n       && FindProcShort (glProgramUniformMatrix3fv)\n       && FindProcShort (glProgramUniformMatrix4fv)\n       && FindProcShort (glProgramUniformMatrix2dv)\n       && FindProcShort (glProgramUniformMatrix3dv)\n       && FindProcShort (glProgramUniformMatrix4dv)\n       && FindProcShort (glProgramUniformMatrix2x3fv)\n       && FindProcShort (glProgramUniformMatrix3x2fv)\n       && FindProcShort (glProgramUniformMatrix2x4fv)\n       && FindProcShort (glProgramUniformMatrix4x2fv)\n       && FindProcShort (glProgramUniformMatrix3x4fv)\n       && FindProcShort (glProgramUniformMatrix4x3fv)\n       && FindProcShort (glProgramUniformMatrix2x3dv)\n       && FindProcShort (glProgramUniformMatrix3x2dv)\n       && FindProcShort (glProgramUniformMatrix2x4dv)\n       && FindProcShort (glProgramUniformMatrix4x2dv)\n       && FindProcShort (glProgramUniformMatrix3x4dv)\n       && FindProcShort (glProgramUniformMatrix4x3dv)\n       && FindProcShort (glValidateProgramPipeline)\n       && FindProcShort (glGetProgramPipelineInfoLog);\n\n  // load GL_ARB_vertex_attrib_64bit (added to OpenGL 4.1 core)\n  const bool hasVertAttrib64bit = (IsGlGreaterEqual (4, 1) || CheckExtension (\"GL_ARB_vertex_attrib_64bit\"))\n       && FindProcShort (glVertexAttribL1d)\n       && FindProcShort (glVertexAttribL2d)\n       && FindProcShort (glVertexAttribL3d)\n       && FindProcShort (glVertexAttribL4d)\n       && FindProcShort (glVertexAttribL1dv)\n       && FindProcShort (glVertexAttribL2dv)\n       && FindProcShort (glVertexAttribL3dv)\n       && FindProcShort (glVertexAttribL4dv)\n       && FindProcShort (glVertexAttribLPointer)\n       && FindProcShort (glGetVertexAttribLdv);\n\n  // load GL_ARB_viewport_array (added to OpenGL 4.1 core)\n  const bool hasViewportArray = (IsGlGreaterEqual (4, 1) || CheckExtension (\"GL_ARB_viewport_array\"))\n       && FindProcShort (glViewportArrayv)\n       && FindProcShort (glViewportIndexedf)\n       && FindProcShort (glViewportIndexedfv)\n       && FindProcShort (glScissorArrayv)\n       && FindProcShort (glScissorIndexed)\n       && FindProcShort (glScissorIndexedv)\n       && FindProcShort (glDepthRangeArrayv)\n       && FindProcShort (glDepthRangeIndexed)\n       && FindProcShort (glGetFloati_v)\n       && FindProcShort (glGetDoublei_v);\n\n  has41 = IsGlGreaterEqual (4, 1)\n       && hasES2Compatibility\n       && hasGetProgramBinary\n       && hasSeparateShaderObjects\n       && hasVertAttrib64bit\n       && hasViewportArray;\n  if (has41)\n  {\n    core41 = (OpenGl_GlCore41* )(&(*myFuncs));\n    if (!isCoreProfile)\n    {\n      core41back = (OpenGl_GlCore41Back* )(&(*myFuncs));\n    }\n  }\n  else\n  {\n    checkWrongVersion (4, 1, aLastFailedProc);\n  }\n\n  // load GL_ARB_base_instance (added to OpenGL 4.2 core)\n  const bool hasBaseInstance = (IsGlGreaterEqual (4, 2) || CheckExtension (\"GL_ARB_base_instance\"))\n       && FindProcShort (glDrawArraysInstancedBaseInstance)\n       && FindProcShort (glDrawElementsInstancedBaseInstance)\n       && FindProcShort (glDrawElementsInstancedBaseVertexBaseInstance);\n\n  // load GL_ARB_transform_feedback_instanced (added to OpenGL 4.2 core)\n  const bool hasTrsfFeedbackInstanced = (IsGlGreaterEqual (4, 2) || CheckExtension (\"GL_ARB_transform_feedback_instanced\"))\n       && FindProcShort (glDrawTransformFeedbackInstanced)\n       && FindProcShort (glDrawTransformFeedbackStreamInstanced);\n\n  // load GL_ARB_internalformat_query (added to OpenGL 4.2 core)\n  const bool hasInternalFormatQuery = (IsGlGreaterEqual (4, 2) || CheckExtension (\"GL_ARB_internalformat_query\"))\n       && FindProcShort (glGetInternalformativ);\n\n  // load GL_ARB_shader_atomic_counters (added to OpenGL 4.2 core)\n  const bool hasShaderAtomicCounters = (IsGlGreaterEqual (4, 2) || CheckExtension (\"GL_ARB_shader_atomic_counters\"))\n       && FindProcShort (glGetActiveAtomicCounterBufferiv);\n\n  // load GL_ARB_shader_image_load_store (added to OpenGL 4.2 core)\n  const bool hasShaderImgLoadStore = (IsGlGreaterEqual (4, 2) || CheckExtension (\"GL_ARB_shader_image_load_store\"))\n       && FindProcShort (glBindImageTexture)\n       && FindProcShort (glMemoryBarrier);\n\n  // load GL_ARB_texture_storage (added to OpenGL 4.2 core)\n  const bool hasTextureStorage = (IsGlGreaterEqual (4, 2) || CheckExtension (\"GL_ARB_texture_storage\"))\n       && FindProcShort (glTexStorage1D)\n       && FindProcShort (glTexStorage2D)\n       && FindProcShort (glTexStorage3D);\n\n  has42 = IsGlGreaterEqual (4, 2)\n       && hasBaseInstance\n       && hasTrsfFeedbackInstanced\n       && hasInternalFormatQuery\n       && hasShaderAtomicCounters\n       && hasShaderImgLoadStore\n       && hasTextureStorage;\n  if (has42)\n  {\n    core42 = (OpenGl_GlCore42* )(&(*myFuncs));\n    if (!isCoreProfile)\n    {\n      core42back = (OpenGl_GlCore42Back* )(&(*myFuncs));\n    }\n  }\n  else\n  {\n    checkWrongVersion (4, 2, aLastFailedProc);\n  }\n\n  has43 = IsGlGreaterEqual (4, 3)\n       && FindProcShort (glClearBufferData)\n       && FindProcShort (glClearBufferSubData)\n       && FindProcShort (glDispatchCompute)\n       && FindProcShort (glDispatchComputeIndirect)\n       && FindProcShort (glCopyImageSubData)\n       && FindProcShort (glFramebufferParameteri)\n       && FindProcShort (glGetFramebufferParameteriv)\n       && FindProcShort (glGetInternalformati64v)\n       && FindProcShort (glInvalidateTexSubImage)\n       && FindProcShort (glInvalidateTexImage)\n       && FindProcShort (glInvalidateBufferSubData)\n       && FindProcShort (glInvalidateBufferData)\n       && FindProcShort (glInvalidateFramebuffer)\n       && FindProcShort (glInvalidateSubFramebuffer)\n       && FindProcShort (glMultiDrawArraysIndirect)\n       && FindProcShort (glMultiDrawElementsIndirect)\n       && FindProcShort (glGetProgramInterfaceiv)\n       && FindProcShort (glGetProgramResourceIndex)\n       && FindProcShort (glGetProgramResourceName)\n       && FindProcShort (glGetProgramResourceiv)\n       && FindProcShort (glGetProgramResourceLocation)\n       && FindProcShort (glGetProgramResourceLocationIndex)\n       && FindProcShort (glShaderStorageBlockBinding)\n       && FindProcShort (glTexBufferRange)\n       && FindProcShort (glTexStorage2DMultisample)\n       && FindProcShort (glTexStorage3DMultisample)\n       && FindProcShort (glTextureView)\n       && FindProcShort (glBindVertexBuffer)\n       && FindProcShort (glVertexAttribFormat)\n       && FindProcShort (glVertexAttribIFormat)\n       && FindProcShort (glVertexAttribLFormat)\n       && FindProcShort (glVertexAttribBinding)\n       && FindProcShort (glVertexBindingDivisor)\n       && FindProcShort (glDebugMessageControl)\n       && FindProcShort (glDebugMessageInsert)\n       && FindProcShort (glDebugMessageCallback)\n       && FindProcShort (glGetDebugMessageLog)\n       && FindProcShort (glPushDebugGroup)\n       && FindProcShort (glPopDebugGroup)\n       && FindProcShort (glObjectLabel)\n       && FindProcShort (glGetObjectLabel)\n       && FindProcShort (glObjectPtrLabel)\n       && FindProcShort (glGetObjectPtrLabel);\n  if (has43)\n  {\n    core43 = (OpenGl_GlCore43* )(&(*myFuncs));\n    if (!isCoreProfile)\n    {\n      core43back = (OpenGl_GlCore43Back* )(&(*myFuncs));\n    }\n  }\n  else\n  {\n    checkWrongVersion (4, 3, aLastFailedProc);\n  }\n\n  // load GL_ARB_clear_texture (added to OpenGL 4.4 core)\n  bool arbTexClear = (IsGlGreaterEqual (4, 4) || CheckExtension (\"GL_ARB_clear_texture\"))\n       && FindProcShort (glClearTexImage)\n       && FindProcShort (glClearTexSubImage);\n\n  has44 = IsGlGreaterEqual (4, 4)\n       && arbTexClear\n       && FindProcShort (glBufferStorage)\n       && FindProcShort (glBindBuffersBase)\n       && FindProcShort (glBindBuffersRange)\n       && FindProcShort (glBindTextures)\n       && FindProcShort (glBindSamplers)\n       && FindProcShort (glBindImageTextures)\n       && FindProcShort (glBindVertexBuffers);\n  if (has44)\n  {\n    core44 = (OpenGl_GlCore44* )(&(*myFuncs));\n    if (!isCoreProfile)\n    {\n      core44back = (OpenGl_GlCore44Back* )(&(*myFuncs));\n    }\n  }\n  else\n  {\n    checkWrongVersion (4, 4, aLastFailedProc);\n  }\n\n  has45 = IsGlGreaterEqual (4, 5)\n       && FindProcShort (glBindVertexBuffers)\n       && FindProcShort (glClipControl)\n       && FindProcShort (glCreateTransformFeedbacks)\n       && FindProcShort (glTransformFeedbackBufferBase)\n       && FindProcShort (glTransformFeedbackBufferRange)\n       && FindProcShort (glGetTransformFeedbackiv)\n       && FindProcShort (glGetTransformFeedbacki_v)\n       && FindProcShort (glGetTransformFeedbacki64_v)\n       && FindProcShort (glCreateBuffers)\n       && FindProcShort (glNamedBufferStorage)\n       && FindProcShort (glNamedBufferData)\n       && FindProcShort (glNamedBufferSubData)\n       && FindProcShort (glCopyNamedBufferSubData)\n       && FindProcShort (glClearNamedBufferData)\n       && FindProcShort (glClearNamedBufferSubData)\n       && FindProcShort (glMapNamedBuffer)\n       && FindProcShort (glMapNamedBufferRange)\n       && FindProcShort (glUnmapNamedBuffer)\n       && FindProcShort (glFlushMappedNamedBufferRange)\n       && FindProcShort (glGetNamedBufferParameteriv)\n       && FindProcShort (glGetNamedBufferParameteri64v)\n       && FindProcShort (glGetNamedBufferPointerv)\n       && FindProcShort (glGetNamedBufferSubData)\n       && FindProcShort (glCreateFramebuffers)\n       && FindProcShort (glNamedFramebufferRenderbuffer)\n       && FindProcShort (glNamedFramebufferParameteri)\n       && FindProcShort (glNamedFramebufferTexture)\n       && FindProcShort (glNamedFramebufferTextureLayer)\n       && FindProcShort (glNamedFramebufferDrawBuffer)\n       && FindProcShort (glNamedFramebufferDrawBuffers)\n       && FindProcShort (glNamedFramebufferReadBuffer)\n       && FindProcShort (glInvalidateNamedFramebufferData)\n       && FindProcShort (glInvalidateNamedFramebufferSubData)\n       && FindProcShort (glClearNamedFramebufferiv)\n       && FindProcShort (glClearNamedFramebufferuiv)\n       && FindProcShort (glClearNamedFramebufferfv)\n       && FindProcShort (glClearNamedFramebufferfi)\n       && FindProcShort (glBlitNamedFramebuffer)\n       && FindProcShort (glCheckNamedFramebufferStatus)\n       && FindProcShort (glGetNamedFramebufferParameteriv)\n       && FindProcShort (glGetNamedFramebufferAttachmentParameteriv)\n       && FindProcShort (glCreateRenderbuffers)\n       && FindProcShort (glNamedRenderbufferStorage)\n       && FindProcShort (glNamedRenderbufferStorageMultisample)\n       && FindProcShort (glGetNamedRenderbufferParameteriv)\n       && FindProcShort (glCreateTextures)\n       && FindProcShort (glTextureBuffer)\n       && FindProcShort (glTextureBufferRange)\n       && FindProcShort (glTextureStorage1D)\n       && FindProcShort (glTextureStorage2D)\n       && FindProcShort (glTextureStorage3D)\n       && FindProcShort (glTextureStorage2DMultisample)\n       && FindProcShort (glTextureStorage3DMultisample)\n       && FindProcShort (glTextureSubImage1D)\n       && FindProcShort (glTextureSubImage2D)\n       && FindProcShort (glTextureSubImage3D)\n       && FindProcShort (glCompressedTextureSubImage1D)\n       && FindProcShort (glCompressedTextureSubImage2D)\n       && FindProcShort (glCompressedTextureSubImage3D)\n       && FindProcShort (glCopyTextureSubImage1D)\n       && FindProcShort (glCopyTextureSubImage2D)\n       && FindProcShort (glCopyTextureSubImage3D)\n       && FindProcShort (glTextureParameterf)\n       && FindProcShort (glTextureParameterfv)\n       && FindProcShort (glTextureParameteri)\n       && FindProcShort (glTextureParameterIiv)\n       && FindProcShort (glTextureParameterIuiv)\n       && FindProcShort (glTextureParameteriv)\n       && FindProcShort (glGenerateTextureMipmap)\n       && FindProcShort (glBindTextureUnit)\n       && FindProcShort (glGetTextureImage)\n       && FindProcShort (glGetCompressedTextureImage)\n       && FindProcShort (glGetTextureLevelParameterfv)\n       && FindProcShort (glGetTextureLevelParameteriv)\n       && FindProcShort (glGetTextureParameterfv)\n       && FindProcShort (glGetTextureParameterIiv)\n       && FindProcShort (glGetTextureParameterIuiv)\n       && FindProcShort (glGetTextureParameteriv)\n       && FindProcShort (glCreateVertexArrays)\n       && FindProcShort (glDisableVertexArrayAttrib)\n       && FindProcShort (glEnableVertexArrayAttrib)\n       && FindProcShort (glVertexArrayElementBuffer)\n       && FindProcShort (glVertexArrayVertexBuffer)\n       && FindProcShort (glVertexArrayVertexBuffers)\n       && FindProcShort (glVertexArrayAttribBinding)\n       && FindProcShort (glVertexArrayAttribFormat)\n       && FindProcShort (glVertexArrayAttribIFormat)\n       && FindProcShort (glVertexArrayAttribLFormat)\n       && FindProcShort (glVertexArrayBindingDivisor)\n       && FindProcShort (glGetVertexArrayiv)\n       && FindProcShort (glGetVertexArrayIndexediv)\n       && FindProcShort (glGetVertexArrayIndexed64iv)\n       && FindProcShort (glCreateSamplers)\n       && FindProcShort (glCreateProgramPipelines)\n       && FindProcShort (glCreateQueries)\n       && FindProcShort (glGetQueryBufferObjecti64v)\n       && FindProcShort (glGetQueryBufferObjectiv)\n       && FindProcShort (glGetQueryBufferObjectui64v)\n       && FindProcShort (glGetQueryBufferObjectuiv)\n       && FindProcShort (glMemoryBarrierByRegion)\n       && FindProcShort (glGetTextureSubImage)\n       && FindProcShort (glGetCompressedTextureSubImage)\n       && FindProcShort (glGetGraphicsResetStatus)\n       && FindProcShort (glGetnCompressedTexImage)\n       && FindProcShort (glGetnTexImage)\n       && FindProcShort (glGetnUniformdv)\n       && FindProcShort (glGetnUniformfv)\n       && FindProcShort (glGetnUniformiv)\n       && FindProcShort (glGetnUniformuiv)\n       && FindProcShort (glReadnPixels)\n       && FindProcShort (glGetnMapdv)\n       && FindProcShort (glGetnMapfv)\n       && FindProcShort (glGetnMapiv)\n       && FindProcShort (glGetnPixelMapfv)\n       && FindProcShort (glGetnPixelMapuiv)\n       && FindProcShort (glGetnPixelMapusv)\n       && FindProcShort (glGetnPolygonStipple)\n       && FindProcShort (glGetnColorTable)\n       && FindProcShort (glGetnConvolutionFilter)\n       && FindProcShort (glGetnSeparableFilter)\n       && FindProcShort (glGetnHistogram)\n       && FindProcShort (glGetnMinmax)\n       && FindProcShort (glTextureBarrier);\n  if (has45)\n  {\n    core45 = (OpenGl_GlCore45* )(&(*myFuncs));\n    if (!isCoreProfile)\n    {\n      core45back = (OpenGl_GlCore45Back* )(&(*myFuncs));\n    }\n  }\n  else\n  {\n    checkWrongVersion (4, 5, aLastFailedProc);\n  }\n\n  // initialize debug context extension\n  if (CheckExtension (\"GL_ARB_debug_output\"))\n  {\n    arbDbg = NULL;\n    if (has43)\n    {\n      arbDbg = (OpenGl_ArbDbg* )(&(*myFuncs));\n    }\n    else if (FindProc (\"glDebugMessageControlARB\",  myFuncs->glDebugMessageControl)\n          && FindProc (\"glDebugMessageInsertARB\",   myFuncs->glDebugMessageInsert)\n          && FindProc (\"glDebugMessageCallbackARB\", myFuncs->glDebugMessageCallback)\n          && FindProc (\"glGetDebugMessageLogARB\",   myFuncs->glGetDebugMessageLog))\n    {\n      arbDbg = (OpenGl_ArbDbg* )(&(*myFuncs));\n    }\n\n    if (arbDbg != NULL\n     && caps->contextDebug)\n    {\n      // setup default callback\n      myIsGlDebugCtx = Standard_True;\n      arbDbg->glDebugMessageCallback (debugCallbackWrap, this);\n      if (has43)\n      {\n        ::glEnable (GL_DEBUG_OUTPUT);\n      }\n      if (caps->contextSyncDebug)\n      {\n        ::glEnable (GL_DEBUG_OUTPUT_SYNCHRONOUS);\n      }\n    }\n  }\n\n  // initialize FBO extension (ARB)\n  if (hasFBO)\n  {\n    arbFBO     = (OpenGl_ArbFBO*     )(&(*myFuncs));\n    arbFBOBlit = (OpenGl_ArbFBOBlit* )(&(*myFuncs));\n    extPDS = Standard_True; // extension for EXT, but part of ARB\n  }\n\n  // initialize GS extension (EXT)\n  if (CheckExtension (\"GL_EXT_geometry_shader4\")\n   && FindProcShort (glProgramParameteriEXT))\n  {\n    extGS = (OpenGl_ExtGS* )(&(*myFuncs));\n  }\n\n  // initialize bindless texture extension (ARB)\n  if (CheckExtension (\"GL_ARB_bindless_texture\")\n   && FindProcShort (glGetTextureHandleARB)\n   && FindProcShort (glGetTextureSamplerHandleARB)\n   && FindProcShort (glMakeTextureHandleResidentARB)\n   && FindProcShort (glMakeTextureHandleNonResidentARB)\n   && FindProcShort (glGetImageHandleARB)\n   && FindProcShort (glMakeImageHandleResidentARB)\n   && FindProcShort (glMakeImageHandleNonResidentARB)\n   && FindProcShort (glUniformHandleui64ARB)\n   && FindProcShort (glUniformHandleui64vARB)\n   && FindProcShort (glProgramUniformHandleui64ARB)\n   && FindProcShort (glProgramUniformHandleui64vARB)\n   && FindProcShort (glIsTextureHandleResidentARB)\n   && FindProcShort (glIsImageHandleResidentARB)\n   && FindProcShort (glVertexAttribL1ui64ARB)\n   && FindProcShort (glVertexAttribL1ui64vARB)\n   && FindProcShort (glGetVertexAttribLui64vARB))\n  {\n    arbTexBindless = (OpenGl_ArbTexBindless* )(&(*myFuncs));\n  }\n\n  if (has30)\n  {\n    // MSAA RenderBuffers have been defined in OpenGL 3.0,\n    // but MSAA Textures - only in OpenGL 3.2+\n    if (!has32\n     && CheckExtension (\"GL_ARB_texture_multisample\")\n     && FindProcShort (glTexImage2DMultisample))\n    {\n      GLint aNbColorSamples = 0, aNbDepthSamples = 0;\n      ::glGetIntegerv (GL_MAX_COLOR_TEXTURE_SAMPLES, &aNbColorSamples);\n      ::glGetIntegerv (GL_MAX_DEPTH_TEXTURE_SAMPLES, &aNbDepthSamples);\n      myMaxMsaaSamples = Min (aNbColorSamples, aNbDepthSamples);\n    }\n    if (!has43\n     && CheckExtension (\"GL_ARB_texture_storage_multisample\")\n     && FindProcShort (glTexStorage2DMultisample))\n    {\n      //\n    }\n  }\n\n  // check whether ray tracing mode is supported\n  myHasRayTracing = has31\n                 && arbTboRGB32\n                 && arbFBOBlit  != NULL;\n\n  // check whether textures in ray tracing mode are supported\n  myHasRayTracingTextures = myHasRayTracing\n                         && arbTexBindless != NULL;\n\n  // check whether adaptive screen sampling in ray tracing mode is supported\n  myHasRayTracingAdaptiveSampling = myHasRayTracing\n                                 && has44;\n  myHasRayTracingAdaptiveSamplingAtomic = myHasRayTracingAdaptiveSampling\n                                       && CheckExtension (\"GL_NV_shader_atomic_float\");\n#endif\n}\n\n// =======================================================================\n// function : MemoryInfo\n// purpose  :\n// =======================================================================\nStandard_Size OpenGl_Context::AvailableMemory() const\n{\n#if !defined(GL_ES_VERSION_2_0)\n  if (atiMem)\n  {\n    // this is actually information for VBO pool\n    // however because pools are mostly shared\n    // it can be used for total GPU memory estimations\n    GLint aMemInfo[4];\n    aMemInfo[0] = 0;\n    glGetIntegerv (GL_VBO_FREE_MEMORY_ATI, aMemInfo);\n    // returned value is in KiB, however this maybe changed in future\n    return Standard_Size(aMemInfo[0]) * 1024;\n  }\n  else if (nvxMem)\n  {\n    // current available dedicated video memory (in KiB), currently unused GPU memory\n    GLint aMemInfo = 0;\n    glGetIntegerv (GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX, &aMemInfo);\n    return Standard_Size(aMemInfo) * 1024;\n  }\n#endif\n  return 0;\n}\n\n// =======================================================================\n// function : MemoryInfo\n// purpose  :\n// =======================================================================\nTCollection_AsciiString OpenGl_Context::MemoryInfo() const\n{\n  TColStd_IndexedDataMapOfStringString aDict;\n  MemoryInfo (aDict);\n\n  TCollection_AsciiString aText;\n  for (TColStd_IndexedDataMapOfStringString::Iterator anIter (aDict); anIter.More(); anIter.Next())\n  {\n    if (!aText.IsEmpty())\n    {\n      aText += \"\\n\";\n    }\n    aText += TCollection_AsciiString(\"  \") + anIter.Key() + \": \" + anIter.Value();\n  }\n  return aText;\n}\n\n// =======================================================================\n// function : MemoryInfo\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::MemoryInfo (TColStd_IndexedDataMapOfStringString& theDict) const\n{\n#if defined(GL_ES_VERSION_2_0)\n  (void )theDict;\n#elif defined(__APPLE__) && !defined(MACOSX_USE_GLX)\n  GLint aGlRendId = 0;\n  CGLGetParameter (CGLGetCurrentContext(), kCGLCPCurrentRendererID, &aGlRendId);\n\n  CGLRendererInfoObj  aRendObj = NULL;\n  CGOpenGLDisplayMask aDispMask = CGDisplayIDToOpenGLDisplayMask (kCGDirectMainDisplay);\n  GLint aRendNb = 0;\n  CGLQueryRendererInfo (aDispMask, &aRendObj, &aRendNb);\n  for (GLint aRendIter = 0; aRendIter < aRendNb; ++aRendIter)\n  {\n    GLint aRendId = 0;\n    if (CGLDescribeRenderer (aRendObj, aRendIter, kCGLRPRendererID, &aRendId) != kCGLNoError\n     || aRendId != aGlRendId)\n    {\n      continue;\n    }\n\n    //kCGLRPVideoMemoryMegabytes   = 131;\n    //kCGLRPTextureMemoryMegabytes = 132;\n    GLint aVMem = 0;\n  #if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070\n    if (CGLDescribeRenderer(aRendObj, aRendIter, kCGLRPVideoMemoryMegabytes, &aVMem) == kCGLNoError)\n    {\n      addInfo (theDict, \"GPU memory\",         TCollection_AsciiString() + aVMem + \" MiB\");\n    }\n    if (CGLDescribeRenderer(aRendObj, aRendIter, kCGLRPTextureMemoryMegabytes, &aVMem) == kCGLNoError)\n    {\n      addInfo (theDict, \"GPU Texture memory\", TCollection_AsciiString() + aVMem + \" MiB\");\n    }\n  #else\n    if (CGLDescribeRenderer(aRendObj, aRendIter, kCGLRPVideoMemory, &aVMem) == kCGLNoError)\n    {\n      addInfo (theDict, \"GPU memory\",         TCollection_AsciiString() + (aVMem / (1024 * 1024)) + \" MiB\");\n    }\n    if (CGLDescribeRenderer(aRendObj, aRendIter, kCGLRPTextureMemory, &aVMem) == kCGLNoError)\n    {\n      addInfo (theDict, \"GPU Texture memory\", TCollection_AsciiString() + (aVMem / (1024 * 1024)) + \" MiB\");\n    }\n  #endif\n  }\n#endif\n\n#if !defined(GL_ES_VERSION_2_0)\n  if (atiMem)\n  {\n    GLint aValues[4];\n    memset (aValues, 0, sizeof(aValues));\n    glGetIntegerv (GL_VBO_FREE_MEMORY_ATI, aValues);\n\n    // total memory free in the pool\n    addInfo (theDict, \"GPU free memory\",    TCollection_AsciiString() + (aValues[0] / 1024) + \" MiB\");\n\n    if (aValues[1] != aValues[0])\n    {\n      // largest available free block in the pool\n      addInfo (theDict, \"Largest free block\", TCollection_AsciiString() + (aValues[1] / 1024) + \" MiB\");\n    }\n    if (aValues[2] != aValues[0])\n    {\n      // total auxiliary memory free\n      addInfo (theDict, \"Free auxiliary memory\", TCollection_AsciiString() + (aValues[2] / 1024) + \" MiB\");\n    }\n  }\n  else if (nvxMem)\n  {\n    //current available dedicated video memory (in KiB), currently unused GPU memory\n    GLint aValue = 0;\n    glGetIntegerv (GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX, &aValue);\n    addInfo (theDict, \"GPU free memory\", TCollection_AsciiString() + (aValue / 1024) + \" MiB\");\n\n    // dedicated video memory, total size (in KiB) of the GPU memory\n    GLint aDedicated = 0;\n    glGetIntegerv (GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX, &aDedicated);\n    addInfo (theDict, \"GPU memory\", TCollection_AsciiString() + (aDedicated / 1024) + \" MiB\");\n\n    // total available memory, total size (in KiB) of the memory available for allocations\n    glGetIntegerv (GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX, &aValue);\n    if (aValue != aDedicated)\n    {\n      // different only for special configurations\n      addInfo (theDict, \"Total memory\", TCollection_AsciiString() + (aValue / 1024) + \" MiB\");\n    }\n  }\n#if defined(_WIN32)\n  else if (myFuncs->wglGetGPUInfoAMD != NULL\n        && myFuncs->wglGetContextGPUIDAMD != NULL)\n  {\n    GLuint aTotalMemMiB = 0;\n    UINT anAmdId = myFuncs->wglGetContextGPUIDAMD ((HGLRC )myGContext);\n    if (anAmdId != 0)\n    {\n      if (myFuncs->wglGetGPUInfoAMD (anAmdId, WGL_GPU_RAM_AMD, GL_UNSIGNED_INT, sizeof(aTotalMemMiB), &aTotalMemMiB) > 0)\n      {\n        addInfo (theDict, \"GPU memory\", TCollection_AsciiString() + (int )aTotalMemMiB + \" MiB\");\n      }\n    }\n  }\n#endif\n#endif\n\n#if !defined(GL_ES_VERSION_2_0) && !defined(__APPLE__) && !defined(_WIN32)\n  // GLX_RENDERER_VENDOR_ID_MESA\n  if (myFuncs->glXQueryCurrentRendererIntegerMESA != NULL)\n  {\n    unsigned int aVMemMiB = 0;\n    if (myFuncs->glXQueryCurrentRendererIntegerMESA (GLX_RENDERER_VIDEO_MEMORY_MESA, &aVMemMiB) != False)\n    {\n      addInfo (theDict, \"GPU memory\", TCollection_AsciiString() + int(aVMemMiB) + \" MiB\");\n    }\n  }\n#endif\n}\n\n// =======================================================================\n// function : DiagnosticInfo\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::DiagnosticInformation (TColStd_IndexedDataMapOfStringString& theDict,\n                                            Graphic3d_DiagnosticInfo theFlags) const\n{\n  if ((theFlags & Graphic3d_DiagnosticInfo_NativePlatform) != 0)\n  {\n  #if defined(HAVE_EGL)\n    addInfo (theDict, \"EGLVersion\",    ::eglQueryString ((EGLDisplay )myDisplay, EGL_VERSION));\n    addInfo (theDict, \"EGLVendor\",     ::eglQueryString ((EGLDisplay )myDisplay, EGL_VENDOR));\n    addInfo (theDict, \"EGLClientAPIs\", ::eglQueryString ((EGLDisplay )myDisplay, EGL_CLIENT_APIS));\n    if ((theFlags & Graphic3d_DiagnosticInfo_Extensions) != 0)\n    {\n      addInfo (theDict, \"EGLExtensions\", ::eglQueryString ((EGLDisplay )myDisplay, EGL_EXTENSIONS));\n    }\n  #elif defined(_WIN32)\n    if ((theFlags & Graphic3d_DiagnosticInfo_Extensions) != 0\n     && myFuncs->wglGetExtensionsStringARB != NULL)\n    {\n      const char* aWglExts = myFuncs->wglGetExtensionsStringARB ((HDC )myWindowDC);\n      addInfo (theDict, \"WGLExtensions\", aWglExts);\n    }\n  #elif defined(__APPLE__)\n    //\n  #else\n    Display* aDisplay = (Display*)myDisplay;\n    const int aScreen = DefaultScreen(aDisplay);\n    addInfo (theDict, \"GLXDirectRendering\", ::glXIsDirect (aDisplay, (GLXContext )myGContext) ? \"Yes\" : \"No\");\n    addInfo (theDict, \"GLXVendor\",  ::glXQueryServerString (aDisplay, aScreen, GLX_VENDOR));\n    addInfo (theDict, \"GLXVersion\", ::glXQueryServerString (aDisplay, aScreen, GLX_VERSION));\n    if ((theFlags & Graphic3d_DiagnosticInfo_Extensions) != 0)\n    {\n      const char* aGlxExts = ::glXQueryExtensionsString (aDisplay, aScreen);\n      addInfo(theDict, \"GLXExtensions\", aGlxExts);\n    }\n\n    addInfo (theDict, \"GLXClientVendor\",  ::glXGetClientString (aDisplay, GLX_VENDOR));\n    addInfo (theDict, \"GLXClientVersion\", ::glXGetClientString (aDisplay, GLX_VERSION));\n    if ((theFlags & Graphic3d_DiagnosticInfo_Extensions) != 0)\n    {\n      addInfo (theDict, \"GLXClientExtensions\", ::glXGetClientString (aDisplay, GLX_EXTENSIONS));\n    }\n  #endif\n  }\n\n  if ((theFlags & Graphic3d_DiagnosticInfo_Device) != 0)\n  {\n    Standard_Integer aDriverVer[2] = {};\n    ReadGlVersion (aDriverVer[0], aDriverVer[1]);\n    addInfo (theDict, \"GLvendor\",    (const char*)::glGetString (GL_VENDOR));\n    addInfo (theDict, \"GLdevice\",    (const char*)::glGetString (GL_RENDERER));\n    addInfo (theDict, \"GLversion\",   (const char*)::glGetString (GL_VERSION));\n    if (myGlVerMajor != aDriverVer[0]\n     || myGlVerMinor != aDriverVer[1])\n    {\n      addInfo (theDict, \"GLversionOcct\", TCollection_AsciiString (myGlVerMajor) + \".\" + TCollection_AsciiString (myGlVerMinor));\n    }\n    if (IsGlGreaterEqual (2, 0))\n    {\n      addInfo (theDict, \"GLSLversion\", (const char*)::glGetString (GL_SHADING_LANGUAGE_VERSION));\n    }\n    if (myIsGlDebugCtx)\n    {\n      addInfo (theDict, \"GLdebug\", \"ON\");\n    }\n  }\n\n  if ((theFlags & Graphic3d_DiagnosticInfo_Limits) != 0)\n  {\n    addInfo (theDict, \"Max texture size\", TCollection_AsciiString(myMaxTexDim));\n    addInfo (theDict, \"Max FBO dump size\", TCollection_AsciiString() + myMaxDumpSizeX + \"x\" + myMaxDumpSizeY);\n    addInfo (theDict, \"Max combined texture units\", TCollection_AsciiString(myMaxTexCombined));\n    addInfo (theDict, \"Max MSAA samples\", TCollection_AsciiString(myMaxMsaaSamples));\n  }\n\n  if ((theFlags & Graphic3d_DiagnosticInfo_FrameBuffer) != 0)\n  {\n    GLint aViewport[4] = {};\n    ::glGetIntegerv (GL_VIEWPORT, aViewport);\n    addInfo (theDict, \"Viewport\", TCollection_AsciiString() + aViewport[2] + \"x\" + aViewport[3]);\n  }\n\n  if ((theFlags & Graphic3d_DiagnosticInfo_Memory) != 0)\n  {\n    MemoryInfo (theDict);\n  }\n\n  if ((theFlags & Graphic3d_DiagnosticInfo_Extensions) != 0)\n  {\n  #if !defined(GL_ES_VERSION_2_0)\n    if (IsGlGreaterEqual (3, 0)\n     && myFuncs->glGetStringi != NULL)\n    {\n      TCollection_AsciiString anExtList;\n      GLint anExtNb = 0;\n      ::glGetIntegerv (GL_NUM_EXTENSIONS, &anExtNb);\n      for (GLint anIter = 0; anIter < anExtNb; ++anIter)\n      {\n        const char* anExtension = (const char*)myFuncs->glGetStringi (GL_EXTENSIONS, (GLuint)anIter);\n        if (!anExtList.IsEmpty())\n        {\n          anExtList += \" \";\n        }\n        anExtList += anExtension;\n      }\n      addInfo(theDict, \"GLextensions\", anExtList);\n    }\n    else\n  #endif\n    {\n      addInfo (theDict, \"GLextensions\", (const char*)::glGetString (GL_EXTENSIONS));\n    }\n  }\n}\n\n// =======================================================================\n// function : GetResource\n// purpose  :\n// =======================================================================\nconst Handle(OpenGl_Resource)& OpenGl_Context::GetResource (const TCollection_AsciiString& theKey) const\n{\n  return mySharedResources->IsBound (theKey) ? mySharedResources->Find (theKey) : NULL_GL_RESOURCE;\n}\n\n// =======================================================================\n// function : ShareResource\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::ShareResource (const TCollection_AsciiString& theKey,\n                                                const Handle(OpenGl_Resource)& theResource)\n{\n  if (theKey.IsEmpty() || theResource.IsNull())\n  {\n    return Standard_False;\n  }\n  return mySharedResources->Bind (theKey, theResource);\n}\n\n// =======================================================================\n// function : ReleaseResource\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ReleaseResource (const TCollection_AsciiString& theKey,\n                                      const Standard_Boolean         theToDelay)\n{\n  if (!mySharedResources->IsBound (theKey))\n  {\n    return;\n  }\n  const Handle(OpenGl_Resource)& aRes = mySharedResources->Find (theKey);\n  if (aRes->GetRefCount() > 1)\n  {\n    return;\n  }\n\n  if (theToDelay)\n  {\n    myDelayed->Bind (theKey, 1);\n  }\n  else\n  {\n    aRes->Release (this);\n    mySharedResources->UnBind (theKey);\n  }\n}\n\n// =======================================================================\n// function : ReleaseDelayed\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ReleaseDelayed()\n{\n  // release queued elements\n  while (!myUnusedResources->IsEmpty())\n  {\n    myUnusedResources->First()->Release (this);\n    myUnusedResources->RemoveFirst();\n  }\n\n  // release delayed shared resources\n  NCollection_Vector<TCollection_AsciiString> aDeadList;\n  for (NCollection_DataMap<TCollection_AsciiString, Standard_Integer>::Iterator anIter (*myDelayed);\n       anIter.More(); anIter.Next())\n  {\n    if (++anIter.ChangeValue() <= 2)\n    {\n      continue; // postpone release one more frame to ensure noone use it periodically\n    }\n\n    const TCollection_AsciiString& aKey = anIter.Key();\n    if (!mySharedResources->IsBound (aKey))\n    {\n      // mixed unshared strategy delayed/undelayed was used!\n      aDeadList.Append (aKey);\n      continue;\n    }\n\n    const Handle(OpenGl_Resource)& aRes = mySharedResources->ChangeFind (aKey);\n    if (aRes->GetRefCount() > 1)\n    {\n      // should be only 1 instance in mySharedResources\n      // if not - resource was reused again\n      aDeadList.Append (aKey);\n      continue;\n    }\n\n    // release resource if no one requiested it more than 2 redraw calls\n    aRes->Release (this);\n    mySharedResources->UnBind (aKey);\n    aDeadList.Append (aKey);\n  }\n\n  for (Standard_Integer anIter = 0; anIter < aDeadList.Length(); ++anIter)\n  {\n    myDelayed->UnBind (aDeadList.Value (anIter));\n  }\n}\n\n// =======================================================================\n// function : BindTextures\n// purpose  :\n// =======================================================================\nHandle(OpenGl_TextureSet) OpenGl_Context::BindTextures (const Handle(OpenGl_TextureSet)& theTextures)\n{\n  if (myActiveTextures == theTextures)\n  {\n    return myActiveTextures;\n  }\n\n  Handle(OpenGl_Context) aThisCtx (this);\n  OpenGl_TextureSet::Iterator aTextureIterOld (myActiveTextures), aTextureIterNew (theTextures);\n  for (;;)\n  {\n    if (!aTextureIterNew.More())\n    {\n      for (; aTextureIterOld.More(); aTextureIterOld.Next())\n      {\n        if (const Handle(OpenGl_Texture)& aTextureOld = aTextureIterOld.Value())\n        {\n          aTextureOld->Unbind(aThisCtx);\n        #if !defined(GL_ES_VERSION_2_0)\n          if (core11 != NULL)\n          {\n            OpenGl_Sampler::resetGlobalTextureParams (aThisCtx, *aTextureOld, aTextureOld->Sampler()->Parameters());\n          }\n        #endif\n        }\n      }\n      break;\n    }\n\n    const Handle(OpenGl_Texture)& aTextureNew = aTextureIterNew.Value();\n    if (aTextureIterOld.More())\n    {\n      const Handle(OpenGl_Texture)& aTextureOld = aTextureIterOld.Value();\n      if (aTextureNew == aTextureOld)\n      {\n        aTextureIterNew.Next();\n        aTextureIterOld.Next();\n        continue;\n      }\n      else if (aTextureNew.IsNull()\n           || !aTextureNew->IsValid())\n      {\n        if (!aTextureOld.IsNull())\n        {\n          aTextureOld->Unbind(aThisCtx);\n        #if !defined(GL_ES_VERSION_2_0)\n          if (core11 != NULL)\n          {\n            OpenGl_Sampler::resetGlobalTextureParams (aThisCtx, *aTextureOld, aTextureOld->Sampler()->Parameters());\n          }\n        #endif\n        }\n\n        aTextureIterNew.Next();\n        aTextureIterOld.Next();\n        continue;\n      }\n\n      aTextureIterOld.Next();\n    }\n    if (aTextureNew.IsNull())\n    {\n      aTextureIterNew.Next();\n      continue;\n    }\n\n    const Graphic3d_TextureUnit aTexUnit = aTextureNew->Sampler()->Parameters()->TextureUnit();\n    if (aTexUnit >= myMaxTexCombined)\n    {\n      PushMessage (GL_DEBUG_SOURCE_APPLICATION, GL_DEBUG_TYPE_ERROR, 0, GL_DEBUG_SEVERITY_HIGH,\n                   TCollection_AsciiString(\"Texture unit \") + aTexUnit + \" for \" + aTextureNew->ResourceId() + \" exceeds hardware limit \" + myMaxTexCombined);\n      aTextureIterNew.Next();\n      continue;\n    }\n\n    aTextureNew->Bind (aThisCtx);\n    if (aTextureNew->Sampler()->ToUpdateParameters())\n    {\n      if (aTextureNew->Sampler()->IsImmutable())\n      {\n        aTextureNew->Sampler()->Init (aThisCtx, *aTextureNew);\n      }\n      else\n      {\n        OpenGl_Sampler::applySamplerParams (aThisCtx, aTextureNew->Sampler()->Parameters(), aTextureNew->Sampler().get(), aTextureNew->GetTarget(), aTextureNew->HasMipmaps());\n      }\n    }\n  #if !defined(GL_ES_VERSION_2_0)\n    if (core11 != NULL)\n    {\n      OpenGl_Sampler::applyGlobalTextureParams (aThisCtx, *aTextureNew, aTextureNew->Sampler()->Parameters());\n    }\n  #endif\n    aTextureIterNew.Next();\n  }\n\n  Handle(OpenGl_TextureSet) anOldTextures = myActiveTextures;\n  myActiveTextures = theTextures;\n  return anOldTextures;\n}\n\n// =======================================================================\n// function : BindProgram\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::BindProgram (const Handle(OpenGl_ShaderProgram)& theProgram)\n{\n  if (core20fwd == NULL)\n  {\n    return Standard_False;\n  }\n  else if (myActiveProgram == theProgram)\n  {\n    return Standard_True;\n  }\n\n  if (theProgram.IsNull()\n  || !theProgram->IsValid())\n  {\n    if (!myActiveProgram.IsNull())\n    {\n      core20fwd->glUseProgram (OpenGl_ShaderProgram::NO_PROGRAM);\n      myActiveProgram.Nullify();\n    }\n    return Standard_False;\n  }\n\n  myActiveProgram = theProgram;\n  core20fwd->glUseProgram (theProgram->ProgramId());\n  return Standard_True;\n}\n\n// =======================================================================\n// function : BindDefaultVao\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::BindDefaultVao()\n{\n#if !defined(GL_ES_VERSION_2_0)\n  if (myDefaultVao == 0\n   || core32 == NULL)\n  {\n    return;\n  }\n\n  core32->glBindVertexArray (myDefaultVao);\n#endif\n}\n\n// =======================================================================\n// function : SetDefaultFrameBuffer\n// purpose  :\n// =======================================================================\nHandle(OpenGl_FrameBuffer) OpenGl_Context::SetDefaultFrameBuffer (const Handle(OpenGl_FrameBuffer)& theFbo)\n{\n  Handle(OpenGl_FrameBuffer) aFbo = myDefaultFbo;\n  myDefaultFbo = theFbo;\n  return aFbo;\n}\n\n// =======================================================================\n// function : SetShadingMaterial\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetShadingMaterial (const OpenGl_Aspects* theAspect,\n                                         const Handle(Graphic3d_PresentationAttributes)& theHighlight)\n{\n  const Handle(Graphic3d_Aspects)& anAspect = (!theHighlight.IsNull() && !theHighlight->BasicFillAreaAspect().IsNull())\n                                            ?  (const Handle(Graphic3d_Aspects)& )theHighlight->BasicFillAreaAspect()\n                                            :  theAspect->Aspect();\n\n  const bool toDistinguish = anAspect->Distinguish();\n  const bool toMapTexture  = anAspect->ToMapTexture();\n  const Graphic3d_MaterialAspect& aMatFrontSrc = anAspect->FrontMaterial();\n  const Graphic3d_MaterialAspect& aMatBackSrc  = toDistinguish\n                                               ? anAspect->BackMaterial()\n                                               : aMatFrontSrc;\n  const Quantity_Color& aFrontIntColor = anAspect->InteriorColor();\n  const Quantity_Color& aBackIntColor  = toDistinguish\n                                       ? anAspect->BackInteriorColor()\n                                       : aFrontIntColor;\n\n  myMatFront.Init (aMatFrontSrc, aFrontIntColor);\n  if (toDistinguish)\n  {\n    myMatBack.Init (aMatBackSrc, aBackIntColor);\n  }\n  else\n  {\n    myMatBack = myMatFront;\n  }\n\n  if (!theHighlight.IsNull()\n    && theHighlight->BasicFillAreaAspect().IsNull())\n  {\n    myMatFront.SetColor (theHighlight->ColorRGBA());\n    myMatBack .SetColor (theHighlight->ColorRGBA());\n  }\n\n  Standard_ShortReal anAlphaFront = 1.0f;\n  Standard_ShortReal anAlphaBack  = 1.0f;\n  if (CheckIsTransparent (theAspect, theHighlight, anAlphaFront, anAlphaBack))\n  {\n    myMatFront.Diffuse.a() = anAlphaFront;\n    myMatBack .Diffuse.a() = anAlphaBack;\n  }\n\n  // do not update material properties in case of zero reflection mode,\n  // because GL lighting will be disabled by OpenGl_PrimitiveArray::DrawArray() anyway.\n  const OpenGl_MaterialState& aMatState = myShaderManager->MaterialState();\n  float anAlphaCutoff = anAspect->AlphaMode() == Graphic3d_AlphaMode_Mask\n                      ? anAspect->AlphaCutoff()\n                      : ShortRealLast();\n  if (anAspect->ToDrawEdges())\n  {\n    if (anAspect->InteriorStyle() == Aspect_IS_EMPTY\n     || (anAspect->InteriorStyle() == Aspect_IS_SOLID\n      && anAspect->EdgeColorRGBA().Alpha() < 1.0f))\n    {\n      anAlphaCutoff = 0.285f;\n    }\n  }\n  if (theAspect->ShadingModel() == Graphic3d_TOSM_UNLIT)\n  {\n    if (anAlphaCutoff == aMatState.AlphaCutoff())\n    {\n      return;\n    }\n  }\n  else if (myMatFront    == aMatState.FrontMaterial()\n        && myMatBack     == aMatState.BackMaterial()\n        && toDistinguish == aMatState.ToDistinguish()\n        && toMapTexture  == aMatState.ToMapTexture()\n        && anAlphaCutoff == aMatState.AlphaCutoff())\n  {\n    return;\n  }\n\n  myShaderManager->UpdateMaterialStateTo (myMatFront, myMatBack, anAlphaCutoff, toDistinguish, toMapTexture);\n}\n\n// =======================================================================\n// function : CheckIsTransparent\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::CheckIsTransparent (const OpenGl_Aspects* theAspect,\n                                                     const Handle(Graphic3d_PresentationAttributes)& theHighlight,\n                                                     Standard_ShortReal& theAlphaFront,\n                                                     Standard_ShortReal& theAlphaBack)\n{\n  const Handle(Graphic3d_Aspects)& anAspect = (!theHighlight.IsNull() && !theHighlight->BasicFillAreaAspect().IsNull())\n                                            ?  (const Handle(Graphic3d_Aspects)& )theHighlight->BasicFillAreaAspect()\n                                            :  theAspect->Aspect();\n\n  const bool toDistinguish = anAspect->Distinguish();\n  const Graphic3d_MaterialAspect& aMatFrontSrc = anAspect->FrontMaterial();\n  const Graphic3d_MaterialAspect& aMatBackSrc  = toDistinguish\n                                               ? anAspect->BackMaterial()\n                                               : aMatFrontSrc;\n\n  // handling transparency\n  if (!theHighlight.IsNull()\n    && theHighlight->BasicFillAreaAspect().IsNull())\n  {\n    theAlphaFront = theHighlight->ColorRGBA().Alpha();\n    theAlphaBack  = theHighlight->ColorRGBA().Alpha();\n  }\n  else\n  {\n    theAlphaFront = aMatFrontSrc.Alpha();\n    theAlphaBack  = aMatBackSrc .Alpha();\n  }\n\n  if (anAspect->AlphaMode() == Graphic3d_AlphaMode_BlendAuto)\n  {\n    return theAlphaFront < 1.0f\n        || theAlphaBack  < 1.0f;\n  }\n  return anAspect->AlphaMode() == Graphic3d_AlphaMode_Blend;\n}\n\n// =======================================================================\n// function : SetColor4fv\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetColor4fv (const OpenGl_Vec4& theColor)\n{\n  if (!myActiveProgram.IsNull())\n  {\n    myActiveProgram->SetUniform (this, myActiveProgram->GetStateLocation (OpenGl_OCCT_COLOR), theColor);\n  }\n#if !defined(GL_ES_VERSION_2_0)\n  else if (core11 != NULL)\n  {\n    core11->glColor4fv (theColor.GetData());\n  }\n#endif\n}\n\n// =======================================================================\n// function : SetTypeOfLine\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetTypeOfLine (const Aspect_TypeOfLine  theType,\n                                    const Standard_ShortReal theFactor)\n{\n  Standard_Integer aPattern = 0xFFFF;\n  switch (theType)\n  {\n    case Aspect_TOL_DASH:\n    {\n      aPattern = 0xFFC0;\n      break;\n    }\n    case Aspect_TOL_DOT:\n    {\n      aPattern = 0xCCCC;\n      break;\n    }\n    case Aspect_TOL_DOTDASH:\n    {\n      aPattern = 0xFF18;\n      break;\n    }\n    case Aspect_TOL_EMPTY:\n    case Aspect_TOL_SOLID:\n    {\n      aPattern = 0xFFFF;\n      break;\n    }\n    case Aspect_TOL_USERDEFINED:\n    {\n      aPattern = 0xFF24;\n      break;\n    }\n  }\n\n  if (!myActiveProgram.IsNull())\n  {\n    if (const OpenGl_ShaderUniformLocation aPatternLoc = myActiveProgram->GetStateLocation (OpenGl_OCCT_LINE_STIPPLE_PATTERN))\n    {\n      if (hasGlslBitwiseOps != OpenGl_FeatureNotAvailable)\n      {\n        myActiveProgram->SetUniform (this, aPatternLoc, aPattern);\n      }\n      else\n      {\n        Standard_Integer aPatArr[16] = {};\n        for (unsigned int aBit = 0; aBit < 16; ++aBit)\n        {\n          aPatArr[aBit] = ((unsigned int)(aPattern) & (1U << aBit)) != 0 ? 1 : 0;\n        }\n        myActiveProgram->SetUniform (this, aPatternLoc, 16, aPatArr);\n      }\n      myActiveProgram->SetUniform (this, myActiveProgram->GetStateLocation (OpenGl_OCCT_LINE_STIPPLE_FACTOR), theFactor);\n    }\n    return;\n  }\n\n#if !defined(GL_ES_VERSION_2_0)\n  if (aPattern != 0xFFFF)\n  {\n    if (core11 != NULL)\n    {\n      core11fwd->glEnable (GL_LINE_STIPPLE);\n\n      core11->glLineStipple (static_cast<GLint>    (theFactor),\n                             static_cast<GLushort> (aPattern));\n    }\n  }\n  else\n  {\n    if (core11 != NULL)\n    {\n      core11fwd->glDisable (GL_LINE_STIPPLE);\n    }\n  }\n#endif\n}\n\n// =======================================================================\n// function : SetLineWidth\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetLineWidth (const Standard_ShortReal theWidth)\n{\n  if (core11 != NULL)\n  {\n    // glLineWidth() is still defined within Core Profile, but has no effect with values != 1.0f\n    core11fwd->glLineWidth (theWidth * myLineWidthScale);\n  }\n}\n\n// =======================================================================\n// function : SetTextureMatrix\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetTextureMatrix (const Handle(Graphic3d_TextureParams)& theParams)\n{\n  if (theParams.IsNull())\n  {\n    return;\n  }\n  else if (!myActiveProgram.IsNull())\n  {\n    const GLint aUniLoc = myActiveProgram->GetStateLocation (OpenGl_OCCT_TEXTURE_TRSF2D);\n    if (aUniLoc == OpenGl_ShaderProgram::INVALID_LOCATION)\n    {\n      return;\n    }\n\n    // pack transformation parameters\n    OpenGl_Vec4 aTrsf[2] =\n    {\n      OpenGl_Vec4 (-theParams->Translation().x(),\n                   -theParams->Translation().y(),\n                    theParams->Scale().x(),\n                    theParams->Scale().y()),\n      OpenGl_Vec4 (static_cast<float> (std::sin (-theParams->Rotation() * M_PI / 180.0)),\n                   static_cast<float> (std::cos (-theParams->Rotation() * M_PI / 180.0)),\n                   0.0f, 0.0f)\n    };\n    myActiveProgram->SetUniform (this, aUniLoc, 2, aTrsf);\n    return;\n  }\n\n#if !defined(GL_ES_VERSION_2_0)\n  if (core11 != NULL)\n  {\n    GLint aMatrixMode = GL_TEXTURE;\n    ::glGetIntegerv (GL_MATRIX_MODE, &aMatrixMode);\n\n    core11->glMatrixMode (GL_TEXTURE);\n    OpenGl_Mat4 aTextureMat;\n    const Graphic3d_Vec2& aScale = theParams->Scale();\n    const Graphic3d_Vec2& aTrans = theParams->Translation();\n    Graphic3d_TransformUtils::Scale     (aTextureMat,  aScale.x(),  aScale.y(), 1.0f);\n    Graphic3d_TransformUtils::Translate (aTextureMat, -aTrans.x(), -aTrans.y(), 0.0f);\n    Graphic3d_TransformUtils::Rotate    (aTextureMat, -theParams->Rotation(), 0.0f, 0.0f, 1.0f);\n    core11->glLoadMatrixf (aTextureMat);\n    core11->glMatrixMode (aMatrixMode);\n  }\n#endif\n}\n\n// =======================================================================\n// function : SetPointSize\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetPointSize (const Standard_ShortReal theSize)\n{\n  if (!myActiveProgram.IsNull())\n  {\n    myActiveProgram->SetUniform (this, myActiveProgram->GetStateLocation (OpenGl_OCCT_POINT_SIZE), theSize);\n  #if !defined(GL_ES_VERSION_2_0)\n    //myContext->core11fwd->glEnable (GL_VERTEX_PROGRAM_POINT_SIZE);\n  #endif\n  }\n#if !defined(GL_ES_VERSION_2_0)\n  //else\n  {\n    core11fwd->glPointSize (theSize);\n    if (core20fwd != NULL)\n    {\n      //myContext->core11fwd->glDisable (GL_VERTEX_PROGRAM_POINT_SIZE);\n    }\n  }\n#endif\n}\n\n// =======================================================================\n// function : SetPointSpriteOrigin\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetPointSpriteOrigin()\n{\n#if !defined(GL_ES_VERSION_2_0)\n  if (core15fwd == NULL)\n  {\n    return;\n  }\n\n  const int aNewState = !myActiveProgram.IsNull() ? GL_UPPER_LEFT : GL_LOWER_LEFT;\n  if (myPointSpriteOrig != aNewState)\n  {\n    myPointSpriteOrig = aNewState;\n    core15fwd->glPointParameteri (GL_POINT_SPRITE_COORD_ORIGIN, aNewState);\n  }\n#endif\n}\n\n// =======================================================================\n// function : SetGlNormalizeEnabled\n// purpose  :\n// =======================================================================\nStandard_Boolean OpenGl_Context::SetGlNormalizeEnabled (Standard_Boolean isEnabled)\n{\n  if (isEnabled == myIsGlNormalizeEnabled)\n  {\n    return myIsGlNormalizeEnabled;\n  }\n\n  Standard_Boolean anOldGlNormalize = myIsGlNormalizeEnabled;\n\n  myIsGlNormalizeEnabled = isEnabled;\n\n#if !defined(GL_ES_VERSION_2_0)\n  if (core11 != NULL)\n  {\n    if (isEnabled)\n    {\n      ::glEnable  (GL_NORMALIZE);\n    }\n    else\n    {\n      ::glDisable (GL_NORMALIZE);\n    }\n  }\n#endif\n\n  return anOldGlNormalize;\n}\n\n// =======================================================================\n// function : SetPolygonMode\n// purpose  :\n// =======================================================================\nStandard_Integer OpenGl_Context::SetPolygonMode (const Standard_Integer theMode)\n{\n  if (myPolygonMode == theMode)\n  {\n    return myPolygonMode;\n  }\n\n  const Standard_Integer anOldPolygonMode = myPolygonMode;\n\n  myPolygonMode = theMode;\n\n#if !defined(GL_ES_VERSION_2_0)\n  ::glPolygonMode (GL_FRONT_AND_BACK, (GLenum)theMode);\n#endif\n\n  return anOldPolygonMode;\n}\n\n// =======================================================================\n// function : SetPolygonHatchEnabled\n// purpose  :\n// =======================================================================\nbool OpenGl_Context::SetPolygonHatchEnabled (const bool theIsEnabled)\n{\n  if (myHatchStyles.IsNull())\n  {\n    return false;\n  }\n  else if (myHatchStyles->IsEnabled() == theIsEnabled)\n  {\n    return theIsEnabled;\n  }\n\n  return myHatchStyles->SetEnabled (this, theIsEnabled);\n}\n\n// =======================================================================\n// function : SetPolygonHatchStyle\n// purpose  :\n// =======================================================================\nStandard_Integer OpenGl_Context::SetPolygonHatchStyle (const Handle(Graphic3d_HatchStyle)& theStyle)\n{\n  if (theStyle.IsNull())\n  {\n    return 0;\n  }\n\n  if (myHatchStyles.IsNull())\n  {\n    if (!GetResource (\"OpenGl_LineAttributes\", myHatchStyles))\n    {\n      // share and register for release once the resource is no longer used\n      myHatchStyles = new OpenGl_LineAttributes();\n      ShareResource (\"OpenGl_LineAttributes\", myHatchStyles);\n    }\n  }\n  if (myHatchStyles->TypeOfHatch() == theStyle->HatchType())\n  {\n    return theStyle->HatchType();\n  }\n\n  return myHatchStyles->SetTypeOfHatch (this, theStyle);\n}\n\n// =======================================================================\n// function : SetPolygonOffset\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::SetPolygonOffset (const Graphic3d_PolygonOffset& theOffset)\n{\n  const bool toFillOld = (myPolygonOffset.Mode & Aspect_POM_Fill) == Aspect_POM_Fill;\n  const bool toFillNew = (theOffset.Mode       & Aspect_POM_Fill) == Aspect_POM_Fill;\n  if (toFillNew != toFillOld)\n  {\n    if (toFillNew)\n    {\n      glEnable (GL_POLYGON_OFFSET_FILL);\n    }\n    else\n    {\n      glDisable (GL_POLYGON_OFFSET_FILL);\n    }\n  }\n\n#if !defined(GL_ES_VERSION_2_0)\n  const bool toLineOld = (myPolygonOffset.Mode & Aspect_POM_Line) == Aspect_POM_Line;\n  const bool toLineNew = (theOffset.Mode       & Aspect_POM_Line) == Aspect_POM_Line;\n  if (toLineNew != toLineOld)\n  {\n    if (toLineNew)\n    {\n      glEnable (GL_POLYGON_OFFSET_LINE);\n    }\n    else\n    {\n      glDisable (GL_POLYGON_OFFSET_LINE);\n    }\n  }\n\n  const bool toPointOld = (myPolygonOffset.Mode & Aspect_POM_Point) == Aspect_POM_Point;\n  const bool toPointNew = (theOffset.Mode       & Aspect_POM_Point) == Aspect_POM_Point;\n  if (toPointNew != toPointOld)\n  {\n    if (toPointNew)\n    {\n      glEnable (GL_POLYGON_OFFSET_POINT);\n    }\n    else\n    {\n      glDisable (GL_POLYGON_OFFSET_POINT);\n    }\n  }\n#endif\n\n  if (myPolygonOffset.Factor != theOffset.Factor\n   || myPolygonOffset.Units  != theOffset.Units)\n  {\n    glPolygonOffset (theOffset.Factor, theOffset.Units);\n  }\n  myPolygonOffset = theOffset;\n}\n\n// =======================================================================\n// function : ApplyModelWorldMatrix\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ApplyModelWorldMatrix()\n{\n  if (myShaderManager->ModelWorldState().ModelWorldMatrix() != ModelWorldState.Current())\n  {\n    myShaderManager->UpdateModelWorldStateTo (ModelWorldState.Current());\n  }\n}\n\n// =======================================================================\n// function : ApplyWorldViewMatrix\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ApplyWorldViewMatrix()\n{\n  if (myShaderManager->ModelWorldState().ModelWorldMatrix() != THE_IDENTITY_MATRIX)\n  {\n    myShaderManager->UpdateModelWorldStateTo (THE_IDENTITY_MATRIX);\n  }\n  if (myShaderManager->WorldViewState().WorldViewMatrix() != WorldViewState.Current())\n  {\n    myShaderManager->UpdateWorldViewStateTo (WorldViewState.Current());\n  }\n}\n\n// =======================================================================\n// function : ApplyModelViewMatrix\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ApplyModelViewMatrix()\n{\n  if (myShaderManager->ModelWorldState().ModelWorldMatrix() != ModelWorldState.Current())\n  {\n    myShaderManager->UpdateModelWorldStateTo (ModelWorldState.Current());\n  }\n  if (myShaderManager->WorldViewState().WorldViewMatrix() != WorldViewState.Current())\n  {\n    myShaderManager->UpdateWorldViewStateTo  (WorldViewState.Current());\n  }\n}\n\n// =======================================================================\n// function : ApplyProjectionMatrix\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::ApplyProjectionMatrix()\n{\n  if (myShaderManager->ProjectionState().ProjectionMatrix() != ProjectionState.Current())\n  {\n    myShaderManager->UpdateProjectionStateTo (ProjectionState.Current());\n  }\n}\n\n// =======================================================================\n// function : EnableFeatures\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::EnableFeatures() const\n{\n  //\n}\n\n// =======================================================================\n// function : DisableFeatures\n// purpose  :\n// =======================================================================\nvoid OpenGl_Context::DisableFeatures() const\n{\n  // Disable stuff that's likely to slow down glDrawPixels.\n  glDisable(GL_DITHER);\n  glDisable(GL_BLEND);\n  glDisable(GL_DEPTH_TEST);\n  glDisable(GL_STENCIL_TEST);\n\n#if !defined(GL_ES_VERSION_2_0)\n  if (core11 == NULL)\n  {\n    return;\n  }\n\n  glDisable(GL_TEXTURE_1D);\n  glDisable(GL_TEXTURE_2D);\n\n  glDisable(GL_LIGHTING);\n  glDisable(GL_ALPHA_TEST);\n  glDisable(GL_FOG);\n  glDisable(GL_LOGIC_OP);\n\n  glPixelTransferi(GL_MAP_COLOR, GL_FALSE);\n  glPixelTransferi(GL_RED_SCALE, 1);\n  glPixelTransferi(GL_RED_BIAS, 0);\n  glPixelTransferi(GL_GREEN_SCALE, 1);\n  glPixelTransferi(GL_GREEN_BIAS, 0);\n  glPixelTransferi(GL_BLUE_SCALE, 1);\n  glPixelTransferi(GL_BLUE_BIAS, 0);\n  glPixelTransferi(GL_ALPHA_SCALE, 1);\n  glPixelTransferi(GL_ALPHA_BIAS, 0);\n\n  if ((myGlVerMajor >= 1) && (myGlVerMinor >= 2))\n  {\n    if (CheckExtension (\"GL_CONVOLUTION_1D_EXT\"))\n      glDisable(GL_CONVOLUTION_1D_EXT);\n\n    if (CheckExtension (\"GL_CONVOLUTION_2D_EXT\"))\n      glDisable(GL_CONVOLUTION_2D_EXT);\n\n    if (CheckExtension (\"GL_SEPARABLE_2D_EXT\"))\n      glDisable(GL_SEPARABLE_2D_EXT);\n\n    if (CheckExtension (\"GL_SEPARABLE_2D_EXT\"))\n      glDisable(GL_HISTOGRAM_EXT);\n\n    if (CheckExtension (\"GL_MINMAX_EXT\"))\n      glDisable(GL_MINMAX_EXT);\n\n    if (CheckExtension (\"GL_TEXTURE_3D_EXT\"))\n      glDisable(GL_TEXTURE_3D_EXT);\n  }\n#endif\n}\n\n// =======================================================================\n// function : SetColorMask\n// purpose  :\n// =======================================================================\nbool OpenGl_Context::SetColorMask (bool theToWriteColor)\n{\n  const GLboolean toWrite = theToWriteColor ? GL_TRUE : GL_FALSE;\n  glColorMask (toWrite, toWrite, toWrite, toWrite);\n\n  const bool anOldValue = myColorMask;\n  myColorMask = theToWriteColor;\n  return anOldValue;\n}\n\n// =======================================================================\n// function : SetSampleAlphaToCoverage\n// purpose  :\n// =======================================================================\nbool OpenGl_Context::SetSampleAlphaToCoverage (bool theToEnable)\n{\n  bool toEnable = myAllowAlphaToCov && theToEnable;\n  if (myAlphaToCoverage == toEnable)\n  {\n    return myAlphaToCoverage;\n  }\n\n  if (core15fwd != NULL)\n  {\n    if (toEnable)\n    {\n      //core15fwd->core15fwd->glSampleCoverage (1.0f, GL_FALSE);\n      core15fwd->glEnable (GL_SAMPLE_ALPHA_TO_COVERAGE);\n    }\n    else\n    {\n      core15fwd->glDisable (GL_SAMPLE_ALPHA_TO_COVERAGE);\n    }\n  }\n\n  const bool anOldValue = myAlphaToCoverage;\n  myAlphaToCoverage = toEnable;\n  return anOldValue;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TInspectorAPI/TInspectorAPI_Communicator.cxx": "// Created on: 2017-06-16\n// Created by: Natalia ERMOLAEVA\n// Copyright (c) 2017 OPEN CASCADE SAS\n//\n// This file is part of Open CASCADE Technology software library.\n//\n// This library is free software; you can redistribute it and/or modify it under\n// the terms of the GNU Lesser General Public License version 2.1 as published\n// by the Free Software Foundation, with special exception defined in the file\n// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT\n// distribution for complete text of the license and disclaimer of any warranty.\n//\n// Alternatively, this file may be used under the terms of Open CASCADE\n// commercial license or contractual agreement. \n\n#include <inspector/TInspectorAPI_Communicator.hxx>\n\n#include <cstdio>\n#include <map>\n#include <iostream>\n\n#ifdef _WIN32\n#include <windows.h>\n#else\n#include <dlfcn.h>\n#endif\n\n#define LIB_HANDLE HINSTANCE\n\n// =======================================================================\n// function :  LoadPluginLibrary\n// purpose :\n// =======================================================================\nTInspectorAPI_Communicator* TInspectorAPI_Communicator::LoadPluginLibrary\n                                         (const TCollection_AsciiString& thePluginName)\n{\n  if (thePluginName.IsEmpty())\n    std::cout << thePluginName.ToCString() << \"%s plugin could not be loaded.\" << std::endl;\n  TCollection_AsciiString aPluginLibraryName = thePluginName;\n#ifdef _WIN32\n  aPluginLibraryName += \".dll\";\n#else\n  aPluginLibraryName.Prepend (\"lib\");\n  aPluginLibraryName += \".so\";\n#endif\n\n  COMMUNICATOR_INSTANCE crtInst = 0;\n#ifdef _WIN32\n  HINSTANCE modLib = ::LoadLibraryA((LPCSTR)aPluginLibraryName.ToCString());\n#else\n  void* modLib = dlopen(aPluginLibraryName.ToCString(), RTLD_LAZY | RTLD_GLOBAL);\n#endif\n\n  if (!modLib)\n    std::cout << \"Failed to load plugin.\" << aPluginLibraryName.ToCString() << std::endl;\n  else\n  {\n#ifdef _WIN32\n    crtInst = (COMMUNICATOR_INSTANCE)::GetProcAddress(modLib, CREATE_COMMUNICATOR_FUNCTION_NAME);\n#else\n    crtInst = (COMMUNICATOR_INSTANCE)dlsym(modLib, CREATE_COMMUNICATOR_FUNCTION_NAME);\n#endif\n    if (!crtInst)\n      std::cout << \"Failed to find \" << CREATE_COMMUNICATOR_FUNCTION_NAME << \" function.\" << std::endl;\n  }\n  TInspectorAPI_Communicator* aModule = crtInst ? crtInst() : 0;\n  return aModule;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/step/images/step_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/step/images/step_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/step/images/step_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/vis/images/vis_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/vis/images/vis_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/vis/images/vis_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/vis/images/vis_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/vis/images/vis_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/vis/images/vis_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im017.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image028.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im021.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image053.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im024.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image036.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image032.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image040.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image059.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image021.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image062.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image058.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image025.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image018.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im023.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im025.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im019.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im028.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im027.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image038.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_mkperiodic_im003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image044.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image054.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_mkperiodic_im004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_mkperiodic_im005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image026.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image051.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image023.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image048.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_mkperiodic_im002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im026.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image065.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im018.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im010.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image047.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image029.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image045.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image011.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image043.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im022.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image056.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im020.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image033.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image057.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image035.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image037.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image061.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im016.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im011.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image016.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im029.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image020.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image049.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image060.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image063.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image017.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image010.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image052.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image030.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image022.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im015.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image027.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image046.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im009.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_rf_im006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image015.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image041.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_mkperiodic_im001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image055.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image050.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image064.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image031.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image024.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image042.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image009.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image039.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_image034.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_algos/images/modeling_algos_mkperiodic_im006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/visualization.md",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/view_frustum.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image027.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image017.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image010.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image026.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image025.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image024.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image023.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/viewfrustumculling.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image018.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/stereo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image028.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image009.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/camera_perspective.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image029.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image022.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/visualization_image030.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/visualization/images/point_cloud.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/foundation_classes/images/foundation_classes_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/foundation_classes/images/foundation_classes_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/foundation_classes/images/foundation_classes_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/foundation_classes/images/foundation_classes_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/foundation_classes/images/foundation_classes_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/foundation_classes/images/foundation_classes_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/iges/images/iges_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/iges/images/iges_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image121.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image061.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image134.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/mkvolume_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image034.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image138.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image044.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image031.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image050.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image060.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image045.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image140.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image137.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image108.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image113.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_006_2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image046.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image039a.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image052.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image024.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image091.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image100.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image066.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image115.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image102.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image059.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image030.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image057.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image062.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image049.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image107.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image086.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image044.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image142.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image083.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image105.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image120.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image116.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image088.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image139.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image132.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bop_simple_001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image065.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image049.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image029.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image023.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bsplit_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image081.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image062.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image130.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_006_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/glue_options_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image110.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bsplit_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image068.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image104.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image026.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image063.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image109.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image063.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image029.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image064.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image036.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bsplit_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image033.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image035.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/glue_options_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image119.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image028.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/glue_options_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image055.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image045.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image041.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image106.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image073.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image135.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image122.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image096.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image020.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image099.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image042.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image025.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/mkvolume_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bop_simple_002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image069.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bsplit_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image133.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image118.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image072.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image070.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image141.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/glue_options_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image019.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image022.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image131.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image028.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image019.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image064.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image043.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image048.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image020.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image111.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bsplit_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image114.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image101.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image128.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image039.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image047.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image117.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image021.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image041.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image060.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image043.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image125.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image129.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/bsplit_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image054.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image082.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/cells_algorithm_004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image126.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image136.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image067.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image032.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/mkvolume_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image080.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image009.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image098.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image124.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image092.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image046.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/glue_options_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image143.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image027.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image038.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image071.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image040.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image087.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image030.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image027.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image089.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image090.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image127.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image058.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image032.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image040.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image112.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image051.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image031.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image056.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image085.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image053.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image039b.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image065.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image123.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image042.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image084.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image097.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image103.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/operations_image047.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/mkvolume_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image037.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image048.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image061.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image093.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image094.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/boolean_operations/images/boolean_image095.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/vinspector.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/drawexe_tinspector.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/display_additional_presentation.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_named_data.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/dump_attribute.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/display_main_presentation.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/TStandaloneEXE_open.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/3DView_set_orientation.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_tnaming_naming.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/preferences.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_tnaming_used_shapes.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/VStudio_projects.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/search.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_simple_type.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_label.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_array.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/dfbrowser.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/3DView.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/shapeview_tree_columns.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/vinspector_tree_columns.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_tnaming_named_shape.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/shapeview.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/property_panel_tree_node.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/inspector/images/TStandaloneEXE.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/xde_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/xde_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/614_xde_04_400.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/xde_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/646_xde_11_400.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/xde_notes001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/239_xde_12_400.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/xde/images/xde_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_tree_wp_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image011.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image016.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_wp_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_tree_wp_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image021.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_wp_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_tree_wp_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_functionmechanism_wp_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image015.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_tree_wp_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_wp_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_wp_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image022.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_functionmechanism_wp_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image020.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image017.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image010.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/ocaf/images/ocaf_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/tobj/images/tobj_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/tobj/images/tobj_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/tobj/images/tobj_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/tobj/images/tobj_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/tobj/images/tobj_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/tobj/images/tobj_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image011.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image010.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/shape_healing/images/shape_healing_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/draw_test_harness/images/draw_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/draw_test_harness/images/draw_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/draw_test_harness/images/draw_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/draw_test_harness/images/draw_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/draw_test_harness/images/draw_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/draw_test_harness/images/draw_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_opt_obb_125K.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image015.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_pca_obb_125K.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image010.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image009.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image011.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/user_guides/modeling_data/images/modeling_data_obb_125K.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image018.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image009.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image017.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image016.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image015.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image011.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image010.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/tutorial/images/tutorial_image019.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/documentation/images/documentation_folders.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/documentation/images/documentation_miktex.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/tests/images/tests_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/contribution_workflow/images/OCCT_ContributionWorkflow_V3_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_svgdiff.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image022.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image016.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image015.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image019.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image026.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image020.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image018.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image023.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image025.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image009.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image021.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/git_guide/images/OCCT_GitGuide_V2_image024.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/android/images/android_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/android/images/android_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/android/images/android_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/android/images/android_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/android/images/android_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/android/images/android_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/genconf_linux.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/3rdparty_image007.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/3rdparty_image005.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/3rdparty_image006.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/3rdparty_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/genconf_osx.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/3rdparty_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/genconf_windows.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/3rdparty/images/3rdparty_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/cmake/images/cmake_image004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/cmake/images/cmake_image000.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/cmake/images/cmake_image001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/cmake/images/cmake_image002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/dev_guides/building/cmake/images/cmake_image003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/resources/occt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/resources/occ_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/technical_overview_schema.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/technical_overview_occt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0013.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0008.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0003.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0001.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0002.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0004.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0014.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/technical_overview_over.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/technical_overview/images/0012.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/overview_installation.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/overview_qt.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/overview_mvc.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/overview_3rdparty.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/samples_qml_android_occt.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/samples_java_android_occt.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/sample_ios_uikit.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/overview_draw.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/dox/overview/images/overview_c__ie.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_mottled.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_chess.rgba",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_road.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_bumps.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_cv.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_maple.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_sky2.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_cast.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_clouds.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_chipbd.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_lines.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_bluewhite_paper.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_grass.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_blue_rock.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_bubbles.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_rain.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_pearl.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_floor.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_brushed.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_flesh.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/1d_elevation.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_alienskin.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_sky1.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_rock.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/env_medit.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_aluminum.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_clouds.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_knurl.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_MatraDatavision.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_galvnisd.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/Textures/2d_marble.rgb",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/DrawResources/lamp.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/DrawResources/OCC_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/DrawResources/dfb_folder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/DrawResources/dfb_attribns.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/src/DrawResources/dfb_attribute.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/marker_dot.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/Graph.PNG",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/hatch_1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/chataignier.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/marker_box2.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/impexp.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/cookerplate.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/nut.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/marker_kr.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/cyl_4_1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/wallpaper.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/petitsobj.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/marker_box1.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/terrain.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/carrelage1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/salome_interface04.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/images/plancher.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/stl/head.stl",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/stl/TR12J_OCC.stl",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/data/stl/TR12J_OCC64K.stl",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/help.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_reset.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/MainFrame.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_pan.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_right.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_front.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_glpan.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/tool_transparency.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_axo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_top.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/tool_wireframe.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_fitarea.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/new.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/tool_shading.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/document.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/lamp.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/tool_delete.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_left.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_fitall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_comp_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/tool_material.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_back.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/tool_color.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/view_comp_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_D3D/res/occ_logo.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/help.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_reset.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/MainFrame.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_pan.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_right.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_front.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_glpan.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/tool_transparency.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_axo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_top.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/tool_wireframe.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_fitarea.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/new.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/tool_shading.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/document.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/lamp.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/tool_delete.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_left.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_fitall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_comp_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/tool_material.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_back.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/tool_color.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/view_comp_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WPF_WinForms/res/occ_logo.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/CSharp/WinForms/App.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/uwp_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/Assets/LockScreenLogo.scale-200.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/Assets/Square150x150Logo.scale-200.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/Assets/Wide310x150Logo.scale-200.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/Assets/SplashScreen.scale-200.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/Assets/Square44x44Logo.targetsize-24_altform-unplated.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/xaml/Assets/Square44x44Logo.scale-200.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/ios/UIKitSample/UIKitSample/Assets.xcassets/AppIcon.appiconset/Icon-Small-40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/ios/UIKitSample/UIKitSample/Assets.xcassets/AppIcon.appiconset/Icon-76@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/ios/UIKitSample/UIKitSample/Assets.xcassets/AppIcon.appiconset/Icon-Small.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/ios/UIKitSample/UIKitSample/Assets.xcassets/AppIcon.appiconset/Icon-Small-40@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/ios/UIKitSample/UIKitSample/Assets.xcassets/AppIcon.appiconset/Icon-Small@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/ios/UIKitSample/UIKitSample/Assets.xcassets/AppIcon.appiconset/Icon-60@2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/ios/UIKitSample/UIKitSample/Assets.xcassets/AppIcon.appiconset/Icon-76.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/cursor_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/help.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_reset.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_pan.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_right.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_front.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/reflections.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_glpan.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/close.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tool_transparency.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_axo.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tool-shading.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/raytracing.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/cursor_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_top.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tool_wireframe.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_fitarea.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/new.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tool_shading.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/document.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/lamp.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/cascade.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tool_delete.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_left.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_fitall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_comp_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/shadows.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tool_material.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_back.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tool_color.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/view_comp_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/antialiasing.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Common/res/tile.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/AndroidQt/android/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/AndroidQt/android/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/AndroidQt/android/res/drawable-xhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/AndroidQt/android/res/drawable-xxhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/AndroidQt/res/icons/ic_action_collection.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Tutorial/src/MakeBottle.cxx",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Tutorial/res/Bottle.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/Tutorial/res/SampleImportExport.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/FuncDemo/images/save.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/FuncDemo/images/open.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/qt/FuncDemo/images/new.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Common/WNT/res/toolbar1.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Common/WNT/res/toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Common/WNT/res/occ_logo.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Common/WNT/res/OCCDemo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/texture1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/chataignier.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/agn.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/msv.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/texture2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/cookerplate.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/wallpaper.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/asv.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/terrain.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/carrelage1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/mla.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/emo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/plancher.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/occtdemo/Data/aev.gif",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/02_Modeling/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/02_Modeling/res/fram2.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/07_Triangulation/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/06_Ocaf/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/06_Ocaf/res/AIS_TB.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/06_Ocaf/res/ActionsTB.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/06_Ocaf/res/UndoRedoTB.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/05_ImportExport/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/2dChildFrameTB.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/MainFrame.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/ToolbarRayTracing.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/2dType.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/AIS_TB.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/coloredm.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/3dChildFrameTB.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/3dType.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/Common/res/occ_logo.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/01_Geometry/res/Toolbar1.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/01_Geometry/res/Toolbar2.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/03_Viewer2d/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/03_Viewer2d/res/Viewer2d.rc",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/04_Viewer3d/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/04_Viewer3d/res/AIS_TB.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/04_Viewer3d/res/AISToolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/10_Convert/src/WNT/res/logopen.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/10_Convert/src/WNT/res/toolbar1.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/10_Convert/src/WNT/res/toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/10_Convert/src/WNT/res/occlogo.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/10_Convert/src/WNT/res/OCCDemo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/FRONTVIEWD.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/BOTTOMVIEWD.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/topviewf.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/ChildFrame3D.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/BOTTOMVIEWF.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/ChildFrame2D.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/ToolBarObjects.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/dummyu.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/BOTTOMVIEWU.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/RIGHTVIEWF.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/axoviewf.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/RIGHTVIEWU.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/axoviewd.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/LEFTVIEWU.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/BACKVIEWD.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/dummyd.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/FRONTVIEWF.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/dummyf.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/FRONTVIEWU.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/RIGHTVIEWD.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/LEFTVIEWF.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/topviewu.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/BACKVIEWF.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/topviewd.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/LEFTVIEWD.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/BACKVIEWU.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/08_HLR/res/AXOVIEWU.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/09_Animation/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/mfc/standard/09_Animation/res/child2.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/open_l.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/fit.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/proj_right.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/info_image.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/proj_front.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/close_p.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/proj_bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/message.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/proj_left.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/open_p.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/proj_top.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/open.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/view.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/close_l.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/info.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-hdpi/proj_back.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-xhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/samples/java/jniviewer/res/drawable-xxhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/ShapeView/icons/folder_open.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/ShapeView/icons/folder_import.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TInspector/icons/item_algo_folder.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TInspector/icons/plugin_actions.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/cursor_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_pan.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/keep_view_off.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_dm_wireframe.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/cursor_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_clear.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_zoom.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_dm_shading.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_fitarea.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_fitall.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/view_rotate.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/View/icons/keep_view_on.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/VInspector/icons/treeview_update.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/VInspector/icons/treeview_or.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/VInspector/icons/treeview_and.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TInspectorEXE/icons/folder_export.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TInspectorEXE/icons/folder_open.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TInspectorEXE/icons/folder_import.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/item_type_folder_40x40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/level_change.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/item_type_folder.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/treeline_update.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/search.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/treeline_forward.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/treeline_backward.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowser/icons/search_cancel.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/folder_export.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/imageres_4.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/named_shape_40x40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/attribute_40x40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/label_folder_16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/label_folder_expand_20x20.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/named_shape.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/label_folder_20x20.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/label_folder_expand_16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/export_shape.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/label_folder_40x40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/attribute.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/label_folder_expand_40x40.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/imageres_5.ico",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/DFBrowserPane/icons/label.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TreeModel/icons/item_visible.png",
        "/tmp/vanessa/spack-stage/spack-stage-opencascade-7.4.0p1-lo3kjpjqp3wv2poaghvmbrrzlsh2fbdm/spack-src/tools/TreeModel/icons/item_invisible.png"
    ],
    "total_files": 16274
}