{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-libxsmm-1.4.2-i37fnlj2a3eq2nr2uhxqfindibfqcjli/spack-src/src/libxsmm_gemm_extomp.c": "/******************************************************************************\n** Copyright (c) 2016, Intel Corporation                                     **\n** All rights reserved.                                                      **\n**                                                                           **\n** Redistribution and use in source and binary forms, with or without        **\n** modification, are permitted provided that the following conditions        **\n** are met:                                                                  **\n** 1. Redistributions of source code must retain the above copyright         **\n**    notice, this list of conditions and the following disclaimer.          **\n** 2. Redistributions in binary form must reproduce the above copyright      **\n**    notice, this list of conditions and the following disclaimer in the    **\n**    documentation and/or other materials provided with the distribution.   **\n** 3. Neither the name of the copyright holder nor the names of its          **\n**    contributors may be used to endorse or promote products derived        **\n**    from this software without specific prior written permission.          **\n**                                                                           **\n** THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS       **\n** \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT         **\n** LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR     **\n** A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT      **\n** HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,    **\n** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED  **\n** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR    **\n** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF    **\n** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING      **\n** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS        **\n** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.              **\n******************************************************************************/\n/* Hans Pabst (Intel Corp.)\n******************************************************************************/\n#include \"libxsmm_gemm_ext.h\"\n\n#if defined(LIBXSMM_OFFLOAD_TARGET)\n# pragma offload_attribute(push,target(LIBXSMM_OFFLOAD_TARGET))\n#endif\n#include <math.h>\n#if defined(_OPENMP)\n# include <omp.h>\n#endif\n#if defined(LIBXSMM_GEMM_EXTWRAP) && !defined(__STATIC)\n# include <stdlib.h>\n# include <dlfcn.h>\n#endif\n#if defined(LIBXSMM_OFFLOAD_TARGET)\n# pragma offload_attribute(pop)\n#endif\n\n#define LIBXSMM_GEMM_EXTOMP_SUFFICIENT_SIZE(M, N, K) (((LIBXSMM_MAX_M < (M)) || (LIBXSMM_MAX_N < (N)) || (LIBXSMM_MAX_K < (K))) ? 1 : 0)\n#if defined(_OPENMP)\n# if !defined(LIBXSMM_GEMM_EXTOMP_TASKS) && (200805 <= _OPENMP) /*OpenMP 3.0*/\n#   define LIBXSMM_GEMM_EXTOMP_TASKS\n# endif\n# define LIBXSMM_GEMM_EXTOMP_MIN_NTASKS(NT) LIBXSMM_MAX(7/*arbitrary factor*/ * omp_get_num_threads() / (NT), 1)\n# define LIBXSMM_GEMM_EXTOMP_OVERHEAD(NT) (/*arbitrary factor*/NT)\n# define LIBXSMM_GEMM_EXTOMP_FOR_INIT\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN LIBXSMM_PRAGMA(omp for schedule(dynamic) LIBXSMM_OPENMP_COLLAPSE(LIBXSMM_GEMM_EXTOMP_COLLAPSE))\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN_PARALLEL LIBXSMM_PRAGMA(omp parallel for schedule(dynamic) LIBXSMM_OPENMP_COLLAPSE(LIBXSMM_GEMM_EXTOMP_COLLAPSE))\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BODY(...)\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_END\n#else\n# define LIBXSMM_GEMM_EXTOMP_MIN_NTASKS(NT) 1\n# define LIBXSMM_GEMM_EXTOMP_OVERHEAD(NT) 0\n# define LIBXSMM_GEMM_EXTOMP_FOR_INIT\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN_PARALLEL\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BODY(...)\n# define LIBXSMM_GEMM_EXTOMP_FOR_LOOP_END\n#endif\n\n#if defined(LIBXSMM_GEMM_EXTOMP_TASKS)\n# define LIBXSMM_GEMM_EXTOMP_COLLAPSE 2\n# define LIBXSMM_GEMM_EXTOMP_TSK_INIT LIBXSMM_PRAGMA(omp single nowait)\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN_PARALLEL LIBXSMM_PRAGMA(omp parallel) LIBXSMM_PRAGMA(omp single nowait)\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BODY(...) LIBXSMM_PRAGMA(omp task firstprivate(__VA_ARGS__))\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_END LIBXSMM_PRAGMA(omp taskwait)\n#else\n# define LIBXSMM_GEMM_EXTOMP_COLLAPSE 2\n# define LIBXSMM_GEMM_EXTOMP_TSK_INIT LIBXSMM_GEMM_EXTOMP_FOR_INIT\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN_PARALLEL LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN_PARALLEL\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BODY LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BODY\n# define LIBXSMM_GEMM_EXTOMP_TSK_LOOP_END LIBXSMM_GEMM_EXTOMP_FOR_LOOP_END\n#endif\n\n#define LIBXSMM_GEMM_EXTOMP_KERNEL(REAL, FLAGS, POS_H, POS_I, TILE_M, TILE_N, TILE_K, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC) { \\\n  const libxsmm_blasint mm = LIBXSMM_MIN(TILE_M, (M) - (POS_H)), nn = LIBXSMM_MIN(TILE_N, (N) - (POS_I)), ic = (POS_I) * (LDC) + (POS_H); \\\n  libxsmm_blasint j = 0, j_next = TILE_K; \\\n  if (((TILE_M) == mm) && ((TILE_N) == nn)) { \\\n    for (; j < max_j; j = j_next) { \\\n      LIBXSMM_MMCALL_PRF(xmm.LIBXSMM_TPREFIX(REAL,mm), \\\n        (A) + (POS_H) + (LDA) * j, \\\n        (B) + (POS_I) * (LDB) + j, \\\n        (C) + ic, \\\n        (A) + (POS_H) + (LDA) * j_next, \\\n        (B) + (POS_I) * (LDB) + j_next, \\\n        (C) + ic); \\\n      j_next = j + (TILE_K); \\\n    } \\\n  } \\\n  for (; j < (K); j = j_next) { /* remainder */ \\\n    LIBXSMM_XGEMM(REAL, libxsmm_blasint, FLAGS, mm, nn, LIBXSMM_MIN(TILE_K, (K) - j), \\\n      ALPHA, (A) + j * (LDA) + (POS_H), LDA, (B) + (POS_I) * (LDB) + j, LDB, BETA, (C) + ic, LDC); \\\n    j_next = j + (TILE_K); \\\n  } \\\n}\n\n#define LIBXSMM_GEMM_EXTOMP_XGEMM(INIT, LOOP_BEGIN, LOOP_BODY, LOOP_END, \\\n  REAL, FLAGS, NT, TILE_M, TILE_N, TILE_K, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC) INIT \\\n{ \\\n  const signed char scalpha = (signed char)(ALPHA), scbeta = (signed char)(BETA); \\\n  const int sufficient_size = LIBXSMM_GEMM_EXTOMP_SUFFICIENT_SIZE(M, N, K); \\\n  libxsmm_blasint tile_m = 0, tile_n = 0, tile_k = 0, num_m = 0, num_n = 0, num_k = 0; \\\n  libxsmm_xmmfunction xmm = { 0 }; \\\n  if (0 != sufficient_size \\\n    /*TODO: not supported*/&& 0 == ((FLAGS) & (LIBXSMM_GEMM_FLAG_TRANS_A | LIBXSMM_GEMM_FLAG_TRANS_B)) \\\n    /*TODO: not supported*/&& 1 == scalpha && (1 == scbeta || 0 == scbeta)) \\\n  { \\\n    tile_m = LIBXSMM_MAX(TILE_M, 2); tile_n = LIBXSMM_MAX(TILE_N, 2); tile_k = LIBXSMM_MAX(TILE_K, 2); \\\n    num_m = ((M) + tile_m - 1) / tile_m; num_n = ((N) + tile_n - 1) / tile_n; num_k = ((K) + tile_k - 1) / tile_k; \\\n    { /* opening scope for additional variable declarations */ \\\n      const libxsmm_blasint num_t = (LIBXSMM_GEMM_EXTOMP_OVERHEAD(NT) <= num_k && 1 < LIBXSMM_GEMM_EXTOMP_COLLAPSE) \\\n        ? (num_m * num_n) : (num_n <= num_m ? num_m : num_n); \\\n      const libxsmm_blasint min_ntasks = LIBXSMM_GEMM_EXTOMP_MIN_NTASKS(NT); \\\n      libxsmm_gemm_descriptor desc; \\\n      if (min_ntasks < num_t) { /* ensure enough parallel slack */ \\\n        tile_m = (M) / num_m; tile_n = (N) / num_n; \\\n      } \\\n      else if ((LIBXSMM_GEMM_EXTOMP_OVERHEAD(NT)) <= num_k) { \\\n        const double ratio = sqrt(((double)min_ntasks) / num_t); \\\n        tile_n = (int)(num_n * ratio /*+ 0.5*/); \\\n        tile_m = (min_ntasks + tile_n - 1) / tile_n; \\\n      } \\\n      else if (num_n <= num_m) { \\\n        tile_m = ((M) + min_ntasks - 1) / min_ntasks; \\\n      } \\\n      else { \\\n        tile_n = ((N) + min_ntasks - 1) / min_ntasks; \\\n      } \\\n      { /* adjust for non-square operand shapes */ \\\n        float rm = 1.f, rn = ((float)(N)) / M, rk = ((float)(K)) / M; \\\n        if (1.f < rn) { rm /= rn; rn = 1.f; rk /= rn; } \\\n        if (1.f < rk) { rm /= rk; rn /= rk; rk = 1.f; } \\\n        tile_m = LIBXSMM_MIN(LIBXSMM_MAX((libxsmm_blasint)(1 << LIBXSMM_LOG2(tile_m * rm /*+ 0.5*/)), 8), M); \\\n        tile_n = LIBXSMM_MIN(LIBXSMM_MAX((libxsmm_blasint)(1 << LIBXSMM_LOG2(tile_n * rn /*+ 0.5*/)), 8), N); \\\n        tile_k = LIBXSMM_MIN(LIBXSMM_MAX((libxsmm_blasint)(1 << LIBXSMM_LOG2(tile_k * rk /*+ 0.5*/)), 8), K); \\\n      } \\\n      LIBXSMM_GEMM_DESCRIPTOR(desc, LIBXSMM_ALIGNMENT, FLAGS, tile_m, tile_n, tile_k, \\\n        LDA, LDB, LDC, scalpha, scbeta, libxsmm_internal_gemm_prefetch); \\\n      xmm = libxsmm_xmmdispatch(&desc); \\\n    } \\\n  } \\\n  if (0 != xmm.dmm) { \\\n    const libxsmm_blasint max_j = ((K) / tile_k) * tile_k; \\\n    libxsmm_blasint h = 0, i = 0; \\\n    if ((LIBXSMM_GEMM_EXTOMP_OVERHEAD(NT)) <= num_k) { /* amortize overhead */ \\\n      LOOP_BEGIN \\\n      for (h = 0; h < (M); h += tile_m) { \\\n        for (i = 0; i < (N); i += tile_n) { \\\n          LOOP_BODY(h, i) \\\n          LIBXSMM_GEMM_EXTOMP_KERNEL(REAL, FLAGS, h, i, tile_m, tile_n, tile_k, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC); \\\n        } \\\n      } \\\n      LOOP_END \\\n    } \\\n    else if (num_n <= num_m) { \\\n      LOOP_BEGIN \\\n      for (h = 0; h < (M); h += tile_m) { \\\n        LOOP_BODY(h) \\\n        for (i = 0; i < (N); i += tile_n) { \\\n          LIBXSMM_GEMM_EXTOMP_KERNEL(REAL, FLAGS, h, i, tile_m, tile_n, tile_k, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC); \\\n        } \\\n      } \\\n      LOOP_END \\\n    } \\\n    else { \\\n      LOOP_BEGIN \\\n      for (i = 0; i < (N); i += tile_n) { \\\n        LOOP_BODY(i) \\\n        for (h = 0; h < (M); h += tile_m) { \\\n          LIBXSMM_GEMM_EXTOMP_KERNEL(REAL, FLAGS, h, i, tile_m, tile_n, tile_k, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC); \\\n        } \\\n      } \\\n      LOOP_END \\\n    } \\\n  } \\\n  else if (0 != sufficient_size) { /* BLAS fallback */ \\\n    LIBXSMM_BLAS_XGEMM(REAL, FLAGS, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC); \\\n  } \\\n  else { /* small problem size */ \\\n    LIBXSMM_XGEMM(REAL, libxsmm_blasint, FLAGS, M, N, K, ALPHA, A, LDA, B, LDB, BETA, C, LDC); \\\n  } \\\n}\n\n\n#if defined(LIBXSMM_GEMM_EXTWRAP) && !defined(__STATIC)\n\n/* implementation variant for non-static linkage; overrides weak libxsmm_gemm_init in libxsmm_gemm.c */\nLIBXSMM_EXTERN_C LIBXSMM_RETARGETABLE int libxsmm_gemm_init(int archid, int prefetch)\n{\n  union { const void* pv; libxsmm_sgemm_function pf; } internal_sgemm = { NULL };\n  union { const void* pv; libxsmm_dgemm_function pf; } internal_dgemm = { NULL };\n  internal_sgemm.pv = dlsym(RTLD_NEXT, LIBXSMM_STRINGIFY(LIBXSMM_FSYMBOL(sgemm)));\n  internal_dgemm.pv = dlsym(RTLD_NEXT, LIBXSMM_STRINGIFY(LIBXSMM_FSYMBOL(dgemm)));\n\n  /* internal pre-initialization step */\n  libxsmm_gemm_configure(archid, prefetch, internal_sgemm.pf, internal_dgemm.pf);\n\n#if defined(LIBXSMM_GEMM_EXTOMP_TASKS)\n  { /* consider user input about using (OpenMP-)tasks; this code must be here\n    * because maybe only this translation unit is compiled with OpenMP support\n    */\n    const char *const env_tasks = getenv(\"LIBXSMM_TASKS\");\n    if (0 != env_tasks && 0 != *env_tasks) {\n      libxsmm_internal_gemm_tasks = atoi(env_tasks);\n    }\n  }\n#endif\n\n  return (NULL != libxsmm_internal_sgemm\n       && NULL != libxsmm_internal_dgemm)\n    ? EXIT_SUCCESS\n    : EXIT_FAILURE;\n}\n\n\nLIBXSMM_EXTERN_C LIBXSMM_RETARGETABLE void libxsmm_gemm_finalize(void)\n{\n}\n\n#endif /*defined(LIBXSMM_GEMM_EXTWRAP) && !defined(__STATIC)*/\n\n\nLIBXSMM_EXTERN_C LIBXSMM_RETARGETABLE void libxsmm_omp_sgemm(const char* transa, const char* transb,\n  const libxsmm_blasint* m, const libxsmm_blasint* n, const libxsmm_blasint* k,\n  const float* alpha, const float* a, const libxsmm_blasint* lda,\n  const float* b, const libxsmm_blasint* ldb,\n  const float* beta, float* c, const libxsmm_blasint* ldc)\n{\n  LIBXSMM_GEMM_DECLARE_FLAGS(flags, transa, transb, m, n, k, a, b, c);\n  if (2 <= libxsmm_internal_gemm_omp) { /* enable internal parallelization */\n    if (0 == libxsmm_internal_gemm_tasks) {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_FOR_INIT, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN_PARALLEL,\n        LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_END,\n        float, flags | LIBXSMM_GEMM_FLAG_F32PREC, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[1/*SP*/][0/*M*/],\n        libxsmm_internal_tile_size[1/*SP*/][1/*N*/],\n        libxsmm_internal_tile_size[1/*SP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((float)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((float)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n    else {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_TSK_INIT, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN_PARALLEL,\n        LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_END,\n        float, flags | LIBXSMM_GEMM_FLAG_F32PREC, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[1/*SP*/][0/*M*/],\n        libxsmm_internal_tile_size[1/*SP*/][1/*N*/],\n        libxsmm_internal_tile_size[1/*SP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((float)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((float)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n  }\n  else { /* default: potentially sequential or externally parallelized */\n    if (0 == libxsmm_internal_gemm_tasks) {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_FOR_INIT, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN,\n        LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_END,\n        float, flags | LIBXSMM_GEMM_FLAG_F32PREC, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[1/*SP*/][0/*M*/],\n        libxsmm_internal_tile_size[1/*SP*/][1/*N*/],\n        libxsmm_internal_tile_size[1/*SP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((float)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((float)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n    else {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_TSK_INIT, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN,\n        LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_END,\n        float, flags | LIBXSMM_GEMM_FLAG_F32PREC, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[1/*SP*/][0/*M*/],\n        libxsmm_internal_tile_size[1/*SP*/][1/*N*/],\n        libxsmm_internal_tile_size[1/*SP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((float)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((float)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n  }\n}\n\n\nLIBXSMM_EXTERN_C LIBXSMM_RETARGETABLE void libxsmm_omp_dgemm(const char* transa, const char* transb,\n  const libxsmm_blasint* m, const libxsmm_blasint* n, const libxsmm_blasint* k,\n  const double* alpha, const double* a, const libxsmm_blasint* lda,\n  const double* b, const libxsmm_blasint* ldb,\n  const double* beta, double* c, const libxsmm_blasint* ldc)\n{\n  LIBXSMM_GEMM_DECLARE_FLAGS(flags, transa, transb, m, n, k, a, b, c);\n  if (2 <= libxsmm_internal_gemm_omp) { /* enable internal parallelization */\n    if (0 == libxsmm_internal_gemm_tasks) {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_FOR_INIT, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN_PARALLEL,\n        LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_END,\n        double, flags, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[0/*DP*/][0/*M*/],\n        libxsmm_internal_tile_size[0/*DP*/][1/*N*/],\n        libxsmm_internal_tile_size[0/*DP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((double)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((double)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n    else {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_TSK_INIT, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN_PARALLEL,\n        LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_END,\n        double, flags, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[0/*DP*/][0/*M*/],\n        libxsmm_internal_tile_size[0/*DP*/][1/*N*/],\n        libxsmm_internal_tile_size[0/*DP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((double)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((double)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n  }\n  else { /* default: potentially sequential or externally parallelized */\n    if (0 == libxsmm_internal_gemm_tasks) {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_FOR_INIT, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BEGIN,\n        LIBXSMM_GEMM_EXTOMP_FOR_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_FOR_LOOP_END,\n        double, flags, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[0/*DP*/][0/*M*/],\n        libxsmm_internal_tile_size[0/*DP*/][1/*N*/],\n        libxsmm_internal_tile_size[0/*DP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((double)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((double)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n    else {\n      LIBXSMM_GEMM_EXTOMP_XGEMM(LIBXSMM_GEMM_EXTOMP_TSK_INIT, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BEGIN,\n        LIBXSMM_GEMM_EXTOMP_TSK_LOOP_BODY, LIBXSMM_GEMM_EXTOMP_TSK_LOOP_END,\n        double, flags, libxsmm_internal_gemm_nthreads_per_core,\n        libxsmm_internal_tile_size[0/*DP*/][0/*M*/],\n        libxsmm_internal_tile_size[0/*DP*/][1/*N*/],\n        libxsmm_internal_tile_size[0/*DP*/][2/*K*/], *m, *n, *k,\n        0 != alpha ? *alpha : ((double)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((double)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    }\n  }\n}\n\n\n#if defined(LIBXSMM_GEMM_EXTWRAP)\n\nLIBXSMM_EXTERN_C LIBXSMM_RETARGETABLE void LIBXSMM_GEMM_EXTWRAP_SGEMM(\n  const char* transa, const char* transb,\n  const libxsmm_blasint* m, const libxsmm_blasint* n, const libxsmm_blasint* k,\n  const float* alpha, const float* a, const libxsmm_blasint* lda,\n  const float* b, const libxsmm_blasint* ldb,\n  const float* beta, float* c, const libxsmm_blasint* ldc)\n{\n  assert(LIBXSMM_GEMM_EXTWRAP_SGEMM != libxsmm_internal_sgemm);\n  switch (libxsmm_internal_gemm) {\n    case 0: { /* below-THRESHOLD xGEMM */\n      LIBXSMM_GEMM_DECLARE_FLAGS(flags, transa, transb, m, n, k, a, b, c);\n      LIBXSMM_XGEMM(float, libxsmm_blasint, flags, *m, *n, *k,\n        0 != alpha ? *alpha : ((float)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((float)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    } break;\n    default: { /* tiled xGEMM */\n      libxsmm_omp_sgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);\n    }\n  }\n}\n\n\nLIBXSMM_EXTERN_C LIBXSMM_RETARGETABLE void LIBXSMM_GEMM_EXTWRAP_DGEMM(\n  const char* transa, const char* transb,\n  const libxsmm_blasint* m, const libxsmm_blasint* n, const libxsmm_blasint* k,\n  const double* alpha, const double* a, const libxsmm_blasint* lda,\n  const double* b, const libxsmm_blasint* ldb,\n  const double* beta, double* c, const libxsmm_blasint* ldc)\n{\n  assert(LIBXSMM_GEMM_EXTWRAP_DGEMM != libxsmm_internal_dgemm);\n  switch (libxsmm_internal_gemm) {\n    case 0: { /* below-THRESHOLD xGEMM */\n      LIBXSMM_GEMM_DECLARE_FLAGS(flags, transa, transb, m, n, k, a, b, c);\n      LIBXSMM_XGEMM(double, libxsmm_blasint, flags, *m, *n, *k,\n        0 != alpha ? *alpha : ((double)LIBXSMM_ALPHA),\n        a, *(lda ? lda : LIBXSMM_LD(m, k)), b, *(ldb ? ldb : LIBXSMM_LD(k, n)),\n        0 != beta ? *beta : ((double)LIBXSMM_BETA),\n        c, *(ldc ? ldc : LIBXSMM_LD(m, n)));\n    } break;\n    default: { /* tiled xGEMM */\n      libxsmm_omp_dgemm(transa, transb, m, n, k, alpha, a, lda, b, ldb, beta, c, ldc);\n    }\n  }\n}\n\n#endif /*defined(LIBXSMM_GEMM_EXTWRAP)*/\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-libxsmm-1.4.2-i37fnlj2a3eq2nr2uhxqfindibfqcjli/spack-src/documentation/cp2k.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-libxsmm-1.4.2-i37fnlj2a3eq2nr2uhxqfindibfqcjli/spack-src/documentation/libxsmm.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-libxsmm-1.4.2-i37fnlj2a3eq2nr2uhxqfindibfqcjli/spack-src/samples/nek/README.md"
    ],
    "total_files": 147
}