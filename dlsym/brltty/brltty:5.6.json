{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Programs/dynld_dlfcn.c": "/*\n * BRLTTY - A background process providing access to the console screen (when in\n *          text mode) for a blind person using a refreshable braille display.\n *\n * Copyright (C) 1995-2018 by The BRLTTY Developers.\n *\n * BRLTTY comes with ABSOLUTELY NO WARRANTY.\n *\n * This is free software, placed under the terms of the\n * GNU Lesser General Public License, as published by the Free Software\n * Foundation; either version 2.1 of the License, or (at your option) any\n * later version. Please see the file LICENSE-LGPL for details.\n *\n * Web Page: http://brltty.com/\n *\n * This software is maintained by Dave Mielke <dave@mielke.cc>.\n */\n\n#include \"prologue.h\"\n\n#include <dlfcn.h>\n\n#ifdef __MSDOS__\n#include <debug/syms.h>\n#include \"program.h\"\n#endif /* __MSDOS__ */\n\n#include \"log.h\"\n#include \"dynld.h\"\n\nstatic void\nclearError (void) {\n  dlerror();\n}\n\nstatic int\nlogError (void) {\n  const char *error = dlerror();\n  if (!error) return 1;\n\n  logMessage(LOG_ERR, \"%s\", error);\n  return 0;\n}\n\nstatic inline int\ngetSharedObjectLoadFlags (void) {\n  int flags = 0;\n\n#ifdef DL_LAZY\n  flags |= DL_LAZY;\n#else /* DL_LAZY */\n  flags |= RTLD_LAZY | RTLD_GLOBAL;\n#endif /* DL_LAZY */\n\n  return flags;\n}\n\nvoid *\nloadSharedObject (const char *path) {\n  void *object;\n\n  clearError();\n  object = dlopen(path, getSharedObjectLoadFlags());\n  if (!object) logError();\n  return object;\n}\n\nvoid \nunloadSharedObject (void *object) {\n  clearError();\n  if (dlclose(object)) logError();\n}\n\nint \nfindSharedSymbol (void *object, const char *symbol, void *pointerAddress) {\n  void **address = pointerAddress;\n\n  clearError(); /* clear any previous error condition */\n  *address = dlsym(object, symbol);\n  return logError();\n}\n\nconst char *\ngetSharedSymbolName (void *address, ptrdiff_t *offset) {\n#if defined(__MSDOS__)\n  {\n    static int symsInitialized = 0;\n\n    if (!symsInitialized) {\n      syms_init((char *)programPath);\n      symsInitialized = 1;\n    }\n  }\n\n  {\n    unsigned long delta;\n    char *name = syms_val2name((unsigned long)address, &delta);\n\n    if (name) {\n      if (offset) *offset = delta;\n      return name;\n    }\n  }\n\n#elif defined(__linux__) || defined(__ANDROID__)\n  Dl_info info;\n\n  if (dladdr(address, &info)) {\n    if (offset) *offset = address - info.dli_saddr;\n    return info.dli_sname;\n  }\n\n#endif /* get symbol name */\n\n  return NULL;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Programs/brltty_jni.c": "/*\n * BRLTTY - A background process providing access to the console screen (when in\n *          text mode) for a blind person using a refreshable braille display.\n *\n * Copyright (C) 1995-2018 by The BRLTTY Developers.\n *\n * BRLTTY comes with ABSOLUTELY NO WARRANTY.\n *\n * This is free software, placed under the terms of the\n * GNU Lesser General Public License, as published by the Free Software\n * Foundation; either version 2.1 of the License, or (at your option) any\n * later version. Please see the file LICENSE-LGPL for details.\n *\n * Web Page: http://brltty.com/\n *\n * This software is maintained by Dave Mielke <dave@mielke.cc>.\n */\n\n#include \"prologue.h\"\n\n#include <jni.h>\n#include <stdio.h>\n#include <stdarg.h>\n#include <string.h>\n#include <errno.h>\n#include <dlfcn.h>\n\n#include \"embed.h\"\n#include \"system_java.h\"\n\n#if defined(__ANDROID__)\n#include <android/log.h>\n#define LOG(...) __android_log_print(ANDROID_LOG_DEBUG, PACKAGE_TARNAME, __VA_ARGS__)\n\n#else /* LOG() */\n#warning logging not supported\n#define LOG(...)\n#endif /* LOG() */\n\nSYMBOL_POINTER(brlttyConstruct);\nSYMBOL_POINTER(setJavaClassLoader);\nSYMBOL_POINTER(brlttyDestruct);\n\nSYMBOL_POINTER(brlttyEnableInterrupt);\nSYMBOL_POINTER(brlttyDisableInterrupt);\n\nSYMBOL_POINTER(brlttyInterrupt);\nSYMBOL_POINTER(brlttyWait);\n\nSYMBOL_POINTER(changeLogLevel);\nSYMBOL_POINTER(changeLogCategories);\n\nSYMBOL_POINTER(changeTextTable);\nSYMBOL_POINTER(changeAttributesTable);\nSYMBOL_POINTER(changeContractionTable);\nSYMBOL_POINTER(changeKeyboardTable);\n\nSYMBOL_POINTER(restartBrailleDriver);\nSYMBOL_POINTER(changeBrailleDriver);\nSYMBOL_POINTER(changeBrailleParameters);\nSYMBOL_POINTER(changeBrailleDevice);\n\nSYMBOL_POINTER(restartSpeechDriver);\nSYMBOL_POINTER(changeSpeechDriver);\nSYMBOL_POINTER(changeSpeechParameters);\n\nSYMBOL_POINTER(restartScreenDriver);\nSYMBOL_POINTER(changeScreenDriver);\nSYMBOL_POINTER(changeScreenParameters);\n\ntypedef struct {\n  const char *name;\n  void *pointer;\n} SymbolEntry;\n\n#define BEGIN_SYMBOL_TABLE static const SymbolEntry symbolTable[] = {\n#define END_SYMBOL_TABLE {.name=NULL} };\n#define SYMBOL_ENTRY(symbol) {.name=#symbol, .pointer=&symbol##_p}\n\nBEGIN_SYMBOL_TABLE\n  SYMBOL_ENTRY(brlttyConstruct),\n  SYMBOL_ENTRY(setJavaClassLoader),\n  SYMBOL_ENTRY(brlttyDestruct),\n\n  SYMBOL_ENTRY(brlttyEnableInterrupt),\n  SYMBOL_ENTRY(brlttyDisableInterrupt),\n\n  SYMBOL_ENTRY(brlttyInterrupt),\n  SYMBOL_ENTRY(brlttyWait),\n\n  SYMBOL_ENTRY(changeLogLevel),\n  SYMBOL_ENTRY(changeLogCategories),\n\n  SYMBOL_ENTRY(changeTextTable),\n  SYMBOL_ENTRY(changeAttributesTable),\n  SYMBOL_ENTRY(changeContractionTable),\n  SYMBOL_ENTRY(changeKeyboardTable),\n\n  SYMBOL_ENTRY(restartBrailleDriver),\n  SYMBOL_ENTRY(changeBrailleDriver),\n  SYMBOL_ENTRY(changeBrailleParameters),\n  SYMBOL_ENTRY(changeBrailleDevice),\n\n  SYMBOL_ENTRY(restartSpeechDriver),\n  SYMBOL_ENTRY(changeSpeechDriver),\n  SYMBOL_ENTRY(changeSpeechParameters),\n\n  SYMBOL_ENTRY(restartScreenDriver),\n  SYMBOL_ENTRY(changeScreenDriver),\n  SYMBOL_ENTRY(changeScreenParameters),\nEND_SYMBOL_TABLE\n\nstatic void *coreHandle = NULL;\n\nstatic jobject jArgumentArray = NULL;\nstatic const char **cArgumentArray = NULL;\nstatic int cArgumentCount;\n\nstatic void reportProblem (\n  JNIEnv *env, const char *throwable,\n  const char *format, ...\n) PRINTF(3, 4);\n\nstatic void\nreportProblem (\n  JNIEnv *env, const char *throwable,\n  const char *format, ...\n) {\n  char message[0X100];\n\n  {\n    va_list arguments;\n\n    va_start(arguments, format);\n    vsnprintf(message, sizeof(message), format, arguments);\n    va_end(arguments);\n  }\n\n  if (0) {\n    FILE *stream = stderr;\n\n    fprintf(stream, \"%s\\n\", message);\n    fflush(stream);\n  }\n\n  {\n    jclass object = (*env)->FindClass(env, throwable);\n\n    if (object) {\n      (*env)->ThrowNew(env, object, message);\n      (*env)->DeleteLocalRef(env, object);\n    }\n  }\n}\n\nstatic void\nreportOutOfMemory (JNIEnv *env, const char *description) {\n  reportProblem(env, \"java/lang/OutOfMemoryError\", \"cannot allocate %s\", description);\n}\n\nstatic int\nprepareProgramArguments (JNIEnv *env, jstring arguments) {\n  jsize count = (*env)->GetArrayLength(env, arguments);\n\n  if ((jArgumentArray = (*env)->NewGlobalRef(env, arguments))) {\n    if ((cArgumentArray = malloc((count + 2) * sizeof(*cArgumentArray)))) {\n      cArgumentArray[0] = PACKAGE_TARNAME;\n      cArgumentArray[count+1] = NULL;\n\n      {\n        unsigned int i;\n\n        for (i=1; i<=count; i+=1) cArgumentArray[i] = NULL;\n\n        for (i=1; i<=count; i+=1) {\n          jstring jArgument = (*env)->GetObjectArrayElement(env, arguments, i-1);\n          jboolean isCopy;\n          const char *cArgument = (*env)->GetStringUTFChars(env, jArgument, &isCopy);\n\n          (*env)->DeleteLocalRef(env, jArgument);\n          jArgument = NULL;\n\n          if (!cArgument) {\n            reportOutOfMemory(env, \"C argument string\");\n            break;\n          }\n\n          cArgumentArray[i] = cArgument;\n        }\n\n        if (i > count) {\n          cArgumentCount = count + 1;\n          return 1;\n        }\n      }\n    } else {\n      reportOutOfMemory(env, \"C argument array\");\n    }\n  } else {\n    reportOutOfMemory(env, \"Java arguments array global reference\");\n  }\n\n  return 0;\n}\n\nstatic int\nloadCoreLibrary (JNIEnv *env) {\n  if (coreHandle) return 1;\n\n  if ((coreHandle = dlopen(\"libbrltty_core.so\", RTLD_NOW | RTLD_GLOBAL))) {\n    int allFound = 1;\n    const SymbolEntry *symbol = symbolTable;\n\n    while (symbol->name) {\n      const void **pointer = symbol->pointer;\n\n      if ((*pointer = dlsym(coreHandle, symbol->name))) {\n        LOG(\"core symbol: %s -> %p\", symbol->name, *pointer);\n      } else {\n        LOG(\"core symbol not found: %s\", symbol->name);\n        allFound = 0;\n      }\n\n      symbol += 1;\n    }\n\n    if (allFound) return 1;\n  }\n\n  reportProblem(env, \"java/lang/UnsatisfiedLinkError\", \"%s\", dlerror());\n  return 0;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreConstruct, jint,\n  jobjectArray arguments, jobject classLoader\n) {\n  if (prepareProgramArguments(env, arguments)) {\n    if (loadCoreLibrary(env)) {\n      setJavaClassLoader_p(env, classLoader);\n      return brlttyConstruct_p(cArgumentCount, (char **)cArgumentArray);\n    }\n  }\n\n  return PROG_EXIT_FATAL;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreDestruct, jboolean\n) {\n  jboolean result = brlttyDestruct_p()? JNI_TRUE: JNI_FALSE;\n\n/*\n  {\n    const SymbolEntry *symbol = symbolTable;\n\n    while (symbol->name) {\n      const void **pointer = symbol->pointer;\n      *pointer = NULL;\n      symbol += 1;\n    }\n  }\n\n  if (coreHandle) {\n    dlclose(coreHandle);\n    coreHandle = NULL;\n  }\n*/\n\n  if (jArgumentArray) {\n    if (cArgumentArray) {\n      unsigned int i = 0;\n\n      while (cArgumentArray[++i]) {\n        jstring jArgument = (*env)->GetObjectArrayElement(env, jArgumentArray, i-1);\n        (*env)->ReleaseStringUTFChars(env, jArgument, cArgumentArray[i]);\n        (*env)->DeleteLocalRef(env, jArgument);\n        jArgument = NULL;\n      }\n\n      free(cArgumentArray);\n      cArgumentArray = NULL;\n    }\n\n    (*env)->DeleteGlobalRef(env, jArgumentArray);\n    jArgumentArray = NULL;\n  }\n\n  return result;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreEnableInterrupt, jboolean\n) {\n  return brlttyEnableInterrupt_p()? JNI_TRUE: JNI_FALSE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreDisableInterrupt, jboolean\n) {\n  return brlttyDisableInterrupt_p()? JNI_TRUE: JNI_FALSE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreInterrupt, jboolean,\n  jboolean stop\n) {\n  return brlttyInterrupt_p((stop != JNI_FALSE)? WAIT_STOP: WAIT_CONTINUE)? JNI_TRUE: JNI_FALSE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, coreWait, jboolean,\n  jint duration\n) {\n  return (brlttyWait_p(duration) != WAIT_STOP)? JNI_TRUE: JNI_FALSE;\n}\n\nstatic jboolean\nchangeStringValue (JNIEnv *env, int (*change) (const char *cValue), jstring jValue) {\n  jboolean result = JNI_FALSE;\n  const char *cValue = (*env)->GetStringUTFChars(env, jValue, NULL);\n\n  if (cValue) {\n    if (change(cValue)) result = JNI_TRUE;\n    (*env)->ReleaseStringUTFChars(env, jValue, cValue);\n  } else {\n    reportOutOfMemory(env, \"C new value string\");\n  }\n\n  return result;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeLogLevel, jboolean,\n  jstring level\n) {\n  return changeStringValue(env, changeLogLevel_p, level);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeLogCategories, jboolean,\n  jstring categories\n) {\n  return changeStringValue(env, changeLogCategories_p, categories);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeTextTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeTextTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeAttributesTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeAttributesTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeContractionTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeContractionTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeKeyboardTable, jboolean,\n  jstring name\n) {\n  return changeStringValue(env, changeKeyboardTable_p, name);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, restartBrailleDriver, jboolean\n) {\n  restartBrailleDriver_p();\n  return JNI_TRUE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeBrailleDriver, jboolean,\n  jstring driver\n) {\n  return changeStringValue(env, changeBrailleDriver_p, driver);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeBrailleParameters, jboolean,\n  jstring parameters\n) {\n  return changeStringValue(env, changeBrailleParameters_p, parameters);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeBrailleDevice, jboolean,\n  jstring device\n) {\n  return changeStringValue(env, changeBrailleDevice_p, device);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, restartSpeechDriver, jboolean\n) {\n  restartSpeechDriver_p();\n  return JNI_TRUE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeSpeechDriver, jboolean,\n  jstring driver\n) {\n  return changeStringValue(env, changeSpeechDriver_p, driver);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeSpeechParameters, jboolean,\n  jstring parameters\n) {\n  return changeStringValue(env, changeSpeechParameters_p, parameters);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, restartScreenDriver, jboolean\n) {\n  restartScreenDriver_p();\n  return JNI_TRUE;\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeScreenDriver, jboolean,\n  jstring driver\n) {\n  return changeStringValue(env, changeScreenDriver_p, driver);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, changeScreenParameters, jboolean,\n  jstring parameters\n) {\n  return changeStringValue(env, changeScreenParameters_p, parameters);\n}\n\nJAVA_METHOD (\n  org_a11y_brltty_core_CoreWrapper, setEnvironmentVariable, jboolean,\n  jstring jName, jstring jValue\n) {\n  jboolean isCopy;\n  const char *cName = (*env)->GetStringUTFChars(env, jName, &isCopy);\n  const char *cValue = (*env)->GetStringUTFChars(env, jValue, &isCopy);\n\n  int cResult = setenv(cName, cValue, 1) != -1;\n  jboolean jResult = cResult? JNI_TRUE: JNI_FALSE;\n\n  if (cResult) {\n    LOG(\"environment variable set: %s: %s\", cName, cValue);\n  } else {\n    LOG(\"environment variable not set: %s: %s\", cName, strerror(errno));\n  }\n\n  (*env)->ReleaseStringUTFChars(env, jName, cName);\n  (*env)->ReleaseStringUTFChars(env, jValue, cValue);\n  return jResult;\n}\n\nJNIEXPORT jint\nJNI_OnLoad (JavaVM *vm, void *reserved) {\n  JNIEnv *env;\n\n  if ((*vm)->GetEnv(vm, (void **)&env, JAVA_JNI_VERSION) == JNI_OK) {\n    loadCoreLibrary(env);\n  }\n\n  return JAVA_JNI_VERSION;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Windows/nsistrings.txt",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Windows/brlttycnf.ahk",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Windows/msvcr90.dll",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Speech/ExternalSpeech/speech.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/BrailleLite/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/Libbraille/Makefile.in",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/XWindow/UBraille.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/Papenmeier/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/TSI/braille.h",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/TSI/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/Voyager/braille.c",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Drivers/Braille/VideoBraille/README.it",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/DOS/cwsdpmi.exe",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Application/res/drawable-ldpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Application/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Application/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Core/res/drawable-ldpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Core/res/drawable-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Android/Core/res/drawable-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Tables/Input/vs/all.txt",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Tables/Input/lt/all.txt",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/Portuguese/BRLTTY.doc",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/Portuguese/BRLTTY.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/Portuguese/BRLTTY.htm",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Translation.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Compilation.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Displays.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/contraction-tables.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Screen.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/text-tables.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Dots.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Utilisation.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/fr-2007.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/nabcc.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Advanced.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Midi.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Synthesizers.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Introduction.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Syntax.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/Features.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/French/BRLTTY.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BRLTTY/English/BRLTTY.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Documents/Manual-BrlAPI/English/BrlAPI.sgml",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Bootdisks/README.RedHat.fd",
        "/tmp/vanessa/spack-stage/spack-stage-brltty-5.6-u6xosxu7nuf3sfo35edxhg2qqjwou2rh/spack-src/Bindings/OCaml/bindings.m4"
    ],
    "total_files": 1357
}