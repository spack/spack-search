{
    "matches": {
        "/var/tmp/sochat1/spack-stage/spack-stage-fuse-overlayfs-1.4.0-yhfmucx5nygkszb6q6moytk5u4cj3pia/spack-src/plugin-manager.c": "/* fuse-overlayfs: Overlay Filesystem in Userspace\n\n   Copyright (C) 2019 Red Hat Inc.\n\n   This program is free software: you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n#define _GNU_SOURCE\n#define _FILE_OFFSET_BITS 64\n\n#include <config.h>\n#include <plugin.h>\n#include <stdlib.h>\n#include <fuse_overlayfs_error.h>\n#include <errno.h>\n#include <string.h>\n\nstruct ovl_plugin_context *\nload_plugins (const char *plugins)\n{\n  char *saveptr = NULL, *it;\n  cleanup_free char *buf = NULL;\n  struct ovl_plugin_context *ctx;\n\n  ctx = calloc (1, sizeof (*ctx));\n  if (ctx == NULL)\n    error (EXIT_FAILURE, errno, \"cannot allocate context\");\n\n  buf = strdup (plugins);\n  if (buf == NULL)\n    error (EXIT_FAILURE, errno, \"cannot allocate memory\");\n\n  for (it = strtok_r (buf, \":\", &saveptr); it; it = strtok_r (NULL, \":\", &saveptr))\n    plugin_load_one (ctx, it);\n\n  return ctx;\n}\n\nvoid\nplugin_load_one (struct ovl_plugin_context *context, const char *path)\n{\n  plugin_name name;\n  struct ovl_plugin *p;\n  plugin_version version;\n  void *handle = dlopen (path, RTLD_NOW|RTLD_LOCAL);\n  if (! handle)\n    error (EXIT_FAILURE, 0, \"cannot load plugin %s: %s\", path, dlerror());\n\n  p = calloc (1, sizeof (*p));\n  if (p == NULL)\n    error (EXIT_FAILURE, errno, \"cannot load plugin %s\", path);\n  p->next = context->plugins;\n\n  version = dlsym (handle, \"plugin_version\");\n  if (version == NULL)\n    error (EXIT_FAILURE, 0, \"cannot find symbol `plugin_version` in plugin %s\", path);\n\n  if (version () != 1)\n    error (EXIT_FAILURE, 0, \"invalid plugin version for %s\", path);\n\n  p->handle = handle;\n  name = dlsym (handle, \"plugin_name\");\n  if (name == NULL)\n    error (EXIT_FAILURE, 0, \"cannot find symbol `plugin_name` in plugin %s\", path);\n\n  p->name = name ();\n\n  if (plugin_find (context, p->name))\n    error (EXIT_FAILURE, 0, \"plugin %s added twice\", p->name);\n\n  p->load = dlsym (handle, \"plugin_load\");\n  if (p->load == NULL)\n    error (EXIT_FAILURE, 0, \"cannot find symbol `plugin_load` in plugin %s\", path);\n\n  p->release = dlsym (handle, \"plugin_release\");\n  if (p->release == NULL)\n    error (EXIT_FAILURE, 0, \"cannot find symbol `plugin_release` in plugin %s\", path);\n\n  context->plugins = p;\n}\n\nstruct ovl_plugin *\nplugin_find (struct ovl_plugin_context *context, const char *name)\n{\n  struct ovl_plugin *it;\n\n  for (it = context->plugins; it; it = it->next)\n    {\n      if (strcmp (name, it->name) == 0)\n        return it;\n    }\n  return NULL;\n}\n\nint\nplugin_free_all (struct ovl_plugin_context *context)\n{\n  struct ovl_plugin *it, *next;\n\n  it = context->plugins;\n  while (it)\n    {\n      next = it->next;\n\n      it->release ();\n\n      /* Skip dlclose (it->handle) as it causes plugins written in Go to crash.  */\n\n      free (it);\n\n      it = next;\n    }\n\n  free (context);\n\n  return 0;\n}\n"
    },
    "skipped": [],
    "total_files": 58
}