{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/src/common/portlib/NdbNuma.cpp": "/*\n   Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n*/\n\n#include <NdbNuma.h>\n#include <ndb_global.h>\n\nstatic int NDB_TRACE_NUMA = 0;\n\n#if defined HAVE_DLFCN_H && defined HAVE_DLOPEN\n#include <dlfcn.h>\n\n/**\n * Load libnuma using dlopen, not have to put link dependency on it...\n * - handle fact that there are 2 versions of libnuma...\n *   use existance of symbol \"numa_all_nodes_ptr\" to use v2 abi\n */\nstruct bitmask;\nextern \"C\"\n{\n  typedef int (* fun0)(void);\n  typedef void (* fun1)(struct bitmask*);\n  typedef void (* fun2)(int);\n  typedef int (* fun3)(int node, unsigned long * bug, int buflen);\n  typedef bitmask * (* fun4)();\n  typedef void (* fun5)(struct bitmask*);\n  typedef bitmask * (* fun6)(struct bitmask*);\n};\n\nclass NdbNuma\n{\npublic:\n  NdbNuma() { handle = 0;}\n  ~NdbNuma() { if (handle) dlclose(handle); }\n\n  int open();\n  int build_cputonodemap();\n\n  void * handle;\n  fun0 numa_available;\n\n  fun0 numa_max_node;\n  fun0 numa_max_possible_node;\n  fun1 numa_set_interleave_mask;\n  fun2 numa_set_strict;\n  fun3 numa_node_to_cpus;\n  fun4 numa_allocate_nodemask;\n  fun5 numa_bitmask_free;\n  fun6 numa_bitmask_setall;\n\n  struct bitmask * numa_all_nodes;\n  struct bitmask * numa_all_nodes_ptr;\n};\n\nstatic\nvoid*\nmy_dlopen(const char * name)\n{\n  void * p = dlopen(name, RTLD_LAZY);\n  if (NDB_TRACE_NUMA)\n  {\n    if (p == 0)\n      printf(\"info: failed to load %s\\n\", name);\n    else\n      printf(\"info: loaded %s\\n\", name);\n  }\n  return p;\n}\n\nstatic\nvoid*\nmy_dlsym(void * handle, const char * name)\n{\n  void * p = dlsym(handle, name);\n  if (NDB_TRACE_NUMA)\n  {\n    if (p != 0)\n    {\n      printf(\"info: %s OK\\n\", name);\n    }\n    else\n    {\n      printf(\"info: %s NOT FOUND\\n\", name);\n    }\n  }\n  return p;\n}\n\nint\nNdbNuma::open()\n{\n  handle = my_dlopen(\"libnuma.so\");\n  if (handle == 0)\n  {\n    handle = my_dlopen(\"libnuma.so.1\");\n  }\n  if (handle == 0)\n  {\n    return -1;\n  }\n\n  numa_available = (fun0)my_dlsym(handle, \"numa_available\");\n  if (numa_available == 0)\n  {\n    goto fail;\n  }\n\n  if ((* numa_available)() == -1)\n  {\n    if (NDB_TRACE_NUMA)\n    {\n      printf(\"info: numa_available() returns -1 => no numa support\\n\");\n    }\n    goto fail;\n  }\n\n  numa_max_node = (fun0)my_dlsym(handle, \"numa_max_node\");\n  numa_set_interleave_mask = (fun1)my_dlsym(handle, \"numa_set_interleave_mask\");\n  numa_set_strict = (fun2)my_dlsym(handle, \"numa_set_strict\");\n  numa_node_to_cpus = (fun3)my_dlsym(handle, \"numa_node_to_cpus\");\n  numa_all_nodes = (struct bitmask*)my_dlsym(handle, \"numa_all_nodes\");\n  numa_all_nodes_ptr = (struct bitmask*)my_dlsym(handle, \"numa_all_nodes_ptr\");\n  numa_allocate_nodemask = (fun4)my_dlsym(handle, \"numa_allocate_nodemask\");\n  numa_bitmask_free = (fun5)my_dlsym(handle, \"numa_bitmask_free\");\n  numa_bitmask_setall = (fun6)my_dlsym(handle, \"numa_bitmask_setall\");\n\n\n  return 0;\nfail:\n  dlclose(handle);\n  handle = 0;\n  return -1;\n}\n\nstatic\nbool\nbit_is_set(unsigned long * mask, int bit)\n{\n  int n = bit / (8 * sizeof(unsigned long));\n  int b = bit % (8 * sizeof(unsigned long));\n  return (mask[n] & (1UL << b)) != 0;\n}\n\nint\nNdbNuma::build_cputonodemap()\n{\n  int len = 512;\n  unsigned long * buf = (unsigned long*)malloc(len);\n  if (buf == 0)\n    return -1;\n\n  int m = (* numa_max_node)();\n  for (int i = 0; i <= m; i++)\n  {\nretry:\n    int r = (* numa_node_to_cpus)(i, buf, len);\n    if (r == -1)\n    {\n      if (errno != ERANGE)\n        goto fail;\n\n      len = len + 512;\n      if (len > 4096)\n        goto fail;\n\n      void * p = realloc(buf, len);\n      if (p == 0)\n        goto fail;\n\n      buf = (unsigned long*)p;\n      goto retry;\n    }\n    printf(\"node %d cpu(s): \", i);\n    for (int j = 0; j<8*len;j++)\n      if (bit_is_set(buf, j))\n        printf(\"%d \", j);\n    printf(\"\\n\");\n  }\n  free(buf);\n  return 0;\nfail:\n  free(buf);\n  return -1;\n}\n\nextern \"C\"\nint\nNdbNuma_setInterleaved()\n{\n  NdbNuma numa;\n  if (numa.open() == -1)\n    return -1;\n\n  if (numa.numa_set_interleave_mask == 0)\n    return -1;\n\n  if (numa.numa_all_nodes_ptr != 0)\n  {\n    /**\n     * libnuma v2\n     */\n    if (numa.numa_allocate_nodemask != 0 &&\n        numa.numa_bitmask_setall != 0 &&\n        numa.numa_bitmask_free != 0)\n    {\n      struct bitmask * bm = (* numa.numa_allocate_nodemask)();\n      if (bm != 0)\n      {\n        (* numa.numa_bitmask_setall)(bm);\n        (* numa.numa_set_interleave_mask)(bm);\n        (* numa.numa_bitmask_free)(bm);\n      }\n      else\n      {\n        return -1;\n      }\n    }\n    else\n    {\n      return -1;\n    }\n  }\n  else if (numa.numa_all_nodes != 0)\n  {\n    /**\n     * libnuma v1\n     */\n    (* numa.numa_set_interleave_mask)(numa.numa_all_nodes);\n  }\n  else\n  {\n    return -1;\n  }\n\n  return 0;\n}\n\n#else\nextern \"C\"\nint\nNdbNuma_setInterleaved()\n{\n  return -1;\n}\n\nextern \"C\"\nint\nNdbNuma_setInterleavedOnCpus(unsigned cpu[], unsigned len)\n{\n  return -1;\n}\n#endif\n\n#ifdef TEST_NDBNUMA\n#include <NdbTap.hpp>\n\nTAPTEST(SetInterleaved)\n{\n  NDB_TRACE_NUMA = 1;\n  NdbNuma_setInterleaved();\n  return 1; // OK\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/include/my_global.h": "/*\n   Copyright (c) 2001, 2016, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n#ifndef MY_GLOBAL_INCLUDED\n#define MY_GLOBAL_INCLUDED\n\n/* This is the include file that should be included 'first' in every C file. */\n\n/* Client library users on Windows need this macro defined here. */\n#if !defined(__WIN__) && defined(_WIN32)\n#define __WIN__\n#endif\n\n/*\n  InnoDB depends on some MySQL internals which other plugins should not\n  need.  This is because of InnoDB's foreign key support, \"safe\" binlog\n  truncation, and other similar legacy features.\n\n  We define accessors for these internals unconditionally, but do not\n  expose them in mysql/plugin.h.  They are declared in ha_innodb.h for\n  InnoDB's use.\n*/\n#define INNODB_COMPATIBILITY_HOOKS\n\n#ifdef __CYGWIN__\n/* We use a Unix API, so pretend it's not Windows */\n#undef WIN\n#undef WIN32\n#undef _WIN\n#undef _WIN32\n#undef _WIN64\n#undef __WIN__\n#undef __WIN32__\n#define HAVE_ERRNO_AS_DEFINE\n#endif /* __CYGWIN__ */\n\n#if defined(i386) && !defined(__i386__)\n#define __i386__\n#endif\n\n/* Macros to make switching between C and C++ mode easier */\n#ifdef __cplusplus\n#define C_MODE_START    extern \"C\" {\n#define C_MODE_END\t}\n#else\n#define C_MODE_START\n#define C_MODE_END\n#endif\n\n#ifdef __cplusplus\n#define CPP_UNNAMED_NS_START  namespace {\n#define CPP_UNNAMED_NS_END    }\n#endif\n\n#include <my_config.h>\n\n#ifdef WITH_PERFSCHEMA_STORAGE_ENGINE\n#define HAVE_PSI_INTERFACE\n#endif /* WITH_PERFSCHEMA_STORAGE_ENGINE */\n\n/* Make it easier to add conditional code in _expressions_ */\n#ifdef __WIN__\n#define IF_WIN(A,B) A\n#else\n#define IF_WIN(A,B) B\n#endif\n\n#ifdef HAVE_purify\n#define IF_PURIFY(A,B) A\n#else\n#define IF_PURIFY(A,B) B\n#endif\n\n#ifndef EMBEDDED_LIBRARY\n#ifdef WITH_NDB_BINLOG\n#define HAVE_NDB_BINLOG 1\n#endif\n#endif /* !EMBEDDED_LIBRARY */\n\n#ifndef EMBEDDED_LIBRARY\n#define HAVE_REPLICATION\n#define HAVE_EXTERNAL_CLIENT\n#endif\n\n#if defined (_WIN32)\n/*\n off_t is 32 bit long. We do not use C runtime functions\n with off_t but native Win32 file IO APIs, that work with\n 64 bit offsets.\n*/\n#undef SIZEOF_OFF_T\n#define SIZEOF_OFF_T 8\n\n/*\n Prevent inclusion of  Windows GDI headers - they define symbol\n ERROR that conflicts with mysql headers.\n*/\n#ifndef NOGDI\n#define NOGDI\n#endif\n\n/* Include common headers.*/\n#include <winsock2.h>\n#include <ws2tcpip.h> /* SOCKET */\n#include <io.h>       /* access(), chmod() */\n#include <process.h>  /* getpid() */\n\n#define sleep(a) Sleep((a)*1000)\n\n/* Define missing access() modes. */\n#define F_OK 0\n#define W_OK 2\n#define R_OK 4                        /* Test for read permission.  */\n\n/* Define missing file locking constants. */\n#define F_RDLCK 1\n#define F_WRLCK 2\n#define F_UNLCK 3\n#define F_TO_EOF 0x3FFFFFFF\n\n/* Shared memory and named pipe connections are supported. */\n#define HAVE_SMEM 1\n#define HAVE_NAMED_PIPE 1\n#define shared_memory_buffer_length 16000\n#define default_shared_memory_base_name \"MYSQL\"\n#endif /* _WIN32*/\n\n\n/* Workaround for _LARGE_FILES and _LARGE_FILE_API incompatibility on AIX */\n#if defined(_AIX) && defined(_LARGE_FILE_API)\n#undef _LARGE_FILE_API\n#endif\n\n/*\n  The macros below are used to allow build of Universal/fat binaries of\n  MySQL and MySQL applications under darwin. \n*/\n#if defined(__APPLE__) && defined(__MACH__)\n#  undef SIZEOF_CHARP \n#  undef SIZEOF_SHORT \n#  undef SIZEOF_INT \n#  undef SIZEOF_LONG \n#  undef SIZEOF_LONG_LONG \n#  undef SIZEOF_OFF_T \n#  undef WORDS_BIGENDIAN\n#  define SIZEOF_SHORT 2\n#  define SIZEOF_INT 4\n#  define SIZEOF_LONG_LONG 8\n#  define SIZEOF_OFF_T 8\n#  if defined(__i386__) || defined(__ppc__)\n#    define SIZEOF_CHARP 4\n#    define SIZEOF_LONG 4\n#  elif defined(__x86_64__) || defined(__ppc64__)\n#    define SIZEOF_CHARP 8\n#    define SIZEOF_LONG 8\n#  else\n#    error Building FAT binary for an unknown architecture.\n#  endif\n#  if defined(__ppc__) || defined(__ppc64__)\n#    define WORDS_BIGENDIAN\n#  endif\n#endif /* defined(__APPLE__) && defined(__MACH__) */\n\n\n/*\n  The macros below are borrowed from include/linux/compiler.h in the\n  Linux kernel. Use them to indicate the likelyhood of the truthfulness\n  of a condition. This serves two purposes - newer versions of gcc will be\n  able to optimize for branch predication, which could yield siginficant\n  performance gains in frequently executed sections of the code, and the\n  other reason to use them is for documentation\n*/\n\n#if !defined(__builtin_expect)\n#define __builtin_expect(x, expected_value) (x)\n#endif\n\n#define likely(x)\t__builtin_expect((x),1)\n#define unlikely(x)\t__builtin_expect((x),0)\n\n/* Fix problem with S_ISLNK() on Linux */\n#if defined(TARGET_OS_LINUX) || defined(__GLIBC__)\n#undef  _GNU_SOURCE\n#define _GNU_SOURCE 1\n#endif\n\n/*\n  Temporary solution to solve bug#7156. Include \"sys/types.h\" before\n  the thread headers, else the function madvise() will not be defined\n*/\n#if defined(HAVE_SYS_TYPES_H) && ( defined(sun) || defined(__sun) )\n#include <sys/types.h>\n#endif\n\n#ifdef HAVE_THREADS_WITHOUT_SOCKETS\n/* MIT pthreads does not work with unix sockets */\n#undef HAVE_SYS_UN_H\n#endif\n\n#define __EXTENSIONS__ 1\t/* We want some extension */\n#ifndef __STDC_EXT__\n#define __STDC_EXT__ 1          /* To get large file support on hpux */\n#endif\n\n/*\n  Solaris 9 include file <sys/feature_tests.h> refers to X/Open document\n\n    System Interfaces and Headers, Issue 5\n\n  saying we should define _XOPEN_SOURCE=500 to get POSIX.1c prototypes,\n  but apparently other systems (namely FreeBSD) don't agree.\n\n  On a newer Solaris 10, the above file recognizes also _XOPEN_SOURCE=600.\n  Furthermore, it tests that if a program requires older standard\n  (_XOPEN_SOURCE<600 or _POSIX_C_SOURCE<200112L) it cannot be\n  run on a new compiler (that defines _STDC_C99) and issues an #error.\n  It's also an #error if a program requires new standard (_XOPEN_SOURCE=600\n  or _POSIX_C_SOURCE=200112L) and a compiler does not define _STDC_C99.\n\n  To add more to this mess, Sun Studio C compiler defines _STDC_C99 while\n  C++ compiler does not!\n\n  So, in a desperate attempt to get correct prototypes for both\n  C and C++ code, we define either _XOPEN_SOURCE=600 or _XOPEN_SOURCE=500\n  depending on the compiler's announced C standard support.\n\n  Cleaner solutions are welcome.\n*/\n#ifdef __sun\n#if __STDC_VERSION__ - 0 >= 199901L\n#define _XOPEN_SOURCE 600\n#else\n#define _XOPEN_SOURCE 500\n#endif\n#endif\n\n#if !defined(__WIN__)\n#ifndef _POSIX_PTHREAD_SEMANTICS\n#define _POSIX_PTHREAD_SEMANTICS /* We want posix threads */\n#endif\n\n#if !defined(SCO)\n#define _REENTRANT\t1\t/* Some thread libraries require this */\n#endif\n#if !defined(_THREAD_SAFE) && !defined(_AIX)\n#define _THREAD_SAFE            /* Required for OSF1 */\n#endif\n#if defined(HPUX10) || defined(HPUX11)\nC_MODE_START\t\t\t/* HPUX needs this, signal.h bug */\n#include <pthread.h>\nC_MODE_END\n#else\n#include <pthread.h>\t\t/* AIX must have this included first */\n#endif\n#if !defined(SCO) && !defined(_REENTRANT)\n#define _REENTRANT\t1\t/* Threads requires reentrant code */\n#endif\n#endif /* !defined(__WIN__) */\n\n/* Go around some bugs in different OS and compilers */\n#ifdef _AIX\t\t\t/* By soren@t.dk */\n#define _H_STRINGS\n#define _SYS_STREAM_H\n/* #define _AIX32_CURSES */\t/* XXX: this breaks AIX 4.3.3 (others?). */\n#define ulonglong2double(A) my_ulonglong2double(A)\n#define my_off_t2double(A)  my_ulonglong2double(A)\nC_MODE_START\ninline double my_ulonglong2double(unsigned long long A) { return (double A); }\nC_MODE_END\n#endif /* _AIX */\n\n#ifdef HAVE_BROKEN_SNPRINTF\t/* HPUX 10.20 don't have this defined */\n#undef HAVE_SNPRINTF\n#endif\n#ifdef HAVE_BROKEN_PREAD\n/*\n  pread()/pwrite() are not 64 bit safe on HP-UX 11.0 without\n  installing the kernel patch PHKL_20349 or greater\n*/\n#undef HAVE_PREAD\n#undef HAVE_PWRITE\n#endif\n\n#ifdef UNDEF_HAVE_INITGROUPS\t\t\t/* For AIX 4.3 */\n#undef HAVE_INITGROUPS\n#endif\n\n#if defined(_lint) && !defined(lint)\n#define lint\n#endif\n#if SIZEOF_LONG_LONG > 4 && !defined(_LONG_LONG)\n#define _LONG_LONG 1\t\t/* For AIX string library */\n#endif\n\n#ifndef stdin\n#include <stdio.h>\n#endif\n#include <stdarg.h>\n#ifdef HAVE_STDLIB_H\n#include <stdlib.h>\n#endif\n#ifdef HAVE_STDDEF_H\n#include <stddef.h>\n#endif\n\n#include <math.h>\n#ifdef HAVE_LIMITS_H\n#include <limits.h>\n#endif\n#ifdef HAVE_FLOAT_H\n#include <float.h>\n#endif\n#ifdef HAVE_FENV_H\n#include <fenv.h> /* For fesetround() */\n#endif\n\n#ifdef HAVE_SYS_TYPES_H\n#include <sys/types.h>\n#endif\n#ifdef HAVE_FCNTL_H\n#include <fcntl.h>\n#endif\n#if TIME_WITH_SYS_TIME\n# include <sys/time.h>\n# include <time.h>\n#else\n# if HAVE_SYS_TIME_H\n#  include <sys/time.h>\n# else\n#  include <time.h>\n# endif\n#endif /* TIME_WITH_SYS_TIME */\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n#if defined(__cplusplus) && defined(NO_CPLUSPLUS_ALLOCA)\n#undef HAVE_ALLOCA\n#undef HAVE_ALLOCA_H\n#endif\n#ifdef HAVE_ALLOCA_H\n#include <alloca.h>\n#endif\n\n#include <errno.h>\t\t\t\t/* Recommended by debian */\n/* We need the following to go around a problem with openssl on solaris */\n#if defined(HAVE_CRYPT_H)\n#include <crypt.h>\n#endif\n\n/*\n  A lot of our programs uses asserts, so better to always include it\n  This also fixes a problem when people uses DBUG_ASSERT without including\n  assert.h\n*/\n#include <assert.h>\n\n/* an assert that works at compile-time. only for constant expression */\n#ifdef _some_old_compiler_that_does_not_understand_the_construct_below_\n#define compile_time_assert(X)  do { } while(0)\n#else\n#define compile_time_assert(X)                                  \\\n  do                                                            \\\n  {                                                             \\\n    typedef char compile_time_assert[(X) ? 1 : -1] MY_ATTRIBUTE((unused)); \\\n  } while(0)\n#endif\n\n/* Go around some bugs in different OS and compilers */\n#if defined (HPUX11) && defined(_LARGEFILE_SOURCE)\n#ifndef _LARGEFILE64_SOURCE\n#define _LARGEFILE64_SOURCE\n#endif\n#endif\n\n#if defined(_HPUX_SOURCE) && defined(HAVE_SYS_STREAM_H)\n#include <sys/stream.h>\t\t/* HPUX 10.20 defines ulong here. UGLY !!! */\n#define HAVE_ULONG\n#endif\n#if defined(HPUX10) && defined(_LARGEFILE64_SOURCE)\n/* Fix bug in setrlimit */\n#undef setrlimit\n#define setrlimit cma_setrlimit64\n#endif\n/* Declare madvise where it is not declared for C++, like Solaris */\n#if HAVE_MADVISE && !HAVE_DECL_MADVISE && defined(__cplusplus)\nextern \"C\" int madvise(void *addr, size_t len, int behav);\n#endif\n\n#define QUOTE_ARG(x)\t\t#x\t/* Quote argument (before cpp) */\n#define STRINGIFY_ARG(x) QUOTE_ARG(x)\t/* Quote argument, after cpp */\n\n/* Paranoid settings. Define I_AM_PARANOID if you are paranoid */\n#ifdef I_AM_PARANOID\n#define DONT_ALLOW_USER_CHANGE 1\n#define DONT_USE_MYSQL_PWD 1\n#endif\n\n/* Does the system remember a signal handler after a signal ? */\n#if !defined(HAVE_BSD_SIGNALS) && !defined(HAVE_SIGACTION)\n#define SIGNAL_HANDLER_RESET_ON_DELIVERY\n#endif\n\n/*\n  Deprecated workaround for false-positive uninitialized variables\n  warnings. Those should be silenced using tool-specific heuristics.\n\n  Enabled by default for g++ due to the bug referenced below.\n*/\n#if defined(_lint) || defined(FORCE_INIT_OF_VARS) || \\\n    (defined(__GNUC__) && defined(__cplusplus))\n#define LINT_INIT(var) var= 0\n#else\n#define LINT_INIT(var)\n#endif\n\n#ifndef SO_EXT\n#ifdef _WIN32\n#define SO_EXT \".dll\"\n#elif defined(__APPLE__)\n#define SO_EXT \".dylib\"\n#else\n#define SO_EXT \".so\"\n#endif\n#endif\n\n/*\n   Suppress uninitialized variable warning without generating code.\n\n   The _cplusplus is a temporary workaround for C++ code pending a fix\n   for a g++ bug (http://gcc.gnu.org/bugzilla/show_bug.cgi?id=34772).\n*/\n#if defined(_lint) || defined(FORCE_INIT_OF_VARS) || \\\n    defined(__cplusplus) || !defined(__GNUC__)\n#define UNINIT_VAR(x) x= 0\n#else\n/* GCC specific self-initialization which inhibits the warning. */\n#define UNINIT_VAR(x) x= x\n#endif\n\n#if !defined(HAVE_UINT)\n#undef HAVE_UINT\n#define HAVE_UINT\ntypedef unsigned int uint;\ntypedef unsigned short ushort;\n#endif\n\n#define swap_variables(t, a, b) { t dummy; dummy= a; a= b; b= dummy; }\n#define MY_TEST(a)\t\t((a) ? 1 : 0)\n#define set_if_bigger(a,b)  do { if ((a) < (b)) (a)=(b); } while(0)\n#define set_if_smaller(a,b) do { if ((a) > (b)) (a)=(b); } while(0)\n#define test_all_bits(a,b) (((a) & (b)) == (b))\n#define array_elements(A) ((uint) (sizeof(A)/sizeof(A[0])))\n\n/* Define some general constants */\n#ifndef TRUE\n#define TRUE\t\t(1)\t/* Logical true */\n#define FALSE\t\t(0)\t/* Logical false */\n#endif\n\n#include <my_compiler.h>\n\n/* The DBUG_ON flag always takes precedence over default DBUG_OFF */\n#if defined(DBUG_ON) && defined(DBUG_OFF)\n#undef DBUG_OFF\n#endif\n\n/* We might be forced to turn debug off, if not turned off already */\n#if (defined(FORCE_DBUG_OFF) || defined(_lint)) && !defined(DBUG_OFF)\n#  define DBUG_OFF\n#  ifdef DBUG_ON\n#    undef DBUG_ON\n#  endif\n#endif\n\n/* Some types that is different between systems */\n\ntypedef int\tFile;\t\t/* File descriptor */\n#ifdef _WIN32\ntypedef SOCKET my_socket;\n#else\ntypedef int\tmy_socket;\t/* File descriptor for sockets */\n#define INVALID_SOCKET -1\n#endif\n/* Type for fuctions that handles signals */\n#define sig_handler RETSIGTYPE\nC_MODE_START\ntypedef void\t(*sig_return)();/* Returns type from signal */\nC_MODE_END\n#if defined(__GNUC__) && !defined(_lint)\ntypedef char\tpchar;\t\t/* Mixed prototypes can take char */\ntypedef char\tpuchar;\t\t/* Mixed prototypes can take char */\ntypedef char\tpbool;\t\t/* Mixed prototypes can take char */\ntypedef short\tpshort;\t\t/* Mixed prototypes can take short int */\ntypedef float\tpfloat;\t\t/* Mixed prototypes can take float */\n#else\ntypedef int\tpchar;\t\t/* Mixed prototypes can't take char */\ntypedef uint\tpuchar;\t\t/* Mixed prototypes can't take char */\ntypedef int\tpbool;\t\t/* Mixed prototypes can't take char */\ntypedef int\tpshort;\t\t/* Mixed prototypes can't take short int */\ntypedef double\tpfloat;\t\t/* Mixed prototypes can't take float */\n#endif\nC_MODE_START\ntypedef int\t(*qsort_cmp)(const void *,const void *);\ntypedef int\t(*qsort_cmp2)(const void*, const void *,const void *);\nC_MODE_END\n#define qsort_t RETQSORTTYPE\t/* Broken GCC cant handle typedef !!!! */\n#ifdef HAVE_SYS_SOCKET_H\n#include <sys/socket.h>\n#endif\ntypedef SOCKET_SIZE_TYPE size_socket;\n\n#ifndef SOCKOPT_OPTLEN_TYPE\n#define SOCKOPT_OPTLEN_TYPE size_socket\n#endif\n\n/* file create flags */\n\n#ifndef O_SHARE\t\t\t/* Probably not windows */\n#define O_SHARE\t\t0\t/* Flag to my_open for shared files */\n#ifndef O_BINARY\n#define O_BINARY\t0\t/* Flag to my_open for binary files */\n#endif\n#ifndef FILE_BINARY\n#define FILE_BINARY\tO_BINARY /* Flag to my_fopen for binary streams */\n#endif\n#ifdef HAVE_FCNTL\n#define HAVE_FCNTL_LOCK\n#define F_TO_EOF\t0L\t/* Param to lockf() to lock rest of file */\n#endif\n#endif /* O_SHARE */\n\n#ifndef O_TEMPORARY\n#define O_TEMPORARY\t0\n#endif\n#ifndef O_SHORT_LIVED\n#define O_SHORT_LIVED\t0\n#endif\n#ifndef O_NOFOLLOW\n#define O_NOFOLLOW      0\n#endif\n\n/* additional file share flags for win32 */\n#ifdef __WIN__\n#define _SH_DENYRWD     0x110    /* deny read/write mode & delete */\n#define _SH_DENYWRD     0x120    /* deny write mode & delete      */\n#define _SH_DENYRDD     0x130    /* deny read mode & delete       */\n#define _SH_DENYDEL     0x140    /* deny delete only              */\n#endif /* __WIN__ */\n\n\n/* General constants */\n#define FN_LEN\t\t256\t/* Max file name len */\n#define FN_HEADLEN\t253\t/* Max length of filepart of file name */\n#define FN_EXTLEN\t20\t/* Max length of extension (part of FN_LEN) */\n#define FN_REFLEN\t512\t/* Max length of full path-name */\n#define FN_EXTCHAR\t'.'\n#define FN_HOMELIB\t'~'\t/* ~/ is used as abbrev for home dir */\n#define FN_CURLIB\t'.'\t/* ./ is used as abbrev for current dir */\n#define FN_PARENTDIR\t\"..\"\t/* Parent directory; Must be a string */\n\n#ifdef _WIN32\n#define FN_LIBCHAR\t'\\\\'\n#define FN_LIBCHAR2\t'/'\n#define FN_DIRSEP       \"/\\\\\"               /* Valid directory separators */\n#define FN_EXEEXT   \".exe\"\n#define FN_SOEXT    \".dll\"\n#define FN_ROOTDIR\t\"\\\\\"\n#define FN_DEVCHAR\t':'\n#define FN_NETWORK_DRIVES\t/* Uses \\\\ to indicate network drives */\n#define FN_NO_CASE_SENCE\t/* Files are not case-sensitive */\n#else\n#define FN_LIBCHAR\t'/'\n#define FN_LIBCHAR2\t'/'\n#define FN_DIRSEP       \"/\"     /* Valid directory separators */\n#define FN_EXEEXT   \"\"\n#define FN_SOEXT    \".so\"\n#define FN_ROOTDIR\t\"/\"\n#endif\n\n/* \n  MY_FILE_MIN is  Windows speciality and is used to quickly detect\n  the mismatch of CRT and mysys file IO usage on Windows at runtime.\n  CRT file descriptors can be in the range 0-2047, whereas descriptors returned\n  by my_open() will start with 2048. If a file descriptor with value less then\n  MY_FILE_MIN is passed to mysys IO function, chances are it stemms from\n  open()/fileno() and not my_open()/my_fileno.\n\n  For Posix,  mysys functions are light wrappers around libc, and MY_FILE_MIN\n  is logically 0.\n*/\n\n#ifdef _WIN32\n#define MY_FILE_MIN  2048\n#else\n#define MY_FILE_MIN  0\n#endif\n\n/* \n  MY_NFILE is the default size of my_file_info array.\n\n  It is larger on Windows, because it all file handles are stored in my_file_info\n  Default size is 16384 and this should be enough for most cases.If it is not \n  enough, --max-open-files with larger value can be used.\n\n  For Posix , my_file_info array is only used to store filenames for\n  error reporting and its size is not a limitation for number of open files.\n*/ \n#ifdef _WIN32\n#define MY_NFILE (16384 + MY_FILE_MIN)\n#else\n#define MY_NFILE 64\n#endif\n\n#ifndef OS_FILE_LIMIT\n#define OS_FILE_LIMIT\tUINT_MAX\n#endif\n\n/*\n  Io buffer size; Must be a power of 2 and a multiple of 512. May be\n  smaller what the disk page size. This influences the speed of the\n  isam btree library. eg to big to slow.\n*/\n#define IO_SIZE\t\t\t4096\n/*\n  How much overhead does malloc have. The code often allocates\n  something like 1024-MALLOC_OVERHEAD bytes\n*/\n#define MALLOC_OVERHEAD 8\n\n\t/* get memory in huncs */\n#define ONCE_ALLOC_INIT\t\t(uint) (4096-MALLOC_OVERHEAD)\n\t/* Typical record cash */\n#define RECORD_CACHE_SIZE\t(uint) (64*1024-MALLOC_OVERHEAD)\n\t/* Typical key cash */\n#define KEY_CACHE_SIZE\t\t(uint) (8*1024*1024)\n\t/* Default size of a key cache block  */\n#define KEY_CACHE_BLOCK_SIZE\t(uint) 1024\n\n\n\t/* Some things that this system doesn't have */\n\n#ifdef _WIN32\n#define NO_DIR_LIBRARY\t\t/* Not standard dir-library */\n#endif\n\n/* Some defines of functions for portability */\n\n#undef remove\t\t/* Crashes MySQL on SCO 5.0.0 */\n#ifndef __WIN__\n#define closesocket(A)\tclose(A)\n#endif\n\n#if (_MSC_VER)\n#if !defined(_WIN64)\ninline double my_ulonglong2double(unsigned long long value)\n{\n  long long nr=(long long) value;\n  if (nr >= 0)\n    return (double) nr;\n  return (18446744073709551616.0 + (double) nr);\n}\n#define ulonglong2double my_ulonglong2double\n#define my_off_t2double  my_ulonglong2double\n#endif /* _WIN64 */\ninline unsigned long long my_double2ulonglong(double d)\n{\n  double t= d - (double) 0x8000000000000000ULL;\n\n  if (t >= 0)\n    return  ((unsigned long long) t) + 0x8000000000000000ULL;\n  return (unsigned long long) d;\n}\n#define double2ulonglong my_double2ulonglong\n#endif\n\n#ifndef ulonglong2double\n#define ulonglong2double(A) ((double) (ulonglong) (A))\n#define my_off_t2double(A)  ((double) (my_off_t) (A))\n#endif\n#ifndef double2ulonglong\n#define double2ulonglong(A) ((ulonglong) (double) (A))\n#endif\n\n#ifndef offsetof\n#define offsetof(TYPE, MEMBER) ((size_t) &((TYPE *)0)->MEMBER)\n#endif\n#define ulong_to_double(X) ((double) (ulong) (X))\n\n#ifndef STACK_DIRECTION\n#error \"please add -DSTACK_DIRECTION=1 or -1 to your CPPFLAGS\"\n#endif\n\n#if !defined(HAVE_STRTOK_R)\n#define strtok_r(A,B,C) strtok((A),(B))\n#endif\n\n/* This is from the old m-machine.h file */\n\n#if SIZEOF_LONG_LONG > 4\n#define HAVE_LONG_LONG 1\n#endif\n\n/*\n  Some pre-ANSI-C99 systems like AIX 5.1 and Linux/GCC 2.95 define\n  ULONGLONG_MAX, LONGLONG_MIN, LONGLONG_MAX; we use them if they're defined.\n*/\n\n#if defined(HAVE_LONG_LONG) && !defined(LONGLONG_MIN)\n#define LONGLONG_MIN\t((long long) 0x8000000000000000LL)\n#define LONGLONG_MAX\t((long long) 0x7FFFFFFFFFFFFFFFLL)\n#endif\n\n#if defined(HAVE_LONG_LONG) && !defined(ULONGLONG_MAX)\n/* First check for ANSI C99 definition: */\n#ifdef ULLONG_MAX\n#define ULONGLONG_MAX  ULLONG_MAX\n#else\n#define ULONGLONG_MAX ((unsigned long long)(~0ULL))\n#endif\n#endif /* defined (HAVE_LONG_LONG) && !defined(ULONGLONG_MAX)*/\n\n#define INT_MIN64       (~0x7FFFFFFFFFFFFFFFLL)\n#define INT_MAX64       0x7FFFFFFFFFFFFFFFLL\n#define INT_MIN32       (~0x7FFFFFFFL)\n#define INT_MAX32       0x7FFFFFFFL\n#define UINT_MAX32      0xFFFFFFFFL\n#define INT_MIN24       (~0x007FFFFF)\n#define INT_MAX24       0x007FFFFF\n#define UINT_MAX24      0x00FFFFFF\n#define INT_MIN16       (~0x7FFF)\n#define INT_MAX16       0x7FFF\n#define UINT_MAX16      0xFFFF\n#define INT_MIN8        (~0x7F)\n#define INT_MAX8        0x7F\n#define UINT_MAX8       0xFF\n\n/* From limits.h instead */\n#ifndef DBL_MIN\n#define DBL_MIN\t\t4.94065645841246544e-324\n#define FLT_MIN\t\t((float)1.40129846432481707e-45)\n#endif\n#ifndef DBL_MAX\n#define DBL_MAX\t\t1.79769313486231470e+308\n#define FLT_MAX\t\t((float)3.40282346638528860e+38)\n#endif\n#ifndef SIZE_T_MAX\n#define SIZE_T_MAX      (~((size_t) 0))\n#endif\n\n#include <math.h>\n\n#if (__cplusplus >= 201103L)\n  /* For C++11 use the new std functions rather than C99 macros. */\n  #include <cmath>\n  #define my_isfinite(X) std::isfinite(X)\n  #define my_isnan(X) std::isnan(X)\n  #define my_isinf(X) std::isinf(X)\n#else\n  #ifdef HAVE_LLVM_LIBCPP /* finite is deprecated in libc++ */\n    #define my_isfinite(X) isfinite(X)\n  #else\n    #define my_isfinite(X) finite(X)\n  #endif\n  #define my_isnan(X) isnan(X)\n  #ifdef HAVE_ISINF\n    /* System-provided isinf() is available and safe to use */\n    #define my_isinf(X) isinf(X)\n  #else /* !HAVE_ISINF */\n    #define my_isinf(X) (!my_isfinite(X) && !my_isnan(X))\n  #endif\n#endif /* __cplusplus >= 201103L */\n\n/* Define missing math constants. */\n#ifndef M_PI\n#define M_PI 3.14159265358979323846\n#endif\n#ifndef M_E\n#define M_E 2.7182818284590452354\n#endif\n#ifndef M_LN2\n#define M_LN2 0.69314718055994530942\n#endif\n\n/*\n  Max size that must be added to a so that we know Size to make\n  adressable obj.\n*/\n#if SIZEOF_CHARP == 4\ntypedef long\t\tmy_ptrdiff_t;\n#else\ntypedef long long\tmy_ptrdiff_t;\n#endif\n\n#define MY_ALIGN(A,L)\t(((A) + (L) - 1) & ~((L) - 1))\n#define ALIGN_SIZE(A)\tMY_ALIGN((A),sizeof(double))\n/* Size to make adressable obj. */\n#define ADD_TO_PTR(ptr,size,type) (type) ((uchar*) (ptr)+size)\n#define PTR_BYTE_DIFF(A,B) (my_ptrdiff_t) ((uchar*) (A) - (uchar*) (B))\n\n/*\n  Custom version of standard offsetof() macro which can be used to get\n  offsets of members in class for non-POD types (according to the current\n  version of C++ standard offsetof() macro can't be used in such cases and\n  attempt to do so causes warnings to be emitted, OTOH in many cases it is\n  still OK to assume that all instances of the class has the same offsets\n  for the same members).\n\n  This is temporary solution which should be removed once File_parser class\n  and related routines are refactored.\n*/\n\n#define my_offsetof(TYPE, MEMBER) \\\n        ((size_t)((char *)&(((TYPE *)0x10)->MEMBER) - (char*)0x10))\n\n#define NullS\t\t(char *) 0\n\n#ifdef STDCALL\n#undef STDCALL\n#endif\n\n#ifdef _WIN32\n#define STDCALL __stdcall\n#else\n#define STDCALL\n#endif\n\n/* Typdefs for easyier portability */\n\n#ifndef HAVE_UCHAR\ntypedef unsigned char\tuchar;\t/* Short for unsigned char */\n#endif\n\n#ifndef HAVE_INT8\ntypedef signed char int8;       /* Signed integer >= 8  bits */\n#endif\n#ifndef HAVE_UINT8\ntypedef unsigned char uint8;    /* Unsigned integer >= 8  bits */\n#endif\n#ifndef HAVE_INT16\ntypedef short int16;\n#endif\n#ifndef HAVE_UINT16\ntypedef unsigned short uint16;\n#endif\n#if SIZEOF_INT == 4\n#ifndef HAVE_INT32\ntypedef int int32;\n#endif\n#ifndef HAVE_UINT32\ntypedef unsigned int uint32;\n#endif\n#elif SIZEOF_LONG == 4\n#ifndef HAVE_INT32\ntypedef long int32;\n#endif\n#ifndef HAVE_UINT32\ntypedef unsigned long uint32;\n#endif\n#else\n#error Neither int or long is of 4 bytes width\n#endif\n\n#if !defined(HAVE_ULONG) && !defined(__USE_MISC)\ntypedef unsigned long\tulong;\t\t  /* Short for unsigned long */\n#endif\n#ifndef longlong_defined\n/* \n  Using [unsigned] long long is preferable as [u]longlong because we use \n  [unsigned] long long unconditionally in many places, \n  for example in constants with [U]LL suffix.\n*/\n#if defined(HAVE_LONG_LONG) && SIZEOF_LONG_LONG == 8\ntypedef unsigned long long int ulonglong; /* ulong or unsigned long long */\ntypedef long long int\tlonglong;\n#else\ntypedef unsigned long\tulonglong;\t  /* ulong or unsigned long long */\ntypedef long\t\tlonglong;\n#endif\n#endif\n#ifndef HAVE_INT64\ntypedef longlong int64;\n#endif\n#ifndef HAVE_UINT64\ntypedef ulonglong uint64;\n#endif\n\n#if defined(NO_CLIENT_LONG_LONG)\ntypedef unsigned long my_ulonglong;\n#elif defined (__WIN__)\ntypedef unsigned __int64 my_ulonglong;\n#else\ntypedef unsigned long long my_ulonglong;\n#endif\n\n#if SIZEOF_CHARP == SIZEOF_INT\ntypedef int intptr;\n#elif SIZEOF_CHARP == SIZEOF_LONG\ntypedef long intptr;\n#elif SIZEOF_CHARP == SIZEOF_LONG_LONG\ntypedef long long intptr;\n#else\n#error sizeof(void *) is neither sizeof(int) nor sizeof(long) nor sizeof(long long)\n#endif\n\n#define MY_ERRPTR ((void*)(intptr)1)\n\n#if defined(_WIN32)\ntypedef unsigned long long my_off_t;\ntypedef unsigned long long os_off_t;\n#else\ntypedef off_t os_off_t;\n#if SIZEOF_OFF_T > 4\ntypedef ulonglong my_off_t;\n#else\ntypedef unsigned long my_off_t;\n#endif\n#endif /*_WIN32*/\n#define MY_FILEPOS_ERROR\t(~(my_off_t) 0)\n\n/*\n  TODO Convert these to use Bitmap class.\n */\ntypedef ulonglong table_map;          /* Used for table bits in join */\ntypedef ulonglong nesting_map;  /* Used for flags of nesting constructs */\n\n#if defined(__WIN__)\n#define socket_errno\tWSAGetLastError()\n#define SOCKET_EINTR\tWSAEINTR\n#define SOCKET_EAGAIN\tWSAEINPROGRESS\n#define SOCKET_EWOULDBLOCK WSAEWOULDBLOCK\n#define SOCKET_EADDRINUSE WSAEADDRINUSE\n#define SOCKET_ETIMEDOUT WSAETIMEDOUT\n#define SOCKET_ECONNRESET WSAECONNRESET\n#define SOCKET_ENFILE\tENFILE\n#define SOCKET_EMFILE\tEMFILE\n#else /* Unix */\n#define socket_errno\terrno\n#define closesocket(A)\tclose(A)\n#define SOCKET_EINTR\tEINTR\n#define SOCKET_EAGAIN\tEAGAIN\n#define SOCKET_EWOULDBLOCK EWOULDBLOCK\n#define SOCKET_EADDRINUSE EADDRINUSE\n#define SOCKET_ETIMEDOUT ETIMEDOUT\n#define SOCKET_ECONNRESET ECONNRESET\n#define SOCKET_ENFILE\tENFILE\n#define SOCKET_EMFILE\tEMFILE\n#endif\n\ntypedef int\t\tmyf;\t/* Type of MyFlags in my_funcs */\ntypedef char\t\tmy_bool; /* Small bool */\n\n/* Macros for converting *constants* to the right type */\n#define MYF(v)\t\t(myf) (v)\n\n#ifndef LL\n#ifdef HAVE_LONG_LONG\n#define LL(A) A ## LL\n#else\n#define LL(A) A ## L\n#endif\n#endif\n\n#ifndef ULL\n#ifdef HAVE_LONG_LONG\n#define ULL(A) A ## ULL\n#else\n#define ULL(A) A ## UL\n#endif\n#endif\n\n/*\n  Defines to make it possible to prioritize register assignments. No\n  longer that important with modern compilers.\n*/\n#ifndef USING_X\n#define reg1 register\n#define reg2 register\n#define reg3 register\n#define reg4 register\n#define reg5 register\n#define reg6 register\n#define reg7 register\n#define reg8 register\n#define reg9 register\n#define reg10 register\n#define reg11 register\n#define reg12 register\n#define reg13 register\n#define reg14 register\n#define reg15 register\n#define reg16 register\n#endif\n\n/* Some helper macros */\n#define YESNO(X) ((X) ? \"yes\" : \"no\")\n\n#define MY_HOW_OFTEN_TO_ALARM\t2\t/* How often we want info on screen */\n#define MY_HOW_OFTEN_TO_WRITE\t1000\t/* How often we want info on screen */\n\n#include <my_byteorder.h>\n\n#ifdef HAVE_CHARSET_utf8\n#define MYSQL_UNIVERSAL_CLIENT_CHARSET \"utf8\"\n#else\n#define MYSQL_UNIVERSAL_CLIENT_CHARSET MYSQL_DEFAULT_CHARSET_NAME\n#endif\n\n#if defined(EMBEDDED_LIBRARY) && !defined(HAVE_EMBEDDED_PRIVILEGE_CONTROL)\n#define NO_EMBEDDED_ACCESS_CHECKS\n#endif\n\n#if defined(_WIN32)\n#define dlsym(lib, name) (void*)GetProcAddress((HMODULE)lib, name)\n#define dlopen(libname, unused) LoadLibraryEx(libname, NULL, 0)\n#define dlclose(lib) FreeLibrary((HMODULE)lib)\n#ifndef HAVE_DLOPEN\n#define HAVE_DLOPEN\n#endif\n#endif\n\n#ifdef HAVE_DLOPEN\n#if defined(HAVE_DLFCN_H)\n#include <dlfcn.h>\n#endif\n#endif\n\n#ifndef HAVE_DLERROR\n#ifdef _WIN32\n#define DLERROR_GENERATE(errmsg, error_number) \\\n  char win_errormsg[2048]; \\\n  if(FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, \\\n                   0, error_number, 0, win_errormsg, 2048, NULL)) \\\n  { \\\n    char *ptr; \\\n    for (ptr= &win_errormsg[0] + strlen(win_errormsg) - 1; \\\n         ptr >= &win_errormsg[0] && strchr(\"\\r\\n\\t\\0x20\", *ptr); \\\n         ptr--) \\\n      *ptr= 0; \\\n    errmsg= win_errormsg; \\\n  } \\\n  else \\\n    errmsg= \"\"\n#define dlerror() \"\"\n#define dlopen_errno GetLastError()\n#else /* _WIN32 */\n#define dlerror() \"No support for dynamic loading (static build?)\"\n#define DLERROR_GENERATE(errmsg, error_number) errmsg= dlerror()\n#define dlopen_errno errno\n#endif /* _WIN32 */\n#else /* HAVE_DLERROR */\n#define DLERROR_GENERATE(errmsg, error_number) errmsg= dlerror()\n#define dlopen_errno errno\n#endif /* HAVE_DLERROR */\n\n\n/*\n *  Include standard definitions of operator new and delete.\n */\n#ifdef __cplusplus\n#include <new>\n#endif\n\n/* Length of decimal number represented by INT32. */\n#define MY_INT32_NUM_DECIMAL_DIGITS 11U\n\n/* Length of decimal number represented by INT64. */\n#define MY_INT64_NUM_DECIMAL_DIGITS 21U\n\n/* Define some useful general macros (should be done after all headers). */\n#define MY_MAX(a, b)\t((a) > (b) ? (a) : (b))\n#define MY_MIN(a, b)\t((a) < (b) ? (a) : (b))\n\n/*\n  Only Linux is known to need an explicit sync of the directory to make sure a\n  file creation/deletion/renaming in(from,to) this directory durable.\n*/\n#ifdef TARGET_OS_LINUX\n#define NEED_EXPLICIT_SYNC_DIR 1\n#else\n/*\n  On linux default rwlock scheduling policy is good enough for\n  waiting_threads.c, on other systems use our special implementation\n  (which is slower).\n\n  QQ perhaps this should be tested in configure ? how ?\n*/\n#define WT_RWLOCKS_USE_MUTEXES 1\n#endif\n\n#if !defined(__cplusplus) && !defined(bool)\n#define bool In_C_you_should_use_my_bool_instead()\n#endif\n\n/* Provide __func__ macro definition for platforms that miss it. */\n#if __STDC_VERSION__ < 199901L\n#  if __GNUC__ >= 2\n#    define __func__ __FUNCTION__\n#  else\n#    define __func__ \"<unknown>\"\n#  endif\n#elif defined(_MSC_VER)\n#  if _MSC_VER < 1300\n#    define __func__ \"<unknown>\"\n#  else\n#    define __func__ __FUNCTION__\n#  endif\n#elif defined(__BORLANDC__)\n#  define __func__ __FUNC__\n#else\n#  define __func__ \"<unknown>\"\n#endif\n\n#ifndef HAVE_RINT\n/**\n   All integers up to this number can be represented exactly as double precision\n   values (DBL_MANT_DIG == 53 for IEEE 754 hardware).\n*/\n#define MAX_EXACT_INTEGER ((1LL << DBL_MANT_DIG) - 1)\n\n/**\n   rint(3) implementation for platforms that do not have it.\n   Always rounds to the nearest integer with ties being rounded to the nearest\n   even integer to mimic glibc's rint() behavior in the \"round-to-nearest\"\n   FPU mode. Hardware-specific optimizations are possible (frndint on x86).\n   Unlike this implementation, hardware will also honor the FPU rounding mode.\n*/\n\nstatic inline double rint(double x)\n{\n  double f, i;\n  f = modf(x, &i);\n  /*\n    All doubles with absolute values > MAX_EXACT_INTEGER are even anyway,\n    no need to check it.\n  */\n  if (x > 0.0)\n    i += (double) ((f > 0.5) || (f == 0.5 &&\n                                 i <= (double) MAX_EXACT_INTEGER &&\n                                 (longlong) i % 2));\n  else\n    i -= (double) ((f < -0.5) || (f == -0.5 &&\n                                  i >= (double) -MAX_EXACT_INTEGER &&\n                                  (longlong) i % 2));\n  return i;\n}\n#endif /* HAVE_RINT */\n\n/* \n  MYSQL_PLUGIN_IMPORT macro is used to export mysqld data\n  (i.e variables) for usage in storage engine loadable plugins.\n  Outside of Windows, it is dummy.\n*/\n#ifndef MYSQL_PLUGIN_IMPORT\n#if (defined(_WIN32) && defined(MYSQL_DYNAMIC_PLUGIN))\n#define MYSQL_PLUGIN_IMPORT __declspec(dllimport)\n#else\n#define MYSQL_PLUGIN_IMPORT\n#endif\n#endif\n\n#include <my_dbug.h>\n\n/* Defines that are unique to the embedded version of MySQL */\n\n#ifdef EMBEDDED_LIBRARY\n\n/* Things we don't need in the embedded version of MySQL */\n/* TODO HF add #undef HAVE_VIO if we don't want client in embedded library */\n\n#undef HAVE_OPENSSL\n#undef HAVE_SMEM\t\t\t\t/* No shared memory */\n\n#endif /* EMBEDDED_LIBRARY */\n\n\nenum loglevel {\n   ERROR_LEVEL=       0,\n   WARNING_LEVEL=     1,\n   INFORMATION_LEVEL= 2\n};\n\n\n/*\n  Visual Studio before the version 2010 did not have lldiv_t.\n  In Visual Studio 2010, _MSC_VER is defined as 1600.\n*/\n#if defined(_MSC_VER) && (_MSC_VER < 1600)\ntypedef struct\n{\n  long long int quot;   /* Quotient.  */\n  long long int rem;    /* Remainder.  */\n} lldiv_t;\n#endif\n\n#endif  // MY_GLOBAL_INCLUDED\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/plugin/auth/dialog.c": "/*  Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as\n    published by the Free Software Foundation; version 2 of the\n    License.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA */\n\n/**\n  @file\n\n  dialog client authentication plugin with examples\n\n  dialog is a general purpose client authentication plugin, it simply\n  asks the user the question, as provided by the server and reports\n  the answer back to the server. No encryption is involved,\n  the answers are sent in clear text.\n\n  Two examples are provided: two_questions server plugin, that asks\n  the password and an \"Are you sure?\" question with a reply \"yes, of course\".\n  It demonstrates the usage of \"password\" (input is hidden) and \"ordinary\"\n  (input can be echoed) questions, and how to mark the last question,\n  to avoid an extra roundtrip.\n\n  And three_attempts plugin that gives the user three attempts to enter\n  a correct password. It shows the situation when a number of questions\n  is not known in advance.\n*/\n#if defined (WIN32) && !defined (RTLD_DEFAULT)\n# define RTLD_DEFAULT GetModuleHandle(NULL)\n#endif\n\n#include <my_global.h>\n#include <mysql.h>\n#include <mysql/plugin_auth.h>\n#include <mysql/client_plugin.h>\n#include <string.h>\n#include <stdio.h>\n#include <stdlib.h>\n\n#if !defined (_GNU_SOURCE)\n# define _GNU_SOURCE /* for RTLD_DEFAULT */\n#endif\n\n/**\n  first byte of the question string is the question \"type\".\n  It can be an \"ordinary\" or a \"password\" question.\n  The last bit set marks a last question in the authentication exchange.\n*/\n#define ORDINARY_QUESTION       \"\\2\"\n#define LAST_QUESTION           \"\\3\"\n#define PASSWORD_QUESTION       \"\\4\"\n#define LAST_PASSWORD           \"\\5\"\n\n/********************* SERVER SIDE ****************************************/\n\n/**\n  dialog demo with two questions, one password and one, the last, ordinary.\n*/\nstatic int two_questions(MYSQL_PLUGIN_VIO *vio, MYSQL_SERVER_AUTH_INFO *info)\n{\n  unsigned char *pkt;\n  int pkt_len;\n\n  /* send a password question */\n  if (vio->write_packet(vio, (const unsigned char *) PASSWORD_QUESTION \"Password, please:\", 18))\n    return CR_ERROR;\n\n  /* read the answer */\n  if ((pkt_len= vio->read_packet(vio, &pkt)) < 0)\n    return CR_ERROR;\n\n  info->password_used= PASSWORD_USED_YES;\n\n  /* fail if the password is wrong */\n  if (strcmp((const char *) pkt, info->auth_string))\n    return CR_ERROR;\n\n  /* send the last, ordinary, question */\n  if (vio->write_packet(vio, (const unsigned char *) LAST_QUESTION \"Are you sure ?\", 15))\n    return CR_ERROR;\n\n  /* read the answer */\n  if ((pkt_len= vio->read_packet(vio, &pkt)) < 0)\n    return CR_ERROR;\n\n  /* check the reply */\n  return strcmp((const char *) pkt, \"yes, of course\") ? CR_ERROR : CR_OK;\n}\n\nstatic struct st_mysql_auth two_handler=\n{\n  MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n  \"dialog\", /* requires dialog client plugin */\n  two_questions\n};\n\n/* dialog demo where the number of questions is not known in advance */\nstatic int three_attempts(MYSQL_PLUGIN_VIO *vio, MYSQL_SERVER_AUTH_INFO *info)\n{\n  unsigned char *pkt;\n  int pkt_len, i;\n\n  for (i= 0; i < 3; i++)\n  {\n    /* send the prompt */\n    if (vio->write_packet(vio, \n\t\t(const unsigned char *) PASSWORD_QUESTION \"Password, please:\", 18))\n      return CR_ERROR;\n\n    /* read the password */\n    if ((pkt_len= vio->read_packet(vio, &pkt)) < 0)\n      return CR_ERROR;\n\n    info->password_used= PASSWORD_USED_YES;\n\n    /*\n      finish, if the password is correct.\n      note, that we did not mark the prompt packet as \"last\"\n    */\n    if (strcmp((const char *) pkt, info->auth_string) == 0)\n      return CR_OK;\n  }\n\n  return CR_ERROR;\n}\n\nstatic struct st_mysql_auth three_handler=\n{\n  MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n  \"dialog\", /* requires dialog client plugin */\n  three_attempts \n};\n\nmysql_declare_plugin(dialog)\n{\n  MYSQL_AUTHENTICATION_PLUGIN,\n  &two_handler,\n  \"two_questions\",\n  \"Sergei Golubchik\",\n  \"Dialog plugin demo 1\",\n  PLUGIN_LICENSE_GPL,\n  NULL,\n  NULL,\n  0x0100,\n  NULL,\n  NULL,\n  NULL,\n  0,\n},\n{\n  MYSQL_AUTHENTICATION_PLUGIN,\n  &three_handler,\n  \"three_attempts\",\n  \"Sergei Golubchik\",\n  \"Dialog plugin demo 2\",\n  PLUGIN_LICENSE_GPL,\n  NULL,\n  NULL,\n  0x0100,\n  NULL,\n  NULL,\n  NULL,\n  0,\n}\nmysql_declare_plugin_end;\n\n/********************* CLIENT SIDE ***************************************/\n/*\n  This plugin performs a dialog with the user, asking questions and\n  reading answers. Depending on the client it may be desirable to do it\n  using GUI, or console, with or without curses, or read answers\n  from a smartcard, for example.\n\n  To support all this variety, the dialog plugin has a callback function\n  \"authentication_dialog_ask\". If the client has a function of this name\n  dialog plugin will use it for communication with the user. Otherwise\n  a default fgets() based implementation will be used.\n*/\n\n/**\n  type of the mysql_authentication_dialog_ask function\n\n  @param mysql          mysql\n  @param type           type of the input\n                        1 - ordinary string input\n                        2 - password string\n  @param prompt         prompt\n  @param buf            a buffer to store the use input\n  @param buf_len        the length of the buffer\n\n  @retval               a pointer to the user input string.\n                        It may be equal to 'buf' or to 'mysql->password'.\n                        In all other cases it is assumed to be an allocated\n                        string, and the \"dialog\" plugin will free() it.\n*/\ntypedef char *(*mysql_authentication_dialog_ask_t)(struct st_mysql *mysql,\n                      int type, const char *prompt, char *buf, int buf_len);\n\nstatic mysql_authentication_dialog_ask_t ask;\n\nstatic char *builtin_ask(MYSQL *mysql MY_ATTRIBUTE((unused)),\n                         int type MY_ATTRIBUTE((unused)),\n                         const char *prompt,\n                         char *buf, int buf_len)\n{\n  char *ptr;\n  fputs(prompt, stdout);\n  fputc(' ', stdout);\n  if (fgets(buf, buf_len, stdin) == NULL)\n    return NULL;\n  if ((ptr= strchr(buf, '\\n')))\n    *ptr= 0;\n\n  return buf;\n}\n\n/**\n  The main function of the dialog plugin.\n\n  Read the prompt, ask the question, send the reply, repeat until\n  the server is satisfied.\n\n  @note\n   1. this plugin shows how a client authentication plugin\n      may read a MySQL protocol OK packet internally - which is important\n      where a number of packets is not known in advance.\n   2. the first byte of the prompt is special. it is not\n      shown to the user, but signals whether it is the last question\n      (prompt[0] & 1 == 1) or not last (prompt[0] & 1 == 0),\n      and whether the input is a password (not echoed).\n   3. the prompt is expected to be sent zero-terminated\n*/\nstatic int perform_dialog(MYSQL_PLUGIN_VIO *vio, MYSQL *mysql)\n{\n  unsigned char *pkt, cmd= 0;\n  int pkt_len, res;\n  char reply_buf[1024], *reply;\n\n  do\n  {\n    /* read the prompt */\n    pkt_len= vio->read_packet(vio, &pkt);\n    if (pkt_len < 0)\n      return CR_ERROR;\n\n    if (pkt == 0)\n    {\n      /*\n        in mysql_change_user() the client sends the first packet, so\n        the first vio->read_packet() does nothing (pkt == 0).\n\n        We send the \"password\", assuming the client knows what it's doing.\n        (in other words, the dialog plugin should be only set as a default\n        authentication plugin on the client if the first question\n        asks for a password - which will be sent in clear text, by the way)\n      */\n      reply= mysql->passwd;\n    }\n    else\n    {\n      cmd= *pkt++;\n\n      /* is it MySQL protocol packet ? */\n      if (cmd == 0 || cmd == 254)\n        return CR_OK_HANDSHAKE_COMPLETE; /* yes. we're done */\n\n      /*\n        asking for a password with an empty prompt means mysql->password\n        otherwise we ask the user and read the reply\n      */\n      if ((cmd >> 1) == 2 && *pkt == 0)\n        reply= mysql->passwd;\n      else\n        reply= ask(mysql, cmd >> 1, (const char *) pkt, \n\t\t\t\t   reply_buf, sizeof(reply_buf));\n      if (!reply)\n        return CR_ERROR;\n    }\n    /* send the reply to the server */\n    res= vio->write_packet(vio, (const unsigned char *) reply, \n\t\t\t\t\t\t   strlen(reply)+1);\n\n    if (reply != mysql->passwd && reply != reply_buf)\n      free(reply);\n\n    if (res)\n      return CR_ERROR;\n\n    /* repeat unless it was the last question */\n  } while ((cmd & 1) != 1);\n\n  /* the job of reading the ok/error packet is left to the server */\n  return CR_OK;\n}\n\n/**\n  initialization function of the dialog plugin\n\n  Pick up the client's authentication_dialog_ask() function, if exists,\n  or fall back to the default implementation.\n*/\n\nstatic int init_dialog(char *unused1   MY_ATTRIBUTE((unused)), \n                       size_t unused2  MY_ATTRIBUTE((unused)), \n                       int unused3     MY_ATTRIBUTE((unused)), \n                       va_list unused4 MY_ATTRIBUTE((unused)))\n{\n  void *sym= dlsym(RTLD_DEFAULT, \"mysql_authentication_dialog_ask\");\n  ask= sym ? (mysql_authentication_dialog_ask_t) sym : builtin_ask;\n  return 0;\n}\n\nmysql_declare_client_plugin(AUTHENTICATION)\n  \"dialog\",\n  \"Sergei Golubchik\",\n  \"Dialog Client Authentication Plugin\",\n  {0,1,0},\n  \"GPL\",\n  NULL,\n  init_dialog,\n  NULL,\n  NULL,\n  perform_dialog\nmysql_end_client_plugin;\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/plugin/innodb_memcached/daemon_memcached/daemon/memcached.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n/*\n *  memcached - memory caching daemon\n *\n *       http://www.danga.com/memcached/\n *  Copyright (c) 2015, Oracle and/or its affiliates. All rights reserved.\n *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.\n *  This file was modified by Oracle on 28-08-2015.\n *  Modifications copyright (c) 2015, Oracle and/or its affiliates.\n *  All rights reserved.\n *\n *  Use and distribution licensed under the BSD license.  See\n *  the LICENSE file for full text.\n *\n *  Authors:\n *      Anatoly Vorobey <mellon@pobox.com>\n *      Brad Fitzpatrick <brad@danga.com>\n */\n#include \"config.h\"\n#include \"config_static.h\"\n#include \"memcached.h\"\n#include \"memcached/extension_loggers.h\"\n#include \"utilities/engine_loader.h\"\n\n#include <signal.h>\n#include <getopt.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <assert.h>\n#include <limits.h>\n#include <ctype.h>\n#include <stdarg.h>\n#include <stddef.h>\n\n#include \"memcached_mysql.h\"\n\n#define INNODB_MEMCACHED\n\nstatic inline void item_set_cas(const void *cookie, item *it, uint64_t cas) {\n    settings.engine.v1->item_set_cas(settings.engine.v0, cookie, it, cas);\n}\n\n/* The item must always be called \"it\" */\n#define SLAB_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->slab_stats[info.clsid].slab_op++;\n\n#define THREAD_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->thread_op++;\n\n#define THREAD_GUTS2(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->slab_op++; \\\n    thread_stats->thread_op++;\n\n#define SLAB_THREAD_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    SLAB_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    THREAD_GUTS(conn, thread_stats, slab_op, thread_op)\n\n#define STATS_INCR1(GUTS, conn, slab_op, thread_op, key, nkey) { \\\n    struct independent_stats *independent_stats = get_independent_stats(conn); \\\n    struct thread_stats *thread_stats = \\\n        &independent_stats->thread_stats[conn->thread->index]; \\\n    topkeys_t *topkeys = independent_stats->topkeys; \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    GUTS(conn, thread_stats, slab_op, thread_op); \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n    TK(topkeys, slab_op, key, nkey, current_time); \\\n}\n\n#define STATS_INCR(conn, op, key, nkey) \\\n    STATS_INCR1(THREAD_GUTS, conn, op, op, key, nkey)\n\n#define SLAB_INCR(conn, op, key, nkey) \\\n    STATS_INCR1(SLAB_GUTS, conn, op, op, key, nkey)\n\n#define STATS_TWO(conn, slab_op, thread_op, key, nkey) \\\n    STATS_INCR1(THREAD_GUTS2, conn, slab_op, thread_op, key, nkey)\n\n#define SLAB_TWO(conn, slab_op, thread_op, key, nkey) \\\n    STATS_INCR1(SLAB_THREAD_GUTS, conn, slab_op, thread_op, key, nkey)\n\n#define STATS_HIT(conn, op, key, nkey) \\\n    SLAB_TWO(conn, op##_hits, cmd_##op, key, nkey)\n\n#define STATS_MISS(conn, op, key, nkey) \\\n    STATS_TWO(conn, op##_misses, cmd_##op, key, nkey)\n\n#if defined(HAVE_GCC_ATOMIC_BUILTINS)\n\n#define STATS_NOKEY(conn, op)\t\\\ndo { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n\t__sync_add_and_fetch(&thread_stats->op, 1); \\\n} while (0)\n\n#define STATS_NOKEY2(conn, op1, op2)\t\\\ndo { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n\t__sync_add_and_fetch(&thread_stats->op1, 1); \\\n\t__sync_add_and_fetch(&thread_stats->op2, 1); \\\n} while (0)\n\n#define STATS_ADD(conn, op, amt)\t\\\ndo { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n\t__sync_add_and_fetch(&thread_stats->op, amt); \\\n} while (0)\n\n#define MEMCACHED_ATOMIC_MSG\t\"InnoDB MEMCACHED: Memcached uses atomic increment \\n\"\n\n#else /* HAVE_GCC_ATOMIC_BUILTINS */\n#define STATS_NOKEY(conn, op) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op++; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define STATS_NOKEY2(conn, op1, op2) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op1++; \\\n    thread_stats->op2++; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define STATS_ADD(conn, op, amt) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op += amt; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define MEMCACHED_ATOMIC_MSG\t\"InnoDB Memcached: Memcached DOES NOT use atomic increment\"\n#endif /* HAVE_GCC_ATOMIC_BUILTINS */\n\nvolatile sig_atomic_t memcached_shutdown;\nvolatile sig_atomic_t memcached_initialized;\n\n/*\n * We keep the current time of day in a global variable that's updated by a\n * timer event. This saves us a bunch of time() system calls (we really only\n * need to get the time once a second, whereas there can be tens of thousands\n * of requests a second) and allows us to use server-start-relative timestamps\n * rather than absolute UNIX timestamps, a space savings on systems where\n * sizeof(time_t) > sizeof(unsigned int).\n */\nvolatile rel_time_t current_time;\n\n/*\n * forward declarations\n */\nstatic SOCKET new_socket(struct addrinfo *ai);\nstatic int try_read_command(conn *c);\nstatic inline struct independent_stats *get_independent_stats(conn *c);\nstatic inline struct thread_stats *get_thread_stats(conn *c);\nstatic void register_callback(ENGINE_HANDLE *eh,\n                              ENGINE_EVENT_TYPE type,\n                              EVENT_CALLBACK cb, const void *cb_data);\nenum try_read_result {\n    READ_DATA_RECEIVED,\n    READ_NO_DATA_RECEIVED,\n    READ_ERROR,            /** an error occured (on the socket) (or client closed connection) */\n    READ_MEMORY_ERROR      /** failed to allocate more memory */\n};\n\nstatic enum try_read_result try_read_network(conn *c);\nstatic enum try_read_result try_read_udp(conn *c);\n\n/* stats */\nstatic void stats_init(void);\nstatic void server_stats(ADD_STAT add_stats, conn *c, bool aggregate);\nstatic void process_stat_settings(ADD_STAT add_stats, void *c);\n\n\n/* defaults */\nstatic void settings_init(void);\n\n/* event handling, network IO */\nstatic void event_handler(const int fd, const short which, void *arg);\nstatic void complete_nread(conn *c);\nstatic char *process_command(conn *c, char *command);\nstatic void write_and_free(conn *c, char *buf, int bytes);\nstatic int ensure_iov_space(conn *c);\nstatic int add_iov(conn *c, const void *buf, int len);\nstatic int add_msghdr(conn *c);\n\n\n/* time handling */\nstatic void set_current_time(void);  /* update the global variable holding\n                              global 32-bit seconds-since-start time\n                              (to avoid 64 bit time_t) */\n\n/** exported globals **/\nstruct stats stats;\nstruct settings settings;\nstatic time_t process_started;     /* when the process was started */\n\n/** file scope variables **/\nstatic conn *listen_conn = NULL;\nstatic int  udp_socket[100];\nstatic int  num_udp_socket;\nstatic struct event_base *main_base;\nstatic struct independent_stats *default_independent_stats;\n\nstatic struct engine_event_handler *engine_event_handlers[MAX_ENGINE_EVENT_TYPE + 1];\n\nenum transmit_result {\n    TRANSMIT_COMPLETE,   /** All done writing. */\n    TRANSMIT_INCOMPLETE, /** More data remaining to write. */\n    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */\n    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */\n};\n\nstatic enum transmit_result transmit(conn *c);\n\n#define REALTIME_MAXDELTA 60*60*24*30\n\n// Perform all callbacks of a given type for the given connection.\nstatic void perform_callbacks(ENGINE_EVENT_TYPE type,\n                              const void *data,\n                              const void *c) {\n    for (struct engine_event_handler *h = engine_event_handlers[type];\n         h; h = h->next) {\n        h->cb(c, type, data, h->cb_data);\n    }\n}\n\n/*\n * given time value that's either unix time or delta from current unix time,\n * return unix time. Use the fact that delta can't exceed one month\n * (and real time value can't be that low).\n */\nstatic rel_time_t realtime(const time_t exptime) {\n    /* no. of seconds in 30 days - largest possible delta exptime */\n\n    if (exptime == 0) return 0; /* 0 means never expire */\n\n    if (exptime > REALTIME_MAXDELTA) {\n        /* if item expiration is at/before the server started, give it an\n           expiration time of 1 second after the server started.\n           (because 0 means don't expire).  without this, we'd\n           underflow and wrap around to some large value way in the\n           future, effectively making items expiring in the past\n           really expiring never */\n        if (exptime <= process_started)\n            return (rel_time_t)1;\n        return (rel_time_t)(exptime - process_started);\n    } else {\n        return (rel_time_t)(exptime + current_time);\n    }\n}\n\n/**\n * Convert the relative time to an absolute time (relative to EPOC ;) )\n */\nstatic time_t abstime(const rel_time_t exptime)\n{\n    return process_started + exptime;\n}\n\nstatic void stats_init(void) {\n    stats.daemon_conns = 0;\n    stats.rejected_conns = 0;\n    stats.curr_conns = stats.total_conns = stats.conn_structs = 0;\n\n    stats_prefix_init();\n}\n\nstatic void stats_reset(const void *cookie) {\n    struct conn *conn = (struct conn*)cookie;\n    STATS_LOCK();\n    stats.rejected_conns = 0;\n    stats.total_conns = 0;\n    stats_prefix_clear();\n    STATS_UNLOCK();\n    threadlocal_stats_reset(get_independent_stats(conn)->thread_stats);\n    settings.engine.v1->reset_stats(settings.engine.v0, cookie);\n}\n\nstatic void settings_init(void) {\n    settings.use_cas = true;\n    settings.access = 0700;\n    settings.port = 11211;\n    settings.udpport = 11211;\n    /* By default this string should be NULL for getaddrinfo() */\n    settings.inter = NULL;\n    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */\n    settings.maxconns = 1000;         /* to limit connections-related memory to about 5MB */\n    settings.verbose = 0;\n    settings.oldest_live = 0;\n    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */\n    settings.socketpath = NULL;       /* by default, not using a unix socket */\n    settings.factor = 1.25;\n    settings.chunk_size = 48;         /* space for a modest key and value */\n    settings.num_threads = 4;         /* N workers */\n    settings.num_threads_per_udp = 0;\n    settings.prefix_delimiter = ':';\n    settings.detail_enabled = 0;\n    settings.allow_detailed = true;\n    settings.reqs_per_event = DEFAULT_REQS_PER_EVENT;\n    settings.backlog = 1024;\n    settings.binding_protocol = negotiating_prot;\n    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */\n    settings.topkeys = 0;\n    settings.require_sasl = false;\n    settings.extensions.logger = get_stderr_logger();\n}\n\n/*\n * Adds a message header to a connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int add_msghdr(conn *c)\n{\n    struct msghdr *msg;\n\n    assert(c != NULL);\n\n    if (c->msgsize == c->msgused) {\n        msg = realloc(c->msglist, c->msgsize * 2 * sizeof(struct msghdr));\n        if (! msg)\n            return -1;\n        c->msglist = msg;\n        c->msgsize *= 2;\n    }\n\n    msg = c->msglist + c->msgused;\n\n    /* this wipes msg_iovlen, msg_control, msg_controllen, and\n       msg_flags, the last 3 of which aren't defined on solaris: */\n    memset(msg, 0, sizeof(struct msghdr));\n\n    msg->msg_iov = &c->iov[c->iovused];\n\n    if (c->request_addr_size > 0) {\n        msg->msg_name = &c->request_addr;\n        msg->msg_namelen = c->request_addr_size;\n    }\n\n    c->msgbytes = 0;\n    c->msgused++;\n\n    if (IS_UDP(c->transport)) {\n        /* Leave room for the UDP header, which we'll fill in later. */\n        return add_iov(c, NULL, UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\nstatic const char *prot_text(enum protocol prot) {\n    char *rv = \"unknown\";\n    switch(prot) {\n        case ascii_prot:\n            rv = \"ascii\";\n            break;\n        case binary_prot:\n            rv = \"binary\";\n            break;\n        case negotiating_prot:\n            rv = \"auto-negotiate\";\n            break;\n    }\n    return rv;\n}\n\nstruct {\n    pthread_mutex_t mutex;\n    bool disabled;\n    ssize_t count;\n    uint64_t num_disable;\n} listen_state;\n\nstatic bool is_listen_disabled(void) {\n    bool ret;\n    pthread_mutex_lock(&listen_state.mutex);\n    ret = listen_state.disabled;\n    pthread_mutex_unlock(&listen_state.mutex);\n    return ret;\n}\n\nstatic uint64_t get_listen_disabled_num(void) {\n    uint64_t ret;\n    pthread_mutex_lock(&listen_state.mutex);\n    ret = listen_state.num_disable;\n    pthread_mutex_unlock(&listen_state.mutex);\n    return ret;\n}\n\nstatic void disable_listen(void) {\n    pthread_mutex_lock(&listen_state.mutex);\n    listen_state.disabled = true;\n    listen_state.count = 10;\n    ++listen_state.num_disable;\n    pthread_mutex_unlock(&listen_state.mutex);\n\n    conn *next;\n    for (next = listen_conn; next; next = next->next) {\n        update_event(next, 0);\n        if (listen(next->sfd, 1) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"listen() failed\",\n                                            strerror(errno));\n        }\n    }\n}\n\nvoid safe_close(SOCKET sfd) {\n    if (sfd != INVALID_SOCKET) {\n        int rval;\n        while ((rval = closesocket(sfd)) == SOCKET_ERROR &&\n               (errno == EINTR || errno == EAGAIN)) {\n            /* go ahead and retry */\n        }\n\n        if (rval == SOCKET_ERROR) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"Failed to close socket %d (%s)!!\\n\", (int)sfd,\n                                            strerror(errno));\n        } else {\n            STATS_LOCK();\n            stats.curr_conns--;\n            STATS_UNLOCK();\n\n            if (is_listen_disabled()) {\n                notify_dispatcher();\n            }\n        }\n    }\n}\n\n/*\n * Free list management for connections.\n */\ncache_t *conn_cache;      /* suffix cache */\n\n/**\n * Reset all of the dynamic buffers used by a connection back to their\n * default sizes. The strategy for resizing the buffers is to allocate a\n * new one of the correct size and free the old one if the allocation succeeds\n * instead of using realloc to change the buffer size (because realloc may\n * not shrink the buffers, and will also copy the memory). If the allocation\n * fails the buffer will be unchanged.\n *\n * @param c the connection to resize the buffers for\n * @return true if all allocations succeeded, false if one or more of the\n *         allocations failed.\n */\nstatic bool conn_reset_buffersize(conn *c) {\n    bool ret = true;\n\n    if (c->rsize != DATA_BUFFER_SIZE) {\n        void *ptr = malloc(DATA_BUFFER_SIZE);\n        if (ptr != NULL) {\n            free(c->rbuf);\n            c->rbuf = ptr;\n            c->rsize = DATA_BUFFER_SIZE;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->wsize != DATA_BUFFER_SIZE) {\n        void *ptr = malloc(DATA_BUFFER_SIZE);\n        if (ptr != NULL) {\n            free(c->wbuf);\n            c->wbuf = ptr;\n            c->wsize = DATA_BUFFER_SIZE;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->isize != ITEM_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(item *) * ITEM_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->ilist);\n            c->ilist = ptr;\n            c->isize = ITEM_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->suffixsize != SUFFIX_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(char *) * SUFFIX_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->suffixlist);\n            c->suffixlist = ptr;\n            c->suffixsize = SUFFIX_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->iovsize != IOV_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(struct iovec) * IOV_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->iov);\n            c->iov = ptr;\n            c->iovsize = IOV_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->msgsize != MSG_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(struct msghdr) * MSG_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->msglist);\n            c->msglist = ptr;\n            c->msgsize = MSG_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Constructor for all memory allocations of connection objects. Initialize\n * all members and allocate the transfer buffers.\n *\n * @param buffer The memory allocated by the object cache\n * @param unused1 not used\n * @param unused2 not used\n * @return 0 on success, 1 if we failed to allocate memory\n */\nstatic int conn_constructor(void *buffer, void *unused1, int unused2) {\n    (void)unused1; (void)unused2;\n\n    conn *c = buffer;\n    memset(c, 0, sizeof(*c));\n    MEMCACHED_CONN_CREATE(c);\n\n    if (!conn_reset_buffersize(c)) {\n        free(c->rbuf);\n        free(c->wbuf);\n        free(c->ilist);\n        free(c->suffixlist);\n        free(c->iov);\n        free(c->msglist);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING,\n                                        NULL,\n                                        \"Failed to allocate buffers for connection\\n\");\n        return 1;\n    }\n\n    STATS_LOCK();\n    stats.conn_structs++;\n    STATS_UNLOCK();\n\n    return 0;\n}\n\n/**\n * Destructor for all connection objects. Release all allocated resources.\n *\n * @param buffer The memory allocated by the objec cache\n * @param unused not used\n */\nstatic void conn_destructor(void *buffer, void *unused) {\n    (void)unused;\n    conn *c = buffer;\n    free(c->rbuf);\n    free(c->wbuf);\n    free(c->ilist);\n    free(c->suffixlist);\n    free(c->iov);\n    free(c->msglist);\n\n    STATS_LOCK();\n    stats.conn_structs--;\n    STATS_UNLOCK();\n}\n\nconn *conn_new(const SOCKET sfd, STATE_FUNC init_state,\n               const int event_flags,\n               const int read_buffer_size, enum network_transport transport,\n               struct event_base *base, struct timeval *timeout) {\n    conn *c = cache_alloc(conn_cache);\n    if (c == NULL) {\n        return NULL;\n    }\n\n    assert(c->thread == NULL);\n\n    if (c->rsize < read_buffer_size) {\n        void *mem = malloc(read_buffer_size);\n        if (mem) {\n            c->rsize = read_buffer_size;\n            free(c->rbuf);\n            c->rbuf = mem;\n        } else {\n            assert(c->thread == NULL);\n            cache_free(conn_cache, c);\n            return NULL;\n        }\n    }\n\n    c->transport = transport;\n    c->protocol = settings.binding_protocol;\n\n    /* unix socket mode doesn't need this, so zeroed out.  but why\n     * is this done for every command?  presumably for UDP\n     * mode.  */\n    if (!settings.socketpath) {\n        c->request_addr_size = sizeof(c->request_addr);\n    } else {\n        c->request_addr_size = 0;\n    }\n\n    if (settings.verbose > 1) {\n        if (init_state == conn_listening) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d server listening (%s)\\n\", sfd,\n                                            prot_text(c->protocol));\n        } else if (IS_UDP(transport)) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d server listening (udp)\\n\", sfd);\n        } else if (c->protocol == negotiating_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new auto-negotiating client connection\\n\",\n                                            sfd);\n        } else if (c->protocol == ascii_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new ascii client connection.\\n\", sfd);\n        } else if (c->protocol == binary_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new binary client connection.\\n\", sfd);\n        } else {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new unknown (%d) client connection\\n\",\n                                            sfd, c->protocol);\n            assert(false);\n        }\n    }\n\n    c->sfd = sfd;\n    c->state = init_state;\n    c->rlbytes = 0;\n    c->cmd = -1;\n    c->ascii_cmd = NULL;\n    c->rbytes = c->wbytes = 0;\n    c->wcurr = c->wbuf;\n    c->rcurr = c->rbuf;\n    c->ritem = 0;\n    c->icurr = c->ilist;\n    c->suffixcurr = c->suffixlist;\n    c->ileft = 0;\n    c->suffixleft = 0;\n    c->iovused = 0;\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->next = NULL;\n    c->list_state = 0;\n\n    c->write_and_go = init_state;\n    c->write_and_free = 0;\n    c->item = 0;\n\n    c->noreply = false;\n\n    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = event_flags;\n\n    if (!register_event(c, timeout)) {\n        assert(c->thread == NULL);\n        cache_free(conn_cache, c);\n        return NULL;\n    }\n\n    STATS_LOCK();\n    stats.total_conns++;\n    STATS_UNLOCK();\n\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    c->refcount = 1;\n\n    MEMCACHED_CONN_ALLOCATE(c->sfd);\n\n    perform_callbacks(ON_CONNECT, NULL, c);\n\n    return c;\n}\n\nstatic void conn_cleanup(conn *c) {\n    assert(c != NULL);\n\n    if (c->item) {\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n\n    if (c->ileft != 0) {\n        for (; c->ileft > 0; c->ileft--,c->icurr++) {\n            settings.engine.v1->release(settings.engine.v0, c, *(c->icurr));\n        }\n    }\n\n    if (c->suffixleft != 0) {\n        for (; c->suffixleft > 0; c->suffixleft--, c->suffixcurr++) {\n            cache_free(c->thread->suffix_cache, *(c->suffixcurr));\n        }\n    }\n\n    if (c->write_and_free) {\n        free(c->write_and_free);\n        c->write_and_free = 0;\n    }\n\n    if (c->sasl_conn) {\n        sasl_dispose(&c->sasl_conn);\n        c->sasl_conn = NULL;\n    }\n\n    if (c->engine_storage) {\n\tsettings.engine.v1->clean_engine(settings.engine.v0, c,\n\t\t\t\t\t c->engine_storage);\n    }\n\n    c->engine_storage = NULL;\n    c->tap_iterator = NULL;\n    c->thread = NULL;\n    assert(c->next == NULL);\n    c->ascii_cmd = NULL;\n    c->sfd = INVALID_SOCKET;\n    c->tap_nack_mode = false;\n}\n\nvoid conn_close(conn *c) {\n    assert(c != NULL);\n    assert(c->sfd == INVALID_SOCKET);\n\n    if (c->ascii_cmd != NULL) {\n        c->ascii_cmd->abort(c->ascii_cmd, c);\n    }\n\n    assert(c->thread);\n    LOCK_THREAD(c->thread);\n    /* remove from pending-io list */\n    if (settings.verbose > 1 && list_contains(c->thread->pending_io, c)) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Current connection was in the pending-io list.. Nuking it\\n\");\n    }\n    c->thread->pending_io = list_remove(c->thread->pending_io, c);\n    c->thread->pending_close = list_remove(c->thread->pending_close, c);\n    UNLOCK_THREAD(c->thread);\n\n    conn_cleanup(c);\n\n    /*\n     * The contract with the object cache is that we should return the\n     * object in a constructed state. Reset the buffers to the default\n     * size\n     */\n    conn_reset_buffersize(c);\n    assert(c->thread == NULL);\n    cache_free(conn_cache, c);\n}\n\n/*\n * Shrinks a connection's buffers if they're too big.  This prevents\n * periodic large \"get\" requests from permanently chewing lots of server\n * memory.\n *\n * This should only be called in between requests since it can wipe output\n * buffers!\n */\nstatic void conn_shrink(conn *c) {\n    assert(c != NULL);\n\n    if (IS_UDP(c->transport))\n        return;\n\n    if (c->rsize > READ_BUFFER_HIGHWAT && c->rbytes < DATA_BUFFER_SIZE) {\n        char *newbuf;\n\n        if (c->rcurr != c->rbuf)\n            memmove(c->rbuf, c->rcurr, (size_t)c->rbytes);\n\n        newbuf = (char *)realloc((void *)c->rbuf, DATA_BUFFER_SIZE);\n\n        if (newbuf) {\n            c->rbuf = newbuf;\n            c->rsize = DATA_BUFFER_SIZE;\n        }\n        /* TODO check other branch... */\n        c->rcurr = c->rbuf;\n    }\n\n    if (c->isize > ITEM_LIST_HIGHWAT) {\n        item **newbuf = (item**) realloc((void *)c->ilist, ITEM_LIST_INITIAL * sizeof(c->ilist[0]));\n        if (newbuf) {\n            c->ilist = newbuf;\n            c->isize = ITEM_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->msgsize > MSG_LIST_HIGHWAT) {\n        struct msghdr *newbuf = (struct msghdr *) realloc((void *)c->msglist, MSG_LIST_INITIAL * sizeof(c->msglist[0]));\n        if (newbuf) {\n            c->msglist = newbuf;\n            c->msgsize = MSG_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->iovsize > IOV_LIST_HIGHWAT) {\n        struct iovec *newbuf = (struct iovec *) realloc((void *)c->iov, IOV_LIST_INITIAL * sizeof(c->iov[0]));\n        if (newbuf) {\n            c->iov = newbuf;\n            c->iovsize = IOV_LIST_INITIAL;\n        }\n    /* TODO check return value */\n    }\n}\n\n/**\n * Convert a state name to a human readable form.\n */\nconst char *state_text(STATE_FUNC state) {\n    if (state == conn_listening) {\n        return \"conn_listening\";\n    } else if (state == conn_new_cmd) {\n        return \"conn_new_cmd\";\n    } else if (state == conn_waiting) {\n        return \"conn_waiting\";\n    } else if (state == conn_read) {\n        return \"conn_read\";\n    } else if (state == conn_parse_cmd) {\n        return \"conn_parse_cmd\";\n    } else if (state == conn_write) {\n        return \"conn_write\";\n    } else if (state == conn_nread) {\n        return \"conn_nread\";\n    } else if (state == conn_swallow) {\n        return \"conn_swallow\";\n    } else if (state == conn_closing) {\n        return \"conn_closing\";\n    } else if (state == conn_mwrite) {\n        return \"conn_mwrite\";\n    } else if (state == conn_ship_log) {\n        return \"conn_ship_log\";\n    } else if (state == conn_add_tap_client) {\n        return \"conn_add_tap_client\";\n    } else if (state == conn_setup_tap_stream) {\n        return \"conn_setup_tap_stream\";\n    } else if (state == conn_pending_close) {\n        return \"conn_pending_close\";\n    } else if (state == conn_immediate_close) {\n        return \"conn_immediate_close\";\n    } else {\n        return \"Unknown\";\n    }\n}\n\n/*\n * Sets a connection's current state in the state machine. Any special\n * processing that needs to happen on certain state transitions can\n * happen here.\n */\nvoid conn_set_state(conn *c, STATE_FUNC state) {\n    assert(c != NULL);\n\n    if (state != c->state) {\n        /*\n         * The connections in the \"tap thread\" behaves differently than\n         * normal connections because they operate in a full duplex mode.\n         * New messages may appear from both sides, so we can't block on\n         * read from the nework / engine\n         */\n        if (c->thread == tap_thread) {\n            if (state == conn_waiting) {\n                c->which = EV_WRITE;\n                state = conn_ship_log;\n            }\n        }\n\n        if (settings.verbose > 2 || c->state == conn_closing\n            || c->state == conn_add_tap_client) {\n            settings.extensions.logger->log(EXTENSION_LOG_DETAIL, c,\n                                            \"%d: going from %s to %s\\n\",\n                                            c->sfd, state_text(c->state),\n                                            state_text(state));\n        }\n\n        c->state = state;\n\n        if (state == conn_write || state == conn_mwrite) {\n            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->wbuf, c->wbytes);\n        }\n    }\n}\n\n/*\n * Ensures that there is room for another struct iovec in a connection's\n * iov list.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int ensure_iov_space(conn *c) {\n    assert(c != NULL);\n\n    if (c->iovused >= c->iovsize) {\n        int i, iovnum;\n        struct iovec *new_iov = (struct iovec *)realloc(c->iov,\n                                (c->iovsize * 2) * sizeof(struct iovec));\n        if (! new_iov)\n            return -1;\n        c->iov = new_iov;\n        c->iovsize *= 2;\n\n        /* Point all the msghdr structures at the new list. */\n        for (i = 0, iovnum = 0; i < c->msgused; i++) {\n            c->msglist[i].msg_iov = &c->iov[iovnum];\n            iovnum += c->msglist[i].msg_iovlen;\n        }\n    }\n\n    return 0;\n}\n\n\n/*\n * Adds data to the list of pending data that will be written out to a\n * connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\n\nstatic int add_iov(conn *c, const void *buf, int len) {\n    struct msghdr *m;\n    int leftover;\n    bool limit_to_mtu;\n\n    assert(c != NULL);\n\n    do {\n        m = &c->msglist[c->msgused - 1];\n\n        /*\n         * Limit UDP packets, and the first payloads of TCP replies, to\n         * UDP_MAX_PAYLOAD_SIZE bytes.\n         */\n        limit_to_mtu = IS_UDP(c->transport) || (1 == c->msgused);\n\n        /* We may need to start a new msghdr if this one is full. */\n        if (m->msg_iovlen == IOV_MAX ||\n            (limit_to_mtu && c->msgbytes >= UDP_MAX_PAYLOAD_SIZE)) {\n            add_msghdr(c);\n            m = &c->msglist[c->msgused - 1];\n        }\n\n        if (ensure_iov_space(c) != 0)\n            return -1;\n\n        /* If the fragment is too big to fit in the datagram, split it up */\n        if (limit_to_mtu && len + c->msgbytes > UDP_MAX_PAYLOAD_SIZE) {\n            leftover = len + c->msgbytes - UDP_MAX_PAYLOAD_SIZE;\n            len -= leftover;\n        } else {\n            leftover = 0;\n        }\n\n        m = &c->msglist[c->msgused - 1];\n        m->msg_iov[m->msg_iovlen].iov_base = (void *)buf;\n        m->msg_iov[m->msg_iovlen].iov_len = len;\n\n        c->msgbytes += len;\n        c->iovused++;\n        m->msg_iovlen++;\n\n        buf = ((char *)buf) + len;\n        len = leftover;\n    } while (leftover > 0);\n\n    return 0;\n}\n\n\n/*\n * Constructs a set of UDP headers and attaches them to the outgoing messages.\n */\nstatic int build_udp_headers(conn *c) {\n    int i;\n    unsigned char *hdr;\n\n    assert(c != NULL);\n\n    if (c->msgused > c->hdrsize) {\n        void *new_hdrbuf;\n        if (c->hdrbuf)\n            new_hdrbuf = realloc(c->hdrbuf, c->msgused * 2 * UDP_HEADER_SIZE);\n        else\n            new_hdrbuf = malloc(c->msgused * 2 * UDP_HEADER_SIZE);\n        if (! new_hdrbuf)\n            return -1;\n        c->hdrbuf = (unsigned char *)new_hdrbuf;\n        c->hdrsize = c->msgused * 2;\n    }\n\n    hdr = c->hdrbuf;\n    for (i = 0; i < c->msgused; i++) {\n        c->msglist[i].msg_iov[0].iov_base = (void*)hdr;\n        c->msglist[i].msg_iov[0].iov_len = UDP_HEADER_SIZE;\n        *hdr++ = c->request_id / 256;\n        *hdr++ = c->request_id % 256;\n        *hdr++ = i / 256;\n        *hdr++ = i % 256;\n        *hdr++ = c->msgused / 256;\n        *hdr++ = c->msgused % 256;\n        *hdr++ = 0;\n        *hdr++ = 0;\n        assert((void *) hdr == (caddr_t)c->msglist[i].msg_iov[0].iov_base + UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\n\nstatic void out_string(conn *c, const char *str) {\n    size_t len;\n\n    assert(c != NULL);\n\n    if (c->noreply) {\n        if (settings.verbose > 1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \">%d NOREPLY %s\\n\", c->sfd, str);\n        }\n        c->noreply = false;\n        if (c->sbytes > 0) {\n            conn_set_state(c, conn_swallow);\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n        return;\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d %s\\n\", c->sfd, str);\n    }\n\n    /* Nuke a partial output... */\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    add_msghdr(c);\n\n    len = strlen(str);\n    if ((len + 2) > c->wsize) {\n        /* ought to be always enough. just fail for simplicity */\n        str = \"SERVER_ERROR output line too long\";\n        len = strlen(str);\n    }\n\n    memcpy(c->wbuf, str, len);\n    memcpy(c->wbuf + len, \"\\r\\n\", 2);\n    c->wbytes = len + 2;\n    c->wcurr = c->wbuf;\n\n    conn_set_state(c, conn_write);\n\n    if (c->sbytes > 0) {\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n\n    return;\n}\n\n/*\n * we get here after reading the value in set/add/replace commands. The command\n * has been stored in c->cmd, and the item is ready in c->item.\n */\nstatic void complete_update_ascii(conn *c) {\n    assert(c != NULL);\n\n    item *it = c->item;\n    item_info info = { .nvalue = 1 };\n    if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n        settings.engine.v1->release(settings.engine.v0, c, it);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: Failed to get item info\\n\",\n                                        c->sfd);\n        out_string(c, \"SERVER_ERROR failed to get item details\");\n        return;\n    }\n\n    c->sbytes = 2; // swallow \\r\\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->store(settings.engine.v0, c, it, &c->cas,\n                                        c->store_op, 0);\n    }\n\n#ifdef ENABLE_DTRACE\n    switch (c->store_op) {\n    case OPERATION_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, info.key, info.nkey,\n                                 (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_CAS:\n        MEMCACHED_COMMAND_CAS(c->sfd, info.key, info.nkey, info.nbytes, c->cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"STORED\");\n        break;\n    case ENGINE_KEY_EEXISTS:\n        out_string(c, \"EXISTS\");\n        break;\n    case ENGINE_KEY_ENOENT:\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case ENGINE_NOT_STORED:\n        out_string(c, \"NOT_STORED\");\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        out_string(c, \"SERVER_ERROR not supported\");\n        break;\n    case ENGINE_ENOMEM:\n        out_string(c, \"SERVER_ERROR out of memory\");\n        break;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    case ENGINE_EINVAL:\n        out_string(c, \"CLIENT_ERROR invalid arguments\");\n        break;\n    case ENGINE_E2BIG:\n        out_string(c, \"CLIENT_ERROR value too big\");\n        break;\n    case ENGINE_EACCESS:\n        out_string(c, \"CLIENT_ERROR access control violation\");\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        out_string(c, \"SERVER_ERROR not my vbucket\");\n        break;\n    case ENGINE_FAILED:\n        out_string(c, \"SERVER_ERROR failure\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_WANT_MORE:\n        assert(false);\n        c->state = conn_closing;\n        break;\n\n    default:\n        out_string(c, \"SERVER_ERROR internal\");\n    }\n\n    if (c->store_op == OPERATION_CAS) {\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            SLAB_INCR(c, cas_hits, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_EEXISTS:\n            SLAB_INCR(c, cas_badval, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_ENOENT:\n            STATS_NOKEY(c, cas_misses);\n            break;\n        default:\n            ;\n        }\n    } else {\n        SLAB_INCR(c, cmd_set, info.key, info.nkey);\n    }\n\n    if (!c->ewouldblock) {\n        /* release the c->item reference */\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n}\n\n/**\n * get a pointer to the start of the request struct for the current command\n */\nstatic void* binary_get_request(conn *c) {\n    char *ret = c->rcurr;\n    ret -= (sizeof(c->binary_header) + c->binary_header.request.keylen +\n            c->binary_header.request.extlen);\n\n    assert(ret >= c->rbuf);\n    return ret;\n}\n\n/**\n * get a pointer to the key in this request\n */\nstatic char* binary_get_key(conn *c) {\n    return c->rcurr - (c->binary_header.request.keylen);\n}\n\n/**\n * Insert a key into a buffer, but replace all non-printable characters\n * with a '.'.\n *\n * @param dest where to store the output\n * @param destsz size of destination buffer\n * @param prefix string to insert before the data\n * @param client the client we are serving\n * @param from_client set to true if this data is from the client\n * @param key the key to add to the buffer\n * @param nkey the number of bytes in the key\n * @return number of bytes in dest if success, -1 otherwise\n */\nstatic ssize_t key_to_printable_buffer(char *dest, size_t destsz,\n                                       int client, bool from_client,\n                                       const char *prefix,\n                                       const char *key,\n                                       size_t nkey)\n{\n    ssize_t nw = snprintf(dest, destsz, \"%c%d %s \", from_client ? '>' : '<',\n                          client, prefix);\n    if (nw == -1) {\n        return -1;\n    }\n\n    char *ptr = dest + nw;\n    destsz -= nw;\n    if (nkey > destsz) {\n        nkey = destsz;\n    }\n\n    for (ssize_t ii = 0; ii < nkey; ++ii, ++key, ++ptr) {\n        if (isgraph(*key)) {\n            *ptr = *key;\n        } else {\n            *ptr = '.';\n        }\n    }\n\n    *ptr = '\\0';\n    return ptr - dest;\n}\n\n/**\n * Convert a byte array to a text string\n *\n * @param dest where to store the output\n * @param destsz size of destination buffer\n * @param prefix string to insert before the data\n * @param client the client we are serving\n * @param from_client set to true if this data is from the client\n * @param data the data to add to the buffer\n * @param size the number of bytes in data to print\n * @return number of bytes in dest if success, -1 otherwise\n */\nstatic ssize_t bytes_to_output_string(char *dest, size_t destsz,\n                                      int client, bool from_client,\n                                      const char *prefix,\n                                      const char *data,\n                                      size_t size)\n{\n    ssize_t nw = snprintf(dest, destsz, \"%c%d %s\", from_client ? '>' : '<',\n                          client, prefix);\n    if (nw == -1) {\n        return -1;\n    }\n    ssize_t offset = nw;\n\n    for (ssize_t ii = 0; ii < size; ++ii) {\n        if (ii % 4 == 0) {\n            if ((nw = snprintf(dest + offset, destsz - offset, \"\\n%c%d  \",\n                               from_client ? '>' : '<', client)) == -1) {\n                return  -1;\n            }\n            offset += nw;\n        }\n        if ((nw = snprintf(dest + offset, destsz - offset,\n                           \" 0x%02x\", (unsigned char)data[ii])) == -1) {\n            return -1;\n        }\n        offset += nw;\n    }\n\n    if ((nw = snprintf(dest + offset, destsz - offset, \"\\n\")) == -1) {\n        return -1;\n    }\n\n    return offset + nw;\n}\n\nstatic void add_bin_header(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len) {\n    protocol_binary_response_header* header;\n\n    assert(c);\n\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        /* XXX:  out_string is inappropriate here */\n        out_string(c, \"SERVER_ERROR out of memory\");\n        return;\n    }\n\n    header = (protocol_binary_response_header *)c->wbuf;\n\n    header->response.magic = (uint8_t)PROTOCOL_BINARY_RES;\n    header->response.opcode = c->binary_header.request.opcode;\n    header->response.keylen = (uint16_t)htons(key_len);\n\n    header->response.extlen = (uint8_t)hdr_len;\n    header->response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES;\n    header->response.status = (uint16_t)htons(err);\n\n    header->response.bodylen = htonl(body_len);\n    header->response.opaque = c->opaque;\n    header->response.cas = htonll(c->cas);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (bytes_to_output_string(buffer, sizeof(buffer), c->sfd, false,\n                                   \"Writing bin response:\",\n                                   (const char*)header->bytes,\n                                   sizeof(header->bytes)) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"%s\", buffer);\n        }\n    }\n\n    add_iov(c, c->wbuf, sizeof(header->response));\n}\n\n/**\n * Convert an error code generated from the storage engine to the corresponding\n * error code used by the protocol layer.\n * @param e the error code as used in the engine\n * @return the error code as used by the protocol layer\n */\nstatic protocol_binary_response_status engine_error_2_protocol_error(ENGINE_ERROR_CODE e) {\n    protocol_binary_response_status ret;\n\n    switch (e) {\n    case ENGINE_SUCCESS:\n        return PROTOCOL_BINARY_RESPONSE_SUCCESS;\n    case ENGINE_KEY_ENOENT:\n        return PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n    case ENGINE_KEY_EEXISTS:\n        return PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n    case ENGINE_ENOMEM:\n        return PROTOCOL_BINARY_RESPONSE_ENOMEM;\n    case ENGINE_TMPFAIL:\n        return PROTOCOL_BINARY_RESPONSE_ETMPFAIL;\n    case ENGINE_NOT_STORED:\n        return PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n    case ENGINE_EINVAL:\n        return PROTOCOL_BINARY_RESPONSE_EINVAL;\n    case ENGINE_ENOTSUP:\n        return PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED;\n    case ENGINE_E2BIG:\n        return PROTOCOL_BINARY_RESPONSE_E2BIG;\n    case ENGINE_NOT_MY_VBUCKET:\n        return PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET;\n    default:\n        ret = PROTOCOL_BINARY_RESPONSE_EINTERNAL;\n    }\n\n    return ret;\n}\n\nstatic void write_bin_packet(conn *c, protocol_binary_response_status err, int swallow) {\n    ssize_t len;\n    char buffer[1024] = { [sizeof(buffer) - 1] = '\\0' };\n\n    switch (err) {\n    case PROTOCOL_BINARY_RESPONSE_SUCCESS:\n        len = 0;\n        break;\n    case PROTOCOL_BINARY_RESPONSE_ENOMEM:\n        len = snprintf(buffer, sizeof(buffer), \"Out of memory\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_ETMPFAIL:\n        len = snprintf(buffer, sizeof(buffer), \"Temporary failure\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND:\n        len = snprintf(buffer, sizeof(buffer), \"Unknown command\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_KEY_ENOENT:\n        len = snprintf(buffer, sizeof(buffer), \"Not found\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_EINVAL:\n        len = snprintf(buffer, sizeof(buffer), \"Invalid arguments\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS:\n        len = snprintf(buffer, sizeof(buffer), \"Data exists for key\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_E2BIG:\n        len = snprintf(buffer, sizeof(buffer), \"Too large\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL:\n        len = snprintf(buffer, sizeof(buffer),\n                       \"Non-numeric server-side value for incr or decr\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_STORED:\n        len = snprintf(buffer, sizeof(buffer), \"Not stored\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_AUTH_ERROR:\n        len = snprintf(buffer, sizeof(buffer), \"Auth failure\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED:\n        len = snprintf(buffer, sizeof(buffer), \"Not supported\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET:\n        len = snprintf(buffer, sizeof(buffer),\n                       \"I'm not responsible for this vbucket\");\n        break;\n\n    default:\n        len = snprintf(buffer, sizeof(buffer), \"UNHANDLED ERROR (%d)\", err);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \">%d UNHANDLED ERROR: %d\\n\", c->sfd, err);\n    }\n\n    /* Allow the engine to pass extra error information */\n    if (settings.engine.v1->errinfo != NULL) {\n        size_t elen = settings.engine.v1->errinfo(settings.engine.v0, c, buffer + len + 2,\n                                                  sizeof(buffer) - len - 3);\n\n        if (elen > 0) {\n            memcpy(buffer + len, \": \", 2);\n            len += elen + 2;\n        }\n    }\n\n    if (err != PROTOCOL_BINARY_RESPONSE_SUCCESS && settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d Writing an error: %s\\n\", c->sfd,\n                                        buffer);\n    }\n\n    add_bin_header(c, err, 0, 0, len);\n    if (len > 0) {\n        add_iov(c, buffer, len);\n    }\n    conn_set_state(c, conn_mwrite);\n    if (swallow > 0) {\n        c->sbytes = swallow;\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n}\n\n/* Form and send a response to a command over the binary protocol */\nstatic void write_bin_response(conn *c, void *d, int hlen, int keylen, int dlen) {\n    if (!c->noreply || c->cmd == PROTOCOL_BINARY_CMD_GET ||\n        c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n        add_bin_header(c, 0, hlen, keylen, dlen);\n        if(dlen > 0) {\n            add_iov(c, d, dlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        conn_set_state(c, conn_new_cmd);\n    }\n}\n\n\nstatic void complete_incr_bin(conn *c) {\n    protocol_binary_response_incr* rsp = (protocol_binary_response_incr*)c->wbuf;\n    protocol_binary_request_incr* req = binary_get_request(c);\n\n    assert(c != NULL);\n    assert(c->wsize >= sizeof(*rsp));\n\n    /* fix byteorder in the request */\n    uint64_t delta = ntohll(req->message.body.delta);\n    uint64_t initial = ntohll(req->message.body.initial);\n    rel_time_t expiration = ntohl(req->message.body.expiration);\n    char *key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n    bool incr = (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT ||\n                 c->cmd == PROTOCOL_BINARY_CMD_INCREMENTQ);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        ssize_t nw;\n        nw = key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                     incr ? \"INCR\" : \"DECR\", key, nkey);\n        if (nw != -1) {\n            if (snprintf(buffer + nw, sizeof(buffer) - nw,\n                         \" %\" PRIu64 \", %\" PRIu64 \", %\" PRIu64 \"\\n\",\n                         delta, initial, (uint64_t)expiration) != -1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\",\n                                                buffer);\n            }\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->arithmetic(settings.engine.v0,\n                                             c, key, nkey, incr,\n                                             req->message.body.expiration != 0xffffffff,\n                                             delta, initial, expiration,\n                                             &c->cas,\n                                             &rsp->message.body.value,\n                                             c->binary_header.request.vbucket);\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        rsp->message.body.value = htonll(rsp->message.body.value);\n        write_bin_response(c, &rsp->message.body, 0, 0,\n                           sizeof (rsp->message.body.value));\n        if (incr) {\n            STATS_INCR(c, incr_hits, key, nkey);\n        } else {\n            STATS_INCR(c, decr_hits, key, nkey);\n        }\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        if (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT) {\n            STATS_INCR(c, incr_misses, key, nkey);\n        } else {\n            STATS_INCR(c, decr_misses, key, nkey);\n        }\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_EINVAL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL, 0);\n        break;\n    case ENGINE_NOT_STORED:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_STORED, 0);\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        abort();\n    }\n}\n\nstatic void complete_update_bin(conn *c) {\n    protocol_binary_response_status eno = PROTOCOL_BINARY_RESPONSE_EINVAL;\n    assert(c != NULL);\n\n    item *it = c->item;\n    item_info info = { .nvalue = 1 };\n    if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n        settings.engine.v1->release(settings.engine.v0, c, it);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: Failed to get item info\\n\",\n                                        c->sfd);\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n        return;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->store(settings.engine.v0, c,\n                                        it, &c->cas, c->store_op,\n                                        c->binary_header.request.vbucket);\n    }\n\n#ifdef ENABLE_DTRACE\n    switch (c->cmd) {\n    case OPERATION_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, info.key, info.nkey,\n                                 (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        /* Stored */\n        write_bin_response(c, NULL, 0, 0, 0);\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    default:\n        if (c->store_op == OPERATION_ADD) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n        } else if(c->store_op == OPERATION_REPLACE) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n        } else {\n            eno = PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n        }\n        write_bin_packet(c, eno, 0);\n    }\n\n    if (c->store_op == OPERATION_CAS) {\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            SLAB_INCR(c, cas_hits, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_EEXISTS:\n            SLAB_INCR(c, cas_badval, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_ENOENT:\n            STATS_NOKEY(c, cas_misses);\n            break;\n        default:\n            ;\n        }\n    } else {\n        SLAB_INCR(c, cmd_set, info.key, info.nkey);\n    }\n\n    if (!c->ewouldblock) {\n        /* release the c->item reference */\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n}\n\nstatic void process_bin_get(conn *c) {\n    item *it;\n\n    protocol_binary_response_get* rsp = (protocol_binary_response_get*)c->wbuf;\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"GET\", key, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->get(settings.engine.v0, c, &it, key, nkey,\n                                      c->binary_header.request.vbucket);\n    }\n\n    uint16_t keylen;\n    uint32_t bodylen;\n    item_info info = { .nvalue = 1 };\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"%d: Failed to get item info\\n\",\n                                            c->sfd);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            break;\n        }\n\n        keylen = 0;\n        bodylen = sizeof(rsp->message.body) + info.nbytes;\n\n        STATS_HIT(c, get, key, nkey);\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n            bodylen += nkey;\n            keylen = nkey;\n        }\n        add_bin_header(c, 0, sizeof(rsp->message.body), keylen, bodylen);\n        rsp->message.header.response.cas = htonll(info.cas);\n\n        // add the flags\n        rsp->message.body.flags = info.flags;\n        add_iov(c, &rsp->message.body, sizeof(rsp->message.body));\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n            add_iov(c, info.key, nkey);\n        }\n\n        add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n        conn_set_state(c, conn_mwrite);\n        /* Remember this item so we can garbage collect it later */\n        c->item = it;\n        break;\n    case ENGINE_KEY_ENOENT:\n        STATS_MISS(c, get, key, nkey);\n\n        MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n\n        if (c->noreply) {\n            conn_set_state(c, conn_new_cmd);\n        } else {\n            if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n                char *ofs = c->wbuf + sizeof(protocol_binary_response_header);\n                add_bin_header(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT,\n                               0, nkey, nkey);\n                memcpy(ofs, key, nkey);\n                add_iov(c, ofs, nkey);\n                conn_set_state(c, conn_mwrite);\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n            }\n        }\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_TMPFAIL:\n\tbreak;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    default:\n        /* @todo add proper error handling! */\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Unknown error code: %d\\n\", ret);\n        abort();\n    }\n\n    if (settings.detail_enabled && ret != ENGINE_EWOULDBLOCK) {\n        stats_prefix_record_get(key, nkey, ret == ENGINE_SUCCESS);\n    }\n}\n\nstatic void append_bin_stats(const char *key, const uint16_t klen,\n                             const char *val, const uint32_t vlen,\n                             conn *c) {\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    uint32_t bodylen = klen + vlen;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = PROTOCOL_BINARY_CMD_STAT,\n        .response.keylen = (uint16_t)htons(klen),\n        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,\n        .response.bodylen = htonl(bodylen),\n        .response.opaque = c->opaque\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (klen > 0) {\n        memcpy(buf, key, klen);\n        buf += klen;\n\n        if (vlen > 0) {\n            memcpy(buf, val, vlen);\n        }\n    }\n\n    c->dynamic_buffer.offset += sizeof(header.response) + bodylen;\n}\n\n/**\n * Append a key-value pair to the stats output buffer. This function assumes\n * that the output buffer is big enough (it will be if you call it through\n * append_stats)\n */\nstatic void append_ascii_stats(const char *key, const uint16_t klen,\n                               const char *val, const uint32_t vlen,\n                               conn *c) {\n    char *pos = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    uint32_t nbytes = 5; /* \"END\\r\\n\" or \"STAT \" */\n\n    if (klen == 0 && vlen == 0) {\n        memcpy(pos, \"END\\r\\n\", 5);\n    } else {\n        memcpy(pos, \"STAT \", 5);\n        memcpy(pos + nbytes, key, klen);\n        nbytes += klen;\n        if (vlen != 0) {\n            pos[nbytes] = ' ';\n            ++nbytes;\n            memcpy(pos + nbytes, val, vlen);\n            nbytes += vlen;\n        }\n        memcpy(pos + nbytes, \"\\r\\n\", 2);\n        nbytes += 2;\n    }\n\n    c->dynamic_buffer.offset += nbytes;\n}\n\nstatic bool grow_dynamic_buffer(conn *c, size_t needed) {\n    size_t nsize = c->dynamic_buffer.size;\n    size_t available = nsize - c->dynamic_buffer.offset;\n    bool rv = true;\n\n    /* Special case: No buffer -- need to allocate fresh */\n    if (c->dynamic_buffer.buffer == NULL) {\n        nsize = 1024;\n        available = c->dynamic_buffer.size = c->dynamic_buffer.offset = 0;\n    }\n\n    while (needed > available) {\n        assert(nsize > 0);\n        nsize = nsize << 1;\n        available = nsize - c->dynamic_buffer.offset;\n    }\n\n    if (nsize != c->dynamic_buffer.size) {\n        char *ptr = realloc(c->dynamic_buffer.buffer, nsize);\n        if (ptr) {\n            c->dynamic_buffer.buffer = ptr;\n            c->dynamic_buffer.size = nsize;\n        } else {\n            rv = false;\n        }\n    }\n\n    return rv;\n}\n\nstatic void append_stats(const char *key, const uint16_t klen,\n                         const char *val, const uint32_t vlen,\n                         const void *cookie)\n{\n    /* value without a key is invalid */\n    if (klen == 0 && vlen > 0) {\n        return ;\n    }\n\n    conn *c = (conn*)cookie;\n\n    if (c->protocol == binary_prot) {\n        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);\n        if (!grow_dynamic_buffer(c, needed)) {\n            return ;\n        }\n        append_bin_stats(key, klen, val, vlen, c);\n    } else {\n        size_t needed = vlen + klen + 10; // 10 == \"STAT = \\r\\n\"\n        if (!grow_dynamic_buffer(c, needed)) {\n            return ;\n        }\n        append_ascii_stats(key, klen, val, vlen, c);\n    }\n\n    assert(c->dynamic_buffer.offset <= c->dynamic_buffer.size);\n}\n\nstatic void process_bin_stat(conn *c) {\n    char *subcommand = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"STATS\", subcommand, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        if (nkey == 0) {\n            /* request all statistics */\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c, NULL, 0, append_stats);\n            if (ret == ENGINE_SUCCESS) {\n                server_stats(&append_stats, c, false);\n            }\n        } else if (strncmp(subcommand, \"reset\", 5) == 0) {\n            stats_reset(c);\n            settings.engine.v1->reset_stats(settings.engine.v0, c);\n        } else if (strncmp(subcommand, \"settings\", 8) == 0) {\n            process_stat_settings(&append_stats, c);\n        } else if (strncmp(subcommand, \"detail\", 6) == 0) {\n            char *subcmd_pos = subcommand + 6;\n            if (settings.allow_detailed) {\n                if (strncmp(subcmd_pos, \" dump\", 5) == 0) {\n                    int len;\n                    char *dump_buf = stats_prefix_dump(&len);\n                    if (dump_buf == NULL || len <= 0) {\n                        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n                        return ;\n                    } else {\n                        append_stats(\"detailed\", strlen(\"detailed\"), dump_buf, len, c);\n                        free(dump_buf);\n                    }\n                } else if (strncmp(subcmd_pos, \" on\", 3) == 0) {\n                    settings.detail_enabled = 1;\n                } else if (strncmp(subcmd_pos, \" off\", 4) == 0) {\n                    settings.detail_enabled = 0;\n                } else {\n                    write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n                    return;\n                }\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n                return;\n            }\n        } else if (strncmp(subcommand, \"aggregate\", 9) == 0) {\n            server_stats(&append_stats, c, true);\n        } else if (strncmp(subcommand, \"topkeys\", 7) == 0) {\n            topkeys_t *tk = get_independent_stats(c)->topkeys;\n            if (tk != NULL) {\n                topkeys_stats(tk, c, current_time, append_stats);\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n                return;\n            }\n        } else {\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c,\n                                                subcommand, nkey,\n                                                append_stats);\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        append_stats(NULL, 0, NULL, 0, c);\n        write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n        c->dynamic_buffer.buffer = NULL;\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n}\n\nstatic void bin_read_chunk(conn *c, enum bin_substates next_substate, uint32_t chunk) {\n    assert(c);\n    c->substate = next_substate;\n    c->rlbytes = chunk;\n\n    /* Ok... do we have room for everything in our buffer? */\n    ptrdiff_t offset = c->rcurr + sizeof(protocol_binary_request_header) - c->rbuf;\n    if (c->rlbytes > c->rsize - offset) {\n        size_t nsize = c->rsize;\n        size_t size = c->rlbytes + sizeof(protocol_binary_request_header);\n\n        while (size > nsize) {\n            nsize *= 2;\n        }\n\n        if (nsize != c->rsize) {\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                        \"%d: Need to grow buffer from %lu to %lu\\n\",\n                        c->sfd, (unsigned long)c->rsize, (unsigned long)nsize);\n            }\n            char *newm = realloc(c->rbuf, nsize);\n            if (newm == NULL) {\n                if (settings.verbose) {\n                    settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                            \"%d: Failed to grow buffer.. closing connection\\n\",\n                            c->sfd);\n                }\n                conn_set_state(c, conn_closing);\n                return;\n            }\n\n            c->rbuf= newm;\n            /* rcurr should point to the same offset in the packet */\n            c->rcurr = c->rbuf + offset - sizeof(protocol_binary_request_header);\n            c->rsize = nsize;\n        }\n        if (c->rbuf != c->rcurr) {\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n            c->rcurr = c->rbuf;\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                \"%d: Repack input buffer\\n\",\n                                                c->sfd);\n            }\n        }\n    }\n\n    /* preserve the header in the buffer.. */\n    c->ritem = c->rcurr + sizeof(protocol_binary_request_header);\n    conn_set_state(c, conn_nread);\n}\n\nstatic void bin_read_key(conn *c, enum bin_substates next_substate, int extra) {\n    bin_read_chunk(c, next_substate, c->keylen + extra);\n}\n\n\n/* Just write an error message and disconnect the client */\nstatic void handle_binary_protocol_error(conn *c) {\n    write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                \"%d: Protocol error (opcode %02x), close connection\\n\",\n                c->sfd, c->binary_header.request.opcode);\n    }\n    c->write_and_go = conn_closing;\n}\n\nstatic void init_sasl_conn(conn *c) {\n    assert(c);\n    if (!c->sasl_conn) {\n        int result=sasl_server_new(\"memcached\",\n                                   NULL, NULL, NULL, NULL,\n                                   NULL, 0, &c->sasl_conn);\n        if (result != SASL_OK) {\n            if (settings.verbose) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                         \"%d: Failed to initialize SASL conn.\\n\",\n                         c->sfd);\n            }\n            c->sasl_conn = NULL;\n        }\n    }\n}\n\nstatic void get_auth_data(const void *cookie, auth_data_t *data) {\n    conn *c = (conn*)cookie;\n    if (c->sasl_conn) {\n        sasl_getprop(c->sasl_conn, SASL_USERNAME, (void*)&data->username);\n#ifdef ENABLE_ISASL\n        sasl_getprop(c->sasl_conn, ISASL_CONFIG, (void*)&data->config);\n#endif\n    }\n}\n\n#ifdef SASL_ENABLED\nstatic void bin_list_sasl_mechs(conn *c) {\n    init_sasl_conn(c);\n    const char *result_string = NULL;\n    unsigned int string_length = 0;\n    int result=sasl_listmech(c->sasl_conn, NULL,\n                             \"\",   /* What to prepend the string with */\n                             \" \",  /* What to separate mechanisms with */\n                             \"\",   /* What to append to the string */\n                             &result_string, &string_length,\n                             NULL);\n    if (result != SASL_OK) {\n        /* Perhaps there's a better error for this... */\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                     \"%d: Failed to list SASL mechanisms.\\n\",\n                     c->sfd);\n        }\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        return;\n    }\n    write_bin_response(c, (char*)result_string, 0, 0, string_length);\n}\n#endif\n\nstruct sasl_tmp {\n    int ksize;\n    int vsize;\n    char data[]; /* data + ksize == value */\n};\n\nstatic void process_bin_sasl_auth(conn *c) {\n    assert(c->binary_header.request.extlen == 0);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    if (nkey > MAX_SASL_MECH_LEN) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    char *key = binary_get_key(c);\n    assert(key);\n\n    size_t buffer_size = sizeof(struct sasl_tmp) + nkey + vlen + 2;\n    struct sasl_tmp *data = calloc(sizeof(struct sasl_tmp) + buffer_size, 1);\n    if (!data) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    data->ksize = nkey;\n    data->vsize = vlen;\n    memcpy(data->data, key, nkey);\n\n    c->item = data;\n    c->ritem = data->data + nkey;\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_reading_sasl_auth_data;\n}\n\nstatic void process_bin_complete_sasl_auth(conn *c) {\n    const char *out = NULL;\n    unsigned int outlen = 0;\n\n    assert(c->item);\n    init_sasl_conn(c);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    struct sasl_tmp *stmp = c->item;\n    char mech[nkey+1];\n    memcpy(mech, stmp->data, nkey);\n    mech[nkey] = 0x00;\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                \"%d: mech: ``%s'' with %d bytes of data\\n\", c->sfd, mech, vlen);\n    }\n\n    const char *challenge = vlen == 0 ? NULL : (stmp->data + nkey);\n\n    int result=-1;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        result = sasl_server_start(c->sasl_conn, mech,\n                                   challenge, vlen,\n                                   &out, &outlen);\n        break;\n    case PROTOCOL_BINARY_CMD_SASL_STEP:\n        result = sasl_server_step(c->sasl_conn,\n                                  challenge, vlen,\n                                  &out, &outlen);\n        break;\n    default:\n        assert(false); /* CMD should be one of the above */\n        /* This code is pretty much impossible, but makes the compiler\n           happier */\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                    \"%d: Unhandled command %d with challenge %s\\n\",\n                    c->sfd, c->cmd, challenge);\n        }\n        break;\n    }\n\n    free(c->item);\n    c->item = NULL;\n    c->ritem = NULL;\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                        \"%d: sasl result code:  %d\\n\",\n                                        c->sfd, result);\n    }\n\n    switch(result) {\n    case SASL_OK:\n        write_bin_response(c, \"Authenticated\", 0, 0, strlen(\"Authenticated\"));\n        auth_data_t data;\n        get_auth_data(c, &data);\n        perform_callbacks(ON_AUTH, (const void*)&data, c);\n        STATS_NOKEY(c, auth_cmds);\n        break;\n    case SASL_CONTINUE:\n        add_bin_header(c, PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE, 0, 0, outlen);\n        if(outlen > 0) {\n            add_iov(c, out, outlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n        break;\n    default:\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"%d: Unknown sasl response:  %d\\n\",\n                                            c->sfd, result);\n        }\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        STATS_NOKEY2(c, auth_cmds, auth_errors);\n    }\n}\n\nstatic bool authenticated(conn *c) {\n    bool rv = false;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS: /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_STEP:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_VERSION:         /* FALLTHROUGH */\n        rv = true;\n        break;\n    default:\n        if (c->sasl_conn) {\n            const void *uname = NULL;\n            sasl_getprop(c->sasl_conn, SASL_USERNAME, &uname);\n            rv = uname != NULL;\n        }\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                \"%d: authenticated() in cmd 0x%02x is %s\\n\",\n                c->sfd, c->cmd, rv ? \"true\" : \"false\");\n    }\n\n    return rv;\n}\n\nstatic bool binary_response_handler(const void *key, uint16_t keylen,\n                                    const void *ext, uint8_t extlen,\n                                    const void *body, uint32_t bodylen,\n                                    uint8_t datatype, uint16_t status,\n                                    uint64_t cas, const void *cookie)\n{\n    conn *c = (conn*)cookie;\n    /* Look at append_bin_stats */\n    size_t needed = keylen + extlen + bodylen + sizeof(protocol_binary_response_header);\n    if (!grow_dynamic_buffer(c, needed)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                    \"<%d ERROR: Failed to allocate memory for response\\n\",\n                    c->sfd);\n        }\n        return false;\n    }\n\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = c->binary_header.request.opcode,\n        .response.keylen = (uint16_t)htons(keylen),\n        .response.extlen = extlen,\n        .response.datatype = datatype,\n        .response.status = (uint16_t)htons(status),\n        .response.bodylen = htonl(bodylen + keylen + extlen),\n        .response.opaque = c->opaque,\n        .response.cas = htonll(cas),\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (extlen > 0) {\n        memcpy(buf, ext, extlen);\n        buf += extlen;\n    }\n\n    if (keylen > 0) {\n        memcpy(buf, key, keylen);\n        buf += keylen;\n    }\n\n    if (bodylen > 0) {\n        memcpy(buf, body, bodylen);\n    }\n\n    c->dynamic_buffer.offset += needed;\n\n    return true;\n}\n\n/**\n * Tap stats (these are only used by the tap thread, so they don't need\n * to be in the threadlocal struct right now...\n */\nstruct tap_cmd_stats {\n    uint64_t connect;\n    uint64_t mutation;\n    uint64_t checkpoint_start;\n    uint64_t checkpoint_end;\n    uint64_t delete;\n    uint64_t flush;\n    uint64_t opaque;\n    uint64_t vbucket_set;\n};\n\nstruct tap_stats {\n    pthread_mutex_t mutex;\n    struct tap_cmd_stats sent;\n    struct tap_cmd_stats received;\n} tap_stats = { .mutex = PTHREAD_MUTEX_INITIALIZER };\n\nstatic void ship_tap_log(conn *c) {\n    assert(c->thread->type == TAP);\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"%d: Failed to create output headers. Shutting down tap connection\\n\", c->sfd);\n        }\n        conn_set_state(c, conn_closing);\n        return ;\n    }\n    /* @todo add check for buffer overflow of c->wbuf) */\n    c->wcurr = c->wbuf;\n\n    bool more_data = true;\n    bool send_data = false;\n    bool disconnect = false;\n\n    item *it;\n    uint32_t bodylen;\n    int ii = 0;\n    c->icurr = c->ilist;\n    do {\n        /* @todo fixme! */\n        if (ii++ == 10) {\n            break;\n        }\n\n        void *engine;\n        uint16_t nengine;\n        uint8_t ttl;\n        uint16_t tap_flags;\n        uint32_t seqno;\n        uint16_t vbucket;\n\n        tap_event_t event = c->tap_iterator(settings.engine.v0, c, &it,\n                                            &engine, &nengine, &ttl,\n                                            &tap_flags, &seqno, &vbucket);\n        union {\n            protocol_binary_request_tap_mutation mutation;\n            protocol_binary_request_tap_delete delete;\n            protocol_binary_request_tap_flush flush;\n            protocol_binary_request_tap_opaque opaque;\n            protocol_binary_request_noop noop;\n        } msg = {\n            .mutation.message.header.request.magic = (uint8_t)PROTOCOL_BINARY_REQ,\n        };\n\n        msg.opaque.message.header.request.opaque = htonl(seqno);\n        msg.opaque.message.body.tap.enginespecific_length = htons(nengine);\n        msg.opaque.message.body.tap.ttl = ttl;\n        msg.opaque.message.body.tap.flags = htons(tap_flags);\n        msg.opaque.message.header.request.extlen = 8;\n        msg.opaque.message.header.request.vbucket = htons(vbucket);\n        item_info info = { .nvalue = 1 };\n\n        switch (event) {\n        case TAP_NOOP :\n            send_data = true;\n            msg.noop.message.header.request.opcode = PROTOCOL_BINARY_CMD_NOOP;\n            msg.noop.message.header.request.extlen = 0;\n            msg.noop.message.header.request.bodylen = htonl(0);\n            memcpy(c->wcurr, msg.noop.bytes, sizeof(msg.noop.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.noop.bytes));\n            c->wcurr += sizeof(msg.noop.bytes);\n            c->wbytes += sizeof(msg.noop.bytes);\n            break;\n        case TAP_PAUSE :\n            more_data = false;\n            break;\n        case TAP_CHECKPOINT_START:\n        case TAP_CHECKPOINT_END:\n        case TAP_MUTATION:\n            if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: Failed to get item info\\n\", c->sfd);\n                break;\n            }\n            send_data = true;\n            c->ilist[c->ileft++] = it;\n\n            if (event == TAP_CHECKPOINT_START) {\n                msg.mutation.message.header.request.opcode =\n                    PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.checkpoint_start++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_CHECKPOINT_END) {\n                msg.mutation.message.header.request.opcode =\n                    PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.checkpoint_end++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_MUTATION) {\n                msg.mutation.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_MUTATION;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.mutation++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            }\n\n            msg.mutation.message.header.request.cas = htonll(info.cas);\n            msg.mutation.message.header.request.keylen = htons(info.nkey);\n            msg.mutation.message.header.request.extlen = 16;\n\n            bodylen = 16 + info.nkey + nengine;\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                bodylen += info.nbytes;\n            }\n            msg.mutation.message.header.request.bodylen = htonl(bodylen);\n            msg.mutation.message.body.item.flags = htonl(info.flags);\n            msg.mutation.message.body.item.expiration = htonl(info.exptime);\n            msg.mutation.message.body.tap.enginespecific_length = htons(nengine);\n            msg.mutation.message.body.tap.ttl = ttl;\n            msg.mutation.message.body.tap.flags = htons(tap_flags);\n            memcpy(c->wcurr, msg.mutation.bytes, sizeof(msg.mutation.bytes));\n\n            add_iov(c, c->wcurr, sizeof(msg.mutation.bytes));\n            c->wcurr += sizeof(msg.mutation.bytes);\n            c->wbytes += sizeof(msg.mutation.bytes);\n\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n\n            add_iov(c, info.key, info.nkey);\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n            }\n\n            break;\n        case TAP_DELETION:\n            /* This is a delete */\n            if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: Failed to get item info\\n\", c->sfd);\n                break;\n            }\n            send_data = true;\n            c->ilist[c->ileft++] = it;\n            msg.delete.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_DELETE;\n            msg.delete.message.header.request.cas = htonll(info.cas);\n            msg.delete.message.header.request.keylen = htons(info.nkey);\n\n            bodylen = 8 + info.nkey + nengine;\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                bodylen += info.nbytes;\n            }\n            msg.delete.message.header.request.bodylen = htonl(bodylen);\n\n            memcpy(c->wcurr, msg.delete.bytes, sizeof(msg.delete.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.delete.bytes));\n            c->wcurr += sizeof(msg.delete.bytes);\n            c->wbytes += sizeof(msg.delete.bytes);\n\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n\n            add_iov(c, info.key, info.nkey);\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n            }\n\n            pthread_mutex_lock(&tap_stats.mutex);\n            tap_stats.sent.delete++;\n            pthread_mutex_unlock(&tap_stats.mutex);\n            break;\n\n        case TAP_DISCONNECT:\n            disconnect = true;\n            more_data = false;\n            break;\n        case TAP_VBUCKET_SET:\n        case TAP_FLUSH:\n        case TAP_OPAQUE:\n            send_data = true;\n\n            if (event == TAP_OPAQUE) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_OPAQUE;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.opaque++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n\n            } else if (event == TAP_FLUSH) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_FLUSH;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.flush++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_VBUCKET_SET) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET;\n                msg.flush.message.body.tap.flags = htons(tap_flags);\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.vbucket_set++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            }\n\n            msg.flush.message.header.request.bodylen = htonl(8 + nengine);\n            memcpy(c->wcurr, msg.flush.bytes, sizeof(msg.flush.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.flush.bytes));\n            c->wcurr += sizeof(msg.flush.bytes);\n            c->wbytes += sizeof(msg.flush.bytes);\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n            break;\n        default:\n            abort();\n        }\n    } while (more_data);\n\n    c->ewouldblock = false;\n    if (send_data) {\n        conn_set_state(c, conn_mwrite);\n        if (disconnect) {\n            c->write_and_go = conn_closing;\n        } else {\n            c->write_and_go = conn_ship_log;\n        }\n    } else {\n        if (disconnect) {\n            conn_set_state(c, conn_closing);\n        } else {\n            /* No more items to ship to the slave at this time.. suspend.. */\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                \"%d: No more items in tap log.. waiting\\n\",\n                                                c->sfd);\n            }\n            c->ewouldblock = true;\n        }\n    }\n}\n\nstatic void process_bin_unknown_packet(conn *c) {\n    void *packet = c->rcurr - (c->binary_header.request.bodylen +\n                               sizeof(c->binary_header));\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->unknown_command(settings.engine.v0, c, packet,\n                                                  binary_response_handler);\n    }\n\n    if (ret == ENGINE_SUCCESS) {\n        if (c->dynamic_buffer.buffer != NULL) {\n            write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n            c->dynamic_buffer.buffer = NULL;\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n    } else if (ret == ENGINE_ENOTSUP) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, 0);\n    } else if (ret == ENGINE_EWOULDBLOCK) {\n        c->ewouldblock = true;\n    } else {\n        /* FATAL ERROR, shut down connection */\n        conn_set_state(c, conn_closing);\n    }\n}\n\nstatic void process_bin_tap_connect(conn *c) {\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_tap_connect *req = (void*)packet;\n    const char *key = packet + sizeof(req->bytes);\n    const char *data = key + c->binary_header.request.keylen;\n    uint32_t flags = 0;\n    size_t ndata = c->binary_header.request.bodylen -\n        c->binary_header.request.extlen -\n        c->binary_header.request.keylen;\n\n    if (c->binary_header.request.extlen == 4) {\n        flags = ntohl(req->message.body.flags);\n\n        if (flags & TAP_CONNECT_FLAG_BACKFILL) {\n            /* the userdata has to be at least 8 bytes! */\n            if (ndata < 8) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: ERROR: Invalid tap connect message\\n\",\n                                                c->sfd);\n                conn_set_state(c, conn_closing);\n                return ;\n            }\n        }\n    } else {\n        data -= 4;\n        key -= 4;\n    }\n\n    if (settings.verbose && c->binary_header.request.keylen > 0) {\n        char buffer[1024];\n        int len = c->binary_header.request.keylen;\n        if (len >= sizeof(buffer)) {\n            len = sizeof(buffer) - 1;\n        }\n        memcpy(buffer, key, len);\n        buffer[len] = '\\0';\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"%d: Trying to connect with named tap connection: <%s>\\n\",\n                                        c->sfd, buffer);\n    }\n\n    TAP_ITERATOR iterator = settings.engine.v1->get_tap_iterator(\n        settings.engine.v0, c, key, c->binary_header.request.keylen,\n        flags, data, ndata);\n\n    if (iterator == NULL) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: FATAL: The engine does not support tap\\n\",\n                                        c->sfd);\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        c->write_and_go = conn_closing;\n    } else {\n        c->tap_iterator = iterator;\n        c->which = EV_WRITE;\n        conn_set_state(c, conn_ship_log);\n    }\n}\n\nstatic void process_bin_tap_packet(tap_event_t event, conn *c) {\n    assert(c != NULL);\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_tap_no_extras *tap = (void*)packet;\n    uint16_t nengine = ntohs(tap->message.body.tap.enginespecific_length);\n    uint16_t tap_flags = ntohs(tap->message.body.tap.flags);\n    uint32_t seqno = ntohl(tap->message.header.request.opaque);\n    uint8_t ttl = tap->message.body.tap.ttl;\n    assert(ttl > 0);\n    char *engine_specific = packet + sizeof(tap->bytes);\n    char *key = engine_specific + nengine;\n    uint16_t nkey = c->binary_header.request.keylen;\n    char *data = key + nkey;\n    uint32_t flags = 0;\n    uint32_t exptime = 0;\n    uint32_t ndata = c->binary_header.request.bodylen - nengine - nkey - 8;\n\n    if (event == TAP_MUTATION || event == TAP_CHECKPOINT_START ||\n        event == TAP_CHECKPOINT_END) {\n        protocol_binary_request_tap_mutation *mutation = (void*)tap;\n        flags = ntohl(mutation->message.body.item.flags);\n        exptime = ntohl(mutation->message.body.item.expiration);\n        key += 8;\n        data += 8;\n        ndata -= 8;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->tap_notify(settings.engine.v0, c,\n                                             engine_specific, nengine,\n                                             ttl - 1, tap_flags,\n                                             event, seqno,\n                                             key, nkey,\n                                             flags, exptime,\n                                             ntohll(tap->message.header.request.cas),\n                                             data, ndata,\n                                             c->binary_header.request.vbucket);\n    }\n\n    switch (ret) {\n    case ENGINE_DISCONNECT:\n        conn_set_state(c, conn_closing);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        if ((tap_flags & TAP_FLAG_ACK) ||\n            (ret != ENGINE_SUCCESS && c->tap_nack_mode))\n        {\n            write_bin_packet(c, engine_error_2_protocol_error(ret), 0);\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n    }\n}\n\nstatic void process_bin_tap_ack(conn *c) {\n    assert(c != NULL);\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_response_no_extras *rsp = (void*)packet;\n    uint32_t seqno = ntohl(rsp->message.header.response.opaque);\n    uint16_t status = ntohs(rsp->message.header.response.status);\n    char *key = packet + sizeof(rsp->bytes);\n\n    ENGINE_ERROR_CODE ret = ENGINE_DISCONNECT;\n    if (settings.engine.v1->tap_notify != NULL) {\n        ret = settings.engine.v1->tap_notify(settings.engine.v0, c, NULL, 0, 0, status,\n                                             TAP_ACK, seqno, key,\n                                             c->binary_header.request.keylen, 0, 0,\n                                             0, NULL, 0, 0);\n    }\n\n    if (ret == ENGINE_DISCONNECT) {\n        conn_set_state(c, conn_closing);\n    } else {\n        conn_set_state(c, conn_ship_log);\n    }\n}\n\n/**\n * We received a noop response.. just ignore it\n */\nstatic void process_bin_noop_response(conn *c) {\n    assert(c != NULL);\n    conn_set_state(c, conn_new_cmd);\n}\n\nstatic void process_bin_verbosity(conn *c) {\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_verbosity *req = (void*)packet;\n    uint32_t level = (uint32_t)ntohl(req->message.body.level);\n    if (level > MAX_VERBOSITY_LEVEL) {\n        level = MAX_VERBOSITY_LEVEL;\n    }\n    settings.verbose = (int)level;\n    perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n    write_bin_response(c, NULL, 0, 0, 0);\n}\n\nstatic void process_bin_packet(conn *c) {\n    /* @todo this should be an array of funciton pointers and call through */\n    switch (c->binary_header.request.opcode) {\n    case PROTOCOL_BINARY_CMD_TAP_CONNECT:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.connect++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        conn_set_state(c, conn_add_tap_client);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_MUTATION:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.mutation++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_MUTATION, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.checkpoint_start++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_CHECKPOINT_START, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.checkpoint_end++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_CHECKPOINT_END, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_DELETE:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.delete++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_DELETION, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_FLUSH:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.flush++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_FLUSH, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_OPAQUE:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.opaque++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_OPAQUE, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.vbucket_set++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_VBUCKET_SET, c);\n        break;\n    case PROTOCOL_BINARY_CMD_VERBOSITY:\n        process_bin_verbosity(c);\n        break;\n    default:\n        process_bin_unknown_packet(c);\n    }\n}\n\n\n\ntypedef void (*RESPONSE_HANDLER)(conn*);\n/**\n * A map between the response packets op-code and the function to handle\n * the response message.\n */\nstatic RESPONSE_HANDLER response_handlers[256] = {\n    [PROTOCOL_BINARY_CMD_NOOP] = process_bin_noop_response,\n    [PROTOCOL_BINARY_CMD_TAP_MUTATION] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_DELETE] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_FLUSH] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_OPAQUE] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END] = process_bin_tap_ack\n};\n\nstatic void dispatch_bin_command(conn *c) {\n    int protocol_error = 0;\n\n    int extlen = c->binary_header.request.extlen;\n    uint16_t keylen = c->binary_header.request.keylen;\n    uint32_t bodylen = c->binary_header.request.bodylen;\n\n    if (settings.require_sasl && !authenticated(c)) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        c->write_and_go = conn_closing;\n        return;\n    }\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n    c->noreply = true;\n\n    /* binprot supports 16bit keys, but internals are still 8bit */\n    if (keylen > KEY_MAX_LENGTH) {\n        handle_binary_protocol_error(c);\n        return;\n    }\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_SET;\n        break;\n    case PROTOCOL_BINARY_CMD_ADDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_ADD;\n        break;\n    case PROTOCOL_BINARY_CMD_REPLACEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_REPLACE;\n        break;\n    case PROTOCOL_BINARY_CMD_DELETEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DELETE;\n        break;\n    case PROTOCOL_BINARY_CMD_INCREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_INCREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_DECREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DECREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_QUITQ:\n        c->cmd = PROTOCOL_BINARY_CMD_QUIT;\n        break;\n    case PROTOCOL_BINARY_CMD_FLUSHQ:\n        c->cmd = PROTOCOL_BINARY_CMD_FLUSH;\n        break;\n    case PROTOCOL_BINARY_CMD_APPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_APPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_PREPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_PREPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_GETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GET;\n        break;\n    case PROTOCOL_BINARY_CMD_GETKQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GETK;\n        break;\n    default:\n        c->noreply = false;\n    }\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_VERSION:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, VERSION, 0, 0, strlen(VERSION));\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_FLUSH:\n            if (keylen == 0 && bodylen == extlen && (extlen == 0 || extlen == 4)) {\n                bin_read_key(c, bin_read_flush_exptime, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_NOOP:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SET: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_ADD: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            if (extlen == 8 && keylen != 0 && bodylen >= (keylen + 8)) {\n                bin_read_key(c, bin_reading_set_header, 8);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_GETQ:  /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GET:   /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETKQ: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETK:\n            if (extlen == 0 && bodylen == keylen && keylen > 0) {\n                bin_read_key(c, bin_reading_get_key, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_DELETE:\n            if (keylen > 0 && extlen == 0 && bodylen == keylen) {\n                bin_read_key(c, bin_reading_del_header, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_INCREMENT:\n        case PROTOCOL_BINARY_CMD_DECREMENT:\n            if (keylen > 0 && extlen == 20 && bodylen == (keylen + extlen)) {\n                bin_read_key(c, bin_reading_incr_header, 20);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_APPEND:\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            if (keylen > 0 && extlen == 0) {\n                bin_read_key(c, bin_reading_set_header, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_STAT:\n            if (extlen == 0) {\n                bin_read_key(c, bin_reading_stat, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_QUIT:\n            if (keylen == 0 && extlen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n                c->write_and_go = conn_closing;\n                if (c->noreply) {\n                    conn_set_state(c, conn_closing);\n                }\n            } else {\n                protocol_error = 1;\n            }\n            break;\n       case PROTOCOL_BINARY_CMD_TAP_CONNECT:\n            if (settings.engine.v1->get_tap_iterator == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet,\n                               c->binary_header.request.bodylen);\n            }\n            break;\n       case PROTOCOL_BINARY_CMD_TAP_MUTATION:\n       case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START:\n       case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END:\n       case PROTOCOL_BINARY_CMD_TAP_DELETE:\n       case PROTOCOL_BINARY_CMD_TAP_FLUSH:\n       case PROTOCOL_BINARY_CMD_TAP_OPAQUE:\n       case PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET:\n            if (settings.engine.v1->tap_notify == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet, c->binary_header.request.bodylen);\n            }\n            break;\n#ifdef SASL_ENABLED\n        case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                bin_list_sasl_mechs(c);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        case PROTOCOL_BINARY_CMD_SASL_STEP:\n            if (extlen == 0 && keylen != 0) {\n                bin_read_key(c, bin_reading_sasl_auth, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n#endif\n        case PROTOCOL_BINARY_CMD_VERBOSITY:\n            if (extlen == 4 && keylen == 0 && bodylen == 4) {\n                bin_read_chunk(c, bin_reading_packet,\n                               c->binary_header.request.bodylen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        default:\n            if (settings.engine.v1->unknown_command == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND,\n                                bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet, c->binary_header.request.bodylen);\n            }\n    }\n\n    if (protocol_error)\n        handle_binary_protocol_error(c);\n}\n\nstatic void process_bin_update(conn *c) {\n    char *key;\n    uint16_t nkey;\n    uint32_t vlen;\n    item *it;\n    protocol_binary_request_set* req = binary_get_request(c);\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n\n    /* fix byteorder in the request */\n    req->message.body.flags = req->message.body.flags;\n    rel_time_t expiration = ntohl(req->message.body.expiration);\n\n    vlen = c->binary_header.request.bodylen - (nkey + c->binary_header.request.extlen);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        const char *prefix;\n        if (c->cmd == PROTOCOL_BINARY_CMD_ADD) {\n            prefix = \"ADD\";\n        } else if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            prefix = \"SET\";\n        } else {\n            prefix = \"REPLACE\";\n        }\n\n        size_t nw;\n        nw = key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                     prefix, key, nkey);\n\n        if (nw != -1) {\n            if (snprintf(buffer + nw, sizeof(buffer) - nw,\n                         \" Value len is %d\\n\", vlen)) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\",\n                                                buffer);\n            }\n        }\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    item_info info = { .nvalue = 1 };\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen,\n                                           req->message.body.flags,\n                                           expiration);\n        if (ret == ENGINE_SUCCESS && !settings.engine.v1->get_item_info(settings.engine.v0,\n                                                                        c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            return;\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, c->binary_header.request.cas);\n\n        switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_ADD:\n            c->store_op = OPERATION_ADD;\n            break;\n        case PROTOCOL_BINARY_CMD_SET:\n            c->store_op = OPERATION_SET;\n            break;\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            c->store_op = OPERATION_REPLACE;\n            break;\n        default:\n            assert(0);\n        }\n\n        if (c->binary_header.request.cas != 0) {\n            c->store_op = OPERATION_CAS;\n        }\n\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        conn_set_state(c, conn_nread);\n        c->substate = bin_read_set_value;\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_E2BIG, vlen);\n        } else {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        }\n\n        /*\n         * Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET (but only if cas matches).\n         * Anywhere else too?\n         */\n        if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            /* @todo fix this for the ASYNC interface! */\n            settings.engine.v1->remove(settings.engine.v0, c, key, nkey,\n                                       ntohll(req->message.header.request.cas),\n                                       c->binary_header.request.vbucket);\n        }\n\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n    }\n}\n\nstatic void process_bin_append_prepend(conn *c) {\n    char *key;\n    int nkey;\n    int vlen;\n    item *it;\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n    vlen = c->binary_header.request.bodylen - nkey;\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"Value len is %d\\n\", vlen);\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    item_info info = { .nvalue = 1 };\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen, 0, 0);\n        if (ret == ENGINE_SUCCESS && !settings.engine.v1->get_item_info(settings.engine.v0,\n                                                                        c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            return;\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, c->binary_header.request.cas);\n\n        switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_APPEND:\n            c->store_op = OPERATION_APPEND;\n            break;\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            c->store_op = OPERATION_PREPEND;\n            break;\n        default:\n            assert(0);\n        }\n\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        conn_set_state(c, conn_nread);\n        c->substate = bin_read_set_value;\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_E2BIG, vlen);\n        } else {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n    }\n}\n\nstatic void process_bin_flush(conn *c) {\n    time_t exptime = 0;\n    protocol_binary_request_flush* req = binary_get_request(c);\n\n    if (c->binary_header.request.extlen == sizeof(req->message.body)) {\n        exptime = ntohl(req->message.body.expiration);\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"%d: flush %ld\", c->sfd,\n                                        (long)exptime);\n    }\n\n    ENGINE_ERROR_CODE ret;\n    ret = settings.engine.v1->flush(settings.engine.v0, c, exptime);\n\n    if (ret == ENGINE_SUCCESS) {\n        write_bin_response(c, NULL, 0, 0, 0);\n    } else if (ret == ENGINE_ENOTSUP) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n    } else {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n    STATS_NOKEY(c, cmd_flush);\n}\n\nstatic void process_bin_delete(conn *c) {\n    protocol_binary_request_delete* req = binary_get_request(c);\n\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    assert(c != NULL);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"DELETE\", key, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        if (settings.detail_enabled) {\n            stats_prefix_record_delete(key, nkey);\n        }\n        ret = settings.engine.v1->remove(settings.engine.v0, c, key, nkey,\n                                         ntohll(req->message.header.request.cas),\n                                         c->binary_header.request.vbucket);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        write_bin_response(c, NULL, 0, 0, 0);\n        SLAB_INCR(c, delete_hits, key, nkey);\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        STATS_INCR(c, delete_misses, key, nkey);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n}\n\nstatic void complete_nread_binary(conn *c) {\n    assert(c != NULL);\n    assert(c->cmd >= 0);\n\n    switch(c->substate) {\n    case bin_reading_set_header:\n        if (c->cmd == PROTOCOL_BINARY_CMD_APPEND ||\n                c->cmd == PROTOCOL_BINARY_CMD_PREPEND) {\n            process_bin_append_prepend(c);\n        } else {\n            process_bin_update(c);\n        }\n        break;\n    case bin_read_set_value:\n        complete_update_bin(c);\n        break;\n    case bin_reading_get_key:\n        process_bin_get(c);\n        break;\n    case bin_reading_stat:\n        process_bin_stat(c);\n        break;\n    case bin_reading_del_header:\n        process_bin_delete(c);\n        break;\n    case bin_reading_incr_header:\n        complete_incr_bin(c);\n        break;\n    case bin_read_flush_exptime:\n        process_bin_flush(c);\n        break;\n    case bin_reading_sasl_auth:\n        process_bin_sasl_auth(c);\n        break;\n    case bin_reading_sasl_auth_data:\n        process_bin_complete_sasl_auth(c);\n        break;\n    case bin_reading_packet:\n        if (c->binary_header.request.magic == PROTOCOL_BINARY_RES) {\n            RESPONSE_HANDLER handler;\n            handler = response_handlers[c->binary_header.request.opcode];\n            if (handler) {\n                handler(c);\n            } else {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                       \"%d: ERROR: Unsupported response packet received: %u\\n\",\n                        c->sfd, (unsigned int)c->binary_header.request.opcode);\n                conn_set_state(c, conn_closing);\n            }\n        } else {\n            process_bin_packet(c);\n        }\n        break;\n    default:\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                \"Not handling substate %d\\n\", c->substate);\n        abort();\n    }\n}\n\nstatic void reset_cmd_handler(conn *c) {\n    c->sbytes = 0;\n    c->ascii_cmd = NULL;\n    c->cmd = -1;\n    c->substate = bin_no_state;\n    if(c->item != NULL) {\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = NULL;\n    }\n    conn_shrink(c);\n    if (c->rbytes > 0) {\n        conn_set_state(c, conn_parse_cmd);\n    } else {\n        conn_set_state(c, conn_waiting);\n    }\n}\n\nstatic ENGINE_ERROR_CODE ascii_response_handler(const void *cookie,\n                                                int nbytes,\n                                                const char *dta)\n{\n    conn *c = (conn*)cookie;\n    if (!grow_dynamic_buffer(c, nbytes)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                    \"<%d ERROR: Failed to allocate memory for response\\n\",\n                    c->sfd);\n        }\n        return ENGINE_ENOMEM;\n    }\n\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    memcpy(buf, dta, nbytes);\n    c->dynamic_buffer.offset += nbytes;\n\n    return ENGINE_SUCCESS;\n}\n\nstatic void complete_nread_ascii(conn *c) {\n    if (c->ascii_cmd != NULL) {\n        c->ewouldblock = false;\n        switch (c->ascii_cmd->execute(c->ascii_cmd->cookie, c, 0, NULL,\n                                      ascii_response_handler)) {\n        case ENGINE_SUCCESS:\n            if (c->dynamic_buffer.buffer != NULL) {\n                write_and_free(c, c->dynamic_buffer.buffer,\n                               c->dynamic_buffer.offset);\n                c->dynamic_buffer.buffer = NULL;\n            } else {\n                conn_set_state(c, conn_new_cmd);\n            }\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            break;\n        case ENGINE_DISCONNECT:\n        default:\n            conn_set_state(c, conn_closing);\n        }\n    } else {\n        complete_update_ascii(c);\n    }\n}\n\nstatic void complete_nread(conn *c) {\n    assert(c != NULL);\n    assert(c->protocol == ascii_prot\n           || c->protocol == binary_prot);\n\n    if (c->protocol == ascii_prot) {\n        complete_nread_ascii(c);\n    } else if (c->protocol == binary_prot) {\n        complete_nread_binary(c);\n    }\n}\n\n#define COMMAND_TOKEN 0\n#define SUBCOMMAND_TOKEN 1\n#define KEY_TOKEN 1\n\n#define MAX_TOKENS 30\n\n/*\n * Tokenize the command string by replacing whitespace with '\\0' and update\n * the token array tokens with pointer to start of each token and length.\n * Returns total number of tokens.  The last valid token is the terminal\n * token (value points to the first unprocessed character of the string and\n * length zero).\n *\n * Usage example:\n *\n *  while(tokenize_command(command, ncommand, tokens, max_tokens) > 0) {\n *      for(int ix = 0; tokens[ix].length != 0; ix++) {\n *          ...\n *      }\n *      ncommand = tokens[ix].value - command;\n *      command  = tokens[ix].value;\n *   }\n */\nstatic size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {\n    char *s, *e;\n    size_t ntokens = 0;\n\n    assert(command != NULL && tokens != NULL && max_tokens > 1);\n\n    for (s = e = command; ntokens < max_tokens - 1; ++e) {\n        if (*e == ' ') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n                *e = '\\0';\n            }\n            s = e + 1;\n        }\n        else if (*e == '\\0') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n            }\n\n            break; /* string end */\n        }\n    }\n\n    /*\n     * If we scanned the whole string, the terminal value pointer is null,\n     * otherwise it is the first unprocessed character.\n     */\n    tokens[ntokens].value =  *e == '\\0' ? NULL : e;\n    tokens[ntokens].length = 0;\n    ntokens++;\n\n    return ntokens;\n}\n\nstatic void detokenize(token_t *tokens, int ntokens, char **out, int *nbytes) {\n    int i, nb;\n    char *buf, *p;\n\n    nb = ntokens; // account for spaces, which is ntokens-1, plus the null\n    for (i = 0; i < ntokens; ++i) {\n        nb += tokens[i].length;\n    }\n\n    buf = malloc(nb * sizeof(char));\n    if (buf != NULL) {\n        p = buf;\n        for (i = 0; i < ntokens; ++i) {\n            memcpy(p, tokens[i].value, tokens[i].length);\n            p += tokens[i].length;\n            *p = ' ';\n            p++;\n        }\n        buf[nb - 1] = '\\0';\n        *nbytes = nb - 1;\n        *out = buf;\n    }\n}\n\n\n/* set up a connection to write a buffer then free it, used for stats */\nstatic void write_and_free(conn *c, char *buf, int bytes) {\n    if (buf) {\n        c->write_and_free = buf;\n        c->wcurr = buf;\n        c->wbytes = bytes;\n        conn_set_state(c, conn_write);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        out_string(c, \"SERVER_ERROR out of memory writing stats\");\n    }\n}\n\nstatic inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)\n{\n    int noreply_index = ntokens - 2;\n\n    /*\n      NOTE: this function is not the first place where we are going to\n      send the reply.  We could send it instead from process_command()\n      if the request line has wrong number of tokens.  However parsing\n      malformed line for \"noreply\" option is not reliable anyway, so\n      it can't be helped.\n    */\n    if (tokens[noreply_index].value\n        && strcmp(tokens[noreply_index].value, \"noreply\") == 0) {\n        c->noreply = true;\n    }\n    return c->noreply;\n}\n\nvoid append_stat(const char *name, ADD_STAT add_stats, conn *c,\n                 const char *fmt, ...) {\n    char val_str[STAT_VAL_LEN];\n    int vlen;\n    va_list ap;\n\n    assert(name);\n    assert(add_stats);\n    assert(c);\n    assert(fmt);\n\n    va_start(ap, fmt);\n    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);\n    va_end(ap);\n\n    add_stats(name, strlen(name), val_str, vlen, c);\n}\n\ninline static void process_stats_detail(conn *c, const char *command) {\n    assert(c != NULL);\n\n    if (settings.allow_detailed) {\n        if (strcmp(command, \"on\") == 0) {\n            settings.detail_enabled = 1;\n            out_string(c, \"OK\");\n        }\n        else if (strcmp(command, \"off\") == 0) {\n            settings.detail_enabled = 0;\n            out_string(c, \"OK\");\n        }\n        else if (strcmp(command, \"dump\") == 0) {\n            int len;\n            char *stats = stats_prefix_dump(&len);\n            write_and_free(c, stats, len);\n        }\n        else {\n            out_string(c, \"CLIENT_ERROR usage: stats detail on|off|dump\");\n        }\n    }\n    else {\n        out_string(c, \"CLIENT_ERROR detailed stats disabled\");\n    }\n}\n\nstatic void aggregate_callback(void *in, void *out) {\n    struct thread_stats *out_thread_stats = out;\n    struct independent_stats *in_independent_stats = in;\n    threadlocal_stats_aggregate(in_independent_stats->thread_stats,\n                                out_thread_stats);\n}\n\n/* return server specific stats only */\nstatic void server_stats(ADD_STAT add_stats, conn *c, bool aggregate) {\n    pid_t pid = getpid();\n    rel_time_t now = current_time;\n\n    struct thread_stats thread_stats;\n    threadlocal_stats_clear(&thread_stats);\n\n    if (aggregate && settings.engine.v1->aggregate_stats != NULL) {\n        settings.engine.v1->aggregate_stats(settings.engine.v0,\n                                            (const void *)c,\n                                            aggregate_callback,\n                                            &thread_stats);\n    } else {\n        threadlocal_stats_aggregate(get_independent_stats(c)->thread_stats,\n                                    &thread_stats);\n    }\n\n    struct slab_stats slab_stats;\n    slab_stats_aggregate(&thread_stats, &slab_stats);\n\n#ifndef __WIN32__\n    struct rusage usage;\n    getrusage(RUSAGE_SELF, &usage);\n#endif\n\n    STATS_LOCK();\n\n    APPEND_STAT(\"pid\", \"%lu\", (long)pid);\n    APPEND_STAT(\"uptime\", \"%u\", now);\n    APPEND_STAT(\"time\", \"%ld\", now + (long)process_started);\n    APPEND_STAT(\"version\", \"%s\", VERSION);\n    APPEND_STAT(\"libevent\", \"%s\", event_get_version());\n    APPEND_STAT(\"pointer_size\", \"%d\", (int)(8 * sizeof(void *)));\n\n#ifndef __WIN32__\n    append_stat(\"rusage_user\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_utime.tv_sec,\n                (long)usage.ru_utime.tv_usec);\n    append_stat(\"rusage_system\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_stime.tv_sec,\n                (long)usage.ru_stime.tv_usec);\n#endif\n\n    APPEND_STAT(\"daemon_connections\", \"%u\", stats.daemon_conns);\n    APPEND_STAT(\"curr_connections\", \"%u\", stats.curr_conns);\n    APPEND_STAT(\"total_connections\", \"%u\", stats.total_conns);\n    APPEND_STAT(\"connection_structures\", \"%u\", stats.conn_structs);\n    APPEND_STAT(\"cmd_get\", \"%\"PRIu64, thread_stats.cmd_get);\n    APPEND_STAT(\"cmd_set\", \"%\"PRIu64, slab_stats.cmd_set);\n    APPEND_STAT(\"cmd_flush\", \"%\"PRIu64, thread_stats.cmd_flush);\n    APPEND_STAT(\"auth_cmds\", \"%\"PRIu64, thread_stats.auth_cmds);\n    APPEND_STAT(\"auth_errors\", \"%\"PRIu64, thread_stats.auth_errors);\n    APPEND_STAT(\"get_hits\", \"%\"PRIu64, slab_stats.get_hits);\n    APPEND_STAT(\"get_misses\", \"%\"PRIu64, thread_stats.get_misses);\n    APPEND_STAT(\"delete_misses\", \"%\"PRIu64, thread_stats.delete_misses);\n    APPEND_STAT(\"delete_hits\", \"%\"PRIu64, slab_stats.delete_hits);\n    APPEND_STAT(\"incr_misses\", \"%\"PRIu64, thread_stats.incr_misses);\n    APPEND_STAT(\"incr_hits\", \"%\"PRIu64, thread_stats.incr_hits);\n    APPEND_STAT(\"decr_misses\", \"%\"PRIu64, thread_stats.decr_misses);\n    APPEND_STAT(\"decr_hits\", \"%\"PRIu64, thread_stats.decr_hits);\n    APPEND_STAT(\"cas_misses\", \"%\"PRIu64, thread_stats.cas_misses);\n    APPEND_STAT(\"cas_hits\", \"%\"PRIu64, slab_stats.cas_hits);\n    APPEND_STAT(\"cas_badval\", \"%\"PRIu64, slab_stats.cas_badval);\n    APPEND_STAT(\"bytes_read\", \"%\"PRIu64, thread_stats.bytes_read);\n    APPEND_STAT(\"bytes_written\", \"%\"PRIu64, thread_stats.bytes_written);\n    APPEND_STAT(\"limit_maxbytes\", \"%\"PRIu64, settings.maxbytes);\n    APPEND_STAT(\"accepting_conns\", \"%u\",  is_listen_disabled() ? 0 : 1);\n    APPEND_STAT(\"listen_disabled_num\", \"%\"PRIu64, get_listen_disabled_num());\n    APPEND_STAT(\"rejected_conns\", \"%\" PRIu64, (unsigned long long)stats.rejected_conns);\n    APPEND_STAT(\"threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"conn_yields\", \"%\" PRIu64, (unsigned long long)thread_stats.conn_yields);\n    STATS_UNLOCK();\n\n    /*\n     * Add tap stats (only if non-zero)\n     */\n    struct tap_stats ts;\n    pthread_mutex_lock(&tap_stats.mutex);\n    ts = tap_stats;\n    pthread_mutex_unlock(&tap_stats.mutex);\n\n    if (ts.sent.connect) {\n        APPEND_STAT(\"tap_connect_sent\", \"%\"PRIu64, ts.sent.connect);\n    }\n    if (ts.sent.mutation) {\n        APPEND_STAT(\"tap_mutation_sent\", \"%\"PRIu64, ts.sent.mutation);\n    }\n    if (ts.sent.checkpoint_start) {\n        APPEND_STAT(\"tap_checkpoint_start_sent\", \"%\"PRIu64, ts.sent.checkpoint_start);\n    }\n    if (ts.sent.checkpoint_end) {\n        APPEND_STAT(\"tap_checkpoint_end_sent\", \"%\"PRIu64, ts.sent.checkpoint_end);\n    }\n    if (ts.sent.delete) {\n        APPEND_STAT(\"tap_delete_sent\", \"%\"PRIu64, ts.sent.delete);\n    }\n    if (ts.sent.flush) {\n        APPEND_STAT(\"tap_flush_sent\", \"%\"PRIu64, ts.sent.flush);\n    }\n    if (ts.sent.opaque) {\n        APPEND_STAT(\"tap_opaque_sent\", \"%\"PRIu64, ts.sent.opaque);\n    }\n    if (ts.sent.vbucket_set) {\n        APPEND_STAT(\"tap_vbucket_set_sent\", \"%\"PRIu64,\n                    ts.sent.vbucket_set);\n    }\n    if (ts.received.connect) {\n        APPEND_STAT(\"tap_connect_received\", \"%\"PRIu64, ts.received.connect);\n    }\n    if (ts.received.mutation) {\n        APPEND_STAT(\"tap_mutation_received\", \"%\"PRIu64, ts.received.mutation);\n    }\n    if (ts.received.checkpoint_start) {\n        APPEND_STAT(\"tap_checkpoint_start_received\", \"%\"PRIu64, ts.received.checkpoint_start);\n    }\n    if (ts.received.checkpoint_end) {\n        APPEND_STAT(\"tap_checkpoint_end_received\", \"%\"PRIu64, ts.received.checkpoint_end);\n    }\n    if (ts.received.delete) {\n        APPEND_STAT(\"tap_delete_received\", \"%\"PRIu64, ts.received.delete);\n    }\n    if (ts.received.flush) {\n        APPEND_STAT(\"tap_flush_received\", \"%\"PRIu64, ts.received.flush);\n    }\n    if (ts.received.opaque) {\n        APPEND_STAT(\"tap_opaque_received\", \"%\"PRIu64, ts.received.opaque);\n    }\n    if (ts.received.vbucket_set) {\n        APPEND_STAT(\"tap_vbucket_set_received\", \"%\"PRIu64,\n                    ts.received.vbucket_set);\n    }\n}\n\nstatic void process_stat_settings(ADD_STAT add_stats, void *c) {\n    assert(add_stats);\n    APPEND_STAT(\"maxbytes\", \"%u\", (unsigned int)settings.maxbytes);\n    APPEND_STAT(\"maxconns\", \"%d\", settings.maxconns);\n    APPEND_STAT(\"tcpport\", \"%d\", settings.port);\n    APPEND_STAT(\"udpport\", \"%d\", settings.udpport);\n    APPEND_STAT(\"inter\", \"%s\", settings.inter ? settings.inter : \"NULL\");\n    APPEND_STAT(\"verbosity\", \"%d\", settings.verbose);\n    APPEND_STAT(\"oldest\", \"%lu\", (unsigned long)settings.oldest_live);\n    APPEND_STAT(\"evictions\", \"%s\", settings.evict_to_free ? \"on\" : \"off\");\n    APPEND_STAT(\"domain_socket\", \"%s\",\n                settings.socketpath ? settings.socketpath : \"NULL\");\n    APPEND_STAT(\"umask\", \"%o\", settings.access);\n    APPEND_STAT(\"growth_factor\", \"%.2f\", settings.factor);\n    APPEND_STAT(\"chunk_size\", \"%d\", settings.chunk_size);\n    APPEND_STAT(\"num_threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"num_threads_per_udp\", \"%d\", settings.num_threads_per_udp);\n    APPEND_STAT(\"stat_key_prefix\", \"%c\", settings.prefix_delimiter);\n    APPEND_STAT(\"detail_enabled\", \"%s\",\n                settings.detail_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"allow_detailed\", \"%s\",\n                settings.allow_detailed ? \"yes\" : \"no\");\n    APPEND_STAT(\"reqs_per_event\", \"%d\", settings.reqs_per_event);\n    APPEND_STAT(\"reqs_per_tap_event\", \"%d\", settings.reqs_per_tap_event);\n    APPEND_STAT(\"cas_enabled\", \"%s\", settings.use_cas ? \"yes\" : \"no\");\n    APPEND_STAT(\"tcp_backlog\", \"%d\", settings.backlog);\n    APPEND_STAT(\"binding_protocol\", \"%s\",\n                prot_text(settings.binding_protocol));\n#ifdef SASL_ENABLED\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", \"yes\");\n#else\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", \"no\");\n#endif\n\n#ifdef ENABLE_ISASL\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"isasl\");\n#elif defined(ENABLE_SASL)\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"cyrus\");\n#else\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"none\");\n#endif\n    APPEND_STAT(\"auth_required_sasl\", \"%s\", settings.require_sasl ? \"yes\" : \"no\");\n    APPEND_STAT(\"item_size_max\", \"%d\", settings.item_size_max);\n    APPEND_STAT(\"topkeys\", \"%d\", settings.topkeys);\n\n    for (EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n         ptr != NULL;\n         ptr = ptr->next) {\n        APPEND_STAT(\"extension\", \"%s\", ptr->get_name());\n    }\n\n    APPEND_STAT(\"logger\", \"%s\", settings.extensions.logger->get_name());\n\n    for (EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *ptr = settings.extensions.ascii;\n         ptr != NULL;\n         ptr = ptr->next) {\n        APPEND_STAT(\"ascii_extension\", \"%s\", ptr->get_name(ptr->cookie));\n    }\n}\n\nstatic char *process_stat(conn *c, token_t *tokens, const size_t ntokens) {\n    const char *subcommand = tokens[SUBCOMMAND_TOKEN].value;\n    c->dynamic_buffer.offset = 0;\n\n    if (ntokens == 2) {\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            server_stats(&append_stats, c, false);\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c,\n                                                NULL, 0, &append_stats);\n            if (ret == ENGINE_EWOULDBLOCK) {\n                c->ewouldblock = true;\n                return c->rcurr + 5;\n            }\n        }\n    } else if (strcmp(subcommand, \"reset\") == 0) {\n        stats_reset(c);\n        out_string(c, \"RESET\");\n        return NULL;\n    } else if (strcmp(subcommand, \"detail\") == 0) {\n        /* NOTE: how to tackle detail with binary? */\n        if (ntokens < 4) {\n            process_stats_detail(c, \"\");  /* outputs the error message */\n        } else {\n            process_stats_detail(c, tokens[2].value);\n        }\n        /* Output already generated */\n        return NULL;\n    } else if (strcmp(subcommand, \"settings\") == 0) {\n        process_stat_settings(&append_stats, c);\n    } else if (strcmp(subcommand, \"cachedump\") == 0) {\n        char *buf = NULL;\n        unsigned int bytes = 0, id, limit = 0;\n\n        if (ntokens < 5) {\n            out_string(c, \"CLIENT_ERROR bad command line\");\n            return NULL;\n        }\n\n        if (!safe_strtoul(tokens[2].value, &id) ||\n            !safe_strtoul(tokens[3].value, &limit)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return NULL;\n        }\n\n        if (id >= POWER_LARGEST) {\n            out_string(c, \"CLIENT_ERROR Illegal slab id\");\n            return NULL;\n        }\n\n#ifdef FUTURE\n        buf = item_cachedump(id, limit, &bytes);\n#endif\n        write_and_free(c, buf, bytes);\n        return NULL;\n    } else if (strcmp(subcommand, \"aggregate\") == 0) {\n        server_stats(&append_stats, c, true);\n    } else if (strcmp(subcommand, \"topkeys\") == 0) {\n        topkeys_t *tk = get_independent_stats(c)->topkeys;\n        if (tk != NULL) {\n            topkeys_stats(tk, c, current_time, append_stats);\n        } else {\n            out_string(c, \"ERROR\");\n            return NULL;\n        }\n    } else {\n        /* getting here means that the subcommand is either engine specific or\n           is invalid. query the engine and see. */\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            char *buf = NULL;\n            int nb = -1;\n            detokenize(&tokens[1], ntokens - 2, &buf, &nb);\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c, buf,\n                                                nb, append_stats);\n            free(buf);\n        }\n\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            append_stats(NULL, 0, NULL, 0, c);\n            write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n            c->dynamic_buffer.buffer = NULL;\n            break;\n        case ENGINE_ENOMEM:\n            out_string(c, \"SERVER_ERROR out of memory writing stats\");\n            break;\n        case ENGINE_DISCONNECT:\n            c->state = conn_closing;\n            break;\n        case ENGINE_ENOTSUP:\n            out_string(c, \"SERVER_ERROR not supported\");\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            return tokens[SUBCOMMAND_TOKEN].value;\n        default:\n            out_string(c, \"ERROR\");\n            break;\n        }\n\n        return NULL;\n    }\n\n    /* append terminator and start the transfer */\n    append_stats(NULL, 0, NULL, 0, c);\n\n    if (c->dynamic_buffer.buffer == NULL) {\n        out_string(c, \"SERVER_ERROR out of memory writing stats\");\n    } else {\n        write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n        c->dynamic_buffer.buffer = NULL;\n    }\n\n    return NULL;\n}\n\n/**\n * Get a suffix buffer and insert it into the list of used suffix buffers\n * @param c the connection object\n * @return a pointer to a new suffix buffer or NULL if allocation failed\n */\nstatic char *get_suffix_buffer(conn *c) {\n    if (c->suffixleft == c->suffixsize) {\n        char **new_suffix_list;\n        size_t sz = sizeof(char*) * c->suffixsize * 2;\n\n        new_suffix_list = realloc(c->suffixlist, sz);\n        if (new_suffix_list) {\n            c->suffixsize *= 2;\n            c->suffixlist = new_suffix_list;\n        } else {\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                        \"=%d Failed to resize suffix buffer\\n\", c->sfd);\n            }\n\n            return NULL;\n        }\n    }\n\n    char *suffix = cache_alloc(c->thread->suffix_cache);\n    if (suffix != NULL) {\n        *(c->suffixlist + c->suffixleft) = suffix;\n        ++c->suffixleft;\n    }\n\n    return suffix;\n}\n\n/* ntokens is overwritten here... shrug.. */\nstatic inline char* process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {\n    char *key;\n    size_t nkey;\n    int i = c->ileft;\n    item *it;\n    token_t *key_token = &tokens[KEY_TOKEN];\n    assert(c != NULL);\n\n    /* We temporarily block the mgets commands till wl6650 checked in. */\n    if ((key_token + 1)->length > 0) {\n\tout_string(c, \"We temporarily don't support multiple get option.\");\n\treturn NULL;\n    }\n\n    do {\n        while(key_token->length != 0) {\n\n            key = key_token->value;\n            nkey = key_token->length;\n\n            if(nkey > KEY_MAX_LENGTH) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return NULL;\n            }\n\n            ENGINE_ERROR_CODE ret = c->aiostat;\n            c->aiostat = ENGINE_SUCCESS;\n\n            if (ret == ENGINE_SUCCESS) {\n                ret = settings.engine.v1->get(settings.engine.v0, c, &it, key, nkey, 0);\n            }\n\n            switch (ret) {\n            case ENGINE_EWOULDBLOCK:\n                c->ewouldblock = true;\n                c->ileft = i;\n                return key;\n\n            case ENGINE_SUCCESS:\n                break;\n            case ENGINE_KEY_ENOENT:\n            default:\n                it = NULL;\n                break;\n            }\n\n            if (settings.detail_enabled) {\n                stats_prefix_record_get(key, nkey, NULL != it);\n            }\n\n            if (it) {\n                item_info info = { .nvalue = 1 };\n                if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it,\n                                                       &info)) {\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    out_string(c, \"SERVER_ERROR error getting item data\");\n                    break;\n                }\n\n                if (i >= c->isize) {\n                    item **new_list = realloc(c->ilist, sizeof(item *) * c->isize * 2);\n                    if (new_list) {\n                        c->isize *= 2;\n                        c->ilist = new_list;\n                    } else {\n                        settings.engine.v1->release(settings.engine.v0, c, it);\n                        break;\n                    }\n                }\n\n                /* Rebuild the suffix */\n                char *suffix = get_suffix_buffer(c);\n                if (suffix == NULL) {\n                    out_string(c, \"SERVER_ERROR out of memory rebuilding suffix\");\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    return NULL;\n                }\n                int suffix_len = snprintf(suffix, SUFFIX_SIZE,\n                                          \" %u %u\\r\\n\", htonl(info.flags),\n                                          info.nbytes);\n\n                /*\n                 * Construct the response. Each hit adds three elements to the\n                 * outgoing data list:\n                 *   \"VALUE \"\n                 *   key\n                 *   \" \" + flags + \" \" + data length + \"\\r\\n\" + data (with \\r\\n)\n                 */\n\n                MEMCACHED_COMMAND_GET(c->sfd, info.key, info.nkey,\n                                      info.nbytes, info.cas);\n                if (return_cas)\n                {\n\n                  char *cas = get_suffix_buffer(c);\n                  if (cas == NULL) {\n                    out_string(c, \"SERVER_ERROR out of memory making CAS suffix\");\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    return NULL;\n                  }\n                  int cas_len = snprintf(cas, SUFFIX_SIZE, \" %\"PRIu64\"\\r\\n\",\n                                         info.cas);\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, info.key, info.nkey) != 0 ||\n                      add_iov(c, suffix, suffix_len - 2) != 0 ||\n                      add_iov(c, cas, cas_len) != 0 ||\n                      add_iov(c, info.value[0].iov_base, info.value[0].iov_len) != 0 ||\n                      add_iov(c, \"\\r\\n\", 2) != 0)\n                      {\n                          settings.engine.v1->release(settings.engine.v0, c, it);\n                          break;\n                      }\n                }\n                else\n                {\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, info.key, info.nkey) != 0 ||\n                      add_iov(c, suffix, suffix_len) != 0 ||\n                      add_iov(c, info.value[0].iov_base, info.value[0].iov_len) != 0 ||\n                      add_iov(c, \"\\r\\n\", 2) != 0)\n                      {\n                          settings.engine.v1->release(settings.engine.v0, c, it);\n                          break;\n                      }\n                }\n\n\n                if (settings.verbose > 1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                    \">%d sending key %s\\n\",\n                                                    c->sfd, info.key);\n                }\n\n                /* item_get() has incremented it->refcount for us */\n                STATS_HIT(c, get, key, nkey);\n                *(c->ilist + i) = it;\n                i++;\n\n            } else {\n                STATS_MISS(c, get, key, nkey);\n                MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n            }\n\n            key_token++;\n        }\n\n        /*\n         * If the command string hasn't been fully processed, get the next set\n         * of tokens.\n         */\n        if(key_token->value != NULL) {\n            ntokens = tokenize_command(key_token->value, tokens, MAX_TOKENS);\n            key_token = tokens;\n        }\n\n    } while(key_token->value != NULL);\n\n    c->icurr = c->ilist;\n    c->ileft = i;\n    c->suffixcurr = c->suffixlist;\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d END\\n\", c->sfd);\n    }\n\n    /*\n        If the loop was terminated because of out-of-memory, it is not\n        reliable to add END\\r\\n to the buffer, because it might not end\n        in \\r\\n. So we send SERVER_ERROR instead.\n    */\n    if (key_token->value != NULL || add_iov(c, \"END\\r\\n\", 5) != 0\n        || (IS_UDP(c->transport) && build_udp_headers(c) != 0)) {\n        out_string(c, \"SERVER_ERROR out of memory writing get response\");\n    }\n    else {\n        conn_set_state(c, conn_mwrite);\n        c->msgcurr = 0;\n    }\n\n    return NULL;\n}\n\nstatic void process_update_command(conn *c, token_t *tokens, const size_t ntokens, ENGINE_STORE_OPERATION store_op, bool handle_cas) {\n    char *key;\n    size_t nkey;\n    unsigned int flags;\n    int32_t exptime_int = 0;\n    time_t exptime;\n    int vlen;\n    uint64_t req_cas_id=0;\n    item *it;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (! (safe_strtoul(tokens[2].value, (uint32_t *)&flags)\n           && safe_strtol(tokens[3].value, &exptime_int)\n           && safe_strtol(tokens[4].value, (int32_t *)&vlen))) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    /* Negative expire values not allowed */\n\n    if (exptime_int < 0) {\n        out_string(c, \"CLIENT_ERROR Invalid expire time\");\n        return;\n    }\n\n    /* Ubuntu 8.04 breaks when I pass exptime to safe_strtol */\n    exptime = exptime_int;\n\n    // does cas value exist?\n    if (handle_cas) {\n        if (!safe_strtoull(tokens[5].value, &req_cas_id)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return;\n        }\n    }\n\n    if (vlen < 0) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen, htonl(flags), exptime);\n    }\n\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, req_cas_id);\n        if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            out_string(c, \"SERVER_ERROR error getting item data\");\n            break;\n        }\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        c->store_op = store_op;\n        conn_set_state(c, conn_nread);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            out_string(c, \"SERVER_ERROR object too large for cache\");\n        } else {\n            out_string(c, \"SERVER_ERROR out of memory storing object\");\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        c->sbytes = vlen + 2;\n\n        /* Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET. Anywhere else too? */\n        if (store_op == OPERATION_SET) {\n            settings.engine.v1->remove(settings.engine.v0, c, key, nkey, 0, 0);\n        }\n    }\n}\n\nstatic char* process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {\n\n    uint64_t delta;\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (!safe_strtoull(tokens[2].value, &delta)) {\n        out_string(c, \"CLIENT_ERROR invalid numeric delta argument\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    uint64_t cas;\n    uint64_t result;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->arithmetic(settings.engine.v0, c, key, nkey,\n                                             incr, false, delta, 0, 0, &cas,\n                                             &result, 0);\n    }\n\n    char temp[INCR_MAX_STORAGE_LEN];\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        if (incr) {\n            STATS_INCR(c, incr_hits, key, nkey);\n        } else {\n            STATS_INCR(c, decr_hits, key, nkey);\n        }\n        snprintf(temp, sizeof(temp), \"%\"PRIu64, result);\n        out_string(c, temp);\n        break;\n    case ENGINE_KEY_ENOENT:\n        if (incr) {\n            STATS_INCR(c, incr_misses, key, nkey);\n        } else {\n            STATS_INCR(c, decr_misses, key, nkey);\n        }\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case ENGINE_ENOMEM:\n        out_string(c, \"SERVER_ERROR out of memory\");\n        break;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    case ENGINE_EINVAL:\n        out_string(c, \"CLIENT_ERROR cannot increment or decrement non-numeric value\");\n        break;\n    case ENGINE_NOT_STORED:\n        out_string(c, \"SERVER_ERROR failed to store item\");\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        out_string(c, \"SERVER_ERROR not supported\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return key;\n    default:\n        abort();\n    }\n\n    return NULL;\n}\n\nstatic char *process_delete_command(conn *c, token_t *tokens,\n                                    const size_t ntokens) {\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    if (ntokens > 3) {\n        bool hold_is_zero = strcmp(tokens[KEY_TOKEN+1].value, \"0\") == 0;\n        bool sets_noreply = set_noreply_maybe(c, tokens, ntokens);\n        bool valid = (ntokens == 4 && (hold_is_zero || sets_noreply))\n            || (ntokens == 5 && hold_is_zero && sets_noreply);\n        if (!valid) {\n            out_string(c, \"CLIENT_ERROR bad command line format.  \"\n                       \"Usage: delete <key> [noreply]\");\n            return NULL;\n        }\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (nkey > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->remove(settings.engine.v0, c,\n                                         key, nkey, 0, 0);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"DELETED\");\n        SLAB_INCR(c, delete_hits, key, nkey);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return key;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    default:\n        out_string(c, \"NOT_FOUND\");\n        STATS_INCR(c, delete_misses, key, nkey);\n    }\n\n    if (ret != ENGINE_EWOULDBLOCK && settings.detail_enabled) {\n        stats_prefix_record_delete(key, nkey);\n    }\n    return NULL;\n}\n\nstatic char *process_bind_command(conn *c, token_t *tokens,\n                                  const size_t ntokens) {\n    char *name;\n    size_t name_len;\n\n    assert(c != NULL);\n\n    if (ntokens > 3) {\n        out_string(c, \"CLIENT_ERROR bad command line format.  \"\n                      \"Usage: bind <table_id_name>\");\n        return NULL;\n    }\n\n    name = tokens[KEY_TOKEN].value;\n    name_len = tokens[KEY_TOKEN].length;\n\n    if (name_len > KEY_MAX_LENGTH || name_len == 0) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->bind(settings.engine.v0, c,\n                                       name, name_len);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"SUCCEED\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return name;\n    case ENGINE_TMPFAIL:\n    default:\n        out_string(c, \"NOT_FOUND\");\n    }\n\n    return NULL;\n}\n\nstatic void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {\n    unsigned int level;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n    if (c->noreply && ntokens == 3) {\n        /* \"verbosity noreply\" is not according to the correct syntax */\n        c->noreply = false;\n        out_string(c, \"ERROR\");\n        return;\n    }\n\n    if (safe_strtoul(tokens[1].value, &level)) {\n        settings.verbose = level > MAX_VERBOSITY_LEVEL ? MAX_VERBOSITY_LEVEL : level;\n        perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n        out_string(c, \"OK\");\n    } else {\n        out_string(c, \"ERROR\");\n    }\n}\n\nstatic char* process_command(conn *c, char *command) {\n\n    token_t tokens[MAX_TOKENS];\n    size_t ntokens;\n    int comm;\n    char *ret = NULL;\n\n    assert(c != NULL);\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"<%d %s\\n\", c->sfd, command);\n    }\n\n    /*\n     * for commands set/add/replace, we build an item and read the data\n     * directly into it, then continue in nread_complete().\n     */\n\n    if (c->ewouldblock) {\n        /*\n         * If we are retrying after the engine has completed a pending io for\n         * this command, skip add_msghdr() etc and clear the ewouldblock flag.\n         */\n        c->ewouldblock = false;\n    } else {\n        c->msgcurr = 0;\n        c->msgused = 0;\n        c->iovused = 0;\n        if (add_msghdr(c) != 0) {\n            out_string(c, \"SERVER_ERROR out of memory preparing response\");\n            return NULL;\n        }\n    }\n\n    ntokens = tokenize_command(command, tokens, MAX_TOKENS);\n    if (ntokens >= 3 &&\n        ((strcmp(tokens[COMMAND_TOKEN].value, \"get\") == 0) ||\n         (strcmp(tokens[COMMAND_TOKEN].value, \"bget\") == 0))) {\n\n        ret = process_get_command(c, tokens, ntokens, false);\n\n    } else if ((ntokens == 6 || ntokens == 7) &&\n               ((strcmp(tokens[COMMAND_TOKEN].value, \"add\") == 0 && (comm = (int)OPERATION_ADD)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"set\") == 0 && (comm = (int)OPERATION_SET)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"replace\") == 0 && (comm = (int)OPERATION_REPLACE)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"prepend\") == 0 && (comm = (int)OPERATION_PREPEND)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"append\") == 0 && (comm = (int)OPERATION_APPEND)) )) {\n\n        process_update_command(c, tokens, ntokens, (ENGINE_STORE_OPERATION)comm, false);\n\n    } else if ((ntokens == 7 || ntokens == 8) && (strcmp(tokens[COMMAND_TOKEN].value, \"cas\") == 0 && (comm = (int)OPERATION_CAS))) {\n\n        process_update_command(c, tokens, ntokens, (ENGINE_STORE_OPERATION)comm, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"incr\") == 0)) {\n\n        ret = process_arithmetic_command(c, tokens, ntokens, 1);\n\n    } else if (ntokens >= 3 && (strcmp(tokens[COMMAND_TOKEN].value, \"gets\") == 0)) {\n\n        ret = process_get_command(c, tokens, ntokens, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"decr\") == 0)) {\n\n        ret = process_arithmetic_command(c, tokens, ntokens, 0);\n\n    } else if (ntokens >= 3 && ntokens <= 5 && (strcmp(tokens[COMMAND_TOKEN].value, \"delete\") == 0)) {\n\n        ret = process_delete_command(c, tokens, ntokens);\n\n    } else if (ntokens == 3 && (strcmp(tokens[COMMAND_TOKEN].value, \"bind\") == 0)) {\n\n        ret = process_bind_command(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"stats\") == 0)) {\n\n        ret = process_stat(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && ntokens <= 4 && (strcmp(tokens[COMMAND_TOKEN].value, \"flush_all\") == 0)) {\n        time_t exptime;\n\n        set_noreply_maybe(c, tokens, ntokens);\n\n        if (ntokens == (c->noreply ? 3 : 2)) {\n            exptime = 0;\n        } else {\n            exptime = strtol(tokens[1].value, NULL, 10);\n            if(errno == ERANGE) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return NULL;\n            }\n        }\n\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            ret = settings.engine.v1->flush(settings.engine.v0, c, exptime);\n        }\n\n        switch (ret) {\n        case  ENGINE_SUCCESS:\n            out_string(c, \"OK\");\n            break;\n        case ENGINE_ENOTSUP:\n            out_string(c, \"SERVER_ERROR not supported\");\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            return c->rcurr + 9;\n        default:\n            out_string(c, \"SERVER_ERROR failed to flush cache\");\n        }\n\n        if (ret != ENGINE_EWOULDBLOCK) {\n            STATS_NOKEY(c, cmd_flush);\n        }\n        return NULL;\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"version\") == 0)) {\n\n        out_string(c, \"VERSION \" VERSION);\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"quit\") == 0)) {\n\n        conn_set_state(c, conn_closing);\n\n    } else if ((ntokens == 3 || ntokens == 4) && (strcmp(tokens[COMMAND_TOKEN].value, \"verbosity\") == 0)) {\n        process_verbosity_command(c, tokens, ntokens);\n    } else if (settings.extensions.ascii != NULL) {\n        EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *cmd;\n        size_t nbytes = 0;\n        char *ptr;\n\n        if (ntokens > 0) {\n            if (ntokens == MAX_TOKENS) {\n                out_string(c, \"ERROR too many arguments\");\n                return NULL;\n            }\n\n            if (tokens[ntokens - 1].length == 0) {\n                --ntokens;\n            }\n        }\n\n        for (cmd = settings.extensions.ascii; cmd != NULL; cmd = cmd->next) {\n            if (cmd->accept(cmd->cookie, c, ntokens, tokens, &nbytes, &ptr)) {\n                break;\n            }\n        }\n\n        if (cmd == NULL) {\n            out_string(c, \"ERROR unknown command\");\n        } else if (nbytes == 0) {\n            switch (cmd->execute(cmd->cookie, c, ntokens, tokens,\n                                 ascii_response_handler)) {\n            case ENGINE_SUCCESS:\n                if (c->dynamic_buffer.buffer != NULL) {\n                    write_and_free(c, c->dynamic_buffer.buffer,\n                                   c->dynamic_buffer.offset);\n                    c->dynamic_buffer.buffer = NULL;\n                } else {\n                    conn_set_state(c, conn_new_cmd);\n                }\n                break;\n            case ENGINE_EWOULDBLOCK:\n                c->ewouldblock = true;\n                ret = tokens[KEY_TOKEN].value;;\n                break;\n            case ENGINE_DISCONNECT:\n            default:\n                conn_set_state(c, conn_closing);\n\n            }\n        } else {\n            c->rlbytes = nbytes;\n            c->ritem = ptr;\n            c->ascii_cmd = cmd;\n            /* NOT SUPPORTED YET! */\n            conn_set_state(c, conn_nread);\n        }\n    } else {\n        out_string(c, \"ERROR\");\n    }\n    return ret;\n}\n\n/*\n * if we have a complete line in the buffer, process it.\n */\nstatic int try_read_command(conn *c) {\n    assert(c != NULL);\n    assert(c->rcurr <= (c->rbuf + c->rsize));\n    assert(c->rbytes > 0);\n\n    if (c->protocol == negotiating_prot || c->transport == udp_transport)  {\n        if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {\n            c->protocol = binary_prot;\n        } else {\n            c->protocol = ascii_prot;\n        }\n\n        if (settings.verbose > 1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                    \"%d: Client using the %s protocol\\n\", c->sfd,\n                    prot_text(c->protocol));\n        }\n    }\n\n    if (c->protocol == binary_prot) {\n        /* Do we have the complete packet header? */\n        if (c->rbytes < sizeof(c->binary_header)) {\n            /* need more data! */\n            return 0;\n        } else {\n#ifdef NEED_ALIGN\n            if (((long)(c->rcurr)) % 8 != 0) {\n                /* must realign input buffer */\n                memmove(c->rbuf, c->rcurr, c->rbytes);\n                c->rcurr = c->rbuf;\n                if (settings.verbose > 1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                             \"%d: Realign input buffer\\n\", c->sfd);\n                }\n            }\n#endif\n            protocol_binary_request_header* req;\n            req = (protocol_binary_request_header*)c->rcurr;\n\n            if (settings.verbose > 1) {\n                /* Dump the packet before we convert it to host order */\n                char buffer[1024];\n                ssize_t nw;\n                nw = bytes_to_output_string(buffer, sizeof(buffer), c->sfd,\n                                            true, \"Read binary protocol data:\",\n                                            (const char*)req->bytes,\n                                            sizeof(req->bytes));\n                if (nw != -1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                    \"%s\", buffer);\n                }\n            }\n\n            c->binary_header = *req;\n            c->binary_header.request.keylen = ntohs(req->request.keylen);\n            c->binary_header.request.bodylen = ntohl(req->request.bodylen);\n            c->binary_header.request.vbucket = ntohs(req->request.vbucket);\n            c->binary_header.request.cas = ntohll(req->request.cas);\n\n\n            if (c->binary_header.request.magic != PROTOCOL_BINARY_REQ &&\n                !(c->binary_header.request.magic == PROTOCOL_BINARY_RES &&\n                  response_handlers[c->binary_header.request.opcode])) {\n                if (settings.verbose) {\n                    if (c->binary_header.request.magic != PROTOCOL_BINARY_RES) {\n                        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                              \"%d: Invalid magic:  %x\\n\", c->sfd,\n                              c->binary_header.request.magic);\n                    } else {\n                        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                              \"%d: ERROR: Unsupported response packet received: %u\\n\",\n                              c->sfd, (unsigned int)c->binary_header.request.opcode);\n\n                    }\n                }\n                conn_set_state(c, conn_closing);\n                return -1;\n            }\n\n            c->msgcurr = 0;\n            c->msgused = 0;\n            c->iovused = 0;\n            if (add_msghdr(c) != 0) {\n                out_string(c, \"SERVER_ERROR out of memory\");\n                return 0;\n            }\n\n            c->cmd = c->binary_header.request.opcode;\n            c->keylen = c->binary_header.request.keylen;\n            c->opaque = c->binary_header.request.opaque;\n            /* clear the returned cas value */\n            c->cas = 0;\n\n            dispatch_bin_command(c);\n\n            c->rbytes -= sizeof(c->binary_header);\n            c->rcurr += sizeof(c->binary_header);\n        }\n    } else {\n        char *el, *cont, *left, lb;\n\n        if (c->rbytes == 0) {\n            return 0;\n        }\n\n        el = memchr(c->rcurr, '\\n', c->rbytes);\n        if (!el) {\n            if (c->rbytes > 1024) {\n                /*\n                 * We didn't have a '\\n' in the first k. This _has_ to be a\n                 * large multiget, if not we should just nuke the connection.\n                 */\n                char *ptr = c->rcurr;\n                while (*ptr == ' ') { /* ignore leading whitespaces */\n                    ++ptr;\n                }\n\n                if (ptr - c->rcurr > 100 ||\n                    (strncmp(ptr, \"get \", 4) && strncmp(ptr, \"gets \", 5))) {\n\n                    conn_set_state(c, conn_closing);\n                    return 1;\n                }\n            }\n\n            return 0;\n        }\n        cont = el + 1;\n        if ((el - c->rcurr) > 1 && *(el - 1) == '\\r') {\n            el--;\n        }\n        lb = *el;\n        *el = '\\0';\n\n        assert(cont <= (c->rcurr + c->rbytes));\n\n        LIBEVENT_THREAD *thread = c->thread;\n        LOCK_THREAD(thread);\n        left = process_command(c, c->rcurr);\n        if (c->ewouldblock) {\n            unregister_event(c);\n        }\n        UNLOCK_THREAD(thread);\n\n        if (left != NULL) {\n            /*\n             * We have not processed the entire command. This happens\n             * when the engine returns ENGINE_EWOULDBLOCK for one of the\n             * keys in a get/gets request.\n             */\n            assert (left <= el);\n\n            int count = strlen(c->rcurr);\n            if ((c->rcurr + count) == left) {\n                // Retry the entire command\n                cont = c->rcurr;\n            } else {\n                left -= (count + 1);\n                cont = left;\n                assert(cont >= c->rcurr);\n                if (cont > c->rcurr) {\n                    memmove(cont, c->rcurr, count);\n                }\n            }\n\n            /* de-tokenize the command */\n            while ((left = memchr(left, '\\0', el - left)) != NULL) {\n                *left = ' ';\n            }\n            *el = lb;\n        }\n\n        c->rbytes -= (cont - c->rcurr);\n        c->rcurr = cont;\n\n        assert(c->rcurr <= (c->rbuf + c->rsize));\n    }\n\n    return 1;\n}\n\n/*\n * read a UDP request.\n */\nstatic enum try_read_result try_read_udp(conn *c) {\n    int res;\n\n    assert(c != NULL);\n\n    c->request_addr_size = sizeof(c->request_addr);\n    res = recvfrom(c->sfd, c->rbuf, c->rsize,\n                   0, (struct sockaddr *)&c->request_addr, &c->request_addr_size);\n    if (res > 8) {\n        unsigned char *buf = (unsigned char *)c->rbuf;\n        STATS_ADD(c, bytes_read, res);\n\n        /* Beginning of UDP packet is the request ID; save it. */\n        c->request_id = buf[0] * 256 + buf[1];\n\n        /* If this is a multi-packet request, drop it. */\n        if (buf[4] != 0 || buf[5] != 1) {\n            out_string(c, \"SERVER_ERROR multi-packet request not supported\");\n            return READ_NO_DATA_RECEIVED;\n        }\n\n        /* Don't care about any of the rest of the header. */\n        res -= 8;\n        memmove(c->rbuf, c->rbuf + 8, res);\n\n        c->rbytes += res;\n        c->rcurr = c->rbuf;\n        return READ_DATA_RECEIVED;\n    }\n    return READ_NO_DATA_RECEIVED;\n}\n\n/*\n * read from network as much as we can, handle buffer overflow and connection\n * close.\n * before reading, move the remaining incomplete fragment of a command\n * (if any) to the beginning of the buffer.\n *\n * To protect us from someone flooding a connection with bogus data causing\n * the connection to eat up all available memory, break out and start looking\n * at the data I've got after a number of reallocs...\n *\n * @return enum try_read_result\n */\nstatic enum try_read_result try_read_network(conn *c) {\n    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;\n    int res;\n    int num_allocs = 0;\n    assert(c != NULL);\n\n    if (c->rcurr != c->rbuf) {\n        if (c->rbytes != 0) /* otherwise there's nothing to copy */\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n        c->rcurr = c->rbuf;\n    }\n\n    while (1) {\n        if (c->rbytes >= c->rsize) {\n            if (num_allocs == 4) {\n                return gotdata;\n            }\n            ++num_allocs;\n            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);\n            if (!new_rbuf) {\n                if (settings.verbose > 0) {\n                 settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                          \"Couldn't realloc input buffer\\n\");\n                }\n                c->rbytes = 0; /* ignore what we read */\n                out_string(c, \"SERVER_ERROR out of memory reading request\");\n                c->write_and_go = conn_closing;\n                return READ_MEMORY_ERROR;\n            }\n            c->rcurr = c->rbuf = new_rbuf;\n            c->rsize *= 2;\n        }\n\n        int avail = c->rsize - c->rbytes;\n        res = recv(c->sfd, c->rbuf + c->rbytes, avail, 0);\n        if (res > 0) {\n            STATS_ADD(c, bytes_read, res);\n            gotdata = READ_DATA_RECEIVED;\n            c->rbytes += res;\n            if (res == avail) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        if (res == 0) {\n            return READ_ERROR;\n        }\n        if (res == -1) {\n            if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                break;\n            }\n            return READ_ERROR;\n        }\n    }\n    return gotdata;\n}\n\nbool register_event(conn *c, struct timeval *timeout) {\n#ifdef DEBUG\n    assert(!c->registered_in_libevent);\n#endif\n\n    if (event_add(&c->event, timeout) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING,\n                                        NULL,\n                                        \"Failed to add connection to libevent: %s\",\n                                        strerror(errno));\n        return false;\n    }\n\n#ifdef DEBUG\n    c->registered_in_libevent = true;\n#endif\n\n    return true;\n}\n\nbool unregister_event(conn *c) {\n#ifdef DEBUG\n    assert(c->registered_in_libevent);\n#endif\n\n    if (event_del(&c->event) == -1) {\n        return false;\n    }\n\n#ifdef DEBUG\n    c->registered_in_libevent = false;\n#endif\n\n    return true;\n}\n\n\nbool update_event(conn *c, const int new_flags) {\n    assert(c != NULL);\n\n    struct event_base *base = c->event.ev_base;\n    if (c->ev_flags == new_flags)\n        return true;\n\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                    \"Updated event for %d to read=%s, write=%s\\n\",\n                                    c->sfd, (new_flags & EV_READ ? \"yes\" : \"no\"),\n                                    (new_flags & EV_WRITE ? \"yes\" : \"no\"));\n\n    if (!unregister_event(c)) {\n        return false;\n    }\n\n    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = new_flags;\n\n    return register_event(c, NULL);\n}\n\n/*\n * Transmit the next chunk of data from our list of msgbuf structures.\n *\n * Returns:\n *   TRANSMIT_COMPLETE   All done writing.\n *   TRANSMIT_INCOMPLETE More data remaining to write.\n *   TRANSMIT_SOFT_ERROR Can't write any more right now.\n *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)\n */\nstatic enum transmit_result transmit(conn *c) {\n    assert(c != NULL);\n\n    if (c->msgcurr < c->msgused &&\n            c->msglist[c->msgcurr].msg_iovlen == 0) {\n        /* Finished writing the current msg; advance to the next. */\n        c->msgcurr++;\n    }\n    if (c->msgcurr < c->msgused) {\n        ssize_t res;\n        struct msghdr *m = &c->msglist[c->msgcurr];\n\n        res = sendmsg(c->sfd, m, 0);\n        if (res > 0) {\n            STATS_ADD(c, bytes_written, res);\n\n            /* We've written some of the data. Remove the completed\n               iovec entries from the list of pending writes. */\n            while (m->msg_iovlen > 0 && res >= m->msg_iov->iov_len) {\n                res -= m->msg_iov->iov_len;\n                m->msg_iovlen--;\n                m->msg_iov++;\n            }\n\n            /* Might have written just part of the last iovec entry;\n               adjust it so the next write will do the rest. */\n            if (res > 0) {\n                m->msg_iov->iov_base = (caddr_t)m->msg_iov->iov_base + res;\n                m->msg_iov->iov_len -= res;\n            }\n            return TRANSMIT_INCOMPLETE;\n        }\n        if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                            \"Couldn't update event\\n\");\n                }\n                conn_set_state(c, conn_closing);\n                return TRANSMIT_HARD_ERROR;\n            }\n            return TRANSMIT_SOFT_ERROR;\n        }\n        /* if res == 0 or res == -1 and error is not EAGAIN or EWOULDBLOCK,\n           we have a real error, on which we close the connection */\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"Failed to write, and not due to blocking: %s\",\n                                            strerror(errno));\n        }\n\n        if (IS_UDP(c->transport))\n            conn_set_state(c, conn_read);\n        else\n            conn_set_state(c, conn_closing);\n        return TRANSMIT_HARD_ERROR;\n    } else {\n        return TRANSMIT_COMPLETE;\n    }\n}\n\nbool conn_listening(conn *c)\n{\n    int sfd;\n    struct sockaddr_storage addr;\n    socklen_t addrlen = sizeof(addr);\n\n    if ((sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen)) == -1) {\n        if (errno == EMFILE) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Too many open connections\\n\");\n            }\n            disable_listen();\n        } else if (errno != EAGAIN && errno != EWOULDBLOCK) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"Failed to accept new client: %s\\n\",\n                                            strerror(errno));\n        }\n\n        return false;\n    }\n\n    STATS_LOCK();\n    int curr_conns = ++stats.curr_conns;\n    STATS_UNLOCK();\n\n    if (curr_conns >= settings.maxconns) {\n        STATS_LOCK();\n        ++stats.rejected_conns;\n        STATS_UNLOCK();\n\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Too many open connections\\n\");\n        }\n\n        safe_close(sfd);\n        return false;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return false;\n    }\n\n    dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,\n                      DATA_BUFFER_SIZE, tcp_transport);\n\n    return false;\n}\n\n/**\n * Ship tap log to the other end. This state differs with all other states\n * in the way that it support full duplex dialog. We're listening to both read\n * and write events from libevent most of the time. If a read event occurs we\n * switch to the conn_read state to read and execute the input message (that would\n * be an ack message from the other side). If a write event occurs we continue to\n * send tap log to the other end.\n * @param c the tap connection to drive\n * @return true if we should continue to process work for this connection, false\n *              if we should start processing events for other connections.\n */\nbool conn_ship_log(conn *c) {\n    bool cont = false;\n\n    if (c->sfd == INVALID_SOCKET) {\n        return false;\n    }\n\n    short mask = EV_READ | EV_PERSIST | EV_WRITE;\n\n    if (c->which & EV_READ || c->rbytes > 0) {\n        if (c->rbytes > 0) {\n            if (try_read_command(c) == 0) {\n                conn_set_state(c, conn_read);\n            }\n        } else {\n            conn_set_state(c, conn_read);\n        }\n\n        // we're going to process something.. let's proceed\n        cont = true;\n\n        // We have a finite number of messages in the input queue\n        // so let's process all of them instead of backing off after\n        // reading a subset of them.\n        // Why? Because we've got every time we're calling ship_tap_log\n        // we try to send a chunk of items.. This means that if we end\n        // up in a situation where we're receiving a burst of nack messages\n        // we'll only process a subset of messages in our input queue,\n        // and it will slowly grow..\n        c->nevents = settings.reqs_per_tap_event;\n    } else if (c->which & EV_WRITE) {\n        --c->nevents;\n        if (c->nevents >= 0) {\n            LOCK_THREAD(c->thread);\n            c->ewouldblock = false;\n            ship_tap_log(c);\n            if (c->ewouldblock) {\n                mask = EV_READ | EV_PERSIST;\n            } else {\n                cont = true;\n            }\n            UNLOCK_THREAD(c->thread);\n        }\n    }\n\n    if (!update_event(c, mask)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO,\n                                            c, \"Couldn't update event\\n\");\n        }\n        conn_set_state(c, conn_closing);\n    }\n\n    return cont;\n}\n\nbool conn_waiting(conn *c) {\n    if (!update_event(c, EV_READ | EV_PERSIST)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Couldn't update event\\n\");\n        }\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n    conn_set_state(c, conn_read);\n    return false;\n}\n\nbool conn_read(conn *c) {\n    int res = IS_UDP(c->transport) ? try_read_udp(c) : try_read_network(c);\n    switch (res) {\n    case READ_NO_DATA_RECEIVED:\n        conn_set_state(c, conn_waiting);\n        break;\n    case READ_DATA_RECEIVED:\n        conn_set_state(c, conn_parse_cmd);\n        break;\n    case READ_ERROR:\n        conn_set_state(c, conn_closing);\n        break;\n    case READ_MEMORY_ERROR: /* Failed to allocate more memory */\n        /* State already set by try_read_network */\n        break;\n    }\n\n    return true;\n}\n\nbool conn_parse_cmd(conn *c) {\n    if (try_read_command(c) == 0) {\n        /* wee need more data! */\n        conn_set_state(c, conn_waiting);\n    }\n\n    return !c->ewouldblock;\n}\n\nbool conn_new_cmd(conn *c) {\n    /* Only process nreqs at a time to avoid starving other connections */\n    --c->nevents;\n    if (c->nevents >= 0) {\n        reset_cmd_handler(c);\n    } else {\n        STATS_NOKEY(c, conn_yields);\n        if (c->rbytes > 0) {\n            /* We have already read in data into the input buffer,\n               so libevent will most likely not signal read events\n               on the socket (unless more data is available. As a\n               hack we should just put in a request to write data,\n               because that should be possible ;-)\n            */\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_INFO,\n                                                    c, \"Couldn't update event\\n\");\n                }\n                conn_set_state(c, conn_closing);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    return true;\n}\n\n\nbool conn_swallow(conn *c) {\n    ssize_t res;\n    /* we are reading sbytes and throwing them away */\n    if (c->sbytes == 0) {\n        conn_set_state(c, conn_new_cmd);\n        return true;\n    }\n\n    /* first check if we have leftovers in the conn_read buffer */\n    if (c->rbytes > 0) {\n        uint32_t tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;\n        c->sbytes -= tocopy;\n        c->rcurr += tocopy;\n        c->rbytes -= tocopy;\n        return true;\n    }\n\n    /*  now try reading from the socket */\n    res = recv(c->sfd, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize, 0);\n    if (res > 0) {\n        STATS_ADD(c, bytes_read, res);\n        c->sbytes -= res;\n        return true;\n    }\n    if (res == 0) { /* end of stream */\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n        if (!update_event(c, EV_READ | EV_PERSIST)) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't update event\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n        return false;\n    }\n\n    if (errno != ENOTCONN && errno != ECONNRESET) {\n        /* otherwise we have a real error, on which we close the connection */\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                        \"Failed to read, and not due to blocking (%s)\\n\",\n                                        strerror(errno));\n    }\n\n    conn_set_state(c, conn_closing);\n\n    return true;\n\n}\n\nbool conn_nread(conn *c) {\n    ssize_t res;\n\n    if (c->rlbytes == 0) {\n        LIBEVENT_THREAD *t = c->thread;\n        LOCK_THREAD(t);\n        bool block = c->ewouldblock = false;\n        complete_nread(c);\n        UNLOCK_THREAD(t);\n        /* Breaking this into two, as complete_nread may have\n           moved us to a different thread */\n        t = c->thread;\n        LOCK_THREAD(t);\n        if (c->ewouldblock) {\n            unregister_event(c);\n            block = true;\n        }\n        UNLOCK_THREAD(t);\n        return !block;\n    }\n    /* first check if we have leftovers in the conn_read buffer */\n    if (c->rbytes > 0) {\n        uint32_t tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;\n        if (c->ritem != c->rcurr) {\n            memmove(c->ritem, c->rcurr, tocopy);\n        }\n        c->ritem += tocopy;\n        c->rlbytes -= tocopy;\n        c->rcurr += tocopy;\n        c->rbytes -= tocopy;\n        if (c->rlbytes == 0) {\n            return true;\n        }\n    }\n\n    /*  now try reading from the socket */\n    res = recv(c->sfd, c->ritem, c->rlbytes, 0);\n    if (res > 0) {\n        STATS_ADD(c, bytes_read, res);\n        if (c->rcurr == c->ritem) {\n            c->rcurr += res;\n        }\n        c->ritem += res;\n        c->rlbytes -= res;\n        return true;\n    }\n    if (res == 0) { /* end of stream */\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n\n#ifdef INNODB_MEMCACHED\n    /* MEMCACHED_RESOLVE: on solaris platform, when connect through\n    telnet and waiting for input from an \"add\" or \"set\" command,\n    it could have res == -1 and errno == 0. Thus causing early termination\n    Add \"!errno\" condition here to deal with this scenario for now */\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK || !errno)) {\n#else\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n#endif /* INNODB_MEMCACHED */\n        if (!update_event(c, EV_READ | EV_PERSIST)) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't update event\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n        return false;\n    }\n\n    if (errno != ENOTCONN && errno != ECONNRESET) {\n        /* otherwise we have a real error, on which we close the connection */\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Failed to read, and not due to blocking:\\n\"\n                                        \"errno: %d %s \\n\"\n                                        \"rcurr=%lx ritem=%lx rbuf=%lx rlbytes=%d rsize=%d\\n\",\n                                        errno, strerror(errno),\n                                        (long)c->rcurr, (long)c->ritem, (long)c->rbuf,\n                                        (int)c->rlbytes, (int)c->rsize);\n    }\n    conn_set_state(c, conn_closing);\n    return true;\n}\n\nbool conn_write(conn *c) {\n    /*\n     * We want to write out a simple response. If we haven't already,\n     * assemble it into a msgbuf list (this will be a single-entry\n     * list for TCP or a two-entry list for UDP).\n     */\n    if (c->iovused == 0 || (IS_UDP(c->transport) && c->iovused == 1)) {\n        if (add_iov(c, c->wcurr, c->wbytes) != 0) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't build response\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n    }\n\n    return conn_mwrite(c);\n}\n\nbool conn_mwrite(conn *c) {\n    if (IS_UDP(c->transport) && c->msgcurr == 0 && build_udp_headers(c) != 0) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Failed to build UDP headers\\n\");\n        }\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n\n    switch (transmit(c)) {\n    case TRANSMIT_COMPLETE:\n        if (c->state == conn_mwrite) {\n            while (c->ileft > 0) {\n                item *it = *(c->icurr);\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                c->icurr++;\n                c->ileft--;\n            }\n            while (c->suffixleft > 0) {\n                char *suffix = *(c->suffixcurr);\n                cache_free(c->thread->suffix_cache, suffix);\n                c->suffixcurr++;\n                c->suffixleft--;\n            }\n            /* XXX:  I don't know why this wasn't the general case */\n            if(c->protocol == binary_prot) {\n                conn_set_state(c, c->write_and_go);\n            } else {\n                conn_set_state(c, conn_new_cmd);\n            }\n        } else if (c->state == conn_write) {\n            if (c->write_and_free) {\n                free(c->write_and_free);\n                c->write_and_free = 0;\n            }\n            conn_set_state(c, c->write_and_go);\n        } else {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Unexpected state %d\\n\", c->state);\n            }\n            conn_set_state(c, conn_closing);\n        }\n        break;\n\n    case TRANSMIT_INCOMPLETE:\n    case TRANSMIT_HARD_ERROR:\n        break;                   /* Continue in state machine. */\n\n    case TRANSMIT_SOFT_ERROR:\n        return false;\n    }\n\n    return true;\n}\n\nbool conn_pending_close(conn *c) {\n    assert(c->sfd == INVALID_SOCKET);\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                    \"Awaiting clients to release the cookie (pending close for %p)\",\n                                    (void*)c);\n    LOCK_THREAD(c->thread);\n    c->thread->pending_io = list_remove(c->thread->pending_io, c);\n    if (!list_contains(c->thread->pending_close, c)) {\n        enlist_conn(c, &c->thread->pending_close);\n    }\n    UNLOCK_THREAD(c->thread);\n\n    /*\n     * tell the tap connection that we're disconnecting it now,\n     * but give it a grace period\n     */\n    perform_callbacks(ON_DISCONNECT, NULL, c);\n\n    /*\n     * disconnect callback may have changed the state for the object\n     * so we might complete the disconnect now\n     */\n    return c->state != conn_pending_close;\n}\n\nbool conn_immediate_close(conn *c) {\n    settings.extensions.logger->log(EXTENSION_LOG_DETAIL, c,\n                                    \"Immediate close of %p\",\n                                    (void*)c);\n    perform_callbacks(ON_DISCONNECT, NULL, c);\n    conn_close(c);\n\n    return false;\n}\n\nbool conn_closing(conn *c) {\n    if (IS_UDP(c->transport)) {\n        conn_cleanup(c);\n        return false;\n    }\n\n    // We don't want any network notifications anymore..\n    unregister_event(c);\n    safe_close(c->sfd);\n    c->sfd = INVALID_SOCKET;\n\n    if (c->refcount > 1) {\n        conn_set_state(c, conn_pending_close);\n    } else {\n        conn_set_state(c, conn_immediate_close);\n    }\n    return true;\n}\n\nbool conn_add_tap_client(conn *c) {\n    LIBEVENT_THREAD *tp = tap_thread;\n    LIBEVENT_THREAD *orig_thread = c->thread;\n\n    assert(orig_thread);\n    assert(orig_thread != tp);\n\n    c->ewouldblock = true;\n\n    unregister_event(c);\n\n    LOCK_THREAD(orig_thread);\n    /* Clean out the lists */\n    orig_thread->pending_io = list_remove(orig_thread->pending_io, c);\n    orig_thread->pending_close = list_remove(orig_thread->pending_close, c);\n\n    LOCK_THREAD(tp);\n    c->ev_flags = 0;\n    conn_set_state(c, conn_setup_tap_stream);\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                    \"Moving %d conn from %p to %p\\n\",\n                                    c->sfd, c->thread, tp);\n    c->thread = tp;\n    c->event.ev_base = tp->base;\n    assert(c->next == NULL);\n    assert(c->list_state == 0);\n    enlist_conn(c, &tp->pending_io);\n\n    UNLOCK_THREAD(tp);\n\n    UNLOCK_THREAD(orig_thread);\n\n    notify_thread(tp);\n\n    return false;\n}\n\nbool conn_setup_tap_stream(conn *c) {\n    process_bin_tap_connect(c);\n    return true;\n}\n\nvoid event_handler(const int fd, const short which, void *arg) {\n    conn *c;\n\n    c = (conn *)arg;\n    assert(c != NULL);\n\n    if (memcached_shutdown) {\n        event_base_loopbreak(c->event.ev_base);\n        return ;\n    }\n\n    c->which = which;\n\n    /* sanity */\n    if (fd != c->sfd) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                    \"Catastrophic: event fd doesn't match conn fd!\\n\");\n        }\n        conn_close(c);\n        return;\n    }\n\n    perform_callbacks(ON_SWITCH_CONN, c, c);\n\n    c->nevents = settings.reqs_per_event;\n    if (c->state == conn_ship_log) {\n        c->nevents = settings.reqs_per_tap_event;\n    }\n\n    LIBEVENT_THREAD *thr = c->thread;\n\n    // Do we have pending closes?\n    const size_t max_items = 256;\n    conn *pending_close[max_items];\n    size_t n_pending_close = 0;\n    if (thr != NULL) {\n        LOCK_THREAD(thr);\n        if (thr->pending_close && thr->last_checked != current_time) {\n            assert(!has_cycle(thr->pending_close));\n            thr->last_checked = current_time;\n\n            n_pending_close = list_to_array(pending_close, max_items,\n                                            &thr->pending_close);\n        }\n        UNLOCK_THREAD(thr);\n    }\n\n    if (settings.verbose) {\n        do {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"%d - Running task: (%s)\\n\",\n                                            c->sfd, state_text(c->state));\n        } while (c->state(c));\n    } else {\n        while (c->state(c)) {\n            /* empty */\n        }\n    }\n\n    /* Close any connections pending close */\n    if (n_pending_close > 0) {\n        for (size_t i = 0; i < n_pending_close; ++i) {\n            conn *ce = pending_close[i];\n            if (ce->refcount == 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                                \"OK, time to nuke: %p\\n\",\n                                                (void*)ce);\n                conn_close(ce);\n            } else {\n                LOCK_THREAD(ce->thread);\n                enlist_conn(ce, &ce->thread->pending_close);\n                UNLOCK_THREAD(ce->thread);\n            }\n        }\n    }\n\n    if (thr != NULL) {\n        LOCK_THREAD(thr);\n        finalize_list(pending_close, n_pending_close);\n        UNLOCK_THREAD(thr);\n    }\n}\n\nstatic void dispatch_event_handler(int fd, short which, void *arg) {\n    char buffer[80];\n    ssize_t nr = recv(fd, buffer, sizeof(buffer), 0);\n\n    if (nr != -1 && is_listen_disabled()) {\n        bool enable = false;\n        pthread_mutex_lock(&listen_state.mutex);\n        listen_state.count -= nr;\n        if (listen_state.count <= 0) {\n            enable = true;\n            listen_state.disabled = false;\n        }\n        pthread_mutex_unlock(&listen_state.mutex);\n        if (enable) {\n            conn *next;\n            for (next = listen_conn; next; next = next->next) {\n                update_event(next, EV_READ | EV_PERSIST);\n                if (listen(next->sfd, settings.backlog) != 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"listen() failed\",\n                                                    strerror(errno));\n                }\n            }\n        }\n    }\n}\n\n\n\nstatic SOCKET new_socket(struct addrinfo *ai) {\n    SOCKET sfd;\n\n    sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol);\n    if (sfd == INVALID_SOCKET) {\n        return INVALID_SOCKET;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return INVALID_SOCKET;\n    }\n\n    return sfd;\n}\n\n\n/*\n * Sets a socket's send buffer size to the maximum allowed by the system.\n */\nstatic void maximize_sndbuf(const int sfd) {\n    socklen_t intsize = sizeof(int);\n    int last_good = 0;\n    int min, max, avg;\n    int old_size;\n\n    /* Start with the default size. */\n    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&old_size, &intsize) != 0) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"getsockopt(SO_SNDBUF): %s\",\n                                            strerror(errno));\n        }\n\n        return;\n    }\n\n    /* Binary-search for the real maximum. */\n    min = old_size;\n    max = MAX_SENDBUF_SIZE;\n\n    while (min <= max) {\n        avg = ((unsigned int)(min + max)) / 2;\n        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {\n            last_good = avg;\n            min = avg + 1;\n        } else {\n            max = avg - 1;\n        }\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                 \"<%d send buffer was %d, now %d\\n\", sfd, old_size, last_good);\n    }\n}\n\n\n\n/**\n * Create a socket and bind it to a specific port number\n * @param interface the interface to bind to\n * @param port the port number to bind to\n * @param transport the transport protocol (TCP / UDP)\n * @param portnumber_file A filepointer to write the port numbers to\n *        when they are successfully added to the list of ports we\n *        listen on.\n */\nstatic int server_socket(const char *interface,\n                         int port,\n                         enum network_transport transport,\n                         FILE *portnumber_file) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct addrinfo *ai;\n    struct addrinfo *next;\n    struct addrinfo hints = { .ai_flags = AI_PASSIVE,\n                              .ai_family = AF_UNSPEC };\n    char port_buf[NI_MAXSERV];\n    int error;\n    int success = 0;\n    int flags =1;\n    num_udp_socket = 0;\n\n    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;\n\n    if (port == -1) {\n        port = 0;\n    }\n    snprintf(port_buf, sizeof(port_buf), \"%d\", port);\n    error= getaddrinfo(interface, port_buf, &hints, &ai);\n    if (error != 0) {\n        if (error != EAI_SYSTEM) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                     \"getaddrinfo(): %s\\n\", gai_strerror(error));\n        } else {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                     \"getaddrinfo(): %s\\n\", strerror(error));\n        }\n        return 1;\n    }\n\n    for (next= ai; next; next= next->ai_next) {\n        conn *listen_conn_add;\n        if ((sfd = new_socket(next)) == INVALID_SOCKET) {\n            /* getaddrinfo can return \"junk\" addresses,\n             * we make sure at least one works before erroring.\n             */\n            continue;\n        }\n\n#ifdef IPV6_V6ONLY\n        if (next->ai_family == AF_INET6) {\n            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(IPV6_V6ONLY): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                continue;\n            }\n        }\n#endif\n\n        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n        if (IS_UDP(transport)) {\n            maximize_sndbuf(sfd);\n\t    udp_socket[num_udp_socket] = sfd;\n\t    num_udp_socket++;\n        } else {\n            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(SO_KEEPALIVE): %s\",\n                                                strerror(errno));\n            }\n\n            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(SO_LINGER): %s\",\n                                                strerror(errno));\n            }\n\n            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(TCP_NODELAY): %s\",\n                                                strerror(errno));\n            }\n        }\n\n        if (bind(sfd, next->ai_addr, next->ai_addrlen) == SOCKET_ERROR) {\n            if (errno != EADDRINUSE) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"bind(): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            safe_close(sfd);\n            continue;\n        } else {\n            success++;\n            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == SOCKET_ERROR) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"listen(): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            if (portnumber_file != NULL &&\n                (next->ai_addr->sa_family == AF_INET ||\n                 next->ai_addr->sa_family == AF_INET6)) {\n                union {\n                    struct sockaddr_in in;\n                    struct sockaddr_in6 in6;\n                } my_sockaddr;\n                socklen_t len = sizeof(my_sockaddr);\n                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {\n                    if (next->ai_addr->sa_family == AF_INET) {\n                        fprintf(portnumber_file, \"%s INET: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in.sin_port));\n                    } else {\n                        fprintf(portnumber_file, \"%s INET6: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in6.sin6_port));\n                    }\n                }\n            }\n        }\n\n        if (IS_UDP(transport)) {\n            int c;\n\n            for (c = 0; c < settings.num_threads_per_udp; c++) {\n                /* this is guaranteed to hit all threads because we round-robin */\n                dispatch_conn_new(sfd, conn_read, EV_READ | EV_PERSIST,\n                                  UDP_READ_BUFFER_SIZE, transport);\n                STATS_LOCK();\n                ++stats.curr_conns;\n                ++stats.daemon_conns;\n                STATS_UNLOCK();\n            }\n        } else {\n            if (!(listen_conn_add = conn_new(sfd, conn_listening,\n                                             EV_READ | EV_PERSIST, 1,\n                                             transport, main_base, NULL))) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"failed to create listening connection\\n\");\n                exit(EXIT_FAILURE);\n            }\n            listen_conn_add->next = listen_conn;\n            listen_conn = listen_conn_add;\n            STATS_LOCK();\n            ++stats.curr_conns;\n            ++stats.daemon_conns;\n            STATS_UNLOCK();\n        }\n    }\n\n    freeaddrinfo(ai);\n\n    /* Return zero iff we detected no errors in starting up connections */\n    return success == 0;\n}\n\nstatic int server_sockets(int port, enum network_transport transport,\n                          FILE *portnumber_file) {\n    if (settings.inter == NULL) {\n        return server_socket(settings.inter, port, transport, portnumber_file);\n    } else {\n        // tokenize them and bind to each one of them..\n        char *b;\n        int ret = 0;\n        char *list = strdup(settings.inter);\n\n        if (list == NULL) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"Failed to allocate memory for parsing server interface string\\n\");\n            return 1;\n        }\n        for (char *p = strtok_r(list, \";,\", &b);\n             p != NULL;\n             p = strtok_r(NULL, \";,\", &b)) {\n            int the_port = port;\n\n            char *s = strchr(p, ':');\n            if (s != NULL) {\n                *s = '\\0';\n                ++s;\n                if (!safe_strtol(s, &the_port)) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"Invalid port number: \\\"%s\\\"\", s);\n                    return 1;\n                }\n            }\n            if (strcmp(p, \"*\") == 0) {\n                p = NULL;\n            }\n            ret |= server_socket(p, the_port, transport, portnumber_file);\n        }\n        free(list);\n        return ret;\n    }\n}\n\nstatic int new_socket_unix(void) {\n    int sfd;\n\n    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == INVALID_SOCKET) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"socket(AF_UNIX, SOCK_STREAM, 0): %s\",\n                                        strerror(errno));\n        return INVALID_SOCKET;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return INVALID_SOCKET;\n    }\n    return sfd;\n}\n\n/* this will probably not work on windows */\nstatic int server_socket_unix(const char *path, int access_mask) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct sockaddr_un addr;\n    struct stat tstat;\n    int flags =1;\n    int old_umask;\n\n    if (!path) {\n        return 1;\n    }\n\n    if ((sfd = new_socket_unix()) == -1) {\n        return 1;\n    }\n\n    /*\n     * Clean up a previous socket file if we left it around\n     */\n    if (lstat(path, &tstat) == 0) {\n        if (S_ISSOCK(tstat.st_mode))\n            unlink(path);\n    }\n\n    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n\n    /*\n     * the memset call clears nonstandard fields in some impementations\n     * that otherwise mess things up.\n     */\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sun_family = AF_UNIX;\n    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);\n    assert(strcmp(addr.sun_path, path) == 0);\n    old_umask = umask( ~(access_mask&0777));\n    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"bind(): %s\",\n                                        strerror(errno));\n        safe_close(sfd);\n        umask(old_umask);\n        return 1;\n    }\n    umask(old_umask);\n    if (listen(sfd, settings.backlog) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"listen(): %s\",\n                                        strerror(errno));\n        safe_close(sfd);\n        return 1;\n    }\n    if (!(listen_conn = conn_new(sfd, conn_listening,\n                                 EV_READ | EV_PERSIST, 1,\n                                 local_transport, main_base, NULL))) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"failed to create listening connection\\n\");\n        exit(EXIT_FAILURE);\n    }\n    STATS_LOCK();\n    ++stats.daemon_conns;\n    STATS_UNLOCK();\n\n    return 0;\n}\n\nstatic struct event clockevent;\n\n/* time-sensitive callers can call it by hand with this, outside the normal ever-1-second timer */\nstatic void set_current_time(void) {\n    struct timeval timer;\n\n    gettimeofday(&timer, NULL);\n    current_time = (rel_time_t) (timer.tv_sec - process_started);\n}\n\nstatic void clock_handler(const int fd, const short which, void *arg) {\n    struct timeval t = {.tv_sec = 1, .tv_usec = 0};\n    static bool initialized = false;\n\n    if (memcached_shutdown) {\n        event_base_loopbreak(main_base);\n        return ;\n    }\n\n    if (initialized) {\n        /* only delete the event if it's actually there. */\n        evtimer_del(&clockevent);\n    } else {\n        initialized = true;\n    }\n\n    evtimer_set(&clockevent, clock_handler, 0);\n    event_base_set(main_base, &clockevent);\n    evtimer_add(&clockevent, &t);\n\n    set_current_time();\n}\n\nstatic void usage(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\");\n    printf(\"-p <num>      TCP port number to listen on (default: 11211)\\n\"\n           \"-U <num>      UDP port number to listen on (default: 11211, 0 is off)\\n\"\n           \"-s <file>     UNIX socket path to listen on (disables network support)\\n\"\n           \"-a <mask>     access mask for UNIX socket, in octal (default: 0700)\\n\"\n           \"-l <addr>     interface to listen on (default: INADDR_ANY, all addresses)\\n\"\n           \"              <addr> may be specified as host:port. If you don't specify\\n\"\n           \"              a port number, the value you specified with -p or -U is\\n\"\n           \"              used. You may specify multiple addresses separated by comma\\n\"\n           \"              or by using -l multiple times\\n\"\n           \"-d            run as a daemon\\n\"\n           \"-r            maximize core file limit\\n\"\n           \"-u <username> assume identity of <username> (only when run as root)\\n\"\n           \"-m <num>      max memory to use for items in megabytes (default: 64 MB)\\n\"\n           \"-M            return error on memory exhausted (rather than removing items)\\n\"\n           \"-c <num>      max simultaneous connections (default: 1000)\\n\"\n           \"-k            lock down all paged memory.  Note that there is a\\n\"\n           \"              limit on how much memory you may lock.  Trying to\\n\"\n           \"              allocate more than that would fail, so be sure you\\n\"\n           \"              set the limit correctly for the user you started\\n\"\n           \"              the daemon with (not for -u <username> user;\\n\"\n           \"              under sh this is done with 'ulimit -S -l NUM_KB').\\n\"\n           \"-v            verbose (print errors/warnings while in event loop)\\n\"\n           \"-vv           very verbose (also print client commands/reponses)\\n\"\n           \"-vvv          extremely verbose (also print internal state transitions)\\n\"\n           \"-h            print this help and exit\\n\"\n           \"-i            print memcached and libevent license\\n\"\n           \"-P <file>     save PID in <file>, only used with -d option\\n\"\n           \"-f <factor>   chunk size growth factor (default: 1.25)\\n\"\n           \"-n <bytes>    minimum space allocated for key+value+flags (default: 48)\\n\");\n    printf(\"-L            Try to use large memory pages (if available). Increasing\\n\"\n           \"              the memory page size could reduce the number of TLB misses\\n\"\n           \"              and improve the performance. In order to get large pages\\n\"\n           \"              from the OS, memcached will allocate the total item-cache\\n\"\n           \"              in one large chunk.\\n\");\n    printf(\"-D <char>     Use <char> as the delimiter between key prefixes and IDs.\\n\"\n           \"              This is used for per-prefix stats reporting. The default is\\n\"\n           \"              \\\":\\\" (colon). If this option is specified, stats collection\\n\"\n           \"              is turned on automatically; if not, then it may be turned on\\n\"\n           \"              by sending the \\\"stats detail on\\\" command to the server.\\n\");\n    printf(\"-t <num>      number of threads to use (default: 4)\\n\");\n    printf(\"-R            Maximum number of requests per event, limits the number of\\n\"\n           \"              requests process for a given connection to prevent \\n\"\n           \"              starvation (default: 20)\\n\");\n    printf(\"-C            Disable use of CAS\\n\");\n    printf(\"-b            Set the backlog queue limit (default: 1024)\\n\");\n    printf(\"-B            Binding protocol - one of ascii, binary, or auto (default)\\n\");\n    printf(\"-I            Override the size of each slab page. Adjusts max item size\\n\"\n           \"              (default: 1mb, min: 1k, max: 128m)\\n\");\n    printf(\"-q            Disable detailed stats commands\\n\");\n#ifdef SASL_ENABLED\n    printf(\"-S            Require SASL authentication\\n\");\n#endif\n    printf(\"-X module,cfg Load the module and initialize it with the config\\n\");\n    printf(\"-E engine     Load engine as the storage engine\\n\");\n    printf(\"-e config     Pass config as configuration options to the storage engine\\n\");\n    printf(\"\\nEnvironment variables:\\n\"\n           \"MEMCACHED_PORT_FILENAME   File to write port information to\\n\"\n           \"MEMCACHED_TOP_KEYS        Number of top keys to keep track of\\n\"\n           \"MEMCACHED_REQS_TAP_EVENT  Similar to -R but for tap_ship_log\\n\");\n}\nstatic void usage_license(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\\n\");\n    printf(\n    \"Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions are\\n\"\n    \"met:\\n\"\n    \"\\n\"\n    \"    * Redistributions of source code must retain the above copyright\\n\"\n    \"notice, this list of conditions and the following disclaimer.\\n\"\n    \"\\n\"\n    \"    * Redistributions in binary form must reproduce the above\\n\"\n    \"copyright notice, this list of conditions and the following disclaimer\\n\"\n    \"in the documentation and/or other materials provided with the\\n\"\n    \"distribution.\\n\"\n    \"\\n\"\n    \"    * Neither the name of the Danga Interactive nor the names of its\\n\"\n    \"contributors may be used to endorse or promote products derived from\\n\"\n    \"this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"\n    \"\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n\"\n    \"A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n\"\n    \"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n\"\n    \"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\"\n    \"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"This product includes software developed by Niels Provos.\\n\"\n    \"\\n\"\n    \"[ libevent ]\\n\"\n    \"\\n\"\n    \"Copyright 2000-2003 Niels Provos <provos@citi.umich.edu>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions\\n\"\n    \"are met:\\n\"\n    \"1. Redistributions of source code must retain the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer.\\n\"\n    \"2. Redistributions in binary form must reproduce the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer in the\\n\"\n    \"   documentation and/or other materials provided with the distribution.\\n\"\n    \"3. All advertising materials mentioning features or use of this software\\n\"\n    \"   must display the following acknowledgement:\\n\"\n    \"      This product includes software developed by Niels Provos.\\n\"\n    \"4. The name of the author may not be used to endorse or promote products\\n\"\n    \"   derived from this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\\n\"\n    \"IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\\n\"\n    \"OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\\n\"\n    \"IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\\n\"\n    \"INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\\n\"\n    \"NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n\"\n    \"THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    );\n\n    return;\n}\n\nstatic void save_pid(const char *pid_file) {\n    FILE *fp;\n\n    if (access(pid_file, F_OK) == 0) {\n        if ((fp = fopen(pid_file, \"r\")) != NULL) {\n            char buffer[1024];\n            if (fgets(buffer, sizeof(buffer), fp) != NULL) {\n                unsigned int pid;\n                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                               \"WARNING: The pid file contained the following (running) pid: %u\\n\", pid);\n                }\n            }\n            fclose(fp);\n        }\n    }\n\n    if ((fp = fopen(pid_file, \"w\")) == NULL) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"Could not open the pid file %s for writing: %s\\n\",\n                 pid_file, strerror(errno));\n        return;\n    }\n\n    fprintf(fp,\"%ld\\n\", (long)getpid());\n    if (fclose(fp) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not close the pid file %s: %s\\n\",\n                pid_file, strerror(errno));\n    }\n}\n\nstatic void remove_pidfile(const char *pid_file) {\n    if (pid_file != NULL) {\n        if (unlink(pid_file) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Could not remove the pid file %s: %s\\n\",\n                    pid_file, strerror(errno));\n        }\n    }\n}\n\n#ifndef HAVE_SIGIGNORE\nstatic int sigignore(int sig) {\n    struct sigaction sa = { .sa_handler = SIG_IGN, .sa_flags = 0 };\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1) {\n        return -1;\n    }\n    return 0;\n}\n#endif /* !HAVE_SIGIGNORE */\n\nstatic void sigterm_handler(int sig) {\n    assert(sig == SIGTERM || sig == SIGINT);\n    memcached_shutdown = 1;\n}\n\nstatic int install_sigterm_handler(void) {\n    struct sigaction sa = {.sa_handler = sigterm_handler, .sa_flags = 0};\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(SIGTERM, &sa, 0) == -1 ||\n        sigaction(SIGINT, &sa, 0) == -1) {\n        return -1;\n    }\n\n    return 0;\n}\n\n/*\n * On systems that supports multiple page sizes we may reduce the\n * number of TLB-misses by using the biggest available page size\n */\nstatic int enable_large_pages(void) {\n#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)\n    int ret = -1;\n    size_t sizes[32];\n    int avail = getpagesizes(sizes, 32);\n    if (avail != -1) {\n        size_t max = sizes[0];\n        struct memcntl_mha arg = {0};\n        int ii;\n\n        for (ii = 1; ii < avail; ++ii) {\n            if (max < sizes[ii]) {\n                max = sizes[ii];\n            }\n        }\n\n        arg.mha_flags   = 0;\n        arg.mha_pagesize = max;\n        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;\n\n        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                  \"Failed to set large pages: %s\\nWill use default page size\\n\",\n                  strerror(errno));\n        } else {\n            ret = 0;\n        }\n    } else {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n          \"Failed to get supported pagesizes: %s\\nWill use default page size\\n\",\n          strerror(errno));\n    }\n\n    return ret;\n#else\n    return 0;\n#endif\n}\n\nstatic const char* get_server_version(void) {\n    return VERSION;\n}\n\nstatic void store_engine_specific(const void *cookie,\n                                  void *engine_data) {\n    conn *c = (conn*)cookie;\n    c->engine_storage = engine_data;\n}\n\nstatic void *get_engine_specific(const void *cookie) {\n    conn *c = (conn*)cookie;\n    return c->engine_storage;\n}\n\nstatic int get_socket_fd(const void *cookie) {\n    conn *c = (conn *)cookie;\n    return c->sfd;\n}\n\nstatic void set_tap_nack_mode(const void *cookie, bool enable) {\n    conn *c = (conn *)cookie;\n    c->tap_nack_mode = enable;\n}\n\nstatic void reserve_cookie(const void *cookie) {\n    conn *c = (conn *)cookie;\n    ++c->refcount;\n}\n\nstatic void release_cookie(const void *cookie) {\n    conn *c = (conn *)cookie;\n    --c->refcount;\n}\n\nstatic int num_independent_stats(void) {\n    return settings.num_threads + 1;\n}\n\nstatic void *new_independent_stats(void) {\n    int ii;\n    int nrecords = num_independent_stats();\n    struct independent_stats *independent_stats = calloc(sizeof(independent_stats) + sizeof(struct thread_stats) * nrecords, 1);\n\n#ifdef INNODB_MEMCACHED\n    if (independent_stats == NULL) {\n\tfprintf(stderr, \"Unable to allocate memory for\"\n\t\t       \"independent_stats...\\n\");\n       return (NULL);\n    }\n#endif\n\n    if (settings.topkeys > 0)\n        independent_stats->topkeys = topkeys_init(settings.topkeys);\n    for (ii = 0; ii < nrecords; ii++)\n        pthread_mutex_init(&independent_stats->thread_stats[ii].mutex, NULL);\n    return independent_stats;\n}\n\nstatic void release_independent_stats(void *stats) {\n    int ii;\n    int nrecords = num_independent_stats();\n    struct independent_stats *independent_stats = stats;\n    if (independent_stats->topkeys)\n        topkeys_free(independent_stats->topkeys);\n    for (ii = 0; ii < nrecords; ii++)\n        pthread_mutex_destroy(&independent_stats->thread_stats[ii].mutex);\n    free(independent_stats);\n}\n\nstatic inline struct independent_stats *get_independent_stats(conn *c) {\n    struct independent_stats *independent_stats;\n    if (settings.engine.v1->get_stats_struct != NULL) {\n        independent_stats = settings.engine.v1->get_stats_struct(settings.engine.v0, (const void *)c);\n        if (independent_stats == NULL)\n            independent_stats = default_independent_stats;\n    } else {\n        independent_stats = default_independent_stats;\n    }\n    return independent_stats;\n}\n\nstatic inline struct thread_stats *get_thread_stats(conn *c) {\n    struct independent_stats *independent_stats = get_independent_stats(c);\n    assert(c->thread->index < num_independent_stats());\n    return &independent_stats->thread_stats[c->thread->index];\n}\n\nstatic void register_callback(ENGINE_HANDLE *eh,\n                              ENGINE_EVENT_TYPE type,\n                              EVENT_CALLBACK cb, const void *cb_data) {\n    struct engine_event_handler *h =\n        calloc(sizeof(struct engine_event_handler), 1);\n\n    assert(h);\n    h->cb = cb;\n    h->cb_data = cb_data;\n    h->next = engine_event_handlers[type];\n    engine_event_handlers[type] = h;\n}\n\nstatic rel_time_t get_current_time(void)\n{\n    return current_time;\n}\n\nstatic void count_eviction(const void *cookie, const void *key, const int nkey) {\n    topkeys_t *tk = get_independent_stats((conn*)cookie)->topkeys;\n    TK(tk, evictions, key, nkey, get_current_time());\n}\n\n/**\n * To make it easy for engine implementors that doesn't want to care about\n * writing their own incr/decr code, they can just set the arithmetic function\n * to NULL and use this implementation. It is not efficient, due to the fact\n * that it does multiple calls through the interface (get and then cas store).\n * If you don't care, feel free to use it..\n */\nstatic ENGINE_ERROR_CODE internal_arithmetic(ENGINE_HANDLE* handle,\n                                             const void* cookie,\n                                             const void* key,\n                                             const int nkey,\n                                             const bool increment,\n                                             const bool create,\n                                             const uint64_t delta,\n                                             const uint64_t initial,\n                                             const rel_time_t exptime,\n                                             uint64_t *cas,\n                                             uint64_t *result,\n                                             uint16_t vbucket)\n{\n    ENGINE_HANDLE_V1 *e = (ENGINE_HANDLE_V1*)handle;\n\n    item *it = NULL;\n\n    ENGINE_ERROR_CODE ret;\n    ret = e->get(handle, cookie, &it, key, nkey, vbucket);\n\n    if (ret == ENGINE_SUCCESS) {\n        item_info info = { .nvalue = 1 };\n\n        if (!e->get_item_info(handle, cookie, it, &info)) {\n            e->release(handle, cookie, it);\n            return ENGINE_FAILED;\n        }\n\n        char value[80];\n\n        if (info.value[0].iov_len > (sizeof(value) - 1)) {\n            e->release(handle, cookie, it);\n            return ENGINE_EINVAL;\n        }\n\n        memcpy(value, info.value[0].iov_base, info.value[0].iov_len);\n        value[info.value[0].iov_len] = '\\0';\n\n        uint64_t val;\n        if (!safe_strtoull(value, &val)) {\n            e->release(handle, cookie, it);\n            return ENGINE_EINVAL;\n        }\n\n        if (increment) {\n            val += delta;\n        } else {\n            if (delta > val) {\n                val = 0;\n            } else {\n                val -= delta;\n            }\n        }\n\n        size_t nb = snprintf(value, sizeof(value), \"%\"PRIu64, val);\n        *result = val;\n        item *nit = NULL;\n        if (e->allocate(handle, cookie, &nit, key,\n                        nkey, nb, info.flags, info.exptime) != ENGINE_SUCCESS) {\n            e->release(handle, cookie, it);\n            return ENGINE_ENOMEM;\n        }\n\n        item_info i2 = { .nvalue = 1 };\n        if (!e->get_item_info(handle, cookie, nit, &i2)) {\n            e->release(handle, cookie, it);\n            e->release(handle, cookie, nit);\n            return ENGINE_FAILED;\n        }\n\n        memcpy(i2.value[0].iov_base, value, nb);\n        e->item_set_cas(handle, cookie, nit, info.cas);\n        ret = e->store(handle, cookie, nit, cas, OPERATION_CAS, vbucket);\n        e->release(handle, cookie, it);\n        e->release(handle, cookie, nit);\n    } else if (ret == ENGINE_KEY_ENOENT && create) {\n        char value[80];\n        size_t nb = snprintf(value, sizeof(value), \"%\"PRIu64\"\\r\\n\", initial);\n        *result = initial;\n        if (e->allocate(handle, cookie, &it, key, nkey, nb, 0, exptime) != ENGINE_SUCCESS) {\n            e->release(handle, cookie, it);\n            return ENGINE_ENOMEM;\n        }\n\n        item_info info = { .nvalue = 1 };\n        if (!e->get_item_info(handle, cookie, it, &info)) {\n            e->release(handle, cookie, it);\n            return ENGINE_FAILED;\n        }\n\n        memcpy(info.value[0].iov_base, value, nb);\n        ret = e->store(handle, cookie, it, cas, OPERATION_CAS, vbucket);\n        e->release(handle, cookie, it);\n    }\n\n    /* We had a race condition.. just call ourself recursively to retry */\n    if (ret == ENGINE_KEY_EEXISTS) {\n        return internal_arithmetic(handle, cookie, key, nkey, increment, create, delta,\n                                   initial, exptime, cas, result, vbucket);\n    }\n\n    return ret;\n}\n\n/**\n * Register an extension if it's not already registered\n *\n * @param type the type of the extension to register\n * @param extension the extension to register\n * @return true if success, false otherwise\n */\nstatic bool register_extension(extension_type_t type, void *extension)\n{\n    if (extension == NULL) {\n        return false;\n    }\n\n    switch (type) {\n    case EXTENSION_DAEMON:\n        for (EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n             ptr != NULL;\n             ptr = ptr->next) {\n            if (ptr == extension) {\n                return false;\n            }\n        }\n        ((EXTENSION_DAEMON_DESCRIPTOR *)(extension))->next = settings.extensions.daemons;\n        settings.extensions.daemons = extension;\n        return true;\n    case EXTENSION_LOGGER:\n        settings.extensions.logger = extension;\n        return true;\n    case EXTENSION_ASCII_PROTOCOL:\n        if (settings.extensions.ascii != NULL) {\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *last;\n            for (last = settings.extensions.ascii; last->next != NULL;\n                 last = last->next) {\n                if (last == extension) {\n                    return false;\n                }\n            }\n            if (last == extension) {\n                return false;\n            }\n            last->next = extension;\n            last->next->next = NULL;\n        } else {\n            settings.extensions.ascii = extension;\n            settings.extensions.ascii->next = NULL;\n        }\n        return true;\n\n    default:\n        return false;\n    }\n}\n\n/**\n * Unregister an extension\n *\n * @param type the type of the extension to remove\n * @param extension the extension to remove\n */\nstatic void unregister_extension(extension_type_t type, void *extension)\n{\n    switch (type) {\n    case EXTENSION_DAEMON:\n        {\n            EXTENSION_DAEMON_DESCRIPTOR *prev = NULL;\n            EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n\n            while (ptr != NULL && ptr != extension) {\n                prev = ptr;\n                ptr = ptr->next;\n            }\n\n            if (ptr != NULL && prev != NULL) {\n                prev->next = ptr->next;\n            }\n\n            if (settings.extensions.daemons == ptr) {\n                settings.extensions.daemons = ptr->next;\n            }\n        }\n        break;\n    case EXTENSION_LOGGER:\n        if (settings.extensions.logger == extension) {\n            if (get_stderr_logger() == extension) {\n                settings.extensions.logger = get_null_logger();\n            } else {\n                settings.extensions.logger = get_stderr_logger();\n            }\n        }\n        break;\n    case EXTENSION_ASCII_PROTOCOL:\n        {\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *prev = NULL;\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *ptr = settings.extensions.ascii;\n\n            while (ptr != NULL && ptr != extension) {\n                prev = ptr;\n                ptr = ptr->next;\n            }\n\n            if (ptr != NULL && prev != NULL) {\n                prev->next = ptr->next;\n            }\n\n            if (settings.extensions.ascii == ptr) {\n                settings.extensions.ascii = ptr->next;\n            }\n        }\n        break;\n\n    default:\n        ;\n    }\n\n}\n\n/**\n * Get the named extension\n */\nstatic void* get_extension(extension_type_t type)\n{\n    switch (type) {\n    case EXTENSION_DAEMON:\n        return settings.extensions.daemons;\n\n    case EXTENSION_LOGGER:\n        return settings.extensions.logger;\n\n    case EXTENSION_ASCII_PROTOCOL:\n        return settings.extensions.ascii;\n\n    default:\n        return NULL;\n    }\n}\n\n#ifdef INNODB_MEMCACHED\nvoid shutdown_server(void) {\n#else\nstatic void shutdown_server(void) {\n#endif /* INNODB_MEMCACHED */\n#ifdef INNODB_MEMCACHED\n    int i;\n    /* Clean up connections */\n    while (listen_conn) {\n\tconn_closing(listen_conn);\n\tlisten_conn = listen_conn->next;\n    }\n\n    for (i = 0; i < num_udp_socket; i++) {\n\tsafe_close(udp_socket[i]);\n    }\n#endif\n    memcached_shutdown = 1;\n}\n\n#ifdef INNODB_MEMCACHED\nbool shutdown_complete(void)\n{\n    return(memcached_shutdown == 2);\n}\n\nbool init_complete(void)\n{\n    return(memcached_initialized == 1);\n}\n#endif\n\nstatic EXTENSION_LOGGER_DESCRIPTOR* get_logger(void)\n{\n    return settings.extensions.logger;\n}\n\nstatic EXTENSION_LOG_LEVEL get_log_level(void)\n{\n    EXTENSION_LOG_LEVEL ret;\n    switch (settings.verbose) {\n    case 0: ret = EXTENSION_LOG_WARNING; break;\n    case 1: ret = EXTENSION_LOG_INFO; break;\n    case 2: ret = EXTENSION_LOG_DEBUG; break;\n    default:\n        ret = EXTENSION_LOG_DETAIL;\n    }\n    return ret;\n}\n\nstatic void set_log_level(EXTENSION_LOG_LEVEL severity)\n{\n    switch (severity) {\n    case EXTENSION_LOG_WARNING: settings.verbose = 0; break;\n    case EXTENSION_LOG_INFO: settings.verbose = 1; break;\n    case EXTENSION_LOG_DEBUG: settings.verbose = 2; break;\n    default:\n        settings.verbose = 3;\n    }\n}\n\nstatic void get_config_append_stats(const char *key, const uint16_t klen,\n                                    const char *val, const uint32_t vlen,\n                                    const void *cookie)\n{\n    if (klen == 0  || vlen == 0) {\n        return ;\n    }\n\n    char *pos = (char*)cookie;\n    size_t nbytes = strlen(pos);\n\n    if ((nbytes + klen + vlen + 3) > 1024) {\n        // Not enough size in the buffer..\n        return;\n    }\n\n    memcpy(pos + nbytes, key, klen);\n    nbytes += klen;\n    pos[nbytes] = '=';\n    ++nbytes;\n    memcpy(pos + nbytes, val, vlen);\n    nbytes += vlen;\n    memcpy(pos + nbytes, \";\", 2);\n}\n\nstatic bool get_config(struct config_item items[]) {\n    char config[1024];\n    config[0] = '\\0';\n    process_stat_settings(get_config_append_stats, config);\n    int rval = parse_config(config, items, NULL);\n    return rval >= 0;\n}\n\n/**\n * Callback the engines may call to get the public server interface\n * @return pointer to a structure containing the interface. The client should\n *         know the layout and perform the proper casts.\n */\nstatic SERVER_HANDLE_V1 *get_server_api(void)\n{\n    static SERVER_CORE_API core_api = {\n        .server_version = get_server_version,\n        .hash = hash,\n        .realtime = realtime,\n        .abstime = abstime,\n        .get_current_time = get_current_time,\n        .parse_config = parse_config,\n        .shutdown = shutdown_server,\n        .get_config = get_config\n    };\n\n    static SERVER_COOKIE_API server_cookie_api = {\n        .get_auth_data = get_auth_data,\n        .store_engine_specific = store_engine_specific,\n        .get_engine_specific = get_engine_specific,\n        .get_socket_fd = get_socket_fd,\n        .set_tap_nack_mode = set_tap_nack_mode,\n        .notify_io_complete = notify_io_complete,\n        .reserve = reserve_cookie,\n        .release = release_cookie\n    };\n\n    static SERVER_STAT_API server_stat_api = {\n        .new_stats = new_independent_stats,\n        .release_stats = release_independent_stats,\n        .evicting = count_eviction\n    };\n\n    static SERVER_LOG_API server_log_api = {\n        .get_logger = get_logger,\n        .get_level = get_log_level,\n        .set_level = set_log_level\n    };\n    static SERVER_EXTENSION_API extension_api = {\n        .register_extension = register_extension,\n        .unregister_extension = unregister_extension,\n        .get_extension = get_extension\n    };\n\n    static SERVER_CALLBACK_API callback_api = {\n        .register_callback = register_callback,\n        .perform_callbacks = perform_callbacks,\n    };\n\n    static SERVER_HANDLE_V1 rv = {\n        .interface = 1,\n        .core = &core_api,\n        .stat = &server_stat_api,\n        .extension = &extension_api,\n        .callback = &callback_api,\n        .log = &server_log_api,\n        .cookie = &server_cookie_api\n    };\n\n    if (rv.engine == NULL) {\n        rv.engine = settings.engine.v0;\n    }\n\n    return &rv;\n}\n\n/**\n * Load a shared object and initialize all the extensions in there.\n *\n * @param soname the name of the shared object (may not be NULL)\n * @param config optional configuration parameters\n * @return true if success, false otherwise\n */\nstatic bool load_extension(const char *soname, const char *config) {\n    if (soname == NULL) {\n        return false;\n    }\n\n    /* Hack to remove the warning from C99 */\n    union my_hack {\n        MEMCACHED_EXTENSIONS_INITIALIZE initialize;\n        void* voidptr;\n    } funky = {.initialize = NULL };\n\n    void *handle = dlopen(soname, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to open library \\\"%s\\\": %s\\n\",\n                soname, msg ? msg : \"unknown error\");\n        return false;\n    }\n\n    void *symbol = dlsym(handle, \"memcached_extensions_initialize\");\n    if (symbol == NULL) {\n        const char *msg = dlerror();\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not find symbol \\\"memcached_extensions_initialize\\\" in %s: %s\\n\",\n                soname, msg ? msg : \"unknown error\");\n        return false;\n    }\n    funky.voidptr = symbol;\n\n    EXTENSION_ERROR_CODE error = (*funky.initialize)(config, get_server_api);\n\n    if (error != EXTENSION_SUCCESS) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to initalize extensions from %s. Error code: %d\\n\",\n                soname, error);\n        dlclose(handle);\n        return false;\n    }\n\n    if (settings.verbose > 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, NULL,\n                \"Loaded extensions from: %s\\n\", soname);\n    }\n\n    return true;\n}\n\n/**\n * Do basic sanity check of the runtime environment\n * @return true if no errors found, false if we can't use this env\n */\nstatic bool sanitycheck(void) {\n    /* One of our biggest problems is old and bogus libevents */\n    const char *ever = event_get_version();\n    if (ever != NULL) {\n        if (strncmp(ever, \"1.\", 2) == 0) {\n            /* Require at least 1.3 (that's still a couple of years old) */\n            if ((ever[2] == '1' || ever[2] == '2') && !isdigit(ever[3])) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"You are using libevent %s.\\nPlease upgrade to\"\n                        \" a more recent version (1.3 or newer)\\n\",\n                        event_get_version());\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n#ifdef INNODB_MEMCACHED\nstatic\nchar*\nmy_strdupl(const char* str, int len)\n{\n\tchar*   s = (char*) malloc(len + 1);\n\ts[len] = 0;\n\treturn((char*) memcpy(s, str, len));\n}\n\n/** Function that messages MySQL config variable string to something\nthat can be parsed by getopt() */\nstatic\nvoid\ndaemon_memcached_make_option(char* option, int* option_argc,\n                             char*** option_argv)\n{\n\tstatic const char*      sep = \" \";\n\tchar*                   last;\n\tchar*                   opt_str;\n\tchar*                   my_str;\n\tint                     num_arg = 0;\n\tint                     i = 1;\n\n\tmy_str = my_strdupl(option, strlen(option));\n\n\tfor (opt_str = strtok_r(my_str, sep, &last);\n\t     opt_str;\n\t     opt_str = strtok_r(NULL, sep, &last)) {\n\t\tnum_arg++;\n\t}\n\n\tfree(my_str);\n\n\tmy_str = option;\n\n\t*option_argv = (char**) malloc((num_arg + 1)\n\t\t\t\t       * sizeof(**option_argv));\n\n\tfor (opt_str = strtok_r(my_str, sep, &last);\n\t     opt_str;\n\t     opt_str = strtok_r(NULL, sep, &last)) {\n\t\t(*option_argv)[i] = my_strdupl(opt_str, strlen(opt_str));\n\t\ti++;\n\t}\n\n\tassert(i == num_arg + 1);\n\n\t*option_argc = (num_arg + 1);\n\n\treturn;\n}\n\n/* Structure that adds the call back functions struture pointers,\npassed to InnoDB engine */\ntypedef struct eng_config_info {\n\tchar*           option_string;\n\tvoid*           cb_ptr;\n\tunsigned int    eng_r_batch_size;\n\tunsigned int    eng_w_batch_size;\n\tbool\t\tenable_binlog;\n} eng_config_info_t;\n#endif /* INNODB_MEMCACHED */\n\n#ifdef INNODB_MEMCACHED\nvoid* daemon_memcached_main(void *p) {\n#else\nint main (int argc, char **argv) {\n#endif\n    int c;\n    bool lock_memory = false;\n    bool do_daemonize = false;\n    bool preallocate = false;\n    int maxcore = 0;\n    char *username = NULL;\n    char *pid_file = NULL;\n    struct passwd *pw;\n    struct rlimit rlim;\n    char unit = '\\0';\n    int size_max = 0;\n\n    bool protocol_specified = false;\n    bool tcp_specified = false;\n    bool udp_specified = false;\n    memcached_context_t* m_config = (memcached_context_t*)p;\n    const char *engine;\n    const char *engine_config = NULL;\n    char old_options[1024] = { [0] = '\\0' };\n    char *old_opts = old_options;\n#ifdef INNODB_MEMCACHED\n    int option_argc = 0;\n    char** option_argv = NULL;\n    eng_config_info_t my_eng_config;\n\n    if (m_config->m_engine_library) {\n\tengine = m_config->m_engine_library;\n\n\t/* FIXME: We should have a better way to pass the callback structure\n\tpoint to storage engine. It is now appended in the configure\n\tstring in eng_config_info_t structure */\n\tmy_eng_config.cb_ptr = m_config->m_innodb_api_cb;\n\tmy_eng_config.eng_r_batch_size = m_config->m_r_batch_size;\n\tmy_eng_config.eng_w_batch_size = m_config->m_w_batch_size;\n\tmy_eng_config.enable_binlog = m_config->m_enable_binlog;\n\tmy_eng_config.option_string = old_opts;\n\tengine_config = (const char *) (&my_eng_config);\n\n    } else {\n\tengine = \"default_engine.so\";\n    }\n#else\n    engine = \"default_engine.so\";\n#endif /* INNODB_MEMCACHED */\n\n    memcached_shutdown = 0;\n    memcached_initialized = 0;\n\n    if (!sanitycheck()) {\n        return(NULL);\n    }\n\n    /* make the time we started always be 2 seconds before we really\n       did, so time(0) - time.started is never zero.  if so, things\n       like 'settings.oldest_live' which act as booleans as well as\n       values are now false in boolean context... */\n    process_started = time(0) - 2;\n    set_current_time();\n\n    /* Initialize the socket subsystem */\n    initialize_sockets();\n\n    /* init settings */\n    settings_init();\n\n    if (memcached_initialize_stderr_logger(get_server_api) != EXTENSION_SUCCESS) {\n        fprintf(stderr, \"Failed to initialize log system\\n\");\n        return (NULL);\n    }\n\n    if (m_config->m_mem_option) {\n\tdaemon_memcached_make_option(m_config->m_mem_option,\n\t\t\t\t     &option_argc,\n\t\t\t\t     &option_argv);\n    }\n\n#ifdef INNODB_MEMCACHED\n\n    if (option_argc > 0 && option_argv) {\n\t    /* Always reset the index to 1, since this function can\n\t    be invoked multiple times with install/uninstall plugins */\n\t    optind = 1;\n\t    while (-1 != (c = getopt(option_argc, option_argv,\n\t\t  \"a:\"  /* access mask for unix socket */\n\t\t  \"p:\"  /* TCP port number to listen on */\n\t\t  \"s:\"  /* unix socket path to listen on */\n\t\t  \"U:\"  /* UDP port number to listen on */\n\t\t  \"m:\"  /* max memory to use for items in megabytes */\n\t\t  \"M\"   /* return error on memory exhausted */\n\t\t  \"c:\"  /* max simultaneous connections */\n\t\t  \"k\"   /* lock down all paged memory */\n\t\t  \"hi\"  /* help, licence info */\n\t\t  \"r\"   /* maximize core file limit */\n\t\t  \"v\"   /* verbose */\n\t\t  \"d\"   /* daemon mode */\n\t\t  \"l:\"  /* interface to listen on */\n\t\t  \"u:\"  /* user identity to run as */\n\t\t  \"P:\"  /* save PID in file */\n\t\t  \"f:\"  /* factor? */\n\t\t  \"n:\"  /* minimum space allocated for key+value+flags */\n\t\t  \"t:\"  /* threads */\n\t\t  \"D:\"  /* prefix delimiter? */\n\t\t  \"L\"   /* Large memory pages */\n\t\t  \"R:\"  /* max requests per event */\n\t\t  \"C\"   /* Disable use of CAS */\n\t\t  \"b:\"  /* backlog queue limit */\n\t\t  \"B:\"  /* Binding protocol */\n\t\t  \"I:\"  /* Max item size */\n\t\t  \"S\"   /* Sasl ON */\n\t\t  \"E:\"  /* Engine to load */\n\t\t  \"e:\"  /* Engine options */\n\t\t  \"q\"   /* Disallow detailed stats */\n\t\t  \"X:\"  /* Load extension */\n\t\t))) {\n\t\tswitch (c) {\n\t\tcase 'a':\n\t\t    /* access for unix domain socket, as octal mask (like chmod)*/\n\t\t    settings.access= strtol(optarg,NULL,8);\n\t\t    break;\n\n\t\tcase 'U':\n\t\t    settings.udpport = atoi(optarg);\n\t\t    udp_specified = true;\n\t\t    break;\n\t\tcase 'p':\n\t\t    settings.port = atoi(optarg);\n\t\t    tcp_specified = true;\n\t\t    break;\n\t\tcase 's':\n\t\t    settings.socketpath = optarg;\n\t\t    break;\n\t\tcase 'm':\n\t\t    settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;\n\t\t     old_opts += sprintf(old_opts, \"cache_size=%lu;\",\n\t\t\t\t\t (unsigned long)settings.maxbytes);\n\t\t   break;\n\t\tcase 'M':\n\t\t    settings.evict_to_free = 0;\n\t\t    old_opts += sprintf(old_opts, \"eviction=false;\");\n\t\t    break;\n\t\tcase 'c':\n\t\t    settings.maxconns = atoi(optarg);\n\t\t    break;\n\t\tcase 'h':\n\t\t    usage();\n\t\t    exit(EXIT_SUCCESS);\n\t\tcase 'i':\n\t\t    usage_license();\n\t\t    exit(EXIT_SUCCESS);\n\t\tcase 'k':\n\t\t    lock_memory = true;\n\t\t    break;\n\t\tcase 'v':\n\t\t    settings.verbose++;\n\t\t    perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n\t\t    break;\n\t\tcase 'l':\n\t\t    settings.inter= strdup(optarg);\n\t\t    break;\n\t\tcase 'd':\n\t\t    do_daemonize = true;\n\t\t    break;\n\t\tcase 'r':\n\t\t    maxcore = 1;\n\t\t    break;\n\t\tcase 'R':\n\t\t    settings.reqs_per_event = atoi(optarg);\n\t\t    if (settings.reqs_per_event <= 0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t      \"Number of requests per event must be greater than 0\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    break;\n\t\tcase 'u':\n\t\t    username = optarg;\n\t\t    break;\n\t\tcase 'P':\n\t\t    pid_file = optarg;\n\t\t    break;\n\t\tcase 'f':\n\t\t    settings.factor = atof(optarg);\n\t\t    if (settings.factor <= 1.0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Factor must be greater than 1\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t     old_opts += sprintf(old_opts, \"factor=%f;\",\n\t\t\t\t\t settings.factor);\n\t\t   break;\n\t\tcase 'n':\n\t\t    settings.chunk_size = atoi(optarg);\n\t\t    if (settings.chunk_size == 0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Chunk size must be greater than 0\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    old_opts += sprintf(old_opts, \"chunk_size=%u;\",\n\t\t\t\t\tsettings.chunk_size);\n\t\t    break;\n\t\tcase 't':\n\t\t    settings.num_threads = atoi(optarg);\n\t\t    if (settings.num_threads <= 0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Number of threads must be greater than 0\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    /* There're other problems when you get above 64 threads.\n\t\t     * In the future we should portably detect # of cores for the\n\t\t     * default.\n\t\t     */\n\t\t    if (settings.num_threads > 64) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"WARNING: Setting a high number of worker\"\n\t\t\t\t\"threads is not recommended.\\n\"\n\t\t\t\t\" Set this value to the number of cores in\"\n\t\t\t\t\" your machine or less.\\n\");\n\t\t    }\n\t\t    break;\n\t\tcase 'D':\n\t\t    settings.prefix_delimiter = optarg[0];\n\t\t    settings.detail_enabled = 1;\n\t\t    break;\n\t\tcase 'L' :\n\t\t    if (enable_large_pages() == 0) {\n\t\t\tpreallocate = true;\n\t\t\told_opts += sprintf(old_opts, \"preallocate=true;\");\n\t\t    }\n\t\t    break;\n\t\tcase 'C' :\n\t\t    settings.use_cas = false;\n\t\t    break;\n\t\tcase 'b' :\n\t\t    settings.backlog = atoi(optarg);\n\t\t    break;\n\t\tcase 'B':\n\t\t    protocol_specified = true;\n\t\t    if (strcmp(optarg, \"auto\") == 0) {\n\t\t\tsettings.binding_protocol = negotiating_prot;\n\t\t    } else if (strcmp(optarg, \"binary\") == 0) {\n\t\t\tsettings.binding_protocol = binary_prot;\n\t\t    } else if (strcmp(optarg, \"ascii\") == 0) {\n\t\t\tsettings.binding_protocol = ascii_prot;\n\t\t    } else {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Invalid value for binding protocol: %s\\n\"\n\t\t\t\t\" -- should be one of auto, binary, or ascii\\n\", optarg);\n\t\t\texit(EX_USAGE);\n\t\t    }\n\t\t    break;\n\t\tcase 'I':\n\t\t    unit = optarg[strlen(optarg)-1];\n\t\t    if (unit == 'k' || unit == 'm' ||\n\t\t\tunit == 'K' || unit == 'M') {\n\t\t\toptarg[strlen(optarg)-1] = '\\0';\n\t\t\tsize_max = atoi(optarg);\n\t\t\tif (unit == 'k' || unit == 'K')\n\t\t\t    size_max *= 1024;\n\t\t\tif (unit == 'm' || unit == 'M')\n\t\t\t    size_max *= 1024 * 1024;\n\t\t\tsettings.item_size_max = size_max;\n\t\t    } else {\n\t\t\tsettings.item_size_max = atoi(optarg);\n\t\t    }\n\t\t    if (settings.item_size_max < 1024) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Item max size cannot be less than 1024 bytes.\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    if (settings.item_size_max > 1024 * 1024 * 128) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Cannot set item size limit higher than 128 mb.\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    if (settings.item_size_max > 1024 * 1024) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t    \"WARNING: Setting item max size above 1MB is not\"\n\t\t\t    \" recommended!\\n\"\n\t\t\t    \" Raising this limit increases the minimum memory requirements\\n\"\n\t\t\t    \" and will decrease your memory efficiency.\\n\"\n\t\t\t);\n\t\t    }\n#ifndef __WIN32__\n\t\t    old_opts += sprintf(old_opts, \"item_size_max=%zu;\",\n\t\t\t\t\tsettings.item_size_max);\n#else\n\t\t    old_opts += sprintf(old_opts, \"item_size_max=%lu;\", (long unsigned)\n\t\t\t\t\tsettings.item_size_max);\n#endif\n\t\t    break;\n\t\tcase 'E':\n\t\t    engine = optarg;\n\t\t    break;\n\t\tcase 'e':\n\t\t    /* FIXME, we use engine_config to pass callback function\n\t\t    for now. Will need a better solution \n\t\t    engine_config = optarg; */\n\t\t    break;\n\t\tcase 'q':\n\t\t    settings.allow_detailed = false;\n\t\t    break;\n\t\tcase 'S': /* set Sasl authentication to true. Default is false */\n# ifdef ENABLE_MEMCACHED_SASL\n#  ifndef SASL_ENABLED\n\t\t    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t    \"This server is not built with SASL support.\\n\");\n\t\t    exit(EX_USAGE);\n#  endif /* !SASL_ENABLED */\n\t\t    settings.require_sasl = true;\n# endif /* ENABLE_MEMCACHED_SASL */\n\t\t    break;\n\t\tcase 'X' :\n\t\t    {\n\t\t\tchar *ptr = strchr(optarg, ',');\n\t\t\tif (ptr != NULL) {\n\t\t\t    *ptr = '\\0';\n\t\t\t    ++ptr;\n\t\t\t}\n\t\t\tif (!load_extension(optarg, ptr)) {\n\t\t\t    exit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tif (ptr != NULL) {\n\t\t\t    *(ptr - 1) = ',';\n\t\t\t}\n\t\t    }\n\t\t    break;\n\t\tdefault:\n\t\t    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t    \"Illegal argument \\\"%c\\\"\\n\", c);\n\t\t    return (void*)1;\n\t\t}\n\t}\n\n\tfree(option_argv);\n    }\n    fprintf(stderr, MEMCACHED_ATOMIC_MSG);\n#else\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"a:\"  /* access mask for unix socket */\n          \"p:\"  /* TCP port number to listen on */\n          \"s:\"  /* unix socket path to listen on */\n          \"U:\"  /* UDP port number to listen on */\n          \"m:\"  /* max memory to use for items in megabytes */\n          \"M\"   /* return error on memory exhausted */\n          \"c:\"  /* max simultaneous connections */\n          \"k\"   /* lock down all paged memory */\n          \"hi\"  /* help, licence info */\n          \"r\"   /* maximize core file limit */\n          \"v\"   /* verbose */\n          \"d\"   /* daemon mode */\n          \"l:\"  /* interface to listen on */\n          \"u:\"  /* user identity to run as */\n          \"P:\"  /* save PID in file */\n          \"f:\"  /* factor? */\n          \"n:\"  /* minimum space allocated for key+value+flags */\n          \"t:\"  /* threads */\n          \"D:\"  /* prefix delimiter? */\n          \"L\"   /* Large memory pages */\n          \"R:\"  /* max requests per event */\n          \"C\"   /* Disable use of CAS */\n          \"b:\"  /* backlog queue limit */\n          \"B:\"  /* Binding protocol */\n          \"I:\"  /* Max item size */\n          \"S\"   /* Sasl ON */\n          \"E:\"  /* Engine to load */\n          \"e:\"  /* Engine options */\n          \"q\"   /* Disallow detailed stats */\n          \"X:\"  /* Load extension */\n        ))) {\n        switch (c) {\n        case 'a':\n            /* access for unix domain socket, as octal mask (like chmod)*/\n            settings.access= strtol(optarg,NULL,8);\n            break;\n\n        case 'U':\n            settings.udpport = atoi(optarg);\n            udp_specified = true;\n            break;\n        case 'p':\n            settings.port = atoi(optarg);\n            tcp_specified = true;\n            break;\n        case 's':\n            settings.socketpath = optarg;\n            break;\n        case 'm':\n            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;\n             old_opts += sprintf(old_opts, \"cache_size=%lu;\",\n                                 (unsigned long)settings.maxbytes);\n           break;\n        case 'M':\n            settings.evict_to_free = 0;\n            old_opts += sprintf(old_opts, \"eviction=false;\");\n            break;\n        case 'c':\n            settings.maxconns = atoi(optarg);\n            break;\n        case 'h':\n            usage();\n            exit(EXIT_SUCCESS);\n        case 'i':\n            usage_license();\n            exit(EXIT_SUCCESS);\n        case 'k':\n            lock_memory = true;\n            break;\n        case 'v':\n            settings.verbose++;\n            perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n            break;\n        case 'l':\n            if (settings.inter != NULL) {\n                size_t len = strlen(settings.inter) + strlen(optarg) + 2;\n                char *p = malloc(len);\n                if (p == NULL) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"Failed to allocate memory\\n\");\n                    return 1;\n                }\n                snprintf(p, len, \"%s,%s\", settings.inter, optarg);\n                free(settings.inter);\n                settings.inter = p;\n            } else {\n                settings.inter= strdup(optarg);\n            }\n            break;\n        case 'd':\n            do_daemonize = true;\n            break;\n        case 'r':\n            maxcore = 1;\n            break;\n        case 'R':\n            settings.reqs_per_event = atoi(optarg);\n            if (settings.reqs_per_event <= 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                      \"Number of requests per event must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 'u':\n            username = optarg;\n            break;\n        case 'P':\n            pid_file = optarg;\n            break;\n        case 'f':\n            settings.factor = atof(optarg);\n            if (settings.factor <= 1.0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Factor must be greater than 1\\n\");\n                return 1;\n            }\n             old_opts += sprintf(old_opts, \"factor=%f;\",\n                                 settings.factor);\n           break;\n        case 'n':\n            settings.chunk_size = atoi(optarg);\n            if (settings.chunk_size == 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Chunk size must be greater than 0\\n\");\n                return 1;\n            }\n            old_opts += sprintf(old_opts, \"chunk_size=%u;\",\n                                settings.chunk_size);\n            break;\n        case 't':\n            settings.num_threads = atoi(optarg);\n            if (settings.num_threads <= 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Number of threads must be greater than 0\\n\");\n                return 1;\n            }\n            /* There're other problems when you get above 64 threads.\n             * In the future we should portably detect # of cores for the\n             * default.\n             */\n            if (settings.num_threads > 64) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"WARNING: Setting a high number of worker\"\n                        \"threads is not recommended.\\n\"\n                        \" Set this value to the number of cores in\"\n                        \" your machine or less.\\n\");\n            }\n            break;\n        case 'D':\n            settings.prefix_delimiter = optarg[0];\n            settings.detail_enabled = 1;\n            break;\n        case 'L' :\n            if (enable_large_pages() == 0) {\n                preallocate = true;\n                old_opts += sprintf(old_opts, \"preallocate=true;\");\n            }\n            break;\n        case 'C' :\n            settings.use_cas = false;\n            break;\n        case 'b' :\n            settings.backlog = atoi(optarg);\n            break;\n        case 'B':\n            protocol_specified = true;\n            if (strcmp(optarg, \"auto\") == 0) {\n                settings.binding_protocol = negotiating_prot;\n            } else if (strcmp(optarg, \"binary\") == 0) {\n                settings.binding_protocol = binary_prot;\n            } else if (strcmp(optarg, \"ascii\") == 0) {\n                settings.binding_protocol = ascii_prot;\n            } else {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Invalid value for binding protocol: %s\\n\"\n                        \" -- should be one of auto, binary, or ascii\\n\", optarg);\n                exit(EX_USAGE);\n            }\n            break;\n        case 'I':\n            unit = optarg[strlen(optarg)-1];\n            if (unit == 'k' || unit == 'm' ||\n                unit == 'K' || unit == 'M') {\n                optarg[strlen(optarg)-1] = '\\0';\n                size_max = atoi(optarg);\n                if (unit == 'k' || unit == 'K')\n                    size_max *= 1024;\n                if (unit == 'm' || unit == 'M')\n                    size_max *= 1024 * 1024;\n                settings.item_size_max = size_max;\n            } else {\n                settings.item_size_max = atoi(optarg);\n            }\n            if (settings.item_size_max < 1024) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Item max size cannot be less than 1024 bytes.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024 * 128) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Cannot set item size limit higher than 128 mb.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"WARNING: Setting item max size above 1MB is not\"\n                    \" recommended!\\n\"\n                    \" Raising this limit increases the minimum memory requirements\\n\"\n                    \" and will decrease your memory efficiency.\\n\"\n                );\n            }\n#ifndef __WIN32__\n            old_opts += sprintf(old_opts, \"item_size_max=%zu;\",\n                                settings.item_size_max);\n#else\n            old_opts += sprintf(old_opts, \"item_size_max=%lu;\", (long unsigned)\n                                settings.item_size_max);\n#endif\n            break;\n        case 'E':\n            engine = optarg;\n            break;\n        case 'e':\n            engine_config = optarg;\n            break;\n        case 'q':\n            settings.allow_detailed = false;\n            break;\n        case 'S': /* set Sasl authentication to true. Default is false */\n#ifndef SASL_ENABLED\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"This server is not built with SASL support.\\n\");\n            exit(EX_USAGE);\n#endif\n            settings.require_sasl = true;\n            break;\n        case 'X' :\n            {\n                char *ptr = strchr(optarg, ',');\n                if (ptr != NULL) {\n                    *ptr = '\\0';\n                    ++ptr;\n                }\n                if (!load_extension(optarg, ptr)) {\n                    exit(EXIT_FAILURE);\n                }\n                if (ptr != NULL) {\n                    *(ptr - 1) = ',';\n                }\n            }\n            break;\n        default:\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n#endif /* INNODB_MEMCACHED */\n\n    if (getenv(\"MEMCACHED_REQS_TAP_EVENT\") != NULL) {\n        settings.reqs_per_tap_event = atoi(getenv(\"MEMCACHED_REQS_TAP_EVENT\"));\n    }\n\n    if (settings.reqs_per_tap_event <= 0) {\n        settings.reqs_per_tap_event = DEFAULT_REQS_PER_TAP_EVENT;\n    }\n\n\n    if (install_sigterm_handler() != 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"Failed to install SIGTERM handler\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    char *topkeys_env = getenv(\"MEMCACHED_TOP_KEYS\");\n    if (topkeys_env != NULL) {\n        settings.topkeys = atoi(topkeys_env);\n        if (settings.topkeys < 0) {\n            settings.topkeys = 0;\n        }\n    }\n\n    if (settings.require_sasl) {\n        if (!protocol_specified) {\n            settings.binding_protocol = binary_prot;\n        } else {\n            if (settings.binding_protocol == negotiating_prot) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"ERROR: You cannot use auto-negotiating protocol while requiring SASL.\\n\");\n                exit(EX_USAGE);\n            }\n            if (settings.binding_protocol == ascii_prot) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"ERROR: You cannot use only ASCII protocol while requiring SASL.\\n\");\n                exit(EX_USAGE);\n            }\n        }\n    }\n\n    if (tcp_specified && !udp_specified) {\n        settings.udpport = settings.port;\n    } else if (udp_specified && !tcp_specified) {\n        settings.port = settings.udpport;\n    }\n\n    /*\n    if (engine_config != NULL && strlen(old_options) > 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"ERROR: You can't mix -e with the old options\\n\");\n        return (NULL);\n    } else if (engine_config == NULL && strlen(old_options) > 0) {\n        engine_config = old_options;\n    } */\n\n    if (maxcore != 0) {\n        struct rlimit rlim_new;\n        /*\n         * First try raising to infinity; if that fails, try bringing\n         * the soft limit to the hard.\n         */\n        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {\n            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;\n            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {\n                /* failed. try raising just to the old max */\n                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;\n                (void)setrlimit(RLIMIT_CORE, &rlim_new);\n            }\n        }\n        /*\n         * getrlimit again to see what we ended up with. Only fail if\n         * the soft limit ends up 0, because then no core files will be\n         * created at all.\n         */\n\n        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to ensure corefile creation\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /*\n     * If needed, increase rlimits to allow as many connections\n     * as needed.\n     */\n\n    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"failed to getrlimit number of files\\n\");\n        exit(EX_OSERR);\n    } else {\n        int maxfiles = settings.maxconns;\n        if (rlim.rlim_cur < maxfiles)\n            rlim.rlim_cur = maxfiles;\n        if (rlim.rlim_max < rlim.rlim_cur)\n            rlim.rlim_max = rlim.rlim_cur;\n        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to set rlimit for open files. Try running as\"\n                    \" root or requesting smaller maxconns value.\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /* Sanity check for the connection structures */\n    int nfiles = 0;\n    if (settings.port != 0) {\n        nfiles += 2;\n    }\n    if (settings.udpport != 0) {\n        nfiles += settings.num_threads * 2;\n    }\n\n    if (settings.maxconns <= nfiles) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Configuratioin error. \\n\"\n                \"You specified %d connections, but the system will use at \"\n                \"least %d\\nconnection structures to start.\\n\",\n                settings.maxconns, nfiles);\n        exit(EX_USAGE);\n    }\n\n    /* lose root privileges if we have them */\n    if (getuid() == 0 || geteuid() == 0) {\n        if (username == 0 || *username == '\\0') {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"can't run as root without the -u switch\\n\");\n            exit(EX_USAGE);\n        }\n        if ((pw = getpwnam(username)) == 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"can't find the user %s to switch to\\n\", username);\n            exit(EX_NOUSER);\n        }\n        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to assume identity of user %s: %s\\n\", username,\n                    strerror(errno));\n            exit(EX_OSERR);\n        }\n    }\n\n#ifdef SASL_ENABLED\n    init_sasl();\n#endif /* SASL */\n\n    /* daemonize if requested */\n    /* if we want to ensure our ability to dump core, don't chdir to / */\n    if (do_daemonize) {\n        if (sigignore(SIGHUP) == -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Failed to ignore SIGHUP: \", strerror(errno));\n        }\n        if (daemonize(maxcore, settings.verbose) == -1) {\n             settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to daemon() in order to daemonize\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    /* lock paged memory if needed */\n    if (lock_memory) {\n#ifdef HAVE_MLOCKALL\n        int res = mlockall(MCL_CURRENT | MCL_FUTURE);\n        if (res != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"warning: -k invalid, mlockall() failed: %s\\n\",\n                    strerror(errno));\n        }\n#else\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\\n\");\n#endif\n    }\n\n    /* initialize main thread libevent instance */\n    main_base = event_init();\n\n    /* Load the storage engine */\n    ENGINE_HANDLE *engine_handle = NULL;\n    if (!load_engine(engine,get_server_api,settings.extensions.logger,&engine_handle)) {\n        /* Error already reported */\n        exit(EXIT_FAILURE);\n    }\n\n    if(!init_engine(engine_handle,engine_config,settings.extensions.logger)) {\n#ifdef INNODB_MEMCACHED\n        shutdown_server();\n        goto func_exit;\n#else\n\treturn(false);\n#endif /* INNODB_MEMCACHED */\n    }\n\n    if(settings.verbose > 0) {\n        log_engine_details(engine_handle,settings.extensions.logger);\n    }\n    settings.engine.v1 = (ENGINE_HANDLE_V1 *) engine_handle;\n\n    if (settings.engine.v1->arithmetic == NULL) {\n        settings.engine.v1->arithmetic = internal_arithmetic;\n    }\n\n    /* initialize other stuff */\n    stats_init();\n\n    if (!(conn_cache = cache_create(\"conn\", sizeof(conn), sizeof(void*),\n                                    conn_constructor, conn_destructor))) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to create connection cache\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    default_independent_stats = new_independent_stats();\n\n#ifdef INNODB_MEMCACHED\n    if (!default_independent_stats) {\n\texit(EXIT_FAILURE);\n    }\n#endif\n\n#ifndef __WIN32__\n    /*\n     * ignore SIGPIPE signals; we can use errno == EPIPE if we\n     * need that information\n     */\n    if (sigignore(SIGPIPE) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"failed to ignore SIGPIPE; sigaction\");\n        exit(EX_OSERR);\n    }\n#endif\n\n    /* start up worker threads if MT mode */\n    thread_init(settings.num_threads, main_base, dispatch_event_handler);\n\n    /* initialise clock event */\n    clock_handler(0, 0, 0);\n\n    /* create unix mode sockets after dropping privileges */\n    if (settings.socketpath != NULL) {\n        if (server_socket_unix(settings.socketpath,settings.access)) {\n            vperror(\"failed to listen on UNIX socket: %s\", settings.socketpath);\n            exit(EX_OSERR);\n        }\n    }\n\n    /* create the listening socket, bind it, and init */\n    if (settings.socketpath == NULL) {\n        int udp_port;\n\n        const char *portnumber_filename = getenv(\"MEMCACHED_PORT_FILENAME\");\n        char temp_portnumber_filename[PATH_MAX];\n        FILE *portnumber_file = NULL;\n\n        if (portnumber_filename != NULL) {\n            snprintf(temp_portnumber_filename,\n                     sizeof(temp_portnumber_filename),\n                     \"%s.lck\", portnumber_filename);\n\n            portnumber_file = fopen(temp_portnumber_filename, \"a\");\n            if (portnumber_file == NULL) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Failed to open \\\"%s\\\": %s\\n\",\n                        temp_portnumber_filename, strerror(errno));\n            }\n        }\n\n        if (settings.port && server_sockets(settings.port, tcp_transport,\n                                            portnumber_file)) {\n\t\tvperror(\"failed to listen on TCP port %d\", settings.port);\n#ifdef INNODB_MEMCACHED\n\t\tshutdown_server();\n\t\tgoto func_exit;\n#else\n\t\texit(EX_OSERR);\n#endif /* INNODB_MEMCACHED */\n        }\n\n        /*\n         * initialization order: first create the listening sockets\n         * (may need root on low ports), then drop root if needed,\n         * then daemonise if needed, then init libevent (in some cases\n         * descriptors created by libevent wouldn't survive forking).\n         */\n        udp_port = settings.udpport ? settings.udpport : settings.port;\n\n        /* create the UDP listening socket and bind it */\n        if (settings.udpport && server_sockets(settings.udpport, udp_transport,\n                                               portnumber_file)) {\n            vperror(\"failed to listen on UDP port %d\", settings.udpport);\n            exit(EX_OSERR);\n        }\n\n        if (portnumber_file) {\n            fclose(portnumber_file);\n            rename(temp_portnumber_filename, portnumber_filename);\n        }\n    }\n\n    if (pid_file != NULL) {\n        save_pid(pid_file);\n    }\n\n    /* Drop privileges no longer needed */\n    drop_privileges();\n\n    memcached_initialized = 1;\n\n    /* enter the event loop */\n    event_base_loop(main_base, 0);\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, NULL,\n                                        \"Initiating shutdown\\n\");\n    }\n\nfunc_exit:\n\n    if (settings.engine.v1)\n      settings.engine.v1->destroy(settings.engine.v0, false);\n\n    threads_shutdown();\n\n    /* remove the PID file if we're a daemon */\n    if (do_daemonize)\n        remove_pidfile(pid_file);\n    /* Clean up strdup() call for bind() address */\n    if (settings.inter)\n      free(settings.inter);\n\n    memcached_shutdown = 2;\n    memcached_initialized = 2;\n\n    return EXIT_SUCCESS;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/plugin/innodb_memcached/daemon_memcached/utilities/engine_loader.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include \"config.h\"\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <dlfcn.h>\n#include \"utilities/engine_loader.h\"\n#include <memcached/types.h>\n\nstatic const char * const feature_descriptions[] = {\n    \"compare and swap\",\n    \"persistent storage\",\n    \"secondary engine\",\n    \"access control\",\n    \"multi tenancy\",\n    \"LRU\"\n};\n\nvoid *handle = NULL;\n\nbool load_engine(const char *soname,\n                 SERVER_HANDLE_V1 *(*get_server_api)(void),\n                 EXTENSION_LOGGER_DESCRIPTOR *logger,\n                 ENGINE_HANDLE **engine_handle)\n{\n    ENGINE_HANDLE *engine = NULL;\n    /* Hack to remove the warning from C99 */\n    union my_hack {\n        CREATE_INSTANCE create;\n        void* voidptr;\n    } my_create = {.create = NULL };\n\n    handle = dlopen(soname, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to open library \\\"%s\\\": %s\\n\",\n                soname ? soname : \"self\",\n                msg ? msg : \"unknown error\");\n        return false;\n    }\n\n    void *symbol = dlsym(handle, \"create_instance\");\n    if (symbol == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not find symbol \\\"create_instance\\\" in %s: %s\\n\",\n                soname ? soname : \"self\",\n                dlerror());\n        return false;\n    }\n    my_create.voidptr = symbol;\n\n    /* request a instance with protocol version 1 */\n    ENGINE_ERROR_CODE error = (*my_create.create)(1, get_server_api, &engine);\n\n    if (error != ENGINE_SUCCESS || engine == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to create instance. Error code: %d\\n\", error);\n        dlclose(handle);\n        return false;\n    }\n    *engine_handle = engine;\n    return true;\n}\n\nbool init_engine(ENGINE_HANDLE * engine,\n                 const char *config_str,\n                 EXTENSION_LOGGER_DESCRIPTOR *logger)\n{\n    ENGINE_HANDLE_V1 *engine_v1 = NULL;\n\n    if (handle == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to initialize engine, engine must fist be loaded.\");\n        return false;\n    }\n\n    if (engine->interface == 1) {\n        engine_v1 = (ENGINE_HANDLE_V1*)engine;\n\n        // validate that the required engine interface is implemented:\n        if (engine_v1->get_info == NULL || engine_v1->initialize == NULL ||\n            engine_v1->destroy == NULL || engine_v1->allocate == NULL ||\n            engine_v1->remove == NULL || engine_v1->release == NULL ||\n            engine_v1->get == NULL || engine_v1->store == NULL ||\n            engine_v1->flush == NULL ||\n            engine_v1->get_stats == NULL || engine_v1->reset_stats == NULL ||\n            engine_v1->item_set_cas == NULL ||\n            engine_v1->get_item_info == NULL)\n        {\n            logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Failed to initialize engine; it does not implement the engine interface.\");\n            return false;\n        }\n\n        ENGINE_ERROR_CODE error = engine_v1->initialize(engine,config_str);\n        if (error != ENGINE_SUCCESS) {\n            engine_v1->destroy(engine, false);\n            logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Failed to initialize instance. Error code: %d\\n\",\n                    error);\n            dlclose(handle);\n            return false;\n        }\n    } else {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"Unsupported interface level\\n\");\n        dlclose(handle);\n        return false;\n    }\n    return true;\n}\n\nvoid log_engine_details(ENGINE_HANDLE * engine,\n                        EXTENSION_LOGGER_DESCRIPTOR *logger)\n{\n    ENGINE_HANDLE_V1 *engine_v1 = (ENGINE_HANDLE_V1*)engine;\n    const engine_info *info;\n    info = engine_v1->get_info(engine);\n    if (info) {\n        char message[4096];\n        ssize_t nw = snprintf(message, sizeof(message), \"Loaded engine: %s\\n\",\n                                        info->description ?\n                                        info->description : \"Unknown\");\n        if (nw == -1) {\n            return;\n        }\n        ssize_t offset = nw;\n        bool comma = false;\n\n        if (info->num_features > 0) {\n            nw = snprintf(message + offset, sizeof(message) - offset,\n                          \"Supplying the following features: \");\n            if (nw == -1) {\n                return;\n            }\n            offset += nw;\n            for (int ii = 0; ii < info->num_features; ++ii) {\n                if (info->features[ii].description != NULL) {\n                    // We don't want to write partially from source\n                    if (sizeof(message)-offset <=\n                        2+strlen(info->features[ii].description))\n                    {\n                        return;\n                    }\n                    nw = snprintf(message + offset, sizeof(message) - offset,\n                                  \"%s%s\", comma ? \", \" : \"\",\n                                  info->features[ii].description);\n                } else {\n                    if (info->features[ii].feature <= LAST_REGISTERED_ENGINE_FEATURE) {\n                        nw = snprintf(message + offset, sizeof(message) - offset,\n                                      \"%s%s\", comma ? \", \" : \"\",\n                                      feature_descriptions[info->features[ii].feature]);\n                    } else {\n                        nw = snprintf(message + offset, sizeof(message) - offset,\n                                      \"%sUnknown feature: %d\", comma ? \", \" : \"\",\n                                      info->features[ii].feature);\n                    }\n                }\n                comma = true;\n                if (nw == -1) {\n                    return;\n                }\n                offset += nw;\n            }\n        }\n        logger->log(EXTENSION_LOG_INFO, NULL, \"%s\\n\", message);\n    } else {\n        logger->log(EXTENSION_LOG_INFO, NULL,\n                                        \"Loaded engine: Unknown\\n\");\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/plugin/innodb_memcached/daemon_memcached/programs/engine_testapp.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include \"config.h\"\n#include <assert.h>\n#include <dlfcn.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <signal.h>\n#include <pthread.h>\n#include \"utilities/engine_loader.h\"\n#include <memcached/engine_testapp.h>\n#include <memcached/extension_loggers.h>\n#include <mock_server.h>\n\nstruct mock_engine {\n    ENGINE_HANDLE_V1 me;\n    ENGINE_HANDLE_V1 *the_engine;\n    TAP_ITERATOR iterator;\n};\n\n#ifndef WIN32\nstatic sig_atomic_t alarmed;\n\nstatic void alarm_handler(int sig) {\n    alarmed = 1;\n}\n#endif\n\nstatic inline struct mock_engine* get_handle(ENGINE_HANDLE* handle) {\n    return (struct mock_engine*)handle;\n}\n\nstatic tap_event_t mock_tap_iterator(ENGINE_HANDLE* handle,\n                                     const void *cookie, item **itm,\n                                     void **es, uint16_t *nes, uint8_t *ttl,\n                                     uint16_t *flags, uint32_t *seqno,\n                                     uint16_t *vbucket) {\n   struct mock_engine *me = get_handle(handle);\n   return me->iterator((ENGINE_HANDLE*)me->the_engine, cookie, itm, es, nes,\n                       ttl, flags, seqno, vbucket);\n}\n\nstatic const engine_info* mock_get_info(ENGINE_HANDLE* handle) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_info((ENGINE_HANDLE*)me->the_engine);\n}\n\nstatic ENGINE_ERROR_CODE mock_initialize(ENGINE_HANDLE* handle,\n                                         const char* config_str) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->initialize((ENGINE_HANDLE*)me->the_engine, config_str);\n}\n\nstatic void mock_destroy(ENGINE_HANDLE* handle, const bool force) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->destroy((ENGINE_HANDLE*)me->the_engine, force);\n}\n\nstatic ENGINE_ERROR_CODE mock_allocate(ENGINE_HANDLE* handle,\n                                       const void* cookie,\n                                       item **item,\n                                       const void* key,\n                                       const size_t nkey,\n                                       const size_t nbytes,\n                                       const int flags,\n                                       const rel_time_t exptime) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->allocate((ENGINE_HANDLE*)me->the_engine, c,\n                                           item, key, nkey,\n                                           nbytes, flags,\n                                           exptime)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_remove(ENGINE_HANDLE* handle,\n                                     const void* cookie,\n                                     const void* key,\n                                     const size_t nkey,\n                                     uint64_t cas,\n                                     uint16_t vbucket)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->remove((ENGINE_HANDLE*)me->the_engine, c, key,\n                                         nkey, cas, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_release(ENGINE_HANDLE* handle,\n                         const void *cookie,\n                         item* item) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->release((ENGINE_HANDLE*)me->the_engine, cookie, item);\n}\n\nstatic ENGINE_ERROR_CODE mock_get(ENGINE_HANDLE* handle,\n                                  const void* cookie,\n                                  item** item,\n                                  const void* key,\n                                  const int nkey,\n                                  uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->get((ENGINE_HANDLE*)me->the_engine, c, item,\n                                      key, nkey, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_get_stats(ENGINE_HANDLE* handle,\n                                        const void* cookie,\n                                        const char* stat_key,\n                                        int nkey,\n                                        ADD_STAT add_stat)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->get_stats((ENGINE_HANDLE*)me->the_engine, c, stat_key,\n                                            nkey, add_stat)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_store(ENGINE_HANDLE* handle,\n                                    const void *cookie,\n                                    item* item,\n                                    uint64_t *cas,\n                                    ENGINE_STORE_OPERATION operation,\n                                    uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->store((ENGINE_HANDLE*)me->the_engine, c, item, cas,\n                                        operation, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_arithmetic(ENGINE_HANDLE* handle,\n                                         const void* cookie,\n                                         const void* key,\n                                         const int nkey,\n                                         const bool increment,\n                                         const bool create,\n                                         const uint64_t delta,\n                                         const uint64_t initial,\n                                         const rel_time_t exptime,\n                                         uint64_t *cas,\n                                         uint64_t *result,\n                                         uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->arithmetic((ENGINE_HANDLE*)me->the_engine, c, key,\n                                             nkey, increment, create,\n                                             delta, initial, exptime,\n                                             cas, result, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_flush(ENGINE_HANDLE* handle,\n                                    const void* cookie, time_t when) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->flush((ENGINE_HANDLE*)me->the_engine, c, when)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_reset_stats(ENGINE_HANDLE* handle, const void *cookie) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->reset_stats((ENGINE_HANDLE*)me->the_engine, cookie);\n}\n\nstatic ENGINE_ERROR_CODE mock_unknown_command(ENGINE_HANDLE* handle,\n                                              const void* cookie,\n                                              protocol_binary_request_header *request,\n                                              ADD_RESPONSE response)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->unknown_command((ENGINE_HANDLE*)me->the_engine, c,\n                                                  request, response)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_item_set_cas(ENGINE_HANDLE *handle, const void *cookie,\n                              item* item, uint64_t val)\n{\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->item_set_cas((ENGINE_HANDLE*)me->the_engine, cookie, item, val);\n}\n\n\nstatic bool mock_get_item_info(ENGINE_HANDLE *handle, const void *cookie,\n                               const item* item, item_info *item_info)\n{\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_item_info((ENGINE_HANDLE*)me->the_engine,\n                                         cookie, item, item_info);\n}\n\nstatic void *mock_get_stats_struct(ENGINE_HANDLE* handle, const void* cookie)\n{\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_stats_struct((ENGINE_HANDLE*)me->the_engine, cookie);\n}\n\nstatic ENGINE_ERROR_CODE mock_aggregate_stats(ENGINE_HANDLE* handle,\n                                              const void* cookie,\n                                              void (*callback)(void*, void*),\n                                              void *vptr)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->aggregate_stats((ENGINE_HANDLE*)me->the_engine, c,\n                                                  callback, vptr)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_tap_notify(ENGINE_HANDLE* handle,\n                                        const void *cookie,\n                                        void *engine_specific,\n                                        uint16_t nengine,\n                                        uint8_t ttl,\n                                        uint16_t tap_flags,\n                                        tap_event_t tap_event,\n                                        uint32_t tap_seqno,\n                                        const void *key,\n                                        size_t nkey,\n                                        uint32_t flags,\n                                        uint32_t exptime,\n                                        uint64_t cas,\n                                        const void *data,\n                                        size_t ndata,\n                                         uint16_t vbucket) {\n\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->tap_notify((ENGINE_HANDLE*)me->the_engine, c,\n                                             engine_specific, nengine, ttl, tap_flags,\n                                             tap_event, tap_seqno, key, nkey, flags,\n                                             exptime, cas, data, ndata, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\n\nstatic TAP_ITERATOR mock_get_tap_iterator(ENGINE_HANDLE* handle, const void* cookie,\n                                           const void* client, size_t nclient,\n                                           uint32_t flags,\n                                           const void* userdata, size_t nuserdata) {\n    struct mock_engine *me = get_handle(handle);\n    me->iterator = me->the_engine->get_tap_iterator((ENGINE_HANDLE*)me->the_engine, cookie,\n                                                    client, nclient, flags, userdata, nuserdata);\n    return (me->iterator != NULL) ? mock_tap_iterator : NULL;\n}\n\nstatic size_t mock_errinfo(ENGINE_HANDLE *handle, const void* cookie,\n                           char *buffer, size_t buffsz) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->errinfo((ENGINE_HANDLE*)me->the_engine, cookie,\n                                   buffer, buffsz);\n}\n\n\nstruct mock_engine default_mock_engine = {\n    .me = {\n        .interface = {\n            .interface = 1\n        },\n        .get_info = mock_get_info,\n        .initialize = mock_initialize,\n        .destroy = mock_destroy,\n        .allocate = mock_allocate,\n        .remove = mock_remove,\n        .release = mock_release,\n        .get = mock_get,\n        .store = mock_store,\n        .arithmetic = mock_arithmetic,\n        .flush = mock_flush,\n        .get_stats = mock_get_stats,\n        .reset_stats = mock_reset_stats,\n        .get_stats_struct = mock_get_stats_struct,\n        .aggregate_stats = mock_aggregate_stats,\n        .unknown_command = mock_unknown_command,\n        .tap_notify = mock_tap_notify,\n        .get_tap_iterator = mock_get_tap_iterator,\n        .item_set_cas = mock_item_set_cas,\n        .get_item_info = mock_get_item_info,\n        .errinfo = mock_errinfo\n    }\n};\nstruct mock_engine mock_engine;\n\nEXTENSION_LOGGER_DESCRIPTOR *logger_descriptor = NULL;\nstatic ENGINE_HANDLE *handle = NULL;\nstatic ENGINE_HANDLE_V1 *handle_v1 = NULL;\n\nstatic void usage(void) {\n    printf(\"\\n\");\n    printf(\"engine_testapp -E <path_to_engine_lib> -T <path_to_testlib>\\n\");\n    printf(\"               [-e <engine_config>] [-h]\\n\");\n    printf(\"\\n\");\n    printf(\"-E <path_to_engine_lib>      Path to the engine library file. The\\n\");\n    printf(\"                             engine library file is a library file\\n\");\n    printf(\"                             (.so or .dll) that the contains the \\n\");\n    printf(\"                             implementation of the engine being\\n\");\n    printf(\"                             tested.\\n\");\n    printf(\"\\n\");\n    printf(\"-T <path_to_testlib>         Path to the test library file. The test\\n\");\n    printf(\"                             library file is a library file (.so or\\n\");\n    printf(\"                             .dll) that contains the set of tests\\n\");\n    printf(\"                             to be executed.\\n\");\n    printf(\"\\n\");\n    printf(\"-t <timeout>                 Maximum time to run a test.\\n\");\n    printf(\"-e <engine_config>           Engine configuration string passed to\\n\");\n    printf(\"                             the engine.\\n\");\n    printf(\"-q                           Only print errors.\");\n    printf(\"-.                           Print a . for each executed test.\");\n    printf(\"\\n\");\n    printf(\"-h                           Prints this usage text.\\n\");\n    printf(\"\\n\");\n}\n\nstatic int report_test(const char *name, enum test_result r, bool quiet) {\n    int rc = 0;\n    char *msg = NULL;\n    bool color_enabled = getenv(\"TESTAPP_ENABLE_COLOR\") != NULL;\n    int color = 0;\n    char color_str[8] = { 0 };\n    char *reset_color = \"\\033[m\";\n    switch(r) {\n    case SUCCESS:\n        msg=\"OK\";\n        color = 32;\n        break;\n    case SKIPPED:\n        msg=\"SKIPPED\";\n        color = 32;\n        break;\n    case FAIL:\n        color = 31;\n        msg=\"FAIL\";\n        rc = 1;\n        break;\n    case DIED:\n        color = 31;\n        msg = \"DIED\";\n        rc = 1;\n        break;\n    case TIMEOUT:\n        color = 31;\n        msg = \"TIMED OUT\";\n        rc = 1;\n        break;\n    case CORE:\n        color = 31;\n        msg = \"CORE DUMPED\";\n        rc = 1;\n        break;\n    case PENDING:\n        color = 33;\n        msg = \"PENDING\";\n        break;\n    }\n    assert(msg);\n    if (color_enabled) {\n        snprintf(color_str, sizeof(color_str), \"\\033[%dm\", color);\n    }\n    if (quiet) {\n        if (r != SUCCESS) {\n            printf(\"%s:  %s%s%s\\n\", name, color_str, msg,\n                   color_enabled ? reset_color : \"\");\n            fflush(stdout);\n        }\n    } else {\n        printf(\"%s%s%s\\n\", color_str, msg, color_enabled ? reset_color : \"\");\n    }\n    return rc;\n}\n\nstatic ENGINE_HANDLE_V1 *start_your_engines(const char *engine, const char* cfg, bool engine_init) {\n\n    init_mock_server(handle);\n    if (!load_engine(engine, &get_mock_server_api, logger_descriptor, &handle)) {\n        fprintf(stderr, \"Failed to load engine %s.\\n\", engine);\n        return NULL;\n    }\n\n    if (engine_init) {\n        if(!init_engine(handle, cfg, logger_descriptor)) {\n            fprintf(stderr, \"Failed to init engine %s with config %s.\\n\", engine, cfg);\n            return NULL;\n        }\n    }\n\n    mock_engine = default_mock_engine;\n    handle_v1 = mock_engine.the_engine = (ENGINE_HANDLE_V1*)handle;\n    handle = (ENGINE_HANDLE*)&mock_engine.me;\n    handle_v1 = &mock_engine.me;\n\n    // Reset all members that aren't set (to allow the users to write\n    // testcases to verify that they initialize them..\n    assert(mock_engine.me.interface.interface == mock_engine.the_engine->interface.interface);\n\n    if (mock_engine.the_engine->get_stats_struct == NULL) {\n        mock_engine.me.get_stats_struct = NULL;\n    }\n    if (mock_engine.the_engine->aggregate_stats == NULL) {\n        mock_engine.me.aggregate_stats = NULL;\n    }\n    if (mock_engine.the_engine->unknown_command == NULL) {\n        mock_engine.me.unknown_command = NULL;\n    }\n    if (mock_engine.the_engine->tap_notify == NULL) {\n        mock_engine.me.tap_notify = NULL;\n    }\n    if (mock_engine.the_engine->get_tap_iterator == NULL) {\n        mock_engine.me.get_tap_iterator = NULL;\n    }\n    if (mock_engine.the_engine->errinfo == NULL) {\n        mock_engine.me.errinfo = NULL;\n    }\n\n    return &mock_engine.me;\n}\n\nstatic void destroy_engine(bool force) {\n    if (handle_v1) {\n        handle_v1->destroy(handle, force);\n        handle_v1 = NULL;\n        handle = NULL;\n    }\n}\n\nstatic void reload_engine(ENGINE_HANDLE **h, ENGINE_HANDLE_V1 **h1,\n                          const char* engine, const char *cfg, bool init, bool force) {\n    destroy_engine(force);\n    handle_v1 = start_your_engines(engine, cfg, init);\n    handle = (ENGINE_HANDLE*)(handle_v1);\n    *h1 = handle_v1;\n    *h = handle;\n}\n\nstatic enum test_result run_test(engine_test_t test, const char *engine, const char *default_cfg) {\n    enum test_result ret = PENDING;\n    if (test.tfun != NULL) {\n#if !defined(USE_GCOV) && !defined(WIN32)\n        pid_t pid = fork();\n        if (pid == 0) {\n#endif\n            /* Start the engines and go */\n            start_your_engines(engine, test.cfg ? test.cfg : default_cfg, true);\n            if (test.test_setup != NULL) {\n                if (!test.test_setup(handle, handle_v1)) {\n                    fprintf(stderr, \"Failed to run setup for test %s\\n\", test.name);\n                    return FAIL;\n                }\n            }\n            ret = test.tfun(handle, handle_v1);\n            if (test.test_teardown != NULL) {\n                if (!test.test_teardown(handle, handle_v1)) {\n                    fprintf(stderr, \"WARNING: Failed to run teardown for test %s\\n\", test.name);\n                }\n            }\n            destroy_engine(false);\n#if !defined(USE_GCOV) && !defined(WIN32)\n            exit((int)ret);\n        } else if (pid == (pid_t)-1) {\n            ret = FAIL;\n        } else {\n            int rc;\n            while (alarmed == 0 && waitpid(pid, &rc, 0) == (pid_t)-1) {\n                if (errno != EINTR) {\n                    abort();\n                }\n            }\n\n            if (alarmed) {\n                kill(pid, 9);\n                ret = TIMEOUT;\n            } else if (WIFEXITED(rc)) {\n                ret = (enum test_result)WEXITSTATUS(rc);\n            } else if (WIFSIGNALED(rc) && WCOREDUMP(rc)) {\n                ret = CORE;\n            } else {\n                ret = DIED;\n            }\n        }\n#endif\n    }\n\n    return ret;\n}\n\nstatic void setup_alarm_handler() {\n#ifndef WIN32\n    struct sigaction sig_handler;\n\n    sig_handler.sa_handler = alarm_handler;\n    sig_handler.sa_flags = 0;\n\n    sigaction(SIGALRM, &sig_handler, NULL);\n#endif\n}\n\nstatic void set_test_timeout(int timeout) {\n#ifndef WIN32\n    alarm(timeout);\n#endif\n}\n\nstatic void clear_test_timeout() {\n#ifndef WIN32\n    alarm(0);\n    alarmed = 0;\n#endif\n}\n\nint main(int argc, char **argv) {\n    int c, exitcode = 0, num_cases = 0, timeout = 0;\n    bool quiet = false;\n    bool dot = false;\n    const char *engine = NULL;\n    const char *engine_args = NULL;\n    const char *test_suite = NULL;\n    const char *test_case = NULL;\n    engine_test_t *testcases = NULL;\n    logger_descriptor = get_null_logger();\n\n    /* Hack to remove the warning from C99 */\n    union {\n        GET_TESTS get_tests;\n        void* voidptr;\n    } my_get_test = {.get_tests = NULL };\n\n    /* Hack to remove the warning from C99 */\n    union {\n        SETUP_SUITE setup_suite;\n        void* voidptr;\n    } my_setup_suite = {.setup_suite = NULL };\n\n    /* Hack to remove the warning from C99 */\n    union {\n        TEARDOWN_SUITE teardown_suite;\n        void* voidptr;\n    } my_teardown_suite = {.teardown_suite = NULL };\n\n\n    /* Use unbuffered stdio */\n    setbuf(stdout, NULL);\n    setbuf(stderr, NULL);\n\n    setup_alarm_handler();\n\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"h\"  /* usage */\n          \"E:\" /* Engine to load */\n          \"e:\" /* Engine options */\n          \"T:\" /* Library with tests to load */\n          \"t:\" /* Timeout */\n          \"q\"  /* Be more quiet (only report failures) */\n          \".\"  /* dot mode. */\n          \"n:\"  /* test case to run */\n        ))) {\n        switch (c) {\n        case 'E':\n            engine = optarg;\n            break;\n        case 'e':\n            engine_args = optarg;\n            break;\n        case 'h':\n            usage();\n            return 0;\n        case 'T':\n            test_suite = optarg;\n            break;\n        case 't':\n            timeout = atoi(optarg);\n            break;\n        case 'n':\n            test_case = optarg;\n            break;\n        case 'q':\n            quiet = true;\n            break;\n        case '.':\n            dot = true;\n            break;\n        default:\n            fprintf(stderr, \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n\n    //validate args\n    if (engine == NULL) {\n        fprintf(stderr, \"You must provide a path to the storage engine library.\\n\");\n        return 1;\n    }\n\n    if (test_suite == NULL) {\n        fprintf(stderr, \"You must provide a path to the testsuite library.\\n\");\n        return 1;\n    }\n\n    //load test_suite\n    void* handle = dlopen(test_suite, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        fprintf(stderr, \"Failed to load testsuite %s: %s\\n\", test_suite, msg ? msg : \"unknown error\");\n        return 1;\n    }\n\n    //get the test cases\n    void *symbol = dlsym(handle, \"get_tests\");\n    if (symbol == NULL) {\n        const char *msg = dlerror();\n        fprintf(stderr, \"Could not find get_tests function in testsuite %s: %s\\n\", test_suite, msg ? msg : \"unknown error\");\n        return 1;\n    }\n    my_get_test.voidptr = symbol;\n    testcases = (*my_get_test.get_tests)();\n\n    //set up the suite if needed\n    struct test_harness harness = { .default_engine_cfg = engine_args,\n                                    .engine_path = engine,\n                                    .reload_engine = reload_engine,\n                                    .start_engine = start_your_engines,\n                                    .create_cookie = create_mock_cookie,\n                                    .destroy_cookie = destroy_mock_cookie,\n                                    .set_ewouldblock_handling = mock_set_ewouldblock_handling,\n                                    .lock_cookie = lock_mock_cookie,\n                                    .unlock_cookie = unlock_mock_cookie,\n                                    .waitfor_cookie = waitfor_mock_cookie,\n                                    .time_travel = mock_time_travel };\n    symbol = dlsym(handle, \"setup_suite\");\n    if (symbol != NULL) {\n        my_setup_suite.voidptr = symbol;\n        if (!(*my_setup_suite.setup_suite)(&harness)) {\n            fprintf(stderr, \"Failed to set up test suite %s \\n\", test_suite);\n            return 1;\n        }\n    }\n\n\n    for (num_cases = 0; testcases[num_cases].name; num_cases++) {\n        /* Just counting */\n    }\n\n    if (!quiet) {\n        printf(\"1..%d\\n\", num_cases);\n    }\n\n    int i;\n    bool need_newline = false;\n    for (i = 0; testcases[i].name; i++) {\n        if (test_case != NULL && strcmp(test_case, testcases[i].name) != 0)\n            continue;\n        if (!quiet) {\n            printf(\"Running %s... \", testcases[i].name);\n            fflush(stdout);\n        } else if(dot) {\n            printf(\".\");\n            need_newline = true;\n            /* Add a newline every few tests */\n            if ((i+1) % 70 == 0) {\n                printf(\"\\n\");\n                need_newline = false;\n            }\n        }\n        set_test_timeout(timeout);\n        exitcode += report_test(testcases[i].name,\n                                run_test(testcases[i], engine, engine_args),\n                                quiet);\n        clear_test_timeout();\n    }\n\n    if (need_newline) {\n        printf(\"\\n\");\n    }\n\n    //tear down the suite if needed\n    symbol = dlsym(handle, \"teardown_suite\");\n    if (symbol != NULL) {\n        my_teardown_suite.voidptr = symbol;\n        if (!(*my_teardown_suite.teardown_suite)()) {\n            fprintf(stderr, \"Failed to teardown up test suite %s \\n\", test_suite);\n        }\n    }\n\n    printf(\"# Passed %d of %d tests\\n\", num_cases - exitcode, num_cases);\n\n    return exitcode;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/plugin/innodb_memcached/daemon_memcached/win32/dlfcn.h": "#ifndef DLFCN_H\n#define DLFCN_H\nvoid* dlopen(const char* path, int mode);\nvoid* dlsym(void* handle, const char* symbol);\nint dlclose(void* handle);\nconst char *dlerror(void);\n\n#define RTLD_LAZY 1\n#define RTLD_LOCAL 2\n\n#define RTLD_NOW 0x00002\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/plugin/innodb_memcached/daemon_memcached/win32/dlfcn.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include <stdio.h>\n#include <windows.h>\n#include <dlfcn.h>\n#include <stdbool.h>\n\n/*\n * Keep track if the user tried to call dlopen(NULL, xx) to be able to give a sane\n * error message\n */\nstatic bool self = false;\n\nvoid* dlopen(const char* path, int mode) {\n    if (path == NULL) {\n        // We don't support opening ourself\n        self = true;\n        return NULL;\n    }\n\n    void* handle = LoadLibrary(path);\n    if (handle == NULL) {\n        char *buf = malloc(strlen(path) + 20);\n        sprintf(buf, \"%s.dll\", path);\n        handle = LoadLibrary(buf);\n        free(buf);\n    }\n\n    return handle;\n}\n\nvoid* dlsym(void* handle, const char* symbol) {\n    return GetProcAddress(handle, symbol);\n}\n\nint dlclose(void* handle) {\n    // dlclose returns zero on success.\n    // FreeLibrary returns nonzero on success.\n    return FreeLibrary(handle) != 0;\n}\n\nstatic char dlerror_buf[200];\n\nconst char *dlerror(void) {\n    if (self) {\n        return \"not supported\";\n    }\n\n    DWORD err = GetLastError();\n    LPVOID error_msg;\n    if (FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n                      FORMAT_MESSAGE_FROM_SYSTEM |\n                      FORMAT_MESSAGE_IGNORE_INSERTS,\n                      NULL, err, 0, (LPTSTR)&error_msg, 0, NULL) != 0) {\n        strncpy(dlerror_buf, error_msg, sizeof(dlerror_buf));\n        dlerror_buf[sizeof(dlerror_buf) - 1] = '\\0';\n        LocalFree(error_msg);\n    } else {\n        return \"Failed to get error message\";\n    }\n\n    return dlerror_buf;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql-common/client_plugin.c": "/* Copyright (c) 2010, 2013, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/**\n  @file\n  \n  Support code for the client side (libmysql) plugins\n\n  Client plugins are somewhat different from server plugins, they are simpler.\n\n  They do not need to be installed or in any way explicitly loaded on the\n  client, they are loaded automatically on demand.\n  One client plugin per shared object, soname *must* match the plugin name.\n\n  There is no reference counting and no unloading either.\n*/\n\n#include <my_global.h>\n#include \"mysql.h\"\n#include <my_sys.h>\n#include <m_string.h>\n#include <my_pthread.h>\n\n#include <sql_common.h>\n#include \"errmsg.h\"\n#include <mysql/client_plugin.h>\n\nstruct st_client_plugin_int {\n  struct st_client_plugin_int *next;\n  void   *dlhandle;\n  struct st_mysql_client_plugin *plugin;\n};\n\nstatic my_bool initialized= 0;\nstatic MEM_ROOT mem_root;\n\nstatic const char *plugin_declarations_sym= \"_mysql_client_plugin_declaration_\";\nstatic uint plugin_version[MYSQL_CLIENT_MAX_PLUGINS]=\n{\n  0, /* these two are taken by Connector/C */\n  0, /* these two are taken by Connector/C */\n  MYSQL_CLIENT_AUTHENTICATION_PLUGIN_INTERFACE_VERSION\n};\n\n/*\n  Loaded plugins are stored in a linked list.\n  The list is append-only, the elements are added to the head (like in a stack).\n  The elements are added under a mutex, but the list can be read and traversed\n  without any mutex because once an element is added to the list, it stays\n  there. The main purpose of a mutex is to prevent two threads from\n  loading the same plugin twice in parallel.\n*/\nstruct st_client_plugin_int *plugin_list[MYSQL_CLIENT_MAX_PLUGINS];\nstatic mysql_mutex_t LOCK_load_client_plugin;\n\nstatic int is_not_initialized(MYSQL *mysql, const char *name)\n{\n  if (initialized)\n    return 0;\n\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD,\n                           unknown_sqlstate, ER(CR_AUTH_PLUGIN_CANNOT_LOAD),\n                           name, \"not initialized\");\n  return 1;\n}\n\n/**\n  finds a plugin in the list\n\n  @param name   plugin name to search for\n  @param type   plugin type\n\n  @note this does NOT necessarily need a mutex, take care!\n  \n  @retval a pointer to a found plugin or 0\n*/\nstatic struct st_mysql_client_plugin *\nfind_plugin(const char *name, int type)\n{\n  struct st_client_plugin_int *p;\n\n  DBUG_ASSERT(initialized);\n  DBUG_ASSERT(type >= 0 && type < MYSQL_CLIENT_MAX_PLUGINS);\n  if (type < 0 || type >= MYSQL_CLIENT_MAX_PLUGINS)\n    return 0;\n\n  for (p= plugin_list[type]; p; p= p->next)\n  {\n    if (strcmp(p->plugin->name, name) == 0)\n      return p->plugin;\n  }\n  return NULL;\n}\n\n/**\n  verifies the plugin and adds it to the list\n\n  @param mysql          MYSQL structure (for error reporting)\n  @param plugin         plugin to install\n  @param dlhandle       a handle to the shared object (returned by dlopen)\n                        or 0 if the plugin was not dynamically loaded\n  @param argc           number of arguments in the 'va_list args'\n  @param args           arguments passed to the plugin initialization function\n\n  @retval a pointer to an installed plugin or 0\n*/\nstatic struct st_mysql_client_plugin *\ndo_add_plugin(MYSQL *mysql, struct st_mysql_client_plugin *plugin,\n              void *dlhandle,\n              int argc, va_list args)\n{\n  const char *errmsg;\n  struct st_client_plugin_int plugin_int, *p;\n  char errbuf[1024];\n\n  DBUG_ASSERT(initialized);\n\n  plugin_int.plugin= plugin;\n  plugin_int.dlhandle= dlhandle;\n\n  if (plugin->type >= MYSQL_CLIENT_MAX_PLUGINS)\n  {\n    errmsg= \"Unknown client plugin type\";\n    goto err1;\n  }\n\n  if (plugin->interface_version < plugin_version[plugin->type] ||\n      (plugin->interface_version >> 8) >\n       (plugin_version[plugin->type] >> 8))\n  {\n    errmsg= \"Incompatible client plugin interface\";\n    goto err1;\n  }\n\n  /* Call the plugin initialization function, if any */\n  if (plugin->init && plugin->init(errbuf, sizeof(errbuf), argc, args))\n  {\n    errmsg= errbuf;\n    goto err1;\n  }\n\n  p= (struct st_client_plugin_int *)\n    memdup_root(&mem_root, &plugin_int, sizeof(plugin_int));\n\n  if (!p)\n  {\n    errmsg= \"Out of memory\";\n    goto err2;\n  }\n\n  mysql_mutex_assert_owner(&LOCK_load_client_plugin);\n\n  p->next= plugin_list[plugin->type];\n  plugin_list[plugin->type]= p;\n  net_clear_error(&mysql->net);\n\n  return plugin;\n\nerr2:\n  if (plugin->deinit)\n    plugin->deinit();\nerr1:\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                           ER(CR_AUTH_PLUGIN_CANNOT_LOAD), plugin->name,\n                           errmsg);\n  if (dlhandle)\n    dlclose(dlhandle);\n  return NULL;\n}\n\n\nstatic struct st_mysql_client_plugin *\nadd_plugin_noargs(MYSQL *mysql, struct st_mysql_client_plugin *plugin,\n                  void *dlhandle,\n                  int argc, ...)\n{\n  struct st_mysql_client_plugin *retval= NULL;\n  va_list ap;\n  va_start(ap, argc);\n  retval= do_add_plugin(mysql, plugin, dlhandle, argc, ap);\n  va_end(ap);\n  return retval;\n}\n\n\nstatic struct st_mysql_client_plugin *\nadd_plugin_withargs(MYSQL *mysql, struct st_mysql_client_plugin *plugin,\n                    void *dlhandle,\n                    int argc, va_list args)\n{\n  return do_add_plugin(mysql, plugin, dlhandle, argc, args);\n}\n\n\n\n/**\n  Loads plugins which are specified in the environment variable\n  LIBMYSQL_PLUGINS.\n  \n  Multiple plugins must be separated by semicolon. This function doesn't\n  return or log an error.\n\n  The function is be called by mysql_client_plugin_init\n\n  @todo\n  Support extended syntax, passing parameters to plugins, for example\n  LIBMYSQL_PLUGINS=\"plugin1(param1,param2);plugin2;...\"\n  or\n  LIBMYSQL_PLUGINS=\"plugin1=int:param1,str:param2;plugin2;...\"\n*/\nstatic void load_env_plugins(MYSQL *mysql)\n{\n  char *plugs, *free_env, *s= getenv(\"LIBMYSQL_PLUGINS\");\n  char *enable_cleartext_plugin= getenv(\"LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN\");\n\n  if (enable_cleartext_plugin && strchr(\"1Yy\", enable_cleartext_plugin[0]))\n    libmysql_cleartext_plugin_enabled= 1;\n\n  /* no plugins to load */\n  if(!s)\n    return;\n\n  free_env= plugs= my_strdup(s, MYF(MY_WME));\n\n  do {\n    if ((s= strchr(plugs, ';')))\n      *s= '\\0';\n    mysql_load_plugin(mysql, plugs, -1, 0);\n    plugs= s + 1;\n  } while (s);\n\n  my_free(free_env);\n\n}\n\n/********** extern functions to be used by libmysql *********************/\n\n/**\n  Initializes the client plugin layer.\n\n  This function must be called before any other client plugin function.\n\n  @retval 0    successful\n  @retval != 0 error occured\n*/\nint mysql_client_plugin_init()\n{\n  MYSQL mysql;\n  struct st_mysql_client_plugin **builtin;\n\n  if (initialized)\n    return 0;\n\n  memset(&mysql, 0, sizeof(mysql)); /* dummy mysql for set_mysql_extended_error */\n\n  mysql_mutex_init(0, &LOCK_load_client_plugin, MY_MUTEX_INIT_SLOW);\n  init_alloc_root(&mem_root, 128, 128);\n\n  memset(&plugin_list, 0, sizeof(plugin_list));\n\n  initialized= 1;\n\n  mysql_mutex_lock(&LOCK_load_client_plugin);\n\n  for (builtin= mysql_client_builtins; *builtin; builtin++)\n    add_plugin_noargs(&mysql, *builtin, 0, 0);\n\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n\n  load_env_plugins(&mysql);\n\n  return 0;\n}\n\n/**\n  Deinitializes the client plugin layer.\n\n  Unloades all client plugins and frees any associated resources.\n*/\nvoid mysql_client_plugin_deinit()\n{\n  int i;\n  struct st_client_plugin_int *p;\n\n  if (!initialized)\n    return;\n\n  for (i=0; i < MYSQL_CLIENT_MAX_PLUGINS; i++)\n    for (p= plugin_list[i]; p; p= p->next)\n    {\n      if (p->plugin->deinit)\n        p->plugin->deinit();\n      if (p->dlhandle)\n        dlclose(p->dlhandle);\n    }\n\n  memset(&plugin_list, 0, sizeof(plugin_list));\n  initialized= 0;\n  free_root(&mem_root, MYF(0));\n  mysql_mutex_destroy(&LOCK_load_client_plugin);\n}\n\n/************* public facing functions, for client consumption *********/\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_client_register_plugin(MYSQL *mysql,\n                             struct st_mysql_client_plugin *plugin)\n{\n  if (is_not_initialized(mysql, plugin->name))\n    return NULL;\n\n  mysql_mutex_lock(&LOCK_load_client_plugin);\n\n  /* make sure the plugin wasn't loaded meanwhile */\n  if (find_plugin(plugin->name, plugin->type))\n  {\n    set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD,\n                             unknown_sqlstate, ER(CR_AUTH_PLUGIN_CANNOT_LOAD),\n                             plugin->name, \"it is already loaded\");\n    plugin= NULL;\n  }\n  else\n    plugin= add_plugin_noargs(mysql, plugin, 0, 0);\n\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n  return plugin;\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_load_plugin_v(MYSQL *mysql, const char *name, int type,\n                    int argc, va_list args)\n{\n  const char *errmsg;\n  char dlpath[FN_REFLEN+1];\n  void *sym, *dlhandle;\n  struct st_mysql_client_plugin *plugin;\n  const char *plugindir;\n#ifdef _WIN32\n  char win_errormsg[2048];\n#endif\n\n  DBUG_ENTER (\"mysql_load_plugin_v\");\n  DBUG_PRINT (\"entry\", (\"name=%s type=%d int argc=%d\", name, type, argc));\n  if (is_not_initialized(mysql, name))\n  {\n    DBUG_PRINT (\"leave\", (\"mysql not initialized\"));\n    DBUG_RETURN (NULL);\n  }\n\n  mysql_mutex_lock(&LOCK_load_client_plugin);\n\n  /* make sure the plugin wasn't loaded meanwhile */\n  if (type >= 0 && find_plugin(name, type))\n  {\n    errmsg= \"it is already loaded\";\n    goto err;\n  }\n\n  if (mysql->options.extension && mysql->options.extension->plugin_dir)\n  {\n    plugindir= mysql->options.extension->plugin_dir;\n  }\n  else\n  {\n    plugindir= getenv(\"LIBMYSQL_PLUGIN_DIR\");\n    if (!plugindir)\n    {\n      plugindir= PLUGINDIR;\n    }\n  }\n\n  /* Compile dll path */\n  strxnmov(dlpath, sizeof(dlpath) - 1,\n           plugindir, \"/\",\n           name, SO_EXT, NullS);\n   \n  DBUG_PRINT (\"info\", (\"dlopeninig %s\", dlpath));\n  /* Open new dll handle */\n  if (!(dlhandle= dlopen(dlpath, RTLD_NOW)))\n  {\n#if defined(__APPLE__)\n    /* Apple supports plugins with .so also, so try this as well */\n    strxnmov(dlpath, sizeof(dlpath) - 1,\n             mysql->options.extension && mysql->options.extension->plugin_dir ?\n             mysql->options.extension->plugin_dir : PLUGINDIR, \"/\",\n             name, \".so\", NullS);\n    if ((dlhandle= dlopen(dlpath, RTLD_NOW)))\n      goto have_plugin;\n#endif\n\n#ifdef _WIN32\n    /* There should be no win32 calls between failed dlopen() and GetLastError() */\n    if(FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM,\n                  0, GetLastError(), 0, win_errormsg, 2048, NULL))\n      errmsg= win_errormsg;\n    else\n      errmsg= \"\";\n#else\n    errmsg= dlerror();\n#endif\n    DBUG_PRINT (\"info\", (\"failed to dlopen\"));\n    goto err;\n  }\n\n#if defined(__APPLE__)\nhave_plugin:  \n#endif\n  if (!(sym= dlsym(dlhandle, plugin_declarations_sym)))\n  {\n    errmsg= \"not a plugin\";\n    dlclose(dlhandle);\n    goto err;\n  }\n\n  plugin= (struct st_mysql_client_plugin*)sym;\n\n  if (type >=0 && type != plugin->type)\n  {\n    errmsg= \"type mismatch\";\n    goto err;\n  }\n\n  if (strcmp(name, plugin->name))\n  {\n    errmsg= \"name mismatch\";\n    goto err;\n  }\n\n  if (type < 0 && find_plugin(name, plugin->type))\n  {\n    errmsg= \"it is already loaded\";\n    goto err;\n  }\n\n  plugin= add_plugin_withargs(mysql, plugin, dlhandle, argc, args);\n\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n\n  DBUG_PRINT (\"leave\", (\"plugin loaded ok\"));\n  DBUG_RETURN (plugin);\n\nerr:\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n  DBUG_PRINT (\"leave\", (\"plugin load error : %s\", errmsg));\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                           ER(CR_AUTH_PLUGIN_CANNOT_LOAD), name, errmsg);\n  DBUG_RETURN (NULL);\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_load_plugin(MYSQL *mysql, const char *name, int type, int argc, ...)\n{\n  struct st_mysql_client_plugin *p;\n  va_list args;\n  va_start(args, argc);\n  p= mysql_load_plugin_v(mysql, name, type, argc, args);\n  va_end(args);\n  return p;\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *\nmysql_client_find_plugin(MYSQL *mysql, const char *name, int type)\n{\n  struct st_mysql_client_plugin *p;\n\n  DBUG_ENTER (\"mysql_client_find_plugin\");\n  DBUG_PRINT (\"entry\", (\"name=%s, type=%d\", name, type));\n  if (is_not_initialized(mysql, name))\n    DBUG_RETURN (NULL);\n\n  if (type < 0 || type >= MYSQL_CLIENT_MAX_PLUGINS)\n  {\n    set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                             ER(CR_AUTH_PLUGIN_CANNOT_LOAD), name,\n                             \"invalid type\");\n  }\n\n  if ((p= find_plugin(name, type)))\n  {\n    DBUG_PRINT (\"leave\", (\"found %p\", p));\n    DBUG_RETURN (p);\n  }\n\n  /* not found, load it */\n  p= mysql_load_plugin(mysql, name, type, 0);\n  DBUG_PRINT (\"leave\", (\"loaded %p\", p));\n  DBUG_RETURN (p);\n}\n\n\n/* see <mysql/client_plugin.h> for a full description */\nint mysql_plugin_options(struct st_mysql_client_plugin *plugin,\n                                 const char *option,\n                                 const void *value)\n{\n  DBUG_ENTER(\"mysql_plugin_options\");\n  /* does the plugin support options call? */\n  if (!plugin || !plugin->options)\n    DBUG_RETURN(1);\n  DBUG_RETURN(plugin->options(option, value));\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/valgrind.supp": "# Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU Library General Public\n# License as published by the Free Software Foundation; version 2\n# of the License.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# Library General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n\n#\n# Suppress some common (not fatal) errors in system libraries found by valgrind\n#\n\n#\n# Pthread doesn't free all thread specific memory before program exists\n#\n{\n   pthread allocate_tls memory loss\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_allocate_tls\n   fun:allocate_stack\n   fun:pthread_create*\n}\n\n{\n   pthread allocate_tls memory loss\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_allocate_tls\n   fun:pthread_create*\n\n}\n\n{\n   pthead_exit memory loss 1\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n}\n\n{\n   pthread_exit memory loss 2\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 3\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 4\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 5\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n}\n\n{\n   pthread allocate_dtv memory loss\n   Memcheck:Leak\n   fun:calloc\n   fun:allocate_dtv\n   fun:_dl_allocate_tls_storage\n   fun:__GI__dl_allocate_tls\n   fun:pthread_create\n}\n\n{\n   pthread allocate_dtv memory loss second\n   Memcheck:Leak\n   fun:calloc\n   fun:allocate_dtv\n   fun:_dl_allocate_tls\n   fun:pthread_create*\n}\n\n{\n   pthread memalign memory loss\n   Memcheck:Leak\n   fun:memalign\n   fun:_dl_allocate_tls_storage\n   fun:__GI__dl_allocate_tls\n   fun:pthread_create\n}\n\n{\n   pthread pthread_key_create\n   Memcheck:Leak\n   fun:malloc\n   fun:*\n   fun:*\n   fun:pthread_key_create\n   fun:my_thread_global_init\n}\n\n{\n   pthread strstr uninit\n   Memcheck:Cond\n   fun:strstr\n   obj:/lib/tls/libpthread.so.*\n   obj:/lib/tls/libpthread.so.*\n   fun:call_init\n   fun:_dl_init\n   obj:/lib/ld-*.so\n}\n\n{\n   pthread strstr uninit\n   Memcheck:Cond\n   fun:strstr\n   obj:/lib/tls/libpthread.so.*\n   obj:/lib/tls/libpthread.so.*\n   fun:call_init\n   fun:_dl_init\n   obj:/lib/ld-*.so\n}\n\n{\n   strlen/_dl_init_paths/dl_main/_dl_sysdep_start(Cond)\n   Memcheck:Cond\n   fun:strlen\n   fun:_dl_init_paths\n   fun:dl_main\n   fun:_dl_sysdep_start\n}\n\n{\n   pthread errno\n   Memcheck:Leak\n   fun:calloc\n   fun:_dlerror_run\n   fun:dlsym\n   fun:__errno_location\n}\n\n\n#\n# Warnings in libz becasue it works with aligned memory(?)\n#\n\n{\n   libz tr_flush_block\n   Memcheck:Cond\n   fun:_tr_flush_block\n   fun:deflate_slow\n   fun:deflate\n   fun:do_flush\n   fun:gzclose\n}\n\n{\n   libz tr_flush_block2\n   Memcheck:Cond\n   fun:_tr_flush_block\n   fun:deflate_slow\n   fun:deflate\n   fun:compress2\n}\n\n{\n   libz longest_match\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n}\n\n{\n   libz deflate\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   fun:compress2\n}\n\n{\n   libz deflate2\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   obj:*/libz.so.*\n   fun:gzflush\n}\n\n{\n   libz deflate3\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   fun:do_flush\n}\n\n{\n  libz deflate4\n  Memcheck:Param\n  write(buf)\n  fun:*\n  fun:my_write\n  fun:do_flush\n  fun:azclose\n}\n\n#\n# Warning from my_thread_init becasue mysqld dies before kill thread exists\n#\n\n{\n   my_thread_init kill thread memory loss second\n   Memcheck:Leak\n   fun:calloc\n   fun:my_thread_init\n   fun:kill_server_thread\n}\n\n\n# Red Hat AS 4 32 bit\n{\n   dl_relocate_object\n   Memcheck:Cond\n   fun:_dl_relocate_object\n}\n\n#\n# Warning from my_thread_init becasue mysqld dies before kill thread exists\n#\n\n{\n   my_thread_init kill thread memory loss second\n   Memcheck:Leak\n   fun:calloc\n   fun:my_thread_init\n   fun:kill_server_thread\n}\n\n#\n# Leaks reported in _dl_* internal functions on Linux amd64 / glibc2.3.2.\n#\n\n{\n   _dl_start invalid write8\n   Memcheck:Addr8\n   fun:_dl_start\n}\n\n{\n   _dl_start invalid write4\n   Memcheck:Addr4\n   fun:_dl_start\n}\n\n{\n   _dl_start/_dl_setup_hash invalid read8\n   Memcheck:Addr8\n   fun:_dl_setup_hash\n   fun:_dl_start\n}\n\n{\n   _dl_sysdep_start invalid write8\n   Memcheck:Addr8\n   fun:_dl_sysdep_start\n}\n\n{\n   _dl_init invalid write8\n   Memcheck:Addr8\n   fun:_dl_init\n}\n\n{\n   _dl_init invalid write4\n   Memcheck:Addr4\n   fun:_dl_init\n}\n\n{\n   _dl_init/_dl_init invalid read8\n   Memcheck:Addr8\n   fun:_dl_debug_initialize\n   fun:_dl_init\n}\n\n{\n   _dl_init/_dl_debug_state invalid read8\n   Memcheck:Addr8\n   fun:_dl_debug_state\n   fun:_dl_init\n}\n\n{\n   init invalid write8\n   Memcheck:Addr8\n   fun:init\n}\n\n{\n   fixup invalid write8\n   Memcheck:Addr8\n   fun:fixup\n}\n\n{\n   fixup/_dl_lookup_versioned_symbol invalid read8\n   Memcheck:Addr8\n   fun:_dl_lookup_versioned_symbol\n   fun:fixup\n}\n\n{\n   _dl_runtime_resolve invalid read8\n   Memcheck:Addr8\n   fun:_dl_runtime_resolve\n}\n\n{\n   __libc_start_main invalid write8\n   Memcheck:Addr8\n   fun:__libc_start_main\n}\n\n{\n   __libc_start_main/__sigjmp_save invalid write4\n   Memcheck:Addr4\n   fun:__sigjmp_save\n   fun:__libc_start_main\n}\n\n#\n# These seem to be libc threading stuff, not related to MySQL code (allocations\n# during pthread_exit()). Googling shows other projects also using these\n# suppressions.\n#\n# Note that these all stem from pthread_exit() deeper in the call stack, but\n# Valgrind only allows the top four calls in the suppressions.\n#\n\n{\n   libc pthread_exit 1\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n}\n\n{\n   libc pthread_exit 2\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 3\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 4\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 5\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n}\n\n{\n   libc pthread_exit 6\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:openaux\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 7\n   Memcheck:Leak\n   fun:malloc\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n}\n\n{\n   libc pthread_exit 8\n   Memcheck:Leak\n   fun:malloc\n   fun:local_strdup\n   fun:_dl_map_object\n   fun:dl_open_worker\n}\n\n#\n# This is seen internally in the system libraries on 64-bit RHAS3.\n#\n\n{\n   __lll_mutex_unlock_wake uninitialized\n   Memcheck:Param\n   futex(utime)\n   fun:__lll_mutex_unlock_wake\n}\n\n#\n# BUG#19940: NDB sends uninitialized parts of field buffers across the wire.\n# This is \"works as designed\"; the uninitialized part is not used at the\n# other end (but Valgrind cannot see this).\n#\n{\n   bug19940\n   Memcheck:Param\n   socketcall.sendto(msg)\n   fun:send\n   fun:_ZN15TCP_Transporter6doSendEv\n   fun:_ZN19TransporterRegistry11performSendEv\n   fun:_ZN19TransporterRegistry14forceSendCheckEi\n}\n# Warning when printing stack trace (to suppress some not needed warnings)\n#\n\n{\n   vprintf on stacktrace\n   Memcheck:Cond\n   fun:vfprintf\n   fun:uffered_vfprintf\n   fun:vfprintf\n   fun:fprintf\n   fun:print_stacktrace\n}\n\n#\n# Safe warnings, that may happen because of thread scheduling\n#\n\n{\n   dbug initialization by kill_server\n   Memcheck:Leak\n   fun:malloc\n   fun:DbugMalloc\n   fun:code_state\n   fun:_db_enter_\n   fun:kill_server\n}\n\n#\n# Warning caused by small memory leak in threaded dlopen\n#\n\n{\n   dlopen threaded memory leak\n   Memcheck:Leak\n   fun:calloc\n   obj:*/libdl-*.so\n   fun:dlopen*\n}\n\n#\n# Pthread doesn't free all thread specific memory before program exists\n#\n{\n   pthread allocate_tls memory loss in 2.6.1.\n   Memcheck:Leak\n   fun:calloc\n   obj:*/ld-*.so\n   fun:_dl_allocate_tls\n   fun:pthread_create*\n}\n\n{\n   buf_buddy_relocate peeking (space,page) in potentially free blocks\n   Memcheck:Addr1\n   fun:buf_buddy_relocate\n}\n\n#\n# See related Bug#56666\n# Race condition between the server main thread and the kill server thread.\n#\n# Because of this race condition, the call to shutdown_performance_schema()\n# was commented in sql/mysqld.cc, causing the reported leaks.\n#\n\n{\n   missing shutdown_performance_schema 1a\n   Memcheck:Leak\n   fun:malloc\n   fun:_Z10pfs_mallocmi\n}\n\n{\n   missing shutdown_performance_schema 1b\n   Memcheck:Leak\n   fun:memalign\n   fun:posix_memalign\n   fun:_Z10pfs_mallocmi\n}\n\n{\n   missing shutdown_performance_schema 2\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_lf_alloc_new\n   fun:lf_hash_insert\n}\n\n#\n# Note that initialize_bucket() is reccursive,\n# can't provide more stack context.\n#\n{\n   missing shutdown_performance_schema 3a\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:initialize_bucket\n}\n\n{\n   missing shutdown_performance_schema 3b\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_lf_dynarray_lvalue\n   fun:initialize_bucket\n}\n\n{\n   missing shutdown_performance_schema 4\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_lf_dynarray_lvalue\n   fun:_lf_pinbox_get_pins\n}\n\n{\n   missing shutdown_performance_schema 5\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_lf_dynarray_lvalue\n   fun:lf_hash_insert\n}\n\n{\n   missing shutdown_performance_schema 6\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_lf_dynarray_lvalue\n   fun:lf_hash_delete\n}\n\n{\n   missing shutdown_performance_schema 7\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_lf_dynarray_lvalue\n   fun:lf_hash_search\n}\n\n{\n   missing shutdown_performance_schema 8\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_Z22add_pfs_instr_to_arrayPKcS0_\n   fun:mysqld_get_one_option\n   fun:my_handle_options\n   fun:handle_options\n   fun:_Z20handle_early_optionsv\n}\n\n{\n   missing shutdown_performance_schema 9\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:init_dynamic_array2\n   fun:_Z25init_pfs_instrument_arrayv\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n{\n   missing shutdown_performance_schema 9a\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:_Z22add_pfs_instr_to_arrayPKcS0_\n   fun:mysqld_get_one_option\n   fun:my_handle_options\n   fun:_Z20handle_early_optionsv\n   fun:_Z11mysqld_mainiPPc\n}\n\n# Same as shutdown_performance_schema 9,\n# but the compiler/linker can sometime change the\n# calls from:\n# main()\n#   --> init_pfs_instrument_array()\n#     --> init_dynamic_array2()\n# to:\n# main()\n#   --> init_dynamic_array2()\n# when building with optimizations.\n\n{\n   missing shutdown_performance_schema 10\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:init_dynamic_array2\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n{\n   missing shutdown_performance_schema 11\n   Memcheck:Leak\n   fun:malloc\n   fun:my_malloc\n   fun:init_dynamic_array2\n   fun:_Z11mysqld_mainiPPc\n   fun:(below main)\n}\n\n{\n   Bug 59874 Valgrind warning in InnoDB compression code\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:btr_store_big_rec_extern_fields_func\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:page_zip_compress\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:page_zip_compress_deflate\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_zip_reorganize\n   fun:page_cur_insert_rec_zip_reorg\n   fun:page_cur_insert_rec_zip\n   fun:page_cur_tuple_insert\n   fun:btr_cur_optimistic_insert\n   fun:btr_cur_pessimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_zip_reorganize\n   fun:page_cur_insert_rec_zip_reorg\n   fun:page_cur_insert_rec_zip\n   fun:page_cur_tuple_insert\n   fun:btr_cur_optimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_copy_rec_list_end\n   fun:page_move_rec_list_end\n   fun:btr_page_split_and_insert\n   fun:btr_root_raise_and_insert\n   fun:btr_cur_pessimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_cur_insert_rec_zip_reorg\n   fun:page_cur_insert_rec_zip\n   fun:page_cur_tuple_insert\n   fun:btr_cur_optimistic_insert\n   fun:btr_cur_pessimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   Bug 59875 Valgrind warning in buf0buddy.c\n   Memcheck:Addr1\n   fun:mach_read_from_4\n   fun:buf_buddy_relocate\n   fun:buf_buddy_free_low\n   fun:buf_buddy_free\n}\n\n# Note the wildcard in the (mangled) function signatures of\n# write_keys() and find_all_keys().\n# They both return ha_rows, which is platform dependent.\n#\n# The '...' wildcards are for 'fun:inline_mysql_file_write' which *may*\n# be inlined.\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / one\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:my_b_flush_io_cache\n   fun:_my_b_write\n   fun:_Z*10write_keysP10Sort_paramP13Filesort_infojP11st_io_cacheS4_\n   ...\n   fun:_Z8filesortP3THDP5TABLEP8FilesortbPyS5_\n}\n\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / two\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:my_b_flush_io_cache\n   fun:_Z15merge_many_buffP10Sort_paramPhP10st_buffpekPjP11st_io_cache\n   fun:_Z8filesortP3THDP5TABLEP8FilesortbPyS5_\n}\n\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / three\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:my_b_flush_io_cache\n   fun:_Z8filesortP3THDP5TABLEP8FilesortbPyS5_\n}\n\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / four\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:my_b_flush_io_cache\n   fun:_my_b_write\n   fun:_Z*10write_keysP10Sort_paramP13Filesort_infojP11st_io_cacheS4_\n   fun:_Z8filesortP3THDP5TABLEP8FilesortbPyS5_\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   ...\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:engine_cleanup_add_last\n   fun:ENGINE_add\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   fun:engine_cleanup_add_last\n   fun:ENGINE_add\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:ENGINE_new\n}\n\n{\n   BUG#14801497 CONDITIONAL JUMP OR MOVE DEPENDS ON UNINITIALISED VALUE(S) IN CREATE_TMP_TABLE\n   Memcheck:Cond\n   fun:_Z16create_tmp_tableP3THDP15TMP_TABLE_PARAMR4ListI4ItemEP8st_orderbbyyPKc\n   fun:_Z19create_schema_tableP3THDP10TABLE_LIST\n   fun:_Z18mysql_schema_tableP3THDP3LEXP10TABLE_LIST\n   ...\n   fun:_Z11open_tablesP3THDPP10TABLE_LISTPjjP19Prelocking_strategy\n   fun:_Z20open_and_lock_tablesP3THDP10TABLE_LISTbjP19Prelocking_strategy\n   fun:_Z20open_and_lock_tablesP3THDP10TABLE_LISTbj\n   fun:_Z21mysql_execute_commandP3THD\n   fun:_Z11mysql_parseP3THDPcjP12Parser_state\n   fun:_Z16dispatch_command19enum_server_commandP3THDPcj\n   fun:_Z24do_handle_one_connectionP3THD\n   fun:handle_one_connection\n   fun:pfs_spawn_thread\n}\n\n\n{\n   Bug#16039908 \"BYTES STILL REACHABLE\" IN VALGRIND TEST ON 5.6/TRUNK\n   Memcheck:Leak\n   fun:calloc\n   fun:_dlerror_run\n   fun:dlclose\n   fun:_ZL15free_plugin_memP12st_plugin_dl\n   fun:_ZL13plugin_dl_delPK19st_mysql_lex_string\n   fun:_ZL10plugin_delP13st_plugin_int\n   fun:_ZL12reap_pluginsv\n   fun:_Z15plugin_shutdownv\n   fun:_ZL8clean_upb\n   fun:_Z10unireg_endv\n   fun:_ZL11kill_serverPv\n   fun:kill_server_thread\n}\n\n{\n   Bug#25391948 RPL_CHECK_GTID TEST FAILS SPORADICALLY ON PB2 - WEEKLY-5.6 FOR LINUX-VALGRIND\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:_dl_close_worker\n   fun:_dl_close\n   fun:_dl_catch_error\n   fun:__libc_dlclose\n   ...\n}\n\n{\n   Bug#25391948 RPL_CHECK_GTID TEST FAILS SPORADICALLY ON PB2 - WEEKLY-5.6 FOR LINUX-VALGRIND\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:do_dlopen\n   fun:_dl_catch_error\n   fun:__libc_dlopen_mode\n   ...\n}\n\n#Suppress warnings from glibc implementation of 'malloc_info' \n{\n   Malloc_info uninitialised value of size 8\n   Memcheck:Value8\n   fun:_itoa_word\n   fun:vfprintf\n   fun:fprintf\n   fun:mi_arena.*\n   fun:malloc_info\n}\n\n{\n   Malloc_info conditional jump depends on uninitialised values\n   Memcheck:Cond\n   ...\n   fun:mi_arena.*\n   fun:malloc_info\n}\n\n#supress warnings from openssl\n\n{\n   OpenSSL PB2 / 1\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n   fun:ssl_start\n   fun:_Z8init_sslv\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n{\n   OpenSSL PB2 / 2\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n   fun:ssl_start\n   fun:_ZL8init_sslv\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql/sql_udf.cc": "/* Copyright (c) 2000, 2016, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software Foundation,\n   51 Franklin Street, Suite 500, Boston, MA 02110-1335 USA */\n\n/* This implements 'user defined functions' */\n\n/*\n   Known bugs:\n  \n   Memory for functions is never freed!\n   Shared libraries are not closed before mysqld exits;\n     - This is because we can't be sure if some threads are using\n       a function.\n  \n   The bugs only affect applications that create and free a lot of\n   dynamic functions, so this shouldn't be a real problem.\n*/\n\n#include \"sql_priv.h\"\n#include \"unireg.h\"\n#include \"sql_base.h\"                           // close_mysql_tables\n#include \"sql_parse.h\"                        // check_identifier_name\n#include \"sql_table.h\"                        // write_bin_log\n#include \"records.h\"          // init_read_record, end_read_record\n#include <my_pthread.h>\n#include \"lock.h\"                               // MYSQL_LOCK_IGNORE_TIMEOUT\n\n#ifdef HAVE_DLOPEN\nextern \"C\"\n{\n#include <stdarg.h>\n#include <hash.h>\n}\n\nstatic bool initialized = 0;\nstatic MEM_ROOT mem;\nstatic HASH udf_hash;\nstatic mysql_rwlock_t THR_LOCK_udf;\n\n\nstatic udf_func *add_udf(LEX_STRING *name, Item_result ret,\n                         char *dl, Item_udftype typ);\nstatic void del_udf(udf_func *udf);\nstatic void *find_udf_dl(const char *dl);\n\nstatic char *init_syms(udf_func *tmp, char *nm)\n{\n  char *end;\n\n  if (!((tmp->func= (Udf_func_any) dlsym(tmp->dlhandle, tmp->name.str))))\n    return tmp->name.str;\n\n  end=strmov(nm,tmp->name.str);\n\n  if (tmp->type == UDFTYPE_AGGREGATE)\n  {\n    (void)strmov(end, \"_clear\");\n    if (!((tmp->func_clear= (Udf_func_clear) dlsym(tmp->dlhandle, nm))))\n      return nm;\n    (void)strmov(end, \"_add\");\n    if (!((tmp->func_add= (Udf_func_add) dlsym(tmp->dlhandle, nm))))\n      return nm;\n  }\n\n  (void) strmov(end,\"_deinit\");\n  tmp->func_deinit= (Udf_func_deinit) dlsym(tmp->dlhandle, nm);\n\n  (void) strmov(end,\"_init\");\n  tmp->func_init= (Udf_func_init) dlsym(tmp->dlhandle, nm);\n\n  /*\n    to prefent loading \"udf\" from, e.g. libc.so\n    let's ensure that at least one auxiliary symbol is defined\n  */\n  if (!tmp->func_init && !tmp->func_deinit && tmp->type != UDFTYPE_AGGREGATE)\n  {\n    if (!opt_allow_suspicious_udfs)\n      return nm;\n    sql_print_warning(ER(ER_CANT_FIND_DL_ENTRY), nm);\n  }\n  return 0;\n}\n\n\nextern \"C\" uchar* get_hash_key(const uchar *buff, size_t *length,\n\t\t\t      my_bool not_used MY_ATTRIBUTE((unused)))\n{\n  udf_func *udf=(udf_func*) buff;\n  *length=(uint) udf->name.length;\n  return (uchar*) udf->name.str;\n}\n\n#ifdef HAVE_PSI_INTERFACE\nstatic PSI_rwlock_key key_rwlock_THR_LOCK_udf;\n\nstatic PSI_rwlock_info all_udf_rwlocks[]=\n{\n  { &key_rwlock_THR_LOCK_udf, \"THR_LOCK_udf\", PSI_FLAG_GLOBAL}\n};\n\nstatic void init_udf_psi_keys(void)\n{\n  const char* category= \"sql\";\n  int count;\n\n  count= array_elements(all_udf_rwlocks);\n  mysql_rwlock_register(category, all_udf_rwlocks, count);\n}\n#endif\n\n/*\n  Read all predeclared functions from mysql.func and accept all that\n  can be used.\n*/\n\nvoid udf_init()\n{\n  udf_func *tmp;\n  TABLE_LIST tables;\n  READ_RECORD read_record_info;\n  TABLE *table;\n  int error;\n  DBUG_ENTER(\"ufd_init\");\n  char db[]= \"mysql\"; /* A subject to casednstr, can't be constant */\n\n  if (initialized)\n    DBUG_VOID_RETURN;\n\n#ifdef HAVE_PSI_INTERFACE\n  init_udf_psi_keys();\n#endif\n\n  mysql_rwlock_init(key_rwlock_THR_LOCK_udf, &THR_LOCK_udf);\n\n  init_sql_alloc(&mem, UDF_ALLOC_BLOCK_SIZE, 0);\n  THD *new_thd = new THD;\n  if (!new_thd ||\n      my_hash_init(&udf_hash,system_charset_info,32,0,0,get_hash_key, NULL, 0))\n  {\n    sql_print_error(\"Can't allocate memory for udf structures\");\n    my_hash_free(&udf_hash);\n    free_root(&mem,MYF(0));\n    delete new_thd;\n    DBUG_VOID_RETURN;\n  }\n  initialized = 1;\n  new_thd->thread_stack= (char*) &new_thd;\n  new_thd->store_globals();\n  new_thd->set_db(db, sizeof(db)-1);\n\n  tables.init_one_table(db, sizeof(db)-1, \"func\", 4, \"func\", TL_READ);\n\n  if (open_and_lock_tables(new_thd, &tables, FALSE, MYSQL_LOCK_IGNORE_TIMEOUT))\n  {\n    DBUG_PRINT(\"error\",(\"Can't open udf table\"));\n    sql_print_error(\"Can't open the mysql.func table. Please \"\n                    \"run mysql_upgrade to create it.\");\n    goto end;\n  }\n\n  table= tables.table;\n  if (init_read_record(&read_record_info, new_thd, table, NULL, 1, 1, FALSE))\n    goto end;\n  table->use_all_columns();\n  while (!(error= read_record_info.read_record(&read_record_info)))\n  {\n    DBUG_PRINT(\"info\",(\"init udf record\"));\n    LEX_STRING name;\n    name.str=get_field(&mem, table->field[0]);\n    name.length = (uint) strlen(name.str);\n    char *dl_name= get_field(&mem, table->field[2]);\n    bool new_dl=0;\n    Item_udftype udftype=UDFTYPE_FUNCTION;\n    if (table->s->fields >= 4)\t\t\t// New func table\n      udftype=(Item_udftype) table->field[3]->val_int();\n\n    /*\n      Ensure that the .dll doesn't have a path\n      This is done to ensure that only approved dll from the system\n      directories are used (to make this even remotely secure).\n\n      On windows we must check both FN_LIBCHAR and '/'.\n    */\n    if (check_valid_path(dl_name, strlen(dl_name)) ||\n        check_string_char_length(&name, \"\", NAME_CHAR_LEN,\n                                 system_charset_info, 1))\n    {\n      sql_print_error(\"Invalid row in mysql.func table for function '%.64s'\",\n                      name.str);\n      continue;\n    }\n\n    if (!(tmp= add_udf(&name,(Item_result) table->field[1]->val_int(),\n                       dl_name, udftype)))\n    {\n      sql_print_error(\"Can't alloc memory for udf function: '%.64s'\", name.str);\n      continue;\n    }\n\n    void *dl = find_udf_dl(tmp->dl);\n    if (dl == NULL)\n    {\n      char dlpath[FN_REFLEN];\n      strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", tmp->dl,\n               NullS);\n      (void) unpack_filename(dlpath, dlpath);\n      if (!(dl= dlopen(dlpath, RTLD_NOW)))\n      {\n\tconst char *errmsg;\n\tint error_number= dlopen_errno;\n\tDLERROR_GENERATE(errmsg, error_number);\n\n\t/* Print warning to log */\n        sql_print_error(ER(ER_CANT_OPEN_LIBRARY), tmp->dl, error_number, errmsg);\n\t/* Keep the udf in the hash so that we can remove it later */\n\tcontinue;\n      }\n      new_dl=1;\n    }\n    tmp->dlhandle = dl;\n    {\n      char buf[NAME_LEN+16], *missing;\n      if ((missing= init_syms(tmp, buf)))\n      {\n        sql_print_error(ER(ER_CANT_FIND_DL_ENTRY), missing);\n        del_udf(tmp);\n        if (new_dl)\n          dlclose(dl);\n      }\n    }\n  }\n  if (error > 0)\n    sql_print_error(\"Got unknown error: %d\", my_errno);\n  end_read_record(&read_record_info);\n  table->m_needs_reopen= TRUE;                  // Force close to free memory\n\nend:\n  close_mysql_tables(new_thd);\n  delete new_thd;\n  /* Remember that we don't have a THD */\n  my_pthread_setspecific_ptr(THR_THD,  0);\n  DBUG_VOID_RETURN;\n}\n\n\nvoid udf_free()\n{\n  /* close all shared libraries */\n  DBUG_ENTER(\"udf_free\");\n  for (uint idx=0 ; idx < udf_hash.records ; idx++)\n  {\n    udf_func *udf=(udf_func*) my_hash_element(&udf_hash,idx);\n    if (udf->dlhandle)\t\t\t\t// Not closed before\n    {\n      /* Mark all versions using the same handler as closed */\n      for (uint j=idx+1 ;  j < udf_hash.records ; j++)\n      {\n\tudf_func *tmp=(udf_func*) my_hash_element(&udf_hash,j);\n\tif (udf->dlhandle == tmp->dlhandle)\n\t  tmp->dlhandle=0;\t\t\t// Already closed\n      }\n      dlclose(udf->dlhandle);\n    }\n  }\n  my_hash_free(&udf_hash);\n  free_root(&mem,MYF(0));\n  if (initialized)\n  {\n    initialized= 0;\n    mysql_rwlock_destroy(&THR_LOCK_udf);\n  }\n  DBUG_VOID_RETURN;\n}\n\n\nstatic void del_udf(udf_func *udf)\n{\n  DBUG_ENTER(\"del_udf\");\n  if (!--udf->usage_count)\n  {\n    my_hash_delete(&udf_hash,(uchar*) udf);\n    using_udf_functions=udf_hash.records != 0;\n  }\n  else\n  {\n    /*\n      The functions is in use ; Rename the functions instead of removing it.\n      The functions will be automaticly removed when the least threads\n      doesn't use it anymore\n    */\n    char *name= udf->name.str;\n    uint name_length=udf->name.length;\n    udf->name.str=(char*) \"*\";\n    udf->name.length=1;\n    my_hash_update(&udf_hash,(uchar*) udf,(uchar*) name,name_length);\n  }\n  DBUG_VOID_RETURN;\n}\n\n\nvoid free_udf(udf_func *udf)\n{\n  DBUG_ENTER(\"free_udf\");\n  \n  if (!initialized)\n    DBUG_VOID_RETURN;\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  if (!--udf->usage_count)\n  {\n    /*\n      We come here when someone has deleted the udf function\n      while another thread still was using the udf\n    */\n    my_hash_delete(&udf_hash,(uchar*) udf);\n    using_udf_functions=udf_hash.records != 0;\n    if (!find_udf_dl(udf->dl))\n      dlclose(udf->dlhandle);\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  DBUG_VOID_RETURN;\n}\n\n\n/* This is only called if using_udf_functions != 0 */\n\nudf_func *find_udf(const char *name,uint length,bool mark_used)\n{\n  udf_func *udf=0;\n  DBUG_ENTER(\"find_udf\");\n\n  if (!initialized)\n    DBUG_RETURN(NULL);\n\n  /* TODO: This should be changed to reader locks someday! */\n  if (mark_used)\n    mysql_rwlock_wrlock(&THR_LOCK_udf);  /* Called during fix_fields */\n  else\n    mysql_rwlock_rdlock(&THR_LOCK_udf);  /* Called during parsing */\n\n  if ((udf=(udf_func*) my_hash_search(&udf_hash,(uchar*) name,\n                                      length ? length : (uint) strlen(name))))\n  {\n    if (!udf->dlhandle)\n      udf=0;\t\t\t\t\t// Could not be opened\n    else if (mark_used)\n      udf->usage_count++;\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  DBUG_RETURN(udf);\n}\n\n\nstatic void *find_udf_dl(const char *dl)\n{\n  DBUG_ENTER(\"find_udf_dl\");\n\n  /*\n    Because only the function name is hashed, we have to search trough\n    all rows to find the dl.\n  */\n  for (uint idx=0 ; idx < udf_hash.records ; idx++)\n  {\n    udf_func *udf=(udf_func*) my_hash_element(&udf_hash,idx);\n    if (!strcmp(dl, udf->dl) && udf->dlhandle != NULL)\n      DBUG_RETURN(udf->dlhandle);\n  }\n  DBUG_RETURN(0);\n}\n\n\n/* Assume that name && dl is already allocated */\n\nstatic udf_func *add_udf(LEX_STRING *name, Item_result ret, char *dl,\n\t\t\t Item_udftype type)\n{\n  if (!name || !dl || !(uint) type || (uint) type > (uint) UDFTYPE_AGGREGATE)\n    return 0;\n  udf_func *tmp= (udf_func*) alloc_root(&mem, sizeof(udf_func));\n  if (!tmp)\n    return 0;\n  memset(tmp, 0, sizeof(*tmp));\n  tmp->name = *name; //dup !!\n  tmp->dl = dl;\n  tmp->returns = ret;\n  tmp->type = type;\n  tmp->usage_count=1;\n  if (my_hash_insert(&udf_hash,(uchar*)  tmp))\n    return 0;\n  using_udf_functions=1;\n  return tmp;\n}\n\n\n/**\n  Create a user defined function. \n\n  @note Like implementations of other DDL/DML in MySQL, this function\n  relies on the caller to close the thread tables. This is done in the\n  end of dispatch_command().\n*/\n\nint mysql_create_function(THD *thd,udf_func *udf)\n{\n  int error;\n  void *dl=0;\n  bool new_dl=0;\n  TABLE *table;\n  TABLE_LIST tables;\n  udf_func *u_d;\n  bool save_binlog_row_based;\n  DBUG_ENTER(\"mysql_create_function\");\n\n  if (!initialized)\n  {\n    if (opt_noacl)\n      my_error(ER_CANT_INITIALIZE_UDF, MYF(0),\n               udf->name.str,\n               \"UDFs are unavailable with the --skip-grant-tables option\");\n    else\n      my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));\n    DBUG_RETURN(1);\n  }\n\n  /*\n    Ensure that the .dll doesn't have a path\n    This is done to ensure that only approved dll from the system\n    directories are used (to make this even remotely secure).\n  */\n  if (check_valid_path(udf->dl, strlen(udf->dl)))\n  {\n    my_message(ER_UDF_NO_PATHS, ER(ER_UDF_NO_PATHS), MYF(0));\n    DBUG_RETURN(1);\n  }\n  if (check_string_char_length(&udf->name, \"\", NAME_CHAR_LEN,\n                               system_charset_info, 1))\n  {\n    my_error(ER_TOO_LONG_IDENT, MYF(0), udf->name.str);\n    DBUG_RETURN(1);\n  }\n\n  tables.init_one_table(\"mysql\", 5, \"func\", 4, \"func\", TL_WRITE);\n  if (!(table= open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT)))\n    DBUG_RETURN(1);\n\n  /* \n    Turn off row binlogging of this statement and use statement-based \n    so that all supporting tables are updated for CREATE FUNCTION command.\n  */\n  if ((save_binlog_row_based= thd->is_current_stmt_binlog_format_row()))\n    thd->clear_current_stmt_binlog_format_row();\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  if ((my_hash_search(&udf_hash,(uchar*) udf->name.str, udf->name.length)))\n  {\n    my_error(ER_UDF_EXISTS, MYF(0), udf->name.str);\n    goto err;\n  }\n  if (!(dl = find_udf_dl(udf->dl)))\n  {\n    char dlpath[FN_REFLEN];\n    strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", udf->dl, NullS);\n    (void) unpack_filename(dlpath, dlpath);\n\n    if (!(dl = dlopen(dlpath, RTLD_NOW)))\n    {\n      const char *errmsg;\n      int error_number= dlopen_errno;\n      DLERROR_GENERATE(errmsg, error_number);\n\n      DBUG_PRINT(\"error\",(\"dlopen of %s failed, error: %d (%s)\",\n                          udf->dl, error_number, errmsg));\n      my_error(ER_CANT_OPEN_LIBRARY, MYF(0),\n               udf->dl, error_number, errmsg);\n      goto err;\n    }\n    new_dl=1;\n  }\n  udf->dlhandle=dl;\n  {\n    char buf[NAME_LEN+16], *missing;\n    if ((missing= init_syms(udf, buf)))\n    {\n      my_error(ER_CANT_FIND_DL_ENTRY, MYF(0), missing);\n      goto err;\n    }\n  }\n  udf->name.str=strdup_root(&mem,udf->name.str);\n  udf->dl=strdup_root(&mem,udf->dl);\n  if (!(u_d=add_udf(&udf->name,udf->returns,udf->dl,udf->type)))\n    goto err;\n  u_d->dlhandle = dl;\n  u_d->func=udf->func;\n  u_d->func_init=udf->func_init;\n  u_d->func_deinit=udf->func_deinit;\n  u_d->func_clear=udf->func_clear;\n  u_d->func_add=udf->func_add;\n\n  /* create entry in mysql.func table */\n\n  table->use_all_columns();\n  restore_record(table, s->default_values);\t// Default values for fields\n  table->field[0]->store(u_d->name.str, u_d->name.length, system_charset_info);\n  table->field[1]->store((longlong) u_d->returns, TRUE);\n  table->field[2]->store(u_d->dl,(uint) strlen(u_d->dl), system_charset_info);\n  if (table->s->fields >= 4)\t\t\t// If not old func format\n    table->field[3]->store((longlong) u_d->type, TRUE);\n  error = table->file->ha_write_row(table->record[0]);\n\n  if (error)\n  {\n    char errbuf[MYSYS_STRERROR_SIZE];\n    my_error(ER_ERROR_ON_WRITE, MYF(0), \"mysql.func\", error,\n             my_strerror(errbuf, sizeof(errbuf), error));\n    del_udf(u_d);\n    goto err;\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n\n  /* Binlog the create function. */\n  if (write_bin_log(thd, TRUE, thd->query(), thd->query_length()))\n  {\n    /* Restore the state of binlog format */\n    DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n    if (save_binlog_row_based)\n      thd->set_current_stmt_binlog_format_row();\n    DBUG_RETURN(1);\n  }\n  /* Restore the state of binlog format */\n  DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n  if (save_binlog_row_based)\n    thd->set_current_stmt_binlog_format_row();\n  DBUG_RETURN(0);\n\n err:\n  if (new_dl)\n    dlclose(dl);\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  /* Restore the state of binlog format */\n  DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n  if (save_binlog_row_based)\n    thd->set_current_stmt_binlog_format_row();\n  DBUG_RETURN(1);\n}\n\n\nint mysql_drop_function(THD *thd,const LEX_STRING *udf_name)\n{\n  TABLE *table;\n  TABLE_LIST tables;\n  udf_func *udf;\n  char *exact_name_str;\n  uint exact_name_len;\n  bool save_binlog_row_based;\n  int error= 1;\n  DBUG_ENTER(\"mysql_drop_function\");\n\n  if (!initialized)\n  {\n    if (opt_noacl)\n      my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), udf_name->str);\n    else\n      my_message(ER_OUT_OF_RESOURCES, ER(ER_OUT_OF_RESOURCES), MYF(0));\n    DBUG_RETURN(1);\n  }\n\n  tables.init_one_table(\"mysql\", 5, \"func\", 4, \"func\", TL_WRITE);\n  if (!(table= open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT)))\n    DBUG_RETURN(1);\n\n  /* \n    Turn off row binlogging of this statement and use statement-based\n    so that all supporting tables are updated for DROP FUNCTION command.\n  */\n  if ((save_binlog_row_based= thd->is_current_stmt_binlog_format_row()))\n    thd->clear_current_stmt_binlog_format_row();\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  if (!(udf=(udf_func*) my_hash_search(&udf_hash,(uchar*) udf_name->str,\n                                       (uint) udf_name->length)))\n  {\n    my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), udf_name->str);\n    mysql_rwlock_unlock(&THR_LOCK_udf);\n    goto exit;\n  }\n  exact_name_str= udf->name.str;\n  exact_name_len= udf->name.length;\n  del_udf(udf);\n  /*\n    Close the handle if this was function that was found during boot or\n    CREATE FUNCTION and it's not in use by any other udf function\n  */\n  if (udf->dlhandle && !find_udf_dl(udf->dl))\n    dlclose(udf->dlhandle);\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n\n  table->use_all_columns();\n  table->field[0]->store(exact_name_str, exact_name_len, &my_charset_bin);\n  if (!table->file->ha_index_read_idx_map(table->record[0], 0,\n                                          (uchar*) table->field[0]->ptr,\n                                          HA_WHOLE_KEY,\n                                          HA_READ_KEY_EXACT))\n  {\n    int delete_err;\n    if ((delete_err = table->file->ha_delete_row(table->record[0])))\n      table->file->print_error(delete_err, MYF(0));\n  }\n\n  /*\n    Binlog the drop function. Keep the table open and locked\n    while binlogging, to avoid binlog inconsistency.\n  */\n  if (!write_bin_log(thd, TRUE, thd->query(), thd->query_length()))\n    error= 0;\nexit:\n  /* Restore the state of binlog format */\n  DBUG_ASSERT(!thd->is_current_stmt_binlog_format_row());\n  if (save_binlog_row_based)\n    thd->set_current_stmt_binlog_format_row();\n  DBUG_RETURN(error);\n}\n\n#endif /* HAVE_DLOPEN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql/sql_plugin.cc": "/*\n   Copyright (c) 2005, 2017, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; version 2 of the License.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software Foundation,\n   51 Franklin Street, Suite 500, Boston, MA 02110-1335 USA */\n\n#include \"sql_priv.h\"                         // SHOW_MY_BOOL\n#include \"unireg.h\"\n#include \"my_global.h\"                       // REQUIRED by m_string.h\n#include \"sql_class.h\"                          // set_var.h: THD\n#include \"sys_vars_shared.h\"\n#include \"sql_locale.h\"\n#include \"sql_plugin.h\"\n#include \"sql_parse.h\"          // check_table_access\n#include \"sql_base.h\"                           // close_mysql_tables\n#include \"key.h\"                                // key_copy\n#include \"sql_show.h\"           // remove_status_vars, add_status_vars\n#include \"strfunc.h\"            // find_set\n#include \"sql_acl.h\"                       // *_ACL\n#include \"records.h\"          // init_read_record, end_read_record\n#include <my_pthread.h>\n#include <my_getopt.h>\n#include \"sql_audit.h\"\n#include <mysql/plugin_auth.h>\n#include \"lock.h\"                               // MYSQL_LOCK_IGNORE_TIMEOUT\n#include <mysql/plugin_validate_password.h>\n#include \"my_default.h\"\n#include \"debug_sync.h\"\n\n#include <algorithm>\n\nusing std::min;\nusing std::max;\n\n#define REPORT_TO_LOG  1\n#define REPORT_TO_USER 2\n\nextern struct st_mysql_plugin *mysql_optional_plugins[];\nextern struct st_mysql_plugin *mysql_mandatory_plugins[];\n\n/**\n  @note The order of the enumeration is critical.\n  @see construct_options\n*/\nconst char *global_plugin_typelib_names[]=\n  { \"OFF\", \"ON\", \"FORCE\", \"FORCE_PLUS_PERMANENT\", NULL };\nstatic TYPELIB global_plugin_typelib=\n  { array_elements(global_plugin_typelib_names)-1,\n    \"\", global_plugin_typelib_names, NULL };\n\nstatic I_List<i_string> opt_plugin_load_list;\nI_List<i_string> *opt_plugin_load_list_ptr= &opt_plugin_load_list;\nchar *opt_plugin_dir_ptr;\nchar opt_plugin_dir[FN_REFLEN];\n/*\n  When you ad a new plugin type, add both a string and make sure that the\n  init and deinit array are correctly updated.\n*/\nconst LEX_STRING plugin_type_names[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  { C_STRING_WITH_LEN(\"UDF\") },\n  { C_STRING_WITH_LEN(\"STORAGE ENGINE\") },\n  { C_STRING_WITH_LEN(\"FTPARSER\") },\n  { C_STRING_WITH_LEN(\"DAEMON\") },\n  { C_STRING_WITH_LEN(\"INFORMATION SCHEMA\") },\n  { C_STRING_WITH_LEN(\"AUDIT\") },\n  { C_STRING_WITH_LEN(\"REPLICATION\") },\n  { C_STRING_WITH_LEN(\"AUTHENTICATION\") },\n  { C_STRING_WITH_LEN(\"VALIDATE PASSWORD\") }\n};\n\nextern int initialize_schema_table(st_plugin_int *plugin);\nextern int finalize_schema_table(st_plugin_int *plugin);\n\nextern int initialize_audit_plugin(st_plugin_int *plugin);\nextern int finalize_audit_plugin(st_plugin_int *plugin);\n\n/*\n  The number of elements in both plugin_type_initialize and\n  plugin_type_deinitialize should equal to the number of plugins\n  defined.\n*/\nplugin_type_init plugin_type_initialize[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0,ha_initialize_handlerton,0,0,initialize_schema_table,\n  initialize_audit_plugin,0,0,0\n};\n\nplugin_type_init plugin_type_deinitialize[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0,ha_finalize_handlerton,0,0,finalize_schema_table,\n  finalize_audit_plugin,0,0,0\n};\n\n#ifdef HAVE_DLOPEN\nstatic const char *plugin_interface_version_sym=\n                   \"_mysql_plugin_interface_version_\";\nstatic const char *sizeof_st_plugin_sym=\n                   \"_mysql_sizeof_struct_st_plugin_\";\nstatic const char *plugin_declarations_sym= \"_mysql_plugin_declarations_\";\nstatic int min_plugin_interface_version= MYSQL_PLUGIN_INTERFACE_VERSION & ~0xFF;\n#endif\n\nstatic void*\tinnodb_callback_data;\n\n/* Note that 'int version' must be the first field of every plugin\n   sub-structure (plugin->info).\n*/\nstatic int min_plugin_info_interface_version[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0x0000,\n  MYSQL_HANDLERTON_INTERFACE_VERSION,\n  MYSQL_FTPARSER_INTERFACE_VERSION,\n  MYSQL_DAEMON_INTERFACE_VERSION,\n  MYSQL_INFORMATION_SCHEMA_INTERFACE_VERSION,\n  MYSQL_AUDIT_INTERFACE_VERSION,\n  MYSQL_REPLICATION_INTERFACE_VERSION,\n  MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n  MYSQL_VALIDATE_PASSWORD_INTERFACE_VERSION\n};\nstatic int cur_plugin_info_interface_version[MYSQL_MAX_PLUGIN_TYPE_NUM]=\n{\n  0x0000, /* UDF: not implemented */\n  MYSQL_HANDLERTON_INTERFACE_VERSION,\n  MYSQL_FTPARSER_INTERFACE_VERSION,\n  MYSQL_DAEMON_INTERFACE_VERSION,\n  MYSQL_INFORMATION_SCHEMA_INTERFACE_VERSION,\n  MYSQL_AUDIT_INTERFACE_VERSION,\n  MYSQL_REPLICATION_INTERFACE_VERSION,\n  MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n  MYSQL_VALIDATE_PASSWORD_INTERFACE_VERSION\n};\n\n/* support for Services */\n\n#include \"sql_plugin_services.h\"\n\n/*\n  A mutex LOCK_plugin_delete must be acquired before calling plugin_del\n  function. \n*/\nmysql_mutex_t LOCK_plugin_delete;\n\n/*\n  A mutex LOCK_plugin must be acquired before accessing the\n  following variables/structures.\n  We are always manipulating ref count, so a rwlock here is unneccessary.\n*/\nmysql_mutex_t LOCK_plugin;\nstatic DYNAMIC_ARRAY plugin_dl_array;\nstatic DYNAMIC_ARRAY plugin_array;\nstatic HASH plugin_hash[MYSQL_MAX_PLUGIN_TYPE_NUM];\nstatic bool reap_needed= false;\nstatic int plugin_array_version=0;\n\nstatic bool initialized= 0;\n\n/*\n  write-lock on LOCK_system_variables_hash is required before modifying\n  the following variables/structures\n*/\nstatic MEM_ROOT plugin_mem_root;\nstatic uint global_variables_dynamic_size= 0;\nstatic HASH bookmark_hash;\n\n\n/*\n  hidden part of opaque value passed to variable check functions.\n  Used to provide a object-like structure to non C++ consumers.\n*/\nstruct st_item_value_holder : public st_mysql_value\n{\n  Item *item;\n};\n\n\n/*\n  stored in bookmark_hash, this structure is never removed from the\n  hash and is used to mark a single offset for a thd local variable\n  even if plugins have been uninstalled and reinstalled, repeatedly.\n  This structure is allocated from plugin_mem_root.\n\n  The key format is as follows:\n    1 byte         - variable type code\n    name_len bytes - variable name\n    '\\0'           - end of key\n*/\nstruct st_bookmark\n{\n  uint name_len;\n  int offset;\n  uint version;\n  char key[1];\n};\n\n\n/*\n  skeleton of a plugin variable - portion of structure common to all.\n*/\nstruct st_mysql_sys_var\n{\n  MYSQL_PLUGIN_VAR_HEADER;\n};\n\nstatic SHOW_TYPE pluginvar_show_type(st_mysql_sys_var *plugin_var);\n\n\n/*\n  sys_var class for access to all plugin variables visible to the user\n*/\nclass sys_var_pluginvar: public sys_var\n{\npublic:\n  struct st_plugin_int *plugin;\n  struct st_mysql_sys_var *plugin_var;\n  /**\n    variable name from whatever is hard-coded in the plugin source\n    and doesn't have pluginname- prefix is replaced by an allocated name\n    with a plugin prefix. When plugin is uninstalled we need to restore the\n    pointer to point to the hard-coded value, because plugin may be\n    installed/uninstalled many times without reloading the shared object.\n  */\n  const char *orig_pluginvar_name;\n\n  static void *operator new(size_t size, MEM_ROOT *mem_root)\n  { return (void*) alloc_root(mem_root, size); }\n  static void operator delete(void *ptr_arg,size_t size)\n  { TRASH(ptr_arg, size); }\n\n  sys_var_pluginvar(sys_var_chain *chain, const char *name_arg,\n                    struct st_mysql_sys_var *plugin_var_arg)\n    :sys_var(chain, name_arg, plugin_var_arg->comment,\n             (plugin_var_arg->flags & PLUGIN_VAR_THDLOCAL ? SESSION : GLOBAL) |\n             (plugin_var_arg->flags & PLUGIN_VAR_READONLY ? READONLY : 0),\n             0, -1, NO_ARG, pluginvar_show_type(plugin_var_arg), 0, 0,\n             VARIABLE_NOT_IN_BINLOG, NULL, NULL, NULL, PARSE_NORMAL),\n    plugin_var(plugin_var_arg), orig_pluginvar_name(plugin_var_arg->name)\n  { plugin_var->name= name_arg; }\n  sys_var_pluginvar *cast_pluginvar() { return this; }\n  bool check_update_type(Item_result type);\n  SHOW_TYPE show_type();\n  uchar* real_value_ptr(THD *thd, enum_var_type type);\n  TYPELIB* plugin_var_typelib(void);\n  uchar* do_value_ptr(THD *thd, enum_var_type type, LEX_STRING *base);\n  uchar* session_value_ptr(THD *thd, LEX_STRING *base)\n  { return do_value_ptr(thd, OPT_SESSION, base); }\n  uchar* global_value_ptr(THD *thd, LEX_STRING *base)\n  { return do_value_ptr(thd, OPT_GLOBAL, base); }\n  bool do_check(THD *thd, set_var *var);\n  virtual void session_save_default(THD *thd, set_var *var) {}\n  virtual void global_save_default(THD *thd, set_var *var) {}\n  bool session_update(THD *thd, set_var *var);\n  bool global_update(THD *thd, set_var *var);\n};\n\n\n/* prototypes */\nstatic void plugin_load(MEM_ROOT *tmp_root, int *argc, char **argv);\nstatic bool plugin_load_list(MEM_ROOT *tmp_root, int *argc, char **argv,\n                             const char *list);\nstatic my_bool check_if_option_is_deprecated(int optid,\n                                             const struct my_option *opt,\n                                             char *argument);\nstatic int test_plugin_options(MEM_ROOT *, struct st_plugin_int *,\n                               int *, char **);\nstatic bool register_builtin(struct st_mysql_plugin *, struct st_plugin_int *,\n                             struct st_plugin_int **);\nstatic void unlock_variables(THD *thd, struct system_variables *vars);\nstatic void cleanup_variables(THD *thd, struct system_variables *vars);\nstatic void plugin_vars_free_values(sys_var *vars);\nstatic bool plugin_var_memalloc_session_update(THD *thd,\n                                               struct st_mysql_sys_var *var,\n                                               char **dest, const char *value);\nstatic bool plugin_var_memalloc_global_update(THD *thd,\n                                              struct st_mysql_sys_var *var,\n                                              char **dest, const char *value);\nstatic void plugin_var_memalloc_free(struct system_variables *vars);\nstatic void restore_pluginvar_names(sys_var *first);\nstatic void plugin_opt_set_limits(struct my_option *,\n                                  const struct st_mysql_sys_var *);\n#define my_intern_plugin_lock(A,B) intern_plugin_lock(A,B)\n#define my_intern_plugin_lock_ci(A,B) intern_plugin_lock(A,B)\nstatic plugin_ref intern_plugin_lock(LEX *lex, plugin_ref plugin);\nstatic void intern_plugin_unlock(LEX *lex, plugin_ref plugin);\nstatic void reap_plugins(void);\n\nstatic void report_error(int where_to, uint error, ...)\n{\n  va_list args;\n  if (where_to & REPORT_TO_USER)\n  {\n    va_start(args, error);\n    my_printv_error(error, ER(error), MYF(0), args);\n    va_end(args);\n  }\n  if (where_to & REPORT_TO_LOG)\n  {\n    va_start(args, error);\n    error_log_print(ERROR_LEVEL, ER_DEFAULT(error), args);\n    va_end(args);\n  }\n}\n\n/**\n   Check if the provided path is valid in the sense that it does cause\n   a relative reference outside the directory.\n\n   @note Currently, this function only check if there are any\n   characters in FN_DIRSEP in the string, but it might change in the\n   future.\n\n   @code\n   check_valid_path(\"../foo.so\") -> true\n   check_valid_path(\"foo.so\") -> false\n   @endcode\n */\nbool check_valid_path(const char *path, size_t len)\n{\n  size_t prefix= my_strcspn(files_charset_info, path, path + len, FN_DIRSEP);\n  return  prefix < len;\n}\n\n\n/****************************************************************************\n  Value type thunks, allows the C world to play in the C++ world\n****************************************************************************/\n\nstatic int item_value_type(struct st_mysql_value *value)\n{\n  switch (((st_item_value_holder*)value)->item->result_type()) {\n  case INT_RESULT:\n    return MYSQL_VALUE_TYPE_INT;\n  case REAL_RESULT:\n    return MYSQL_VALUE_TYPE_REAL;\n  default:\n    return MYSQL_VALUE_TYPE_STRING;\n  }\n}\n\nstatic const char *item_val_str(struct st_mysql_value *value,\n                                char *buffer, int *length)\n{\n  String str(buffer, *length, system_charset_info), *res;\n  if (!(res= ((st_item_value_holder*)value)->item->val_str(&str)))\n    return NULL;\n  *length= res->length();\n  if (res->c_ptr_quick() == buffer)\n    return buffer;\n\n  /*\n    Lets be nice and create a temporary string since the\n    buffer was too small\n  */\n  return current_thd->strmake(res->c_ptr_quick(), res->length());\n}\n\n\nstatic int item_val_int(struct st_mysql_value *value, long long *buf)\n{\n  Item *item= ((st_item_value_holder*)value)->item;\n  *buf= item->val_int();\n  if (item->is_null())\n    return 1;\n  return 0;\n}\n\nstatic int item_is_unsigned(struct st_mysql_value *value)\n{\n  Item *item= ((st_item_value_holder*)value)->item;\n  return item->unsigned_flag;\n}\n\nstatic int item_val_real(struct st_mysql_value *value, double *buf)\n{\n  Item *item= ((st_item_value_holder*)value)->item;\n  *buf= item->val_real();\n  if (item->is_null())\n    return 1;\n  return 0;\n}\n\n\n/****************************************************************************\n  Plugin support code\n****************************************************************************/\n\n#ifdef HAVE_DLOPEN\n\nstatic struct st_plugin_dl *plugin_dl_find(const LEX_STRING *dl)\n{\n  uint i;\n  struct st_plugin_dl *tmp;\n  DBUG_ENTER(\"plugin_dl_find\");\n  for (i= 0; i < plugin_dl_array.elements; i++)\n  {\n    tmp= *dynamic_element(&plugin_dl_array, i, struct st_plugin_dl **);\n    if (tmp->ref_count &&\n        ! my_strnncoll(files_charset_info,\n                       (const uchar *)dl->str, dl->length,\n                       (const uchar *)tmp->dl.str, tmp->dl.length))\n      DBUG_RETURN(tmp);\n  }\n  DBUG_RETURN(0);\n}\n\n\nstatic st_plugin_dl *plugin_dl_insert_or_reuse(struct st_plugin_dl *plugin_dl)\n{\n  uint i;\n  struct st_plugin_dl *tmp;\n  DBUG_ENTER(\"plugin_dl_insert_or_reuse\");\n  for (i= 0; i < plugin_dl_array.elements; i++)\n  {\n    tmp= *dynamic_element(&plugin_dl_array, i, struct st_plugin_dl **);\n    if (! tmp->ref_count)\n    {\n      memcpy(tmp, plugin_dl, sizeof(struct st_plugin_dl));\n      DBUG_RETURN(tmp);\n    }\n  }\n  if (insert_dynamic(&plugin_dl_array, &plugin_dl))\n    DBUG_RETURN(0);\n  tmp= *dynamic_element(&plugin_dl_array, plugin_dl_array.elements - 1,\n                        struct st_plugin_dl **)=\n      (struct st_plugin_dl *) memdup_root(&plugin_mem_root, (uchar*)plugin_dl,\n                                           sizeof(struct st_plugin_dl));\n  DBUG_RETURN(tmp);\n}\n#endif /* HAVE_DLOPEN */\n\n\nstatic inline void free_plugin_mem(struct st_plugin_dl *p)\n{\n#ifdef HAVE_DLOPEN\n  if (p->handle)\n    dlclose(p->handle);\n#endif\n  my_free(p->dl.str);\n  if (p->version != MYSQL_PLUGIN_INTERFACE_VERSION)\n    my_free(p->plugins);\n}\n\n\nstatic st_plugin_dl *plugin_dl_add(const LEX_STRING *dl, int report)\n{\n#ifdef HAVE_DLOPEN\n  char dlpath[FN_REFLEN];\n  uint plugin_dir_len, dummy_errors, dlpathlen, i;\n  struct st_plugin_dl *tmp, plugin_dl;\n  void *sym;\n  DBUG_ENTER(\"plugin_dl_add\");\n  DBUG_PRINT(\"enter\", (\"dl->str: '%s', dl->length: %d\",\n                       dl->str, (int) dl->length));\n  plugin_dir_len= strlen(opt_plugin_dir);\n  /*\n    Ensure that the dll doesn't have a path.\n    This is done to ensure that only approved libraries from the\n    plugin directory are used (to make this even remotely secure).\n  */\n  if (check_valid_path(dl->str, dl->length) ||\n      check_string_char_length((LEX_STRING *) dl, \"\", NAME_CHAR_LEN,\n                               system_charset_info, 1) ||\n      plugin_dir_len + dl->length + 1 >= FN_REFLEN)\n  {\n    report_error(report, ER_UDF_NO_PATHS);\n    DBUG_RETURN(0);\n  }\n  /* If this dll is already loaded just increase ref_count. */\n  if ((tmp= plugin_dl_find(dl)))\n  {\n    tmp->ref_count++;\n    DBUG_RETURN(tmp);\n  }\n  memset(&plugin_dl, 0, sizeof(plugin_dl));\n  /* Compile dll path */\n  dlpathlen=\n    strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", dl->str, NullS) -\n    dlpath;\n  (void) unpack_filename(dlpath, dlpath);\n  plugin_dl.ref_count= 1;\n  /* Open new dll handle */\n  if (!(plugin_dl.handle= dlopen(dlpath, RTLD_NOW)))\n  {\n    const char *errmsg;\n    int error_number= dlopen_errno;\n    DLERROR_GENERATE(errmsg, error_number);\n\n    if (!strncmp(dlpath, errmsg, dlpathlen))\n    { // if errmsg starts from dlpath, trim this prefix.\n      errmsg+=dlpathlen;\n      if (*errmsg == ':') errmsg++;\n      if (*errmsg == ' ') errmsg++;\n    }\n    report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, error_number, errmsg);\n    DBUG_RETURN(0);\n  }\n  /* Determine interface version */\n  if (!(sym= dlsym(plugin_dl.handle, plugin_interface_version_sym)))\n  {\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_CANT_FIND_DL_ENTRY, plugin_interface_version_sym);\n    DBUG_RETURN(0);\n  }\n  plugin_dl.version= *(int *)sym;\n  /* Versioning */\n  if (plugin_dl.version < min_plugin_interface_version ||\n      (plugin_dl.version >> 8) > (MYSQL_PLUGIN_INTERFACE_VERSION >> 8))\n  {\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, 0,\n                 \"plugin interface version mismatch\");\n    DBUG_RETURN(0);\n  }\n\n  /* link the services in */\n  for (i= 0; i < array_elements(list_of_services); i++)\n  {\n    if ((sym= dlsym(plugin_dl.handle, list_of_services[i].name)))\n    {\n      uint ver= (uint)(intptr)*(void**)sym;\n      if ((*(void**)sym) != list_of_services[i].service && /* already replaced */\n          (ver > list_of_services[i].version ||\n           (ver >> 8) < (list_of_services[i].version >> 8)))\n      {\n        char buf[MYSQL_ERRMSG_SIZE];\n        my_snprintf(buf, sizeof(buf),\n                    \"service '%s' interface version mismatch\",\n                    list_of_services[i].name);\n        report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, 0, buf);\n        DBUG_RETURN(0);\n      }\n      *(void**)sym= list_of_services[i].service;\n    }\n  }\n\n  /* Find plugin declarations */\n  if (!(sym= dlsym(plugin_dl.handle, plugin_declarations_sym)))\n  {\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_CANT_FIND_DL_ENTRY, plugin_declarations_sym);\n    DBUG_RETURN(0);\n  }\n\n  if (plugin_dl.version != MYSQL_PLUGIN_INTERFACE_VERSION)\n  {\n    uint sizeof_st_plugin;\n    struct st_mysql_plugin *old, *cur;\n    char *ptr= (char *)sym;\n\n    if ((sym= dlsym(plugin_dl.handle, sizeof_st_plugin_sym)))\n      sizeof_st_plugin= *(int *)sym;\n    else\n    {\n#ifdef ERROR_ON_NO_SIZEOF_PLUGIN_SYMBOL\n      report_error(report, ER_CANT_FIND_DL_ENTRY, sizeof_st_plugin_sym);\n      DBUG_RETURN(0);\n#else\n      /*\n        When the following assert starts failing, we'll have to switch\n        to the upper branch of the #ifdef\n      */\n      DBUG_ASSERT(min_plugin_interface_version == 0);\n      sizeof_st_plugin= (int)offsetof(struct st_mysql_plugin, version);\n#endif\n    }\n\n    /*\n      What's the purpose of this loop? If the goal is to catch a\n      missing 0 record at the end of a list, it will fail miserably\n      since the compiler is likely to optimize this away. /Matz\n     */\n    for (i= 0;\n         ((struct st_mysql_plugin *)(ptr+i*sizeof_st_plugin))->info;\n         i++)\n      /* no op */;\n\n    cur= (struct st_mysql_plugin*)\n      my_malloc((i+1)*sizeof(struct st_mysql_plugin), MYF(MY_ZEROFILL|MY_WME));\n    if (!cur)\n    {\n      free_plugin_mem(&plugin_dl);\n      report_error(report, ER_OUTOFMEMORY,\n                   static_cast<int>(plugin_dl.dl.length));\n      DBUG_RETURN(0);\n    }\n    /*\n      All st_plugin fields not initialized in the plugin explicitly, are\n      set to 0. It matches C standard behaviour for struct initializers that\n      have less values than the struct definition.\n    */\n    for (i=0;\n         (old=(struct st_mysql_plugin *)(ptr+i*sizeof_st_plugin))->info;\n         i++)\n      memcpy(cur+i, old, min<size_t>(sizeof(cur[i]), sizeof_st_plugin));\n\n    sym= cur;\n  }\n  plugin_dl.plugins= (struct st_mysql_plugin *)sym;\n\n  /*\n    If report is REPORT_TO_USER, we were called from\n    mysql_install_plugin. Otherwise, we are called directly or\n    indirectly from plugin_init.\n   */\n  if (report == REPORT_TO_USER)\n  {\n    st_mysql_plugin *plugin= plugin_dl.plugins;\n    for ( ; plugin->info ; ++plugin)\n      if (plugin->flags & PLUGIN_OPT_NO_INSTALL)\n      {\n        report_error(report, ER_PLUGIN_NO_INSTALL, plugin->name);\n        free_plugin_mem(&plugin_dl);\n        DBUG_RETURN(0);\n   }\n  }\n\n  /* Duplicate and convert dll name */\n  plugin_dl.dl.length= dl->length * files_charset_info->mbmaxlen + 1;\n  if (! (plugin_dl.dl.str= (char*) my_malloc(plugin_dl.dl.length, MYF(0))))\n  {\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_OUTOFMEMORY,\n                 static_cast<int>(plugin_dl.dl.length));\n    DBUG_RETURN(0);\n  }\n  plugin_dl.dl.length= copy_and_convert(plugin_dl.dl.str, plugin_dl.dl.length,\n    files_charset_info, dl->str, dl->length, system_charset_info,\n    &dummy_errors);\n  plugin_dl.dl.str[plugin_dl.dl.length]= 0;\n  /* Add this dll to array */\n  if (! (tmp= plugin_dl_insert_or_reuse(&plugin_dl)))\n  {\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_OUTOFMEMORY,\n                 static_cast<int>(sizeof(struct st_plugin_dl)));\n    DBUG_RETURN(0);\n  }\n  DBUG_RETURN(tmp);\n#else\n  DBUG_ENTER(\"plugin_dl_add\");\n  report_error(report, ER_FEATURE_DISABLED, \"plugin\", \"HAVE_DLOPEN\");\n  DBUG_RETURN(0);\n#endif\n}\n\n\nstatic void plugin_dl_del(const LEX_STRING *dl)\n{\n#ifdef HAVE_DLOPEN\n  uint i;\n  DBUG_ENTER(\"plugin_dl_del\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  for (i= 0; i < plugin_dl_array.elements; i++)\n  {\n    struct st_plugin_dl *tmp= *dynamic_element(&plugin_dl_array, i,\n                                               struct st_plugin_dl **);\n    if (tmp->ref_count &&\n        ! my_strnncoll(files_charset_info,\n                       (const uchar *)dl->str, dl->length,\n                       (const uchar *)tmp->dl.str, tmp->dl.length))\n    {\n      /* Do not remove this element, unless no other plugin uses this dll. */\n      if (! --tmp->ref_count)\n      {\n        free_plugin_mem(tmp);\n        memset(tmp, 0, sizeof(struct st_plugin_dl));\n      }\n      break;\n    }\n  }\n  DBUG_VOID_RETURN;\n#endif\n}\n\n\nstatic struct st_plugin_int *plugin_find_internal(const LEX_STRING *name, int type)\n{\n  uint i;\n  DBUG_ENTER(\"plugin_find_internal\");\n  if (! initialized)\n    DBUG_RETURN(0);\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (type == MYSQL_ANY_PLUGIN)\n  {\n    for (i= 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++)\n    {\n      struct st_plugin_int *plugin= (st_plugin_int *)\n        my_hash_search(&plugin_hash[i], (const uchar *)name->str, name->length);\n      if (plugin)\n        DBUG_RETURN(plugin);\n    }\n  }\n  else\n    DBUG_RETURN((st_plugin_int *)\n        my_hash_search(&plugin_hash[type], (const uchar *)name->str,\n                       name->length));\n  DBUG_RETURN(0);\n}\n\n\nstatic SHOW_COMP_OPTION plugin_status(const LEX_STRING *name, int type)\n{\n  SHOW_COMP_OPTION rc= SHOW_OPTION_NO;\n  struct st_plugin_int *plugin;\n  DBUG_ENTER(\"plugin_is_ready\");\n  mysql_mutex_lock(&LOCK_plugin);\n  if ((plugin= plugin_find_internal(name, type)))\n  {\n    rc= SHOW_OPTION_DISABLED;\n    if (plugin->state == PLUGIN_IS_READY)\n      rc= SHOW_OPTION_YES;\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(rc);\n}\n\n\nbool plugin_is_ready(const LEX_STRING *name, int type)\n{\n  bool rc= FALSE;\n  if (plugin_status(name, type) == SHOW_OPTION_YES)\n    rc= TRUE;\n  return rc;\n}\n\n\nSHOW_COMP_OPTION plugin_status(const char *name, size_t len, int type)\n{\n  LEX_STRING plugin_name= { (char *) name, len };\n  return plugin_status(&plugin_name, type);\n}\n\n\nstatic plugin_ref intern_plugin_lock(LEX *lex, plugin_ref rc)\n{\n  st_plugin_int *pi= plugin_ref_to_int(rc);\n  DBUG_ENTER(\"intern_plugin_lock\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (pi->state & (PLUGIN_IS_READY | PLUGIN_IS_UNINITIALIZED))\n  {\n    plugin_ref plugin;\n#ifdef DBUG_OFF\n    /* built-in plugins don't need ref counting */\n    if (!pi->plugin_dl)\n      DBUG_RETURN(pi);\n\n    plugin= pi;\n#else\n    /*\n      For debugging, we do an additional malloc which allows the\n      memory manager and/or valgrind to track locked references and\n      double unlocks to aid resolving reference counting problems.\n    */\n    if (!(plugin= (plugin_ref) my_malloc(sizeof(pi), MYF(MY_WME))))\n      DBUG_RETURN(NULL);\n\n    *plugin= pi;\n#endif\n    pi->ref_count++;\n    DBUG_PRINT(\"info\",(\"thd: %p, plugin: \\\"%s\\\", ref_count: %d\",\n                       current_thd, pi->name.str, pi->ref_count));\n    if (lex)\n      insert_dynamic(&lex->plugins, &plugin);\n    DBUG_RETURN(plugin);\n  }\n  DBUG_RETURN(NULL);\n}\n\n\nplugin_ref plugin_lock(THD *thd, plugin_ref *ptr)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  plugin_ref rc;\n  DBUG_ENTER(\"plugin_lock\");\n  mysql_mutex_lock(&LOCK_plugin);\n  rc= my_intern_plugin_lock_ci(lex, *ptr);\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(rc);\n}\n\n\nplugin_ref plugin_lock_by_name(THD *thd, const LEX_STRING *name, int type)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  plugin_ref rc= NULL;\n  st_plugin_int *plugin;\n  DBUG_ENTER(\"plugin_lock_by_name\");\n  mysql_mutex_lock(&LOCK_plugin);\n  if ((plugin= plugin_find_internal(name, type)))\n    rc= my_intern_plugin_lock_ci(lex, plugin_int_to_ref(plugin));\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(rc);\n}\n\n\nstatic st_plugin_int *plugin_insert_or_reuse(struct st_plugin_int *plugin)\n{\n  uint i;\n  struct st_plugin_int *tmp;\n  DBUG_ENTER(\"plugin_insert_or_reuse\");\n  for (i= 0; i < plugin_array.elements; i++)\n  {\n    tmp= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n    if (tmp->state == PLUGIN_IS_FREED)\n    {\n      memcpy(tmp, plugin, sizeof(struct st_plugin_int));\n      DBUG_RETURN(tmp);\n    }\n  }\n  if (insert_dynamic(&plugin_array, &plugin))\n    DBUG_RETURN(0);\n  tmp= *dynamic_element(&plugin_array, plugin_array.elements - 1,\n                        struct st_plugin_int **)=\n       (struct st_plugin_int *) memdup_root(&plugin_mem_root, (uchar*)plugin,\n                                            sizeof(struct st_plugin_int));\n  DBUG_RETURN(tmp);\n}\n\n\n/*\n  NOTE\n    Requires that a write-lock is held on LOCK_system_variables_hash\n*/\nstatic bool plugin_add(MEM_ROOT *tmp_root,\n                       const LEX_STRING *name, const LEX_STRING *dl,\n                       int *argc, char **argv, int report)\n{\n  struct st_plugin_int tmp;\n  struct st_mysql_plugin *plugin;\n  DBUG_ENTER(\"plugin_add\");\n  if (plugin_find_internal(name, MYSQL_ANY_PLUGIN))\n  {\n    report_error(report, ER_UDF_EXISTS, name->str);\n    DBUG_RETURN(TRUE);\n  }\n  /* Clear the whole struct to catch future extensions. */\n  memset(&tmp, 0, sizeof(tmp));\n  if (! (tmp.plugin_dl= plugin_dl_add(dl, report)))\n    DBUG_RETURN(TRUE);\n  /* Find plugin by name */\n  for (plugin= tmp.plugin_dl->plugins; plugin->info; plugin++)\n  {\n    uint name_len= strlen(plugin->name);\n    if (plugin->type >= 0 && plugin->type < MYSQL_MAX_PLUGIN_TYPE_NUM &&\n        ! my_strnncoll(system_charset_info,\n                       (const uchar *)name->str, name->length,\n                       (const uchar *)plugin->name,\n                       name_len))\n    {\n      struct st_plugin_int *tmp_plugin_ptr;\n      if (*(int*)plugin->info <\n          min_plugin_info_interface_version[plugin->type] ||\n          ((*(int*)plugin->info) >> 8) >\n          (cur_plugin_info_interface_version[plugin->type] >> 8))\n      {\n        char buf[256];\n        strxnmov(buf, sizeof(buf) - 1, \"API version for \",\n                 plugin_type_names[plugin->type].str,\n                 \" plugin is too different\", NullS);\n        report_error(report, ER_CANT_OPEN_LIBRARY, dl->str, 0, buf);\n        goto err;\n      }\n      tmp.plugin= plugin;\n      tmp.name.str= (char *)plugin->name;\n      tmp.name.length= name_len;\n      tmp.ref_count= 0;\n      tmp.state= PLUGIN_IS_UNINITIALIZED;\n      tmp.load_option= PLUGIN_ON;\n      if (test_plugin_options(tmp_root, &tmp, argc, argv))\n        tmp.state= PLUGIN_IS_DISABLED;\n\n      if ((tmp_plugin_ptr= plugin_insert_or_reuse(&tmp)))\n      {\n        plugin_array_version++;\n        if (!my_hash_insert(&plugin_hash[plugin->type], (uchar*)tmp_plugin_ptr))\n        {\n          init_alloc_root(&tmp_plugin_ptr->mem_root, 4096, 4096);\n          DBUG_RETURN(FALSE);\n        }\n        tmp_plugin_ptr->state= PLUGIN_IS_FREED;\n      }\n      mysql_del_sys_var_chain(tmp.system_vars);\n      restore_pluginvar_names(tmp.system_vars);\n      goto err;\n\n      /* plugin was disabled */\n      plugin_dl_del(dl);\n      DBUG_RETURN(FALSE);\n    }\n  }\n  report_error(report, ER_CANT_FIND_DL_ENTRY, name->str);\nerr:\n  plugin_dl_del(dl);\n  DBUG_RETURN(TRUE);\n}\n\n\nstatic void plugin_deinitialize(struct st_plugin_int *plugin, bool ref_check)\n{\n  /*\n    we don't want to hold the LOCK_plugin mutex as it may cause\n    deinitialization to deadlock if plugins have worker threads\n    with plugin locks\n  */\n  mysql_mutex_assert_not_owner(&LOCK_plugin);\n\n  if (plugin->plugin->status_vars)\n  {\n#ifdef FIX_LATER\n    /**\n      @todo\n      unfortunately, status variables were introduced without a\n      pluginname_ namespace, that is pluginname_ was not added automatically\n      to status variable names. It should be fixed together with the next\n      incompatible API change.\n    */\n    SHOW_VAR array[2]= {\n      {plugin->plugin->name, (char*)plugin->plugin->status_vars, SHOW_ARRAY},\n      {0, 0, SHOW_UNDEF}\n    };\n    remove_status_vars(array);\n#else\n    remove_status_vars(plugin->plugin->status_vars);\n#endif /* FIX_LATER */\n  }\n\n  if (plugin_type_deinitialize[plugin->plugin->type])\n  {\n    if ((*plugin_type_deinitialize[plugin->plugin->type])(plugin))\n    {\n      sql_print_error(\"Plugin '%s' of type %s failed deinitialization\",\n                      plugin->name.str, plugin_type_names[plugin->plugin->type].str);\n    }\n  }\n  else if (plugin->plugin->deinit)\n  {\n    DBUG_PRINT(\"info\", (\"Deinitializing plugin: '%s'\", plugin->name.str));\n    if (plugin->plugin->deinit(plugin))\n    {\n      DBUG_PRINT(\"warning\", (\"Plugin '%s' deinit function returned error.\",\n                             plugin->name.str));\n    }\n  }\n  plugin->state= PLUGIN_IS_UNINITIALIZED;\n\n  /*\n    We do the check here because NDB has a worker THD which doesn't\n    exit until NDB is shut down.\n  */\n  if (ref_check && plugin->ref_count)\n    sql_print_error(\"Plugin '%s' has ref_count=%d after deinitialization.\",\n                    plugin->name.str, plugin->ref_count);\n}\n\nstatic void plugin_del(struct st_plugin_int *plugin)\n{\n  DBUG_ENTER(\"plugin_del(plugin)\");\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  mysql_mutex_assert_owner(&LOCK_plugin_delete);\n  /* Free allocated strings before deleting the plugin. */\n  mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n  mysql_del_sys_var_chain(plugin->system_vars);\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  restore_pluginvar_names(plugin->system_vars);\n  plugin_vars_free_values(plugin->system_vars);\n  my_hash_delete(&plugin_hash[plugin->plugin->type], (uchar*)plugin);\n  if (plugin->plugin_dl)\n    plugin_dl_del(&plugin->plugin_dl->dl);\n  plugin->state= PLUGIN_IS_FREED;\n  plugin_array_version++;\n  free_root(&plugin->mem_root, MYF(0));\n  DBUG_VOID_RETURN;\n}\n\nstatic void reap_plugins(void)\n{\n  uint count, idx;\n  struct st_plugin_int *plugin, **reap, **list;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (!reap_needed)\n    return;\n\n  reap_needed= false;\n  count= plugin_array.elements;\n  reap= (struct st_plugin_int **)my_alloca(sizeof(plugin)*(count+1));\n  *(reap++)= NULL;\n\n  for (idx= 0; idx < count; idx++)\n  {\n    plugin= *dynamic_element(&plugin_array, idx, struct st_plugin_int **);\n    if (plugin->state == PLUGIN_IS_DELETED && !plugin->ref_count)\n    {\n      /* change the status flag to prevent reaping by another thread */\n      plugin->state= PLUGIN_IS_DYING;\n      *(reap++)= plugin;\n    }\n  }\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  list= reap;\n  while ((plugin= *(--list)))\n  {\n    if (!opt_bootstrap)\n      sql_print_information(\"Shutting down plugin '%s'\", plugin->name.str);\n    plugin_deinitialize(plugin, true);\n  }\n\n  mysql_mutex_lock(&LOCK_plugin_delete);\n  mysql_mutex_lock(&LOCK_plugin);\n\n  while ((plugin= *(--reap)))\n    plugin_del(plugin);\n\n  mysql_mutex_unlock(&LOCK_plugin_delete);\n\n  my_afree(reap);\n}\n\nstatic void intern_plugin_unlock(LEX *lex, plugin_ref plugin)\n{\n  int i;\n  st_plugin_int *pi;\n  DBUG_ENTER(\"intern_plugin_unlock\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (!plugin)\n    DBUG_VOID_RETURN;\n\n  pi= plugin_ref_to_int(plugin);\n\n#ifdef DBUG_OFF\n  if (!pi->plugin_dl)\n    DBUG_VOID_RETURN;\n#else\n  my_free(plugin);\n#endif\n\n  DBUG_PRINT(\"info\",(\"unlocking plugin, name= %s, ref_count= %d\",\n                     pi->name.str, pi->ref_count));\n  if (lex)\n  {\n    /*\n      Remove one instance of this plugin from the use list.\n      We are searching backwards so that plugins locked last\n      could be unlocked faster - optimizing for LIFO semantics.\n    */\n    for (i= lex->plugins.elements - 1; i >= 0; i--)\n      if (plugin == *dynamic_element(&lex->plugins, i, plugin_ref*))\n      {\n        delete_dynamic_element(&lex->plugins, i);\n        break;\n      }\n    DBUG_ASSERT(i >= 0);\n  }\n\n  DBUG_ASSERT(pi->ref_count);\n  pi->ref_count--;\n\n  if (pi->state == PLUGIN_IS_DELETED && !pi->ref_count)\n    reap_needed= true;\n\n  DBUG_VOID_RETURN;\n}\n\n\nvoid plugin_unlock(THD *thd, plugin_ref plugin)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  DBUG_ENTER(\"plugin_unlock\");\n  if (!plugin)\n    DBUG_VOID_RETURN;\n#ifdef DBUG_OFF\n  /* built-in plugins don't need ref counting */\n  if (!plugin_dlib(plugin))\n    DBUG_VOID_RETURN;\n#endif\n  mysql_mutex_lock(&LOCK_plugin);\n  intern_plugin_unlock(lex, plugin);\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_VOID_RETURN;\n}\n\n\nvoid plugin_unlock_list(THD *thd, plugin_ref *list, uint count)\n{\n  LEX *lex= thd ? thd->lex : 0;\n  DBUG_ENTER(\"plugin_unlock_list\");\n  DBUG_ASSERT(list);\n\n  /*\n    In unit tests, LOCK_plugin may be uninitialized, so do not lock it.\n    Besides: there's no point in locking it, if there are no plugins to unlock.\n   */\n  if (count == 0)\n    DBUG_VOID_RETURN;\n\n  mysql_mutex_lock(&LOCK_plugin);\n  while (count--)\n    intern_plugin_unlock(lex, *list++);\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_VOID_RETURN;\n}\n\nstatic int plugin_initialize(struct st_plugin_int *plugin)\n{\n  int ret= 1;\n  DBUG_ENTER(\"plugin_initialize\");\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  uint state= plugin->state;\n  DBUG_ASSERT(state == PLUGIN_IS_UNINITIALIZED);\n\n  mysql_mutex_unlock(&LOCK_plugin);\n  if (plugin_type_initialize[plugin->plugin->type])\n  {\n    if ((*plugin_type_initialize[plugin->plugin->type])(plugin))\n    {\n      sql_print_error(\"Plugin '%s' registration as a %s failed.\",\n                      plugin->name.str, plugin_type_names[plugin->plugin->type].str);\n      goto err;\n    }\n\n    /* FIXME: Need better solution to transfer the callback function\n    array to memcached */\n    if (strcmp(plugin->name.str, \"InnoDB\") == 0) {\n      innodb_callback_data = ((handlerton*)plugin->data)->data;\n    }\n  }\n  else if (plugin->plugin->init)\n  {\n    if (strcmp(plugin->name.str, \"daemon_memcached\") == 0) {\n       plugin->data = (void*)innodb_callback_data;\n    }\n\n    if (plugin->plugin->init(plugin))\n    {\n      sql_print_error(\"Plugin '%s' init function returned error.\",\n                      plugin->name.str);\n      goto err;\n    }\n  }\n  state= PLUGIN_IS_READY; // plugin->init() succeeded\n\n  if (plugin->plugin->status_vars)\n  {\n#ifdef FIX_LATER\n    /*\n      We have a problem right now where we can not prepend without\n      breaking backwards compatibility. We will fix this shortly so\n      that engines have \"use names\" and we wil use those for\n      CREATE TABLE, and use the plugin name then for adding automatic\n      variable names.\n    */\n    SHOW_VAR array[2]= {\n      {plugin->plugin->name, (char*)plugin->plugin->status_vars, SHOW_ARRAY},\n      {0, 0, SHOW_UNDEF}\n    };\n    if (add_status_vars(array)) // add_status_vars makes a copy\n      goto err;\n#else\n    if (add_status_vars(plugin->plugin->status_vars))\n      goto err;\n#endif /* FIX_LATER */\n  }\n\n  /*\n    set the plugin attribute of plugin's sys vars so they are pointing\n    to the active plugin\n  */\n  if (plugin->system_vars)\n  {\n    sys_var_pluginvar *var= plugin->system_vars->cast_pluginvar();\n    for (;;)\n    {\n      var->plugin= plugin;\n      if (!var->next)\n        break;\n      var= var->next->cast_pluginvar();\n    }\n  }\n\n  ret= 0;\n\nerr:\n  mysql_mutex_lock(&LOCK_plugin);\n  plugin->state= state;\n\n  DBUG_RETURN(ret);\n}\n\n\nextern \"C\" uchar *get_plugin_hash_key(const uchar *, size_t *, my_bool);\nextern \"C\" uchar *get_bookmark_hash_key(const uchar *, size_t *, my_bool);\n\n\nuchar *get_plugin_hash_key(const uchar *buff, size_t *length,\n                           my_bool not_used MY_ATTRIBUTE((unused)))\n{\n  struct st_plugin_int *plugin= (st_plugin_int *)buff;\n  *length= (uint)plugin->name.length;\n  return((uchar *)plugin->name.str);\n}\n\n\nuchar *get_bookmark_hash_key(const uchar *buff, size_t *length,\n                             my_bool not_used MY_ATTRIBUTE((unused)))\n{\n  struct st_bookmark *var= (st_bookmark *)buff;\n  *length= var->name_len + 1;\n  return (uchar*) var->key;\n}\n\nstatic inline void convert_dash_to_underscore(char *str, int len)\n{\n  for (char *p= str; p <= str+len; p++)\n    if (*p == '-')\n      *p= '_';\n}\n\nstatic inline void convert_underscore_to_dash(char *str, int len)\n{\n  for (char *p= str; p <= str+len; p++)\n    if (*p == '_')\n      *p= '-';\n}\n\n#ifdef HAVE_PSI_INTERFACE\nstatic PSI_mutex_key key_LOCK_plugin;\nstatic PSI_mutex_key key_LOCK_plugin_delete;\n\nstatic PSI_mutex_info all_plugin_mutexes[]=\n{\n  { &key_LOCK_plugin, \"LOCK_plugin\", PSI_FLAG_GLOBAL},\n  { &key_LOCK_plugin_delete, \"LOCK_plugin_delete\", PSI_FLAG_GLOBAL}\n};\n\nstatic void init_plugin_psi_keys(void)\n{\n  const char* category= \"sql\";\n  int count;\n\n  count= array_elements(all_plugin_mutexes);\n  mysql_mutex_register(category, all_plugin_mutexes, count);\n}\n#endif /* HAVE_PSI_INTERFACE */\n\n/*\n  The logic is that we first load and initialize all compiled in plugins.\n  From there we load up the dynamic types (assuming we have not been told to\n  skip this part).\n\n  Finally we initialize everything, aka the dynamic that have yet to initialize.\n*/\nint plugin_init(int *argc, char **argv, int flags)\n{\n  uint i;\n  bool is_myisam;\n  struct st_mysql_plugin **builtins;\n  struct st_mysql_plugin *plugin;\n  struct st_plugin_int tmp, *plugin_ptr, **reap;\n  MEM_ROOT tmp_root;\n  bool reaped_mandatory_plugin= false;\n  bool mandatory= true;\n  DBUG_ENTER(\"plugin_init\");\n\n  if (initialized)\n    DBUG_RETURN(0);\n\n#ifdef HAVE_PSI_INTERFACE\n  init_plugin_psi_keys();\n#endif\n\n  init_alloc_root(&plugin_mem_root, 4096, 4096);\n  init_alloc_root(&tmp_root, 4096, 4096);\n\n  if (my_hash_init(&bookmark_hash, &my_charset_bin, 16, 0, 0,\n                   get_bookmark_hash_key, NULL, HASH_UNIQUE))\n      goto err;\n\n\n  mysql_mutex_init(key_LOCK_plugin, &LOCK_plugin, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_plugin_delete, &LOCK_plugin_delete, MY_MUTEX_INIT_FAST);\n\n  if (my_init_dynamic_array(&plugin_dl_array,\n                            sizeof(struct st_plugin_dl *),16,16) ||\n      my_init_dynamic_array(&plugin_array,\n                            sizeof(struct st_plugin_int *),16,16))\n    goto err;\n\n  for (i= 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++)\n  {\n    if (my_hash_init(&plugin_hash[i], system_charset_info, 16, 0, 0,\n                     get_plugin_hash_key, NULL, HASH_UNIQUE))\n      goto err;\n  }\n\n  mysql_mutex_lock(&LOCK_plugin);\n\n  initialized= 1;\n\n  /*\n    First we register builtin plugins\n  */\n  for (builtins= mysql_mandatory_plugins; *builtins || mandatory; builtins++)\n  {\n    if (!*builtins)\n    {\n      builtins= mysql_optional_plugins;\n      mandatory= false;\n      if (!*builtins)\n        break;\n    }\n    for (plugin= *builtins; plugin->info; plugin++)\n    {\n      memset(&tmp, 0, sizeof(tmp));\n      tmp.plugin= plugin;\n      tmp.name.str= (char *)plugin->name;\n      tmp.name.length= strlen(plugin->name);\n      tmp.state= 0;\n      tmp.load_option= mandatory ? PLUGIN_FORCE : PLUGIN_ON;\n\n      /*\n        If the performance schema is compiled in,\n        treat the storage engine plugin as 'mandatory',\n        to suppress any plugin-level options such as '--performance-schema'.\n        This is specific to the performance schema, and is done on purpose:\n        the server-level option '--performance-schema' controls the overall\n        performance schema initialization, which consists of much more that\n        the underlying storage engine initialization.\n        See mysqld.cc, set_vars.cc.\n        Suppressing ways to interfere directly with the storage engine alone\n        prevents awkward situations where:\n        - the user wants the performance schema functionality, by using\n          '--enable-performance-schema' (the server option),\n        - yet disable explicitly a component needed for the functionality\n          to work, by using '--skip-performance-schema' (the plugin)\n      */\n      if (!my_strcasecmp(&my_charset_latin1, plugin->name, \"PERFORMANCE_SCHEMA\"))\n        tmp.load_option= PLUGIN_FORCE;\n\n      free_root(&tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n      if (test_plugin_options(&tmp_root, &tmp, argc, argv))\n        tmp.state= PLUGIN_IS_DISABLED;\n      else\n        tmp.state= PLUGIN_IS_UNINITIALIZED;\n      if (register_builtin(plugin, &tmp, &plugin_ptr))\n        goto err_unlock;\n\n      /* only initialize MyISAM and CSV at this stage */\n      if (!(is_myisam=\n            !my_strcasecmp(&my_charset_latin1, plugin->name, \"MyISAM\")) &&\n          my_strcasecmp(&my_charset_latin1, plugin->name, \"CSV\"))\n        continue;\n\n      if (plugin_ptr->state != PLUGIN_IS_UNINITIALIZED ||\n          plugin_initialize(plugin_ptr))\n        goto err_unlock;\n\n      /*\n        initialize the global default storage engine so that it may\n        not be null in any child thread.\n      */\n      if (is_myisam)\n      {\n        DBUG_ASSERT(!global_system_variables.table_plugin);\n        DBUG_ASSERT(!global_system_variables.temp_table_plugin);\n        global_system_variables.table_plugin=\n          my_intern_plugin_lock(NULL, plugin_int_to_ref(plugin_ptr));\n        global_system_variables.temp_table_plugin=\n          my_intern_plugin_lock(NULL, plugin_int_to_ref(plugin_ptr));\n        DBUG_ASSERT(plugin_ptr->ref_count == 2);\n      }\n    }\n  }\n\n  /* should now be set to MyISAM storage engine */\n  DBUG_ASSERT(global_system_variables.table_plugin);\n  DBUG_ASSERT(global_system_variables.temp_table_plugin);\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  /* Register all dynamic plugins */\n  if (!(flags & PLUGIN_INIT_SKIP_DYNAMIC_LOADING))\n  {\n    I_List_iterator<i_string> iter(opt_plugin_load_list);\n    i_string *item;\n    while (NULL != (item= iter++))\n      plugin_load_list(&tmp_root, argc, argv, item->ptr);\n\n    if (!(flags & PLUGIN_INIT_SKIP_PLUGIN_TABLE))\n      plugin_load(&tmp_root, argc, argv);\n  }\n\n  if (flags & PLUGIN_INIT_SKIP_INITIALIZATION)\n    goto end;\n\n  /*\n    Now we initialize all remaining plugins\n  */\n\n  mysql_mutex_lock(&LOCK_plugin);\n  reap= (st_plugin_int **) my_alloca((plugin_array.elements+1) * sizeof(void*));\n  *(reap++)= NULL;\n\n  for (i= 0; i < plugin_array.elements; i++)\n  {\n    plugin_ptr= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n    if (plugin_ptr->state == PLUGIN_IS_UNINITIALIZED)\n    {\n      if (plugin_initialize(plugin_ptr))\n      {\n        plugin_ptr->state= PLUGIN_IS_DYING;\n        *(reap++)= plugin_ptr;\n      }\n    }\n  }\n\n  /*\n    Check if any plugins have to be reaped\n  */\n  while ((plugin_ptr= *(--reap)))\n  {\n    mysql_mutex_unlock(&LOCK_plugin);\n    if (plugin_ptr->load_option == PLUGIN_FORCE ||\n        plugin_ptr->load_option == PLUGIN_FORCE_PLUS_PERMANENT)\n      reaped_mandatory_plugin= TRUE;\n    plugin_deinitialize(plugin_ptr, true);\n    mysql_mutex_lock(&LOCK_plugin_delete);\n    mysql_mutex_lock(&LOCK_plugin);\n    plugin_del(plugin_ptr);\n    mysql_mutex_unlock(&LOCK_plugin_delete);\n  }\n\n  mysql_mutex_unlock(&LOCK_plugin);\n  my_afree(reap);\n  if (reaped_mandatory_plugin)\n    goto err;\n\nend:\n  free_root(&tmp_root, MYF(0));\n\n  DBUG_RETURN(0);\n\nerr_unlock:\n  mysql_mutex_unlock(&LOCK_plugin);\nerr:\n  free_root(&tmp_root, MYF(0));\n  DBUG_RETURN(1);\n}\n\n\nstatic bool register_builtin(struct st_mysql_plugin *plugin,\n                             struct st_plugin_int *tmp,\n                             struct st_plugin_int **ptr)\n{\n  DBUG_ENTER(\"register_builtin\");\n  tmp->ref_count= 0;\n  tmp->plugin_dl= 0;\n\n  if (insert_dynamic(&plugin_array, &tmp))\n    DBUG_RETURN(1);\n\n  *ptr= *dynamic_element(&plugin_array, plugin_array.elements - 1,\n                         struct st_plugin_int **)=\n        (struct st_plugin_int *) memdup_root(&plugin_mem_root, (uchar*)tmp,\n                                             sizeof(struct st_plugin_int));\n\n  if (my_hash_insert(&plugin_hash[plugin->type],(uchar*) *ptr))\n    DBUG_RETURN(1);\n\n  DBUG_RETURN(0);\n}\n\n\n/*\n  called only by plugin_init()\n*/\nstatic void plugin_load(MEM_ROOT *tmp_root, int *argc, char **argv)\n{\n  THD thd;\n  TABLE_LIST tables;\n  TABLE *table;\n  READ_RECORD read_record_info;\n  int error;\n  THD *new_thd= &thd;\n  bool result;\n#ifdef EMBEDDED_LIBRARY\n  No_such_table_error_handler error_handler;\n#endif /* EMBEDDED_LIBRARY */\n  DBUG_ENTER(\"plugin_load\");\n\n  new_thd->thread_stack= (char*) &tables;\n  new_thd->store_globals();\n  new_thd->db= my_strdup(\"mysql\", MYF(0));\n  new_thd->db_length= 5;\n  memset(&thd.net, 0, sizeof(thd.net));\n  tables.init_one_table(\"mysql\", 5, \"plugin\", 6, \"plugin\", TL_READ);\n\n#ifdef EMBEDDED_LIBRARY\n  /*\n    When building an embedded library, if the mysql.plugin table\n    does not exist, we silently ignore the missing table\n  */\n  new_thd->push_internal_handler(&error_handler);\n#endif /* EMBEDDED_LIBRARY */\n\n  result= open_and_lock_tables(new_thd, &tables, FALSE, MYSQL_LOCK_IGNORE_TIMEOUT);\n\n#ifdef EMBEDDED_LIBRARY\n  new_thd->pop_internal_handler();\n  if (error_handler.safely_trapped_errors())\n    goto end;\n#endif /* EMBEDDED_LIBRARY */\n\n  if (result)\n  {\n    DBUG_PRINT(\"error\",(\"Can't open plugin table\"));\n    sql_print_error(\"Can't open the mysql.plugin table. Please \"\n                    \"run mysql_upgrade to create it.\");\n    goto end;\n  }\n  table= tables.table;\n  if (init_read_record(&read_record_info, new_thd, table, NULL, 1, 1, FALSE))\n    goto end;\n  table->use_all_columns();\n  /*\n    there're no other threads running yet, so we don't need a mutex.\n    but plugin_add() before is designed to work in multi-threaded\n    environment, and it uses mysql_mutex_assert_owner(), so we lock\n    the mutex here to satisfy the assert\n  */\n  mysql_mutex_lock(&LOCK_plugin);\n  while (!(error= read_record_info.read_record(&read_record_info)))\n  {\n    DBUG_PRINT(\"info\", (\"init plugin record\"));\n    String str_name, str_dl;\n    get_field(tmp_root, table->field[0], &str_name);\n    get_field(tmp_root, table->field[1], &str_dl);\n\n    LEX_STRING name= {(char *)str_name.ptr(), str_name.length()};\n    LEX_STRING dl= {(char *)str_dl.ptr(), str_dl.length()};\n\n    if (plugin_add(tmp_root, &name, &dl, argc, argv, REPORT_TO_LOG))\n      sql_print_warning(\"Couldn't load plugin named '%s' with soname '%s'.\",\n                        str_name.c_ptr(), str_dl.c_ptr());\n    free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n  if (error > 0)\n    sql_print_error(ER(ER_GET_ERRNO), my_errno);\n  end_read_record(&read_record_info);\n  table->m_needs_reopen= TRUE;                  // Force close to free memory\n  close_mysql_tables(new_thd);\nend:\n  /* Remember that we don't have a THD */\n  my_pthread_setspecific_ptr(THR_THD, 0);\n  DBUG_VOID_RETURN;\n}\n\n\n/*\n  called only by plugin_init()\n*/\nstatic bool plugin_load_list(MEM_ROOT *tmp_root, int *argc, char **argv,\n                             const char *list)\n{\n  char buffer[FN_REFLEN];\n  LEX_STRING name= {buffer, 0}, dl= {NULL, 0}, *str= &name;\n  struct st_plugin_dl *plugin_dl;\n  struct st_mysql_plugin *plugin;\n  char *p= buffer;\n  DBUG_ENTER(\"plugin_load_list\");\n  while (list)\n  {\n    if (p == buffer + sizeof(buffer) - 1)\n    {\n      sql_print_error(\"plugin-load parameter too long\");\n      DBUG_RETURN(TRUE);\n    }\n\n    switch ((*(p++)= *(list++))) {\n    case '\\0':\n      list= NULL; /* terminate the loop */\n      /* fall through */\n#ifndef __WIN__\n    case ':':     /* can't use this as delimiter as it may be drive letter */\n#endif\n    case ';':\n      str->str[str->length]= '\\0';\n      if (str == &name)  // load all plugins in named module\n      {\n        if (!name.length)\n        {\n          p--;    /* reset pointer */\n          continue;\n        }\n\n        dl= name;\n        mysql_mutex_lock(&LOCK_plugin);\n        if ((plugin_dl= plugin_dl_add(&dl, REPORT_TO_LOG)))\n        {\n          for (plugin= plugin_dl->plugins; plugin->info; plugin++)\n          {\n            name.str= (char *) plugin->name;\n            name.length= strlen(name.str);\n\n            free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n            if (plugin_add(tmp_root, &name, &dl, argc, argv, REPORT_TO_LOG))\n              goto error;\n          }\n          plugin_dl_del(&dl); // reduce ref count\n        }\n      }\n      else\n      {\n        free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n        mysql_mutex_lock(&LOCK_plugin);\n        if (plugin_add(tmp_root, &name, &dl, argc, argv, REPORT_TO_LOG))\n          goto error;\n      }\n      mysql_mutex_unlock(&LOCK_plugin);\n      name.length= dl.length= 0;\n      dl.str= NULL; name.str= p= buffer;\n      str= &name;\n      continue;\n    case '=':\n    case '#':\n      if (str == &name)\n      {\n        name.str[name.length]= '\\0';\n        str= &dl;\n        str->str= p;\n        continue;\n      }\n    default:\n      str->length++;\n      continue;\n    }\n  }\n  DBUG_RETURN(FALSE);\nerror:\n  mysql_mutex_unlock(&LOCK_plugin);\n  sql_print_error(\"Couldn't load plugin named '%s' with soname '%s'.\",\n                  name.str, dl.str);\n  DBUG_RETURN(TRUE);\n}\n\n/*\n  Shutdown memcached plugin before binlog shuts down\n*/\nvoid memcached_shutdown(void)\n{\n  struct st_plugin_int *plugin;\n  if (initialized)\n  {\n\n    for (uint i= 0; i < plugin_array.elements; i++)\n    {\n      plugin= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n\n      if (plugin->state == PLUGIN_IS_READY\n\t  && strcmp(plugin->name.str, \"daemon_memcached\") == 0)\n      {\n\tplugin_deinitialize(plugin, true);\n\n        mysql_mutex_lock(&LOCK_plugin);\n\tplugin->state= PLUGIN_IS_DYING;\n\tplugin_del(plugin);\n        mysql_mutex_unlock(&LOCK_plugin);\n      }\n    }\n\n  }\n}\n\nvoid plugin_shutdown(void)\n{\n  uint i, count= plugin_array.elements;\n  struct st_plugin_int **plugins, *plugin;\n  struct st_plugin_dl **dl;\n  bool skip_binlog = true;\n\n  DBUG_ENTER(\"plugin_shutdown\");\n\n  if (initialized)\n  {\n    mysql_mutex_lock(&LOCK_plugin);\n\n    reap_needed= true;\n\n    /*\n      We want to shut down plugins in a reasonable order, this will\n      become important when we have plugins which depend upon each other.\n      Circular references cannot be reaped so they are forced afterwards.\n      TODO: Have an additional step here to notify all active plugins that\n      shutdown is requested to allow plugins to deinitialize in parallel.\n    */\n    while (reap_needed && (count= plugin_array.elements))\n    {\n      reap_plugins();\n      for (i= 0; i < count; i++)\n      {\n        plugin= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n\n\tif (plugin->state == PLUGIN_IS_READY\n\t    && strcmp(plugin->name.str, \"binlog\") == 0 && skip_binlog)\n\t{\n\t\tskip_binlog = false;\n\n\t} else if (plugin->state == PLUGIN_IS_READY)\n        {\n          plugin->state= PLUGIN_IS_DELETED;\n          reap_needed= true;\n        }\n      }\n      if (!reap_needed)\n      {\n        /*\n          release any plugin references held.\n        */\n        unlock_variables(NULL, &global_system_variables);\n        unlock_variables(NULL, &max_system_variables);\n      }\n    }\n\n    plugins= (struct st_plugin_int **) my_alloca(sizeof(void*) * (count+1));\n\n    /*\n      If we have any plugins which did not die cleanly, we force shutdown\n    */\n    for (i= 0; i < count; i++)\n    {\n      plugins[i]= *dynamic_element(&plugin_array, i, struct st_plugin_int **);\n      /* change the state to ensure no reaping races */\n      if (plugins[i]->state == PLUGIN_IS_DELETED)\n        plugins[i]->state= PLUGIN_IS_DYING;\n    }\n    mysql_mutex_unlock(&LOCK_plugin);\n\n    /*\n      We loop through all plugins and call deinit() if they have one.\n    */\n    for (i= 0; i < count; i++)\n      if (!(plugins[i]->state & (PLUGIN_IS_UNINITIALIZED | PLUGIN_IS_FREED |\n                                 PLUGIN_IS_DISABLED)))\n      {\n        sql_print_warning(\"Plugin '%s' will be forced to shutdown\",\n                          plugins[i]->name.str);\n        /*\n          We are forcing deinit on plugins so we don't want to do a ref_count\n          check until we have processed all the plugins.\n        */\n        plugin_deinitialize(plugins[i], false);\n      }\n\n    /*\n      It's perfectly safe not to lock LOCK_plugin, LOCK_plugin_delete, as\n      there're no concurrent threads anymore. But some functions called from\n      here use mysql_mutex_assert_owner(), so we lock the mutex to satisfy it\n    */\n    mysql_mutex_lock(&LOCK_plugin_delete);\n    mysql_mutex_lock(&LOCK_plugin);\n\n    /*\n      We defer checking ref_counts until after all plugins are deinitialized\n      as some may have worker threads holding on to plugin references.\n    */\n    for (i= 0; i < count; i++)\n    {\n      if (plugins[i]->ref_count)\n        sql_print_error(\"Plugin '%s' has ref_count=%d after shutdown.\",\n                        plugins[i]->name.str, plugins[i]->ref_count);\n      if (plugins[i]->state & PLUGIN_IS_UNINITIALIZED)\n        plugin_del(plugins[i]);\n    }\n\n    /*\n      Now we can deallocate all memory.\n    */\n\n    cleanup_variables(NULL, &global_system_variables);\n    cleanup_variables(NULL, &max_system_variables);\n    mysql_mutex_unlock(&LOCK_plugin);\n    mysql_mutex_unlock(&LOCK_plugin_delete);\n\n    initialized= 0;\n    mysql_mutex_destroy(&LOCK_plugin);\n    mysql_mutex_destroy(&LOCK_plugin_delete);\n\n    my_afree(plugins);\n  }\n\n  /* Dispose of the memory */\n\n  for (i= 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++)\n    my_hash_free(&plugin_hash[i]);\n  delete_dynamic(&plugin_array);\n\n  count= plugin_dl_array.elements;\n  dl= (struct st_plugin_dl **)my_alloca(sizeof(void*) * count);\n  for (i= 0; i < count; i++)\n    dl[i]= *dynamic_element(&plugin_dl_array, i, struct st_plugin_dl **);\n  for (i= 0; i < plugin_dl_array.elements; i++)\n    free_plugin_mem(dl[i]);\n  my_afree(dl);\n  delete_dynamic(&plugin_dl_array);\n\n  my_hash_free(&bookmark_hash);\n  free_root(&plugin_mem_root, MYF(0));\n\n  global_variables_dynamic_size= 0;\n\n  DBUG_VOID_RETURN;\n}\n\n\nbool mysql_install_plugin(THD *thd, const LEX_STRING *name, const LEX_STRING *dl)\n{\n  TABLE_LIST tables;\n  TABLE *table;\n  int error, argc=orig_argc;\n  char **argv=orig_argv;\n  struct st_plugin_int *tmp;\n  DBUG_ENTER(\"mysql_install_plugin\");\n\n  if (opt_noacl)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0), \"--skip-grant-tables\");\n    DBUG_RETURN(TRUE);\n  }\n\n  tables.init_one_table(\"mysql\", 5, \"plugin\", 6, \"plugin\", TL_WRITE);\n  if (check_table_access(thd, INSERT_ACL, &tables, FALSE, 1, FALSE))\n    DBUG_RETURN(TRUE);\n\n  /* need to open before acquiring LOCK_plugin or it will deadlock */\n  if (! (table = open_ltable(thd, &tables, TL_WRITE,\n                             MYSQL_LOCK_IGNORE_TIMEOUT)))\n    DBUG_RETURN(TRUE);\n\n  /*\n    Pre-acquire audit plugins for events that may potentially occur\n    during [UN]INSTALL PLUGIN.\n\n    When audit event is triggered, audit subsystem acquires interested\n    plugins by walking through plugin list. Evidently plugin list\n    iterator protects plugin list by acquiring LOCK_plugin, see\n    plugin_foreach_with_mask().\n\n    On the other hand [UN]INSTALL PLUGIN is acquiring LOCK_plugin\n    rather for a long time.\n\n    When audit event is triggered during [UN]INSTALL PLUGIN, plugin\n    list iterator acquires the same lock (within the same thread)\n    second time.\n\n    This hack should be removed when LOCK_plugin is fixed so it\n    protects only what it supposed to protect.\n  */\n  mysql_audit_acquire_plugins(thd, MYSQL_AUDIT_GENERAL_CLASS);\n\n  mysql_mutex_lock(&LOCK_plugin);\n  DEBUG_SYNC(thd, \"acquired_LOCK_plugin\");\n  mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n\n  if (my_load_defaults(MYSQL_CONFIG_NAME, load_default_groups, &argc, &argv, NULL))\n  {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    report_error(REPORT_TO_USER, ER_PLUGIN_IS_NOT_LOADED, name->str);\n    goto err;\n  }\n  error= plugin_add(thd->mem_root, name, dl, &argc, argv, REPORT_TO_USER);\n  if (argv)\n    free_defaults(argv);\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n\n  if (error || !(tmp= plugin_find_internal(name, MYSQL_ANY_PLUGIN)))\n    goto err;\n\n  if (tmp->state == PLUGIN_IS_DISABLED)\n  {\n    push_warning_printf(thd, Sql_condition::WARN_LEVEL_WARN,\n                        ER_CANT_INITIALIZE_UDF, ER(ER_CANT_INITIALIZE_UDF),\n                        name->str, \"Plugin is disabled\");\n  }\n  else\n  {\n    if (plugin_initialize(tmp))\n    {\n      mysql_mutex_unlock(&LOCK_plugin);\n      my_error(ER_CANT_INITIALIZE_UDF, MYF(0), name->str,\n               \"Plugin initialization function failed.\");\n      goto deinit;\n    }\n  }\n\n  /*\n    We do not replicate the INSTALL PLUGIN statement. Disable binlogging\n    of the insert into the plugin table, so that it is not replicated in\n    row based mode.\n  */\n  mysql_mutex_unlock(&LOCK_plugin);\n  tmp_disable_binlog(thd);\n  table->use_all_columns();\n  restore_record(table, s->default_values);\n  table->field[0]->store(name->str, name->length, system_charset_info);\n  table->field[1]->store(dl->str, dl->length, files_charset_info);\n  error= table->file->ha_write_row(table->record[0]);\n  reenable_binlog(thd);\n  if (error)\n  {\n    table->file->print_error(error, MYF(0));\n    goto deinit;\n  }\n  DBUG_RETURN(FALSE);\ndeinit:\n  mysql_mutex_lock(&LOCK_plugin);\n  tmp->state= PLUGIN_IS_DELETED;\n  reap_needed= true;\n  reap_plugins();\nerr:\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(TRUE);\n}\n\n\nbool mysql_uninstall_plugin(THD *thd, const LEX_STRING *name)\n{\n  TABLE *table;\n  TABLE_LIST tables;\n  struct st_plugin_int *plugin;\n  DBUG_ENTER(\"mysql_uninstall_plugin\");\n\n  if (opt_noacl)\n  {\n    my_error(ER_OPTION_PREVENTS_STATEMENT, MYF(0), \"--skip-grant-tables\");\n    DBUG_RETURN(TRUE);\n  }\n\n  tables.init_one_table(\"mysql\", 5, \"plugin\", 6, \"plugin\", TL_WRITE);\n\n  if (check_table_access(thd, DELETE_ACL, &tables, FALSE, 1, FALSE))\n    DBUG_RETURN(TRUE);\n\n  /* need to open before acquiring LOCK_plugin or it will deadlock */\n  if (! (table= open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT)))\n    DBUG_RETURN(TRUE);\n\n  if (!table->key_info)\n  {\n    my_error(ER_MISSING_KEY, MYF(0), table->s->db.str,\n             table->s->table_name.str);\n    DBUG_RETURN(TRUE);\n  }\n\n  /*\n    Pre-acquire audit plugins for events that may potentially occur\n    during [UN]INSTALL PLUGIN.\n\n    When audit event is triggered, audit subsystem acquires interested\n    plugins by walking through plugin list. Evidently plugin list\n    iterator protects plugin list by acquiring LOCK_plugin, see\n    plugin_foreach_with_mask().\n\n    On the other hand [UN]INSTALL PLUGIN is acquiring LOCK_plugin\n    rather for a long time.\n\n    When audit event is triggered during [UN]INSTALL PLUGIN, plugin\n    list iterator acquires the same lock (within the same thread)\n    second time.\n\n    This hack should be removed when LOCK_plugin is fixed so it\n    protects only what it supposed to protect.\n  */\n  mysql_audit_acquire_plugins(thd, MYSQL_AUDIT_GENERAL_CLASS);\n\n  mysql_mutex_lock(&LOCK_plugin);\n  if (!(plugin= plugin_find_internal(name, MYSQL_ANY_PLUGIN)) ||\n      plugin->state & (PLUGIN_IS_UNINITIALIZED | PLUGIN_IS_DYING))\n  {\n    my_error(ER_SP_DOES_NOT_EXIST, MYF(0), \"PLUGIN\", name->str);\n    goto err;\n  }\n  if (!plugin->plugin_dl)\n  {\n    push_warning(thd, Sql_condition::WARN_LEVEL_WARN,\n                 WARN_PLUGIN_DELETE_BUILTIN, ER(WARN_PLUGIN_DELETE_BUILTIN));\n    my_error(ER_SP_DOES_NOT_EXIST, MYF(0), \"PLUGIN\", name->str);\n    goto err;\n  }\n  if (plugin->load_option == PLUGIN_FORCE_PLUS_PERMANENT)\n  {\n    my_error(ER_PLUGIN_IS_PERMANENT, MYF(0), name->str);\n    goto err;\n  }\n  /*\n    Error message for ER_PLUGIN_IS_PERMANENT is not suitable for\n    plugins marked as not dynamically uninstallable, so we have a\n    separate one instead of changing the old one.\n   */\n  if (plugin->plugin->flags & PLUGIN_OPT_NO_UNINSTALL)\n  {\n    my_error(ER_PLUGIN_NO_UNINSTALL, MYF(0), plugin->plugin->name);\n    goto err;\n  }\n\n#ifdef HAVE_REPLICATION\n  /* Block Uninstallation of semi_sync plugins (Master/Slave)\n     when they are busy\n   */\n  char buff[20];\n  /*\n    Master: If there are active semi sync slaves for this Master,\n    then that means it is busy and rpl_semi_sync_master plugin\n    cannot be uninstalled. To check whether the master\n    has any semi sync slaves or not, check Rpl_semi_sync_master_cliens\n    status variable value, if it is not 0, that means it is busy.\n  */\n  if (!strcmp(name->str, \"rpl_semi_sync_master\") &&\n      get_status_var(thd,\n                     plugin->plugin->status_vars,\n                     \"Rpl_semi_sync_master_clients\",buff) &&\n      strcmp(buff,\"0\") )\n  {\n    my_error(ER_PLUGIN_CANNOT_BE_UNINSTALLED, MYF(0), name->str,\n             \"Stop any active semisynchronous slaves of this master first.\");\n    goto err;\n  }\n  /* Slave: If there is semi sync enabled IO thread active on this Slave,\n    then that means plugin is busy and rpl_semi_sync_slave plugin\n    cannot be uninstalled. To check whether semi sync\n    IO thread is active or not, check Rpl_semi_sync_slave_status status\n    variable value, if it is ON, that means it is busy.\n  */\n  if (!strcmp(name->str, \"rpl_semi_sync_slave\") &&\n      get_status_var(thd, plugin->plugin->status_vars,\n                     \"Rpl_semi_sync_slave_status\", buff) &&\n      !strcmp(buff,\"ON\") )\n  {\n    my_error(ER_PLUGIN_CANNOT_BE_UNINSTALLED, MYF(0), name->str,\n             \"Stop any active semisynchronous I/O threads on this slave first.\");\n    goto err;\n  }\n#endif\n\n  plugin->state= PLUGIN_IS_DELETED;\n  if (plugin->ref_count)\n    push_warning(thd, Sql_condition::WARN_LEVEL_WARN,\n                 WARN_PLUGIN_BUSY, ER(WARN_PLUGIN_BUSY));\n  else\n    reap_needed= true;\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  uchar user_key[MAX_KEY_LENGTH];\n  table->use_all_columns();\n  table->field[0]->store(name->str, name->length, system_charset_info);\n  key_copy(user_key, table->record[0], table->key_info,\n           table->key_info->key_length);\n  if (! table->file->ha_index_read_idx_map(table->record[0], 0, user_key,\n                                           HA_WHOLE_KEY, HA_READ_KEY_EXACT))\n  {\n    int error;\n    /*\n      We do not replicate the UNINSTALL PLUGIN statement. Disable binlogging\n      of the delete from the plugin table, so that it is not replicated in\n      row based mode.\n    */\n    tmp_disable_binlog(thd);\n    error= table->file->ha_delete_row(table->record[0]);\n    reenable_binlog(thd);\n    if (error)\n    {\n      table->file->print_error(error, MYF(0));\n      DBUG_RETURN(TRUE);\n    }\n  }\n  DBUG_RETURN(FALSE);\nerr:\n  mysql_mutex_unlock(&LOCK_plugin);\n  DBUG_RETURN(TRUE);\n}\n\n\nbool plugin_foreach_with_mask(THD *thd, plugin_foreach_func *func,\n                       int type, uint state_mask, void *arg)\n{\n  uint idx, total;\n  struct st_plugin_int *plugin, **plugins;\n  int version=plugin_array_version;\n  DBUG_ENTER(\"plugin_foreach_with_mask\");\n\n  if (!initialized)\n    DBUG_RETURN(FALSE);\n\n  state_mask= ~state_mask; // do it only once\n\n  mysql_mutex_lock(&LOCK_plugin);\n  total= type == MYSQL_ANY_PLUGIN ? plugin_array.elements\n                                  : plugin_hash[type].records;\n  /*\n    Do the alloca out here in case we do have a working alloca:\n        leaving the nested stack frame invalidates alloca allocation.\n  */\n  plugins=(struct st_plugin_int **)my_alloca(total*sizeof(plugin));\n  if (type == MYSQL_ANY_PLUGIN)\n  {\n    for (idx= 0; idx < total; idx++)\n    {\n      plugin= *dynamic_element(&plugin_array, idx, struct st_plugin_int **);\n      plugins[idx]= !(plugin->state & state_mask) ? plugin : NULL;\n    }\n  }\n  else\n  {\n    HASH *hash= plugin_hash + type;\n    for (idx= 0; idx < total; idx++)\n    {\n      plugin= (struct st_plugin_int *) my_hash_element(hash, idx);\n      plugins[idx]= !(plugin->state & state_mask) ? plugin : NULL;\n    }\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  for (idx= 0; idx < total; idx++)\n  {\n    if (unlikely(version != plugin_array_version))\n    {\n      mysql_mutex_lock(&LOCK_plugin);\n      for (uint i=idx; i < total; i++)\n        if (plugins[i] && plugins[i]->state & state_mask)\n          plugins[i]=0;\n      mysql_mutex_unlock(&LOCK_plugin);\n    }\n    plugin= plugins[idx];\n    /* It will stop iterating on first engine error when \"func\" returns TRUE */\n    if (plugin && func(thd, plugin_int_to_ref(plugin), arg))\n        goto err;\n  }\n\n  my_afree(plugins);\n  DBUG_RETURN(FALSE);\nerr:\n  my_afree(plugins);\n  DBUG_RETURN(TRUE);\n}\n\n\n/****************************************************************************\n  Internal type declarations for variables support\n****************************************************************************/\n\n#undef MYSQL_SYSVAR_NAME\n#define MYSQL_SYSVAR_NAME(name) name\n#define PLUGIN_VAR_TYPEMASK 0x007f\n\n#define EXTRA_OPTIONS 3 /* options for: 'foo', 'plugin-foo' and NULL */\n\ntypedef DECLARE_MYSQL_SYSVAR_BASIC(sysvar_bool_t, my_bool);\ntypedef DECLARE_MYSQL_THDVAR_BASIC(thdvar_bool_t, my_bool);\ntypedef DECLARE_MYSQL_SYSVAR_BASIC(sysvar_str_t, char *);\ntypedef DECLARE_MYSQL_THDVAR_BASIC(thdvar_str_t, char *);\n\ntypedef DECLARE_MYSQL_SYSVAR_TYPELIB(sysvar_enum_t, unsigned long);\ntypedef DECLARE_MYSQL_THDVAR_TYPELIB(thdvar_enum_t, unsigned long);\ntypedef DECLARE_MYSQL_SYSVAR_TYPELIB(sysvar_set_t, ulonglong);\ntypedef DECLARE_MYSQL_THDVAR_TYPELIB(thdvar_set_t, ulonglong);\n\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_int_t, int);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_long_t, long);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_longlong_t, longlong);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_uint_t, uint);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_ulong_t, ulong);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_ulonglong_t, ulonglong);\ntypedef DECLARE_MYSQL_SYSVAR_SIMPLE(sysvar_double_t, double);\n\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_int_t, int);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_long_t, long);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_longlong_t, longlong);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_uint_t, uint);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_ulong_t, ulong);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_ulonglong_t, ulonglong);\ntypedef DECLARE_MYSQL_THDVAR_SIMPLE(thdvar_double_t, double);\n\n\n/****************************************************************************\n  default variable data check and update functions\n****************************************************************************/\n\nstatic int check_func_bool(THD *thd, struct st_mysql_sys_var *var,\n                           void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  const char *str;\n  int result, length;\n  long long tmp;\n\n  if (value->value_type(value) == MYSQL_VALUE_TYPE_STRING)\n  {\n    length= sizeof(buff);\n    if (!(str= value->val_str(value, buff, &length)) ||\n        (result= find_type(&bool_typelib, str, length, 1)-1) < 0)\n      goto err;\n  }\n  else\n  {\n    if (value->val_int(value, &tmp) < 0)\n      goto err;\n    if (tmp > 1)\n      goto err;\n    result= (int) tmp;\n  }\n  *(my_bool *) save= result ? TRUE : FALSE;\n  return 0;\nerr:\n  return 1;\n}\n\n\nstatic int check_func_int(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  my_bool fixed1, fixed2;\n  long long orig, val;\n  struct my_option options;\n  value->val_int(value, &orig);\n  val= orig;\n  plugin_opt_set_limits(&options, var);\n\n  if (var->flags & PLUGIN_VAR_UNSIGNED)\n  {\n    if ((fixed1= (!value->is_unsigned(value) && val < 0)))\n      val=0;\n    *(uint *)save= (uint) getopt_ull_limit_value((ulonglong) val, &options,\n                                                   &fixed2);\n  }\n  else\n  {\n    if ((fixed1= (value->is_unsigned(value) && val < 0)))\n      val=LONGLONG_MAX;\n    *(int *)save= (int) getopt_ll_limit_value(val, &options, &fixed2);\n  }\n\n  return throw_bounds_warning(thd, var->name, fixed1 || fixed2,\n                              value->is_unsigned(value), (longlong) orig);\n}\n\n\nstatic int check_func_long(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  my_bool fixed1, fixed2;\n  long long orig, val;\n  struct my_option options;\n  value->val_int(value, &orig);\n  val= orig;\n  plugin_opt_set_limits(&options, var);\n\n  if (var->flags & PLUGIN_VAR_UNSIGNED)\n  {\n    if ((fixed1= (!value->is_unsigned(value) && val < 0)))\n      val=0;\n    *(ulong *)save= (ulong) getopt_ull_limit_value((ulonglong) val, &options,\n                                                   &fixed2);\n  }\n  else\n  {\n    if ((fixed1= (value->is_unsigned(value) && val < 0)))\n      val=LONGLONG_MAX;\n    *(long *)save= (long) getopt_ll_limit_value(val, &options, &fixed2);\n  }\n\n  return throw_bounds_warning(thd, var->name, fixed1 || fixed2,\n                              value->is_unsigned(value), (longlong) orig);\n}\n\n\nstatic int check_func_longlong(THD *thd, struct st_mysql_sys_var *var,\n                               void *save, st_mysql_value *value)\n{\n  my_bool fixed1, fixed2;\n  long long orig, val;\n  struct my_option options;\n  value->val_int(value, &orig);\n  val= orig;\n  plugin_opt_set_limits(&options, var);\n\n  if (var->flags & PLUGIN_VAR_UNSIGNED)\n  {\n    if ((fixed1= (!value->is_unsigned(value) && val < 0)))\n      val=0;\n    *(ulonglong *)save= getopt_ull_limit_value((ulonglong) val, &options,\n                                               &fixed2);\n  }\n  else\n  {\n    if ((fixed1= (value->is_unsigned(value) && val < 0)))\n      val=LONGLONG_MAX;\n    *(longlong *)save= getopt_ll_limit_value(val, &options, &fixed2);\n  }\n\n  return throw_bounds_warning(thd, var->name, fixed1 || fixed2,\n                              value->is_unsigned(value), (longlong) orig);\n}\n\nstatic int check_func_str(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  const char *str;\n  int length;\n\n  length= sizeof(buff);\n  if ((str= value->val_str(value, buff, &length)))\n    str= thd->strmake(str, length);\n  *(const char**)save= str;\n  return 0;\n}\n\n\nstatic int check_func_enum(THD *thd, struct st_mysql_sys_var *var,\n                           void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE];\n  const char *str;\n  TYPELIB *typelib;\n  long long tmp;\n  long result;\n  int length;\n\n  if (var->flags & PLUGIN_VAR_THDLOCAL)\n    typelib= ((thdvar_enum_t*) var)->typelib;\n  else\n    typelib= ((sysvar_enum_t*) var)->typelib;\n\n  if (value->value_type(value) == MYSQL_VALUE_TYPE_STRING)\n  {\n    length= sizeof(buff);\n    if (!(str= value->val_str(value, buff, &length)))\n      goto err;\n    if ((result= (long)find_type(typelib, str, length, 0) - 1) < 0)\n      goto err;\n  }\n  else\n  {\n    if (value->val_int(value, &tmp))\n      goto err;\n    if (tmp < 0 || tmp >= typelib->count)\n      goto err;\n    result= (long) tmp;\n  }\n  *(long*)save= result;\n  return 0;\nerr:\n  return 1;\n}\n\n\nstatic int check_func_set(THD *thd, struct st_mysql_sys_var *var,\n                          void *save, st_mysql_value *value)\n{\n  char buff[STRING_BUFFER_USUAL_SIZE], *error= 0;\n  const char *str;\n  TYPELIB *typelib;\n  ulonglong result;\n  uint error_len= 0;                            // init as only set on error\n  bool not_used;\n  int length;\n\n  if (var->flags & PLUGIN_VAR_THDLOCAL)\n    typelib= ((thdvar_set_t*) var)->typelib;\n  else\n    typelib= ((sysvar_set_t*)var)->typelib;\n\n  if (value->value_type(value) == MYSQL_VALUE_TYPE_STRING)\n  {\n    length= sizeof(buff);\n    if (!(str= value->val_str(value, buff, &length)))\n      goto err;\n    result= find_set(typelib, str, length, NULL,\n                     &error, &error_len, &not_used);\n    if (error_len)\n      goto err;\n  }\n  else\n  {\n    if (value->val_int(value, (long long *)&result))\n      goto err;\n    if (unlikely((result >= (1ULL << typelib->count)) &&\n                 (typelib->count < sizeof(long)*8)))\n      goto err;\n  }\n  *(ulonglong*)save= result;\n  return 0;\nerr:\n  return 1;\n}\n\nstatic int check_func_double(THD *thd, struct st_mysql_sys_var *var,\n                             void *save, st_mysql_value *value)\n{\n  double v;\n  my_bool fixed;\n  struct my_option option;\n\n  value->val_real(value, &v);\n  plugin_opt_set_limits(&option, var);\n  *(double *) save= getopt_double_limit_value(v, &option, &fixed);\n\n  return throw_bounds_warning(thd, var->name, fixed, v);\n}\n\n\nstatic void update_func_bool(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(my_bool *) tgt= *(my_bool *) save ? TRUE : FALSE;\n}\n\n\nstatic void update_func_int(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(int *)tgt= *(int *) save;\n}\n\n\nstatic void update_func_long(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(long *)tgt= *(long *) save;\n}\n\n\nstatic void update_func_longlong(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(longlong *)tgt= *(ulonglong *) save;\n}\n\n\nstatic void update_func_str(THD *thd, struct st_mysql_sys_var *var,\n                             void *tgt, const void *save)\n{\n  *(char **) tgt= *(char **) save;\n}\n\nstatic void update_func_double(THD *thd, struct st_mysql_sys_var *var,\n                               void *tgt, const void *save)\n{\n  *(double *) tgt= *(double *) save;\n}\n\n/****************************************************************************\n  System Variables support\n****************************************************************************/\n\n\nsys_var *find_sys_var(THD *thd, const char *str, uint length)\n{\n  sys_var *var;\n  sys_var_pluginvar *pi= NULL;\n  plugin_ref plugin;\n  DBUG_ENTER(\"find_sys_var\");\n\n  mysql_mutex_lock(&LOCK_plugin);\n  mysql_rwlock_rdlock(&LOCK_system_variables_hash);\n  if ((var= intern_find_sys_var(str, length)) &&\n      (pi= var->cast_pluginvar()))\n  {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    LEX *lex= thd ? thd->lex : 0;\n    if (!(plugin= my_intern_plugin_lock(lex, plugin_int_to_ref(pi->plugin))))\n      var= NULL; /* failed to lock it, it must be uninstalling */\n    else\n    if (!(plugin_state(plugin) & PLUGIN_IS_READY))\n    {\n      /* initialization not completed */\n      var= NULL;\n      intern_plugin_unlock(lex, plugin);\n    }\n  }\n  else\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  if (!var)\n    my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), (char*) str);\n  DBUG_RETURN(var);\n}\n\n\n/*\n  called by register_var, construct_options and test_plugin_options.\n  Returns the 'bookmark' for the named variable.\n  LOCK_system_variables_hash should be at least read locked\n*/\nstatic st_bookmark *find_bookmark(const char *plugin, const char *name,\n                                  int flags)\n{\n  st_bookmark *result= NULL;\n  uint namelen, length, pluginlen= 0;\n  char *varname, *p;\n\n  if (!(flags & PLUGIN_VAR_THDLOCAL))\n    return NULL;\n\n  namelen= strlen(name);\n  if (plugin)\n    pluginlen= strlen(plugin) + 1;\n  length= namelen + pluginlen + 2;\n  varname= (char*) my_alloca(length);\n\n  if (plugin)\n  {\n    strxmov(varname + 1, plugin, \"_\", name, NullS);\n    for (p= varname + 1; *p; p++)\n      if (*p == '-')\n        *p= '_';\n  }\n  else\n    memcpy(varname + 1, name, namelen + 1);\n\n  varname[0]= flags & PLUGIN_VAR_TYPEMASK;\n\n  result= (st_bookmark*) my_hash_search(&bookmark_hash,\n                                        (const uchar*) varname, length - 1);\n\n  my_afree(varname);\n  return result;\n}\n\n\n/*\n  returns a bookmark for thd-local variables, creating if neccessary.\n  returns null for non thd-local variables.\n  Requires that a write lock is obtained on LOCK_system_variables_hash\n*/\nstatic st_bookmark *register_var(const char *plugin, const char *name,\n                                 int flags)\n{\n  uint length= strlen(plugin) + strlen(name) + 3, size= 0, offset, new_size;\n  st_bookmark *result;\n  char *varname, *p;\n\n  if (!(flags & PLUGIN_VAR_THDLOCAL))\n    return NULL;\n\n  switch (flags & PLUGIN_VAR_TYPEMASK) {\n  case PLUGIN_VAR_BOOL:\n    size= sizeof(my_bool);\n    break;\n  case PLUGIN_VAR_INT:\n    size= sizeof(int);\n    break;\n  case PLUGIN_VAR_LONG:\n  case PLUGIN_VAR_ENUM:\n    size= sizeof(long);\n    break;\n  case PLUGIN_VAR_LONGLONG:\n  case PLUGIN_VAR_SET:\n    size= sizeof(ulonglong);\n    break;\n  case PLUGIN_VAR_STR:\n    size= sizeof(char*);\n    break;\n  case PLUGIN_VAR_DOUBLE:\n    size= sizeof(double);\n    break;\n  default:\n    DBUG_ASSERT(0);\n    return NULL;\n  };\n\n  varname= ((char*) my_alloca(length));\n  strxmov(varname + 1, plugin, \"_\", name, NullS);\n  for (p= varname + 1; *p; p++)\n    if (*p == '-')\n      *p= '_';\n\n  if (!(result= find_bookmark(NULL, varname + 1, flags)))\n  {\n    result= (st_bookmark*) alloc_root(&plugin_mem_root,\n                                      sizeof(struct st_bookmark) + length-1);\n    varname[0]= flags & PLUGIN_VAR_TYPEMASK;\n    memcpy(result->key, varname, length);\n    result->name_len= length - 2;\n    result->offset= -1;\n\n    DBUG_ASSERT(size && !(size & (size-1))); /* must be power of 2 */\n\n    offset= global_system_variables.dynamic_variables_size;\n    offset= (offset + size - 1) & ~(size - 1);\n    result->offset= (int) offset;\n\n    new_size= (offset + size + 63) & ~63;\n\n    if (new_size > global_variables_dynamic_size)\n    {\n      global_system_variables.dynamic_variables_ptr= (char*)\n        my_realloc(global_system_variables.dynamic_variables_ptr, new_size,\n                   MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n      max_system_variables.dynamic_variables_ptr= (char*)\n        my_realloc(max_system_variables.dynamic_variables_ptr, new_size,\n                   MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n      /*\n        Clear the new variable value space. This is required for string\n        variables. If their value is non-NULL, it must point to a valid\n        string.\n      */\n      memset(global_system_variables.dynamic_variables_ptr +\n             global_variables_dynamic_size, 0, \n             new_size - global_variables_dynamic_size);\n      memset(max_system_variables.dynamic_variables_ptr +\n             global_variables_dynamic_size, 0,\n             new_size - global_variables_dynamic_size);\n      global_variables_dynamic_size= new_size;\n    }\n\n    global_system_variables.dynamic_variables_head= offset;\n    max_system_variables.dynamic_variables_head= offset;\n    global_system_variables.dynamic_variables_size= offset + size;\n    max_system_variables.dynamic_variables_size= offset + size;\n    global_system_variables.dynamic_variables_version++;\n    max_system_variables.dynamic_variables_version++;\n\n    result->version= global_system_variables.dynamic_variables_version;\n\n    /* this should succeed because we have already checked if a dup exists */\n    if (my_hash_insert(&bookmark_hash, (uchar*) result))\n    {\n      fprintf(stderr, \"failed to add placeholder to hash\");\n      DBUG_ASSERT(0);\n    }\n  }\n  my_afree(varname);\n  return result;\n}\n\nstatic void restore_pluginvar_names(sys_var *first)\n{\n  for (sys_var *var= first; var; var= var->next)\n  {\n    sys_var_pluginvar *pv= var->cast_pluginvar();\n    pv->plugin_var->name= pv->orig_pluginvar_name;\n  }\n}\n\n\n/*\n  returns a pointer to the memory which holds the thd-local variable or\n  a pointer to the global variable if thd==null.\n  If required, will sync with global variables if the requested variable\n  has not yet been allocated in the current thread.\n*/\nstatic uchar *intern_sys_var_ptr(THD* thd, int offset, bool global_lock)\n{\n  DBUG_ASSERT(offset >= 0);\n  DBUG_ASSERT((uint)offset <= global_system_variables.dynamic_variables_head);\n\n  if (!thd)\n    return (uchar*) global_system_variables.dynamic_variables_ptr + offset;\n\n  /*\n    dynamic_variables_head points to the largest valid offset\n  */\n  if (!thd->variables.dynamic_variables_ptr ||\n      (uint)offset > thd->variables.dynamic_variables_head)\n  {\n    uint idx;\n\n    mysql_rwlock_rdlock(&LOCK_system_variables_hash);\n\n    thd->variables.dynamic_variables_ptr= (char*)\n      my_realloc(thd->variables.dynamic_variables_ptr,\n                 global_variables_dynamic_size,\n                 MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n\n    if (global_lock)\n      mysql_mutex_lock(&LOCK_global_system_variables);\n\n    mysql_mutex_assert_owner(&LOCK_global_system_variables);\n\n    memcpy(thd->variables.dynamic_variables_ptr +\n             thd->variables.dynamic_variables_size,\n           global_system_variables.dynamic_variables_ptr +\n             thd->variables.dynamic_variables_size,\n           global_system_variables.dynamic_variables_size -\n             thd->variables.dynamic_variables_size);\n\n    /*\n      now we need to iterate through any newly copied 'defaults'\n      and if it is a string type with MEMALLOC flag, we need to strdup\n    */\n    for (idx= 0; idx < bookmark_hash.records; idx++)\n    {\n      sys_var_pluginvar *pi;\n      sys_var *var;\n      st_bookmark *v= (st_bookmark*) my_hash_element(&bookmark_hash,idx);\n\n      if (v->version <= thd->variables.dynamic_variables_version ||\n          !(var= intern_find_sys_var(v->key + 1, v->name_len)) ||\n          !(pi= var->cast_pluginvar()) ||\n          v->key[0] != (pi->plugin_var->flags & PLUGIN_VAR_TYPEMASK))\n        continue;\n\n      /* Here we do anything special that may be required of the data types */\n\n      if ((pi->plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR &&\n          pi->plugin_var->flags & PLUGIN_VAR_MEMALLOC)\n      {\n         int varoff= *(int *) (pi->plugin_var + 1);\n         char **thdvar= (char **) (thd->variables.\n                                   dynamic_variables_ptr + varoff);\n         char **sysvar= (char **) (global_system_variables.\n                                   dynamic_variables_ptr + varoff);\n         *thdvar= NULL;\n         plugin_var_memalloc_session_update(thd, NULL, thdvar, *sysvar);\n      }\n    }\n\n    if (global_lock)\n      mysql_mutex_unlock(&LOCK_global_system_variables);\n\n    thd->variables.dynamic_variables_version=\n           global_system_variables.dynamic_variables_version;\n    thd->variables.dynamic_variables_head=\n           global_system_variables.dynamic_variables_head;\n    thd->variables.dynamic_variables_size=\n           global_system_variables.dynamic_variables_size;\n\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  }\n  return (uchar*)thd->variables.dynamic_variables_ptr + offset;\n}\n\n\n/**\n  For correctness and simplicity's sake, a pointer to a function\n  must be compatible with pointed-to type, that is, the return and\n  parameters types must be the same. Thus, a callback function is\n  defined for each scalar type. The functions are assigned in\n  construct_options to their respective types.\n*/\n\nstatic char *mysql_sys_var_char(THD* thd, int offset)\n{\n  return (char *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic int *mysql_sys_var_int(THD* thd, int offset)\n{\n  return (int *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic long *mysql_sys_var_long(THD* thd, int offset)\n{\n  return (long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic unsigned long *mysql_sys_var_ulong(THD* thd, int offset)\n{\n  return (unsigned long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic long long *mysql_sys_var_longlong(THD* thd, int offset)\n{\n  return (long long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic unsigned long long *mysql_sys_var_ulonglong(THD* thd, int offset)\n{\n  return (unsigned long long *) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic char **mysql_sys_var_str(THD* thd, int offset)\n{\n  return (char **) intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic double *mysql_sys_var_double(THD* thd, int offset)\n{\n  return (double *) intern_sys_var_ptr(thd, offset, true);\n}\n\nvoid plugin_thdvar_init(THD *thd, bool enable_plugins)\n{\n  plugin_ref old_table_plugin= thd->variables.table_plugin;\n  plugin_ref old_temp_table_plugin= thd->variables.temp_table_plugin;\n  DBUG_ENTER(\"plugin_thdvar_init\");\n  \n  thd->variables.table_plugin= NULL;\n  thd->variables.temp_table_plugin= NULL;\n  cleanup_variables(thd, &thd->variables);\n  \n  thd->variables= global_system_variables;\n  thd->variables.table_plugin= NULL;\n  thd->variables.temp_table_plugin= NULL;\n\n  /* we are going to allocate these lazily */\n  thd->variables.dynamic_variables_version= 0;\n  thd->variables.dynamic_variables_size= 0;\n  thd->variables.dynamic_variables_ptr= 0;\n\n  if (enable_plugins)\n  {\n    mysql_mutex_lock(&LOCK_plugin);\n    thd->variables.table_plugin=\n      my_intern_plugin_lock(NULL, global_system_variables.table_plugin);\n    intern_plugin_unlock(NULL, old_table_plugin);\n    thd->variables.temp_table_plugin=\n      my_intern_plugin_lock(NULL, global_system_variables.temp_table_plugin);\n    intern_plugin_unlock(NULL, old_temp_table_plugin);\n    mysql_mutex_unlock(&LOCK_plugin);\n  }\n  DBUG_VOID_RETURN;\n}\n\n\n/*\n  Unlocks all system variables which hold a reference\n*/\nstatic void unlock_variables(THD *thd, struct system_variables *vars)\n{\n  intern_plugin_unlock(NULL, vars->table_plugin);\n  intern_plugin_unlock(NULL, vars->temp_table_plugin);\n  vars->table_plugin= NULL;\n  vars->temp_table_plugin= NULL;\n}\n\n\n/*\n  Frees memory used by system variables\n\n  Unlike plugin_vars_free_values() it frees all variables of all plugins,\n  it's used on shutdown.\n*/\nstatic void cleanup_variables(THD *thd, struct system_variables *vars)\n{\n  if (thd)\n    plugin_var_memalloc_free(&thd->variables);\n\n  DBUG_ASSERT(vars->table_plugin == NULL);\n  DBUG_ASSERT(vars->temp_table_plugin == NULL);\n\n  my_free(vars->dynamic_variables_ptr);\n  vars->dynamic_variables_ptr= NULL;\n  vars->dynamic_variables_size= 0;\n  vars->dynamic_variables_version= 0;\n}\n\n\nvoid plugin_thdvar_cleanup(THD *thd)\n{\n  uint idx;\n  plugin_ref *list;\n  DBUG_ENTER(\"plugin_thdvar_cleanup\");\n\n  mysql_mutex_lock(&LOCK_plugin);\n\n  unlock_variables(thd, &thd->variables);\n  cleanup_variables(thd, &thd->variables);\n\n  if ((idx= thd->lex->plugins.elements))\n  {\n    list= ((plugin_ref*) thd->lex->plugins.buffer) + idx - 1;\n    DBUG_PRINT(\"info\",(\"unlocking %d plugins\", idx));\n    while ((uchar*) list >= thd->lex->plugins.buffer)\n      intern_plugin_unlock(thd->lex, *list--);\n  }\n\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  reset_dynamic(&thd->lex->plugins);\n\n  DBUG_VOID_RETURN;\n}\n\n\n/**\n  @brief Free values of thread variables of a plugin.\n\n  This must be called before a plugin is deleted. Otherwise its\n  variables are no longer accessible and the value space is lost. Note\n  that only string values with PLUGIN_VAR_MEMALLOC are allocated and\n  must be freed.\n\n  @param[in]        vars        Chain of system variables of a plugin\n*/\n\nstatic void plugin_vars_free_values(sys_var *vars)\n{\n  DBUG_ENTER(\"plugin_vars_free_values\");\n\n  for (sys_var *var= vars; var; var= var->next)\n  {\n    sys_var_pluginvar *piv= var->cast_pluginvar();\n    if (piv &&\n        ((piv->plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR) &&\n        (piv->plugin_var->flags & PLUGIN_VAR_MEMALLOC))\n    {\n      /* Free the string from global_system_variables. */\n      char **valptr= (char**) piv->real_value_ptr(NULL, OPT_GLOBAL);\n      DBUG_PRINT(\"plugin\", (\"freeing value for: '%s'  addr: 0x%lx\",\n                            var->name.str, (long) valptr));\n      my_free(*valptr);\n      *valptr= NULL;\n    }\n  }\n  DBUG_VOID_RETURN;\n}\n\nstatic SHOW_TYPE pluginvar_show_type(st_mysql_sys_var *plugin_var)\n{\n  switch (plugin_var->flags & PLUGIN_VAR_TYPEMASK) {\n  case PLUGIN_VAR_BOOL:\n    return SHOW_MY_BOOL;\n  case PLUGIN_VAR_INT:\n    return SHOW_INT;\n  case PLUGIN_VAR_LONG:\n    return SHOW_LONG;\n  case PLUGIN_VAR_LONGLONG:\n    return SHOW_LONGLONG;\n  case PLUGIN_VAR_STR:\n    return SHOW_CHAR_PTR;\n  case PLUGIN_VAR_ENUM:\n  case PLUGIN_VAR_SET:\n    return SHOW_CHAR;\n  case PLUGIN_VAR_DOUBLE:\n    return SHOW_DOUBLE;\n  default:\n    DBUG_ASSERT(0);\n    return SHOW_UNDEF;\n  }\n}\n\n\n/**\n  Set value for thread local variable with PLUGIN_VAR_MEMALLOC flag.\n\n  @param[in]     thd   Thread context.\n  @param[in]     var   Plugin variable.\n  @param[in,out] dest  Destination memory pointer.\n  @param[in]     value '\\0'-terminated new value.\n\n  Most plugin variable values are stored on dynamic_variables_ptr.\n  Releasing memory occupied by these values is as simple as freeing\n  dynamic_variables_ptr.\n\n  An exception to the rule are PLUGIN_VAR_MEMALLOC variables, which\n  are stored on individual memory hunks. All of these hunks has to\n  be freed when it comes to cleanup.\n\n  It may happen that a plugin was uninstalled and descriptors of\n  it's variables are lost. In this case it is impossible to locate\n  corresponding values.\n\n  In addition to allocating and setting variable value, new element\n  is added to dynamic_variables_allocs list. When thread is done, it\n  has to call plugin_var_memalloc_free() to release memory used by\n  PLUGIN_VAR_MEMALLOC variables.\n\n  If var is NULL, variable update function is not called. This is\n  needed when we take snapshot of system variables during thread\n  initialization.\n\n  @note List element and variable value are stored on the same memory\n  hunk. List element is followed by variable value.\n\n  @return Completion status\n  @retval false Success\n  @retval true  Failure\n*/\n\nstatic bool plugin_var_memalloc_session_update(THD *thd,\n                                               struct st_mysql_sys_var *var,\n                                               char **dest, const char *value)\n\n{\n  LIST *old_element= NULL;\n  struct system_variables *vars= &thd->variables;\n  DBUG_ENTER(\"plugin_var_memalloc_session_update\");\n\n  if (value)\n  {\n    size_t length= strlen(value) + 1;\n    LIST *element;\n    if (!(element= (LIST *) my_malloc(sizeof(LIST) + length, MYF(MY_WME))))\n      DBUG_RETURN(true);\n    memcpy(element + 1, value, length);\n    value= (const char *) (element + 1);\n    vars->dynamic_variables_allocs= list_add(vars->dynamic_variables_allocs,\n                                             element);\n  }\n\n  if (*dest)\n    old_element= (LIST *) (*dest - sizeof(LIST));\n\n  if (var)\n    var->update(thd, var, (void **) dest, (const void *) &value);\n  else\n    *dest= (char *) value;\n\n  if (old_element)\n  {\n    vars->dynamic_variables_allocs= list_delete(vars->dynamic_variables_allocs,\n                                                old_element);\n    my_free(old_element);\n  }\n  DBUG_RETURN(false);\n}\n\n\n/**\n  Free all elements allocated by plugin_var_memalloc_session_update().\n\n  @param[in]     vars  system variables structure\n\n  @see plugin_var_memalloc_session_update\n*/\n\nstatic void plugin_var_memalloc_free(struct system_variables *vars)\n{\n  LIST *next, *root;\n  DBUG_ENTER(\"plugin_var_memalloc_free\");\n  for (root= vars->dynamic_variables_allocs; root; root= next)\n  {\n    next= root->next;\n    my_free(root);\n  }\n  vars->dynamic_variables_allocs= NULL;\n  DBUG_VOID_RETURN;\n}\n\n\n/**\n  Set value for global variable with PLUGIN_VAR_MEMALLOC flag.\n\n  @param[in]     thd   Thread context.\n  @param[in]     var   Plugin variable.\n  @param[in,out] dest  Destination memory pointer.\n  @param[in]     value '\\0'-terminated new value.\n\n  @return Completion status\n  @retval false Success\n  @retval true  Failure\n*/\n\nstatic bool plugin_var_memalloc_global_update(THD *thd,\n                                              struct st_mysql_sys_var *var,\n                                              char **dest, const char *value)\n{\n  char *old_value= *dest;\n  DBUG_ENTER(\"plugin_var_memalloc_global_update\");\n\n  if (value && !(value= my_strdup(value, MYF(MY_WME))))\n    DBUG_RETURN(true);\n\n  var->update(thd, var, (void **) dest, (const void *) &value);\n\n  if (old_value)\n    my_free(old_value);\n\n  DBUG_RETURN(false);\n}\n\n\nbool sys_var_pluginvar::check_update_type(Item_result type)\n{\n  switch (plugin_var->flags & PLUGIN_VAR_TYPEMASK) {\n  case PLUGIN_VAR_INT:\n  case PLUGIN_VAR_LONG:\n  case PLUGIN_VAR_LONGLONG:\n    return type != INT_RESULT;\n  case PLUGIN_VAR_STR:\n    return type != STRING_RESULT;\n  case PLUGIN_VAR_ENUM:\n  case PLUGIN_VAR_BOOL:\n  case PLUGIN_VAR_SET:\n    return type != STRING_RESULT && type != INT_RESULT;\n  case PLUGIN_VAR_DOUBLE:\n    return type != INT_RESULT && type != REAL_RESULT && type != DECIMAL_RESULT;\n  default:\n    return true;\n  }\n}\n\n\nuchar* sys_var_pluginvar::real_value_ptr(THD *thd, enum_var_type type)\n{\n  DBUG_ASSERT(thd || (type == OPT_GLOBAL));\n  if (plugin_var->flags & PLUGIN_VAR_THDLOCAL)\n  {\n    if (type == OPT_GLOBAL)\n      thd= NULL;\n\n    return intern_sys_var_ptr(thd, *(int*) (plugin_var+1), false);\n  }\n  return *(uchar**) (plugin_var+1);\n}\n\n\nTYPELIB* sys_var_pluginvar::plugin_var_typelib(void)\n{\n  switch (plugin_var->flags & (PLUGIN_VAR_TYPEMASK | PLUGIN_VAR_THDLOCAL)) {\n  case PLUGIN_VAR_ENUM:\n    return ((sysvar_enum_t *)plugin_var)->typelib;\n  case PLUGIN_VAR_SET:\n    return ((sysvar_set_t *)plugin_var)->typelib;\n  case PLUGIN_VAR_ENUM | PLUGIN_VAR_THDLOCAL:\n    return ((thdvar_enum_t *)plugin_var)->typelib;\n  case PLUGIN_VAR_SET | PLUGIN_VAR_THDLOCAL:\n    return ((thdvar_set_t *)plugin_var)->typelib;\n  default:\n    return NULL;\n  }\n  return NULL;\t/* Keep compiler happy */\n}\n\n\nuchar* sys_var_pluginvar::do_value_ptr(THD *thd, enum_var_type type,\n                                       LEX_STRING *base)\n{\n  uchar* result;\n\n  result= real_value_ptr(thd, type);\n\n  if ((plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_ENUM)\n    result= (uchar*) get_type(plugin_var_typelib(), *(ulong*)result);\n  else if ((plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_SET)\n    result= (uchar*) set_to_string(thd, 0, *(ulonglong*) result,\n                                   plugin_var_typelib()->type_names);\n  return result;\n}\n\nbool sys_var_pluginvar::do_check(THD *thd, set_var *var)\n{\n  st_item_value_holder value;\n  DBUG_ASSERT(!is_readonly());\n  DBUG_ASSERT(plugin_var->check);\n\n  value.value_type= item_value_type;\n  value.val_str= item_val_str;\n  value.val_int= item_val_int;\n  value.val_real= item_val_real;\n  value.is_unsigned= item_is_unsigned;\n  value.item= var->value;\n\n  return plugin_var->check(thd, plugin_var, &var->save_result, &value);\n}\n\nbool sys_var_pluginvar::session_update(THD *thd, set_var *var)\n{\n  bool rc= false;\n  DBUG_ASSERT(!is_readonly());\n  DBUG_ASSERT(plugin_var->flags & PLUGIN_VAR_THDLOCAL);\n  DBUG_ASSERT(thd == current_thd);\n\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  void *tgt= real_value_ptr(thd, var->type);\n  const void *src= var->value ? (void*)&var->save_result\n                              : (void*)real_value_ptr(thd, OPT_GLOBAL);\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n\n  if ((plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR &&\n      plugin_var->flags & PLUGIN_VAR_MEMALLOC)\n    rc= plugin_var_memalloc_session_update(thd, plugin_var, (char **) tgt,\n                                           *(const char **) src);\n  else \n    plugin_var->update(thd, plugin_var, tgt, src);\n\n  return rc;\n}\n\nbool sys_var_pluginvar::global_update(THD *thd, set_var *var)\n{\n  bool rc= false;\n  DBUG_ASSERT(!is_readonly());\n  mysql_mutex_assert_owner(&LOCK_global_system_variables);\n\n  void *tgt= real_value_ptr(thd, var->type);\n  const void *src= &var->save_result;\n\n  if (!var->value)\n  {\n    switch (plugin_var->flags & (PLUGIN_VAR_TYPEMASK | PLUGIN_VAR_THDLOCAL)) {\n    case PLUGIN_VAR_INT:\n      src= &((sysvar_uint_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_LONG:\n      src= &((sysvar_ulong_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_LONGLONG:\n      src= &((sysvar_ulonglong_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_ENUM:\n      src= &((sysvar_enum_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_SET:\n      src= &((sysvar_set_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_BOOL:\n      src= &((sysvar_bool_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_STR:\n      src= &((sysvar_str_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_DOUBLE:\n      src= &((sysvar_double_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_INT | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_uint_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_LONG | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_ulong_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_ulonglong_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_ENUM | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_enum_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_SET | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_set_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_BOOL | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_bool_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_STR | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_str_t*) plugin_var)->def_val;\n      break;\n    case PLUGIN_VAR_DOUBLE | PLUGIN_VAR_THDLOCAL:\n      src= &((thdvar_double_t*) plugin_var)->def_val;\n      break;\n    default:\n      DBUG_ASSERT(0);\n    }\n  }\n\n  if ((plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR &&\n      plugin_var->flags & PLUGIN_VAR_MEMALLOC)\n    rc= plugin_var_memalloc_global_update(thd, plugin_var, (char **) tgt,\n                                          *(const char **) src);\n  else \n    plugin_var->update(thd, plugin_var, tgt, src);\n\n  return rc;\n}\n\n\n#define OPTION_SET_LIMITS(type, options, opt) \\\n  options->var_type= type; \\\n  options->def_value= (opt)->def_val; \\\n  options->min_value= (opt)->min_val; \\\n  options->max_value= (opt)->max_val; \\\n  options->block_size= (long) (opt)->blk_sz\n\n#define OPTION_SET_LIMITS_DOUBLE(options, opt) \\\n  options->var_type= GET_DOUBLE; \\\n  options->def_value= (longlong) getopt_double2ulonglong((opt)->def_val); \\\n  options->min_value= (longlong) getopt_double2ulonglong((opt)->min_val); \\\n  options->max_value= getopt_double2ulonglong((opt)->max_val); \\\n  options->block_size= (long) (opt)->blk_sz;\n\n\nstatic void plugin_opt_set_limits(struct my_option *options,\n                                  const struct st_mysql_sys_var *opt)\n{\n  options->sub_size= 0;\n\n  switch (opt->flags & (PLUGIN_VAR_TYPEMASK |\n                        PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL)) {\n  /* global system variables */\n  case PLUGIN_VAR_INT:\n    OPTION_SET_LIMITS(GET_INT, options, (sysvar_int_t*) opt);\n    break;\n  case PLUGIN_VAR_INT | PLUGIN_VAR_UNSIGNED:\n    OPTION_SET_LIMITS(GET_UINT, options, (sysvar_uint_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG:\n    OPTION_SET_LIMITS(GET_LONG, options, (sysvar_long_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG | PLUGIN_VAR_UNSIGNED:\n    OPTION_SET_LIMITS(GET_ULONG, options, (sysvar_ulong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG:\n    OPTION_SET_LIMITS(GET_LL, options, (sysvar_longlong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_UNSIGNED:\n    OPTION_SET_LIMITS(GET_ULL, options, (sysvar_ulonglong_t*) opt);\n    break;\n  case PLUGIN_VAR_ENUM:\n    options->var_type= GET_ENUM;\n    options->typelib= ((sysvar_enum_t*) opt)->typelib;\n    options->def_value= ((sysvar_enum_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= options->typelib->count - 1;\n    break;\n  case PLUGIN_VAR_SET:\n    options->var_type= GET_SET;\n    options->typelib= ((sysvar_set_t*) opt)->typelib;\n    options->def_value= ((sysvar_set_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= (1ULL << options->typelib->count) - 1;\n    break;\n  case PLUGIN_VAR_BOOL:\n    options->var_type= GET_BOOL;\n    options->def_value= ((sysvar_bool_t*) opt)->def_val;\n    break;\n  case PLUGIN_VAR_STR:\n    options->var_type= ((opt->flags & PLUGIN_VAR_MEMALLOC) ?\n                        GET_STR_ALLOC : GET_STR);\n    options->def_value= (intptr) ((sysvar_str_t*) opt)->def_val;\n    break;\n  case PLUGIN_VAR_DOUBLE:\n    OPTION_SET_LIMITS_DOUBLE(options, (sysvar_double_t*) opt);\n    break;\n  /* threadlocal variables */\n  case PLUGIN_VAR_INT | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_INT, options, (thdvar_int_t*) opt);\n    break;\n  case PLUGIN_VAR_INT | PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_UINT, options, (thdvar_uint_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_LONG, options, (thdvar_long_t*) opt);\n    break;\n  case PLUGIN_VAR_LONG | PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_ULONG, options, (thdvar_ulong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_LL, options, (thdvar_longlong_t*) opt);\n    break;\n  case PLUGIN_VAR_LONGLONG | PLUGIN_VAR_UNSIGNED | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS(GET_ULL, options, (thdvar_ulonglong_t*) opt);\n    break;\n  case PLUGIN_VAR_DOUBLE | PLUGIN_VAR_THDLOCAL:\n    OPTION_SET_LIMITS_DOUBLE(options, (thdvar_double_t*) opt);\n    break;\n  case PLUGIN_VAR_ENUM | PLUGIN_VAR_THDLOCAL:\n    options->var_type= GET_ENUM;\n    options->typelib= ((thdvar_enum_t*) opt)->typelib;\n    options->def_value= ((thdvar_enum_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= options->typelib->count - 1;\n    break;\n  case PLUGIN_VAR_SET | PLUGIN_VAR_THDLOCAL:\n    options->var_type= GET_SET;\n    options->typelib= ((thdvar_set_t*) opt)->typelib;\n    options->def_value= ((thdvar_set_t*) opt)->def_val;\n    options->min_value= options->block_size= 0;\n    options->max_value= (1ULL << options->typelib->count) - 1;\n    break;\n  case PLUGIN_VAR_BOOL | PLUGIN_VAR_THDLOCAL:\n    options->var_type= GET_BOOL;\n    options->def_value= ((thdvar_bool_t*) opt)->def_val;\n    break;\n  case PLUGIN_VAR_STR | PLUGIN_VAR_THDLOCAL:\n    options->var_type= ((opt->flags & PLUGIN_VAR_MEMALLOC) ?\n                        GET_STR_ALLOC : GET_STR);\n    options->def_value= (intptr) ((thdvar_str_t*) opt)->def_val;\n    break;\n  default:\n    DBUG_ASSERT(0);\n  }\n  options->arg_type= REQUIRED_ARG;\n  if (opt->flags & PLUGIN_VAR_NOCMDARG)\n    options->arg_type= NO_ARG;\n  if (opt->flags & PLUGIN_VAR_OPCMDARG)\n    options->arg_type= OPT_ARG;\n}\n\nextern \"C\" my_bool get_one_plugin_option(int optid, const struct my_option *,\n                                         char *);\n\nmy_bool get_one_plugin_option(int optid MY_ATTRIBUTE((unused)),\n                              const struct my_option *opt,\n                              char *argument)\n{\n  return 0;\n}\n\n\n/**\n  Creates a set of my_option objects associated with a specified plugin-\n  handle.\n\n  @param mem_root Memory allocator to be used.\n  @param tmp A pointer to a plugin handle\n  @param[out] options A pointer to a pre-allocated static array\n\n  The set is stored in the pre-allocated static array supplied to the function.\n  The size of the array is calculated as (number_of_plugin_varaibles*2+3). The\n  reason is that each option can have a prefix '--plugin-' in addtion to the\n  shorter form '--&lt;plugin-name&gt;'. There is also space allocated for\n  terminating NULL pointers.\n\n  @return\n    @retval -1 An error occurred\n    @retval 0 Success\n*/\n\nstatic int construct_options(MEM_ROOT *mem_root, struct st_plugin_int *tmp,\n                             my_option *options)\n{\n  const char *plugin_name= tmp->plugin->name;\n  const LEX_STRING plugin_dash = { C_STRING_WITH_LEN(\"plugin-\") };\n  uint plugin_name_len= strlen(plugin_name);\n  uint optnamelen;\n  const int max_comment_len= 180;\n  char *comment= (char *) alloc_root(mem_root, max_comment_len + 1);\n  char *optname;\n\n  int index= 0, offset= 0;\n  st_mysql_sys_var *opt, **plugin_option;\n  st_bookmark *v;\n\n  /** Used to circumvent the const attribute on my_option::name */\n  char *plugin_name_ptr, *plugin_name_with_prefix_ptr;\n\n  DBUG_ENTER(\"construct_options\");\n\n  plugin_name_ptr= (char*) alloc_root(mem_root, plugin_name_len + 1);\n  strcpy(plugin_name_ptr, plugin_name);\n  my_casedn_str(&my_charset_latin1, plugin_name_ptr);\n  convert_underscore_to_dash(plugin_name_ptr, plugin_name_len);\n  plugin_name_with_prefix_ptr= (char*) alloc_root(mem_root,\n                                                  plugin_name_len +\n                                                  plugin_dash.length + 1);\n  strxmov(plugin_name_with_prefix_ptr, plugin_dash.str, plugin_name_ptr, NullS);\n\n  if (tmp->load_option != PLUGIN_FORCE &&\n      tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n  {\n    /* support --skip-plugin-foo syntax */\n    options[0].name= plugin_name_ptr;\n    options[1].name= plugin_name_with_prefix_ptr;\n    options[0].id= 0;\n    options[1].id= -1;\n    options[0].var_type= options[1].var_type= GET_ENUM;\n    options[0].arg_type= options[1].arg_type= OPT_ARG;\n    options[0].def_value= options[1].def_value= 1; /* ON */\n    options[0].typelib= options[1].typelib= &global_plugin_typelib;\n\n    strxnmov(comment, max_comment_len, \"Enable or disable \", plugin_name,\n            \" plugin. Possible values are ON, OFF, FORCE (don't start \"\n            \"if the plugin fails to load).\", NullS);\n    options[0].comment= comment;\n    /*\n      Allocate temporary space for the value of the tristate.\n      This option will have a limited lifetime and is not used beyond\n      server initialization.\n      GET_ENUM value is an unsigned long integer.\n    */\n    options[0].value= options[1].value=\n                      (uchar **)alloc_root(mem_root, sizeof(ulong));\n    *((ulong*) options[0].value)= (ulong) options[0].def_value;\n\n    options+= 2;\n  }\n\n  if (!my_strcasecmp(&my_charset_latin1, plugin_name_ptr, \"NDBCLUSTER\"))\n  {\n    plugin_name_ptr= const_cast<char*>(\"ndb\"); // Use legacy \"ndb\" prefix\n    plugin_name_len= 3;\n  }\n\n  /*\n    Two passes as the 2nd pass will take pointer addresses for use\n    by my_getopt and register_var() in the first pass uses realloc\n  */\n\n  for (plugin_option= tmp->plugin->system_vars;\n       plugin_option && *plugin_option; plugin_option++, index++)\n  {\n    opt= *plugin_option;\n    if (!(opt->flags & PLUGIN_VAR_THDLOCAL))\n      continue;\n    if (!(register_var(plugin_name_ptr, opt->name, opt->flags)))\n      continue;\n    switch (opt->flags & PLUGIN_VAR_TYPEMASK) {\n    case PLUGIN_VAR_BOOL:\n      ((thdvar_bool_t *) opt)->resolve= mysql_sys_var_char;\n      break;\n    case PLUGIN_VAR_INT:\n      ((thdvar_int_t *) opt)->resolve= mysql_sys_var_int;\n      break;\n    case PLUGIN_VAR_LONG:\n      ((thdvar_long_t *) opt)->resolve= mysql_sys_var_long;\n      break;\n    case PLUGIN_VAR_LONGLONG:\n      ((thdvar_longlong_t *) opt)->resolve= mysql_sys_var_longlong;\n      break;\n    case PLUGIN_VAR_STR:\n      ((thdvar_str_t *) opt)->resolve= mysql_sys_var_str;\n      break;\n    case PLUGIN_VAR_ENUM:\n      ((thdvar_enum_t *) opt)->resolve= mysql_sys_var_ulong;\n      break;\n    case PLUGIN_VAR_SET:\n      ((thdvar_set_t *) opt)->resolve= mysql_sys_var_ulonglong;\n      break;\n    case PLUGIN_VAR_DOUBLE:\n      ((thdvar_double_t *) opt)->resolve= mysql_sys_var_double;\n      break;\n    default:\n      sql_print_error(\"Unknown variable type code 0x%x in plugin '%s'.\",\n                      opt->flags, plugin_name);\n      DBUG_RETURN(-1);\n    };\n  }\n\n  for (plugin_option= tmp->plugin->system_vars;\n       plugin_option && *plugin_option; plugin_option++, index++)\n  {\n    switch ((opt= *plugin_option)->flags & PLUGIN_VAR_TYPEMASK) {\n    case PLUGIN_VAR_BOOL:\n      if (!opt->check)\n        opt->check= check_func_bool;\n      if (!opt->update)\n        opt->update= update_func_bool;\n      break;\n    case PLUGIN_VAR_INT:\n      if (!opt->check)\n        opt->check= check_func_int;\n      if (!opt->update)\n        opt->update= update_func_int;\n      break;\n    case PLUGIN_VAR_LONG:\n      if (!opt->check)\n        opt->check= check_func_long;\n      if (!opt->update)\n        opt->update= update_func_long;\n      break;\n    case PLUGIN_VAR_LONGLONG:\n      if (!opt->check)\n        opt->check= check_func_longlong;\n      if (!opt->update)\n        opt->update= update_func_longlong;\n      break;\n    case PLUGIN_VAR_STR:\n      if (!opt->check)\n        opt->check= check_func_str;\n      if (!opt->update)\n      {\n        opt->update= update_func_str;\n        if (!(opt->flags & (PLUGIN_VAR_MEMALLOC | PLUGIN_VAR_READONLY)))\n        {\n          opt->flags|= PLUGIN_VAR_READONLY;\n          sql_print_warning(\"Server variable %s of plugin %s was forced \"\n                            \"to be read-only: string variable without \"\n                            \"update_func and PLUGIN_VAR_MEMALLOC flag\",\n                            opt->name, plugin_name);\n        }\n      }\n      break;\n    case PLUGIN_VAR_ENUM:\n      if (!opt->check)\n        opt->check= check_func_enum;\n      if (!opt->update)\n        opt->update= update_func_long;\n      break;\n    case PLUGIN_VAR_SET:\n      if (!opt->check)\n        opt->check= check_func_set;\n      if (!opt->update)\n        opt->update= update_func_longlong;\n      break;\n    case PLUGIN_VAR_DOUBLE:\n      if (!opt->check)\n        opt->check= check_func_double;\n      if (!opt->update)\n        opt->update= update_func_double;\n      break;\n    default:\n      sql_print_error(\"Unknown variable type code 0x%x in plugin '%s'.\",\n                      opt->flags, plugin_name);\n      DBUG_RETURN(-1);\n    }\n\n    if ((opt->flags & (PLUGIN_VAR_NOCMDOPT | PLUGIN_VAR_THDLOCAL))\n                    == PLUGIN_VAR_NOCMDOPT)\n      continue;\n\n    if (!opt->name)\n    {\n      sql_print_error(\"Missing variable name in plugin '%s'.\",\n                      plugin_name);\n      DBUG_RETURN(-1);\n    }\n\n    if (!(opt->flags & PLUGIN_VAR_THDLOCAL))\n    {\n      optnamelen= strlen(opt->name);\n      optname= (char*) alloc_root(mem_root, plugin_name_len + optnamelen + 2);\n      strxmov(optname, plugin_name_ptr, \"-\", opt->name, NullS);\n      optnamelen= plugin_name_len + optnamelen + 1;\n    }\n    else\n    {\n      /* this should not fail because register_var should create entry */\n      if (!(v= find_bookmark(plugin_name_ptr, opt->name, opt->flags)))\n      {\n        sql_print_error(\"Thread local variable '%s' not allocated \"\n                        \"in plugin '%s'.\", opt->name, plugin_name);\n        DBUG_RETURN(-1);\n      }\n\n      *(int*)(opt + 1)= offset= v->offset;\n\n      if (opt->flags & PLUGIN_VAR_NOCMDOPT)\n        continue;\n\n      optname= (char*) memdup_root(mem_root, v->key + 1, \n                                   (optnamelen= v->name_len) + 1);\n    }\n\n    convert_underscore_to_dash(optname, optnamelen);\n\n    options->name= optname;\n    options->comment= opt->comment;\n    options->app_type= opt;\n    options->id= 0;\n\n    plugin_opt_set_limits(options, opt);\n\n    if (opt->flags & PLUGIN_VAR_THDLOCAL)\n      options->value= options->u_max_value= (uchar**)\n        (global_system_variables.dynamic_variables_ptr + offset);\n    else\n      options->value= options->u_max_value= *(uchar***) (opt + 1);\n\n    char *option_name_ptr;\n    options[1]= options[0];\n    options[1].id= -1;\n    options[1].name= option_name_ptr= (char*) alloc_root(mem_root,\n                                                        plugin_dash.length +\n                                                        optnamelen + 1);\n    options[1].comment= 0; /* Hidden from the help text */\n    strxmov(option_name_ptr, plugin_dash.str, optname, NullS);\n\n    options+= 2;\n  }\n\n  DBUG_RETURN(0);\n}\n\n\nstatic my_option *construct_help_options(MEM_ROOT *mem_root,\n                                         struct st_plugin_int *p)\n{\n  st_mysql_sys_var **opt;\n  my_option *opts;\n  uint count= EXTRA_OPTIONS;\n  DBUG_ENTER(\"construct_help_options\");\n\n  for (opt= p->plugin->system_vars; opt && *opt; opt++, count+= 2)\n    ;\n\n  if (!(opts= (my_option*) alloc_root(mem_root, sizeof(my_option) * count)))\n    DBUG_RETURN(NULL);\n\n  memset(opts, 0, sizeof(my_option) * count);\n\n  /**\n    some plugin variables (those that don't have PLUGIN_VAR_NOSYSVAR flag)\n    have their names prefixed with the plugin name. Restore the names here\n    to get the correct (not double-prefixed) help text.\n    We won't need @@sysvars anymore and don't care about their proper names.\n  */\n  restore_pluginvar_names(p->system_vars);\n\n  if (construct_options(mem_root, p, opts))\n    DBUG_RETURN(NULL);\n\n  DBUG_RETURN(opts);\n}\n\n\n/**\n  Check option being used and raise deprecation warning if required.\n\n  @param optid ID of the option that was passed through command line\n  @param opt List of options\n  @argument Status of the option : Enable or Disable\n\n  A deprecation warning will be raised if --plugin-xxx type of option\n  is used.\n\n  @return Always returns success as purpose of the function is to raise\n  warning only.\n  @retval 0 Success\n*/\n\nstatic my_bool check_if_option_is_deprecated(int optid,\n                                             const struct my_option *opt,\n                                             char *argument MY_ATTRIBUTE((unused)))\n{\n  if (optid == -1)\n  {\n    WARN_DEPRECATED(NULL, opt->name, (opt->name + strlen(\"plugin-\")));\n  }\n  else if (!my_strcasecmp(&my_charset_latin1, opt->name, \"innodb\"))\n  {\n    sql_print_warning(\"The option innodb (skip-innodb) is deprecated and \"\n                      \"will be removed in a future release\");\n  }\n\n  return 0;\n}\n\n\n/**\n  Create and register system variables supplied from the plugin and\n  assigns initial values from corresponding command line arguments.\n\n  @param tmp_root Temporary scratch space\n  @param[out] plugin Internal plugin structure\n  @param argc Number of command line arguments\n  @param argv Command line argument vector\n\n  The plugin will be updated with a policy on how to handle errors during\n  initialization.\n\n  @note Requires that a write-lock is held on LOCK_system_variables_hash\n\n  @return How initialization of the plugin should be handled.\n    @retval  0 Initialization should proceed.\n    @retval  1 Plugin is disabled.\n    @retval -1 An error has occurred.\n*/\n\nstatic int test_plugin_options(MEM_ROOT *tmp_root, struct st_plugin_int *tmp,\n                               int *argc, char **argv)\n{\n  struct sys_var_chain chain= { NULL, NULL };\n  bool disable_plugin;\n  enum_plugin_load_option plugin_load_option= tmp->load_option;\n\n  MEM_ROOT *mem_root= alloc_root_inited(&tmp->mem_root) ?\n                      &tmp->mem_root : &plugin_mem_root;\n  st_mysql_sys_var **opt;\n  my_option *opts= NULL;\n  LEX_STRING plugin_name;\n  char *varname;\n  int error;\n  sys_var *v MY_ATTRIBUTE((unused));\n  struct st_bookmark *var;\n  uint len, count= EXTRA_OPTIONS;\n  DBUG_ENTER(\"test_plugin_options\");\n  DBUG_ASSERT(tmp->plugin && tmp->name.str);\n\n  /*\n    The 'federated' and 'ndbcluster' storage engines are always disabled by\n    default.\n  */\n  if (!(my_strcasecmp(&my_charset_latin1, tmp->name.str, \"federated\") &&\n      my_strcasecmp(&my_charset_latin1, tmp->name.str, \"ndbcluster\")))\n    plugin_load_option= PLUGIN_OFF;\n\n  for (opt= tmp->plugin->system_vars; opt && *opt; opt++)\n    count+= 2; /* --{plugin}-{optname} and --plugin-{plugin}-{optname} */\n\n  if (count > EXTRA_OPTIONS || (*argc > 1))\n  {\n    if (!(opts= (my_option*) alloc_root(tmp_root, sizeof(my_option) * count)))\n    {\n      sql_print_error(\"Out of memory for plugin '%s'.\", tmp->name.str);\n      DBUG_RETURN(-1);\n    }\n    memset(opts, 0, sizeof(my_option) * count);\n\n    if (construct_options(tmp_root, tmp, opts))\n    {\n      sql_print_error(\"Bad options for plugin '%s'.\", tmp->name.str);\n      DBUG_RETURN(-1);\n    }\n\n    /*\n      We adjust the default value to account for the hardcoded exceptions\n      we have set for the federated and ndbcluster storage engines.\n    */\n    if (tmp->load_option != PLUGIN_FORCE &&\n        tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n      opts[0].def_value= opts[1].def_value= plugin_load_option;\n\n    error= handle_options(argc, &argv, opts, check_if_option_is_deprecated);\n    (*argc)++; /* add back one for the program name */\n\n    if (error)\n    {\n       sql_print_error(\"Parsing options for plugin '%s' failed.\",\n                       tmp->name.str);\n       goto err;\n    }\n    /*\n     Set plugin loading policy from option value. First element in the option\n     list is always the <plugin name> option value.\n    */\n    if (tmp->load_option != PLUGIN_FORCE &&\n        tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n      plugin_load_option= (enum_plugin_load_option) *(ulong*) opts[0].value;\n  }\n\n  disable_plugin= (plugin_load_option == PLUGIN_OFF);\n  tmp->load_option= plugin_load_option;\n\n  /*\n    If the plugin is disabled it should not be initialized.\n  */\n  if (disable_plugin)\n  {\n    if (log_warnings)\n      sql_print_information(\"Plugin '%s' is disabled.\",\n                            tmp->name.str);\n    if (opts)\n      my_cleanup_options(opts);\n    DBUG_RETURN(1);\n  }\n\n  if (!my_strcasecmp(&my_charset_latin1, tmp->name.str, \"NDBCLUSTER\"))\n  {\n    plugin_name.str= const_cast<char*>(\"ndb\"); // Use legacy \"ndb\" prefix\n    plugin_name.length= 3;\n  }\n  else\n    plugin_name= tmp->name;\n\n  error= 1;\n  for (opt= tmp->plugin->system_vars; opt && *opt; opt++)\n  {\n    st_mysql_sys_var *o;\n    if (((o= *opt)->flags & PLUGIN_VAR_NOSYSVAR))\n      continue;\n    if ((var= find_bookmark(plugin_name.str, o->name, o->flags)))\n      v= new (mem_root) sys_var_pluginvar(&chain, var->key + 1, o);\n    else\n    {\n      len= plugin_name.length + strlen(o->name) + 2;\n      varname= (char*) alloc_root(mem_root, len);\n      strxmov(varname, plugin_name.str, \"-\", o->name, NullS);\n      my_casedn_str(&my_charset_latin1, varname);\n      convert_dash_to_underscore(varname, len-1);\n      v= new (mem_root) sys_var_pluginvar(&chain, varname, o);\n    }\n    DBUG_ASSERT(v); /* check that an object was actually constructed */\n  } /* end for */\n  if (chain.first)\n  {\n    chain.last->next = NULL;\n    if (mysql_add_sys_var_chain(chain.first))\n    {\n      sql_print_error(\"Plugin '%s' has conflicting system variables\",\n                      tmp->name.str);\n      goto err;\n    }\n    tmp->system_vars= chain.first;\n  }\n  DBUG_RETURN(0);\n  \nerr:\n  if (opts)\n    my_cleanup_options(opts);\n  DBUG_RETURN(error);\n}\n\n\n/****************************************************************************\n  Help Verbose text with Plugin System Variables\n****************************************************************************/\n\n\nvoid add_plugin_options(std::vector<my_option> *options, MEM_ROOT *mem_root)\n{\n  struct st_plugin_int *p;\n  my_option *opt;\n\n  if (!initialized)\n    return;\n\n  for (uint idx= 0; idx < plugin_array.elements; idx++)\n  {\n    p= *dynamic_element(&plugin_array, idx, struct st_plugin_int **);\n\n    if (!(opt= construct_help_options(mem_root, p)))\n      continue;\n\n    /* Only options with a non-NULL comment are displayed in help text */\n    for (;opt->name; opt++)\n      if (opt->comment)\n        options->push_back(*opt);\n  }\n}\n\n/** \n  Searches for a correctly loaded plugin of a particular type by name\n\n  @param plugin   the name of the plugin we're looking for\n  @param type     type of the plugin (0-MYSQL_MAX_PLUGIN_TYPE_NUM)\n  @return plugin, or NULL if not found\n*/\nstruct st_plugin_int *plugin_find_by_type(LEX_STRING *plugin, int type)\n{\n  st_plugin_int *ret;\n  DBUG_ENTER(\"plugin_find_by_type\");\n\n  ret= plugin_find_internal(plugin, type);\n  DBUG_RETURN(ret && ret->state == PLUGIN_IS_READY ? ret : NULL);\n}\n\n\n/** \n  Locks the plugin strucutres so calls to plugin_find_inner can be issued.\n\n  Must be followed by unlock_plugin_data.\n*/\nint lock_plugin_data()\n{\n  DBUG_ENTER(\"lock_plugin_data\");\n  DBUG_RETURN(mysql_mutex_lock(&LOCK_plugin));\n}\n\n\n/** \n  Unlocks the plugin strucutres as locked by lock_plugin_data()\n*/\nint unlock_plugin_data()\n{\n  DBUG_ENTER(\"unlock_plugin_data\");\n  DBUG_RETURN(mysql_mutex_unlock(&LOCK_plugin));\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/innobase/include/ut0mem.h",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/src/common/logger/MSG00001.bin",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/src/ndbapi/NdbUtil.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/src/ndbapi/NdbUtil.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/src/kernel/blocks/new-block.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/src/kernel/blocks/dbdih/Dbdih.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/src/kernel/blocks/dbdict/Slave_AddTable.sfl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/include/ndbapi/NdbScanFilter.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/include/transporter/TransporterCallback.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/test/ndbapi/bank/BankLoad.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/test/include/getarg.h",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/storage/ndb/test/run-test/atrt-example.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql-bench/server-cfg.sh",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql-bench/crash-me.sh",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql-bench/limits/mysql-4.0.cfg",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql-bench/limits/mysql-4.1.cfg",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql-bench/Comments/postgres.benchmark",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/strings/decimal.c",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/strings/string.doc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/strings/ctype-latin1.c",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/strings/ctype-czech.c",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/packaging/WiX/AdminBackground.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/packaging/WiX/AdminHeader.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/packaging/WiX/MySQLServer.ico",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/packaging/WiX/mysqlcommandlineshell.ico",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/tests/fork2_test.pl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/tests/function.tst",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/tests/function.res",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/extra/yassl/taocrypt/benchmark/dsa1024.der",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/extra/yassl/taocrypt/benchmark/rsa1024.der",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/extra/yassl/taocrypt/benchmark/dh1024.der",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/extra/yassl/certs/client-cert.der",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/extra/yassl/certs/dsa1024.der",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/extra/yassl/certs/client-key.der",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/wl6219_55.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/wl6219_55.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/55_temporal.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug37631.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug49823.CSM",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/corrupt-relay-bin.000624",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/wl6219_41.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/wl6219_41.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/old_table-323.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug49823.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/14897.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/loaddata6.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/cluster_7022_table.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/55_temporal.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug16266.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug17532932.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug47205.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug17532932.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug48265.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/master-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug46565.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug48633.ARZ",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug47012.ARM",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/55_temporal.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug19371.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/wl6219_55_innodb.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/corrupt_t1#P#p1.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug48633.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/wl6219_55.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/wl6219_41.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug47012.ARZ",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/cluster_7022_table.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug48633.ARM",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug33029-slave-relay-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/binlog_savepoint.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug36055.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/trunc_binlog.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/binlog_transaction.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/binlog_transaction_with_GTID.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug47012.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug37631.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/corrupt_t1.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug36055.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug19371.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug40482-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug36055.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/binlog_transaction_with_anonymous_GTID.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug19371.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/vchar.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/bug46565.ARZ",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6_2.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6_3.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1TIMESTAMP.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p1_first_1024.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p2.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_blackhole.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p3.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p2.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p4.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/include/ctype_utf8mb4.inc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/include/subquery_sj.inc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/include/explain.inc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/include/func_in.inc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_be/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_be/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_be/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_be/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_be/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_be/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_le/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_le/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_le/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_le/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_le/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_undolog_le/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/bug54613/BACKUP-2.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/packed/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/packed/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/packed/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/backups/hashmap/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/r/ndb_types.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/r/ndb_grant.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb/t/ndb_grant.later",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/perfschema/r/misc.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/perfschema/r/statement_digest_charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/perfschema/t/statement_digest_charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/innodb_fts/r/fulltext.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/innodb_fts/t/fulltext.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/innodb_fts/t/fulltext_left_join.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/rpl/r/rpl_charset_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/rpl/r/rpl_charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/rpl/r/rpl_set_charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/rpl/t/rpl_row_mysqlbinlog.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/rpl/t/rpl_set_charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/rpl/t/rpl_charset_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/update-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/write-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-telco.001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/ver_5_1_17.001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/bug32407.001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/write-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/ver_trunk_row_v2.001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/bug11747887-bin.000003",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/ver_5_1_23.001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-wl2325_r.001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/update-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-wl2325_s.001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/std_data/binlog_old_version_4_1.000001",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_stm_ctype_cp932.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_row_ctype_cp932.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_gtid_mysqlbinlog_row_myisam.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_gtid_mysqlbinlog_row.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_mysqlbinlog_row_innodb.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_mysqlbinlog_row_myisam.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_mysqlbinlog_row.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/r/binlog_gtid_mysqlbinlog_row_innodb.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/binlog/t/binlog_mysqlbinlog-cp932.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/funcs_1/lib/DataGen_local.pl",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/funcs_1/r/memory_func_view.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/funcs_1/r/innodb_func_view.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/funcs_1/r/myisam_func_view.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/opt_trace/r/charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/opt_trace/t/charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0208_ucs2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0212_ucs2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0201_sjis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0208_ujis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis3.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0201_ujis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0212_ujis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/std_data/jisx0201_ucs2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/include/trim_sjis.inc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_rtrim_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_join_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_create_tbl_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_alter_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_join_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_create_db_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_trim_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_join_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_charset_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_create_tbl_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_ps_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_reverse_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_substring_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_insert_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_replace_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_replace_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_trim_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_substring_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_charlength_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_subquery_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_reverse_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_select_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_length_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_where_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_subquery_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_create_db_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_convert_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_insert_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_like_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_union_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_convert_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_right_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_trim_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_reverse_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_substring_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_subquery_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_update_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_alter_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_enum_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_like_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_replace_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_left_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_update_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_instr_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_alter_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_convert_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_length_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_ps_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_like_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_locate_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_charlength_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_rtrim_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_enum_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_right_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_create_db_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_enum_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_lpad_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_charlength_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_left_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_charset_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_rpad_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_left_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_locate_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_charset_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_lpad_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_ltrim_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_select_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_rtrim_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_select_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_where_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_lpad_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_create_tbl_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_update_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_locate_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_instr_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_where_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_rpad_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_instr_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_insert_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_ltrim_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_rpad_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_length_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_right_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/r/jp_ltrim_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_rpad_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_ps_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_left_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_alter_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_create_tbl_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_ps_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_charset_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_create_db_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_insert_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_join_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_enum_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_charlength_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_instr_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_update_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_substring_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_subquery_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_reverse_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_locate_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_create_tbl_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_locate_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_create_tbl_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_where_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_insert_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_join_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_union_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_instr_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_substring_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_subquery_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_convert_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_replace_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_like_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_left_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_select_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_enum_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_enum_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_join_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_length_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_insert_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_select_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_length_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_right_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_reverse_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_instr_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_alter_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_convert_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_subquery_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_charlength_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_rtrim_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_charset_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_convert_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_ltrim_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_like_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_where_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_lpad_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_create_db_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_lpad_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_rpad_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_like_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_right_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_locate_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_length_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_right_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_select_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_reverse_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_update_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_left_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_rtrim_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_charset_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_ltrim_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_rpad_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_rtrim_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_ltrim_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_trim_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_where_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_trim_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_replace_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_create_db_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_substring_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_lpad_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_charlength_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_replace_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_alter_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/jp/t/jp_update_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_index.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_column.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_table.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_older_compatibility1.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_column.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_older_compatibility1.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/t/rpl_temporary.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_index.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_table.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/iuds/r/strings_charsets_update_delete.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/engines/iuds/r/type_bit_iuds.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/collation_database_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_log_bin_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_quote_show_create_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/character_set_results_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_warnings_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/collation_server_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/pseudo_slave_mode_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_buffer_result_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_big_selects_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/collation_connection_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/innodb_table_locks_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_notes_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/character_set_connection_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/character_set_client_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/query_cache_wlock_invalidate_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/character_set_client_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/innodb_support_xa_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_safe_updates_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/sql_log_off_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/r/foreign_key_checks_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_log_bin_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_warnings_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_log_off_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_notes_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/character_set_results_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_buffer_result_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/character_set_client_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_safe_updates_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/character_set_connection_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_big_selects_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/collation_database_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/foreign_key_checks_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/sql_quote_show_create_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/innodb_table_locks_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/collation_server_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/pseudo_slave_mode_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/innodb_support_xa_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/query_cache_wlock_invalidate_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/sys_vars/t/collation_connection_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/innodb/r/innodb_bug11789106.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/innodb/t/portability_wl5980_linux.zip",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/innodb/t/portability_wl5980_windows.zip",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/suite/ndb_rpl/t/ndb_apply_status.frm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/extra/binlog_tests/ctype_cp932.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/extra/rpl_tests/rpl_charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_big5.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/alias.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_ucs.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_utf8mb4_innodb.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_utf8mb4_heap.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/mysql_cp932.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/type_set.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_in_mrr_cost.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/errors.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/show_check.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_collate.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/fulltext.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_utf8mb4.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/mysqldump.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/sp.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/cast.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_latin1_de.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/warnings.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/csv.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/query_cache.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/date_formats.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ddl_i18n_koi8r.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/binary.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/mysqltest.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ps.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_many.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_like.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_latin2.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/rowid_order_innodb.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_in_all.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_in_icp_mrr.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/type_decimal.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_latin1.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_utf8mb4_myisam.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/plugin_auth.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/log_tables.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_utf8.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/union.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_test.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_recoding.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/explain.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_tis620.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/outfile_loaddata.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_cp1250_ch.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/events_bugs.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_in_mrr.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/signal.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ddl_i18n_utf8.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_in_icp.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_in_none.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/alter_table.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_des_encrypt.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/type_enum.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/func_gconcat.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/ctype_cp1251.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/events_1.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/r/grant.result",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/type_set.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_big5.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_latin1.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_utf8.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/sp.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/union.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_ucs.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/cast.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/warnings.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/query_cache.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/func_like.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/errors.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/events_bugs.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/binary.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/mysql_cp932.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_recoding.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/func_gconcat.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/alias.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/fulltext.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_cp1251.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_latin1_de.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/events_1.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/func_test.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/explain.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ps.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_collate.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_utf8mb4.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_tis620.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/fulltext_left_join.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/mysqldump.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/show_check.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ddl_i18n_koi8r.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/mysqltest.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/alter_table.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_many.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_cp1250_ch.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/type_decimal.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/log_tables.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/grant.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/mysqlbinlog.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ctype_filesystem-master.opt",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/ddl_i18n_utf8.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/mysql-test/t/type_enum.test",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql/item_xmlfunc.cc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/sql/MSG00001.bin",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/libmysqld.rc",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/examples/builder-sample/emb_samples.dfm",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/examples/builder-sample/snapshot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/examples/builder-sample/images/logo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/examples/builder-sample/images/mysql.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/examples/builder-sample/images/db.ico",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/examples/builder-sample/images/net.ico",
        "/tmp/vanessa/spack-stage/spack-stage-mysql-5.6.43-7mfpmx2oinek4d46xlxwjgafms6emg5e/spack-src/libmysqld/examples/builder-sample/images/find.ico"
    ],
    "total_files": 14543
}