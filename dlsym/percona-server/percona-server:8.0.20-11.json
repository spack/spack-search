{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/configure.cmake": "# Copyright (c) 2009, 2019, Oracle and/or its affiliates. All rights reserved.\n# \n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License, version 2.0,\n# as published by the Free Software Foundation.\n#\n# This program is also distributed with certain software (including\n# but not limited to OpenSSL) that is licensed under separate terms,\n# as designated in a particular file or component or in included license\n# documentation.  The authors of MySQL hereby grant you an additional\n# permission to link the program and your derivative works with the\n# separately licensed software that they have included with MySQL.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n#\n\nINCLUDE (CheckCSourceCompiles)\nINCLUDE (CheckCXXSourceCompiles)\nINCLUDE (CheckStructHasMember)\nINCLUDE (CheckLibraryExists)\nINCLUDE (CheckFunctionExists)\nINCLUDE (CheckCCompilerFlag)\nINCLUDE (CheckCSourceRuns)\nINCLUDE (CheckCXXSourceRuns)\nINCLUDE (CheckSymbolExists)\n\n\n# System type affects version_compile_os variable \nIF(NOT SYSTEM_TYPE)\n  IF(PLATFORM)\n    SET(SYSTEM_TYPE ${PLATFORM})\n  ELSE()\n    SET(SYSTEM_TYPE ${CMAKE_SYSTEM_NAME})\n  ENDIF()\nENDIF()\n\n# Same for structs, setting HAVE_STRUCT_<name> instead\nFUNCTION(MY_CHECK_STRUCT_SIZE type defbase)\n  CHECK_TYPE_SIZE(\"struct ${type}\" SIZEOF_${defbase})\n  IF(SIZEOF_${defbase})\n    SET(HAVE_STRUCT_${defbase} 1 PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\n# Searches function in libraries\n# if function is found, sets output parameter result to the name of the library\n# if function is found in libc, result will be empty \nFUNCTION(MY_SEARCH_LIBS func libs result)\n  IF(${${result}})\n    # Library is already found or was predefined\n    RETURN()\n  ENDIF()\n  CHECK_FUNCTION_EXISTS(${func} HAVE_${func}_IN_LIBC)\n  IF(HAVE_${func}_IN_LIBC)\n    SET(${result} \"\" PARENT_SCOPE)\n    RETURN()\n  ENDIF()\n  FOREACH(lib  ${libs})\n    CHECK_LIBRARY_EXISTS(${lib} ${func} \"\" HAVE_${func}_IN_${lib}) \n    IF(HAVE_${func}_IN_${lib})\n      SET(${result} ${lib} PARENT_SCOPE)\n      SET(HAVE_${result} 1 PARENT_SCOPE)\n      RETURN()\n    ENDIF()\n  ENDFOREACH()\nENDFUNCTION()\n\n# Find out which libraries to use.\n\n# Figure out threading library\n# Defines CMAKE_USE_PTHREADS_INIT and CMAKE_THREAD_LIBS_INIT.\nFIND_PACKAGE (Threads)\n\nIF(UNIX)\n  IF(FREEBSD)\n    MYSQL_CHECK_PKGCONFIG()\n    PKG_CHECK_MODULES(LIBUNWIND libunwind)\n  ENDIF()\n  MY_SEARCH_LIBS(floor m LIBM)\n  IF(NOT LIBM)\n    MY_SEARCH_LIBS(__infinity m LIBM)\n  ENDIF()\n  IF(NOT LIBM)\n    MY_SEARCH_LIBS(log m LIBM)\n  ENDIF()\n  MY_SEARCH_LIBS(gethostbyname_r  \"nsl_r;nsl\" LIBNSL)\n  MY_SEARCH_LIBS(bind \"bind;socket\" LIBBIND)\n  MY_SEARCH_LIBS(crypt crypt LIBCRYPT)\n  MY_SEARCH_LIBS(setsockopt socket LIBSOCKET)\n  MY_SEARCH_LIBS(dlopen dl LIBDL)\n  # HAVE_dlopen_IN_LIBC\n  IF(NOT LIBDL)\n    MY_SEARCH_LIBS(dlsym dl LIBDL)\n  ENDIF()\n  MY_SEARCH_LIBS(sched_yield rt LIBRT)\n  IF(NOT LIBRT)\n    MY_SEARCH_LIBS(clock_gettime rt LIBRT)\n  ENDIF()\n  MY_SEARCH_LIBS(timer_create rt LIBRT)\n  MY_SEARCH_LIBS(atomic_thread_fence atomic LIBATOMIC)\n  MY_SEARCH_LIBS(backtrace execinfo LIBEXECINFO)\n\n  LIST(APPEND CMAKE_REQUIRED_LIBRARIES\n    ${LIBM} ${LIBNSL} ${LIBBIND} ${LIBCRYPT} ${LIBSOCKET} ${LIBDL}\n    ${CMAKE_THREAD_LIBS_INIT} ${LIBRT} ${LIBATOMIC} ${LIBEXECINFO}\n  )\n  # Need explicit pthread for gcc -fsanitize=address\n  IF(CMAKE_C_FLAGS MATCHES \"-fsanitize=\")\n    SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} pthread)\n  ENDIF()\n\n  # https://bugs.llvm.org/show_bug.cgi?id=16404\n  IF(LINUX AND HAVE_UBSAN AND MY_COMPILER_IS_CLANG)\n    SET(CMAKE_EXE_LINKER_FLAGS_DEBUG\n      \"${CMAKE_EXE_LINKER_FLAGS_DEBUG} -rtlib=compiler-rt -lgcc_s\")\n    SET(CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO\n      \"${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} -rtlib=compiler-rt -lgcc_s\")\n  ENDIF()\n\n  IF(WITH_ASAN)\n    SET(CMAKE_REQUIRED_FLAGS \"${CMAKE_REQUIRED_FLAGS} -fsanitize=address\")\n  ENDIF()\n\n  IF(WITH_ASAN OR WITH_LSAN OR WITH_TSAN)\n    IF(CMAKE_USE_PTHREADS_INIT AND NOT CMAKE_THREAD_LIBS_INIT)\n      MESSAGE(STATUS \"No CMAKE_THREAD_LIBS_INIT ??\")\n      SET(CMAKE_THREAD_LIBS_INIT \"-lpthread\")\n    ENDIF()\n  ENDIF()\n\n  LIST(LENGTH CMAKE_REQUIRED_LIBRARIES required_libs_length)\n  IF(${required_libs_length} GREATER 0)\n    LIST(REMOVE_DUPLICATES CMAKE_REQUIRED_LIBRARIES)\n  ENDIF()  \n  LINK_LIBRARIES(${CMAKE_THREAD_LIBS_INIT})\n  \n  OPTION(WITH_LIBWRAP \"Compile with tcp wrappers support\" OFF)\n  IF(WITH_LIBWRAP)\n    SET(SAVE_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n    SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} wrap)\n    CHECK_C_SOURCE_COMPILES(\n    \"\n    #include <tcpd.h>\n    int allow_severity = 0;\n    int deny_severity  = 0;\n    int main()\n    {\n      hosts_access(0);\n    }\"\n    HAVE_LIBWRAP)\n\n    IF(HAVE_LIBWRAP)\n      CHECK_CXX_SOURCE_COMPILES(\n      \"\n      #include <tcpd.h>\n      int main()\n      {\n        struct request_info req;\n        if (req.sink)\n          (req.sink)(req.fd);\n      }\"\n      HAVE_LIBWRAP_PROTOTYPES)\n    ENDIF()\n\n    SET(CMAKE_REQUIRED_LIBRARIES ${SAVE_CMAKE_REQUIRED_LIBRARIES})\n    IF(HAVE_LIBWRAP)\n      SET(LIBWRAP \"wrap\")\n    ELSE()\n      MESSAGE(FATAL_ERROR \n      \"WITH_LIBWRAP is defined, but can not find a working libwrap. \"\n      \"Make sure both the header files (tcpd.h) \"\n      \"and the library (libwrap) are installed.\")\n    ENDIF()\n  ENDIF()\nENDIF()\n\n#\n# Tests for header files\n#\nINCLUDE (CheckIncludeFiles)\n\nIF(FREEBSD)\n  # On FreeBSD some includes, e.g. sasl/sasl.h, is in /usr/local/include\n  LIST(APPEND CMAKE_REQUIRED_INCLUDES \"/usr/local/include\")\nENDIF()\n\nCHECK_INCLUDE_FILES (alloca.h HAVE_ALLOCA_H)\nCHECK_INCLUDE_FILES (arpa/inet.h HAVE_ARPA_INET_H)\nCHECK_INCLUDE_FILES (dlfcn.h HAVE_DLFCN_H)\nCHECK_INCLUDE_FILES (endian.h HAVE_ENDIAN_H)\nCHECK_INCLUDE_FILES (execinfo.h HAVE_EXECINFO_H)\nCHECK_INCLUDE_FILES (fpu_control.h HAVE_FPU_CONTROL_H)\nCHECK_INCLUDE_FILES (grp.h HAVE_GRP_H)\nCHECK_INCLUDE_FILES (langinfo.h HAVE_LANGINFO_H)\nCHECK_INCLUDE_FILES (malloc.h HAVE_MALLOC_H)\nCHECK_INCLUDE_FILES (netinet/in.h HAVE_NETINET_IN_H)\nCHECK_INCLUDE_FILES (poll.h HAVE_POLL_H)\nCHECK_INCLUDE_FILES (pwd.h HAVE_PWD_H)\nCHECK_INCLUDE_FILES (strings.h HAVE_STRINGS_H) # Used by NDB\nCHECK_INCLUDE_FILES (sys/ioctl.h HAVE_SYS_IOCTL_H)\nCHECK_INCLUDE_FILES (sys/mman.h HAVE_SYS_MMAN_H)\nCHECK_INCLUDE_FILES (sys/prctl.h HAVE_SYS_PRCTL_H)\nCHECK_INCLUDE_FILES (sys/resource.h HAVE_SYS_RESOURCE_H)\nCHECK_INCLUDE_FILES (sys/select.h HAVE_SYS_SELECT_H)\nCHECK_INCLUDE_FILES (sys/socket.h HAVE_SYS_SOCKET_H)\nCHECK_INCLUDE_FILES (\"curses.h;term.h\" HAVE_TERM_H)\nCHECK_INCLUDE_FILES (termios.h HAVE_TERMIOS_H)\nCHECK_INCLUDE_FILES (termio.h HAVE_TERMIO_H)\nCHECK_INCLUDE_FILES (unistd.h HAVE_UNISTD_H)\nCHECK_INCLUDE_FILES (sys/wait.h HAVE_SYS_WAIT_H)\nCHECK_INCLUDE_FILES (sys/param.h HAVE_SYS_PARAM_H) # Used by NDB/libevent\nCHECK_INCLUDE_FILES (fnmatch.h HAVE_FNMATCH_H)\nCHECK_INCLUDE_FILES (sys/un.h HAVE_SYS_UN_H)\n# Cyrus SASL 2.1.26 on Solaris 11.4 has a bug that requires sys/types.h\n# to be included before checking if sasl/sasl.h exists\nCHECK_INCLUDE_FILES (\"sys/types.h;sasl/sasl.h\" HAVE_SASL_SASL_H)\n\n#\n# Tests for functions\n#\nIF(WITH_ASAN)\n  CHECK_SYMBOL_EXISTS (__lsan_do_recoverable_leak_check\n    \"sanitizer/lsan_interface.h\" HAVE_LSAN_DO_RECOVERABLE_LEAK_CHECK)\nENDIF()\nCHECK_FUNCTION_EXISTS (_aligned_malloc HAVE_ALIGNED_MALLOC)\nCHECK_FUNCTION_EXISTS (backtrace HAVE_BACKTRACE)\nCHECK_FUNCTION_EXISTS (index HAVE_INDEX)\nCHECK_FUNCTION_EXISTS (chown HAVE_CHOWN)\nCHECK_FUNCTION_EXISTS (cuserid HAVE_CUSERID)\nCHECK_FUNCTION_EXISTS (directio HAVE_DIRECTIO)\nCHECK_FUNCTION_EXISTS (ftruncate HAVE_FTRUNCATE)\nCHECK_FUNCTION_EXISTS (fchmod HAVE_FCHMOD)\nCHECK_FUNCTION_EXISTS (fcntl HAVE_FCNTL)\nCHECK_FUNCTION_EXISTS (fdatasync HAVE_FDATASYNC)\nCHECK_SYMBOL_EXISTS(fdatasync \"unistd.h\" HAVE_DECL_FDATASYNC)\nCHECK_FUNCTION_EXISTS (fedisableexcept HAVE_FEDISABLEEXCEPT)\nCHECK_FUNCTION_EXISTS (fsync HAVE_FSYNC)\nCHECK_FUNCTION_EXISTS (gethrtime HAVE_GETHRTIME)\nCHECK_FUNCTION_EXISTS (getpass HAVE_GETPASS)\nCHECK_FUNCTION_EXISTS (getpassphrase HAVE_GETPASSPHRASE)\nCHECK_FUNCTION_EXISTS (getpwnam HAVE_GETPWNAM)\nCHECK_FUNCTION_EXISTS (getpwuid HAVE_GETPWUID)\nCHECK_FUNCTION_EXISTS (getrusage HAVE_GETRUSAGE)\nCHECK_FUNCTION_EXISTS (initgroups HAVE_INITGROUPS)\nCHECK_FUNCTION_EXISTS (issetugid HAVE_ISSETUGID)\nCHECK_FUNCTION_EXISTS (getuid HAVE_GETUID)\nCHECK_FUNCTION_EXISTS (geteuid HAVE_GETEUID)\nCHECK_FUNCTION_EXISTS (getgid HAVE_GETGID)\nCHECK_FUNCTION_EXISTS (getegid HAVE_GETEGID)\nCHECK_FUNCTION_EXISTS (madvise HAVE_MADVISE)\nCHECK_FUNCTION_EXISTS (malloc_info HAVE_MALLOC_INFO)\nCHECK_FUNCTION_EXISTS (mlock HAVE_MLOCK)\nCHECK_FUNCTION_EXISTS (mlockall HAVE_MLOCKALL)\nCHECK_FUNCTION_EXISTS (mmap64 HAVE_MMAP64)\nCHECK_FUNCTION_EXISTS (poll HAVE_POLL)\nCHECK_FUNCTION_EXISTS (posix_fallocate HAVE_POSIX_FALLOCATE)\nCHECK_FUNCTION_EXISTS (posix_memalign HAVE_POSIX_MEMALIGN)\nCHECK_FUNCTION_EXISTS (pthread_condattr_setclock HAVE_PTHREAD_CONDATTR_SETCLOCK)\nCHECK_FUNCTION_EXISTS (pthread_getaffinity_np HAVE_PTHREAD_GETAFFINITY_NP)\nCHECK_FUNCTION_EXISTS (pthread_sigmask HAVE_PTHREAD_SIGMASK)\nCHECK_FUNCTION_EXISTS (sleep HAVE_SLEEP)\nCHECK_FUNCTION_EXISTS (stpcpy HAVE_STPCPY)\nCHECK_FUNCTION_EXISTS (stpncpy HAVE_STPNCPY)\nCHECK_FUNCTION_EXISTS (strlcpy HAVE_STRLCPY)\nCHECK_FUNCTION_EXISTS (strndup HAVE_STRNDUP) # Used by libbinlogevents\nCHECK_FUNCTION_EXISTS (strlcat HAVE_STRLCAT)\nCHECK_FUNCTION_EXISTS (strsignal HAVE_STRSIGNAL)\nCHECK_FUNCTION_EXISTS (tell HAVE_TELL)\nCHECK_FUNCTION_EXISTS (vasprintf HAVE_VASPRINTF)\nCHECK_FUNCTION_EXISTS (memalign HAVE_MEMALIGN)\nCHECK_FUNCTION_EXISTS (nl_langinfo HAVE_NL_LANGINFO)\nCHECK_FUNCTION_EXISTS (ntohll HAVE_HTONLL)\nCHECK_FUNCTION_EXISTS (memset_s HAVE_MEMSET_S)\n\nCHECK_FUNCTION_EXISTS (epoll_create HAVE_EPOLL)\n\n#--------------------------------------------------------------------\n# Support for WL#2373 (Use cycle counter for timing)\n#--------------------------------------------------------------------\n\nCHECK_INCLUDE_FILES(sys/time.h HAVE_SYS_TIME_H)\nCHECK_INCLUDE_FILES(sys/times.h HAVE_SYS_TIMES_H)\n\nCHECK_FUNCTION_EXISTS(times HAVE_TIMES)\nCHECK_FUNCTION_EXISTS(gettimeofday HAVE_GETTIMEOFDAY)\n\n\n#\n# Tests for symbols\n#\n\nCHECK_SYMBOL_EXISTS(lrand48 \"stdlib.h\" HAVE_LRAND48)\nCHECK_SYMBOL_EXISTS(TIOCGWINSZ \"sys/ioctl.h\" GWINSZ_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(FIONREAD \"sys/ioctl.h\" FIONREAD_IN_SYS_IOCTL)\nCHECK_SYMBOL_EXISTS(FIONREAD \"sys/filio.h\" FIONREAD_IN_SYS_FILIO)\nCHECK_SYMBOL_EXISTS(MADV_DONTDUMP \"sys/mman.h\" HAVE_MADV_DONTDUMP)\nCHECK_CXX_SOURCE_COMPILES(\n\"#include <sys/types.h>\n #include <sys/stat.h>\n #include <fcntl.h>\nint main() {\n  long long int foo = O_TMPFILE;\n}\" HAVE_O_TMPFILE)\n\n# The results of these four checks are only needed here, not in code.\nCHECK_FUNCTION_EXISTS (timer_create HAVE_TIMER_CREATE)\nCHECK_FUNCTION_EXISTS (timer_settime HAVE_TIMER_SETTIME)\nCHECK_FUNCTION_EXISTS (kqueue HAVE_KQUEUE)\n\n# Check whether the setns() API function supported by a target platform\nCHECK_C_SOURCE_RUNS(\"\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n#include <sched.h>\nint main()\n{\n  (void)setns(0, 0);\n  return 0;\n}\" HAVE_SETNS)\n\nCHECK_SYMBOL_EXISTS(EVFILT_TIMER \"sys/types.h;sys/event.h;sys/time.h\" HAVE_EVFILT_TIMER)\nIF(HAVE_KQUEUE AND HAVE_EVFILT_TIMER)\n  SET(HAVE_KQUEUE_TIMERS 1 CACHE INTERNAL \"Have kqueue timer-related filter\")\nELSEIF(HAVE_TIMER_CREATE AND HAVE_TIMER_SETTIME)\n  SET(HAVE_POSIX_TIMERS 1 CACHE INTERNAL \"Have POSIX timer-related functions\")\nENDIF()\n\nIF(NOT HAVE_POSIX_TIMERS AND NOT HAVE_KQUEUE_TIMERS AND NOT WIN32)\n  MESSAGE(FATAL_ERROR \"No mysys timer support detected!\")\nENDIF()\n\n#\n# Test for endianess\n#\nINCLUDE(TestBigEndian)\nTEST_BIG_ENDIAN(WORDS_BIGENDIAN)\n\n# The header for glibc versions less than 2.9 will not\n# have the endian conversion macros defined.\nIF(HAVE_ENDIAN_H)\n  CHECK_SYMBOL_EXISTS(le64toh endian.h HAVE_LE64TOH)\n  CHECK_SYMBOL_EXISTS(le32toh endian.h HAVE_LE32TOH)\n  CHECK_SYMBOL_EXISTS(le16toh endian.h HAVE_LE16TOH)\n  CHECK_SYMBOL_EXISTS(htole64 endian.h HAVE_HTOLE64)\n  CHECK_SYMBOL_EXISTS(htole32 endian.h HAVE_HTOLE32)\n  CHECK_SYMBOL_EXISTS(htole16 endian.h HAVE_HTOLE16)\n  IF(HAVE_LE32TOH AND HAVE_LE16TOH AND HAVE_LE64TOH AND\n      HAVE_HTOLE64 AND HAVE_HTOLE32 AND HAVE_HTOLE16)\n    # Used by libbinlogevents and libmysqlgcs.\n    SET(HAVE_ENDIAN_CONVERSION_MACROS 1)\n  ENDIF()\nENDIF()\n\n#\n# Tests for type sizes (and presence)\n#\nINCLUDE (CheckTypeSize)\n\nLIST(APPEND CMAKE_REQUIRED_DEFINITIONS\n  -D_GNU_SOURCE -D_FILE_OFFSET_BITS=64\n  -D__STDC_LIMIT_MACROS -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS\n  )\n\nIF(SOLARIS)\n  LIST(APPEND CMAKE_REQUIRED_DEFINITIONS\n    -D_POSIX_PTHREAD_SEMANTICS -D_REENTRANT -D_PTHREADS\n    )\nENDIF()\n\nSET(CMAKE_EXTRA_INCLUDE_FILES stdint.h stdio.h sys/types.h time.h)\n\nCHECK_TYPE_SIZE(\"void *\"    SIZEOF_VOIDP)\nCHECK_TYPE_SIZE(\"char *\"    SIZEOF_CHARP)\nCHECK_TYPE_SIZE(\"long\"      SIZEOF_LONG)\nCHECK_TYPE_SIZE(\"short\"     SIZEOF_SHORT)\nCHECK_TYPE_SIZE(\"int\"       SIZEOF_INT)\nCHECK_TYPE_SIZE(\"long long\" SIZEOF_LONG_LONG)\nCHECK_TYPE_SIZE(\"time_t\"    SIZEOF_TIME_T)\n\nCHECK_STRUCT_HAS_MEMBER(\"struct tm\"\n tm_gmtoff \"time.h\" HAVE_TM_GMTOFF)\n\n# If finds the size of a type, set SIZEOF_<type> and HAVE_<type>\nFUNCTION(MY_CHECK_TYPE_SIZE type defbase)\n  CHECK_TYPE_SIZE(\"${type}\" SIZEOF_${defbase})\n  IF(SIZEOF_${defbase})\n    SET(HAVE_${defbase} 1 PARENT_SCOPE)\n  ENDIF()\nENDFUNCTION()\n\n# We are only interested in presence for these\nMY_CHECK_TYPE_SIZE(ulong ULONG)\nMY_CHECK_TYPE_SIZE(u_int32_t U_INT32_T)\n\n# Support for tagging symbols with __attribute__((visibility(\"hidden\")))\nMY_CHECK_CXX_COMPILER_FLAG(\"-fvisibility=hidden\" HAVE_VISIBILITY_HIDDEN)\n\n#\n# Code tests\n#\n\nCHECK_C_SOURCE_RUNS(\"\n#include <time.h>\nint main()\n{\n  struct timespec ts;\n  return clock_gettime(CLOCK_MONOTONIC, &ts);\n}\" HAVE_CLOCK_GETTIME)\n\nCHECK_C_SOURCE_RUNS(\"\n#include <time.h>\nint main()\n{\n  struct timespec ts;\n  return clock_gettime(CLOCK_REALTIME, &ts);\n}\" HAVE_CLOCK_REALTIME)\n\nIF(NOT STACK_DIRECTION)\n  IF(CMAKE_CROSSCOMPILING)\n   MESSAGE(FATAL_ERROR \n   \"STACK_DIRECTION is not defined.  Please specify -DSTACK_DIRECTION=1 \"\n   \"or -DSTACK_DIRECTION=-1 when calling cmake.\")\n  ELSE()\n    TRY_RUN(STACKDIR_RUN_RESULT STACKDIR_COMPILE_RESULT    \n     ${CMAKE_BINARY_DIR} \n     ${CMAKE_SOURCE_DIR}/cmake/stack_direction.c\n     )\n     # Test program returns 0 (down) or 1 (up).\n     # Convert to -1 or 1\n     IF(STACKDIR_RUN_RESULT EQUAL 0)\n       SET(STACK_DIRECTION -1 CACHE INTERNAL \"Stack grows direction\")\n     ELSE()\n       SET(STACK_DIRECTION 1 CACHE INTERNAL \"Stack grows direction\")\n     ENDIF()\n     MESSAGE(STATUS \"Checking stack direction : ${STACK_DIRECTION}\")\n   ENDIF()\nENDIF()\n\nCHECK_INCLUDE_FILES(\"time.h;sys/time.h\" TIME_WITH_SYS_TIME)\nCHECK_SYMBOL_EXISTS(O_NONBLOCK \"unistd.h;fcntl.h\" HAVE_FCNTL_NONBLOCK)\nIF(NOT HAVE_FCNTL_NONBLOCK)\n SET(NO_FCNTL_NONBLOCK 1)\nENDIF()\n\nIF(NOT CMAKE_CROSSCOMPILING AND NOT MSVC)\n  STRING(TOLOWER ${CMAKE_SYSTEM_PROCESSOR}  processor)\n  IF(processor MATCHES \"86\" OR\n      processor MATCHES \"amd64\" OR\n      processor MATCHES \"x64\")\n    IF(NOT SOLARIS)\n      # The loader in some Solaris versions has a bug due to which it refuses to\n      # start a binary that has been compiled by GCC and uses __asm__(\"pause\")\n      # with the error:\n      # $ ./mysqld\n      # ld.so.1: mysqld: fatal: hardware capability unsupported: 0x2000 [ PAUSE ]\n      # Killed\n      # $\n      # Even though the CPU does have support for the instruction.\n      # Binaries that have been compiled by GCC and use __asm__(\"pause\")\n      # on a non-buggy Solaris get flagged with a \"uses pause\" flag and\n      # thus they are unusable if copied on buggy Solaris version. To\n      # circumvent this we explicitly disable __asm__(\"pause\") when\n      # compiling on Solaris. Subsequently the tests here will enable\n      # HAVE_FAKE_PAUSE_INSTRUCTION which will use __asm__(\"rep; nop\")\n      # which currently generates the same code as __asm__(\"pause\") - 0xf3 0x90\n      # but without flagging the binary as \"uses pause\".\n      CHECK_C_SOURCE_RUNS(\"\n      int main()\n      {\n        __asm__ __volatile__ (\\\"pause\\\");\n        return 0;\n      }\"  HAVE_PAUSE_INSTRUCTION)\n    ENDIF()\n  ENDIF()\n  IF (NOT HAVE_PAUSE_INSTRUCTION)\n    CHECK_C_SOURCE_COMPILES(\"\n    int main()\n    {\n     __asm__ __volatile__ (\\\"rep; nop\\\");\n     return 0;\n    }\n   \" HAVE_FAKE_PAUSE_INSTRUCTION)\n  ENDIF()\n  IF (NOT HAVE_PAUSE_INSTRUCTION)\n    CHECK_C_SOURCE_COMPILES(\"\n    int main()\n    {\n     __asm__ __volatile__ (\\\"or 1,1,1\\\");\n     __asm__ __volatile__ (\\\"or 2,2,2\\\");\n     return 0;\n    }\n    \" HAVE_HMT_PRIORITY_INSTRUCTION)\n  ENDIF()\nENDIF()\n  \nINCLUDE (CheckIncludeFileCXX)\nCHECK_INCLUDE_FILE_CXX(cxxabi.h HAVE_CXXABI_H)\nIF(HAVE_CXXABI_H)\nCHECK_CXX_SOURCE_COMPILES(\"\n #include <cxxabi.h>\n int main(int argc, char **argv) \n  {\n    char *foo= 0; int bar= 0;\n    foo= abi::__cxa_demangle(foo, foo, 0, &bar);\n    return 0;\n  }\"\n  HAVE_ABI_CXA_DEMANGLE)\nENDIF()\n\nCHECK_C_SOURCE_COMPILES(\"\nint main()\n{\n  __builtin_unreachable();\n  return 0;\n}\" HAVE_BUILTIN_UNREACHABLE)\n\nCHECK_C_SOURCE_COMPILES(\"\nint main()\n{\n  long l= 0;\n  __builtin_expect(l, 0);\n  return 0;\n}\" HAVE_BUILTIN_EXPECT)\n\n# Only check for __builtin_stpcpy() if stpcpy() is available.\n# Oracle Developer Studio requires <string.h> to be included in order\n# to use __builtin_stpcpy.\nIF(HAVE_STPCPY)\n  CHECK_SYMBOL_EXISTS(__builtin_stpcpy \"string.h\" HAVE_BUILTIN_STPCPY)\nENDIF()\n\nCHECK_CXX_SOURCE_COMPILES(\"\n  int main()\n  {\n    int foo= -10; int bar= 10;\n    long long int foo64= -10; long long int bar64= 10;\n    if (!__sync_fetch_and_add(&foo, bar) || foo)\n      return -1;\n    bar= __sync_lock_test_and_set(&foo, bar);\n    if (bar || foo != 10)\n      return -1;\n    bar= __sync_val_compare_and_swap(&bar, foo, 15);\n    if (bar)\n      return -1;\n    if (!__sync_fetch_and_add(&foo64, bar64) || foo64)\n      return -1;\n    bar64= __sync_lock_test_and_set(&foo64, bar64);\n    if (bar64 || foo64 != 10)\n      return -1;\n    bar64= __sync_val_compare_and_swap(&bar64, foo, 15);\n    if (bar64)\n      return -1;\n    return 0;\n  }\"\n  HAVE_GCC_SYNC_BUILTINS)\n\nIF(WITH_VALGRIND)\n  SET(VALGRIND_HEADERS \"valgrind/memcheck.h;valgrind/valgrind.h\")\n  CHECK_INCLUDE_FILES(\"${VALGRIND_HEADERS}\" HAVE_VALGRIND_HEADERS)\n  IF(HAVE_VALGRIND_HEADERS)\n    SET(HAVE_VALGRIND 1)\n  ELSE()\n    MESSAGE(FATAL_ERROR \"Unable to find Valgrind header files ${VALGRIND_HEADERS}. Make sure you have them in your include path.\")\n  ENDIF()\nENDIF()\n\n# Check for gettid() system call\nCHECK_C_SOURCE_COMPILES(\"\n#include <sys/types.h>\n#include <sys/syscall.h>\n#include <unistd.h>\nint main(int ac, char **av)\n{\n  unsigned long long tid = syscall(SYS_gettid);\n  return (tid != 0 ? 0 : 1);\n}\"\nHAVE_SYS_GETTID)\n\n# Check for pthread_getthreadid_np()\nCHECK_C_SOURCE_COMPILES(\"\n#include <pthread_np.h>\nint main(int ac, char **av)\n{\n  unsigned long long tid = pthread_getthreadid_np();\n  return (tid != 0 ? 0 : 1);\n}\"\nHAVE_PTHREAD_GETTHREADID_NP)\n\n# Check for pthread_threadid_np()\nCHECK_C_SOURCE_COMPILES(\"\n#include <pthread.h>\nint main(int ac, char **av)\n{\n  unsigned long long tid64;\n  pthread_threadid_np(NULL, &tid64);\n  return (tid64 != 0 ? 0 : 1);\n}\"\nHAVE_PTHREAD_THREADID_NP)\n\n# Check for pthread_self() returning an integer type\nCHECK_C_SOURCE_COMPILES(\"\n#include <sys/types.h>\n#include <pthread.h>\nint main(int ac, char **av)\n{\n  unsigned long long tid = pthread_self();\n  return (tid != 0 ? 0 : 1);\n}\"\nHAVE_INTEGER_PTHREAD_SELF\nFAIL_REGEX \"warning: incompatible pointer to integer conversion\"\n)\n\n#--------------------------------------------------------------------\n# Check for IPv6 support\n#--------------------------------------------------------------------\nCHECK_INCLUDE_FILE(netinet/in6.h HAVE_NETINET_IN6_H) # Used by libevent (never true)\nMY_CHECK_STRUCT_SIZE(\"in6_addr\" IN6_ADDR) # Used by libevent\n\nIF(UNIX)\n  SET(CMAKE_EXTRA_INCLUDE_FILES sys/types.h netinet/in.h sys/socket.h)\n  IF(HAVE_NETINET_IN6_H)\n    SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} netinet/in6.h)\n  ENDIF()\nELSEIF(WIN32)\n  SET(CMAKE_EXTRA_INCLUDE_FILES ${CMAKE_EXTRA_INCLUDE_FILES} winsock2.h ws2ipdef.h)\nENDIF()\n\n#\n# Check if struct sockaddr_in::sin_len is available.\n#\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in\" sin_len\n  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN_SIN_LEN)\n\n#\n# Check if struct sockaddr_in6::sin6_len is available.\n#\n\nCHECK_STRUCT_HAS_MEMBER(\"struct sockaddr_in6\" sin6_len\n  \"${CMAKE_EXTRA_INCLUDE_FILES}\" HAVE_SOCKADDR_IN6_SIN6_LEN)\n\nSET(CMAKE_EXTRA_INCLUDE_FILES)\n\nCHECK_INCLUDE_FILES(numa.h HAVE_NUMA_H)\nCHECK_INCLUDE_FILES(numaif.h HAVE_NUMAIF_H)\n\nIF(HAVE_NUMA_H AND HAVE_NUMAIF_H)\n  SET(SAVE_CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES})\n  SET(CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} numa)\n  CHECK_C_SOURCE_COMPILES(\n    \"\n    #include <numa.h>\n    #include <numaif.h>\n    int main()\n    {\n       struct bitmask *all_nodes= numa_all_nodes_ptr;\n       set_mempolicy(MPOL_DEFAULT, 0, 0);\n       return all_nodes != NULL;\n    }\"\n    HAVE_LIBNUMA)\n  SET(CMAKE_REQUIRED_LIBRARIES ${SAVE_CMAKE_REQUIRED_LIBRARIES})\nELSE()\n  SET(HAVE_LIBNUMA 0)\nENDIF()\n\nIF(NOT HAVE_LIBNUMA)\n  MESSAGE(STATUS \"NUMA library missing or required version not available\")\nENDIF()\n\nIF(HAVE_LIBNUMA AND HAVE_NUMA_H AND HAVE_NUMAIF_H)\n  OPTION(WITH_NUMA \"Explicitly set NUMA memory allocation policy\" ON)\nELSE()\n  OPTION(WITH_NUMA \"Explicitly set NUMA memory allocation policy\" OFF)\nENDIF()\n\nIF(WITH_NUMA AND NOT HAVE_LIBNUMA)\n  # Forget it in cache, abort the build.\n  UNSET(WITH_NUMA CACHE)\n  MESSAGE(FATAL_ERROR \"Could not find numa headers/libraries\")\nENDIF()\n\nIF(HAVE_LIBNUMA AND NOT WITH_NUMA)\n  SET(HAVE_LIBNUMA 0)\n  MESSAGE(STATUS \"Disabling NUMA on user's request\")\nENDIF()\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/src/common/portlib/NdbNuma.cpp": "/*\n   Copyright (c) 2010, 2016, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License, version 2.0,\n   as published by the Free Software Foundation.\n\n   This program is also distributed with certain software (including\n   but not limited to OpenSSL) that is licensed under separate terms,\n   as designated in a particular file or component or in included license\n   documentation.  The authors of MySQL hereby grant you an additional\n   permission to link the program and your derivative works with the\n   separately licensed software that they have included with MySQL.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License, version 2.0, for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n*/\n\n#include <NdbNuma.h>\n#include <ndb_global.h>\n\n#ifdef TEST_NDBNUMA\nstatic int NDB_TRACE_NUMA = 0;\n#else\n#define NDB_TRACE_NUMA (false)\n#endif\n\n#if defined HAVE_DLFCN_H && defined HAVE_DLOPEN\n#include <dlfcn.h>\n\n/**\n * Load libnuma using dlopen, not have to put link dependency on it...\n * - handle fact that there are 2 versions of libnuma...\n *   use existance of symbol \"numa_all_nodes_ptr\" to use v2 abi\n */\nstruct bitmask;\nextern \"C\"\n{\n  typedef int (* fun0)(void);\n  typedef void (* fun1)(struct bitmask*);\n  typedef void (* fun2)(int);\n  typedef int (* fun3)(int node, unsigned long * bug, int buflen);\n  typedef bitmask * (* fun4)();\n  typedef void (* fun5)(struct bitmask*);\n  typedef bitmask * (* fun6)(struct bitmask*);\n};\n\nclass NdbNuma\n{\npublic:\n  NdbNuma() { handle = 0;}\n  ~NdbNuma() { if (handle) dlclose(handle); }\n\n  int open();\n  int build_cputonodemap();\n\n  void * handle;\n  fun0 numa_available;\n\n  fun0 numa_max_node;\n  fun0 numa_max_possible_node;\n  fun1 numa_set_interleave_mask;\n  fun2 numa_set_strict;\n  fun3 numa_node_to_cpus;\n  fun4 numa_allocate_nodemask;\n  fun5 numa_bitmask_free;\n  fun6 numa_bitmask_setall;\n\n  struct bitmask * numa_all_nodes;\n  struct bitmask * numa_all_nodes_ptr;\n};\n\nstatic\nvoid*\nmy_dlopen(const char * name)\n{\n  void * p = dlopen(name, RTLD_LAZY);\n  if (NDB_TRACE_NUMA)\n  {\n    if (p == 0)\n      printf(\"info: failed to load %s\\n\", name);\n    else\n      printf(\"info: loaded %s\\n\", name);\n  }\n  return p;\n}\n\nstatic\nvoid*\nmy_dlsym(void * handle, const char * name)\n{\n  void * p = dlsym(handle, name);\n  if (NDB_TRACE_NUMA)\n  {\n    if (p != 0)\n    {\n      printf(\"info: %s OK\\n\", name);\n    }\n    else\n    {\n      printf(\"info: %s NOT FOUND\\n\", name);\n    }\n  }\n  return p;\n}\n\nint\nNdbNuma::open()\n{\n  handle = my_dlopen(\"libnuma.so\");\n  if (handle == 0)\n  {\n    handle = my_dlopen(\"libnuma.so.1\");\n  }\n  if (handle == 0)\n  {\n    return -1;\n  }\n\n  numa_available = (fun0)my_dlsym(handle, \"numa_available\");\n  if (numa_available == 0)\n  {\n    goto fail;\n  }\n\n  if ((* numa_available)() == -1)\n  {\n    if (NDB_TRACE_NUMA)\n    {\n      printf(\"info: numa_available() returns -1 => no numa support\\n\");\n    }\n    goto fail;\n  }\n\n  numa_max_node = (fun0)my_dlsym(handle, \"numa_max_node\");\n  numa_set_interleave_mask = (fun1)my_dlsym(handle, \"numa_set_interleave_mask\");\n  numa_set_strict = (fun2)my_dlsym(handle, \"numa_set_strict\");\n  numa_node_to_cpus = (fun3)my_dlsym(handle, \"numa_node_to_cpus\");\n  numa_all_nodes = (struct bitmask*)my_dlsym(handle, \"numa_all_nodes\");\n  numa_all_nodes_ptr = (struct bitmask*)my_dlsym(handle, \"numa_all_nodes_ptr\");\n  numa_allocate_nodemask = (fun4)my_dlsym(handle, \"numa_allocate_nodemask\");\n  numa_bitmask_free = (fun5)my_dlsym(handle, \"numa_bitmask_free\");\n  numa_bitmask_setall = (fun6)my_dlsym(handle, \"numa_bitmask_setall\");\n\n\n  return 0;\nfail:\n  dlclose(handle);\n  handle = 0;\n  return -1;\n}\n\nstatic\nbool\nbit_is_set(unsigned long * mask, int bit)\n{\n  int n = bit / (8 * sizeof(unsigned long));\n  int b = bit % (8 * sizeof(unsigned long));\n  return (mask[n] & (1UL << b)) != 0;\n}\n\nint\nNdbNuma::build_cputonodemap()\n{\n  int len = 512;\n  unsigned long * buf = (unsigned long*)malloc(len);\n  if (buf == 0)\n    return -1;\n\n  int m = (* numa_max_node)();\n  for (int i = 0; i <= m; i++)\n  {\nretry:\n    int r = (* numa_node_to_cpus)(i, buf, len);\n    if (r == -1)\n    {\n      if (errno != ERANGE)\n        goto fail;\n\n      len = len + 512;\n      if (len > 4096)\n        goto fail;\n\n      void * p = realloc(buf, len);\n      if (p == 0)\n        goto fail;\n\n      buf = (unsigned long*)p;\n      goto retry;\n    }\n    printf(\"node %d cpu(s): \", i);\n    for (int j = 0; j<8*len;j++)\n      if (bit_is_set(buf, j))\n        printf(\"%d \", j);\n    printf(\"\\n\");\n  }\n  free(buf);\n  return 0;\nfail:\n  free(buf);\n  return -1;\n}\n\nextern \"C\"\nint\nNdbNuma_setInterleaved()\n{\n  NdbNuma numa;\n  if (numa.open() == -1)\n    return -1;\n\n  if (numa.numa_set_interleave_mask == 0)\n    return -1;\n\n  if (numa.numa_all_nodes_ptr != 0)\n  {\n    /**\n     * libnuma v2\n     */\n    if (numa.numa_allocate_nodemask != 0 &&\n        numa.numa_bitmask_setall != 0 &&\n        numa.numa_bitmask_free != 0)\n    {\n      struct bitmask * bm = (* numa.numa_allocate_nodemask)();\n      if (bm != 0)\n      {\n        (* numa.numa_bitmask_setall)(bm);\n        (* numa.numa_set_interleave_mask)(bm);\n        (* numa.numa_bitmask_free)(bm);\n      }\n      else\n      {\n        return -1;\n      }\n    }\n    else\n    {\n      return -1;\n    }\n  }\n  else if (numa.numa_all_nodes != 0)\n  {\n    /**\n     * libnuma v1\n     */\n    (* numa.numa_set_interleave_mask)(numa.numa_all_nodes);\n  }\n  else\n  {\n    return -1;\n  }\n\n  return 0;\n}\n\n#else\nextern \"C\"\nint\nNdbNuma_setInterleaved()\n{\n  return -1;\n}\n#endif\n\n#ifdef TEST_NDBNUMA\n#include <NdbTap.hpp>\n\nTAPTEST(SetInterleaved)\n{\n  NDB_TRACE_NUMA = 1;\n  NdbNuma_setInterleaved();\n  return 1; // OK\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/memcache/CMakeLists.txt": "# Copyright (c) 2013, 2020, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License, version 2.0,\n# as published by the Free Software Foundation.\n#\n# This program is also distributed with certain software (including\n# but not limited to OpenSSL) that is licensed under separate terms,\n# as designated in a particular file or component or in included license\n# documentation.  The authors of MySQL hereby grant you an additional\n# permission to link the program and your derivative works with the\n# separately licensed software that they have included with MySQL.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n# This is the CMakeLists for NDB/Memcache\n\n# Skip attempting to build this component on Windows (for now)\nIF(WIN32)\n  RETURN()\nENDIF()\n\n######### BUNDLED SOURCES FOR MEMCACHED AND LIBEVENT\n\nOPTION(WITH_BUNDLED_MEMCACHED \"Use bundled memcached\" ON)\nIF(WITH_BUNDLED_MEMCACHED)\n  #\n  # Build the memcached bundled with NDB\n  #\n\n  # Handle the deprecated option to build libevent from\n  # code bundled with NDB. I.e the libevent bundled with NDB\n  # is not built anymore and instead the libevent bundled\n  # with MySQL or system libs are used.\n  OPTION(WITH_BUNDLED_LIBEVENT \"Deprecated, use WITH_LIBEVENT\")\n  MARK_AS_ADVANCED(WITH_BUNDLED_LIBEVENT)\n  IF(WITH_BUNDLED_LIBEVENT)\n    MESSAGE(WARNING \"Ignoring deprecated WITH_BUNDLED_LIBEVENT, use \"\n                   \"WITH_LIBEVENT to configure which library to use \"\n                   \"when building memcached\")\n  ENDIF()\n\n  # The libevent library is needed to build memcached.\n  # Make sure it has been found or configured to build\n  # by the code in cmake/libevent.cmake\n  IF (NOT LIBEVENT_FOUND)\n    MESSAGE(SEND_ERROR \"The libevent library is necessary to build \"\n                       \"memcached, use WITH_LIBEVENT to configure which \"\n                       \"library to use\")\n  ELSE()\n    NDB_REQUIRE_VARIABLE(LIBEVENT_LIBRARIES)\n    NDB_REQUIRE_VARIABLE(LIBEVENT_INCLUDE_DIRS)\n  ENDIF()\n\n  ADD_SUBDIRECTORY(extra/memcached)\nENDIF()\n\n\n\n####################################################\n\n# Disable specific types of warnings for current directory\n# if the compiler supports the flag\nFOREACH(warning\n    \"unused-but-set-variable\"\n    \"strict-aliasing\"\n    \"missing-field-initializers\"\n    \"unused-parameter\"\n    \"cast-qual\"\n    )\n  MY_CHECK_CXX_COMPILER_WARNING(\"${warning}\" HAS_WARN_FLAG)\n  IF(HAS_WARN_FLAG)\n    STRING_APPEND(CMAKE_CXX_FLAGS \" ${HAS_WARN_FLAG}\")\n    STRING_APPEND(CMAKE_C_FLAGS \" ${HAS_WARN_FLAG}\")\n  ENDIF()\nENDFOREACH()\n\n# Don't disable assert\nREMOVE_DEFINITIONS(-DNDEBUG)\nFOREACH(flag\n    CMAKE_C_FLAGS_DEBUG\n    CMAKE_C_FLAGS_RELWITHDEBINFO\n    CMAKE_C_FLAGS_RELEASE\n    CMAKE_C_FLAGS_MINSIZEREL\n    CMAKE_CXX_FLAGS_DEBUG\n    CMAKE_CXX_FLAGS_RELWITHDEBINFO\n    CMAKE_CXX_FLAGS_RELEASE\n    CMAKE_CXX_FLAGS_MINSIZEREL\n    )\n  STRING(REPLACE \"-DNDEBUG\"  \"\" \"${flag}\" \"${${flag}}\")\nENDFOREACH()\n\n\nINCLUDE(\"FindMemcached.cmake\")\nINCLUDE(CheckLibraryExists)\n\nIF(MEMCACHED_FOUND)\n  MESSAGE(STATUS \"Building NDB Memcache using \" ${MEMCACHED_ROOT_DIR})\nELSE()\n  MESSAGE(STATUS \"Skipping NDB Memcache (Memcached not found)\")\n  RETURN()\nENDIF()\n\n# Check for atomic operations\nINCLUDE(atomics.cmake)\nIF(NO_ATOMICS)\n  RETURN()\nENDIF()\n\n# Reuse the default engine from the bundled source tree\nSET(BUNDLED_MEMCACHED extra/memcached)\nSET(CACHE_SRC ${BUNDLED_MEMCACHED}/engines/default_engine)\n\n# Paths to header files\nINCLUDE_DIRECTORIES(BEFORE include)\nINCLUDE_DIRECTORIES(BEFORE ${CACHE_SRC})\nINCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR}/storage/ndb/src/ndbapi/)\nINCLUDE_DIRECTORIES(${CMAKE_BINARY_DIR}/storage/ndb/memcache/include/)\nINCLUDE_DIRECTORIES(AFTER ${MEMCACHED_INCLUDE_DIR})\nINCLUDE_DIRECTORIES(AFTER ${BUNDLED_MEMCACHED})\n\n# Source files for this module\nSET(NDB_MEMCACHE_SOURCE_FILES\n  ${CACHE_SRC}/assoc.c\n  ${CACHE_SRC}/items.c\n  ${CACHE_SRC}/slabs.c\n  src/ClusterConnectionPool.cc\n  src/Config_v1.cc\n  src/Configuration.cc\n  src/ConnQueryPlanSet.cc\n  src/DataTypeHandler.cc\n  src/ExpireTime.cc\n  src/ExternalValue.cc\n  src/GlobalConfigManager.cc\n  src/KeyPrefix.cc\n  src/NdbInstance.cc\n  src/Operation.cc\n  src/QueryPlan.cc\n  src/Record.cc\n  src/Scheduler.cc\n  src/SchedulerConfigManager.cc\n  src/TabSeparatedValues.cc\n  src/TableSpec.cc\n  src/atomics.cc\n  src/debug.cc\n  src/embedded_default_engine.c\n  src/hash_item_util.cc\n  src/ndb_configuration.cc\n  src/ndb_engine_errors.cc\n  src/ndb_engine_private.h\n  src/ndb_error_logger.cc\n  src/ndb_flush.cc\n  src/ndb_pipeline.cc\n  src/ndb_worker.cc\n  src/schedulers\n  src/schedulers/S_sched.cc\n  src/schedulers/Scheduler73.cc\n  src/schedulers/Stockholm.cc\n  src/schedulers/Trondheim.cc\n  src/thread_identifier.cc\n  src/timing.cc\n  src/workitem.cc\n  src/workqueue.cc\n)\n\n# The sourced C files from storage/ndb/memcache/extra/memcached can't be built\n# with -Werror\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  STRING_APPEND(CMAKE_C_FLAGS \" -Wno-error\")\nENDIF()\n\n# Set extra flags for the C compiler\nIF(${CMAKE_COMPILER_IS_GNUCC})\n  STRING_APPEND(CMAKE_C_FLAGS \" --std=gnu99\")\nELSEIF(CMAKE_C_COMPILER_ID MATCHES \"SunPro\")\n  STRING_APPEND(CMAKE_C_FLAGS \" -xc99=all\")\nENDIF()\n\n# Set extra flags for the C++ compiler\nIF(${CMAKE_COMPILER_IS_GNUCXX})\n  STRING(REPLACE \"-fno-implicit-templates\" \"\"\n    CMAKE_CXX_FLAGS ${CMAKE_CXX_FLAGS})\nENDIF()\n\n\n########## ENVIRONMENT TESTS #########\n\n# Checks for system headers\nCHECK_INCLUDE_FILE(\"mach/mach_time.h\" HAVE_MACH_MACH_TIME_H)\n\n# Checks for library functions\nCHECK_FUNCTION_EXISTS(srandomdev HAVE_SRANDOMDEV)\nCHECK_FUNCTION_EXISTS(gethrtime  HAVE_GETHRTIME)\nCHECK_FUNCTION_EXISTS(gethrvtime HAVE_GETHRVTIME)\nCHECK_FUNCTION_EXISTS(memset     HAVE_MEMSET)\n# Also: log in libm, dlsym in libdl?\nCHECK_LIBRARY_EXISTS(dl dlsym \"\" HAVE_LIBDL)\nSET(LIBDL \"\")\nif(${HAVE_LIBDL})\n    set(LIBDL \"dl\")\nendif()\n\nCHECK_CXX_SOURCE_COMPILES(\"\n    int main()  {\n      const char * f = __func__;\n      (void)f; // unused\n      return 0;\n    }\"\n    HAVE_FUNC_IN_CXX)\n\n# Define DEBUG_OUTPUT by default (enables runtime \"debug\" option in memcached)\n# if(HAVE_FUNC_IN_CXX)\n  ADD_DEFINITIONS(-DDEBUG_OUTPUT)\n# endif()\n\n\n########### GENERATED FILES #############\n\n# Build ndbmemcache_config.h\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/include/ndbmemcache_config.in\n  ${CMAKE_CURRENT_BINARY_DIR}/include/ndbmemcache_config.h)\n\n# Build sandbox.sh\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/sandbox.sh.in\n  ${CMAKE_CURRENT_BINARY_DIR}/sandbox.sh)\n\n# Build the perl include file used by mtr\n# - setup special variables since perl hasn't got\n#   the same understanding of \"boolean variables\" as cmake has.\n#   i.e the cmake variables can be \"1\", \"ON\", \"TRUE\" etc.\nSET(NDB_MEMCACHED_IS_AVAILABLE 0)\nIF (MEMCACHED_FOUND)\n  SET(NDB_MEMCACHED_IS_AVAILABLE 1)\nENDIF()\nSET(NDB_MEMCACHED_IS_BUNDLED 0)\nIF(WITH_BUNDLED_MEMCACHED)\n  SET(NDB_MEMCACHED_IS_BUNDLED 1)\nENDIF()\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/memcached_path.pl.in\n  ${CMAKE_CURRENT_BINARY_DIR}/memcached_path.pl)\n\n# Copy the SQL script into /scripts/ in the build directory.\nCONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/scripts/ndb_memcache_metadata.sql\n  ${CMAKE_BINARY_DIR}/scripts/ndb_memcache_metadata.sql COPYONLY)\n\n# Build the \"memclient\" utility\nSET(MEMCACHE_PM ${CMAKE_SOURCE_DIR}/mysql-test/lib/My/Memcache.pm)\nSET(MEMCLIENT_PL ${CMAKE_CURRENT_SOURCE_DIR}/memclient.pl)\nSET(MEMCLIENT ${CMAKE_CURRENT_BINARY_DIR}/memclient)\nFILE(READ   ${MEMCLIENT_PL} CONTENTS)\nFILE(WRITE  ${MEMCLIENT} \"${CONTENTS}\")\nFILE(READ   ${MEMCACHE_PM} CONTENTS)\nFILE(APPEND ${MEMCLIENT} \"${CONTENTS}\")\n\n\n######### TARGETS ############\n\nADD_LIBRARY(ndbmemcache STATIC ${NDB_MEMCACHE_SOURCE_FILES})\n\nTARGET_LINK_LIBRARIES(ndbmemcache\n  ndbclient_static\n  ndbgeneral\n  ${MEMCACHED_UTILITIES_LIBRARY}\n  )\n\n### Build the module\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  # Turn off array-bounds warning in ndb_engine.cc wich occurs\n  # when it uses the struct engine_info in the external memcached\n  # file engine.h to define its engine capabilities.\n  ADD_COMPILE_FLAGS(src/ndb_engine.cc COMPILE_FLAGS \"-Wno-array-bounds\")\nENDIF()\n\nADD_LIBRARY(ndb_engine MODULE src/ndb_engine.cc src/stub.cc)\n\nIF(APPLE)\n  SET_TARGET_PROPERTIES(ndb_engine PROPERTIES\n    MACOSX_RPATH ON\n  )\nENDIF()\n\nIF(APPLE AND HAVE_CRYPTO_DYLIB AND HAVE_OPENSSL_DYLIB)\n  ADD_CUSTOM_COMMAND(TARGET ndb_engine POST_BUILD\n    COMMAND install_name_tool -change\n    \"${CRYPTO_VERSION}\" \"@loader_path/${CRYPTO_VERSION}\"\n    $<TARGET_LINKER_FILE:ndb_engine>\n    COMMAND install_name_tool -change\n    \"${OPENSSL_VERSION}\" \"@loader_path/${OPENSSL_VERSION}\"\n    $<TARGET_LINKER_FILE:ndb_engine>\n    )\nENDIF()\n\n# Collect all dynamic libraries in the same directory\nSET_TARGET_PROPERTIES(ndb_engine PROPERTIES\n  LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/library_output_directory)\n\n# ndb_engine is a MODULE (plugin) but has DESTINATION lib ??\n# ADD_INSTALL_RPATH_FOR_OPENSSL(ndb_engine)\nADD_INSTALL_RPATH(ndb_engine \"\\$ORIGIN/private\")\n\nIF(MY_COMPILER_IS_GNU_OR_CLANG)\n  # Turn off array-bounds warning in ndb_engine.c wich occurs\n  # when it uses the struct engine_info in the external memcached\n  # file engine.h to define its engine capabilities.\n  ADD_COMPILE_FLAGS(src/ndb_engine.cc COMPILE_FLAGS \"-Wno-array-bounds\")\nENDIF()\n\nTARGET_LINK_LIBRARIES(ndb_engine ndbmemcache ndbclient_static)\n\n### If we are using the bundled memcache, it is a dependency:\nIF(WITH_BUNDLED_MEMCACHED)\n  ADD_DEPENDENCIES(ndb_engine memcached)\nENDIF()\n\n### Extra linker flags because CMake's \"MODULE\" support is not quite right.\nIF(APPLE)\n  SET(FINAL_LINK_FLAGS \"-flat_namespace -undefined suppress -bind_at_load\")\nELSEIF(${CMAKE_COMPILER_IS_GNUCC})\n  SET(FINAL_LINK_FLAGS \"-shared\")\nELSEIF(SOLARIS)\n  SET(FINAL_LINK_FLAGS \"${CMAKE_CXX_LINK_FLAGS}\")\nELSE()\n  SET(FINAL_LINK_FLAGS \"\")\nENDIF()\n\n#  Prepend any link flags required for building shared lib\nSTRING_PREPEND(FINAL_LINK_FLAGS \"${CMAKE_SHARED_LIBRARY_C_FLAGS} \")\n\nSET_TARGET_PROPERTIES(ndb_engine PROPERTIES\n  PREFIX \"\"\n  LINK_FLAGS \"${FINAL_LINK_FLAGS}\")\n\n############ INSTALLER RULES #########\n### Install the ndb_engine.so module\n###\nINSTALL(TARGETS ndb_engine DESTINATION ${INSTALL_LIBDIR})\n\n### Install memclient\n###\nINSTALL(PROGRAMS ${MEMCLIENT} DESTINATION ${INSTALL_BINDIR})\n\n### Install the memcache-api directory\n###\nSET(MEMCACHE_API_DIR \"${INSTALL_MYSQLSHAREDIR}/memcache-api\")\nINSTALL(DIRECTORY DESTINATION ${MEMCACHE_API_DIR} )\nINSTALL(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/sandbox.sh\n  DESTINATION  ${MEMCACHE_API_DIR})\nINSTALL(FILES README DESTINATION  ${MEMCACHE_API_DIR})\nINSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/scripts/ndb_memcache_metadata.sql\n  DESTINATION  ${MEMCACHE_API_DIR})\n\n# Upgrader scripts:\nINSTALL(DIRECTORY DESTINATION ${MEMCACHE_API_DIR}/upgrade)\nINSTALL(FILES ${CMAKE_CURRENT_SOURCE_DIR}/scripts/update_to_1.2.sql\n  DESTINATION ${MEMCACHE_API_DIR}/upgrade)\n\n# memcached_path.pl is also installed, for use by installed mtr\nINSTALL(FILES ${CMAKE_CURRENT_BINARY_DIR}/memcached_path.pl\n  DESTINATION ${INSTALL_MYSQLTESTDIR}/lib)\n\n########################################################\n\n\nADD_SUBDIRECTORY(unit)\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/memcache/extra/memcached/daemon/memcached.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n/*\n *  memcached - memory caching daemon\n *\n *       http://www.danga.com/memcached/\n *\n *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.\n *\n *  Use and distribution licensed under the BSD license.  See\n *  the LICENSE file for full text.\n *\n *  Authors:\n *      Anatoly Vorobey <mellon@pobox.com>\n *      Brad Fitzpatrick <brad@danga.com>\n */\n#include \"config.h\"\n#include \"memcached.h\"\n#include \"memcached/extension_loggers.h\"\n#include \"utilities/engine_loader.h\"\n\n#include <signal.h>\n#include <getopt.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <assert.h>\n#include <limits.h>\n#include <ctype.h>\n#include <stdarg.h>\n#include <stddef.h>\n\nstatic inline void item_set_cas(const void *cookie, item *it, uint64_t cas) {\n    settings.engine.v1->item_set_cas(settings.engine.v0, cookie, it, cas);\n}\n\n/* The item must always be called \"it\" */\n#define SLAB_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->slab_stats[info.clsid].slab_op++;\n\n#define THREAD_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->thread_op++;\n\n#define THREAD_GUTS2(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->slab_op++; \\\n    thread_stats->thread_op++;\n\n#define SLAB_THREAD_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    SLAB_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    THREAD_GUTS(conn, thread_stats, slab_op, thread_op)\n\n#define STATS_INCR1(GUTS, conn, slab_op, thread_op, key, nkey) { \\\n    struct independent_stats *independent_stats = get_independent_stats(conn); \\\n    struct thread_stats *thread_stats = \\\n        &independent_stats->thread_stats[conn->thread->index]; \\\n    topkeys_t *topkeys = independent_stats->topkeys; \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    GUTS(conn, thread_stats, slab_op, thread_op); \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n    TK(topkeys, slab_op, key, nkey, current_time); \\\n}\n\n#define STATS_INCR(conn, op, key, nkey) \\\n    STATS_INCR1(THREAD_GUTS, conn, op, op, key, nkey)\n\n#define SLAB_INCR(conn, op, key, nkey) \\\n    STATS_INCR1(SLAB_GUTS, conn, op, op, key, nkey)\n\n#define STATS_TWO(conn, slab_op, thread_op, key, nkey) \\\n    STATS_INCR1(THREAD_GUTS2, conn, slab_op, thread_op, key, nkey)\n\n#define SLAB_TWO(conn, slab_op, thread_op, key, nkey) \\\n    STATS_INCR1(SLAB_THREAD_GUTS, conn, slab_op, thread_op, key, nkey)\n\n#define STATS_HIT(conn, op, key, nkey) \\\n    SLAB_TWO(conn, op##_hits, cmd_##op, key, nkey)\n\n#define STATS_MISS(conn, op, key, nkey) \\\n    STATS_TWO(conn, op##_misses, cmd_##op, key, nkey)\n\n#define STATS_NOKEY(conn, op) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op++; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define STATS_NOKEY2(conn, op1, op2) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op1++; \\\n    thread_stats->op2++; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define STATS_ADD(conn, op, amt) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op += amt; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\nvolatile sig_atomic_t memcached_shutdown;\n\n/*\n * We keep the current time of day in a global variable that's updated by a\n * timer event. This saves us a bunch of time() system calls (we really only\n * need to get the time once a second, whereas there can be tens of thousands\n * of requests a second) and allows us to use server-start-relative timestamps\n * rather than absolute UNIX timestamps, a space savings on systems where\n * sizeof(time_t) > sizeof(unsigned int).\n */\nvolatile rel_time_t current_time;\n\n/*\n * forward declarations\n */\nstatic SOCKET new_socket(struct addrinfo *ai);\nstatic int try_read_command(conn *c);\nstatic inline struct independent_stats *get_independent_stats(conn *c);\nstatic inline struct thread_stats *get_thread_stats(conn *c);\nstatic void register_callback(ENGINE_HANDLE *eh,\n                              ENGINE_EVENT_TYPE type,\n                              EVENT_CALLBACK cb, const void *cb_data);\n\n\nenum try_read_result {\n    READ_DATA_RECEIVED,\n    READ_NO_DATA_RECEIVED,\n    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */\n    READ_MEMORY_ERROR      /** failed to allocate more memory */\n};\n\nstatic enum try_read_result try_read_network(conn *c);\nstatic enum try_read_result try_read_udp(conn *c);\n\n/* stats */\nstatic void stats_init(void);\nstatic void server_stats(ADD_STAT add_stats, conn *c, bool aggregate);\nstatic void process_stat_settings(ADD_STAT add_stats, void *c);\n\n\n/* defaults */\nstatic void settings_init(void);\n\n/* event handling, network IO */\nstatic void event_handler(const int fd, const short which, void *arg);\nstatic void complete_nread(conn *c);\nstatic char *process_command(conn *c, char *command);\nstatic void write_and_free(conn *c, char *buf, int bytes);\nstatic int ensure_iov_space(conn *c);\nstatic int add_iov(conn *c, const void *buf, int len);\nstatic int add_msghdr(conn *c);\n\n\n/* time handling */\nstatic void set_current_time(void);  /* update the global variable holding\n                              global 32-bit seconds-since-start time\n                              (to avoid 64 bit time_t) */\n\n/** exported globals **/\nstruct stats stats;\nstruct settings settings;\nstatic time_t process_started;     /* when the process was started */\n\n/** file scope variables **/\nstatic conn *listen_conn = NULL;\nstatic struct event_base *main_base;\nstatic struct independent_stats *default_independent_stats;\n\nstatic struct engine_event_handler *engine_event_handlers[MAX_ENGINE_EVENT_TYPE + 1];\n\nenum transmit_result {\n    TRANSMIT_COMPLETE,   /** All done writing. */\n    TRANSMIT_INCOMPLETE, /** More data remaining to write. */\n    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */\n    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */\n};\n\nstatic enum transmit_result transmit(conn *c);\n\n#define REALTIME_MAXDELTA 60*60*24*30\n\n// Perform all callbacks of a given type for the given connection.\nstatic void perform_callbacks(ENGINE_EVENT_TYPE type,\n                              const void *data,\n                              const void *c) {\n    for (struct engine_event_handler *h = engine_event_handlers[type];\n         h; h = h->next) {\n        h->cb(c, type, data, h->cb_data);\n    }\n}\n\n/*\n * given time value that's either unix time or delta from current unix time,\n * return unix time. Use the fact that delta can't exceed one month\n * (and real time value can't be that low).\n */\nstatic rel_time_t realtime(const time_t exptime) {\n    /* no. of seconds in 30 days - largest possible delta exptime */\n\n    if (exptime == 0) return 0; /* 0 means never expire */\n\n    if (exptime > REALTIME_MAXDELTA) {\n        /* if item expiration is at/before the server started, give it an\n           expiration time of 1 second after the server started.\n           (because 0 means don't expire).  without this, we'd\n           underflow and wrap around to some large value way in the\n           future, effectively making items expiring in the past\n           really expiring never */\n        if (exptime <= process_started)\n            return (rel_time_t)1;\n        return (rel_time_t)(exptime - process_started);\n    } else {\n        return (rel_time_t)(exptime + current_time);\n    }\n}\n\n/**\n * Convert the relative time to an absolute time (relative to EPOC ;) )\n */\nstatic time_t abstime(const rel_time_t exptime)\n{\n    return process_started + exptime;\n}\n\nstatic void stats_init(void) {\n    stats.daemon_conns = 0;\n    stats.rejected_conns = 0;\n    stats.curr_conns = stats.total_conns = stats.conn_structs = 0;\n\n    stats_prefix_init();\n}\n\nstatic void stats_reset(const void *cookie) {\n    struct conn *conn = (struct conn*)cookie;\n    STATS_LOCK();\n    stats.rejected_conns = 0;\n    stats.total_conns = 0;\n    stats_prefix_clear();\n    STATS_UNLOCK();\n    threadlocal_stats_reset(get_independent_stats(conn)->thread_stats);\n    settings.engine.v1->reset_stats(settings.engine.v0, cookie);\n}\n\nstatic void settings_init(void) {\n    settings.use_cas = true;\n    settings.access = 0700;\n    settings.port = 11211;\n    settings.udpport = 11211;\n    /* By default this string should be NULL for getaddrinfo() */\n    settings.inter = NULL;\n    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */\n    settings.maxconns = 1000;         /* to limit connections-related memory to about 5MB */\n    settings.verbose = 0;\n    settings.oldest_live = 0;\n    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */\n    settings.socketpath = NULL;       /* by default, not using a unix socket */\n    settings.factor = 1.25;\n    settings.chunk_size = 48;         /* space for a modest key and value */\n    settings.num_threads = 4;         /* N workers */\n    settings.num_threads_per_udp = 0;\n    settings.prefix_delimiter = ':';\n    settings.detail_enabled = 0;\n    settings.allow_detailed = true;\n    settings.reqs_per_event = DEFAULT_REQS_PER_EVENT;\n    settings.backlog = 1024;\n    settings.binding_protocol = negotiating_prot;\n    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */\n    settings.topkeys = 0;\n    settings.require_sasl = false;\n    settings.extensions.logger = get_stderr_logger();\n}\n\n/*\n * Adds a message header to a connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int add_msghdr(conn *c)\n{\n    struct msghdr *msg;\n\n    assert(c != NULL);\n\n    if (c->msgsize == c->msgused) {\n        msg = realloc(c->msglist, c->msgsize * 2 * sizeof(struct msghdr));\n        if (! msg)\n            return -1;\n        c->msglist = msg;\n        c->msgsize *= 2;\n    }\n\n    msg = c->msglist + c->msgused;\n\n    /* this wipes msg_iovlen, msg_control, msg_controllen, and\n       msg_flags, the last 3 of which aren't defined on solaris: */\n    memset(msg, 0, sizeof(struct msghdr));\n\n    msg->msg_iov = &c->iov[c->iovused];\n\n    if (c->request_addr_size > 0) {\n        msg->msg_name = &c->request_addr;\n        msg->msg_namelen = c->request_addr_size;\n    }\n\n    c->msgbytes = 0;\n    c->msgused++;\n\n    if (IS_UDP(c->transport)) {\n        /* Leave room for the UDP header, which we'll fill in later. */\n        return add_iov(c, NULL, UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\nstatic const char *prot_text(enum protocol prot) {\n    const char *rv = \"unknown\";\n    switch(prot) {\n        case ascii_prot:\n            rv = \"ascii\";\n            break;\n        case binary_prot:\n            rv = \"binary\";\n            break;\n        case negotiating_prot:\n            rv = \"auto-negotiate\";\n            break;\n    }\n    return rv;\n}\n\nstruct {\n    pthread_mutex_t mutex;\n    bool disabled;\n    ssize_t count;\n    uint64_t num_disable;\n} listen_state = { .mutex = PTHREAD_MUTEX_INITIALIZER };\n\nstatic bool is_listen_disabled(void) {\n    bool ret;\n    pthread_mutex_lock(&listen_state.mutex);\n    ret = listen_state.disabled;\n    pthread_mutex_unlock(&listen_state.mutex);\n    return ret;\n}\n\nstatic uint64_t get_listen_disabled_num(void) {\n    uint64_t ret;\n    pthread_mutex_lock(&listen_state.mutex);\n    ret = listen_state.num_disable;\n    pthread_mutex_unlock(&listen_state.mutex);\n    return ret;\n}\n\nstatic void disable_listen(void) {\n    conn *next;\n    pthread_mutex_lock(&listen_state.mutex);\n    listen_state.disabled = true;\n    listen_state.count = 10;\n    ++listen_state.num_disable;\n    pthread_mutex_unlock(&listen_state.mutex);\n\n    for (next = listen_conn; next; next = next->next) {\n        update_event(next, 0);\n        if (listen(next->sfd, 1) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"listen() failed\",\n                                            strerror(errno));\n        }\n    }\n}\n\nvoid safe_close(SOCKET sfd) {\n    if (sfd != INVALID_SOCKET) {\n        int rval;\n        while ((rval = closesocket(sfd)) == SOCKET_ERROR &&\n               (errno == EINTR || errno == EAGAIN)) {\n            /* go ahead and retry */\n        }\n\n        if (rval == SOCKET_ERROR) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"Failed to close socket %d (%s)!!\\n\", (int)sfd,\n                                            strerror(errno));\n        } else {\n            STATS_LOCK();\n            stats.curr_conns--;\n            STATS_UNLOCK();\n\n            if (is_listen_disabled()) {\n                notify_dispatcher();\n            }\n        }\n    }\n}\n\n/*\n * Free list management for connections.\n */\ncache_t *conn_cache;      /* suffix cache */\n\n/**\n * Reset all of the dynamic buffers used by a connection back to their\n * default sizes. The strategy for resizing the buffers is to allocate a\n * new one of the correct size and free the old one if the allocation succeeds\n * instead of using realloc to change the buffer size (because realloc may\n * not shrink the buffers, and will also copy the memory). If the allocation\n * fails the buffer will be unchanged.\n *\n * @param c the connection to resize the buffers for\n * @return true if all allocations succeeded, false if one or more of the\n *         allocations failed.\n */\nstatic bool conn_reset_buffersize(conn *c) {\n    bool ret = true;\n\n    if (c->rsize != DATA_BUFFER_SIZE) {\n        void *ptr = malloc(DATA_BUFFER_SIZE);\n        if (ptr != NULL) {\n            free(c->rbuf);\n            c->rbuf = ptr;\n            c->rsize = DATA_BUFFER_SIZE;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->wsize != DATA_BUFFER_SIZE) {\n        void *ptr = malloc(DATA_BUFFER_SIZE);\n        if (ptr != NULL) {\n            free(c->wbuf);\n            c->wbuf = ptr;\n            c->wsize = DATA_BUFFER_SIZE;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->isize != ITEM_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(item *) * ITEM_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->ilist);\n            c->ilist = ptr;\n            c->isize = ITEM_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->suffixsize != SUFFIX_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(char *) * SUFFIX_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->suffixlist);\n            c->suffixlist = ptr;\n            c->suffixsize = SUFFIX_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->iovsize != IOV_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(struct iovec) * IOV_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->iov);\n            c->iov = ptr;\n            c->iovsize = IOV_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->msgsize != MSG_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(struct msghdr) * MSG_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->msglist);\n            c->msglist = ptr;\n            c->msgsize = MSG_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Constructor for all memory allocations of connection objects. Initialize\n * all members and allocate the transfer buffers.\n *\n * @param buffer The memory allocated by the object cache\n * @param unused1 not used\n * @param unused2 not used\n * @return 0 on success, 1 if we failed to allocate memory\n */\nstatic int conn_constructor(void *buffer, void *unused1, int unused2) {\n    conn *c = buffer;\n    memset(c, 0, sizeof(*c));\n    MEMCACHED_CONN_CREATE(c);\n    (void)unused1; (void)unused2;\n\n    if (!conn_reset_buffersize(c)) {\n        free(c->rbuf);\n        free(c->wbuf);\n        free(c->ilist);\n        free(c->suffixlist);\n        free(c->iov);\n        free(c->msglist);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING,\n                                        NULL,\n                                        \"Failed to allocate buffers for connection\\n\");\n        return 1;\n    }\n\n    STATS_LOCK();\n    stats.conn_structs++;\n    STATS_UNLOCK();\n\n    return 0;\n}\n\n/**\n * Destructor for all connection objects. Release all allocated resources.\n *\n * @param buffer The memory allocated by the objec cache\n * @param unused not used\n */\nstatic void conn_destructor(void *buffer, void *unused) {\n    conn *c = buffer;\n    free(c->rbuf);\n    free(c->wbuf);\n    free(c->ilist);\n    free(c->suffixlist);\n    free(c->iov);\n    free(c->msglist);\n\n    STATS_LOCK();\n    stats.conn_structs--;\n    STATS_UNLOCK();\n    (void)unused;\n}\n\nconn *conn_new(const SOCKET sfd, STATE_FUNC init_state,\n               const int event_flags,\n               const int read_buffer_size, enum network_transport transport,\n               struct event_base *base, struct timeval *timeout) {\n    conn *c = cache_alloc(conn_cache);\n    if (c == NULL) {\n        return NULL;\n    }\n\n    assert(c->thread == NULL);\n\n    if (c->rsize < read_buffer_size) {\n        void *mem = malloc(read_buffer_size);\n        if (mem) {\n            c->rsize = read_buffer_size;\n            free(c->rbuf);\n            c->rbuf = mem;\n        } else {\n            assert(c->thread == NULL);\n            cache_free(conn_cache, c);\n            return NULL;\n        }\n    }\n\n    c->transport = transport;\n    c->protocol = settings.binding_protocol;\n\n    if (IS_UDP(transport)) {\n        c->request_addr_size = sizeof(c->request_addr);\n    } else {\n        c->request_addr_size = 0;\n    }\n\n    if (settings.verbose > 1) {\n        if (init_state == conn_listening) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d server listening (%s)\\n\", sfd,\n                                            prot_text(c->protocol));\n        } else if (IS_UDP(transport)) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d server listening (udp)\\n\", sfd);\n        } else if (c->protocol == negotiating_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new auto-negotiating client connection\\n\",\n                                            sfd);\n        } else if (c->protocol == ascii_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new ascii client connection.\\n\", sfd);\n        } else if (c->protocol == binary_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new binary client connection.\\n\", sfd);\n        } else {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new unknown (%d) client connection\\n\",\n                                            sfd, c->protocol);\n            assert(false);\n        }\n    }\n\n    c->sfd = sfd;\n    c->state = init_state;\n    c->rlbytes = 0;\n    c->cmd = -1;\n    c->ascii_cmd = NULL;\n    c->rbytes = c->wbytes = 0;\n    c->wcurr = c->wbuf;\n    c->rcurr = c->rbuf;\n    c->ritem = 0;\n    c->icurr = c->ilist;\n    c->suffixcurr = c->suffixlist;\n    c->ileft = 0;\n    c->suffixleft = 0;\n    c->iovused = 0;\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->next = NULL;\n    c->list_state = 0;\n\n    c->write_and_go = init_state;\n    c->write_and_free = 0;\n    c->item = 0;\n\n    c->noreply = false;\n\n    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = event_flags;\n\n    if (!register_event(c, timeout)) {\n        assert(c->thread == NULL);\n        cache_free(conn_cache, c);\n        return NULL;\n    }\n\n    STATS_LOCK();\n    stats.total_conns++;\n    STATS_UNLOCK();\n\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    c->refcount = 1;\n\n    MEMCACHED_CONN_ALLOCATE(c->sfd);\n\n    perform_callbacks(ON_CONNECT, NULL, c);\n\n    return c;\n}\n\nstatic void conn_cleanup(conn *c) {\n    assert(c != NULL);\n\n    if (c->item) {\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n\n    if (c->ileft != 0) {\n        for (; c->ileft > 0; c->ileft--,c->icurr++) {\n            settings.engine.v1->release(settings.engine.v0, c, *(c->icurr));\n        }\n    }\n\n    if (c->suffixleft != 0) {\n        for (; c->suffixleft > 0; c->suffixleft--, c->suffixcurr++) {\n            cache_free(c->thread->suffix_cache, *(c->suffixcurr));\n        }\n    }\n\n    if (c->write_and_free) {\n        free(c->write_and_free);\n        c->write_and_free = 0;\n    }\n\n    if (c->sasl_conn) {\n        sasl_dispose(&c->sasl_conn);\n        c->sasl_conn = NULL;\n    }\n\n    c->engine_storage = NULL;\n    c->tap_iterator = NULL;\n    c->thread = NULL;\n    assert(c->next == NULL);\n    c->ascii_cmd = NULL;\n    c->sfd = INVALID_SOCKET;\n}\n\nvoid conn_close(conn *c) {\n    assert(c != NULL);\n    assert(c->sfd == INVALID_SOCKET);\n\n    if (c->ascii_cmd != NULL) {\n        c->ascii_cmd->abort(c->ascii_cmd, c);\n    }\n\n    assert(c->thread);\n    LOCK_THREAD(c->thread);\n    /* remove from pending-io list */\n    if (settings.verbose > 1 && list_contains(c->thread->pending_io, c)) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Current connection was in the pending-io list.. Nuking it\\n\");\n    }\n    c->thread->pending_io = list_remove(c->thread->pending_io, c);\n    c->thread->pending_close = list_remove(c->thread->pending_close, c);\n    UNLOCK_THREAD(c->thread);\n\n    conn_cleanup(c);\n\n    /*\n     * The contract with the object cache is that we should return the\n     * object in a constructed state. Reset the buffers to the default\n     * size\n     */\n    conn_reset_buffersize(c);\n    assert(c->thread == NULL);\n    cache_free(conn_cache, c);\n}\n\n/*\n * Shrinks a connection's buffers if they're too big.  This prevents\n * periodic large \"get\" requests from permanently chewing lots of server\n * memory.\n *\n * This should only be called in between requests since it can wipe output\n * buffers!\n */\nstatic void conn_shrink(conn *c) {\n    assert(c != NULL);\n\n    if (IS_UDP(c->transport))\n        return;\n\n    if (c->rsize > READ_BUFFER_HIGHWAT && c->rbytes < DATA_BUFFER_SIZE) {\n        char *newbuf;\n\n        if (c->rcurr != c->rbuf)\n            memmove(c->rbuf, c->rcurr, (size_t)c->rbytes);\n\n        newbuf = (char *)realloc((void *)c->rbuf, DATA_BUFFER_SIZE);\n\n        if (newbuf) {\n            c->rbuf = newbuf;\n            c->rsize = DATA_BUFFER_SIZE;\n        }\n        /* TODO check other branch... */\n        c->rcurr = c->rbuf;\n    }\n\n    if (c->isize > ITEM_LIST_HIGHWAT) {\n        item **newbuf = (item**) realloc((void *)c->ilist, ITEM_LIST_INITIAL * sizeof(c->ilist[0]));\n        if (newbuf) {\n            c->ilist = newbuf;\n            c->isize = ITEM_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->msgsize > MSG_LIST_HIGHWAT) {\n        struct msghdr *newbuf = (struct msghdr *) realloc((void *)c->msglist, MSG_LIST_INITIAL * sizeof(c->msglist[0]));\n        if (newbuf) {\n            c->msglist = newbuf;\n            c->msgsize = MSG_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->iovsize > IOV_LIST_HIGHWAT) {\n        struct iovec *newbuf = (struct iovec *) realloc((void *)c->iov, IOV_LIST_INITIAL * sizeof(c->iov[0]));\n        if (newbuf) {\n            c->iov = newbuf;\n            c->iovsize = IOV_LIST_INITIAL;\n        }\n    /* TODO check return value */\n    }\n}\n\n/**\n * Convert a state name to a human readable form.\n */\nconst char *state_text(STATE_FUNC state) {\n    if (state == conn_listening) {\n        return \"conn_listening\";\n    } else if (state == conn_new_cmd) {\n        return \"conn_new_cmd\";\n    } else if (state == conn_waiting) {\n        return \"conn_waiting\";\n    } else if (state == conn_read) {\n        return \"conn_read\";\n    } else if (state == conn_parse_cmd) {\n        return \"conn_parse_cmd\";\n    } else if (state == conn_write) {\n        return \"conn_write\";\n    } else if (state == conn_nread) {\n        return \"conn_nread\";\n    } else if (state == conn_swallow) {\n        return \"conn_swallow\";\n    } else if (state == conn_closing) {\n        return \"conn_closing\";\n    } else if (state == conn_mwrite) {\n        return \"conn_mwrite\";\n    } else if (state == conn_ship_log) {\n        return \"conn_ship_log\";\n    } else if (state == conn_add_tap_client) {\n        return \"conn_add_tap_client\";\n    } else if (state == conn_setup_tap_stream) {\n        return \"conn_setup_tap_stream\";\n    } else if (state == conn_pending_close) {\n        return \"conn_pending_close\";\n    } else if (state == conn_immediate_close) {\n        return \"conn_immediate_close\";\n    } else {\n        return \"Unknown\";\n    }\n}\n\n/*\n * Sets a connection's current state in the state machine. Any special\n * processing that needs to happen on certain state transitions can\n * happen here.\n */\nvoid conn_set_state(conn *c, STATE_FUNC state) {\n    assert(c != NULL);\n\n    if (state != c->state) {\n        /*\n         * The connections in the \"tap thread\" behaves differently than\n         * normal connections because they operate in a full duplex mode.\n         * New messages may appear from both sides, so we can't block on\n         * read from the nework / engine\n         */\n        if (c->thread == tap_thread) {\n            if (state == conn_waiting) {\n                c->which = EV_WRITE;\n                state = conn_ship_log;\n            }\n        }\n\n        if (settings.verbose > 2 || c->state == conn_closing\n            || c->state == conn_add_tap_client) {\n            settings.extensions.logger->log(EXTENSION_LOG_DETAIL, c,\n                                            \"%d: going from %s to %s\\n\",\n                                            c->sfd, state_text(c->state),\n                                            state_text(state));\n        }\n\n        if (state == conn_write || state == conn_mwrite) {\n            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->wbuf, c->wbytes);\n        }\n\n        c->state = state;\n    }\n}\n\n/*\n * Ensures that there is room for another struct iovec in a connection's\n * iov list.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int ensure_iov_space(conn *c) {\n    assert(c != NULL);\n\n    if (c->iovused >= c->iovsize) {\n        int i, iovnum;\n        struct iovec *new_iov = (struct iovec *)realloc(c->iov,\n                                (c->iovsize * 2) * sizeof(struct iovec));\n        if (! new_iov)\n            return -1;\n        c->iov = new_iov;\n        c->iovsize *= 2;\n\n        /* Point all the msghdr structures at the new list. */\n        for (i = 0, iovnum = 0; i < c->msgused; i++) {\n            c->msglist[i].msg_iov = &c->iov[iovnum];\n            iovnum += c->msglist[i].msg_iovlen;\n        }\n    }\n\n    return 0;\n}\n\n\n/*\n * Adds data to the list of pending data that will be written out to a\n * connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\n\nstatic int add_iov(conn *c, const void *buf, int len) {\n    struct msghdr *m;\n    int leftover;\n    bool limit_to_mtu;\n\n    assert(c != NULL);\n\n    do {\n        m = &c->msglist[c->msgused - 1];\n\n        /*\n         * Limit UDP packets, and the first payloads of TCP replies, to\n         * UDP_MAX_PAYLOAD_SIZE bytes.\n         */\n        limit_to_mtu = IS_UDP(c->transport) || (1 == c->msgused);\n\n        /* We may need to start a new msghdr if this one is full. */\n        if (m->msg_iovlen == IOV_MAX ||\n            (limit_to_mtu && c->msgbytes >= UDP_MAX_PAYLOAD_SIZE)) {\n            add_msghdr(c);\n            m = &c->msglist[c->msgused - 1];\n        }\n\n        if (ensure_iov_space(c) != 0)\n            return -1;\n\n        /* If the fragment is too big to fit in the datagram, split it up */\n        if (limit_to_mtu && len + c->msgbytes > UDP_MAX_PAYLOAD_SIZE) {\n            leftover = len + c->msgbytes - UDP_MAX_PAYLOAD_SIZE;\n            len -= leftover;\n        } else {\n            leftover = 0;\n        }\n\n        m = &c->msglist[c->msgused - 1];\n        m->msg_iov[m->msg_iovlen].iov_base = (void *)buf;\n        m->msg_iov[m->msg_iovlen].iov_len = len;\n\n        c->msgbytes += len;\n        c->iovused++;\n        m->msg_iovlen++;\n\n        buf = ((char *)buf) + len;\n        len = leftover;\n    } while (leftover > 0);\n\n    return 0;\n}\n\n\n/*\n * Constructs a set of UDP headers and attaches them to the outgoing messages.\n */\nstatic int build_udp_headers(conn *c) {\n    int i;\n    unsigned char *hdr;\n\n    assert(c != NULL);\n\n    if (c->msgused > c->hdrsize) {\n        void *new_hdrbuf;\n        if (c->hdrbuf)\n            new_hdrbuf = realloc(c->hdrbuf, c->msgused * 2 * UDP_HEADER_SIZE);\n        else\n            new_hdrbuf = malloc(c->msgused * 2 * UDP_HEADER_SIZE);\n        if (! new_hdrbuf)\n            return -1;\n        c->hdrbuf = (unsigned char *)new_hdrbuf;\n        c->hdrsize = c->msgused * 2;\n    }\n\n    hdr = c->hdrbuf;\n    for (i = 0; i < c->msgused; i++) {\n        c->msglist[i].msg_iov[0].iov_base = (void*)hdr;\n        c->msglist[i].msg_iov[0].iov_len = UDP_HEADER_SIZE;\n        *hdr++ = c->request_id / 256;\n        *hdr++ = c->request_id % 256;\n        *hdr++ = i / 256;\n        *hdr++ = i % 256;\n        *hdr++ = c->msgused / 256;\n        *hdr++ = c->msgused % 256;\n        *hdr++ = 0;\n        *hdr++ = 0;\n        assert((void *) hdr == (caddr_t)c->msglist[i].msg_iov[0].iov_base + UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\n\nstatic void out_string(conn *c, const char *str) {\n    size_t len;\n\n    assert(c != NULL);\n\n    if (c->noreply) {\n        if (settings.verbose > 1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \">%d NOREPLY %s\\n\", c->sfd, str);\n        }\n        c->noreply = false;\n        if (c->sbytes > 0) {\n            conn_set_state(c, conn_swallow);\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n        return;\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d %s\\n\", c->sfd, str);\n    }\n\n    /* Nuke a partial output... */\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    add_msghdr(c);\n\n    len = strlen(str);\n    if ((len + 2) > c->wsize) {\n        /* ought to be always enough. just fail for simplicity */\n        str = \"SERVER_ERROR output line too long\";\n        len = strlen(str);\n    }\n\n    memcpy(c->wbuf, str, len);\n    memcpy(c->wbuf + len, \"\\r\\n\", 2);\n    c->wbytes = len + 2;\n    c->wcurr = c->wbuf;\n\n    conn_set_state(c, conn_write);\n\n    if (c->sbytes > 0) {\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n\n    return;\n}\n\n/*\n * we get here after reading the value in set/add/replace commands. The command\n * has been stored in c->cmd, and the item is ready in c->item.\n */\nstatic void complete_update_ascii(conn *c) {\n    assert(c != NULL);\n\n    item *it = c->item;\n    item_info info = { .nvalue = 1 };\n    if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n        settings.engine.v1->release(settings.engine.v0, c, it);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: Failed to get item info\\n\",\n                                        c->sfd);\n        out_string(c, \"SERVER_ERROR failed to get item details\");\n        return;\n    }\n\n    c->sbytes = 2; // swallow \\r\\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->store(settings.engine.v0, c, it, &c->cas,\n                                        c->store_op, 0);\n    }\n\n#ifdef ENABLE_DTRACE\n    switch (c->store_op) {\n    case OPERATION_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, info.key, info.nkey,\n                                 (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_CAS:\n        MEMCACHED_COMMAND_CAS(c->sfd, info.key, info.nkey, info.nbytes, c->cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"STORED\");\n        break;\n    case ENGINE_KEY_EEXISTS:\n        out_string(c, \"EXISTS\");\n        break;\n    case ENGINE_KEY_ENOENT:\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case ENGINE_NOT_STORED:\n        out_string(c, \"NOT_STORED\");\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        out_string(c, \"SERVER_ERROR not supported\");\n        break;\n    case ENGINE_ENOMEM:\n        out_string(c, \"SERVER_ERROR out of memory\");\n        break;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    case ENGINE_EINVAL:\n        out_string(c, \"CLIENT_ERROR invalid arguments\");\n        break;\n    case ENGINE_E2BIG:\n        out_string(c, \"CLIENT_ERROR value too big\");\n        break;\n    case ENGINE_EACCESS:\n        out_string(c, \"CLIENT_ERROR access control violation\");\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        out_string(c, \"SERVER_ERROR not my vbucket\");\n        break;\n    case ENGINE_FAILED:\n        out_string(c, \"SERVER_ERROR failure\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_WANT_MORE:\n        assert(false);\n        c->state = conn_closing;\n        break;\n\n    default:\n        out_string(c, \"SERVER_ERROR internal\");\n    }\n\n    if (c->store_op == OPERATION_CAS) {\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            SLAB_INCR(c, cas_hits, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_EEXISTS:\n            SLAB_INCR(c, cas_badval, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_ENOENT:\n            STATS_NOKEY(c, cas_misses);\n            break;\n        default:\n            ;\n        }\n    } else {\n        SLAB_INCR(c, cmd_set, info.key, info.nkey);\n    }\n\n    if (!c->ewouldblock) {\n        /* release the c->item reference */\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n}\n\n/**\n * get a pointer to the start of the request struct for the current command\n */\nstatic void* binary_get_request(conn *c) {\n    char *ret = c->rcurr;\n    ret -= (sizeof(c->binary_header) + c->binary_header.request.keylen +\n            c->binary_header.request.extlen);\n\n    assert(ret >= c->rbuf);\n    return ret;\n}\n\n/**\n * get a pointer to the key in this request\n */\nstatic char* binary_get_key(conn *c) {\n    return c->rcurr - (c->binary_header.request.keylen);\n}\n\n/**\n * Insert a key into a buffer, but replace all non-printable characters\n * with a '.'.\n *\n * @param dest where to store the output\n * @param destsz size of destination buffer\n * @param prefix string to insert before the data\n * @param client the client we are serving\n * @param from_client set to true if this data is from the client\n * @param key the key to add to the buffer\n * @param nkey the number of bytes in the key\n * @return number of bytes in dest if success, -1 otherwise\n */\nstatic ssize_t key_to_printable_buffer(char *dest, size_t destsz,\n                                       int client, bool from_client,\n                                       const char *prefix,\n                                       const char *key,\n                                       size_t nkey)\n{\n    ssize_t nw = snprintf(dest, destsz, \"%c%d %s \", from_client ? '>' : '<',\n                          client, prefix);\n    size_t ii;\n    char *ptr = dest + nw;\n    if (nw == -1) {\n        return -1;\n    }\n\n    destsz -= nw;\n    if (nkey > destsz) {\n        nkey = destsz;\n    }\n\n    for (ii = 0; ii < nkey; ++ii, ++key, ++ptr) {\n        if (isgraph(*key)) {\n            *ptr = *key;\n        } else {\n            *ptr = '.';\n        }\n    }\n\n    *ptr = '\\0';\n    return ptr - dest;\n}\n\n/**\n * Convert a byte array to a text string\n *\n * @param dest where to store the output\n * @param destsz size of destination buffer\n * @param prefix string to insert before the data\n * @param client the client we are serving\n * @param from_client set to true if this data is from the client\n * @param data the data to add to the buffer\n * @param size the number of bytes in data to print\n * @return number of bytes in dest if success, -1 otherwise\n */\nstatic ssize_t bytes_to_output_string(char *dest, size_t destsz,\n                                      int client, bool from_client,\n                                      const char *prefix,\n                                      const char *data,\n                                      size_t size)\n{\n    ssize_t nw = snprintf(dest, destsz, \"%c%d %s\", from_client ? '>' : '<',\n                          client, prefix);\n    size_t ii;\n    ssize_t offset = nw;\n    if (nw == -1) {\n        return -1;\n    }\n\n    for (ii = 0; ii < size; ++ii) {\n        if (ii % 4 == 0) {\n            if ((nw = snprintf(dest + offset, destsz - offset, \"\\n%c%d  \",\n                               from_client ? '>' : '<', client)) == -1) {\n                return  -1;\n            }\n            offset += nw;\n        }\n        if ((nw = snprintf(dest + offset, destsz - offset,\n                           \" 0x%02x\", (unsigned char)data[ii])) == -1) {\n            return -1;\n        }\n        offset += nw;\n    }\n\n    if ((nw = snprintf(dest + offset, destsz - offset, \"\\n\")) == -1) {\n        return -1;\n    }\n\n    return offset + nw;\n}\n\nstatic void add_bin_header(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len) {\n    protocol_binary_response_header* header;\n\n    assert(c);\n\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        /* XXX:  out_string is inappropriate here */\n        out_string(c, \"SERVER_ERROR out of memory\");\n        return;\n    }\n\n    header = (protocol_binary_response_header *)c->wbuf;\n\n    header->response.magic = (uint8_t)PROTOCOL_BINARY_RES;\n    header->response.opcode = c->binary_header.request.opcode;\n    header->response.keylen = (uint16_t)htons(key_len);\n\n    header->response.extlen = (uint8_t)hdr_len;\n    header->response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES;\n    header->response.status = (uint16_t)htons(err);\n\n    header->response.bodylen = htonl(body_len);\n    header->response.opaque = c->opaque;\n    header->response.cas = htonll(c->cas);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (bytes_to_output_string(buffer, sizeof(buffer), c->sfd, false,\n                                   \"Writing bin response:\",\n                                   (const char*)header->bytes,\n                                   sizeof(header->bytes)) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"%s\", buffer);\n        }\n    }\n\n    add_iov(c, c->wbuf, sizeof(header->response));\n}\n\n/**\n * Convert an error code generated from the storage engine to the corresponding\n * error code used by the protocol layer.\n * @param e the error code as used in the engine\n * @return the error code as used by the protocol layer\n */\nstatic protocol_binary_response_status engine_error_2_protocol_error(ENGINE_ERROR_CODE e) {\n    protocol_binary_response_status ret;\n\n    switch (e) {\n    case ENGINE_SUCCESS:\n        return PROTOCOL_BINARY_RESPONSE_SUCCESS;\n    case ENGINE_KEY_ENOENT:\n        return PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n    case ENGINE_KEY_EEXISTS:\n        return PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n    case ENGINE_ENOMEM:\n        return PROTOCOL_BINARY_RESPONSE_ENOMEM;\n    case ENGINE_TMPFAIL:\n        return PROTOCOL_BINARY_RESPONSE_ETMPFAIL;\n    case ENGINE_NOT_STORED:\n        return PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n    case ENGINE_EINVAL:\n        return PROTOCOL_BINARY_RESPONSE_EINVAL;\n    case ENGINE_ENOTSUP:\n        return PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED;\n    case ENGINE_E2BIG:\n        return PROTOCOL_BINARY_RESPONSE_E2BIG;\n    case ENGINE_NOT_MY_VBUCKET:\n        return PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET;\n    case ENGINE_ERANGE:\n        return PROTOCOL_BINARY_RESPONSE_ERANGE;\n    default:\n        ret = PROTOCOL_BINARY_RESPONSE_EINTERNAL;\n    }\n\n    return ret;\n}\n\nstatic void write_bin_packet(conn *c, protocol_binary_response_status err, int swallow) {\n    ssize_t len;\n    char buffer[1024] = { [sizeof(buffer) - 1] = '\\0' };\n\n    switch (err) {\n    case PROTOCOL_BINARY_RESPONSE_SUCCESS:\n        len = 0;\n        break;\n    case PROTOCOL_BINARY_RESPONSE_ENOMEM:\n        len = snprintf(buffer, sizeof(buffer), \"Out of memory\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_ETMPFAIL:\n        len = snprintf(buffer, sizeof(buffer), \"Temporary failure\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND:\n        len = snprintf(buffer, sizeof(buffer), \"Unknown command\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_KEY_ENOENT:\n        len = snprintf(buffer, sizeof(buffer), \"Not found\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_EINVAL:\n        len = snprintf(buffer, sizeof(buffer), \"Invalid arguments\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS:\n        len = snprintf(buffer, sizeof(buffer), \"Data exists for key\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_E2BIG:\n        len = snprintf(buffer, sizeof(buffer), \"Too large\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL:\n        len = snprintf(buffer, sizeof(buffer),\n                       \"Non-numeric server-side value for incr or decr\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_STORED:\n        len = snprintf(buffer, sizeof(buffer), \"Not stored\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_AUTH_ERROR:\n        len = snprintf(buffer, sizeof(buffer), \"Auth failure\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED:\n        len = snprintf(buffer, sizeof(buffer), \"Not supported\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET:\n        len = snprintf(buffer, sizeof(buffer),\n                       \"I'm not responsible for this vbucket\");\n        break;\n\n    default:\n        len = snprintf(buffer, sizeof(buffer), \"UNHANDLED ERROR (%d)\", err);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \">%d UNHANDLED ERROR: %d\\n\", c->sfd, err);\n    }\n\n    /* Allow the engine to pass extra error information */\n    if (settings.engine.v1->errinfo != NULL) {\n        size_t elen = settings.engine.v1->errinfo(settings.engine.v0, c, buffer + len + 2,\n                                                  sizeof(buffer) - len - 3);\n\n        if (elen > 0) {\n            memcpy(buffer + len, \": \", 2);\n            len += elen + 2;\n        }\n    }\n\n    if (err != PROTOCOL_BINARY_RESPONSE_SUCCESS && settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d Writing an error: %s\\n\", c->sfd,\n                                        buffer);\n    }\n\n    add_bin_header(c, err, 0, 0, len);\n    if (len > 0) {\n        add_iov(c, buffer, len);\n    }\n    conn_set_state(c, conn_mwrite);\n    if (swallow > 0) {\n        c->sbytes = swallow;\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n}\n\n/* Form and send a response to a command over the binary protocol */\nstatic void write_bin_response(conn *c, const void *d, int hlen, int keylen, int dlen) {\n    if (!c->noreply || c->cmd == PROTOCOL_BINARY_CMD_GET ||\n        c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n        add_bin_header(c, 0, hlen, keylen, dlen);\n        if(dlen > 0) {\n            add_iov(c, d, dlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        conn_set_state(c, conn_new_cmd);\n    }\n}\n\n\nstatic void complete_incr_bin(conn *c) {\n    protocol_binary_response_incr* rsp = (protocol_binary_response_incr*)c->wbuf;\n    protocol_binary_request_incr* req = binary_get_request(c);\n\n    assert(c != NULL);\n    assert(c->wsize >= sizeof(*rsp));\n\n    /* fix byteorder in the request */\n    uint64_t delta = ntohll(req->message.body.delta);\n    uint64_t initial = ntohll(req->message.body.initial);\n    rel_time_t expiration = ntohl(req->message.body.expiration);\n    char *key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n    bool incr = (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT ||\n                 c->cmd == PROTOCOL_BINARY_CMD_INCREMENTQ);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        ssize_t nw;\n        nw = key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                     incr ? \"INCR\" : \"DECR\", key, nkey);\n        if (nw != -1) {\n            if (snprintf(buffer + nw, sizeof(buffer) - nw,\n                         \" %\" PRIu64 \", %\" PRIu64 \", %\" PRIu64 \"\\n\",\n                         delta, initial, (uint64_t)expiration) != -1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\",\n                                                buffer);\n            }\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->arithmetic(settings.engine.v0,\n                                             c, key, nkey, incr,\n                                             req->message.body.expiration != 0xffffffff,\n                                             delta, initial, expiration,\n                                             &c->cas,\n                                             &rsp->message.body.value,\n                                             c->binary_header.request.vbucket);\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        rsp->message.body.value = htonll(rsp->message.body.value);\n        write_bin_response(c, &rsp->message.body, 0, 0,\n                           sizeof (rsp->message.body.value));\n        if (incr) {\n            STATS_INCR(c, incr_hits, key, nkey);\n        } else {\n            STATS_INCR(c, decr_hits, key, nkey);\n        }\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        if (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT) {\n            STATS_INCR(c, incr_misses, key, nkey);\n        } else {\n            STATS_INCR(c, decr_misses, key, nkey);\n        }\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_EINVAL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL, 0);\n        break;\n    case ENGINE_NOT_STORED:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_STORED, 0);\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        abort();\n    }\n}\n\nstatic void complete_update_bin(conn *c) {\n    protocol_binary_response_status eno = PROTOCOL_BINARY_RESPONSE_EINVAL;\n    assert(c != NULL);\n\n    item *it = c->item;\n    item_info info = { .nvalue = 1 };\n    if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n        settings.engine.v1->release(settings.engine.v0, c, it);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: Failed to get item info\\n\",\n                                        c->sfd);\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n        return;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->store(settings.engine.v0, c,\n                                        it, &c->cas, c->store_op,\n                                        c->binary_header.request.vbucket);\n    }\n\n#ifdef ENABLE_DTRACE\n    switch (c->cmd) {\n    case OPERATION_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, info.key, info.nkey,\n                                 (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        /* Stored */\n        write_bin_response(c, NULL, 0, 0, 0);\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    default:\n        if (c->store_op == OPERATION_ADD) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n        } else if(c->store_op == OPERATION_REPLACE) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n        } else {\n            eno = PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n        }\n        write_bin_packet(c, eno, 0);\n    }\n\n    if (c->store_op == OPERATION_CAS) {\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            SLAB_INCR(c, cas_hits, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_EEXISTS:\n            SLAB_INCR(c, cas_badval, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_ENOENT:\n            STATS_NOKEY(c, cas_misses);\n            break;\n        default:\n            ;\n        }\n    } else {\n        SLAB_INCR(c, cmd_set, info.key, info.nkey);\n    }\n\n    if (!c->ewouldblock) {\n        /* release the c->item reference */\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n}\n\nstatic void process_bin_get(conn *c) {\n    item *it;\n\n    protocol_binary_response_get* rsp = (protocol_binary_response_get*)c->wbuf;\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"GET\", key, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->get(settings.engine.v0, c, &it, key, nkey,\n                                      c->binary_header.request.vbucket);\n    }\n\n    uint16_t keylen;\n    uint32_t bodylen;\n    item_info info = { .nvalue = 1 };\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"%d: Failed to get item info\\n\",\n                                            c->sfd);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            break;\n        }\n\n        keylen = 0;\n        bodylen = sizeof(rsp->message.body) + info.nbytes;\n\n        STATS_HIT(c, get, key, nkey);\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n            bodylen += nkey;\n            keylen = nkey;\n        }\n        add_bin_header(c, 0, sizeof(rsp->message.body), keylen, bodylen);\n        rsp->message.header.response.cas = htonll(info.cas);\n\n        // add the flags\n        rsp->message.body.flags = info.flags;\n        add_iov(c, &rsp->message.body, sizeof(rsp->message.body));\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n            add_iov(c, info.key, nkey);\n        }\n\n        add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n        conn_set_state(c, conn_mwrite);\n        /* Remember this item so we can garbage collect it later */\n        c->item = it;\n        break;\n    case ENGINE_KEY_ENOENT:\n        STATS_MISS(c, get, key, nkey);\n\n        MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n\n        if (c->noreply) {\n            conn_set_state(c, conn_new_cmd);\n        } else {\n            if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n                char *ofs = c->wbuf + sizeof(protocol_binary_response_header);\n                add_bin_header(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT,\n                               0, nkey, nkey);\n                memcpy(ofs, key, nkey);\n                add_iov(c, ofs, nkey);\n                conn_set_state(c, conn_mwrite);\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n            }\n        }\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n\n    default:\n        /* @todo add proper error handling! */\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Unknown error code: %d\\n\", ret);\n        abort();\n    }\n\n    if (settings.detail_enabled && ret != ENGINE_EWOULDBLOCK) {\n        stats_prefix_record_get(key, nkey, ret == ENGINE_SUCCESS);\n    }\n}\n\nstatic void append_bin_stats(const char *key, const uint16_t klen,\n                             const char *val, const uint32_t vlen,\n                             conn *c) {\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    uint32_t bodylen = klen + vlen;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = PROTOCOL_BINARY_CMD_STAT,\n        .response.keylen = (uint16_t)htons(klen),\n        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,\n        .response.bodylen = htonl(bodylen),\n        .response.opaque = c->opaque\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (klen > 0) {\n        memcpy(buf, key, klen);\n        buf += klen;\n\n        if (vlen > 0) {\n            memcpy(buf, val, vlen);\n        }\n    }\n\n    c->dynamic_buffer.offset += sizeof(header.response) + bodylen;\n}\n\n/**\n * Append a key-value pair to the stats output buffer. This function assumes\n * that the output buffer is big enough (it will be if you call it through\n * append_stats)\n */\nstatic void append_ascii_stats(const char *key, const uint16_t klen,\n                               const char *val, const uint32_t vlen,\n                               conn *c) {\n    char *pos = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    uint32_t nbytes = 5; /* \"END\\r\\n\" or \"STAT \" */\n\n    if (klen == 0 && vlen == 0) {\n        memcpy(pos, \"END\\r\\n\", 5);\n    } else {\n        memcpy(pos, \"STAT \", 5);\n        memcpy(pos + nbytes, key, klen);\n        nbytes += klen;\n        if (vlen != 0) {\n            pos[nbytes] = ' ';\n            ++nbytes;\n            memcpy(pos + nbytes, val, vlen);\n            nbytes += vlen;\n        }\n        memcpy(pos + nbytes, \"\\r\\n\", 2);\n        nbytes += 2;\n    }\n\n    c->dynamic_buffer.offset += nbytes;\n}\n\nstatic bool grow_dynamic_buffer(conn *c, size_t needed) {\n    size_t nsize = c->dynamic_buffer.size;\n    size_t available = nsize - c->dynamic_buffer.offset;\n    bool rv = true;\n\n    /* Special case: No buffer -- need to allocate fresh */\n    if (c->dynamic_buffer.buffer == NULL) {\n        nsize = 1024;\n        available = c->dynamic_buffer.size = c->dynamic_buffer.offset = 0;\n    }\n\n    while (needed > available) {\n        assert(nsize > 0);\n        nsize = nsize << 1;\n        available = nsize - c->dynamic_buffer.offset;\n    }\n\n    if (nsize != c->dynamic_buffer.size) {\n        char *ptr = realloc(c->dynamic_buffer.buffer, nsize);\n        if (ptr) {\n            c->dynamic_buffer.buffer = ptr;\n            c->dynamic_buffer.size = nsize;\n        } else {\n            rv = false;\n        }\n    }\n\n    return rv;\n}\n\nstatic void append_stats(const char *key, const uint16_t klen,\n                         const char *val, const uint32_t vlen,\n                         const void *cookie)\n{\n    /* value without a key is invalid */\n    if (klen == 0 && vlen > 0) {\n        return ;\n    }\n\n    conn *c = (conn*)cookie;\n\n    if (c->protocol == binary_prot) {\n        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);\n        if (!grow_dynamic_buffer(c, needed)) {\n            return ;\n        }\n        append_bin_stats(key, klen, val, vlen, c);\n    } else {\n        size_t needed = vlen + klen + 10; // 10 == \"STAT = \\r\\n\"\n        if (!grow_dynamic_buffer(c, needed)) {\n            return ;\n        }\n        append_ascii_stats(key, klen, val, vlen, c);\n    }\n\n    assert(c->dynamic_buffer.offset <= c->dynamic_buffer.size);\n}\n\nstatic void process_bin_stat(conn *c) {\n    char *subcommand = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"STATS\", subcommand, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        if (nkey == 0) {\n            /* request all statistics */\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c, NULL, 0, append_stats);\n            if (ret == ENGINE_SUCCESS) {\n                server_stats(&append_stats, c, false);\n            }\n        } else if (strncmp(subcommand, \"reset\", 5) == 0) {\n            stats_reset(c);\n            settings.engine.v1->reset_stats(settings.engine.v0, c);\n        } else if (strncmp(subcommand, \"settings\", 8) == 0) {\n            process_stat_settings(&append_stats, c);\n        } else if (strncmp(subcommand, \"detail\", 6) == 0) {\n            char *subcmd_pos = subcommand + 6;\n            if (settings.allow_detailed) {\n                if (strncmp(subcmd_pos, \" dump\", 5) == 0) {\n                    int len;\n                    char *dump_buf = stats_prefix_dump(&len);\n                    if (dump_buf == NULL || len <= 0) {\n                        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n                        return ;\n                    } else {\n                        append_stats(\"detailed\", strlen(\"detailed\"), dump_buf, len, c);\n                        free(dump_buf);\n                    }\n                } else if (strncmp(subcmd_pos, \" on\", 3) == 0) {\n                    settings.detail_enabled = 1;\n                } else if (strncmp(subcmd_pos, \" off\", 4) == 0) {\n                    settings.detail_enabled = 0;\n                } else {\n                    write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n                    return;\n                }\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n                return;\n            }\n        } else if (strncmp(subcommand, \"aggregate\", 9) == 0) {\n            server_stats(&append_stats, c, true);\n        } else if (strncmp(subcommand, \"topkeys\", 7) == 0) {\n            topkeys_t *tk = get_independent_stats(c)->topkeys;\n            if (tk != NULL) {\n                topkeys_stats(tk, c, current_time, append_stats);\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n                return;\n            }\n        } else {\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c,\n                                                subcommand, nkey,\n                                                append_stats);\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        append_stats(NULL, 0, NULL, 0, c);\n        write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n        c->dynamic_buffer.buffer = NULL;\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n}\n\nstatic void bin_read_chunk(conn *c, enum bin_substates next_substate, uint32_t chunk) {\n    assert(c);\n    c->substate = next_substate;\n    c->rlbytes = chunk;\n\n    /* Ok... do we have room for everything in our buffer? */\n    ptrdiff_t offset = c->rcurr + sizeof(protocol_binary_request_header) - c->rbuf;\n    if (c->rlbytes > c->rsize - offset) {\n        size_t nsize = c->rsize;\n        size_t size = c->rlbytes + sizeof(protocol_binary_request_header);\n\n        while (size > nsize) {\n            nsize *= 2;\n        }\n\n        if (nsize != c->rsize) {\n            char *newm;\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                        \"%d: Need to grow buffer from %lu to %lu\\n\",\n                        c->sfd, (unsigned long)c->rsize, (unsigned long)nsize);\n            }\n            newm = realloc(c->rbuf, nsize);\n            if (newm == NULL) {\n                if (settings.verbose) {\n                    settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                            \"%d: Failed to grow buffer.. closing connection\\n\",\n                            c->sfd);\n                }\n                conn_set_state(c, conn_closing);\n                return;\n            }\n\n            c->rbuf= newm;\n            /* rcurr should point to the same offset in the packet */\n            c->rcurr = c->rbuf + offset - sizeof(protocol_binary_request_header);\n            c->rsize = nsize;\n        }\n        if (c->rbuf != c->rcurr) {\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n            c->rcurr = c->rbuf;\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                \"%d: Repack input buffer\\n\",\n                                                c->sfd);\n            }\n        }\n    }\n\n    /* preserve the header in the buffer.. */\n    c->ritem = c->rcurr + sizeof(protocol_binary_request_header);\n    conn_set_state(c, conn_nread);\n}\n\nstatic void bin_read_key(conn *c, enum bin_substates next_substate, int extra) {\n    bin_read_chunk(c, next_substate, c->keylen + extra);\n}\n\n\n/* Just write an error message and disconnect the client */\nstatic void handle_binary_protocol_error(conn *c) {\n    write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                \"%d: Protocol error (opcode %02x), close connection\\n\",\n                c->sfd, c->binary_header.request.opcode);\n    }\n    c->write_and_go = conn_closing;\n}\n\nstatic void init_sasl_conn(conn *c) {\n    assert(c);\n    if (!c->sasl_conn) {\n        int result=sasl_server_new(\"memcached\",\n                                   NULL, NULL, NULL, NULL,\n                                   NULL, 0, &c->sasl_conn);\n        if (result != SASL_OK) {\n            if (settings.verbose) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                         \"%d: Failed to initialize SASL conn.\\n\",\n                         c->sfd);\n            }\n            c->sasl_conn = NULL;\n        }\n    }\n}\n\nstatic void get_auth_data(const void *cookie, auth_data_t *data) {\n    conn *c = (conn*)cookie;\n    if (c->sasl_conn) {\n        sasl_getprop(c->sasl_conn, SASL_USERNAME, (void*)&data->username);\n#ifdef ENABLE_ISASL\n        sasl_getprop(c->sasl_conn, ISASL_CONFIG, (void*)&data->config);\n#endif\n    }\n    (void)(data);\n}\n\n#ifdef SASL_ENABLED\nstatic void bin_list_sasl_mechs(conn *c) {\n    init_sasl_conn(c);\n    const char *result_string = NULL;\n    unsigned int string_length = 0;\n    int result=sasl_listmech(c->sasl_conn, NULL,\n                             \"\",   /* What to prepend the string with */\n                             \" \",  /* What to separate mechanisms with */\n                             \"\",   /* What to append to the string */\n                             &result_string, &string_length,\n                             NULL);\n    if (result != SASL_OK) {\n        /* Perhaps there's a better error for this... */\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                     \"%d: Failed to list SASL mechanisms.\\n\",\n                     c->sfd);\n        }\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        return;\n    }\n    write_bin_response(c, (char*)result_string, 0, 0, string_length);\n}\n#endif\n\nstruct sasl_tmp {\n    int ksize;\n    int vsize;\n    char data[]; /* data + ksize == value */\n};\n\nstatic void process_bin_sasl_auth(conn *c) {\n    assert(c->binary_header.request.extlen == 0);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    if (nkey > MAX_SASL_MECH_LEN) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    char *key = binary_get_key(c);\n    assert(key);\n\n    size_t buffer_size = sizeof(struct sasl_tmp) + nkey + vlen + 2;\n    struct sasl_tmp *data = calloc(sizeof(struct sasl_tmp) + buffer_size, 1);\n    if (!data) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    data->ksize = nkey;\n    data->vsize = vlen;\n    memcpy(data->data, key, nkey);\n\n    c->item = data;\n    c->ritem = data->data + nkey;\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_reading_sasl_auth_data;\n}\n\nstatic void process_bin_complete_sasl_auth(conn *c) {\n    const char *out = NULL;\n    unsigned int outlen = 0;\n\n    assert(c->item);\n    init_sasl_conn(c);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    struct sasl_tmp *stmp = c->item;\n    char mech[nkey+1];\n    memcpy(mech, stmp->data, nkey);\n    mech[nkey] = 0x00;\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                \"%d: mech: ``%s'' with %d bytes of data\\n\", c->sfd, mech, vlen);\n    }\n\n    const char *challenge = vlen == 0 ? NULL : (stmp->data + nkey);\n\n    int result=-1;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        result = sasl_server_start(c->sasl_conn, mech,\n                                   challenge, vlen,\n                                   &out, &outlen);\n        break;\n    case PROTOCOL_BINARY_CMD_SASL_STEP:\n        result = sasl_server_step(c->sasl_conn,\n                                  challenge, vlen,\n                                  &out, &outlen);\n        break;\n    default:\n        assert(false); /* CMD should be one of the above */\n        /* This code is pretty much impossible, but makes the compiler\n           happier */\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                    \"%d: Unhandled command %d with challenge %s\\n\",\n                    c->sfd, c->cmd, challenge);\n        }\n        break;\n    }\n\n    free(c->item);\n    c->item = NULL;\n    c->ritem = NULL;\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                        \"%d: sasl result code:  %d\\n\",\n                                        c->sfd, result);\n    }\n\n    switch(result) {\n    case SASL_OK:\n        write_bin_response(c, \"Authenticated\", 0, 0, strlen(\"Authenticated\"));\n        auth_data_t data;\n        get_auth_data(c, &data);\n        perform_callbacks(ON_AUTH, (const void*)&data, c);\n        STATS_NOKEY(c, auth_cmds);\n        break;\n    case SASL_CONTINUE:\n        add_bin_header(c, PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE, 0, 0, outlen);\n        if(outlen > 0) {\n            add_iov(c, out, outlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n        break;\n    default:\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"%d: Unknown sasl response:  %d\\n\",\n                                            c->sfd, result);\n        }\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        STATS_NOKEY2(c, auth_cmds, auth_errors);\n    }\n}\n\nstatic bool authenticated(conn *c) {\n    bool rv = false;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS: /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_STEP:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_VERSION:         /* FALLTHROUGH */\n        rv = true;\n        break;\n    default:\n        if (c->sasl_conn) {\n            const void *uname = NULL;\n            sasl_getprop(c->sasl_conn, SASL_USERNAME, &uname);\n            rv = uname != NULL;\n        }\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                \"%d: authenticated() in cmd 0x%02x is %s\\n\",\n                c->sfd, c->cmd, rv ? \"true\" : \"false\");\n    }\n\n    return rv;\n}\n\nstatic bool binary_response_handler(const void *key, uint16_t keylen,\n                                    const void *ext, uint8_t extlen,\n                                    const void *body, uint32_t bodylen,\n                                    uint8_t datatype, uint16_t status,\n                                    uint64_t cas, const void *cookie)\n{\n    conn *c = (conn*)cookie;\n    /* Look at append_bin_stats */\n    size_t needed = keylen + extlen + bodylen + sizeof(protocol_binary_response_header);\n    if (!grow_dynamic_buffer(c, needed)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                    \"<%d ERROR: Failed to allocate memory for response\\n\",\n                    c->sfd);\n        }\n        return false;\n    }\n\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = c->binary_header.request.opcode,\n        .response.keylen = (uint16_t)htons(keylen),\n        .response.extlen = extlen,\n        .response.datatype = datatype,\n        .response.status = (uint16_t)htons(status),\n        .response.bodylen = htonl(bodylen + keylen + extlen),\n        .response.opaque = c->opaque,\n        .response.cas = htonll(cas),\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (extlen > 0) {\n        memcpy(buf, ext, extlen);\n        buf += extlen;\n    }\n\n    if (keylen > 0) {\n        memcpy(buf, key, keylen);\n        buf += keylen;\n    }\n\n    if (bodylen > 0) {\n        memcpy(buf, body, bodylen);\n    }\n\n    c->dynamic_buffer.offset += needed;\n\n    return true;\n}\n\n/**\n * Tap stats (these are only used by the tap thread, so they don't need\n * to be in the threadlocal struct right now...\n */\nstruct tap_cmd_stats {\n    uint64_t connect;\n    uint64_t mutation;\n    uint64_t checkpoint_start;\n    uint64_t checkpoint_end;\n    uint64_t delete;\n    uint64_t flush;\n    uint64_t opaque;\n    uint64_t vbucket_set;\n};\n\nstruct tap_stats {\n    pthread_mutex_t mutex;\n    struct tap_cmd_stats sent;\n    struct tap_cmd_stats received;\n} tap_stats = { .mutex = PTHREAD_MUTEX_INITIALIZER };\n\nstatic void ship_tap_log(conn *c) {\n    assert(c->thread->type == TAP);\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"%d: Failed to create output headers. Shutting down tap connection\\n\", c->sfd);\n        }\n        conn_set_state(c, conn_closing);\n        return ;\n    }\n    /* @todo add check for buffer overflow of c->wbuf) */\n    c->wcurr = c->wbuf;\n\n    bool more_data = true;\n    bool send_data = false;\n    bool disconnect = false;\n\n    item *it;\n    uint32_t bodylen;\n    int ii = 0;\n    c->icurr = c->ilist;\n    do {\n        /* @todo fixme! */\n        if (ii++ == 10) {\n            break;\n        }\n\n        void *engine;\n        uint16_t nengine;\n        uint8_t ttl;\n        uint16_t tap_flags;\n        uint32_t seqno;\n        uint16_t vbucket;\n\n        tap_event_t event = c->tap_iterator(settings.engine.v0, c, &it,\n                                            &engine, &nengine, &ttl,\n                                            &tap_flags, &seqno, &vbucket);\n        union {\n            protocol_binary_request_tap_mutation mutation;\n            protocol_binary_request_tap_delete delete;\n            protocol_binary_request_tap_flush flush;\n            protocol_binary_request_tap_opaque opaque;\n            protocol_binary_request_noop noop;\n        } msg = {\n            .mutation.message.header.request.magic = (uint8_t)PROTOCOL_BINARY_REQ,\n        };\n\n        msg.opaque.message.header.request.opaque = htonl(seqno);\n        msg.opaque.message.body.tap.enginespecific_length = htons(nengine);\n        msg.opaque.message.body.tap.ttl = ttl;\n        msg.opaque.message.body.tap.flags = htons(tap_flags);\n        msg.opaque.message.header.request.extlen = 8;\n        msg.opaque.message.header.request.vbucket = htons(vbucket);\n        item_info info = { .nvalue = 1 };\n\n        switch (event) {\n        case TAP_NOOP :\n            send_data = true;\n            msg.noop.message.header.request.opcode = PROTOCOL_BINARY_CMD_NOOP;\n            msg.noop.message.header.request.extlen = 0;\n            msg.noop.message.header.request.bodylen = htonl(0);\n            memcpy(c->wcurr, msg.noop.bytes, sizeof(msg.noop.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.noop.bytes));\n            c->wcurr += sizeof(msg.noop.bytes);\n            c->wbytes += sizeof(msg.noop.bytes);\n            break;\n        case TAP_PAUSE :\n            more_data = false;\n            break;\n        case TAP_CHECKPOINT_START:\n        case TAP_CHECKPOINT_END:\n        case TAP_MUTATION:\n            if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: Failed to get item info\\n\", c->sfd);\n                break;\n            }\n            send_data = true;\n            c->ilist[c->ileft++] = it;\n\n            if (event == TAP_CHECKPOINT_START) {\n                msg.mutation.message.header.request.opcode =\n                    PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.checkpoint_start++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_CHECKPOINT_END) {\n                msg.mutation.message.header.request.opcode =\n                    PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.checkpoint_end++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_MUTATION) {\n                msg.mutation.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_MUTATION;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.mutation++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            }\n\n            msg.mutation.message.header.request.cas = htonll(info.cas);\n            msg.mutation.message.header.request.keylen = htons(info.nkey);\n            msg.mutation.message.header.request.extlen = 16;\n\n            bodylen = 16 + info.nkey + nengine;\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                bodylen += info.nbytes;\n            }\n            msg.mutation.message.header.request.bodylen = htonl(bodylen);\n            msg.mutation.message.body.item.flags = htonl(info.flags);\n            msg.mutation.message.body.item.expiration = htonl(info.exptime);\n            msg.mutation.message.body.tap.enginespecific_length = htons(nengine);\n            msg.mutation.message.body.tap.ttl = ttl;\n            msg.mutation.message.body.tap.flags = htons(tap_flags);\n            memcpy(c->wcurr, msg.mutation.bytes, sizeof(msg.mutation.bytes));\n\n            add_iov(c, c->wcurr, sizeof(msg.mutation.bytes));\n            c->wcurr += sizeof(msg.mutation.bytes);\n            c->wbytes += sizeof(msg.mutation.bytes);\n\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n\n            add_iov(c, info.key, info.nkey);\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n            }\n\n            break;\n        case TAP_DELETION:\n            /* This is a delete */\n            if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: Failed to get item info\\n\", c->sfd);\n                break;\n            }\n            send_data = true;\n            c->ilist[c->ileft++] = it;\n            msg.delete.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_DELETE;\n            msg.delete.message.header.request.cas = htonll(info.cas);\n            msg.delete.message.header.request.keylen = htons(info.nkey);\n\n            bodylen = 8 + info.nkey + nengine;\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                bodylen += info.nbytes;\n            }\n            msg.delete.message.header.request.bodylen = htonl(bodylen);\n\n            memcpy(c->wcurr, msg.delete.bytes, sizeof(msg.delete.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.delete.bytes));\n            c->wcurr += sizeof(msg.delete.bytes);\n            c->wbytes += sizeof(msg.delete.bytes);\n\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n\n            add_iov(c, info.key, info.nkey);\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n            }\n\n            pthread_mutex_lock(&tap_stats.mutex);\n            tap_stats.sent.delete++;\n            pthread_mutex_unlock(&tap_stats.mutex);\n            break;\n\n        case TAP_DISCONNECT:\n            disconnect = true;\n            more_data = false;\n            break;\n        case TAP_VBUCKET_SET:\n        case TAP_FLUSH:\n        case TAP_OPAQUE:\n            send_data = true;\n\n            if (event == TAP_OPAQUE) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_OPAQUE;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.opaque++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n\n            } else if (event == TAP_FLUSH) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_FLUSH;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.flush++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_VBUCKET_SET) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET;\n                msg.flush.message.body.tap.flags = htons(tap_flags);\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.vbucket_set++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            }\n\n            msg.flush.message.header.request.bodylen = htonl(8 + nengine);\n            memcpy(c->wcurr, msg.flush.bytes, sizeof(msg.flush.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.flush.bytes));\n            c->wcurr += sizeof(msg.flush.bytes);\n            c->wbytes += sizeof(msg.flush.bytes);\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n            break;\n        default:\n            abort();\n        }\n    } while (more_data);\n\n    c->ewouldblock = false;\n    if (send_data) {\n        conn_set_state(c, conn_mwrite);\n        if (disconnect) {\n            c->write_and_go = conn_closing;\n        } else {\n            c->write_and_go = conn_ship_log;\n        }\n    } else {\n        if (disconnect) {\n            conn_set_state(c, conn_closing);\n        } else {\n            /* No more items to ship to the slave at this time.. suspend.. */\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                \"%d: No more items in tap log.. waiting\\n\",\n                                                c->sfd);\n            }\n            c->ewouldblock = true;\n        }\n    }\n}\n\n\nstatic ENGINE_ERROR_CODE default_unknown_command(EXTENSION_BINARY_PROTOCOL_DESCRIPTOR *descriptor,\n                                                 ENGINE_HANDLE* handle,\n                                                 const void* cookie,\n                                                 protocol_binary_request_header *request,\n                                                 ADD_RESPONSE response)\n{\n    (void)(descriptor);\n    return settings.engine.v1->unknown_command(handle, cookie, request, response);\n}\n\nstruct request_lookup {\n    EXTENSION_BINARY_PROTOCOL_DESCRIPTOR *descriptor;\n    BINARY_COMMAND_CALLBACK callback;\n};\n\nstatic struct request_lookup request_handlers[0x100];\n\nstatic void initialize_binary_lookup_map(void) {\n    for (int ii = 0; ii < 0x100; ++ii) {\n        request_handlers[ii].descriptor = NULL;\n        request_handlers[ii].callback = default_unknown_command;\n    }\n}\n\nstatic void setup_binary_lookup_cmd(EXTENSION_BINARY_PROTOCOL_DESCRIPTOR *descriptor,\n                                    uint8_t cmd,\n                                    BINARY_COMMAND_CALLBACK new_handler) {\n    request_handlers[cmd].descriptor = descriptor;\n    request_handlers[cmd].callback = new_handler;\n}\n\nstatic void process_bin_unknown_packet(conn *c) {\n    void *packet = c->rcurr - (c->binary_header.request.bodylen +\n                               sizeof(c->binary_header));\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        struct request_lookup *rq = request_handlers + c->binary_header.request.opcode;\n        ret = rq->callback(rq->descriptor, settings.engine.v0, c, packet,\n                           binary_response_handler);\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        if (c->dynamic_buffer.buffer != NULL) {\n            write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n            c->dynamic_buffer.buffer = NULL;\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        conn_set_state(c, conn_closing);\n        break;\n    default:\n        // Release the dynamic buffer.. it may be partial..\n        free(c->dynamic_buffer.buffer);\n        c->dynamic_buffer.buffer = NULL;\n        write_bin_packet(c, engine_error_2_protocol_error(ret), 0);\n    }\n}\n\nstatic void process_bin_tap_connect(conn *c) {\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_tap_connect *req = (void*)packet;\n    const char *key = packet + sizeof(req->bytes);\n    const char *data = key + c->binary_header.request.keylen;\n    uint32_t flags = 0;\n    size_t ndata = c->binary_header.request.bodylen -\n        c->binary_header.request.extlen -\n        c->binary_header.request.keylen;\n\n    if (c->binary_header.request.extlen == 4) {\n        flags = ntohl(req->message.body.flags);\n\n        if (flags & TAP_CONNECT_FLAG_BACKFILL) {\n            /* the userdata has to be at least 8 bytes! */\n            if (ndata < 8) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: ERROR: Invalid tap connect message\\n\",\n                                                c->sfd);\n                conn_set_state(c, conn_closing);\n                return ;\n            }\n        }\n    } else {\n        data -= 4;\n        key -= 4;\n    }\n\n    if (settings.verbose && c->binary_header.request.keylen > 0) {\n        char buffer[1024];\n        unsigned int len = c->binary_header.request.keylen;\n        if (len >= sizeof(buffer)) {\n            len = sizeof(buffer) - 1;\n        }\n        memcpy(buffer, key, len);\n        buffer[len] = '\\0';\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"%d: Trying to connect with named tap connection: <%s>\\n\",\n                                        c->sfd, buffer);\n    }\n\n    TAP_ITERATOR iterator = settings.engine.v1->get_tap_iterator(\n        settings.engine.v0, c, key, c->binary_header.request.keylen,\n        flags, data, ndata);\n\n    if (iterator == NULL) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: FATAL: The engine does not support tap\\n\",\n                                        c->sfd);\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        c->write_and_go = conn_closing;\n    } else {\n        c->tap_iterator = iterator;\n        c->which = EV_WRITE;\n        conn_set_state(c, conn_ship_log);\n    }\n}\n\nstatic void process_bin_tap_packet(tap_event_t event, conn *c) {\n    assert(c != NULL);\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_tap_no_extras *tap = (void*)packet;\n    uint16_t nengine = ntohs(tap->message.body.tap.enginespecific_length);\n    uint16_t tap_flags = ntohs(tap->message.body.tap.flags);\n    uint32_t seqno = ntohl(tap->message.header.request.opaque);\n    uint8_t ttl = tap->message.body.tap.ttl;\n    char *engine_specific = packet + sizeof(tap->bytes);\n    char *key = engine_specific + nengine;\n    uint16_t nkey = c->binary_header.request.keylen;\n    char *data = key + nkey;\n    uint32_t flags = 0;\n    uint32_t exptime = 0;\n    uint32_t ndata = c->binary_header.request.bodylen - nengine - nkey - 8;\n    ENGINE_ERROR_CODE ret = c->aiostat;\n\n    if (ttl == 0) {\n        ret = ENGINE_EINVAL;\n    } else {\n        if (event == TAP_MUTATION || event == TAP_CHECKPOINT_START ||\n            event == TAP_CHECKPOINT_END) {\n            protocol_binary_request_tap_mutation *mutation = (void*)tap;\n            flags = ntohl(mutation->message.body.item.flags);\n            exptime = ntohl(mutation->message.body.item.expiration);\n            key += 8;\n            data += 8;\n            ndata -= 8;\n        }\n\n        if (ret == ENGINE_SUCCESS) {\n            ret = settings.engine.v1->tap_notify(settings.engine.v0, c,\n                                                 engine_specific, nengine,\n                                                 ttl - 1, tap_flags,\n                                                 event, seqno,\n                                                 key, nkey,\n                                                 flags, exptime,\n                                                 ntohll(tap->message.header.request.cas),\n                                                 data, ndata,\n                                                 c->binary_header.request.vbucket);\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_DISCONNECT:\n        conn_set_state(c, conn_closing);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        if ((tap_flags & TAP_FLAG_ACK) || (ret != ENGINE_SUCCESS)) {\n            write_bin_packet(c, engine_error_2_protocol_error(ret), 0);\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n    }\n}\n\nstatic void process_bin_tap_ack(conn *c) {\n    assert(c != NULL);\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_response_no_extras *rsp = (void*)packet;\n    uint32_t seqno = ntohl(rsp->message.header.response.opaque);\n    uint16_t status = ntohs(rsp->message.header.response.status);\n    char *key = packet + sizeof(rsp->bytes);\n\n    ENGINE_ERROR_CODE ret = ENGINE_DISCONNECT;\n    if (settings.engine.v1->tap_notify != NULL) {\n        ret = settings.engine.v1->tap_notify(settings.engine.v0, c, NULL, 0, 0, status,\n                                             TAP_ACK, seqno, key,\n                                             c->binary_header.request.keylen, 0, 0,\n                                             0, NULL, 0, 0);\n    }\n\n    if (ret == ENGINE_DISCONNECT) {\n        conn_set_state(c, conn_closing);\n    } else {\n        conn_set_state(c, conn_ship_log);\n    }\n}\n\n/**\n * We received a noop response.. just ignore it\n */\nstatic void process_bin_noop_response(conn *c) {\n    assert(c != NULL);\n    conn_set_state(c, conn_new_cmd);\n}\n\nstatic void process_bin_verbosity(conn *c) {\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_verbosity *req = (void*)packet;\n    uint32_t level = (uint32_t)ntohl(req->message.body.level);\n    if (level > MAX_VERBOSITY_LEVEL) {\n        level = MAX_VERBOSITY_LEVEL;\n    }\n    settings.verbose = (int)level;\n    perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n    write_bin_response(c, NULL, 0, 0, 0);\n}\n\nstatic void process_bin_packet(conn *c) {\n    /* @todo this should be an array of funciton pointers and call through */\n    switch (c->binary_header.request.opcode) {\n    case PROTOCOL_BINARY_CMD_TAP_CONNECT:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.connect++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        conn_set_state(c, conn_add_tap_client);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_MUTATION:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.mutation++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_MUTATION, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.checkpoint_start++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_CHECKPOINT_START, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.checkpoint_end++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_CHECKPOINT_END, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_DELETE:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.delete++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_DELETION, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_FLUSH:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.flush++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_FLUSH, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_OPAQUE:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.opaque++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_OPAQUE, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.vbucket_set++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_VBUCKET_SET, c);\n        break;\n    case PROTOCOL_BINARY_CMD_VERBOSITY:\n        process_bin_verbosity(c);\n        break;\n    default:\n        process_bin_unknown_packet(c);\n    }\n}\n\ntypedef void (*RESPONSE_HANDLER)(conn*);\n/**\n * A map between the response packets op-code and the function to handle\n * the response message.\n */\nstatic RESPONSE_HANDLER response_handlers[256] = {\n    [PROTOCOL_BINARY_CMD_NOOP] = process_bin_noop_response,\n    [PROTOCOL_BINARY_CMD_TAP_MUTATION] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_DELETE] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_FLUSH] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_OPAQUE] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END] = process_bin_tap_ack\n};\n\nstatic void dispatch_bin_command(conn *c) {\n    int protocol_error = 0;\n\n    int extlen = c->binary_header.request.extlen;\n    uint16_t keylen = c->binary_header.request.keylen;\n    uint32_t bodylen = c->binary_header.request.bodylen;\n\n    if (settings.require_sasl && !authenticated(c)) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        c->write_and_go = conn_closing;\n        return;\n    }\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n    c->noreply = true;\n\n    /* binprot supports 16bit keys, but internals are still 8bit */\n    if (keylen > KEY_MAX_LENGTH) {\n        handle_binary_protocol_error(c);\n        return;\n    }\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_SET;\n        break;\n    case PROTOCOL_BINARY_CMD_ADDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_ADD;\n        break;\n    case PROTOCOL_BINARY_CMD_REPLACEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_REPLACE;\n        break;\n    case PROTOCOL_BINARY_CMD_DELETEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DELETE;\n        break;\n    case PROTOCOL_BINARY_CMD_INCREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_INCREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_DECREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DECREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_QUITQ:\n        c->cmd = PROTOCOL_BINARY_CMD_QUIT;\n        break;\n    case PROTOCOL_BINARY_CMD_FLUSHQ:\n        c->cmd = PROTOCOL_BINARY_CMD_FLUSH;\n        break;\n    case PROTOCOL_BINARY_CMD_APPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_APPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_PREPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_PREPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_GETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GET;\n        break;\n    case PROTOCOL_BINARY_CMD_GETKQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GETK;\n        break;\n    default:\n        c->noreply = false;\n    }\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_VERSION:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, VERSION, 0, 0, strlen(VERSION));\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_FLUSH:\n            if (keylen == 0 && bodylen == extlen && (extlen == 0 || extlen == 4)) {\n                bin_read_key(c, bin_read_flush_exptime, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_NOOP:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SET: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_ADD: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            if (extlen == 8 && keylen != 0 && bodylen >= (keylen + 8)) {\n                bin_read_key(c, bin_reading_set_header, 8);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_GETQ:  /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GET:   /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETKQ: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETK:\n            if (extlen == 0 && bodylen == keylen && keylen > 0) {\n                bin_read_key(c, bin_reading_get_key, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_DELETE:\n            if (keylen > 0 && extlen == 0 && bodylen == keylen) {\n                bin_read_key(c, bin_reading_del_header, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_INCREMENT:\n        case PROTOCOL_BINARY_CMD_DECREMENT:\n            if (keylen > 0 && extlen == 20 && bodylen == (keylen + extlen)) {\n                bin_read_key(c, bin_reading_incr_header, 20);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_APPEND:\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            if (keylen > 0 && extlen == 0) {\n                bin_read_key(c, bin_reading_set_header, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_STAT:\n            if (extlen == 0) {\n                bin_read_key(c, bin_reading_stat, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_QUIT:\n            if (keylen == 0 && extlen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n                c->write_and_go = conn_closing;\n                if (c->noreply) {\n                    conn_set_state(c, conn_closing);\n                }\n            } else {\n                protocol_error = 1;\n            }\n            break;\n       case PROTOCOL_BINARY_CMD_TAP_CONNECT:\n            if (settings.engine.v1->get_tap_iterator == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet,\n                               c->binary_header.request.bodylen);\n            }\n            break;\n       case PROTOCOL_BINARY_CMD_TAP_MUTATION:\n       case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START:\n       case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END:\n       case PROTOCOL_BINARY_CMD_TAP_DELETE:\n       case PROTOCOL_BINARY_CMD_TAP_FLUSH:\n       case PROTOCOL_BINARY_CMD_TAP_OPAQUE:\n       case PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET:\n            if (settings.engine.v1->tap_notify == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet, c->binary_header.request.bodylen);\n            }\n            break;\n#ifdef SASL_ENABLED\n        case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                bin_list_sasl_mechs(c);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        case PROTOCOL_BINARY_CMD_SASL_STEP:\n            if (extlen == 0 && keylen != 0) {\n                bin_read_key(c, bin_reading_sasl_auth, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n#endif\n        case PROTOCOL_BINARY_CMD_VERBOSITY:\n            if (extlen == 4 && keylen == 0 && bodylen == 4) {\n                bin_read_chunk(c, bin_reading_packet,\n                               c->binary_header.request.bodylen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        default:\n            if (settings.engine.v1->unknown_command == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND,\n                                bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet, c->binary_header.request.bodylen);\n            }\n    }\n\n    if (protocol_error)\n        handle_binary_protocol_error(c);\n}\n\nstatic void process_bin_update(conn *c) {\n    char *key;\n    uint16_t nkey;\n    uint32_t vlen;\n    item *it;\n    protocol_binary_request_set* req = binary_get_request(c);\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n\n    /* fix byteorder in the request */\n    req->message.body.flags = req->message.body.flags;\n    rel_time_t expiration = ntohl(req->message.body.expiration);\n\n    vlen = c->binary_header.request.bodylen - (nkey + c->binary_header.request.extlen);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        const char *prefix;\n        if (c->cmd == PROTOCOL_BINARY_CMD_ADD) {\n            prefix = \"ADD\";\n        } else if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            prefix = \"SET\";\n        } else {\n            prefix = \"REPLACE\";\n        }\n\n        size_t nw;\n        nw = key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                     prefix, key, nkey);\n\n        if (nw != -1) {\n            if (snprintf(buffer + nw, sizeof(buffer) - nw,\n                         \" Value len is %d\\n\", vlen)) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\",\n                                                buffer);\n            }\n        }\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    item_info info = { .nvalue = 1 };\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen,\n                                           req->message.body.flags,\n                                           expiration);\n        if (ret == ENGINE_SUCCESS && !settings.engine.v1->get_item_info(settings.engine.v0,\n                                                                        c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            return;\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, c->binary_header.request.cas);\n\n        switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_ADD:\n            c->store_op = OPERATION_ADD;\n            break;\n        case PROTOCOL_BINARY_CMD_SET:\n            c->store_op = OPERATION_SET;\n            break;\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            c->store_op = OPERATION_REPLACE;\n            break;\n        default:\n            assert(0);\n        }\n\n        if (c->binary_header.request.cas != 0) {\n            c->store_op = OPERATION_CAS;\n        }\n\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        conn_set_state(c, conn_nread);\n        c->substate = bin_read_set_value;\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_E2BIG, vlen);\n        } else {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        }\n\n        /*\n         * Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET (but only if cas matches).\n         * Anywhere else too?\n         */\n        if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            /* @todo fix this for the ASYNC interface! */\n            settings.engine.v1->remove(settings.engine.v0, c, key, nkey,\n                                       ntohll(req->message.header.request.cas),\n                                       c->binary_header.request.vbucket);\n        }\n\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n    }\n}\n\nstatic void process_bin_append_prepend(conn *c) {\n    char *key;\n    int nkey;\n    int vlen;\n    item *it;\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n    vlen = c->binary_header.request.bodylen - nkey;\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"Value len is %d\\n\", vlen);\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    item_info info = { .nvalue = 1 };\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen, 0, 0);\n        if (ret == ENGINE_SUCCESS && !settings.engine.v1->get_item_info(settings.engine.v0,\n                                                                        c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            return;\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, c->binary_header.request.cas);\n\n        switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_APPEND:\n            c->store_op = OPERATION_APPEND;\n            break;\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            c->store_op = OPERATION_PREPEND;\n            break;\n        default:\n            assert(0);\n        }\n\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        conn_set_state(c, conn_nread);\n        c->substate = bin_read_set_value;\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_E2BIG, vlen);\n        } else {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n    }\n}\n\nstatic void process_bin_flush(conn *c) {\n    time_t exptime = 0;\n    protocol_binary_request_flush* req = binary_get_request(c);\n\n    if (c->binary_header.request.extlen == sizeof(req->message.body)) {\n        exptime = ntohl(req->message.body.expiration);\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"%d: flush %ld\", c->sfd,\n                                        (long)exptime);\n    }\n\n    ENGINE_ERROR_CODE ret;\n    ret = settings.engine.v1->flush(settings.engine.v0, c, exptime);\n\n    if (ret == ENGINE_SUCCESS) {\n        write_bin_response(c, NULL, 0, 0, 0);\n    } else if (ret == ENGINE_ENOTSUP) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n    } else {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n    STATS_NOKEY(c, cmd_flush);\n}\n\nstatic void process_bin_delete(conn *c) {\n    protocol_binary_request_delete* req = binary_get_request(c);\n\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    assert(c != NULL);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"DELETE\", key, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        if (settings.detail_enabled) {\n            stats_prefix_record_delete(key, nkey);\n        }\n        ret = settings.engine.v1->remove(settings.engine.v0, c, key, nkey,\n                                         ntohll(req->message.header.request.cas),\n                                         c->binary_header.request.vbucket);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        write_bin_response(c, NULL, 0, 0, 0);\n        SLAB_INCR(c, delete_hits, key, nkey);\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        STATS_INCR(c, delete_misses, key, nkey);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n}\n\nstatic void complete_nread_binary(conn *c) {\n    assert(c != NULL);\n    assert(c->cmd >= 0);\n\n    switch(c->substate) {\n    case bin_reading_set_header:\n        if (c->cmd == PROTOCOL_BINARY_CMD_APPEND ||\n                c->cmd == PROTOCOL_BINARY_CMD_PREPEND) {\n            process_bin_append_prepend(c);\n        } else {\n            process_bin_update(c);\n        }\n        break;\n    case bin_read_set_value:\n        complete_update_bin(c);\n        break;\n    case bin_reading_get_key:\n        process_bin_get(c);\n        break;\n    case bin_reading_stat:\n        process_bin_stat(c);\n        break;\n    case bin_reading_del_header:\n        process_bin_delete(c);\n        break;\n    case bin_reading_incr_header:\n        complete_incr_bin(c);\n        break;\n    case bin_read_flush_exptime:\n        process_bin_flush(c);\n        break;\n    case bin_reading_sasl_auth:\n        process_bin_sasl_auth(c);\n        break;\n    case bin_reading_sasl_auth_data:\n        process_bin_complete_sasl_auth(c);\n        break;\n    case bin_reading_packet:\n        if (c->binary_header.request.magic == PROTOCOL_BINARY_RES) {\n            RESPONSE_HANDLER handler;\n            handler = response_handlers[c->binary_header.request.opcode];\n            if (handler) {\n                handler(c);\n            } else {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                       \"%d: ERROR: Unsupported response packet received: %u\\n\",\n                        c->sfd, (unsigned int)c->binary_header.request.opcode);\n                conn_set_state(c, conn_closing);\n            }\n        } else {\n            process_bin_packet(c);\n        }\n        break;\n    default:\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                \"Not handling substate %d\\n\", c->substate);\n        abort();\n    }\n}\n\nstatic void reset_cmd_handler(conn *c) {\n    c->sbytes = 0;\n    c->ascii_cmd = NULL;\n    c->cmd = -1;\n    c->substate = bin_no_state;\n    if(c->item != NULL) {\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = NULL;\n    }\n    conn_shrink(c);\n    if (c->rbytes > 0) {\n        conn_set_state(c, conn_parse_cmd);\n    } else {\n        conn_set_state(c, conn_waiting);\n    }\n}\n\nstatic ENGINE_ERROR_CODE ascii_response_handler(const void *cookie,\n                                                int nbytes,\n                                                const char *dta)\n{\n    conn *c = (conn*)cookie;\n    char *buf;\n    if (!grow_dynamic_buffer(c, nbytes)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                    \"<%d ERROR: Failed to allocate memory for response\\n\",\n                    c->sfd);\n        }\n        return ENGINE_ENOMEM;\n    }\n\n    buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    memcpy(buf, dta, nbytes);\n    c->dynamic_buffer.offset += nbytes;\n\n    return ENGINE_SUCCESS;\n}\n\nstatic void complete_nread_ascii(conn *c) {\n    if (c->ascii_cmd != NULL) {\n        c->ewouldblock = false;\n        switch (c->ascii_cmd->execute(c->ascii_cmd->cookie, c, 0, NULL,\n                                      ascii_response_handler)) {\n        case ENGINE_SUCCESS:\n            if (c->dynamic_buffer.buffer != NULL) {\n                write_and_free(c, c->dynamic_buffer.buffer,\n                               c->dynamic_buffer.offset);\n                c->dynamic_buffer.buffer = NULL;\n            } else {\n                conn_set_state(c, conn_new_cmd);\n            }\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            break;\n        case ENGINE_DISCONNECT:\n        default:\n            conn_set_state(c, conn_closing);\n        }\n    } else {\n        complete_update_ascii(c);\n    }\n}\n\nstatic void complete_nread(conn *c) {\n    assert(c != NULL);\n    assert(c->protocol == ascii_prot\n           || c->protocol == binary_prot);\n\n    if (c->protocol == ascii_prot) {\n        complete_nread_ascii(c);\n    } else if (c->protocol == binary_prot) {\n        complete_nread_binary(c);\n    }\n}\n\n#define COMMAND_TOKEN 0\n#define SUBCOMMAND_TOKEN 1\n#define KEY_TOKEN 1\n\n#define MAX_TOKENS 30\n\n/*\n * Tokenize the command string by replacing whitespace with '\\0' and update\n * the token array tokens with pointer to start of each token and length.\n * Returns total number of tokens.  The last valid token is the terminal\n * token (value points to the first unprocessed character of the string and\n * length zero).\n *\n * Usage example:\n *\n *  while(tokenize_command(command, ncommand, tokens, max_tokens) > 0) {\n *      for(int ix = 0; tokens[ix].length != 0; ix++) {\n *          ...\n *      }\n *      ncommand = tokens[ix].value - command;\n *      command  = tokens[ix].value;\n *   }\n */\nstatic size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {\n    char *s, *e;\n    size_t ntokens = 0;\n\n    assert(command != NULL && tokens != NULL && max_tokens > 1);\n\n    for (s = e = command; ntokens < max_tokens - 1; ++e) {\n        if (*e == ' ') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n                *e = '\\0';\n            }\n            s = e + 1;\n        }\n        else if (*e == '\\0') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n            }\n\n            break; /* string end */\n        }\n    }\n\n    /*\n     * If we scanned the whole string, the terminal value pointer is null,\n     * otherwise it is the first unprocessed character.\n     */\n    tokens[ntokens].value =  *e == '\\0' ? NULL : e;\n    tokens[ntokens].length = 0;\n    ntokens++;\n\n    return ntokens;\n}\n\nstatic void detokenize(token_t *tokens, int ntokens, char **out, int *nbytes) {\n    int i, nb;\n    char *buf, *p;\n\n    nb = ntokens; // account for spaces, which is ntokens-1, plus the null\n    for (i = 0; i < ntokens; ++i) {\n        nb += tokens[i].length;\n    }\n\n    buf = malloc(nb * sizeof(char));\n    if (buf != NULL) {\n        p = buf;\n        for (i = 0; i < ntokens; ++i) {\n            memcpy(p, tokens[i].value, tokens[i].length);\n            p += tokens[i].length;\n            *p = ' ';\n            p++;\n        }\n        buf[nb - 1] = '\\0';\n        *nbytes = nb - 1;\n        *out = buf;\n    }\n}\n\n\n/* set up a connection to write a buffer then free it, used for stats */\nstatic void write_and_free(conn *c, char *buf, int bytes) {\n    if (buf) {\n        c->write_and_free = buf;\n        c->wcurr = buf;\n        c->wbytes = bytes;\n        conn_set_state(c, conn_write);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        out_string(c, \"SERVER_ERROR out of memory writing stats\");\n    }\n}\n\nstatic inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)\n{\n    int noreply_index = ntokens - 2;\n\n    /*\n      NOTE: this function is not the first place where we are going to\n      send the reply.  We could send it instead from process_command()\n      if the request line has wrong number of tokens.  However parsing\n      malformed line for \"noreply\" option is not reliable anyway, so\n      it can't be helped.\n    */\n    if (tokens[noreply_index].value\n        && strcmp(tokens[noreply_index].value, \"noreply\") == 0) {\n        c->noreply = true;\n    }\n    return c->noreply;\n}\n\nvoid append_stat(const char *name, ADD_STAT add_stats, conn *c,\n                 const char *fmt, ...) {\n    char val_str[STAT_VAL_LEN];\n    int vlen;\n    va_list ap;\n\n    assert(name);\n    assert(add_stats);\n    assert(c);\n    assert(fmt);\n\n    va_start(ap, fmt);\n    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);\n    va_end(ap);\n\n    add_stats(name, strlen(name), val_str, vlen, c);\n}\n\ninline static void process_stats_detail(conn *c, const char *command) {\n    assert(c != NULL);\n\n    if (settings.allow_detailed) {\n        if (strcmp(command, \"on\") == 0) {\n            settings.detail_enabled = 1;\n            out_string(c, \"OK\");\n        }\n        else if (strcmp(command, \"off\") == 0) {\n            settings.detail_enabled = 0;\n            out_string(c, \"OK\");\n        }\n        else if (strcmp(command, \"dump\") == 0) {\n            int len;\n            char *stats = stats_prefix_dump(&len);\n            write_and_free(c, stats, len);\n        }\n        else {\n            out_string(c, \"CLIENT_ERROR usage: stats detail on|off|dump\");\n        }\n    }\n    else {\n        out_string(c, \"CLIENT_ERROR detailed stats disabled\");\n    }\n}\n\nstatic void aggregate_callback(void *in, void *out) {\n    struct thread_stats *out_thread_stats = out;\n    struct independent_stats *in_independent_stats = in;\n    threadlocal_stats_aggregate(in_independent_stats->thread_stats,\n                                out_thread_stats);\n}\n\n/* return server specific stats only */\nstatic void server_stats(ADD_STAT add_stats, conn *c, bool aggregate) {\n    pid_t pid = getpid();\n    rel_time_t now = current_time;\n\n    struct thread_stats thread_stats;\n    threadlocal_stats_clear(&thread_stats);\n\n    if (aggregate && settings.engine.v1->aggregate_stats != NULL) {\n        settings.engine.v1->aggregate_stats(settings.engine.v0,\n                                            (const void *)c,\n                                            aggregate_callback,\n                                            &thread_stats);\n    } else {\n        threadlocal_stats_aggregate(get_independent_stats(c)->thread_stats,\n                                    &thread_stats);\n    }\n\n    struct slab_stats slab_stats;\n    slab_stats_aggregate(&thread_stats, &slab_stats);\n\n#ifndef __WIN32__\n    struct rusage usage;\n    getrusage(RUSAGE_SELF, &usage);\n#endif\n\n    STATS_LOCK();\n\n    APPEND_STAT(\"pid\", \"%lu\", (long)pid);\n    APPEND_STAT(\"uptime\", \"%u\", now);\n    APPEND_STAT(\"time\", \"%ld\", now + (long)process_started);\n    APPEND_STAT(\"version\", \"%s\", VERSION);\n    APPEND_STAT(\"libevent\", \"%s\", event_get_version());\n    APPEND_STAT(\"pointer_size\", \"%d\", (int)(8 * sizeof(void *)));\n\n#ifndef __WIN32__\n    append_stat(\"rusage_user\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_utime.tv_sec,\n                (long)usage.ru_utime.tv_usec);\n    append_stat(\"rusage_system\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_stime.tv_sec,\n                (long)usage.ru_stime.tv_usec);\n#endif\n\n    APPEND_STAT(\"daemon_connections\", \"%u\", stats.daemon_conns);\n    APPEND_STAT(\"curr_connections\", \"%u\", stats.curr_conns);\n    APPEND_STAT(\"total_connections\", \"%u\", stats.total_conns);\n    APPEND_STAT(\"connection_structures\", \"%u\", stats.conn_structs);\n    APPEND_STAT(\"cmd_get\", \"%\"PRIu64, thread_stats.cmd_get);\n    APPEND_STAT(\"cmd_set\", \"%\"PRIu64, slab_stats.cmd_set);\n    APPEND_STAT(\"cmd_flush\", \"%\"PRIu64, thread_stats.cmd_flush);\n    APPEND_STAT(\"auth_cmds\", \"%\"PRIu64, thread_stats.auth_cmds);\n    APPEND_STAT(\"auth_errors\", \"%\"PRIu64, thread_stats.auth_errors);\n    APPEND_STAT(\"get_hits\", \"%\"PRIu64, slab_stats.get_hits);\n    APPEND_STAT(\"get_misses\", \"%\"PRIu64, thread_stats.get_misses);\n    APPEND_STAT(\"delete_misses\", \"%\"PRIu64, thread_stats.delete_misses);\n    APPEND_STAT(\"delete_hits\", \"%\"PRIu64, slab_stats.delete_hits);\n    APPEND_STAT(\"incr_misses\", \"%\"PRIu64, thread_stats.incr_misses);\n    APPEND_STAT(\"incr_hits\", \"%\"PRIu64, thread_stats.incr_hits);\n    APPEND_STAT(\"decr_misses\", \"%\"PRIu64, thread_stats.decr_misses);\n    APPEND_STAT(\"decr_hits\", \"%\"PRIu64, thread_stats.decr_hits);\n    APPEND_STAT(\"cas_misses\", \"%\"PRIu64, thread_stats.cas_misses);\n    APPEND_STAT(\"cas_hits\", \"%\"PRIu64, slab_stats.cas_hits);\n    APPEND_STAT(\"cas_badval\", \"%\"PRIu64, slab_stats.cas_badval);\n    APPEND_STAT(\"bytes_read\", \"%\"PRIu64, thread_stats.bytes_read);\n    APPEND_STAT(\"bytes_written\", \"%\"PRIu64, thread_stats.bytes_written);\n    APPEND_STAT(\"limit_maxbytes\", \"%\"PRIu64, settings.maxbytes);\n    APPEND_STAT(\"accepting_conns\", \"%u\",  is_listen_disabled() ? 0 : 1);\n    APPEND_STAT(\"listen_disabled_num\", \"%\"PRIu64, get_listen_disabled_num());\n    APPEND_STAT(\"rejected_conns\", \"%\" PRIu64, (unsigned long long)stats.rejected_conns);\n    APPEND_STAT(\"threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"conn_yields\", \"%\" PRIu64, (unsigned long long)thread_stats.conn_yields);\n    STATS_UNLOCK();\n\n    /*\n     * Add tap stats (only if non-zero)\n     */\n    struct tap_stats ts;\n    pthread_mutex_lock(&tap_stats.mutex);\n    ts = tap_stats;\n    pthread_mutex_unlock(&tap_stats.mutex);\n\n    if (ts.sent.connect) {\n        APPEND_STAT(\"tap_connect_sent\", \"%\"PRIu64, ts.sent.connect);\n    }\n    if (ts.sent.mutation) {\n        APPEND_STAT(\"tap_mutation_sent\", \"%\"PRIu64, ts.sent.mutation);\n    }\n    if (ts.sent.checkpoint_start) {\n        APPEND_STAT(\"tap_checkpoint_start_sent\", \"%\"PRIu64, ts.sent.checkpoint_start);\n    }\n    if (ts.sent.checkpoint_end) {\n        APPEND_STAT(\"tap_checkpoint_end_sent\", \"%\"PRIu64, ts.sent.checkpoint_end);\n    }\n    if (ts.sent.delete) {\n        APPEND_STAT(\"tap_delete_sent\", \"%\"PRIu64, ts.sent.delete);\n    }\n    if (ts.sent.flush) {\n        APPEND_STAT(\"tap_flush_sent\", \"%\"PRIu64, ts.sent.flush);\n    }\n    if (ts.sent.opaque) {\n        APPEND_STAT(\"tap_opaque_sent\", \"%\"PRIu64, ts.sent.opaque);\n    }\n    if (ts.sent.vbucket_set) {\n        APPEND_STAT(\"tap_vbucket_set_sent\", \"%\"PRIu64,\n                    ts.sent.vbucket_set);\n    }\n    if (ts.received.connect) {\n        APPEND_STAT(\"tap_connect_received\", \"%\"PRIu64, ts.received.connect);\n    }\n    if (ts.received.mutation) {\n        APPEND_STAT(\"tap_mutation_received\", \"%\"PRIu64, ts.received.mutation);\n    }\n    if (ts.received.checkpoint_start) {\n        APPEND_STAT(\"tap_checkpoint_start_received\", \"%\"PRIu64, ts.received.checkpoint_start);\n    }\n    if (ts.received.checkpoint_end) {\n        APPEND_STAT(\"tap_checkpoint_end_received\", \"%\"PRIu64, ts.received.checkpoint_end);\n    }\n    if (ts.received.delete) {\n        APPEND_STAT(\"tap_delete_received\", \"%\"PRIu64, ts.received.delete);\n    }\n    if (ts.received.flush) {\n        APPEND_STAT(\"tap_flush_received\", \"%\"PRIu64, ts.received.flush);\n    }\n    if (ts.received.opaque) {\n        APPEND_STAT(\"tap_opaque_received\", \"%\"PRIu64, ts.received.opaque);\n    }\n    if (ts.received.vbucket_set) {\n        APPEND_STAT(\"tap_vbucket_set_received\", \"%\"PRIu64,\n                    ts.received.vbucket_set);\n    }\n}\n\nstatic void process_stat_settings(ADD_STAT add_stats, void *c) {\n    assert(add_stats);\n    APPEND_STAT(\"maxbytes\", \"%u\", (unsigned int)settings.maxbytes);\n    APPEND_STAT(\"maxconns\", \"%d\", settings.maxconns);\n    APPEND_STAT(\"tcpport\", \"%d\", settings.port);\n    APPEND_STAT(\"udpport\", \"%d\", settings.udpport);\n    APPEND_STAT(\"inter\", \"%s\", settings.inter ? settings.inter : \"NULL\");\n    APPEND_STAT(\"verbosity\", \"%d\", settings.verbose);\n    APPEND_STAT(\"oldest\", \"%lu\", (unsigned long)settings.oldest_live);\n    APPEND_STAT(\"evictions\", \"%s\", settings.evict_to_free ? \"on\" : \"off\");\n    APPEND_STAT(\"domain_socket\", \"%s\",\n                settings.socketpath ? settings.socketpath : \"NULL\");\n    APPEND_STAT(\"umask\", \"%o\", settings.access);\n    APPEND_STAT(\"growth_factor\", \"%.2f\", settings.factor);\n    APPEND_STAT(\"chunk_size\", \"%d\", settings.chunk_size);\n    APPEND_STAT(\"num_threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"num_threads_per_udp\", \"%d\", settings.num_threads_per_udp);\n    APPEND_STAT(\"stat_key_prefix\", \"%c\", settings.prefix_delimiter);\n    APPEND_STAT(\"detail_enabled\", \"%s\",\n                settings.detail_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"allow_detailed\", \"%s\",\n                settings.allow_detailed ? \"yes\" : \"no\");\n    APPEND_STAT(\"reqs_per_event\", \"%d\", settings.reqs_per_event);\n    APPEND_STAT(\"reqs_per_tap_event\", \"%d\", settings.reqs_per_tap_event);\n    APPEND_STAT(\"cas_enabled\", \"%s\", settings.use_cas ? \"yes\" : \"no\");\n    APPEND_STAT(\"tcp_backlog\", \"%d\", settings.backlog);\n    APPEND_STAT(\"binding_protocol\", \"%s\",\n                prot_text(settings.binding_protocol));\n#ifdef SASL_ENABLED\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", \"yes\");\n#else\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", \"no\");\n#endif\n\n#ifdef ENABLE_ISASL\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"isasl\");\n#elif defined(ENABLE_SASL)\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"cyrus\");\n#else\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"none\");\n#endif\n    APPEND_STAT(\"auth_required_sasl\", \"%s\", settings.require_sasl ? \"yes\" : \"no\");\n    APPEND_STAT(\"item_size_max\", \"%d\", settings.item_size_max);\n    APPEND_STAT(\"topkeys\", \"%d\", settings.topkeys);\n\n    for (EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n         ptr != NULL;\n         ptr = ptr->next) {\n        APPEND_STAT(\"extension\", \"%s\", ptr->get_name());\n    }\n\n    APPEND_STAT(\"logger\", \"%s\", settings.extensions.logger->get_name());\n\n    for (EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *ptr = settings.extensions.ascii;\n         ptr != NULL;\n         ptr = ptr->next) {\n        APPEND_STAT(\"ascii_extension\", \"%s\", ptr->get_name(ptr->cookie));\n    }\n\n    for (EXTENSION_BINARY_PROTOCOL_DESCRIPTOR *ptr = settings.extensions.binary;\n         ptr != NULL;\n         ptr = ptr->next) {\n        APPEND_STAT(\"binary_extension\", \"%s\", ptr->get_name());\n    }\n}\n\nstatic char *process_stat(conn *c, token_t *tokens, const size_t ntokens) {\n    const char *subcommand = tokens[SUBCOMMAND_TOKEN].value;\n    c->dynamic_buffer.offset = 0;\n\n    if (ntokens == 2) {\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            server_stats(&append_stats, c, false);\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c,\n                                                NULL, 0, &append_stats);\n            if (ret == ENGINE_EWOULDBLOCK) {\n                c->ewouldblock = true;\n                return c->rcurr + 5;\n            }\n        }\n    } else if (strcmp(subcommand, \"reset\") == 0) {\n        stats_reset(c);\n        out_string(c, \"RESET\");\n        return NULL;\n    } else if (strcmp(subcommand, \"detail\") == 0) {\n        /* NOTE: how to tackle detail with binary? */\n        if (ntokens < 4) {\n            process_stats_detail(c, \"\");  /* outputs the error message */\n        } else {\n            process_stats_detail(c, tokens[2].value);\n        }\n        /* Output already generated */\n        return NULL;\n    } else if (strcmp(subcommand, \"settings\") == 0) {\n        process_stat_settings(&append_stats, c);\n    } else if (strcmp(subcommand, \"cachedump\") == 0) {\n        char *buf = NULL;\n        unsigned int bytes = 0, id, limit = 0;\n\n        if (ntokens < 5) {\n            out_string(c, \"CLIENT_ERROR bad command line\");\n            return NULL;\n        }\n\n        if (!safe_strtoul(tokens[2].value, &id) ||\n            !safe_strtoul(tokens[3].value, &limit)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return NULL;\n        }\n\n        if (id >= POWER_LARGEST) {\n            out_string(c, \"CLIENT_ERROR Illegal slab id\");\n            return NULL;\n        }\n\n#ifdef FUTURE\n        buf = item_cachedump(id, limit, &bytes);\n#endif\n        write_and_free(c, buf, bytes);\n        return NULL;\n    } else if (strcmp(subcommand, \"aggregate\") == 0) {\n        server_stats(&append_stats, c, true);\n    } else if (strcmp(subcommand, \"topkeys\") == 0) {\n        topkeys_t *tk = get_independent_stats(c)->topkeys;\n        if (tk != NULL) {\n            topkeys_stats(tk, c, current_time, append_stats);\n        } else {\n            out_string(c, \"ERROR\");\n            return NULL;\n        }\n    } else {\n        /* getting here means that the subcommand is either engine specific or\n           is invalid. query the engine and see. */\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            char *buf = NULL;\n            int nb = -1;\n            detokenize(&tokens[1], ntokens - 2, &buf, &nb);\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c, buf,\n                                                nb, append_stats);\n            free(buf);\n        }\n\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            append_stats(NULL, 0, NULL, 0, c);\n            write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n            c->dynamic_buffer.buffer = NULL;\n            break;\n        case ENGINE_ENOMEM:\n            out_string(c, \"SERVER_ERROR out of memory writing stats\");\n            break;\n        case ENGINE_DISCONNECT:\n            c->state = conn_closing;\n            break;\n        case ENGINE_ENOTSUP:\n            out_string(c, \"SERVER_ERROR not supported\");\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            return tokens[SUBCOMMAND_TOKEN].value;\n        default:\n            out_string(c, \"ERROR\");\n            break;\n        }\n\n        return NULL;\n    }\n\n    /* append terminator and start the transfer */\n    append_stats(NULL, 0, NULL, 0, c);\n\n    if (c->dynamic_buffer.buffer == NULL) {\n        out_string(c, \"SERVER_ERROR out of memory writing stats\");\n    } else {\n        write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n        c->dynamic_buffer.buffer = NULL;\n    }\n\n    return NULL;\n}\n\n/**\n * Get a suffix buffer and insert it into the list of used suffix buffers\n * @param c the connection object\n * @return a pointer to a new suffix buffer or NULL if allocation failed\n */\nstatic char *get_suffix_buffer(conn *c) {\n    if (c->suffixleft == c->suffixsize) {\n        char **new_suffix_list;\n        size_t sz = sizeof(char*) * c->suffixsize * 2;\n\n        new_suffix_list = realloc(c->suffixlist, sz);\n        if (new_suffix_list) {\n            c->suffixsize *= 2;\n            c->suffixlist = new_suffix_list;\n        } else {\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                        \"=%d Failed to resize suffix buffer\\n\", c->sfd);\n            }\n\n            return NULL;\n        }\n    }\n\n    char *suffix = cache_alloc(c->thread->suffix_cache);\n    if (suffix != NULL) {\n        *(c->suffixlist + c->suffixleft) = suffix;\n        ++c->suffixleft;\n    }\n\n    return suffix;\n}\n\n/* ntokens is overwritten here... shrug.. */\nstatic inline char* process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {\n    char *key;\n    size_t nkey;\n    int i = c->ileft;\n    item *it;\n    token_t *key_token = &tokens[KEY_TOKEN];\n    assert(c != NULL);\n\n    do {\n        while(key_token->length != 0) {\n\n            key = key_token->value;\n            nkey = key_token->length;\n\n            if(nkey > KEY_MAX_LENGTH) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return NULL;\n            }\n\n            ENGINE_ERROR_CODE ret = c->aiostat;\n            c->aiostat = ENGINE_SUCCESS;\n\n            if (ret == ENGINE_SUCCESS) {\n                ret = settings.engine.v1->get(settings.engine.v0, c, &it, key, nkey, 0);\n            }\n\n            switch (ret) {\n            case ENGINE_EWOULDBLOCK:\n                c->ewouldblock = true;\n                c->ileft = i;\n                return key;\n\n            case ENGINE_SUCCESS:\n                break;\n            case ENGINE_KEY_ENOENT:\n            default:\n                it = NULL;\n                break;\n            }\n\n            if (settings.detail_enabled) {\n                stats_prefix_record_get(key, nkey, NULL != it);\n            }\n\n            if (it) {\n                item_info info = { .nvalue = 1 };\n                if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it,\n                                                       &info)) {\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    out_string(c, \"SERVER_ERROR error getting item data\");\n                    break;\n                }\n\n                if (i >= c->isize) {\n                    item **new_list = realloc(c->ilist, sizeof(item *) * c->isize * 2);\n                    if (new_list) {\n                        c->isize *= 2;\n                        c->ilist = new_list;\n                    } else {\n                        settings.engine.v1->release(settings.engine.v0, c, it);\n                        break;\n                    }\n                }\n\n                /* Rebuild the suffix */\n                char *suffix = get_suffix_buffer(c);\n                if (suffix == NULL) {\n                    out_string(c, \"SERVER_ERROR out of memory rebuilding suffix\");\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    return NULL;\n                }\n                int suffix_len = snprintf(suffix, SUFFIX_SIZE,\n                                          \" %u %u\\r\\n\", htonl(info.flags),\n                                          info.nbytes);\n\n                /*\n                 * Construct the response. Each hit adds three elements to the\n                 * outgoing data list:\n                 *   \"VALUE \"\n                 *   key\n                 *   \" \" + flags + \" \" + data length + \"\\r\\n\" + data (with \\r\\n)\n                 */\n\n                MEMCACHED_COMMAND_GET(c->sfd, info.key, info.nkey,\n                                      info.nbytes, info.cas);\n                if (return_cas)\n                {\n\n                  char *cas = get_suffix_buffer(c);\n                  if (cas == NULL) {\n                    out_string(c, \"SERVER_ERROR out of memory making CAS suffix\");\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    return NULL;\n                  }\n                  int cas_len = snprintf(cas, SUFFIX_SIZE, \" %\"PRIu64\"\\r\\n\",\n                                         info.cas);\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, info.key, info.nkey) != 0 ||\n                      add_iov(c, suffix, suffix_len - 2) != 0 ||\n                      add_iov(c, cas, cas_len) != 0 ||\n                      add_iov(c, info.value[0].iov_base, info.value[0].iov_len) != 0 ||\n                      add_iov(c, \"\\r\\n\", 2) != 0)\n                      {\n                          settings.engine.v1->release(settings.engine.v0, c, it);\n                          break;\n                      }\n                }\n                else\n                {\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, info.key, info.nkey) != 0 ||\n                      add_iov(c, suffix, suffix_len) != 0 ||\n                      add_iov(c, info.value[0].iov_base, info.value[0].iov_len) != 0 ||\n                      add_iov(c, \"\\r\\n\", 2) != 0)\n                      {\n                          settings.engine.v1->release(settings.engine.v0, c, it);\n                          break;\n                      }\n                }\n\n\n                if (settings.verbose > 1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                    \">%d sending key %s\\n\",\n                                                    c->sfd, info.key);\n                }\n\n                /* item_get() has incremented it->refcount for us */\n                STATS_HIT(c, get, key, nkey);\n                *(c->ilist + i) = it;\n                i++;\n\n            } else {\n                STATS_MISS(c, get, key, nkey);\n                MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n            }\n\n            key_token++;\n        }\n\n        /*\n         * If the command string hasn't been fully processed, get the next set\n         * of tokens.\n         */\n        if(key_token->value != NULL) {\n            ntokens = tokenize_command(key_token->value, tokens, MAX_TOKENS);\n            key_token = tokens;\n        }\n\n    } while(key_token->value != NULL);\n\n    c->icurr = c->ilist;\n    c->ileft = i;\n    c->suffixcurr = c->suffixlist;\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d END\\n\", c->sfd);\n    }\n\n    /*\n        If the loop was terminated because of out-of-memory, it is not\n        reliable to add END\\r\\n to the buffer, because it might not end\n        in \\r\\n. So we send SERVER_ERROR instead.\n    */\n    if (key_token->value != NULL || add_iov(c, \"END\\r\\n\", 5) != 0\n        || (IS_UDP(c->transport) && build_udp_headers(c) != 0)) {\n        out_string(c, \"SERVER_ERROR out of memory writing get response\");\n    }\n    else {\n        conn_set_state(c, conn_mwrite);\n        c->msgcurr = 0;\n    }\n\n    return NULL;\n}\n\nstatic void process_update_command(conn *c, token_t *tokens, const size_t ntokens, ENGINE_STORE_OPERATION store_op, bool handle_cas) {\n    char *key;\n    size_t nkey;\n    unsigned int flags;\n    int32_t exptime_int = 0;\n    time_t exptime;\n    int vlen;\n    uint64_t req_cas_id=0;\n    item *it;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (! (safe_strtoul(tokens[2].value, (uint32_t *)&flags)\n           && safe_strtol(tokens[3].value, &exptime_int)\n           && safe_strtol(tokens[4].value, (int32_t *)&vlen))) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    /* Ubuntu 8.04 breaks when I pass exptime to safe_strtol */\n    exptime = exptime_int;\n\n    // does cas value exist?\n    if (handle_cas) {\n        if (!safe_strtoull(tokens[5].value, &req_cas_id)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return;\n        }\n    }\n\n    if (vlen < 0) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen, htonl(flags), exptime);\n    }\n\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, req_cas_id);\n        if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            out_string(c, \"SERVER_ERROR error getting item data\");\n            break;\n        }\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        c->store_op = store_op;\n        conn_set_state(c, conn_nread);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            out_string(c, \"SERVER_ERROR object too large for cache\");\n        } else {\n            out_string(c, \"SERVER_ERROR out of memory storing object\");\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        c->sbytes = vlen + 2;\n\n        /* Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET. Anywhere else too? */\n        if (store_op == OPERATION_SET) {\n            settings.engine.v1->remove(settings.engine.v0, c, key, nkey, 0, 0);\n        }\n    }\n}\n\nstatic char* process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {\n\n    uint64_t delta;\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (!safe_strtoull(tokens[2].value, &delta)) {\n        out_string(c, \"CLIENT_ERROR invalid numeric delta argument\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    uint64_t cas;\n    uint64_t result;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->arithmetic(settings.engine.v0, c, key, nkey,\n                                             incr, false, delta, 0, 0, &cas,\n                                             &result, 0);\n    }\n\n    char temp[INCR_MAX_STORAGE_LEN];\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        if (incr) {\n            STATS_INCR(c, incr_hits, key, nkey);\n        } else {\n            STATS_INCR(c, decr_hits, key, nkey);\n        }\n        snprintf(temp, sizeof(temp), \"%\"PRIu64, result);\n        out_string(c, temp);\n        break;\n    case ENGINE_KEY_ENOENT:\n        if (incr) {\n            STATS_INCR(c, incr_misses, key, nkey);\n        } else {\n            STATS_INCR(c, decr_misses, key, nkey);\n        }\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case ENGINE_ENOMEM:\n        out_string(c, \"SERVER_ERROR out of memory\");\n        break;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    case ENGINE_EINVAL:\n        out_string(c, \"CLIENT_ERROR cannot increment or decrement non-numeric value\");\n        break;\n    case ENGINE_NOT_STORED:\n        out_string(c, \"SERVER_ERROR failed to store item\");\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        out_string(c, \"SERVER_ERROR not supported\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return key;\n    default:\n        abort();\n    }\n\n    return NULL;\n}\n\nstatic char *process_delete_command(conn *c, token_t *tokens,\n                                    const size_t ntokens) {\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    if (ntokens > 3) {\n        bool hold_is_zero = strcmp(tokens[KEY_TOKEN+1].value, \"0\") == 0;\n        bool sets_noreply = set_noreply_maybe(c, tokens, ntokens);\n        bool valid = (ntokens == 4 && (hold_is_zero || sets_noreply))\n            || (ntokens == 5 && hold_is_zero && sets_noreply);\n        if (!valid) {\n            out_string(c, \"CLIENT_ERROR bad command line format.  \"\n                       \"Usage: delete <key> [noreply]\");\n            return NULL;\n        }\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (nkey > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->remove(settings.engine.v0, c,\n                                         key, nkey, 0, 0);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"DELETED\");\n        SLAB_INCR(c, delete_hits, key, nkey);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return key;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    default:\n        out_string(c, \"NOT_FOUND\");\n        STATS_INCR(c, delete_misses, key, nkey);\n    }\n\n    if (ret != ENGINE_EWOULDBLOCK && settings.detail_enabled) {\n        stats_prefix_record_delete(key, nkey);\n    }\n    return NULL;\n}\n\nstatic void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {\n    unsigned int level;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n    if (c->noreply && ntokens == 3) {\n        /* \"verbosity noreply\" is not according to the correct syntax */\n        c->noreply = false;\n        out_string(c, \"ERROR\");\n        return;\n    }\n\n    if (safe_strtoul(tokens[1].value, &level)) {\n        settings.verbose = level > MAX_VERBOSITY_LEVEL ? MAX_VERBOSITY_LEVEL : level;\n        perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n        out_string(c, \"OK\");\n    } else {\n        out_string(c, \"ERROR\");\n    }\n}\n\nstatic char* process_command(conn *c, char *command) {\n\n    token_t tokens[MAX_TOKENS];\n    size_t ntokens;\n    int comm;\n    char *ret = NULL;\n\n    assert(c != NULL);\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"<%d %s\\n\", c->sfd, command);\n    }\n\n    /*\n     * for commands set/add/replace, we build an item and read the data\n     * directly into it, then continue in nread_complete().\n     */\n\n    if (c->ewouldblock) {\n        /*\n         * If we are retrying after the engine has completed a pending io for\n         * this command, skip add_msghdr() etc and clear the ewouldblock flag.\n         */\n        c->ewouldblock = false;\n    } else {\n        c->msgcurr = 0;\n        c->msgused = 0;\n        c->iovused = 0;\n        if (add_msghdr(c) != 0) {\n            out_string(c, \"SERVER_ERROR out of memory preparing response\");\n            return NULL;\n        }\n    }\n\n    ntokens = tokenize_command(command, tokens, MAX_TOKENS);\n    if (ntokens >= 3 &&\n        ((strcmp(tokens[COMMAND_TOKEN].value, \"get\") == 0) ||\n         (strcmp(tokens[COMMAND_TOKEN].value, \"bget\") == 0))) {\n\n        ret = process_get_command(c, tokens, ntokens, false);\n\n    } else if ((ntokens == 6 || ntokens == 7) &&\n               ((strcmp(tokens[COMMAND_TOKEN].value, \"add\") == 0 && (comm = (int)OPERATION_ADD)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"set\") == 0 && (comm = (int)OPERATION_SET)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"replace\") == 0 && (comm = (int)OPERATION_REPLACE)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"prepend\") == 0 && (comm = (int)OPERATION_PREPEND)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"append\") == 0 && (comm = (int)OPERATION_APPEND)) )) {\n\n        process_update_command(c, tokens, ntokens, (ENGINE_STORE_OPERATION)comm, false);\n\n    } else if ((ntokens == 7 || ntokens == 8) && (strcmp(tokens[COMMAND_TOKEN].value, \"cas\") == 0 && (comm = (int)OPERATION_CAS))) {\n\n        process_update_command(c, tokens, ntokens, (ENGINE_STORE_OPERATION)comm, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"incr\") == 0)) {\n\n        ret = process_arithmetic_command(c, tokens, ntokens, 1);\n\n    } else if (ntokens >= 3 && (strcmp(tokens[COMMAND_TOKEN].value, \"gets\") == 0)) {\n\n        ret = process_get_command(c, tokens, ntokens, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"decr\") == 0)) {\n\n        ret = process_arithmetic_command(c, tokens, ntokens, 0);\n\n    } else if (ntokens >= 3 && ntokens <= 5 && (strcmp(tokens[COMMAND_TOKEN].value, \"delete\") == 0)) {\n\n        ret = process_delete_command(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"stats\") == 0)) {\n\n        ret = process_stat(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && ntokens <= 4 && (strcmp(tokens[COMMAND_TOKEN].value, \"flush_all\") == 0)) {\n        time_t exptime;\n\n        set_noreply_maybe(c, tokens, ntokens);\n\n        if (ntokens == (c->noreply ? 3 : 2)) {\n            exptime = 0;\n        } else {\n            exptime = strtol(tokens[1].value, NULL, 10);\n            if(errno == ERANGE) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return NULL;\n            }\n        }\n\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            ret = settings.engine.v1->flush(settings.engine.v0, c, exptime);\n        }\n\n        switch (ret) {\n        case  ENGINE_SUCCESS:\n            out_string(c, \"OK\");\n            break;\n        case ENGINE_ENOTSUP:\n            out_string(c, \"SERVER_ERROR not supported\");\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            return c->rcurr + 9;\n        default:\n            out_string(c, \"SERVER_ERROR failed to flush cache\");\n        }\n\n        if (ret != ENGINE_EWOULDBLOCK) {\n            STATS_NOKEY(c, cmd_flush);\n        }\n        return NULL;\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"version\") == 0)) {\n\n        out_string(c, \"VERSION \" VERSION);\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"quit\") == 0)) {\n\n        conn_set_state(c, conn_closing);\n\n    } else if ((ntokens == 3 || ntokens == 4) && (strcmp(tokens[COMMAND_TOKEN].value, \"verbosity\") == 0)) {\n        process_verbosity_command(c, tokens, ntokens);\n    } else if (settings.extensions.ascii != NULL) {\n        EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *cmd;\n        size_t nbytes = 0;\n        char *ptr;\n\n        if (ntokens > 0) {\n            if (ntokens == MAX_TOKENS) {\n                out_string(c, \"ERROR too many arguments\");\n                return NULL;\n            }\n\n            if (tokens[ntokens - 1].length == 0) {\n                --ntokens;\n            }\n        }\n\n        for (cmd = settings.extensions.ascii; cmd != NULL; cmd = cmd->next) {\n            if (cmd->accept(cmd->cookie, c, ntokens, tokens, &nbytes, &ptr)) {\n                break;\n            }\n        }\n\n        if (cmd == NULL) {\n            out_string(c, \"ERROR unknown command\");\n        } else if (nbytes == 0) {\n            switch (cmd->execute(cmd->cookie, c, ntokens, tokens,\n                                 ascii_response_handler)) {\n            case ENGINE_SUCCESS:\n                if (c->dynamic_buffer.buffer != NULL) {\n                    write_and_free(c, c->dynamic_buffer.buffer,\n                                   c->dynamic_buffer.offset);\n                    c->dynamic_buffer.buffer = NULL;\n                } else {\n                    conn_set_state(c, conn_new_cmd);\n                }\n                break;\n            case ENGINE_EWOULDBLOCK:\n                c->ewouldblock = true;\n                ret = tokens[KEY_TOKEN].value;;\n                break;\n            case ENGINE_DISCONNECT:\n            default:\n                conn_set_state(c, conn_closing);\n\n            }\n        } else {\n            c->rlbytes = nbytes;\n            c->ritem = ptr;\n            c->ascii_cmd = cmd;\n            /* NOT SUPPORTED YET! */\n            conn_set_state(c, conn_nread);\n        }\n    } else {\n        out_string(c, \"ERROR\");\n    }\n    return ret;\n}\n\n/*\n * if we have a complete line in the buffer, process it.\n */\nstatic int try_read_command(conn *c) {\n    assert(c != NULL);\n    assert(c->rcurr <= (c->rbuf + c->rsize));\n    assert(c->rbytes > 0);\n\n    if (c->protocol == negotiating_prot || c->transport == udp_transport)  {\n        if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {\n            c->protocol = binary_prot;\n        } else {\n            c->protocol = ascii_prot;\n        }\n\n        if (settings.verbose > 1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                    \"%d: Client using the %s protocol\\n\", c->sfd,\n                    prot_text(c->protocol));\n        }\n    }\n\n    if (c->protocol == binary_prot) {\n        /* Do we have the complete packet header? */\n        if (c->rbytes < sizeof(c->binary_header)) {\n            /* need more data! */\n            return 0;\n        } else {\n#ifdef NEED_ALIGN\n            if (((long)(c->rcurr)) % 8 != 0) {\n                /* must realign input buffer */\n                memmove(c->rbuf, c->rcurr, c->rbytes);\n                c->rcurr = c->rbuf;\n                if (settings.verbose > 1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                             \"%d: Realign input buffer\\n\", c->sfd);\n                }\n            }\n#endif\n            protocol_binary_request_header* req;\n            req = (protocol_binary_request_header*)c->rcurr;\n\n            if (settings.verbose > 1) {\n                /* Dump the packet before we convert it to host order */\n                char buffer[1024];\n                ssize_t nw;\n                nw = bytes_to_output_string(buffer, sizeof(buffer), c->sfd,\n                                            true, \"Read binary protocol data:\",\n                                            (const char*)req->bytes,\n                                            sizeof(req->bytes));\n                if (nw != -1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                    \"%s\", buffer);\n                }\n            }\n\n            c->binary_header = *req;\n            c->binary_header.request.keylen = ntohs(req->request.keylen);\n            c->binary_header.request.bodylen = ntohl(req->request.bodylen);\n            c->binary_header.request.vbucket = ntohs(req->request.vbucket);\n            c->binary_header.request.cas = ntohll(req->request.cas);\n\n\n            if (c->binary_header.request.magic != PROTOCOL_BINARY_REQ &&\n                !(c->binary_header.request.magic == PROTOCOL_BINARY_RES &&\n                  response_handlers[c->binary_header.request.opcode])) {\n                if (settings.verbose) {\n                    if (c->binary_header.request.magic != PROTOCOL_BINARY_RES) {\n                        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                              \"%d: Invalid magic:  %x\\n\", c->sfd,\n                              c->binary_header.request.magic);\n                    } else {\n                        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                              \"%d: ERROR: Unsupported response packet received: %u\\n\",\n                              c->sfd, (unsigned int)c->binary_header.request.opcode);\n\n                    }\n                }\n                conn_set_state(c, conn_closing);\n                return -1;\n            }\n\n            c->msgcurr = 0;\n            c->msgused = 0;\n            c->iovused = 0;\n            if (add_msghdr(c) != 0) {\n                out_string(c, \"SERVER_ERROR out of memory\");\n                return 0;\n            }\n\n            c->cmd = c->binary_header.request.opcode;\n            c->keylen = c->binary_header.request.keylen;\n            c->opaque = c->binary_header.request.opaque;\n            /* clear the returned cas value */\n            c->cas = 0;\n\n            dispatch_bin_command(c);\n\n            c->rbytes -= sizeof(c->binary_header);\n            c->rcurr += sizeof(c->binary_header);\n        }\n    } else {\n        char *el, *cont, *left, lb;\n\n        if (c->rbytes == 0) {\n            return 0;\n        }\n\n        el = memchr(c->rcurr, '\\n', c->rbytes);\n        if (!el) {\n            if (c->rbytes > 1024) {\n                /*\n                 * We didn't have a '\\n' in the first k. This _has_ to be a\n                 * large multiget, if not we should just nuke the connection.\n                 */\n                char *ptr = c->rcurr;\n                while (*ptr == ' ') { /* ignore leading whitespaces */\n                    ++ptr;\n                }\n\n                if (ptr - c->rcurr > 100 ||\n                    (strncmp(ptr, \"get \", 4) && strncmp(ptr, \"gets \", 5))) {\n\n                    conn_set_state(c, conn_closing);\n                    return 1;\n                }\n            }\n\n            return 0;\n        }\n        cont = el + 1;\n        if ((el - c->rcurr) > 1 && *(el - 1) == '\\r') {\n            el--;\n        }\n        lb = *el;\n        *el = '\\0';\n\n        assert(cont <= (c->rcurr + c->rbytes));\n\n        LIBEVENT_THREAD *thread = c->thread;\n        LOCK_THREAD(thread);\n        left = process_command(c, c->rcurr);\n        if (c->ewouldblock) {\n            unregister_event(c);\n        }\n        UNLOCK_THREAD(thread);\n\n        if (left != NULL) {\n            /*\n             * We have not processed the entire command. This happens\n             * when the engine returns ENGINE_EWOULDBLOCK for one of the\n             * keys in a get/gets request.\n             */\n            assert (left <= el);\n\n            int count = strlen(c->rcurr);\n            if ((c->rcurr + count) == left) {\n                // Retry the entire command\n                cont = c->rcurr;\n            } else {\n                left -= (count + 1);\n                cont = left;\n                assert(cont >= c->rcurr);\n                if (cont > c->rcurr) {\n                    memmove(cont, c->rcurr, count);\n                }\n            }\n\n            /* de-tokenize the command */\n            while ((left = memchr(left, '\\0', el - left)) != NULL) {\n                *left = ' ';\n            }\n            *el = lb;\n        }\n\n        c->rbytes -= (cont - c->rcurr);\n        c->rcurr = cont;\n\n        assert(c->rcurr <= (c->rbuf + c->rsize));\n    }\n\n    return 1;\n}\n\n/*\n * read a UDP request.\n */\nstatic enum try_read_result try_read_udp(conn *c) {\n    int res;\n\n    assert(c != NULL);\n\n    c->request_addr_size = sizeof(c->request_addr);\n    res = recvfrom(c->sfd, c->rbuf, c->rsize,\n                   0, (struct sockaddr *)&c->request_addr, &c->request_addr_size);\n    if (res > 8) {\n        unsigned char *buf = (unsigned char *)c->rbuf;\n        STATS_ADD(c, bytes_read, res);\n\n        /* Beginning of UDP packet is the request ID; save it. */\n        c->request_id = buf[0] * 256 + buf[1];\n\n        /* If this is a multi-packet request, drop it. */\n        if (buf[4] != 0 || buf[5] != 1) {\n            out_string(c, \"SERVER_ERROR multi-packet request not supported\");\n            return READ_NO_DATA_RECEIVED;\n        }\n\n        /* Don't care about any of the rest of the header. */\n        res -= 8;\n        memmove(c->rbuf, c->rbuf + 8, res);\n\n        c->rbytes += res;\n        c->rcurr = c->rbuf;\n        return READ_DATA_RECEIVED;\n    }\n    return READ_NO_DATA_RECEIVED;\n}\n\n/*\n * read from network as much as we can, handle buffer overflow and connection\n * close.\n * before reading, move the remaining incomplete fragment of a command\n * (if any) to the beginning of the buffer.\n *\n * To protect us from someone flooding a connection with bogus data causing\n * the connection to eat up all available memory, break out and start looking\n * at the data I've got after a number of reallocs...\n *\n * @return enum try_read_result\n */\nstatic enum try_read_result try_read_network(conn *c) {\n    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;\n    int res;\n    int num_allocs = 0;\n    assert(c != NULL);\n\n    if (c->rcurr != c->rbuf) {\n        if (c->rbytes != 0) /* otherwise there's nothing to copy */\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n        c->rcurr = c->rbuf;\n    }\n\n    while (1) {\n        if (c->rbytes >= c->rsize) {\n            if (num_allocs == 4) {\n                return gotdata;\n            }\n            ++num_allocs;\n            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);\n            if (!new_rbuf) {\n                if (settings.verbose > 0) {\n                 settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                          \"Couldn't realloc input buffer\\n\");\n                }\n                c->rbytes = 0; /* ignore what we read */\n                out_string(c, \"SERVER_ERROR out of memory reading request\");\n                c->write_and_go = conn_closing;\n                return READ_MEMORY_ERROR;\n            }\n            c->rcurr = c->rbuf = new_rbuf;\n            c->rsize *= 2;\n        }\n\n        int avail = c->rsize - c->rbytes;\n        res = recv(c->sfd, c->rbuf + c->rbytes, avail, 0);\n        if (res > 0) {\n            STATS_ADD(c, bytes_read, res);\n            gotdata = READ_DATA_RECEIVED;\n            c->rbytes += res;\n            if (res == avail) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        if (res == 0) {\n            return READ_ERROR;\n        }\n        if (res == -1) {\n            if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                break;\n            }\n            return READ_ERROR;\n        }\n    }\n    return gotdata;\n}\n\nbool register_event(conn *c, struct timeval *timeout) {\n    assert(!c->registered_in_libevent);\n\n    if (event_add(&c->event, timeout) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING,\n                                        NULL,\n                                        \"Failed to add connection to libevent: %s\",\n                                        strerror(errno));\n        return false;\n    }\n\n    c->registered_in_libevent = true;\n\n    return true;\n}\n\nbool unregister_event(conn *c) {\n    assert(c->registered_in_libevent);\n\n    if (event_del(&c->event) == -1) {\n        return false;\n    }\n\n    c->registered_in_libevent = false;\n\n    return true;\n}\n\n\nbool update_event(conn *c, const int new_flags) {\n    assert(c != NULL);\n\n    struct event_base *base = c->event.ev_base;\n    if (c->ev_flags == new_flags)\n        return true;\n\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                    \"Updated event for %d to read=%s, write=%s\\n\",\n                                    c->sfd, (new_flags & EV_READ ? \"yes\" : \"no\"),\n                                    (new_flags & EV_WRITE ? \"yes\" : \"no\"));\n\n    if (!unregister_event(c)) {\n        return false;\n    }\n\n    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = new_flags;\n\n    return register_event(c, NULL);\n}\n\n/*\n * Transmit the next chunk of data from our list of msgbuf structures.\n *\n * Returns:\n *   TRANSMIT_COMPLETE   All done writing.\n *   TRANSMIT_INCOMPLETE More data remaining to write.\n *   TRANSMIT_SOFT_ERROR Can't write any more right now.\n *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)\n */\nstatic enum transmit_result transmit(conn *c) {\n    assert(c != NULL);\n\n    if (c->msgcurr < c->msgused &&\n            c->msglist[c->msgcurr].msg_iovlen == 0) {\n        /* Finished writing the current msg; advance to the next. */\n        c->msgcurr++;\n    }\n    if (c->msgcurr < c->msgused) {\n        ssize_t res;\n        struct msghdr *m = &c->msglist[c->msgcurr];\n\n        res = sendmsg(c->sfd, m, 0);\n        if (res > 0) {\n            STATS_ADD(c, bytes_written, res);\n\n            /* We've written some of the data. Remove the completed\n               iovec entries from the list of pending writes. */\n            while (m->msg_iovlen > 0 && res >= m->msg_iov->iov_len) {\n                res -= m->msg_iov->iov_len;\n                m->msg_iovlen--;\n                m->msg_iov++;\n            }\n\n            /* Might have written just part of the last iovec entry;\n               adjust it so the next write will do the rest. */\n            if (res > 0) {\n                m->msg_iov->iov_base = (caddr_t)m->msg_iov->iov_base + res;\n                m->msg_iov->iov_len -= res;\n            }\n            return TRANSMIT_INCOMPLETE;\n        }\n        if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                            \"Couldn't update event\\n\");\n                }\n                conn_set_state(c, conn_closing);\n                return TRANSMIT_HARD_ERROR;\n            }\n            return TRANSMIT_SOFT_ERROR;\n        }\n        /* if res == 0 or res == -1 and error is not EAGAIN or EWOULDBLOCK,\n           we have a real error, on which we close the connection */\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"Failed to write, and not due to blocking: %s\",\n                                            strerror(errno));\n        }\n\n        if (IS_UDP(c->transport))\n            conn_set_state(c, conn_read);\n        else\n            conn_set_state(c, conn_closing);\n        return TRANSMIT_HARD_ERROR;\n    } else {\n        return TRANSMIT_COMPLETE;\n    }\n}\n\nbool conn_listening(conn *c)\n{\n    int sfd;\n    struct sockaddr_storage addr;\n    socklen_t addrlen = sizeof(addr);\n\n    if ((sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen)) == -1) {\n        if (errno == EMFILE) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Too many open connections\\n\");\n            }\n            disable_listen();\n        } else if (errno != EAGAIN && errno != EWOULDBLOCK) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"Failed to accept new client: %s\\n\",\n                                            strerror(errno));\n        }\n\n        return false;\n    }\n\n    STATS_LOCK();\n    int curr_conns = ++stats.curr_conns;\n    STATS_UNLOCK();\n\n    if (curr_conns >= settings.maxconns) {\n        STATS_LOCK();\n        ++stats.rejected_conns;\n        STATS_UNLOCK();\n\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Too many open connections\\n\");\n        }\n\n        safe_close(sfd);\n        return false;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return false;\n    }\n\n    dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,\n                      DATA_BUFFER_SIZE, tcp_transport);\n\n    return false;\n}\n\n/**\n * Ship tap log to the other end. This state differs with all other states\n * in the way that it support full duplex dialog. We're listening to both read\n * and write events from libevent most of the time. If a read event occurs we\n * switch to the conn_read state to read and execute the input message (that would\n * be an ack message from the other side). If a write event occurs we continue to\n * send tap log to the other end.\n * @param c the tap connection to drive\n * @return true if we should continue to process work for this connection, false\n *              if we should start processing events for other connections.\n */\nbool conn_ship_log(conn *c) {\n    bool cont = false;\n\n    if (c->sfd == INVALID_SOCKET) {\n        return false;\n    }\n\n    short mask = EV_READ | EV_PERSIST | EV_WRITE;\n\n    if (c->which & EV_READ || c->rbytes > 0) {\n        if (c->rbytes > 0) {\n            if (try_read_command(c) == 0) {\n                conn_set_state(c, conn_read);\n            }\n        } else {\n            conn_set_state(c, conn_read);\n        }\n\n        // we're going to process something.. let's proceed\n        cont = true;\n\n        // We have a finite number of messages in the input queue\n        // so let's process all of them instead of backing off after\n        // reading a subset of them.\n        // Why? Because we've got every time we're calling ship_tap_log\n        // we try to send a chunk of items.. This means that if we end\n        // up in a situation where we're receiving a burst of nack messages\n        // we'll only process a subset of messages in our input queue,\n        // and it will slowly grow..\n        c->nevents = settings.reqs_per_tap_event;\n    } else if (c->which & EV_WRITE) {\n        --c->nevents;\n        if (c->nevents >= 0) {\n            LOCK_THREAD(c->thread);\n            c->ewouldblock = false;\n            ship_tap_log(c);\n            if (c->ewouldblock) {\n                mask = EV_READ | EV_PERSIST;\n            } else {\n                cont = true;\n            }\n            UNLOCK_THREAD(c->thread);\n        }\n    }\n\n    if (!update_event(c, mask)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO,\n                                            c, \"Couldn't update event\\n\");\n        }\n        conn_set_state(c, conn_closing);\n    }\n\n    return cont;\n}\n\nbool conn_waiting(conn *c) {\n    if (!update_event(c, EV_READ | EV_PERSIST)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Couldn't update event\\n\");\n        }\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n    conn_set_state(c, conn_read);\n    return false;\n}\n\nbool conn_read(conn *c) {\n    int res = IS_UDP(c->transport) ? try_read_udp(c) : try_read_network(c);\n    switch (res) {\n    case READ_NO_DATA_RECEIVED:\n        conn_set_state(c, conn_waiting);\n        break;\n    case READ_DATA_RECEIVED:\n        conn_set_state(c, conn_parse_cmd);\n        break;\n    case READ_ERROR:\n        conn_set_state(c, conn_closing);\n        break;\n    case READ_MEMORY_ERROR: /* Failed to allocate more memory */\n        /* State already set by try_read_network */\n        break;\n    }\n\n    return true;\n}\n\nbool conn_parse_cmd(conn *c) {\n    if (try_read_command(c) == 0) {\n        /* wee need more data! */\n        conn_set_state(c, conn_waiting);\n    }\n\n    return !c->ewouldblock;\n}\n\nbool conn_new_cmd(conn *c) {\n    /* Only process nreqs at a time to avoid starving other connections */\n    --c->nevents;\n    if (c->nevents >= 0) {\n        reset_cmd_handler(c);\n    } else {\n        STATS_NOKEY(c, conn_yields);\n        if (c->rbytes > 0) {\n            /* We have already read in data into the input buffer,\n               so libevent will most likely not signal read events\n               on the socket (unless more data is available. As a\n               hack we should just put in a request to write data,\n               because that should be possible ;-)\n            */\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_INFO,\n                                                    c, \"Couldn't update event\\n\");\n                }\n                conn_set_state(c, conn_closing);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    return true;\n}\n\n\nbool conn_swallow(conn *c) {\n    ssize_t res;\n    /* we are reading sbytes and throwing them away */\n    if (c->sbytes == 0) {\n        conn_set_state(c, conn_new_cmd);\n        return true;\n    }\n\n    /* first check if we have leftovers in the conn_read buffer */\n    if (c->rbytes > 0) {\n        uint32_t tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;\n        c->sbytes -= tocopy;\n        c->rcurr += tocopy;\n        c->rbytes -= tocopy;\n        return true;\n    }\n\n    /*  now try reading from the socket */\n    res = recv(c->sfd, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize, 0);\n    if (res > 0) {\n        STATS_ADD(c, bytes_read, res);\n        c->sbytes -= res;\n        return true;\n    }\n    if (res == 0) { /* end of stream */\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n        if (!update_event(c, EV_READ | EV_PERSIST)) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't update event\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n        return false;\n    }\n\n    if (errno != ENOTCONN && errno != ECONNRESET) {\n        /* otherwise we have a real error, on which we close the connection */\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                        \"Failed to read, and not due to blocking (%s)\\n\",\n                                        strerror(errno));\n    }\n\n    conn_set_state(c, conn_closing);\n\n    return true;\n\n}\n\nbool conn_nread(conn *c) {\n    ssize_t res;\n\n    if (c->rlbytes == 0) {\n        LIBEVENT_THREAD *t = c->thread;\n        LOCK_THREAD(t);\n        bool block = c->ewouldblock = false;\n        complete_nread(c);\n        UNLOCK_THREAD(t);\n        /* Breaking this into two, as complete_nread may have\n           moved us to a different thread */\n        t = c->thread;\n        LOCK_THREAD(t);\n        if (c->ewouldblock) {\n            unregister_event(c);\n            block = true;\n        }\n        UNLOCK_THREAD(t);\n        return !block;\n    }\n    /* first check if we have leftovers in the conn_read buffer */\n    if (c->rbytes > 0) {\n        uint32_t tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;\n        if (c->ritem != c->rcurr) {\n            memmove(c->ritem, c->rcurr, tocopy);\n        }\n        c->ritem += tocopy;\n        c->rlbytes -= tocopy;\n        c->rcurr += tocopy;\n        c->rbytes -= tocopy;\n        if (c->rlbytes == 0) {\n            return true;\n        }\n    }\n\n    /*  now try reading from the socket */\n    res = recv(c->sfd, c->ritem, c->rlbytes, 0);\n    if (res > 0) {\n        STATS_ADD(c, bytes_read, res);\n        if (c->rcurr == c->ritem) {\n            c->rcurr += res;\n        }\n        c->ritem += res;\n        c->rlbytes -= res;\n        return true;\n    }\n    if (res == 0) { /* end of stream */\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n        if (!update_event(c, EV_READ | EV_PERSIST)) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't update event\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n        return false;\n    }\n\n    if (errno != ENOTCONN && errno != ECONNRESET) {\n        /* otherwise we have a real error, on which we close the connection */\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Failed to read, and not due to blocking:\\n\"\n                                        \"errno: %d %s \\n\"\n                                        \"rcurr=%lx ritem=%lx rbuf=%lx rlbytes=%d rsize=%d\\n\",\n                                        errno, strerror(errno),\n                                        (long)c->rcurr, (long)c->ritem, (long)c->rbuf,\n                                        (int)c->rlbytes, (int)c->rsize);\n    }\n    conn_set_state(c, conn_closing);\n    return true;\n}\n\nbool conn_write(conn *c) {\n    /*\n     * We want to write out a simple response. If we haven't already,\n     * assemble it into a msgbuf list (this will be a single-entry\n     * list for TCP or a two-entry list for UDP).\n     */\n    if (c->iovused == 0 || (IS_UDP(c->transport) && c->iovused == 1)) {\n        if (add_iov(c, c->wcurr, c->wbytes) != 0) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't build response\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n    }\n\n    return conn_mwrite(c);\n}\n\nbool conn_mwrite(conn *c) {\n    if (IS_UDP(c->transport) && c->msgcurr == 0 && build_udp_headers(c) != 0) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Failed to build UDP headers\\n\");\n        }\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n\n    switch (transmit(c)) {\n    case TRANSMIT_COMPLETE:\n        if (c->state == conn_mwrite) {\n            while (c->ileft > 0) {\n                item *it = *(c->icurr);\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                c->icurr++;\n                c->ileft--;\n            }\n            while (c->suffixleft > 0) {\n                char *suffix = *(c->suffixcurr);\n                cache_free(c->thread->suffix_cache, suffix);\n                c->suffixcurr++;\n                c->suffixleft--;\n            }\n            /* XXX:  I don't know why this wasn't the general case */\n            if(c->protocol == binary_prot) {\n                conn_set_state(c, c->write_and_go);\n            } else {\n                conn_set_state(c, conn_new_cmd);\n            }\n        } else if (c->state == conn_write) {\n            if (c->write_and_free) {\n                free(c->write_and_free);\n                c->write_and_free = 0;\n            }\n            conn_set_state(c, c->write_and_go);\n        } else {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Unexpected state %d\\n\", c->state);\n            }\n            conn_set_state(c, conn_closing);\n        }\n        break;\n\n    case TRANSMIT_INCOMPLETE:\n    case TRANSMIT_HARD_ERROR:\n        break;                   /* Continue in state machine. */\n\n    case TRANSMIT_SOFT_ERROR:\n        return false;\n    }\n\n    return true;\n}\n\nbool conn_pending_close(conn *c) {\n    assert(c->sfd == INVALID_SOCKET);\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                    \"Awaiting clients to release the cookie (pending close for %p)\",\n                                    (void*)c);\n    LOCK_THREAD(c->thread);\n    c->thread->pending_io = list_remove(c->thread->pending_io, c);\n    if (!list_contains(c->thread->pending_close, c)) {\n        enlist_conn(c, &c->thread->pending_close);\n    }\n    UNLOCK_THREAD(c->thread);\n\n    /*\n     * tell the tap connection that we're disconnecting it now,\n     * but give it a grace period\n     */\n    perform_callbacks(ON_DISCONNECT, NULL, c);\n\n    /*\n     * disconnect callback may have changed the state for the object\n     * so we might complete the disconnect now\n     */\n    return c->state != conn_pending_close;\n}\n\nbool conn_immediate_close(conn *c) {\n    settings.extensions.logger->log(EXTENSION_LOG_DETAIL, c,\n                                    \"Immediate close of %p\",\n                                    (void*)c);\n    perform_callbacks(ON_DISCONNECT, NULL, c);\n    conn_close(c);\n\n    return false;\n}\n\nbool conn_closing(conn *c) {\n    if (IS_UDP(c->transport)) {\n        conn_cleanup(c);\n        return false;\n    }\n\n    // We don't want any network notifications anymore..\n    unregister_event(c);\n    safe_close(c->sfd);\n    c->sfd = INVALID_SOCKET;\n\n    if (c->refcount > 1) {\n        conn_set_state(c, conn_pending_close);\n    } else {\n        conn_set_state(c, conn_immediate_close);\n    }\n    return true;\n}\n\nbool conn_add_tap_client(conn *c) {\n    LIBEVENT_THREAD *tp = tap_thread;\n    LIBEVENT_THREAD *orig_thread = c->thread;\n\n    assert(orig_thread);\n    assert(orig_thread != tp);\n\n    c->ewouldblock = true;\n\n    unregister_event(c);\n\n    LOCK_THREAD(orig_thread);\n    /* Clean out the lists */\n    orig_thread->pending_io = list_remove(orig_thread->pending_io, c);\n    orig_thread->pending_close = list_remove(orig_thread->pending_close, c);\n\n    LOCK_THREAD(tp);\n    c->ev_flags = 0;\n    conn_set_state(c, conn_setup_tap_stream);\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                    \"Moving %d conn from %p to %p\\n\",\n                                    c->sfd, c->thread, tp);\n    c->thread = tp;\n    c->event.ev_base = tp->base;\n    assert(c->next == NULL);\n    assert(c->list_state == 0);\n    enlist_conn(c, &tp->pending_io);\n\n    UNLOCK_THREAD(tp);\n\n    UNLOCK_THREAD(orig_thread);\n\n    notify_thread(tp);\n\n    return false;\n}\n\nbool conn_setup_tap_stream(conn *c) {\n    process_bin_tap_connect(c);\n    return true;\n}\n\nvoid event_handler(const int fd, const short which, void *arg) {\n    conn *c;\n\n    c = (conn *)arg;\n    assert(c != NULL);\n\n    if (memcached_shutdown) {\n        event_base_loopbreak(c->event.ev_base);\n        return ;\n    }\n\n    c->which = which;\n\n    /* sanity */\n    if (fd != c->sfd) {\n        if (c->sfd != INVALID_SOCKET) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                    \"Catastrophic: event fd doesn't match conn fd!\\n\");\n        }\n        unregister_event(c);\n        if (c->sfd != INVALID_SOCKET && c->thread != NULL) {\n            conn_close(c);\n        }\n        return;\n    }\n\n    perform_callbacks(ON_SWITCH_CONN, c, c);\n\n    c->nevents = settings.reqs_per_event;\n    if (c->state == conn_ship_log) {\n        c->nevents = settings.reqs_per_tap_event;\n    }\n\n    LIBEVENT_THREAD *thr = c->thread;\n\n    // Do we have pending closes?\n    const size_t max_items = 256;\n    conn *pending_close[max_items];\n    size_t n_pending_close = 0;\n    if (thr != NULL) {\n        LOCK_THREAD(thr);\n        if (thr->pending_close && thr->last_checked != current_time) {\n            assert(!has_cycle(thr->pending_close));\n            thr->last_checked = current_time;\n\n            n_pending_close = list_to_array(pending_close, max_items,\n                                            &thr->pending_close);\n        }\n        UNLOCK_THREAD(thr);\n    }\n\n    if (settings.verbose) {\n        do {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"%d - Running task: (%s)\\n\",\n                                            c->sfd, state_text(c->state));\n        } while (c->state(c));\n    } else {\n        while (c->state(c)) {\n            /* empty */\n        }\n    }\n\n    /* Close any connections pending close */\n    if (n_pending_close > 0) {\n        for (size_t i = 0; i < n_pending_close; ++i) {\n            conn *ce = pending_close[i];\n            if (ce->refcount == 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                                \"OK, time to nuke: %p\\n\",\n                                                (void*)ce);\n                conn_close(ce);\n                pending_close[i] = NULL;\n            } else {\n                LOCK_THREAD(ce->thread);\n                enlist_conn(ce, &ce->thread->pending_close);\n                UNLOCK_THREAD(ce->thread);\n            }\n        }\n    }\n\n    if (thr != NULL) {\n        LOCK_THREAD(thr);\n        finalize_list(pending_close, n_pending_close);\n        UNLOCK_THREAD(thr);\n    }\n}\n\nstatic void dispatch_event_handler(int fd, short which, void *arg) {\n    char buffer[80];\n    ssize_t nr = recv(fd, buffer, sizeof(buffer), 0);\n\n    (void)(which);\n    (void)(arg);\n    if (nr != -1 && is_listen_disabled()) {\n        bool enable = false;\n        pthread_mutex_lock(&listen_state.mutex);\n        listen_state.count -= nr;\n        if (listen_state.count <= 0) {\n            enable = true;\n            listen_state.disabled = false;\n        }\n        pthread_mutex_unlock(&listen_state.mutex);\n        if (enable) {\n            conn *next;\n            for (next = listen_conn; next; next = next->next) {\n                update_event(next, EV_READ | EV_PERSIST);\n                if (listen(next->sfd, settings.backlog) != 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"listen() failed\",\n                                                    strerror(errno));\n                }\n            }\n        }\n    }\n}\n\n\n\nstatic SOCKET new_socket(struct addrinfo *ai) {\n    SOCKET sfd;\n\n    sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol);\n    if (sfd == INVALID_SOCKET) {\n        return INVALID_SOCKET;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return INVALID_SOCKET;\n    }\n\n    return sfd;\n}\n\n\n/*\n * Sets a socket's send buffer size to the maximum allowed by the system.\n */\nstatic void maximize_sndbuf(const int sfd) {\n    socklen_t intsize = sizeof(int);\n    int last_good = 0;\n    int min, max, avg;\n    int old_size;\n\n    /* Start with the default size. */\n    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&old_size, &intsize) != 0) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"getsockopt(SO_SNDBUF): %s\",\n                                            strerror(errno));\n        }\n\n        return;\n    }\n\n    /* Binary-search for the real maximum. */\n    min = old_size;\n    max = MAX_SENDBUF_SIZE;\n\n    while (min <= max) {\n        avg = ((unsigned int)(min + max)) / 2;\n        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {\n            last_good = avg;\n            min = avg + 1;\n        } else {\n            max = avg - 1;\n        }\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                 \"<%d send buffer was %d, now %d\\n\", sfd, old_size, last_good);\n    }\n}\n\n\n\n/**\n * Create a socket and bind it to a specific port number\n * @param interface the interface to bind to\n * @param port the port number to bind to\n * @param transport the transport protocol (TCP / UDP)\n * @param portnumber_file A filepointer to write the port numbers to\n *        when they are successfully added to the list of ports we\n *        listen on.\n */\nstatic int server_socket(const char *interface,\n                         int port,\n                         enum network_transport transport,\n                         FILE *portnumber_file) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct addrinfo *ai;\n    struct addrinfo *next;\n    struct addrinfo hints = { .ai_flags = AI_PASSIVE,\n                              .ai_family = AF_UNSPEC };\n    char port_buf[NI_MAXSERV];\n    int error;\n    int success = 0;\n    int flags =1;\n\n    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;\n\n    if (port == -1) {\n        port = 0;\n    }\n    snprintf(port_buf, sizeof(port_buf), \"%d\", port);\n    error= getaddrinfo(interface, port_buf, &hints, &ai);\n    if (error != 0) {\n        if (error != EAI_SYSTEM) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                     \"getaddrinfo(): %s\\n\", gai_strerror(error));\n        } else {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                     \"getaddrinfo(): %s\\n\", strerror(error));\n        }\n        return 1;\n    }\n\n    for (next= ai; next; next= next->ai_next) {\n        conn *listen_conn_add;\n        if ((sfd = new_socket(next)) == INVALID_SOCKET) {\n            /* getaddrinfo can return \"junk\" addresses,\n             * we make sure at least one works before erroring.\n             */\n            continue;\n        }\n\n#ifdef IPV6_V6ONLY\n        if (next->ai_family == AF_INET6) {\n            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(IPV6_V6ONLY): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                continue;\n            }\n        }\n#endif\n\n        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n        if (IS_UDP(transport)) {\n            maximize_sndbuf(sfd);\n        } else {\n            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(SO_KEEPALIVE): %s\",\n                                                strerror(errno));\n            }\n\n            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(SO_LINGER): %s\",\n                                                strerror(errno));\n            }\n\n            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(TCP_NODELAY): %s\",\n                                                strerror(errno));\n            }\n        }\n\n        if (bind(sfd, next->ai_addr, next->ai_addrlen) == SOCKET_ERROR) {\n            if (errno != EADDRINUSE) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"bind(): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            safe_close(sfd);\n            continue;\n        } else {\n            success++;\n            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == SOCKET_ERROR) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"listen(): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            if (portnumber_file != NULL &&\n                (next->ai_addr->sa_family == AF_INET ||\n                 next->ai_addr->sa_family == AF_INET6)) {\n                union {\n                    struct sockaddr_in in;\n                    struct sockaddr_in6 in6;\n                } my_sockaddr;\n                socklen_t len = sizeof(my_sockaddr);\n                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {\n                    if (next->ai_addr->sa_family == AF_INET) {\n                        fprintf(portnumber_file, \"%s INET: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in.sin_port));\n                    } else {\n                        fprintf(portnumber_file, \"%s INET6: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in6.sin6_port));\n                    }\n                }\n            }\n        }\n\n        if (IS_UDP(transport)) {\n            int c;\n\n            for (c = 0; c < settings.num_threads_per_udp; c++) {\n                /* this is guaranteed to hit all threads because we round-robin */\n                dispatch_conn_new(sfd, conn_read, EV_READ | EV_PERSIST,\n                                  UDP_READ_BUFFER_SIZE, transport);\n                STATS_LOCK();\n                ++stats.curr_conns;\n                ++stats.daemon_conns;\n                STATS_UNLOCK();\n            }\n        } else {\n            if (!(listen_conn_add = conn_new(sfd, conn_listening,\n                                             EV_READ | EV_PERSIST, 1,\n                                             transport, main_base, NULL))) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"failed to create listening connection\\n\");\n                exit(EXIT_FAILURE);\n            }\n            listen_conn_add->next = listen_conn;\n            listen_conn = listen_conn_add;\n            STATS_LOCK();\n            ++stats.curr_conns;\n            ++stats.daemon_conns;\n            STATS_UNLOCK();\n        }\n    }\n\n    freeaddrinfo(ai);\n\n    /* Return zero iff we detected no errors in starting up connections */\n    return success == 0;\n}\n\nstatic int server_sockets(int port, enum network_transport transport,\n                          FILE *portnumber_file) {\n    if (settings.inter == NULL) {\n        return server_socket(settings.inter, port, transport, portnumber_file);\n    } else {\n        // tokenize them and bind to each one of them..\n        char *b;\n        int ret = 0;\n        char *list = strdup(settings.inter);\n\n        if (list == NULL) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"Failed to allocate memory for parsing server interface string\\n\");\n            return 1;\n        }\n        for (char *p = strtok_r(list, \";,\", &b);\n             p != NULL;\n             p = strtok_r(NULL, \";,\", &b)) {\n            int the_port = port;\n\n            char *s = strchr(p, ':');\n            if (s != NULL) {\n                *s = '\\0';\n                ++s;\n                if (!safe_strtol(s, &the_port)) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"Invalid port number: \\\"%s\\\"\", s);\n                    return 1;\n                }\n            }\n            if (strcmp(p, \"*\") == 0) {\n                p = NULL;\n            }\n            ret |= server_socket(p, the_port, transport, portnumber_file);\n        }\n        free(list);\n        return ret;\n    }\n}\n\nstatic int new_socket_unix(void) {\n    int sfd;\n\n    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == INVALID_SOCKET) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"socket(AF_UNIX, SOCK_STREAM, 0): %s\",\n                                        strerror(errno));\n        return INVALID_SOCKET;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return INVALID_SOCKET;\n    }\n    return sfd;\n}\n\n/* this will probably not work on windows */\nstatic int server_socket_unix(const char *path, int access_mask) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct sockaddr_un addr;\n    struct stat tstat;\n    int flags =1;\n    int old_umask;\n\n    if (!path) {\n        return 1;\n    }\n\n    if ((sfd = new_socket_unix()) == -1) {\n        return 1;\n    }\n\n    /*\n     * Clean up a previous socket file if we left it around\n     */\n    if (lstat(path, &tstat) == 0) {\n        if (S_ISSOCK(tstat.st_mode))\n            unlink(path);\n    }\n\n    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n\n    /*\n     * the memset call clears nonstandard fields in some impementations\n     * that otherwise mess things up.\n     */\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sun_family = AF_UNIX;\n    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);\n    assert(strcmp(addr.sun_path, path) == 0);\n    old_umask = umask( ~(access_mask&0777));\n    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"bind(): %s\",\n                                        strerror(errno));\n        safe_close(sfd);\n        umask(old_umask);\n        return 1;\n    }\n    umask(old_umask);\n    if (listen(sfd, settings.backlog) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"listen(): %s\",\n                                        strerror(errno));\n        safe_close(sfd);\n        return 1;\n    }\n    if (!(listen_conn = conn_new(sfd, conn_listening,\n                                 EV_READ | EV_PERSIST, 1,\n                                 local_transport, main_base, NULL))) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"failed to create listening connection\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    STATS_LOCK();\n    ++stats.daemon_conns;\n    STATS_UNLOCK();\n\n    return 0;\n}\n\nstatic struct event clockevent;\n\n/* time-sensitive callers can call it by hand with this, outside the normal ever-1-second timer */\nstatic void set_current_time(void) {\n    struct timeval timer;\n\n    gettimeofday(&timer, NULL);\n    current_time = (rel_time_t) (timer.tv_sec - process_started);\n}\n\nstatic void clock_handler(const int fd, const short which, void *arg) {\n    struct timeval t = {.tv_sec = 1, .tv_usec = 0};\n    static bool initialized = false;\n\n    (void)(fd);\n    (void)(which);\n    (void)(arg);\n\n    if (memcached_shutdown) {\n        event_base_loopbreak(main_base);\n        return ;\n    }\n\n    if (initialized) {\n        /* only delete the event if it's actually there. */\n        evtimer_del(&clockevent);\n    } else {\n        initialized = true;\n    }\n\n    evtimer_set(&clockevent, clock_handler, 0);\n    event_base_set(main_base, &clockevent);\n    evtimer_add(&clockevent, &t);\n\n    set_current_time();\n}\n\nstatic void usage(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\");\n    printf(\"-p <num>      TCP port number to listen on (default: 11211)\\n\"\n           \"-U <num>      UDP port number to listen on (default: 11211, 0 is off)\\n\"\n           \"-s <file>     UNIX socket path to listen on (disables network support)\\n\"\n           \"-a <mask>     access mask for UNIX socket, in octal (default: 0700)\\n\"\n           \"-l <addr>     interface to listen on (default: INADDR_ANY, all addresses)\\n\"\n           \"              <addr> may be specified as host:port. If you don't specify\\n\"\n           \"              a port number, the value you specified with -p or -U is\\n\"\n           \"              used. You may specify multiple addresses separated by comma\\n\"\n           \"              or by using -l multiple times\\n\"\n           \"-d            run as a daemon\\n\"\n           \"-r            maximize core file limit\\n\"\n           \"-u <username> assume identity of <username> (only when run as root)\\n\"\n           \"-m <num>      max memory to use for items in megabytes (default: 64 MB)\\n\"\n           \"-M            return error on memory exhausted (rather than removing items)\\n\"\n           \"-c <num>      max simultaneous connections (default: 1000)\\n\"\n           \"-k            lock down all paged memory.  Note that there is a\\n\"\n           \"              limit on how much memory you may lock.  Trying to\\n\"\n           \"              allocate more than that would fail, so be sure you\\n\"\n           \"              set the limit correctly for the user you started\\n\"\n           \"              the daemon with (not for -u <username> user;\\n\"\n           \"              under sh this is done with 'ulimit -S -l NUM_KB').\\n\"\n           \"-v            verbose (print errors/warnings while in event loop)\\n\"\n           \"-vv           very verbose (also print client commands/reponses)\\n\"\n           \"-vvv          extremely verbose (also print internal state transitions)\\n\"\n           \"-h            print this help and exit\\n\"\n           \"-i            print memcached and libevent license\\n\"\n           \"-P <file>     save PID in <file>, only used with -d option\\n\"\n           \"-f <factor>   chunk size growth factor (default: 1.25)\\n\"\n           \"-n <bytes>    minimum space allocated for key+value+flags (default: 48)\\n\");\n    printf(\"-L            Try to use large memory pages (if available). Increasing\\n\"\n           \"              the memory page size could reduce the number of TLB misses\\n\"\n           \"              and improve the performance. In order to get large pages\\n\"\n           \"              from the OS, memcached will allocate the total item-cache\\n\"\n           \"              in one large chunk.\\n\");\n    printf(\"-D <char>     Use <char> as the delimiter between key prefixes and IDs.\\n\"\n           \"              This is used for per-prefix stats reporting. The default is\\n\"\n           \"              \\\":\\\" (colon). If this option is specified, stats collection\\n\"\n           \"              is turned on automatically; if not, then it may be turned on\\n\"\n           \"              by sending the \\\"stats detail on\\\" command to the server.\\n\");\n    printf(\"-t <num>      number of threads to use (default: 4)\\n\");\n    printf(\"-R            Maximum number of requests per event, limits the number of\\n\"\n           \"              requests process for a given connection to prevent \\n\"\n           \"              starvation (default: 20)\\n\");\n    printf(\"-C            Disable use of CAS\\n\");\n    printf(\"-b            Set the backlog queue limit (default: 1024)\\n\");\n    printf(\"-B            Binding protocol - one of ascii, binary, or auto (default)\\n\");\n    printf(\"-I            Override the size of each slab page. Adjusts max item size\\n\"\n           \"              (default: 1mb, min: 1k, max: 128m)\\n\");\n    printf(\"-q            Disable detailed stats commands\\n\");\n#ifdef SASL_ENABLED\n    printf(\"-S            Require SASL authentication\\n\");\n#endif\n    printf(\"-X module,cfg Load the module and initialize it with the config\\n\");\n    printf(\"-E engine     Load engine as the storage engine\\n\");\n    printf(\"-e config     Pass config as configuration options to the storage engine\\n\");\n    printf(\"\\nEnvironment variables:\\n\"\n           \"MEMCACHED_PORT_FILENAME   File to write port information to\\n\"\n           \"MEMCACHED_TOP_KEYS        Number of top keys to keep track of\\n\"\n           \"MEMCACHED_REQS_TAP_EVENT  Similar to -R but for tap_ship_log\\n\");\n}\n\nstatic void usage_license(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\\n\");\n    printf(\n    \"Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions are\\n\"\n    \"met:\\n\"\n    \"\\n\"\n    \"    * Redistributions of source code must retain the above copyright\\n\"\n    \"notice, this list of conditions and the following disclaimer.\\n\"\n    \"\\n\"\n    \"    * Redistributions in binary form must reproduce the above\\n\"\n    \"copyright notice, this list of conditions and the following disclaimer\\n\"\n    \"in the documentation and/or other materials provided with the\\n\"\n    \"distribution.\\n\"\n    \"\\n\"\n    \"    * Neither the name of the Danga Interactive nor the names of its\\n\"\n    \"contributors may be used to endorse or promote products derived from\\n\"\n    \"this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"\n    \"\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n\"\n    \"A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n\"\n    \"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n\"\n    \"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\"\n    \"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"This product includes software developed by Niels Provos.\\n\"\n    \"\\n\"\n    \"[ libevent ]\\n\"\n    \"\\n\"\n    \"Copyright 2000-2003 Niels Provos <provos@citi.umich.edu>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions\\n\"\n    \"are met:\\n\"\n    \"1. Redistributions of source code must retain the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer.\\n\"\n    \"2. Redistributions in binary form must reproduce the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer in the\\n\"\n    \"   documentation and/or other materials provided with the distribution.\\n\"\n    \"3. All advertising materials mentioning features or use of this software\\n\"\n    \"   must display the following acknowledgement:\\n\"\n    \"      This product includes software developed by Niels Provos.\\n\"\n    \"4. The name of the author may not be used to endorse or promote products\\n\"\n    \"   derived from this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\\n\"\n    \"IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\\n\"\n    \"OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\\n\"\n    \"IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\\n\"\n    \"INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\\n\"\n    \"NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n\"\n    \"THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    );\n\n    return;\n}\n\nstatic void save_pid(const char *pid_file) {\n    FILE *fp;\n\n    if (access(pid_file, F_OK) == 0) {\n        if ((fp = fopen(pid_file, \"r\")) != NULL) {\n            char buffer[1024];\n            if (fgets(buffer, sizeof(buffer), fp) != NULL) {\n                unsigned int pid;\n                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                               \"WARNING: The pid file contained the following (running) pid: %u\\n\", pid);\n                }\n            }\n            fclose(fp);\n        }\n    }\n\n    if ((fp = fopen(pid_file, \"w\")) == NULL) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"Could not open the pid file %s for writing: %s\\n\",\n                 pid_file, strerror(errno));\n        return;\n    }\n\n    fprintf(fp,\"%ld\\n\", (long)getpid());\n    if (fclose(fp) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not close the pid file %s: %s\\n\",\n                pid_file, strerror(errno));\n    }\n}\n\nstatic void remove_pidfile(const char *pid_file) {\n    if (pid_file != NULL) {\n        if (unlink(pid_file) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Could not remove the pid file %s: %s\\n\",\n                    pid_file, strerror(errno));\n        }\n    }\n}\n\n#ifndef HAVE_SIGIGNORE\nstatic int sigignore(int sig) {\n    struct sigaction sa = { .sa_handler = SIG_IGN, .sa_flags = 0 };\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1) {\n        return -1;\n    }\n    return 0;\n}\n#endif /* !HAVE_SIGIGNORE */\n\nstatic void sigterm_handler(int sig) {\n    assert(sig == SIGTERM || sig == SIGINT);\n    memcached_shutdown = 1;\n}\n\nstatic int install_sigterm_handler(void) {\n    struct sigaction sa = {.sa_handler = sigterm_handler, .sa_flags = 0};\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(SIGTERM, &sa, 0) == -1 ||\n        sigaction(SIGINT, &sa, 0) == -1) {\n        return -1;\n    }\n\n    return 0;\n}\n\n/*\n * On systems that supports multiple page sizes we may reduce the\n * number of TLB-misses by using the biggest available page size\n */\nstatic int enable_large_pages(void) {\n#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)\n    int ret = -1;\n    size_t sizes[32];\n    int avail = getpagesizes(sizes, 32);\n    if (avail != -1) {\n        size_t max = sizes[0];\n        struct memcntl_mha arg = {0};\n        int ii;\n\n        for (ii = 1; ii < avail; ++ii) {\n            if (max < sizes[ii]) {\n                max = sizes[ii];\n            }\n        }\n\n        arg.mha_flags   = 0;\n        arg.mha_pagesize = max;\n        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;\n\n        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                  \"Failed to set large pages: %s\\nWill use default page size\\n\",\n                  strerror(errno));\n        } else {\n            ret = 0;\n        }\n    } else {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n          \"Failed to get supported pagesizes: %s\\nWill use default page size\\n\",\n          strerror(errno));\n    }\n\n    return ret;\n#else\n    return 0;\n#endif\n}\n\nstatic const char* get_server_version(void) {\n    return VERSION;\n}\n\nstatic void store_engine_specific(const void *cookie,\n                                  void *engine_data) {\n    conn *c = (conn*)cookie;\n    c->engine_storage = engine_data;\n}\n\nstatic void *get_engine_specific(const void *cookie) {\n    conn *c = (conn*)cookie;\n    return c->engine_storage;\n}\n\nstatic int get_socket_fd(const void *cookie) {\n    conn *c = (conn *)cookie;\n    return c->sfd;\n}\n\nstatic ENGINE_ERROR_CODE reserve_cookie(const void *cookie) {\n    conn *c = (conn *)cookie;\n    ++c->refcount;\n    return ENGINE_SUCCESS;\n}\n\nstatic ENGINE_ERROR_CODE release_cookie(const void *cookie) {\n    conn *c = (conn *)cookie;\n    --c->refcount;\n    return ENGINE_SUCCESS;\n}\n\nstatic int num_independent_stats(void) {\n    return settings.num_threads + 1;\n}\n\nstatic void *new_independent_stats(void) {\n    int ii;\n    int nrecords = num_independent_stats();\n    struct independent_stats *independent_stats = calloc(sizeof(independent_stats) + sizeof(struct thread_stats) * nrecords, 1);\n    if (settings.topkeys > 0)\n        independent_stats->topkeys = topkeys_init(settings.topkeys);\n    for (ii = 0; ii < nrecords; ii++)\n        pthread_mutex_init(&independent_stats->thread_stats[ii].mutex, NULL);\n    return independent_stats;\n}\n\nstatic void release_independent_stats(void *stats) {\n    int ii;\n    int nrecords = num_independent_stats();\n    struct independent_stats *independent_stats = stats;\n    if (independent_stats->topkeys)\n        topkeys_free(independent_stats->topkeys);\n    for (ii = 0; ii < nrecords; ii++)\n        pthread_mutex_destroy(&independent_stats->thread_stats[ii].mutex);\n    free(independent_stats);\n}\n\nstatic inline struct independent_stats *get_independent_stats(conn *c) {\n    struct independent_stats *independent_stats;\n    if (settings.engine.v1->get_stats_struct != NULL) {\n        independent_stats = settings.engine.v1->get_stats_struct(settings.engine.v0, (const void *)c);\n        if (independent_stats == NULL)\n            independent_stats = default_independent_stats;\n    } else {\n        independent_stats = default_independent_stats;\n    }\n    return independent_stats;\n}\n\nstatic inline struct thread_stats *get_thread_stats(conn *c) {\n    struct independent_stats *independent_stats = get_independent_stats(c);\n    assert(c->thread->index < num_independent_stats());\n    return &independent_stats->thread_stats[c->thread->index];\n}\n\nstatic void register_callback(ENGINE_HANDLE *eh,\n                              ENGINE_EVENT_TYPE type,\n                              EVENT_CALLBACK cb, const void *cb_data) {\n    struct engine_event_handler *h =\n        calloc(sizeof(struct engine_event_handler), 1);\n\n    assert(h);\n    h->cb = cb;\n    h->cb_data = cb_data;\n    h->next = engine_event_handlers[type];\n    engine_event_handlers[type] = h;\n    (void)(eh); /* unused */\n}\n\nstatic rel_time_t get_current_time(void)\n{\n    return current_time;\n}\n\nstatic void count_eviction(const void *cookie, const void *key, const int nkey) {\n    topkeys_t *tk = get_independent_stats((conn*)cookie)->topkeys;\n    TK(tk, evictions, key, nkey, get_current_time());\n}\n\n/**\n * To make it easy for engine implementors that doesn't want to care about\n * writing their own incr/decr code, they can just set the arithmetic function\n * to NULL and use this implementation. It is not efficient, due to the fact\n * that it does multiple calls through the interface (get and then cas store).\n * If you don't care, feel free to use it..\n */\nstatic ENGINE_ERROR_CODE internal_arithmetic(ENGINE_HANDLE* handle,\n                                             const void* cookie,\n                                             const void* key,\n                                             const int nkey,\n                                             const bool increment,\n                                             const bool create,\n                                             const uint64_t delta,\n                                             const uint64_t initial,\n                                             const rel_time_t exptime,\n                                             uint64_t *cas,\n                                             uint64_t *result,\n                                             uint16_t vbucket)\n{\n    ENGINE_HANDLE_V1 *e = (ENGINE_HANDLE_V1*)handle;\n\n    item *it = NULL;\n\n    ENGINE_ERROR_CODE ret;\n    ret = e->get(handle, cookie, &it, key, nkey, vbucket);\n\n    if (ret == ENGINE_SUCCESS) {\n        item_info info = { .nvalue = 1 };\n\n        if (!e->get_item_info(handle, cookie, it, &info)) {\n            e->release(handle, cookie, it);\n            return ENGINE_FAILED;\n        }\n\n        char value[80];\n\n        if (info.value[0].iov_len > (sizeof(value) - 1)) {\n            e->release(handle, cookie, it);\n            return ENGINE_EINVAL;\n        }\n\n        memcpy(value, info.value[0].iov_base, info.value[0].iov_len);\n        value[info.value[0].iov_len] = '\\0';\n\n        uint64_t val;\n        if (!safe_strtoull(value, &val)) {\n            e->release(handle, cookie, it);\n            return ENGINE_EINVAL;\n        }\n\n        if (increment) {\n            val += delta;\n        } else {\n            if (delta > val) {\n                val = 0;\n            } else {\n                val -= delta;\n            }\n        }\n\n        size_t nb = snprintf(value, sizeof(value), \"%\"PRIu64, val);\n        *result = val;\n        item *nit = NULL;\n        if (e->allocate(handle, cookie, &nit, key,\n                        nkey, nb, info.flags, info.exptime) != ENGINE_SUCCESS) {\n            e->release(handle, cookie, it);\n            return ENGINE_ENOMEM;\n        }\n\n        item_info i2 = { .nvalue = 1 };\n        if (!e->get_item_info(handle, cookie, nit, &i2)) {\n            e->release(handle, cookie, it);\n            e->release(handle, cookie, nit);\n            return ENGINE_FAILED;\n        }\n\n        memcpy(i2.value[0].iov_base, value, nb);\n        e->item_set_cas(handle, cookie, nit, info.cas);\n        ret = e->store(handle, cookie, nit, cas, OPERATION_CAS, vbucket);\n        e->release(handle, cookie, it);\n        e->release(handle, cookie, nit);\n    } else if (ret == ENGINE_KEY_ENOENT && create) {\n        char value[80];\n        size_t nb = snprintf(value, sizeof(value), \"%\"PRIu64\"\\r\\n\", initial);\n        *result = initial;\n        if (e->allocate(handle, cookie, &it, key, nkey, nb, 0, exptime) != ENGINE_SUCCESS) {\n            e->release(handle, cookie, it);\n            return ENGINE_ENOMEM;\n        }\n\n        item_info info = { .nvalue = 1 };\n        if (!e->get_item_info(handle, cookie, it, &info)) {\n            e->release(handle, cookie, it);\n            return ENGINE_FAILED;\n        }\n\n        memcpy(info.value[0].iov_base, value, nb);\n        ret = e->store(handle, cookie, it, cas, OPERATION_CAS, vbucket);\n        e->release(handle, cookie, it);\n    }\n\n    /* We had a race condition.. just call ourself recursively to retry */\n    if (ret == ENGINE_KEY_EEXISTS) {\n        return internal_arithmetic(handle, cookie, key, nkey, increment, create, delta,\n                                   initial, exptime, cas, result, vbucket);\n    }\n\n    return ret;\n}\n\n/**\n * Register an extension if it's not already registered\n *\n * @param type the type of the extension to register\n * @param extension the extension to register\n * @return true if success, false otherwise\n */\nstatic bool register_extension(extension_type_t type, void *extension)\n{\n    if (extension == NULL) {\n        return false;\n    }\n\n    switch (type) {\n    case EXTENSION_DAEMON:\n        for (EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n             ptr != NULL;\n             ptr = ptr->next) {\n            if (ptr == extension) {\n                return false;\n            }\n        }\n        ((EXTENSION_DAEMON_DESCRIPTOR *)(extension))->next = settings.extensions.daemons;\n        settings.extensions.daemons = extension;\n        return true;\n    case EXTENSION_LOGGER:\n        settings.extensions.logger = extension;\n        return true;\n    case EXTENSION_ASCII_PROTOCOL:\n        if (settings.extensions.ascii != NULL) {\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *last;\n            for (last = settings.extensions.ascii; last->next != NULL;\n                 last = last->next) {\n                if (last == extension) {\n                    return false;\n                }\n            }\n            if (last == extension) {\n                return false;\n            }\n            last->next = extension;\n            last->next->next = NULL;\n        } else {\n            settings.extensions.ascii = extension;\n            settings.extensions.ascii->next = NULL;\n        }\n        return true;\n\n    case EXTENSION_BINARY_PROTOCOL:\n        if (settings.extensions.binary != NULL) {\n            EXTENSION_BINARY_PROTOCOL_DESCRIPTOR *last;\n            for (last = settings.extensions.binary; last->next != NULL;\n                 last = last->next) {\n                if (last == extension) {\n                    return false;\n                }\n            }\n            if (last == extension) {\n                return false;\n            }\n            last->next = extension;\n            last->next->next = NULL;\n        } else {\n            settings.extensions.binary = extension;\n            settings.extensions.binary->next = NULL;\n        }\n\n        ((EXTENSION_BINARY_PROTOCOL_DESCRIPTOR*)extension)->setup(setup_binary_lookup_cmd);\n        return true;\n\n    default:\n        return false;\n    }\n}\n\n/**\n * Unregister an extension\n *\n * @param type the type of the extension to remove\n * @param extension the extension to remove\n */\nstatic void unregister_extension(extension_type_t type, void *extension)\n{\n    switch (type) {\n    case EXTENSION_DAEMON:\n        {\n            EXTENSION_DAEMON_DESCRIPTOR *prev = NULL;\n            EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n\n            while (ptr != NULL && ptr != extension) {\n                prev = ptr;\n                ptr = ptr->next;\n            }\n\n            if (ptr != NULL && prev != NULL) {\n                prev->next = ptr->next;\n            }\n\n            if (settings.extensions.daemons == ptr) {\n                settings.extensions.daemons = ptr->next;\n            }\n        }\n        break;\n    case EXTENSION_LOGGER:\n        if (settings.extensions.logger == extension) {\n            if (get_stderr_logger() == extension) {\n                settings.extensions.logger = get_null_logger();\n            } else {\n                settings.extensions.logger = get_stderr_logger();\n            }\n        }\n        break;\n    case EXTENSION_ASCII_PROTOCOL:\n        {\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *prev = NULL;\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *ptr = settings.extensions.ascii;\n\n            while (ptr != NULL && ptr != extension) {\n                prev = ptr;\n                ptr = ptr->next;\n            }\n\n            if (ptr != NULL && prev != NULL) {\n                prev->next = ptr->next;\n            }\n\n            if (settings.extensions.ascii == ptr) {\n                settings.extensions.ascii = ptr->next;\n            }\n        }\n        break;\n\n\n    case EXTENSION_BINARY_PROTOCOL:\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"You can't unregister a binary command handler!\");\n        abort();\n        break;\n\n    default:\n        ;\n    }\n\n}\n\n/**\n * Get the named extension\n */\nstatic void* get_extension(extension_type_t type)\n{\n    switch (type) {\n    case EXTENSION_DAEMON:\n        return settings.extensions.daemons;\n\n    case EXTENSION_LOGGER:\n        return settings.extensions.logger;\n\n    case EXTENSION_ASCII_PROTOCOL:\n        return settings.extensions.ascii;\n\n    case EXTENSION_BINARY_PROTOCOL:\n        return settings.extensions.binary;\n\n    default:\n        return NULL;\n    }\n}\n\nstatic void shutdown_server(void) {\n    memcached_shutdown = 1;\n}\n\nstatic EXTENSION_LOGGER_DESCRIPTOR* get_logger(void)\n{\n    return settings.extensions.logger;\n}\n\nstatic EXTENSION_LOG_LEVEL get_log_level(void)\n{\n    EXTENSION_LOG_LEVEL ret;\n    switch (settings.verbose) {\n    case 0: ret = EXTENSION_LOG_WARNING; break;\n    case 1: ret = EXTENSION_LOG_INFO; break;\n    case 2: ret = EXTENSION_LOG_DEBUG; break;\n    default:\n        ret = EXTENSION_LOG_DETAIL;\n    }\n    return ret;\n}\n\nstatic void set_log_level(EXTENSION_LOG_LEVEL severity)\n{\n    switch (severity) {\n    case EXTENSION_LOG_WARNING: settings.verbose = 0; break;\n    case EXTENSION_LOG_INFO: settings.verbose = 1; break;\n    case EXTENSION_LOG_DEBUG: settings.verbose = 2; break;\n    default:\n        settings.verbose = 3;\n    }\n}\n\nstatic void get_config_append_stats(const char *key, const uint16_t klen,\n                                    const char *val, const uint32_t vlen,\n                                    const void *cookie)\n{\n    if (klen == 0  || vlen == 0) {\n        return ;\n    }\n\n    char *pos = (char*)cookie;\n    size_t nbytes = strlen(pos);\n\n    if ((nbytes + klen + vlen + 3) > 1024) {\n        // Not enough size in the buffer..\n        return;\n    }\n\n    memcpy(pos + nbytes, key, klen);\n    nbytes += klen;\n    pos[nbytes] = '=';\n    ++nbytes;\n    memcpy(pos + nbytes, val, vlen);\n    nbytes += vlen;\n    memcpy(pos + nbytes, \";\", 2);\n}\n\nstatic bool get_config(struct config_item items[]) {\n    char config[1024];\n    config[0] = '\\0';\n    process_stat_settings(get_config_append_stats, config);\n    int rval = parse_config(config, items, NULL);\n    return rval >= 0;\n}\n\n/**\n * Callback the engines may call to get the public server interface\n * @return pointer to a structure containing the interface. The client should\n *         know the layout and perform the proper casts.\n */\nstatic SERVER_HANDLE_V1 *get_server_api(void)\n{\n    static SERVER_CORE_API core_api = {\n        .server_version = get_server_version,\n        .hash = hash,\n        .realtime = realtime,\n        .abstime = abstime,\n        .get_current_time = get_current_time,\n        .parse_config = parse_config,\n        .shutdown = shutdown_server,\n        .get_config = get_config\n    };\n\n    static SERVER_COOKIE_API server_cookie_api = {\n        .get_auth_data = get_auth_data,\n        .store_engine_specific = store_engine_specific,\n        .get_engine_specific = get_engine_specific,\n        .get_socket_fd = get_socket_fd,\n        .notify_io_complete = notify_io_complete,\n        .reserve = reserve_cookie,\n        .release = release_cookie\n    };\n\n    static SERVER_STAT_API server_stat_api = {\n        .new_stats = new_independent_stats,\n        .release_stats = release_independent_stats,\n        .evicting = count_eviction\n    };\n\n    static SERVER_LOG_API server_log_api = {\n        .get_logger = get_logger,\n        .get_level = get_log_level,\n        .set_level = set_log_level\n    };\n\n    static SERVER_EXTENSION_API extension_api = {\n        .register_extension = register_extension,\n        .unregister_extension = unregister_extension,\n        .get_extension = get_extension\n    };\n\n    static SERVER_CALLBACK_API callback_api = {\n        .register_callback = register_callback,\n        .perform_callbacks = perform_callbacks,\n    };\n\n    static SERVER_HANDLE_V1 rv = {\n        .interface = 1,\n        .core = &core_api,\n        .stat = &server_stat_api,\n        .extension = &extension_api,\n        .callback = &callback_api,\n        .log = &server_log_api,\n        .cookie = &server_cookie_api\n    };\n\n    if (rv.engine == NULL) {\n        rv.engine = settings.engine.v0;\n    }\n\n    return &rv;\n}\n\n/**\n * Load a shared object and initialize all the extensions in there.\n *\n * @param soname the name of the shared object (may not be NULL)\n * @param config optional configuration parameters\n * @return true if success, false otherwise\n */\nstatic bool load_extension(const char *soname, const char *config) {\n    if (soname == NULL) {\n        return false;\n    }\n\n    /* Hack to remove the warning from C99 */\n    union my_hack {\n        MEMCACHED_EXTENSIONS_INITIALIZE initialize;\n        void* voidptr;\n    } funky = {.initialize = NULL };\n\n    void *handle = dlopen(soname, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to open library \\\"%s\\\": %s\\n\",\n                soname, msg ? msg : \"unknown error\");\n        return false;\n    }\n\n    void *symbol = dlsym(handle, \"memcached_extensions_initialize\");\n    if (symbol == NULL) {\n        const char *msg = dlerror();\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not find symbol \\\"memcached_extensions_initialize\\\" in %s: %s\\n\",\n                soname, msg ? msg : \"unknown error\");\n        return false;\n    }\n    funky.voidptr = symbol;\n\n    EXTENSION_ERROR_CODE error = (*funky.initialize)(config, get_server_api);\n\n    if (error != EXTENSION_SUCCESS) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to initalize extensions from %s. Error code: %d\\n\",\n                soname, error);\n        dlclose(handle);\n        return false;\n    }\n\n    if (settings.verbose > 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, NULL,\n                \"Loaded extensions from: %s\\n\", soname);\n    }\n\n    return true;\n}\n\n/**\n * Do basic sanity check of the runtime environment\n * @return true if no errors found, false if we can't use this env\n */\nstatic bool sanitycheck(void) {\n    /* One of our biggest problems is old and bogus libevents */\n    const char *ever = event_get_version();\n    if (ever != NULL) {\n        if (strncmp(ever, \"1.\", 2) == 0) {\n            /* Require at least 1.3 (that's still a couple of years old) */\n            if ((ever[2] == '1' || ever[2] == '2') && !isdigit(ever[3])) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"You are using libevent %s.\\nPlease upgrade to\"\n                        \" a more recent version (1.3 or newer)\\n\",\n                        event_get_version());\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nint main (int argc, char **argv) {\n    int c;\n    bool lock_memory = false;\n    bool do_daemonize = false;\n    int maxcore = 0;\n    char *username = NULL;\n    char *pid_file = NULL;\n    struct passwd *pw;\n    struct rlimit rlim;\n    char unit = '\\0';\n    int size_max = 0;\n\n    bool protocol_specified = false;\n    bool tcp_specified = false;\n    bool udp_specified = false;\n\n    const char *engine = \"default_engine.so\";\n    const char *engine_config = NULL;\n    char old_options[1024] = { [0] = '\\0' };\n    char *old_opts = old_options;\n\n    /* make the time we started always be 2 seconds before we really\n       did, so time(0) - time.started is never zero.  if so, things\n       like 'settings.oldest_live' which act as booleans as well as\n       values are now false in boolean context... */\n    process_started = time(0) - 2;\n    set_current_time();\n\n    /* Initialize the socket subsystem */\n    initialize_sockets();\n\n    /* init settings */\n    settings_init();\n\n    initialize_binary_lookup_map();\n\n    if (memcached_initialize_stderr_logger(get_server_api) != EXTENSION_SUCCESS) {\n        fprintf(stderr, \"Failed to initialize log system\\n\");\n        return EX_OSERR;\n    }\n\n    if (!sanitycheck()) {\n        return EX_OSERR;\n    }\n\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"a:\"  /* access mask for unix socket */\n          \"p:\"  /* TCP port number to listen on */\n          \"s:\"  /* unix socket path to listen on */\n          \"U:\"  /* UDP port number to listen on */\n          \"m:\"  /* max memory to use for items in megabytes */\n          \"M\"   /* return error on memory exhausted */\n          \"c:\"  /* max simultaneous connections */\n          \"k\"   /* lock down all paged memory */\n          \"hi\"  /* help, licence info */\n          \"r\"   /* maximize core file limit */\n          \"v\"   /* verbose */\n          \"d\"   /* daemon mode */\n          \"l:\"  /* interface to listen on */\n          \"u:\"  /* user identity to run as */\n          \"P:\"  /* save PID in file */\n          \"f:\"  /* factor? */\n          \"n:\"  /* minimum space allocated for key+value+flags */\n          \"t:\"  /* threads */\n          \"D:\"  /* prefix delimiter? */\n          \"L\"   /* Large memory pages */\n          \"R:\"  /* max requests per event */\n          \"C\"   /* Disable use of CAS */\n          \"b:\"  /* backlog queue limit */\n          \"B:\"  /* Binding protocol */\n          \"I:\"  /* Max item size */\n          \"S\"   /* Sasl ON */\n          \"E:\"  /* Engine to load */\n          \"e:\"  /* Engine options */\n          \"q\"   /* Disallow detailed stats */\n          \"X:\"  /* Load extension */\n        ))) {\n        switch (c) {\n        case 'a':\n            /* access for unix domain socket, as octal mask (like chmod)*/\n            settings.access= strtol(optarg,NULL,8);\n            break;\n\n        case 'U':\n            settings.udpport = atoi(optarg);\n            udp_specified = true;\n            break;\n        case 'p':\n            settings.port = atoi(optarg);\n            tcp_specified = true;\n            break;\n        case 's':\n            settings.socketpath = optarg;\n            break;\n        case 'm':\n            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;\n             old_opts += sprintf(old_opts, \"cache_size=%lu;\",\n                                 (unsigned long)settings.maxbytes);\n           break;\n        case 'M':\n            settings.evict_to_free = 0;\n            old_opts += sprintf(old_opts, \"eviction=false;\");\n            break;\n        case 'c':\n            settings.maxconns = atoi(optarg);\n            break;\n        case 'h':\n            usage();\n            exit(EXIT_SUCCESS);\n        case 'i':\n            usage_license();\n            exit(EXIT_SUCCESS);\n        case 'k':\n            lock_memory = true;\n            break;\n        case 'v':\n            settings.verbose++;\n            perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n            break;\n        case 'l':\n            if (settings.inter != NULL) {\n                size_t len = strlen(settings.inter) + strlen(optarg) + 2;\n                char *p = malloc(len);\n                if (p == NULL) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"Failed to allocate memory\\n\");\n                    return 1;\n                }\n                snprintf(p, len, \"%s,%s\", settings.inter, optarg);\n                free(settings.inter);\n                settings.inter = p;\n            } else {\n                settings.inter= strdup(optarg);\n            }\n            break;\n        case 'd':\n            do_daemonize = true;\n            break;\n        case 'r':\n            maxcore = 1;\n            break;\n        case 'R':\n            settings.reqs_per_event = atoi(optarg);\n            if (settings.reqs_per_event <= 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                      \"Number of requests per event must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 'u':\n            username = optarg;\n            break;\n        case 'P':\n            pid_file = optarg;\n            break;\n        case 'f':\n            settings.factor = atof(optarg);\n            if (settings.factor <= 1.0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Factor must be greater than 1\\n\");\n                return 1;\n            }\n             old_opts += sprintf(old_opts, \"factor=%f;\",\n                                 settings.factor);\n           break;\n        case 'n':\n            settings.chunk_size = atoi(optarg);\n            if (settings.chunk_size == 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Chunk size must be greater than 0\\n\");\n                return 1;\n            }\n            old_opts += sprintf(old_opts, \"chunk_size=%u;\",\n                                settings.chunk_size);\n            break;\n        case 't':\n            settings.num_threads = atoi(optarg);\n            if (settings.num_threads <= 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Number of threads must be greater than 0\\n\");\n                return 1;\n            }\n            /* There're other problems when you get above 64 threads.\n             * In the future we should portably detect # of cores for the\n             * default.\n             */\n            if (settings.num_threads > 64) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"WARNING: Setting a high number of worker\"\n                        \"threads is not recommended.\\n\"\n                        \" Set this value to the number of cores in\"\n                        \" your machine or less.\\n\");\n            }\n            break;\n        case 'D':\n            settings.prefix_delimiter = optarg[0];\n            settings.detail_enabled = 1;\n            break;\n        case 'L' :\n            if (enable_large_pages() == 0) {\n                old_opts += sprintf(old_opts, \"preallocate=true;\");\n            }\n            break;\n        case 'C' :\n            settings.use_cas = false;\n            break;\n        case 'b' :\n            settings.backlog = atoi(optarg);\n            break;\n        case 'B':\n            protocol_specified = true;\n            if (strcmp(optarg, \"auto\") == 0) {\n                settings.binding_protocol = negotiating_prot;\n            } else if (strcmp(optarg, \"binary\") == 0) {\n                settings.binding_protocol = binary_prot;\n            } else if (strcmp(optarg, \"ascii\") == 0) {\n                settings.binding_protocol = ascii_prot;\n            } else {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Invalid value for binding protocol: %s\\n\"\n                        \" -- should be one of auto, binary, or ascii\\n\", optarg);\n                exit(EX_USAGE);\n            }\n            break;\n        case 'I':\n            unit = optarg[strlen(optarg)-1];\n            if (unit == 'k' || unit == 'm' ||\n                unit == 'K' || unit == 'M') {\n                optarg[strlen(optarg)-1] = '\\0';\n                size_max = atoi(optarg);\n                if (unit == 'k' || unit == 'K')\n                    size_max *= 1024;\n                if (unit == 'm' || unit == 'M')\n                    size_max *= 1024 * 1024;\n                settings.item_size_max = size_max;\n            } else {\n                settings.item_size_max = atoi(optarg);\n            }\n            if (settings.item_size_max < 1024) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Item max size cannot be less than 1024 bytes.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024 * 128) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Cannot set item size limit higher than 128 mb.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"WARNING: Setting item max size above 1MB is not\"\n                    \" recommended!\\n\"\n                    \" Raising this limit increases the minimum memory requirements\\n\"\n                    \" and will decrease your memory efficiency.\\n\"\n                );\n            }\n#ifndef __WIN32__\n            old_opts += sprintf(old_opts, \"item_size_max=%zu;\",\n                                settings.item_size_max);\n#else\n            old_opts += sprintf(old_opts, \"item_size_max=%lu;\", (long unsigned)\n                                settings.item_size_max);\n#endif\n            break;\n        case 'E':\n            engine = optarg;\n            break;\n        case 'e':\n            engine_config = optarg;\n            break;\n        case 'q':\n            settings.allow_detailed = false;\n            break;\n        case 'S': /* set Sasl authentication to true. Default is false */\n#ifndef SASL_ENABLED\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"This server is not built with SASL support.\\n\");\n            exit(EX_USAGE);\n#else\n            settings.require_sasl = true;\n#endif\n            break;\n        case 'X' :\n            {\n                char *ptr = strchr(optarg, ',');\n                if (ptr != NULL) {\n                    *ptr = '\\0';\n                    ++ptr;\n                }\n                if (!load_extension(optarg, ptr)) {\n                    exit(EXIT_FAILURE);\n                }\n                if (ptr != NULL) {\n                    *(ptr - 1) = ',';\n                }\n            }\n            break;\n        default:\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n\n    /*\n     * Use one workerthread to serve each UDP port if the user specified\n     * multiple ports\n     */\n    if (settings.inter != NULL && strchr(settings.inter, ',')) {\n        settings.num_threads_per_udp = 1;\n    } else {\n        settings.num_threads_per_udp = settings.num_threads;\n    }\n\n    if (getenv(\"MEMCACHED_REQS_TAP_EVENT\") != NULL) {\n        settings.reqs_per_tap_event = atoi(getenv(\"MEMCACHED_REQS_TAP_EVENT\"));\n    }\n\n    if (settings.reqs_per_tap_event <= 0) {\n        settings.reqs_per_tap_event = DEFAULT_REQS_PER_TAP_EVENT;\n    }\n\n\n    if (install_sigterm_handler() != 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"Failed to install SIGTERM handler\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    char *topkeys_env = getenv(\"MEMCACHED_TOP_KEYS\");\n    if (topkeys_env != NULL) {\n        settings.topkeys = atoi(topkeys_env);\n        if (settings.topkeys < 0) {\n            settings.topkeys = 0;\n        }\n    }\n\n    if (settings.require_sasl) {\n        if (!protocol_specified) {\n            settings.binding_protocol = binary_prot;\n        } else {\n            if (settings.binding_protocol == negotiating_prot) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"ERROR: You cannot use auto-negotiating protocol while requiring SASL.\\n\");\n                exit(EX_USAGE);\n            }\n            if (settings.binding_protocol == ascii_prot) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"ERROR: You cannot use only ASCII protocol while requiring SASL.\\n\");\n                exit(EX_USAGE);\n            }\n        }\n    }\n\n    if (tcp_specified && !udp_specified) {\n        settings.udpport = settings.port;\n    } else if (udp_specified && !tcp_specified) {\n        settings.port = settings.udpport;\n    }\n\n    if (engine_config != NULL && strlen(old_options) > 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"ERROR: You can't mix -e with the old options\\n\");\n        return EX_USAGE;\n    } else if (engine_config == NULL && strlen(old_options) > 0) {\n        engine_config = old_options;\n    }\n\n    if (maxcore != 0) {\n        struct rlimit rlim_new;\n        /*\n         * First try raising to infinity; if that fails, try bringing\n         * the soft limit to the hard.\n         */\n        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {\n            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;\n            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {\n                /* failed. try raising just to the old max */\n                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;\n                (void)setrlimit(RLIMIT_CORE, &rlim_new);\n            }\n        }\n        /*\n         * getrlimit again to see what we ended up with. Only fail if\n         * the soft limit ends up 0, because then no core files will be\n         * created at all.\n         */\n\n        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to ensure corefile creation\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /*\n     * If needed, increase rlimits to allow as many connections\n     * as needed.\n     */\n\n    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"failed to getrlimit number of files\\n\");\n        exit(EX_OSERR);\n    } else {\n        unsigned int maxfiles = settings.maxconns + (3 * (settings.num_threads + 2));\n        int syslimit = rlim.rlim_cur;\n        if (rlim.rlim_cur < maxfiles) {\n            rlim.rlim_cur = maxfiles;\n        }\n        if (rlim.rlim_max < rlim.rlim_cur) {\n            rlim.rlim_max = rlim.rlim_cur;\n        }\n        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n            const char *fmt;\n            fmt = \"WARNING: maxconns cannot be set to (%d) connections due to \"\n                \"system\\nresouce restrictions. Increase the number of file \"\n                \"descriptors allowed\\nto the memcached user process or start \"\n                \"memcached as root (remember\\nto use the -u parameter).\\n\"\n                \"The maximum number of connections is set to %d.\\n\";\n            int req = settings.maxconns;\n            settings.maxconns = syslimit - (3 * (settings.num_threads + 2));\n            if (settings.maxconns < 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                         \"failed to set rlimit for open files. Try starting as\"\n                         \" root or requesting smaller maxconns value.\\n\");\n                exit(EX_OSERR);\n            }\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            fmt, req, settings.maxconns);\n        }\n    }\n\n    /* Sanity check for the connection structures */\n    int nfiles = 0;\n    if (settings.port != 0) {\n        nfiles += 2;\n    }\n    if (settings.udpport != 0) {\n        nfiles += settings.num_threads * 2;\n    }\n\n    if (settings.maxconns <= nfiles) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Configuratioin error. \\n\"\n                \"You specified %d connections, but the system will use at \"\n                \"least %d\\nconnection structures to start.\\n\",\n                settings.maxconns, nfiles);\n        exit(EX_USAGE);\n    }\n\n    /* lose root privileges if we have them */\n    if (getuid() == 0 || geteuid() == 0) {\n        if (username == 0 || *username == '\\0') {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"can't run as root without the -u switch\\n\");\n            exit(EX_USAGE);\n        }\n        if ((pw = getpwnam(username)) == 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"can't find the user %s to switch to\\n\", username);\n            exit(EX_NOUSER);\n        }\n        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to assume identity of user %s: %s\\n\", username,\n                    strerror(errno));\n            exit(EX_OSERR);\n        }\n    }\n\n#ifdef SASL_ENABLED\n    init_sasl();\n#endif /* SASL */\n\n    /* daemonize if requested */\n    /* if we want to ensure our ability to dump core, don't chdir to / */\n    if (do_daemonize) {\n        if (sigignore(SIGHUP) == -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Failed to ignore SIGHUP: \", strerror(errno));\n        }\n        if (daemonize(maxcore, settings.verbose) == -1) {\n             settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to daemon() in order to daemonize\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    /* lock paged memory if needed */\n    if (lock_memory) {\n#ifdef HAVE_MLOCKALL\n        int res = mlockall(MCL_CURRENT | MCL_FUTURE);\n        if (res != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"warning: -k invalid, mlockall() failed: %s\\n\",\n                    strerror(errno));\n        }\n#else\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\\n\");\n#endif\n    }\n\n    /* initialize main thread libevent instance */\n    main_base = event_init();\n\n    /* Load the storage engine */\n    ENGINE_HANDLE *engine_handle = NULL;\n    if (!load_engine(engine,get_server_api,settings.extensions.logger,&engine_handle)) {\n        /* Error already reported */\n        exit(EXIT_FAILURE);\n    }\n\n    if (!init_engine(engine_handle,engine_config,settings.extensions.logger)) {\n        return false;\n    }\n\n    if (settings.verbose > 0) {\n        log_engine_details(engine_handle,settings.extensions.logger);\n    }\n    settings.engine.v1 = (ENGINE_HANDLE_V1 *) engine_handle;\n\n    if (settings.engine.v1->arithmetic == NULL) {\n        settings.engine.v1->arithmetic = internal_arithmetic;\n    }\n\n    /* initialize other stuff */\n    stats_init();\n\n    if (!(conn_cache = cache_create(\"conn\", sizeof(conn), sizeof(void*),\n                                    conn_constructor, conn_destructor))) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to create connection cache\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    default_independent_stats = new_independent_stats();\n\n#ifndef __WIN32__\n    /*\n     * ignore SIGPIPE signals; we can use errno == EPIPE if we\n     * need that information\n     */\n    if (sigignore(SIGPIPE) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"failed to ignore SIGPIPE; sigaction\");\n        exit(EX_OSERR);\n    }\n#endif\n\n    /* start up worker threads if MT mode */\n    thread_init(settings.num_threads, main_base, dispatch_event_handler);\n\n    /* initialise clock event */\n    clock_handler(0, 0, 0);\n\n    /* create unix mode sockets after dropping privileges */\n    if (settings.socketpath != NULL) {\n        if (server_socket_unix(settings.socketpath,settings.access)) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"failed to listen on UNIX socket \\\"%s\\\": %s\",\n                                            settings.socketpath, strerror(errno));\n            exit(EX_OSERR);\n        }\n    }\n\n    /* create the listening socket, bind it, and init */\n    if (settings.socketpath == NULL) {\n        int udp_port;\n\n        const char *portnumber_filename = getenv(\"MEMCACHED_PORT_FILENAME\");\n        char temp_portnumber_filename[PATH_MAX];\n        FILE *portnumber_file = NULL;\n\n        if (portnumber_filename != NULL) {\n            snprintf(temp_portnumber_filename,\n                     sizeof(temp_portnumber_filename),\n                     \"%s.lck\", portnumber_filename);\n\n            portnumber_file = fopen(temp_portnumber_filename, \"a\");\n            if (portnumber_file == NULL) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Failed to open \\\"%s\\\": %s\\n\",\n                        temp_portnumber_filename, strerror(errno));\n            }\n        }\n\n        if (settings.port && server_sockets(settings.port, tcp_transport,\n                                            portnumber_file)) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"failed to listen on TCP port %d: %s\",\n                                            settings.port, strerror(errno));\n            exit(EX_OSERR);\n        }\n\n        /*\n         * initialization order: first create the listening sockets\n         * (may need root on low ports), then drop root if needed,\n         * then daemonise if needed, then init libevent (in some cases\n         * descriptors created by libevent wouldn't survive forking).\n         */\n        udp_port = settings.udpport ? settings.udpport : settings.port;\n\n        /* create the UDP listening socket and bind it */\n        if (settings.udpport && server_sockets(udp_port, udp_transport,\n                                               portnumber_file)) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"failed to listen on UDP port %d: %s\",\n                                            settings.port, strerror(errno));\n            exit(EX_OSERR);\n        }\n\n        if (portnumber_file) {\n            fclose(portnumber_file);\n            rename(temp_portnumber_filename, portnumber_filename);\n        }\n    }\n\n    if (pid_file != NULL) {\n        save_pid(pid_file);\n    }\n\n    /* Drop privileges no longer needed */\n    drop_privileges();\n\n    if (!memcached_shutdown) {\n        /* enter the event loop */\n        event_base_loop(main_base, 0);\n    }\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, NULL,\n                                        \"Initiating shutdown\\n\");\n    }\n    threads_shutdown();\n\n    settings.engine.v1->destroy(settings.engine.v0, false);\n\n    /* remove the PID file if we're a daemon */\n    if (do_daemonize)\n        remove_pidfile(pid_file);\n    /* Clean up strdup() call for bind() address */\n    if (settings.inter)\n      free(settings.inter);\n\n    return EXIT_SUCCESS;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/memcache/extra/memcached/utilities/engine_loader.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include \"config.h\"\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include \"utilities/engine_loader.h\"\n#include <memcached/types.h>\n\nstatic const char * const feature_descriptions[] = {\n    \"compare and swap\",\n    \"persistent storage\",\n    \"secondary engine\",\n    \"access control\",\n    \"multi tenancy\",\n    \"LRU\"\n};\n\nvoid *handle = NULL;\n\nbool load_engine(const char *soname,\n                 SERVER_HANDLE_V1 *(*get_server_api)(void),\n                 EXTENSION_LOGGER_DESCRIPTOR *logger,\n                 ENGINE_HANDLE **engine_handle)\n{\n    ENGINE_HANDLE *engine = NULL;\n    /* Hack to remove the warning from C99 */\n    union my_hack {\n        CREATE_INSTANCE create;\n        void* voidptr;\n    } my_create = {.create = NULL };\n\n    handle = dlopen(soname, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to open library \\\"%s\\\": %s\\n\",\n                soname ? soname : \"self\",\n                msg ? msg : \"unknown error\");\n        return false;\n    }\n\n    void *symbol = dlsym(handle, \"create_instance\");\n    if (symbol == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not find symbol \\\"create_instance\\\" in %s: %s\\n\",\n                soname ? soname : \"self\",\n                dlerror());\n        return false;\n    }\n    my_create.voidptr = symbol;\n\n    /* request a instance with protocol version 1 */\n    ENGINE_ERROR_CODE error = (*my_create.create)(1, get_server_api, &engine);\n\n    if (error != ENGINE_SUCCESS || engine == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to create instance. Error code: %d\\n\", error);\n        dlclose(handle);\n        return false;\n    }\n    *engine_handle = engine;\n    return true;\n}\n\nbool init_engine(ENGINE_HANDLE * engine,\n                 const char *config_str,\n                 EXTENSION_LOGGER_DESCRIPTOR *logger)\n{\n    ENGINE_HANDLE_V1 *engine_v1 = NULL;\n\n    if (handle == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to initialize engine, engine must fist be loaded.\");\n        return false;\n    }\n\n    if (engine->interface == 1) {\n        engine_v1 = (ENGINE_HANDLE_V1*)engine;\n\n        // validate that the required engine interface is implemented:\n        if (engine_v1->get_info == NULL || engine_v1->initialize == NULL ||\n            engine_v1->destroy == NULL || engine_v1->allocate == NULL ||\n            engine_v1->remove == NULL || engine_v1->release == NULL ||\n            engine_v1->get == NULL || engine_v1->store == NULL ||\n            engine_v1->flush == NULL ||\n            engine_v1->get_stats == NULL || engine_v1->reset_stats == NULL ||\n            engine_v1->item_set_cas == NULL ||\n            engine_v1->get_item_info == NULL)\n        {\n            logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Failed to initialize engine; it does not implement the engine interface.\");\n            return false;\n        }\n\n        ENGINE_ERROR_CODE error = engine_v1->initialize(engine,config_str);\n        if (error != ENGINE_SUCCESS) {\n            engine_v1->destroy(engine, false);\n            logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Failed to initialize instance. Error code: %d\\n\",\n                    error);\n            dlclose(handle);\n            return false;\n        }\n    } else {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"Unsupported interface level\\n\");\n        dlclose(handle);\n        return false;\n    }\n    return true;\n}\n\nvoid log_engine_details(ENGINE_HANDLE * engine,\n                        EXTENSION_LOGGER_DESCRIPTOR *logger)\n{\n    ENGINE_HANDLE_V1 *engine_v1 = (ENGINE_HANDLE_V1*)engine;\n    const engine_info *info;\n    info = engine_v1->get_info(engine);\n    if (info) {\n        char message[4096];\n        ssize_t nw = snprintf(message, sizeof(message), \"Loaded engine: %s\\n\",\n                                        info->description ?\n                                        info->description : \"Unknown\");\n        if (nw == -1) {\n            return;\n        }\n        ssize_t offset = nw;\n        bool comma = false;\n\n        if (info->num_features > 0) {\n            nw = snprintf(message + offset, sizeof(message) - offset,\n                          \"Supplying the following features: \");\n            if (nw == -1) {\n                return;\n            }\n            offset += nw;\n            for (int ii = 0; ii < info->num_features; ++ii) {\n                if (info->features[ii].description != NULL) {\n                    nw = snprintf(message + offset, sizeof(message) - offset,\n                                  \"%s%s\", comma ? \", \" : \"\",\n                                  info->features[ii].description);\n                } else {\n                    if (info->features[ii].feature <= LAST_REGISTERED_ENGINE_FEATURE) {\n                        nw = snprintf(message + offset, sizeof(message) - offset,\n                                      \"%s%s\", comma ? \", \" : \"\",\n                                      feature_descriptions[info->features[ii].feature]);\n                    } else {\n                        nw = snprintf(message + offset, sizeof(message) - offset,\n                                      \"%sUnknown feature: %d\", comma ? \", \" : \"\",\n                                      info->features[ii].feature);\n                    }\n                }\n                comma = true;\n                if (nw == -1) {\n                    return;\n                }\n                offset += nw;\n            }\n        }\n        logger->log(EXTENSION_LOG_INFO, NULL, \"%s\\n\", message);\n    } else {\n        logger->log(EXTENSION_LOG_INFO, NULL,\n                                        \"Loaded engine: Unknown\\n\");\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/memcache/extra/memcached/programs/engine_testapp.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include \"config.h\"\n#include <assert.h>\n#include <dlfcn.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <signal.h>\n#include <pthread.h>\n#include \"utilities/engine_loader.h\"\n#include <memcached/engine_testapp.h>\n#include <memcached/extension_loggers.h>\n#include <mock_server.h>\n\nstruct mock_engine {\n    ENGINE_HANDLE_V1 me;\n    ENGINE_HANDLE_V1 *the_engine;\n    TAP_ITERATOR iterator;\n};\n\n#ifndef WIN32\nstatic sig_atomic_t alarmed;\n\nstatic void alarm_handler(int sig) {\n    alarmed = 1;\n}\n#endif\n\nstatic inline struct mock_engine* get_handle(ENGINE_HANDLE* handle) {\n    return (struct mock_engine*)handle;\n}\n\nstatic tap_event_t mock_tap_iterator(ENGINE_HANDLE* handle,\n                                     const void *cookie, item **itm,\n                                     void **es, uint16_t *nes, uint8_t *ttl,\n                                     uint16_t *flags, uint32_t *seqno,\n                                     uint16_t *vbucket) {\n   struct mock_engine *me = get_handle(handle);\n   return me->iterator((ENGINE_HANDLE*)me->the_engine, cookie, itm, es, nes,\n                       ttl, flags, seqno, vbucket);\n}\n\nstatic const engine_info* mock_get_info(ENGINE_HANDLE* handle) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_info((ENGINE_HANDLE*)me->the_engine);\n}\n\nstatic ENGINE_ERROR_CODE mock_initialize(ENGINE_HANDLE* handle,\n                                         const char* config_str) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->initialize((ENGINE_HANDLE*)me->the_engine, config_str);\n}\n\nstatic void mock_destroy(ENGINE_HANDLE* handle, const bool force) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->destroy((ENGINE_HANDLE*)me->the_engine, force);\n}\n\nstatic ENGINE_ERROR_CODE mock_allocate(ENGINE_HANDLE* handle,\n                                       const void* cookie,\n                                       item **item,\n                                       const void* key,\n                                       const size_t nkey,\n                                       const size_t nbytes,\n                                       const int flags,\n                                       const rel_time_t exptime) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->allocate((ENGINE_HANDLE*)me->the_engine, c,\n                                           item, key, nkey,\n                                           nbytes, flags,\n                                           exptime)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_remove(ENGINE_HANDLE* handle,\n                                     const void* cookie,\n                                     const void* key,\n                                     const size_t nkey,\n                                     uint64_t cas,\n                                     uint16_t vbucket)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->remove((ENGINE_HANDLE*)me->the_engine, c, key,\n                                         nkey, cas, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_release(ENGINE_HANDLE* handle,\n                         const void *cookie,\n                         item* item) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->release((ENGINE_HANDLE*)me->the_engine, cookie, item);\n}\n\nstatic ENGINE_ERROR_CODE mock_get(ENGINE_HANDLE* handle,\n                                  const void* cookie,\n                                  item** item,\n                                  const void* key,\n                                  const int nkey,\n                                  uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->get((ENGINE_HANDLE*)me->the_engine, c, item,\n                                      key, nkey, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_get_stats(ENGINE_HANDLE* handle,\n                                        const void* cookie,\n                                        const char* stat_key,\n                                        int nkey,\n                                        ADD_STAT add_stat)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->get_stats((ENGINE_HANDLE*)me->the_engine, c, stat_key,\n                                            nkey, add_stat)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_store(ENGINE_HANDLE* handle,\n                                    const void *cookie,\n                                    item* item,\n                                    uint64_t *cas,\n                                    ENGINE_STORE_OPERATION operation,\n                                    uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->store((ENGINE_HANDLE*)me->the_engine, c, item, cas,\n                                        operation, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_arithmetic(ENGINE_HANDLE* handle,\n                                         const void* cookie,\n                                         const void* key,\n                                         const int nkey,\n                                         const bool increment,\n                                         const bool create,\n                                         const uint64_t delta,\n                                         const uint64_t initial,\n                                         const rel_time_t exptime,\n                                         uint64_t *cas,\n                                         uint64_t *result,\n                                         uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->arithmetic((ENGINE_HANDLE*)me->the_engine, c, key,\n                                             nkey, increment, create,\n                                             delta, initial, exptime,\n                                             cas, result, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_flush(ENGINE_HANDLE* handle,\n                                    const void* cookie, time_t when) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->flush((ENGINE_HANDLE*)me->the_engine, c, when)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_reset_stats(ENGINE_HANDLE* handle, const void *cookie) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->reset_stats((ENGINE_HANDLE*)me->the_engine, cookie);\n}\n\nstatic ENGINE_ERROR_CODE mock_unknown_command(ENGINE_HANDLE* handle,\n                                              const void* cookie,\n                                              protocol_binary_request_header *request,\n                                              ADD_RESPONSE response)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->unknown_command((ENGINE_HANDLE*)me->the_engine, c,\n                                                  request, response)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_item_set_cas(ENGINE_HANDLE *handle, const void *cookie,\n                              item* item, uint64_t val)\n{\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->item_set_cas((ENGINE_HANDLE*)me->the_engine, cookie, item, val);\n}\n\n\nstatic bool mock_get_item_info(ENGINE_HANDLE *handle, const void *cookie,\n                               const item* item, item_info *item_info)\n{\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_item_info((ENGINE_HANDLE*)me->the_engine,\n                                         cookie, item, item_info);\n}\n\nstatic void *mock_get_stats_struct(ENGINE_HANDLE* handle, const void* cookie)\n{\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_stats_struct((ENGINE_HANDLE*)me->the_engine, cookie);\n}\n\nstatic ENGINE_ERROR_CODE mock_aggregate_stats(ENGINE_HANDLE* handle,\n                                              const void* cookie,\n                                              void (*callback)(void*, void*),\n                                              void *vptr)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->aggregate_stats((ENGINE_HANDLE*)me->the_engine, c,\n                                                  callback, vptr)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_tap_notify(ENGINE_HANDLE* handle,\n                                        const void *cookie,\n                                        void *engine_specific,\n                                        uint16_t nengine,\n                                        uint8_t ttl,\n                                        uint16_t tap_flags,\n                                        tap_event_t tap_event,\n                                        uint32_t tap_seqno,\n                                        const void *key,\n                                        size_t nkey,\n                                        uint32_t flags,\n                                        uint32_t exptime,\n                                        uint64_t cas,\n                                        const void *data,\n                                        size_t ndata,\n                                         uint16_t vbucket) {\n\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->tap_notify((ENGINE_HANDLE*)me->the_engine, c,\n                                             engine_specific, nengine, ttl, tap_flags,\n                                             tap_event, tap_seqno, key, nkey, flags,\n                                             exptime, cas, data, ndata, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\n\nstatic TAP_ITERATOR mock_get_tap_iterator(ENGINE_HANDLE* handle, const void* cookie,\n                                           const void* client, size_t nclient,\n                                           uint32_t flags,\n                                           const void* userdata, size_t nuserdata) {\n    struct mock_engine *me = get_handle(handle);\n    me->iterator = me->the_engine->get_tap_iterator((ENGINE_HANDLE*)me->the_engine, cookie,\n                                                    client, nclient, flags, userdata, nuserdata);\n    return (me->iterator != NULL) ? mock_tap_iterator : NULL;\n}\n\nstatic size_t mock_errinfo(ENGINE_HANDLE *handle, const void* cookie,\n                           char *buffer, size_t buffsz) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->errinfo((ENGINE_HANDLE*)me->the_engine, cookie,\n                                   buffer, buffsz);\n}\n\n\nstruct mock_engine default_mock_engine = {\n    .me = {\n        .interface = {\n            .interface = 1\n        },\n        .get_info = mock_get_info,\n        .initialize = mock_initialize,\n        .destroy = mock_destroy,\n        .allocate = mock_allocate,\n        .remove = mock_remove,\n        .release = mock_release,\n        .get = mock_get,\n        .store = mock_store,\n        .arithmetic = mock_arithmetic,\n        .flush = mock_flush,\n        .get_stats = mock_get_stats,\n        .reset_stats = mock_reset_stats,\n        .get_stats_struct = mock_get_stats_struct,\n        .aggregate_stats = mock_aggregate_stats,\n        .unknown_command = mock_unknown_command,\n        .tap_notify = mock_tap_notify,\n        .get_tap_iterator = mock_get_tap_iterator,\n        .item_set_cas = mock_item_set_cas,\n        .get_item_info = mock_get_item_info,\n        .errinfo = mock_errinfo\n    }\n};\nstruct mock_engine mock_engine;\n\nEXTENSION_LOGGER_DESCRIPTOR *logger_descriptor = NULL;\nstatic ENGINE_HANDLE *handle = NULL;\nstatic ENGINE_HANDLE_V1 *handle_v1 = NULL;\n\nstatic void usage(void) {\n    printf(\"\\n\");\n    printf(\"engine_testapp -E <path_to_engine_lib> -T <path_to_testlib>\\n\");\n    printf(\"               [-e <engine_config>] [-h]\\n\");\n    printf(\"\\n\");\n    printf(\"-E <path_to_engine_lib>      Path to the engine library file. The\\n\");\n    printf(\"                             engine library file is a library file\\n\");\n    printf(\"                             (.so or .dll) that the contains the \\n\");\n    printf(\"                             implementation of the engine being\\n\");\n    printf(\"                             tested.\\n\");\n    printf(\"\\n\");\n    printf(\"-T <path_to_testlib>         Path to the test library file. The test\\n\");\n    printf(\"                             library file is a library file (.so or\\n\");\n    printf(\"                             .dll) that contains the set of tests\\n\");\n    printf(\"                             to be executed.\\n\");\n    printf(\"\\n\");\n    printf(\"-t <timeout>                 Maximum time to run a test.\\n\");\n    printf(\"-e <engine_config>           Engine configuration string passed to\\n\");\n    printf(\"                             the engine.\\n\");\n    printf(\"-q                           Only print errors.\");\n    printf(\"-.                           Print a . for each executed test.\");\n    printf(\"\\n\");\n    printf(\"-h                           Prints this usage text.\\n\");\n    printf(\"\\n\");\n}\n\nstatic int report_test(const char *name, enum test_result r, bool quiet) {\n    int rc = 0;\n    char *msg = NULL;\n    bool color_enabled = getenv(\"TESTAPP_ENABLE_COLOR\") != NULL;\n    int color = 0;\n    char color_str[8] = { 0 };\n    char *reset_color = \"\\033[m\";\n    switch(r) {\n    case SUCCESS:\n        msg=\"OK\";\n        color = 32;\n        break;\n    case SKIPPED:\n        msg=\"SKIPPED\";\n        color = 32;\n        break;\n    case FAIL:\n        color = 31;\n        msg=\"FAIL\";\n        rc = 1;\n        break;\n    case DIED:\n        color = 31;\n        msg = \"DIED\";\n        rc = 1;\n        break;\n    case TIMEOUT:\n        color = 31;\n        msg = \"TIMED OUT\";\n        rc = 1;\n        break;\n    case CORE:\n        color = 31;\n        msg = \"CORE DUMPED\";\n        rc = 1;\n        break;\n    case PENDING:\n        color = 33;\n        msg = \"PENDING\";\n        break;\n    }\n    assert(msg);\n    if (color_enabled) {\n        snprintf(color_str, sizeof(color_str), \"\\033[%dm\", color);\n    }\n    if (quiet) {\n        if (r != SUCCESS) {\n            printf(\"%s:  %s%s%s\\n\", name, color_str, msg,\n                   color_enabled ? reset_color : \"\");\n            fflush(stdout);\n        }\n    } else {\n        printf(\"%s%s%s\\n\", color_str, msg, color_enabled ? reset_color : \"\");\n    }\n    return rc;\n}\n\nstatic ENGINE_HANDLE_V1 *start_your_engines(const char *engine, const char* cfg, bool engine_init) {\n\n    init_mock_server(handle);\n    if (!load_engine(engine, &get_mock_server_api, logger_descriptor, &handle)) {\n        fprintf(stderr, \"Failed to load engine %s.\\n\", engine);\n        return NULL;\n    }\n\n    if (engine_init) {\n        if(!init_engine(handle, cfg, logger_descriptor)) {\n            fprintf(stderr, \"Failed to init engine %s with config %s.\\n\", engine, cfg);\n            return NULL;\n        }\n    }\n\n    mock_engine = default_mock_engine;\n    handle_v1 = mock_engine.the_engine = (ENGINE_HANDLE_V1*)handle;\n    handle = (ENGINE_HANDLE*)&mock_engine.me;\n    handle_v1 = &mock_engine.me;\n\n    // Reset all members that aren't set (to allow the users to write\n    // testcases to verify that they initialize them..\n    assert(mock_engine.me.interface.interface == mock_engine.the_engine->interface.interface);\n\n    if (mock_engine.the_engine->get_stats_struct == NULL) {\n        mock_engine.me.get_stats_struct = NULL;\n    }\n    if (mock_engine.the_engine->aggregate_stats == NULL) {\n        mock_engine.me.aggregate_stats = NULL;\n    }\n    if (mock_engine.the_engine->unknown_command == NULL) {\n        mock_engine.me.unknown_command = NULL;\n    }\n    if (mock_engine.the_engine->tap_notify == NULL) {\n        mock_engine.me.tap_notify = NULL;\n    }\n    if (mock_engine.the_engine->get_tap_iterator == NULL) {\n        mock_engine.me.get_tap_iterator = NULL;\n    }\n    if (mock_engine.the_engine->errinfo == NULL) {\n        mock_engine.me.errinfo = NULL;\n    }\n\n    return &mock_engine.me;\n}\n\nstatic void destroy_engine(bool force) {\n    if (handle_v1) {\n        handle_v1->destroy(handle, force);\n        handle_v1 = NULL;\n        handle = NULL;\n    }\n}\n\nstatic void reload_engine(ENGINE_HANDLE **h, ENGINE_HANDLE_V1 **h1,\n                          const char* engine, const char *cfg, bool init, bool force) {\n    destroy_engine(force);\n    handle_v1 = start_your_engines(engine, cfg, init);\n    handle = (ENGINE_HANDLE*)(handle_v1);\n    *h1 = handle_v1;\n    *h = handle;\n}\n\nstatic engine_test_t* current_testcase;\n\nstatic const engine_test_t* get_current_testcase(void)\n{\n    return current_testcase;\n}\n\n\nstatic enum test_result run_test(engine_test_t test, const char *engine, const char *default_cfg) {\n    enum test_result ret = PENDING;\n    if (test.tfun != NULL) {\n#if !defined(USE_GCOV) && !defined(WIN32)\n        pid_t pid = fork();\n        if (pid == 0) {\n#endif\n            current_testcase = &test;\n            if (test.prepare != NULL) {\n                if ((ret = test.prepare(&test)) == SUCCESS) {\n                    ret = PENDING;\n                }\n            }\n\n            if (ret == PENDING) {\n                /* Start the engines and go */\n                start_your_engines(engine, test.cfg ? test.cfg : default_cfg, true);\n                if (test.test_setup != NULL) {\n                    if (!test.test_setup(handle, handle_v1)) {\n                        fprintf(stderr, \"Failed to run setup for test %s\\n\", test.name);\n#if !defined(USE_GCOV) && !defined(WIN32)\n                        exit((int)ret);\n#else\n                        return FAIL;\n#endif\n                    }\n                }\n                ret = test.tfun(handle, handle_v1);\n                if (test.test_teardown != NULL) {\n                    if (!test.test_teardown(handle, handle_v1)) {\n                        fprintf(stderr, \"WARNING: Failed to run teardown for test %s\\n\", test.name);\n                    }\n                }\n                destroy_engine(false);\n\n                if (test.cleanup) {\n                    test.cleanup(&test, ret);\n                }\n            }\n#if !defined(USE_GCOV) && !defined(WIN32)\n            exit((int)ret);\n        } else if (pid == (pid_t)-1) {\n            ret = FAIL;\n        } else {\n            int rc;\n            while (alarmed == 0 && waitpid(pid, &rc, 0) == (pid_t)-1) {\n                if (errno != EINTR) {\n                    abort();\n                }\n            }\n\n            if (alarmed) {\n                kill(pid, 9);\n                ret = TIMEOUT;\n            } else if (WIFEXITED(rc)) {\n                ret = (enum test_result)WEXITSTATUS(rc);\n            } else if (WIFSIGNALED(rc) && WCOREDUMP(rc)) {\n                ret = CORE;\n            } else {\n                ret = DIED;\n            }\n        }\n#endif\n    }\n\n    return ret;\n}\n\nstatic void setup_alarm_handler() {\n#ifndef WIN32\n    struct sigaction sig_handler;\n\n    sig_handler.sa_handler = alarm_handler;\n    sig_handler.sa_flags = 0;\n\n    sigaction(SIGALRM, &sig_handler, NULL);\n#endif\n}\n\nstatic void set_test_timeout(int timeout) {\n#ifndef WIN32\n    alarm(timeout);\n#endif\n}\n\nstatic void clear_test_timeout() {\n#ifndef WIN32\n    alarm(0);\n    alarmed = 0;\n#endif\n}\n\nint main(int argc, char **argv) {\n    int c, exitcode = 0, num_cases = 0, timeout = 0;\n    bool quiet = false;\n    bool dot = false;\n    const char *engine = NULL;\n    const char *engine_args = NULL;\n    const char *test_suite = NULL;\n    const char *test_case = NULL;\n    engine_test_t *testcases = NULL;\n    logger_descriptor = get_null_logger();\n\n    /* Hack to remove the warning from C99 */\n    union {\n        GET_TESTS get_tests;\n        void* voidptr;\n    } my_get_test = {.get_tests = NULL };\n\n    /* Hack to remove the warning from C99 */\n    union {\n        SETUP_SUITE setup_suite;\n        void* voidptr;\n    } my_setup_suite = {.setup_suite = NULL };\n\n    /* Hack to remove the warning from C99 */\n    union {\n        TEARDOWN_SUITE teardown_suite;\n        void* voidptr;\n    } my_teardown_suite = {.teardown_suite = NULL };\n\n\n    /* Use unbuffered stdio */\n    setbuf(stdout, NULL);\n    setbuf(stderr, NULL);\n\n    setup_alarm_handler();\n\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"h\"  /* usage */\n          \"E:\" /* Engine to load */\n          \"e:\" /* Engine options */\n          \"T:\" /* Library with tests to load */\n          \"t:\" /* Timeout */\n          \"q\"  /* Be more quiet (only report failures) */\n          \".\"  /* dot mode. */\n          \"n:\"  /* test case to run */\n        ))) {\n        switch (c) {\n        case 'E':\n            engine = optarg;\n            break;\n        case 'e':\n            engine_args = optarg;\n            break;\n        case 'h':\n            usage();\n            return 0;\n        case 'T':\n            test_suite = optarg;\n            break;\n        case 't':\n            timeout = atoi(optarg);\n            break;\n        case 'n':\n            test_case = optarg;\n            break;\n        case 'q':\n            quiet = true;\n            break;\n        case '.':\n            dot = true;\n            break;\n        default:\n            fprintf(stderr, \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n\n    //validate args\n    if (engine == NULL) {\n        fprintf(stderr, \"You must provide a path to the storage engine library.\\n\");\n        return 1;\n    }\n\n    if (test_suite == NULL) {\n        fprintf(stderr, \"You must provide a path to the testsuite library.\\n\");\n        return 1;\n    }\n\n    //load test_suite\n    void* handle = dlopen(test_suite, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        fprintf(stderr, \"Failed to load testsuite %s: %s\\n\", test_suite, msg ? msg : \"unknown error\");\n        return 1;\n    }\n\n    //get the test cases\n    void *symbol = dlsym(handle, \"get_tests\");\n    if (symbol == NULL) {\n        const char *msg = dlerror();\n        fprintf(stderr, \"Could not find get_tests function in testsuite %s: %s\\n\", test_suite, msg ? msg : \"unknown error\");\n        return 1;\n    }\n    my_get_test.voidptr = symbol;\n    testcases = (*my_get_test.get_tests)();\n\n    //set up the suite if needed\n    struct test_harness harness = { .default_engine_cfg = engine_args,\n                                    .engine_path = engine,\n                                    .reload_engine = reload_engine,\n                                    .start_engine = start_your_engines,\n                                    .create_cookie = create_mock_cookie,\n                                    .destroy_cookie = destroy_mock_cookie,\n                                    .set_ewouldblock_handling = mock_set_ewouldblock_handling,\n                                    .lock_cookie = lock_mock_cookie,\n                                    .unlock_cookie = unlock_mock_cookie,\n                                    .waitfor_cookie = waitfor_mock_cookie,\n                                    .time_travel = mock_time_travel,\n                                    .get_current_testcase = get_current_testcase };\n    symbol = dlsym(handle, \"setup_suite\");\n    if (symbol != NULL) {\n        my_setup_suite.voidptr = symbol;\n        if (!(*my_setup_suite.setup_suite)(&harness)) {\n            fprintf(stderr, \"Failed to set up test suite %s \\n\", test_suite);\n            return 1;\n        }\n    }\n\n\n    for (num_cases = 0; testcases[num_cases].name; num_cases++) {\n        /* Just counting */\n    }\n\n    if (!quiet) {\n        printf(\"1..%d\\n\", num_cases);\n    }\n\n    int i;\n    bool need_newline = false;\n    for (i = 0; testcases[i].name; i++) {\n        if (test_case != NULL && strcmp(test_case, testcases[i].name) != 0)\n            continue;\n        if (!quiet) {\n            printf(\"Running %s... \", testcases[i].name);\n            fflush(stdout);\n        } else if(dot) {\n            printf(\".\");\n            need_newline = true;\n            /* Add a newline every few tests */\n            if ((i+1) % 70 == 0) {\n                printf(\"\\n\");\n                need_newline = false;\n            }\n        }\n        set_test_timeout(timeout);\n        exitcode += report_test(testcases[i].name,\n                                run_test(testcases[i], engine, engine_args),\n                                quiet);\n        clear_test_timeout();\n    }\n\n    if (need_newline) {\n        printf(\"\\n\");\n    }\n\n    //tear down the suite if needed\n    symbol = dlsym(handle, \"teardown_suite\");\n    if (symbol != NULL) {\n        my_teardown_suite.voidptr = symbol;\n        if (!(*my_teardown_suite.teardown_suite)()) {\n            fprintf(stderr, \"Failed to teardown up test suite %s \\n\", test_suite);\n        }\n    }\n\n    printf(\"# Passed %d of %d tests\\n\", num_cases - exitcode, num_cases);\n\n    return exitcode;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/memcache/extra/memcached/win32/dlfcn.h": "#ifndef DLFCN_H\n#define DLFCN_H\nvoid* dlopen(const char* path, int mode);\nvoid* dlsym(void* handle, const char* symbol);\nint dlclose(void* handle);\nconst char *dlerror(void);\n\n#define RTLD_LAZY 1\n#define RTLD_LOCAL 2\n\n#define RTLD_NOW 0x00002\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/memcache/extra/memcached/win32/dlfcn.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include <stdio.h>\n#include <windows.h>\n#include <dlfcn.h>\n#include <stdbool.h>\n\n/*\n * Keep track if the user tried to call dlopen(NULL, xx) to be able to give a sane\n * error message\n */\nstatic bool self = false;\n\nvoid* dlopen(const char* path, int mode) {\n    if (path == NULL) {\n        // We don't support opening ourself\n        self = true;\n        return NULL;\n    }\n\n    void* handle = LoadLibrary(path);\n    if (handle == NULL) {\n        char *buf = malloc(strlen(path) + 20);\n        sprintf(buf, \"%s.dll\", path);\n        handle = LoadLibrary(buf);\n        free(buf);\n    }\n\n    return handle;\n}\n\nvoid* dlsym(void* handle, const char* symbol) {\n    return GetProcAddress(handle, symbol);\n}\n\nint dlclose(void* handle) {\n    // dlclose returns zero on success.\n    // FreeLibrary returns nonzero on success.\n    return FreeLibrary(handle) != 0;\n}\n\nstatic char dlerror_buf[200];\n\nconst char *dlerror(void) {\n    if (self) {\n        return \"not supported\";\n    }\n\n    DWORD err = GetLastError();\n    LPVOID error_msg;\n    if (FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n                      FORMAT_MESSAGE_FROM_SYSTEM |\n                      FORMAT_MESSAGE_IGNORE_INSERTS,\n                      NULL, err, 0, (LPTSTR)&error_msg, 0, NULL) != 0) {\n        strncpy(dlerror_buf, error_msg, sizeof(dlerror_buf));\n        dlerror_buf[sizeof(dlerror_buf) - 1] = '\\0';\n        LocalFree(error_msg);\n    } else {\n        return \"Failed to get error message\";\n    }\n\n    return dlerror_buf;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/tokudb/hatoku_hton.cc": "/* -*- mode: C++; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n// vim: ft=cpp:expandtab:ts=8:sw=4:softtabstop=4:\n/* -*- mode: C; c-basic-offset: 4 -*- */\n#ident \"$Id$\"\n/*======\nThis file is part of TokuDB\n\n\nCopyright (c) 2006, 2015, Percona and/or its affiliates. All rights reserved.\n\n    TokuDBis is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License, version 2,\n    as published by the Free Software Foundation.\n\n    TokuDB is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with TokuDB.  If not, see <http://www.gnu.org/licenses/>.\n\n======= */\n\n#ident \\\n    \"Copyright (c) 2006, 2015, Percona and/or its affiliates. All rights reserved.\"\n\n#include \"hatoku_hton.h\"\n#include \"src/ydb.h\"\n\n#include <dlfcn.h>\n\n#include \"my_tree.h\"\n\n#define TOKU_METADB_NAME \"tokudb_meta\"\n\n#if defined(HAVE_PSI_MUTEX_INTERFACE)\nstatic pfs_key_t tokudb_map_mutex_key;\n\nstatic PSI_mutex_info all_tokudb_mutexes[] = {\n    {&tokudb_map_mutex_key, \"tokudb_map_mutex\", 0},\n    {&ha_tokudb_mutex_key, \"ha_tokudb_mutex\", 0},\n};\n\nstatic PSI_rwlock_info all_tokudb_rwlocks[] = {\n    {&num_DBs_lock_key, \"num_DBs_lock\", 0},\n};\n#endif /* HAVE_PSI_MUTEX_INTERFACE */\n\ntypedef struct savepoint_info {\n  DB_TXN *txn;\n  tokudb_trx_data *trx;\n  bool in_sub_stmt;\n} * SP_INFO, SP_INFO_T;\n\nstatic SERVICE_TYPE(registry) *reg_srv = nullptr;\nSERVICE_TYPE(log_builtins) *log_bi = nullptr;\nSERVICE_TYPE(log_builtins_string) *log_bs = nullptr;\n\nstatic handler *tokudb_create_handler(handlerton *hton, TABLE_SHARE *table,\n                                      bool partitioned, MEM_ROOT *mem_root);\n/** Return partitioning flags. */\nstatic uint tokudb_partition_flags();\n\nstatic void tokudb_print_error(const DB_ENV *db_env, const char *db_errpfx,\n                               const char *buffer);\nstatic void tokudb_cleanup_log_files(void);\nstatic int tokudb_end(handlerton *hton, ha_panic_function type);\nstatic bool tokudb_flush_logs(handlerton *hton, bool binlog_group_commit);\nstatic bool tokudb_show_status(handlerton *hton, THD *thd, stat_print_fn *print,\n                               enum ha_stat_type);\nstatic int tokudb_close_connection(handlerton *hton, THD *thd);\nstatic void tokudb_kill_connection(handlerton *hton, THD *thd);\nstatic int tokudb_commit(handlerton *hton, THD *thd, bool all);\nstatic int tokudb_rollback(handlerton *hton, THD *thd, bool all);\nstatic int tokudb_xa_prepare(handlerton *hton, THD *thd, bool all);\nstatic int tokudb_xa_recover(handlerton *hton, XA_recover_txn *txn_list,\n                             uint len, MEM_ROOT *mem_root);\n\nstatic xa_status_code tokudb_commit_by_xid(handlerton *hton, XID *xid);\nstatic xa_status_code tokudb_rollback_by_xid(handlerton *hton, XID *xid);\nstatic int tokudb_rollback_to_savepoint(handlerton *hton, THD *thd,\n                                        void *savepoint);\nstatic int tokudb_savepoint(handlerton *hton, THD *thd, void *savepoint);\nstatic int tokudb_release_savepoint(handlerton *hton, THD *thd,\n                                    void *savepoint);\n#if defined(TOKU_INCLUDE_DISCOVER_FRM) && TOKU_INCLUDE_DISCOVER_FRM\nstatic int tokudb_discover(handlerton *hton, THD *thd, const char *db,\n                           const char *name, uchar **frmblob, size_t *frmlen);\nstatic int tokudb_discover2(handlerton *hton, THD *thd, const char *db,\n                            const char *name, bool translate_name,\n                            uchar **frmblob, size_t *frmlen);\nstatic int tokudb_discover3(handlerton *hton, THD *thd, const char *db,\n                            const char *name, char *path, uchar **frmblob,\n                            size_t *frmlen);\n#endif  // defined(TOKU_INCLUDE_DISCOVER_FRM) && TOKU_INCLUDE_DISCOVER_FRM\nhandlerton *tokudb_hton;\n\nconst char *ha_tokudb_ext = \".tokudb\";\nDB_ENV *db_env;\n\n#if defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\nstatic tokudb::thread::mutex_t tokudb_map_mutex;\nstatic TREE tokudb_map;\nstruct tokudb_map_pair {\n  THD *thd;\n  char *last_lock_timeout;\n};\nstatic int tokudb_map_pair_cmp(TOKUDB_UNUSED(const void *custom_arg),\n                               const void *a, const void *b) {\n  const struct tokudb_map_pair *a_key = (const struct tokudb_map_pair *)a;\n  const struct tokudb_map_pair *b_key = (const struct tokudb_map_pair *)b;\n  if (a_key->thd < b_key->thd)\n    return -1;\n  else if (a_key->thd > b_key->thd)\n    return +1;\n  else\n    return 0;\n};\n#endif  // defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n\nstatic PARTITIONED_COUNTER tokudb_primary_key_bytes_inserted;\nvoid toku_hton_update_primary_key_bytes_inserted(uint64_t row_size) {\n  increment_partitioned_counter(tokudb_primary_key_bytes_inserted, row_size);\n}\n\nstatic void tokudb_lock_timeout_callback(DB *db, uint64_t requesting_txnid,\n                                         const DBT *left_key,\n                                         const DBT *right_key,\n                                         uint64_t blocking_txnid);\n\n#define ASSERT_MSGLEN 1024\n\nvoid toku_hton_assert_fail(const char *expr_as_string, const char *fun,\n                           const char *file, int line, int caller_errno) {\n  char msg[ASSERT_MSGLEN];\n  if (db_env) {\n    snprintf(msg, ASSERT_MSGLEN, \"Handlerton: %s \", expr_as_string);\n    db_env->crash(db_env, msg, fun, file, line, caller_errno);\n  } else {\n    snprintf(msg, ASSERT_MSGLEN,\n             \"Handlerton assertion failed, no env, %s, %d, %s, %s (errno=%d)\\n\",\n             file, line, fun, expr_as_string, caller_errno);\n    perror(msg);\n    fflush(stderr);\n  }\n  abort();\n}\n\n// bool tokudb_shared_data = false;\nstatic uint32_t tokudb_init_flags = DB_CREATE | DB_THREAD | DB_PRIVATE |\n                                    DB_INIT_LOCK | DB_INIT_MPOOL | DB_INIT_TXN |\n                                    DB_INIT_LOG | DB_RECOVER;\nstatic uint32_t tokudb_env_flags = 0;\n// static uint32_t tokudb_lock_type = DB_LOCK_DEFAULT;\n// static ulong tokudb_log_buffer_size = 0;\n// static ulong tokudb_log_file_size = 0;\nstatic char *tokudb_home;\n// static long tokudb_lock_scan_time = 0;\n// static ulong tokudb_region_size = 0;\n// static ulong tokudb_cache_parts = 1;\nconst char *tokudb_hton_name = \"TokuDB\";\n\n// All TokuDB and PerconaFT exts that might appear in a database dir\nstatic const char *ha_tokudb_exts[]{\".tokudb\", nullptr};\n\n#if defined(_WIN32)\nextern \"C\" {\n#include \"ydb.h\"\n}\n#endif\n\n// A flag set if the handlerton is in an initialized, usable state,\n// plus a reader-write lock to protect it without serializing reads.\n// Since we don't have static initializers for the opaque rwlock type,\n// use constructor and destructor functions to create and destroy\n// the lock before and after main(), respectively.\nint tokudb_hton_initialized;\n\n// tokudb_hton_initialized_lock can not be instrumented as it must be\n// initialized before mysql_mutex_register() call to protect\n// some globals from race condition.\ntokudb::thread::rwlock_t tokudb_hton_initialized_lock;\n\nstatic SHOW_VAR *toku_global_status_variables = NULL;\nstatic uint64_t toku_global_status_max_rows;\nstatic TOKU_ENGINE_STATUS_ROW_S *toku_global_status_rows = NULL;\n\nstatic void handle_ydb_error(int error) {\n  switch (error) {\n    case TOKUDB_HUGE_PAGES_ENABLED:\n      LogPluginErrMsg(ERROR_LEVEL, 0,\n                      \"Can not run with transparent huge pages enabled. \"\n                      \"Please disable them to continue. (echo never > \"\n                      \"/sys/kernel/mm/transparent_hugepage/enabled)\");\n      break;\n    case TOKUDB_UPGRADE_FAILURE:\n      LogPluginErrMsg(\n          ERROR_LEVEL, 0,\n          \"Upgrade failed. A clean shutdown of the previous version is \"\n          \"required.\");\n      break;\n    default:\n      LogPluginErrMsg(ERROR_LEVEL, 0, \"Unknown error %d\", error);\n      break;\n  }\n}\n\nstatic int tokudb_set_product_name(void) {\n  size_t n = strlen(tokudb_hton_name);\n  char tokudb_product_name[n + 1];\n  memset(tokudb_product_name, 0, sizeof tokudb_product_name);\n  for (size_t i = 0; i < n; i++)\n    tokudb_product_name[i] = tolower(tokudb_hton_name[i]);\n  int r = db_env_set_toku_product_name(tokudb_product_name);\n  return r;\n}\n\nextern \"C\" {\nextern uint force_recovery;\n}\n\nstatic int tokudb_init_func(void *p) {\n  TOKUDB_DBUG_ENTER(\"%p\", p);\n  int r;\n\n  int mode = force_recovery\n                 ? S_IRUSR | S_IRGRP | S_IROTH\n                 : S_IRUSR | S_IWUSR | S_IRGRP | S_IWGRP | S_IROTH | S_IWOTH;\n\n  if (force_recovery != 0 && (!read_only || !super_read_only)) {\n    LogPluginErrMsg(ERROR_LEVEL, 0,\n                    \"Not initialized because tokudb_force_only requires \"\n                    \"read_only and super_read_only\");\n    goto error;\n  }\n\n  // 3938: lock the handlerton's initialized status flag for writing\n  rwlock_t_lock_write(tokudb_hton_initialized_lock);\n\n  // Initialize error logging service.\n  if (init_logging_service_for_plugin(&reg_srv, &log_bi, &log_bs)) {\n    tokudb_hton_initialized_lock.unlock();\n    DBUG_RETURN(true);\n  }\n\n#if defined(HAVE_PSI_INTERFACE)\n  /* Register TokuDB mutex keys with MySQL performance schema */\n  int count;\n\n  count = array_elements(all_tokudb_mutexes);\n  mysql_mutex_register(\"tokudb\", all_tokudb_mutexes, count);\n\n  count = array_elements(all_tokudb_rwlocks);\n  mysql_rwlock_register(\"tokudb\", all_tokudb_rwlocks, count);\n\n  tokudb_map_mutex.reinit(tokudb_map_mutex_key);\n#endif /* HAVE_PSI_INTERFACE */\n\n  db_env = NULL;\n  tokudb_hton = (handlerton *)p;\n\n  if (tokudb::sysvars::check_jemalloc) {\n    typedef int (*mallctl_type)(const char *, void *, size_t *, void *, size_t);\n    mallctl_type mallctl_func;\n    mallctl_func = (mallctl_type)dlsym(RTLD_DEFAULT, \"mallctl\");\n    if (!mallctl_func) {\n      LogPluginErrMsg(ERROR_LEVEL, 0,\n                      \"Not initialized because jemalloc is not loaded\");\n      goto error;\n    }\n    char *ver;\n    size_t len = sizeof(ver);\n    mallctl_func(\"version\", &ver, &len, NULL, 0);\n    /* jemalloc 2.2.5 crashes mysql-test */\n    if (strcmp(ver, \"2.3.\") < 0) {\n      LogPluginErrMsg(ERROR_LEVEL, 0,\n                      \"Not initialized because jemalloc is older than 2.3.0\");\n      goto error;\n    }\n  }\n\n  r = tokudb_set_product_name();\n  if (r) {\n    LogPluginErrMsg(ERROR_LEVEL, 0, \"Can not set product name error %d\", r);\n    goto error;\n  }\n\n  TOKUDB_SHARE::static_init();\n  tokudb::background::initialize();\n\n  tokudb_hton->state = SHOW_OPTION_YES;\n  // tokudb_hton->flags= HTON_CAN_RECREATE;  // QQQ this came from skeleton\n  tokudb_hton->flags = HTON_CLOSE_CURSORS_AT_COMMIT;\n\n#if defined(TOKU_INCLUDE_EXTENDED_KEYS) && TOKU_INCLUDE_EXTENDED_KEYS\n#if defined(HTON_SUPPORTS_EXTENDED_KEYS)\n  tokudb_hton->flags |= HTON_SUPPORTS_EXTENDED_KEYS;\n#endif\n#if defined(HTON_EXTENDED_KEYS)\n  tokudb_hton->flags |= HTON_EXTENDED_KEYS;\n#endif\n#endif\n#if defined(HTON_SUPPORTS_CLUSTERED_KEYS)\n  tokudb_hton->flags |= HTON_SUPPORTS_CLUSTERED_KEYS;\n#endif\n\n#if defined(TOKU_USE_DB_TYPE_TOKUDB) && TOKU_USE_DB_TYPE_TOKUDB\n  tokudb_hton->db_type = DB_TYPE_TOKUDB;\n#elif defined(TOKU_USE_DB_TYPE_UNKNOWN) && TOKU_USE_DB_TYPE_UNKNOWN\n  tokudb_hton->db_type = DB_TYPE_UNKNOWN;\n#else\n#error\n#endif\n\n  tokudb_hton->create = tokudb_create_handler;\n  tokudb_hton->partition_flags = tokudb_partition_flags;\n  tokudb_hton->close_connection = tokudb_close_connection;\n  tokudb_hton->kill_connection = tokudb_kill_connection;\n\n  tokudb_hton->savepoint_offset = sizeof(SP_INFO_T);\n  tokudb_hton->savepoint_set = tokudb_savepoint;\n  tokudb_hton->savepoint_rollback = tokudb_rollback_to_savepoint;\n  tokudb_hton->savepoint_release = tokudb_release_savepoint;\n\n#if defined(TOKU_INCLUDE_DISCOVER_FRM) && TOKU_INCLUDE_DISCOVER_FRM\n  tokudb_hton->discover = tokudb_discover;\n#if defined(MYSQL_HANDLERTON_INCLUDE_DISCOVER2)\n  tokudb_hton->discover2 = tokudb_discover2;\n#endif  // MYSQL_HANDLERTON_INCLUDE_DISCOVER2\n#endif  // defined(TOKU_INCLUDE_DISCOVER_FRM) && TOKU_INCLUDE_DISCOVER_FRM\n  tokudb_hton->commit = tokudb_commit;\n  tokudb_hton->rollback = tokudb_rollback;\n  tokudb_hton->prepare = tokudb_xa_prepare;\n  tokudb_hton->recover = tokudb_xa_recover;\n  tokudb_hton->commit_by_xid = tokudb_commit_by_xid;\n  tokudb_hton->rollback_by_xid = tokudb_rollback_by_xid;\n\n  tokudb_hton->panic = tokudb_end;\n  tokudb_hton->flush_logs = tokudb_flush_logs;\n  tokudb_hton->show_status = tokudb_show_status;\n  tokudb_hton->file_extensions = ha_tokudb_exts;\n\n  if (!tokudb_home) tokudb_home = mysql_real_data_home;\n  DBUG_PRINT(\"info\", (\"tokudb_home: %s\", tokudb_home));\n\n  if ((r = db_env_create(&db_env, 0))) {\n    DBUG_PRINT(\"info\", (\"db_env_create %d\\n\", r));\n    handle_ydb_error(r);\n    goto error;\n  }\n\n  DBUG_PRINT(\"info\", (\"tokudb_env_flags: 0x%x\\n\", tokudb_env_flags));\n  r = db_env->set_flags(db_env, tokudb_env_flags, 1);\n  if (r) {  // QQQ\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_INIT, \"WARNING: flags=%x r=%d\",\n                           tokudb_env_flags, r);\n    // goto error;\n  }\n\n  // config error handling\n  db_env->set_errcall(db_env, tokudb_print_error);\n  db_env->set_errpfx(db_env, tokudb_hton_name);\n\n  //\n  // set default comparison functions\n  //\n  r = db_env->set_default_bt_compare(db_env, tokudb_cmp_dbt_key);\n  if (r) {\n    DBUG_PRINT(\"info\", (\"set_default_bt_compare%d\\n\", r));\n    goto error;\n  }\n\n  {\n    char *tmp_dir = tokudb::sysvars::tmp_dir;\n    char *data_dir = tokudb::sysvars::data_dir;\n    if (data_dir == 0) {\n      data_dir = mysql_data_home;\n    }\n    if (tmp_dir == 0) {\n      tmp_dir = data_dir;\n    }\n    DBUG_PRINT(\"info\", (\"tokudb_data_dir: %s\\n\", data_dir));\n    db_env->set_data_dir(db_env, data_dir);\n    DBUG_PRINT(\"info\", (\"tokudb_tmp_dir: %s\\n\", tmp_dir));\n    db_env->set_tmp_dir(db_env, tmp_dir);\n  }\n\n  if (tokudb::sysvars::log_dir) {\n    DBUG_PRINT(\"info\", (\"tokudb_log_dir: %s\\n\", tokudb::sysvars::log_dir));\n    db_env->set_lg_dir(db_env, tokudb::sysvars::log_dir);\n  }\n\n  // config the cache table size to min(1/2 of physical memory, 1/8 of the\n  // process address space)\n  if (tokudb::sysvars::cache_size == 0) {\n    uint64_t physmem, maxdata;\n    physmem = toku_os_get_phys_memory_size();\n    tokudb::sysvars::cache_size = physmem / 2;\n    r = toku_os_get_max_process_data_size(&maxdata);\n    if (r == 0) {\n      if (tokudb::sysvars::cache_size > maxdata / 8)\n        tokudb::sysvars::cache_size = maxdata / 8;\n    }\n  }\n  if (tokudb::sysvars::cache_size) {\n    DBUG_PRINT(\"info\",\n               (\"tokudb_cache_size: %lld\\n\", tokudb::sysvars::cache_size));\n    r = db_env->set_cachesize(\n        db_env, (uint32_t)(tokudb::sysvars::cache_size >> 30),\n        (uint32_t)(tokudb::sysvars::cache_size % (1024L * 1024L * 1024L)), 1);\n    if (r) {\n      DBUG_PRINT(\"info\", (\"set_cachesize %d\\n\", r));\n      goto error;\n    }\n  }\n  if (tokudb::sysvars::max_lock_memory == 0) {\n    tokudb::sysvars::max_lock_memory = tokudb::sysvars::cache_size / 8;\n  } else if (tokudb::sysvars::max_lock_memory < HA_TOKUDB_MIN_LOCK_MEMORY) {\n    LogPluginErrMsg(WARNING_LEVEL, 0,\n                    \"tokudb_max_lock_memory must be greater than %u.  The \"\n                    \"current set value of %llu is too small and is being set \"\n                    \"to %u.\",\n                    HA_TOKUDB_MIN_LOCK_MEMORY, tokudb::sysvars::max_lock_memory,\n                    HA_TOKUDB_MIN_LOCK_MEMORY);\n    tokudb::sysvars::max_lock_memory = HA_TOKUDB_MIN_LOCK_MEMORY;\n  }\n  if (tokudb::sysvars::max_lock_memory) {\n    DBUG_PRINT(\"info\", (\"tokudb_max_lock_memory: %lld\\n\",\n                        tokudb::sysvars::max_lock_memory));\n    r = db_env->set_lk_max_memory(db_env, tokudb::sysvars::max_lock_memory);\n    if (r) {\n      DBUG_PRINT(\"info\", (\"set_lk_max_memory %d\\n\", r));\n      goto error;\n    }\n  }\n\n  uint32_t gbytes, bytes;\n  int parts;\n  r = db_env->get_cachesize(db_env, &gbytes, &bytes, &parts);\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_INIT, \"tokudb_cache_size=%lld r=%d\",\n                         ((unsigned long long)gbytes << 30) + bytes, r);\n\n  r = db_env->set_client_pool_threads(db_env,\n                                      tokudb::sysvars::client_pool_threads);\n  if (r) {\n    DBUG_PRINT(\"info\", (\"set_client_pool_threads %d\\n\", r));\n    goto error;\n  }\n\n  r = db_env->set_cachetable_pool_threads(\n      db_env, tokudb::sysvars::cachetable_pool_threads);\n  if (r) {\n    DBUG_PRINT(\"info\", (\"set_cachetable_pool_threads %d\\n\", r));\n    goto error;\n  }\n\n  r = db_env->set_checkpoint_pool_threads(\n      db_env, tokudb::sysvars::checkpoint_pool_threads);\n  if (r) {\n    DBUG_PRINT(\"info\", (\"set_checkpoint_pool_threads %d\\n\", r));\n    goto error;\n  }\n\n  if (db_env->set_redzone) {\n    r = db_env->set_redzone(db_env, tokudb::sysvars::fs_reserve_percent);\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_INIT, \"set_redzone r=%d\", r);\n  }\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_INIT, \"env open:flags=%x\",\n                         tokudb_init_flags);\n\n  r = db_env->set_generate_row_callback_for_put(db_env, generate_row_for_put);\n  assert_always(r == 0);\n\n  r = db_env->set_generate_row_callback_for_del(db_env, generate_row_for_del);\n  assert_always(r == 0);\n\n  db_env->set_update(db_env, tokudb_update_fun);\n\n  db_env_set_direct_io(tokudb::sysvars::directio);\n\n  db_env_set_compress_buffers_before_eviction(\n      tokudb::sysvars::compress_buffers_before_eviction);\n\n  db_env->change_fsync_log_period(db_env, tokudb::sysvars::fsync_log_period);\n\n  db_env->set_lock_timeout_callback(db_env, tokudb_lock_timeout_callback);\n  db_env->set_dir_per_db(db_env, tokudb::sysvars::dir_per_db);\n\n  db_env->set_loader_memory_size(db_env,\n                                 tokudb_get_loader_memory_size_callback);\n\n  db_env->set_check_thp(db_env, tokudb::sysvars::check_jemalloc);\n\n  r = db_env->open(db_env, tokudb_home, tokudb_init_flags, mode);\n\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_INIT, \"env opened:return=%d\", r);\n\n  if (r) {\n    DBUG_PRINT(\"info\", (\"env->open %d\", r));\n    handle_ydb_error(r);\n    goto error;\n  }\n\n  r = db_env->checkpointing_set_period(db_env,\n                                       tokudb::sysvars::checkpointing_period);\n  assert_always(r == 0);\n\n  r = db_env->cleaner_set_period(db_env, tokudb::sysvars::cleaner_period);\n  assert_always(r == 0);\n\n  r = db_env->cleaner_set_iterations(db_env,\n                                     tokudb::sysvars::cleaner_iterations);\n  assert_always(r == 0);\n\n  r = db_env->set_lock_timeout(db_env, DEFAULT_TOKUDB_LOCK_TIMEOUT,\n                               tokudb_get_lock_wait_time_callback);\n  assert_always(r == 0);\n\n  r = db_env->evictor_set_enable_partial_eviction(\n      db_env, tokudb::sysvars::enable_partial_eviction);\n  assert_always(r == 0);\n\n  db_env->set_killed_callback(db_env, DEFAULT_TOKUDB_KILLED_TIME,\n                              tokudb_get_killed_time_callback,\n                              tokudb_killed_callback);\n\n  r = db_env->get_engine_status_num_rows(db_env, &toku_global_status_max_rows);\n  assert_always(r == 0);\n\n  {\n    const myf mem_flags =\n        MY_FAE | MY_WME | MY_ZEROFILL | MY_ALLOW_ZERO_PTR | MY_FREE_ON_ERROR;\n    toku_global_status_variables = (SHOW_VAR *)tokudb::memory::malloc(\n        sizeof(*toku_global_status_variables) * toku_global_status_max_rows,\n        mem_flags);\n    toku_global_status_rows =\n        (TOKU_ENGINE_STATUS_ROW_S *)tokudb::memory::malloc(\n            sizeof(*toku_global_status_rows) * toku_global_status_max_rows,\n            mem_flags);\n  }\n\n  tokudb_primary_key_bytes_inserted = create_partitioned_counter();\n\n#if defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n  init_tree(&tokudb_map, 0, 0, tokudb_map_pair_cmp, true, NULL, NULL);\n#endif  // defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n\n  if (tokudb::sysvars::strip_frm_data) {\n    r = tokudb::metadata::strip_frm_data(db_env);\n    if (r) {\n      DBUG_PRINT(\"info\", (\"env->open %d\", r));\n      handle_ydb_error(r);\n      goto error;\n    }\n  }\n\n  // 3938: succeeded, set the init status flag and unlock\n  tokudb_hton_initialized = 1;\n  tokudb_hton_initialized_lock.unlock();\n  DBUG_RETURN(false);\n\nerror:\n  if (db_env) {\n    int rr = db_env->close(db_env, 0);\n    assert_always(rr == 0);\n    db_env = 0;\n  }\n\n  deinit_logging_service_for_plugin(&reg_srv, &log_bi, &log_bs);\n\n  // 3938: failed to initialized, drop the flag and lock\n  tokudb_hton_initialized = 0;\n  tokudb_hton_initialized_lock.unlock();\n  DBUG_RETURN(true);\n}\n\nstatic int tokudb_done_func(TOKUDB_UNUSED(void *p)) {\n  TOKUDB_DBUG_ENTER(\"\");\n  tokudb::memory::free(toku_global_status_variables);\n  toku_global_status_variables = NULL;\n  tokudb::memory::free(toku_global_status_rows);\n  toku_global_status_rows = NULL;\n  tokudb_map_mutex.deinit();\n  toku_ydb_destroy();\n  deinit_logging_service_for_plugin(&reg_srv, &log_bi, &log_bs);\n  TOKUDB_DBUG_RETURN(0);\n}\n\nstatic handler *tokudb_create_handler(handlerton *hton, TABLE_SHARE *table,\n                                      bool partitioned, MEM_ROOT *mem_root) {\n  if (partitioned) {\n    DBUG_ASSERT(partitioned);\n    ha_tokupart *file = new (mem_root) ha_tokupart(hton, table);\n    if (file && file->init_partitioning(mem_root)) {\n      destroy(file);\n      return (nullptr);\n    }\n    return (file);\n  }\n\n  return new (mem_root) ha_tokudb(hton, table);\n}\n\nstatic uint tokudb_partition_flags() { return HA_CANNOT_PARTITION_FK; }\n\nint tokudb_end(TOKUDB_UNUSED(handlerton *hton),\n               TOKUDB_UNUSED(ha_panic_function type)) {\n  TOKUDB_DBUG_ENTER(\"\");\n  int error = 0;\n\n  // 3938: if we finalize the storage engine plugin, it is no longer\n  // initialized. grab a writer lock for the duration of the\n  // call, so we can drop the flag and destroy the mutexes\n  // in isolation.\n  rwlock_t_lock_write(tokudb_hton_initialized_lock);\n  assert_always(tokudb_hton_initialized);\n\n  tokudb::background::destroy();\n  TOKUDB_SHARE::static_destroy();\n\n  if (db_env) {\n    if (tokudb_init_flags & DB_INIT_LOG) tokudb_cleanup_log_files();\n\n    // count the total number of prepared txn's that we discard\n    long total_prepared = 0;\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"begin XA cleanup\");\n    while (1) {\n      // get xid's\n      const long n_xid = 1;\n      TOKU_XA_XID xids[n_xid];\n      long n_prepared = 0;\n      error = db_env->txn_xa_recover(db_env, xids, n_xid, &n_prepared,\n                                     total_prepared == 0 ? DB_FIRST : DB_NEXT);\n      assert_always(error == 0);\n      if (n_prepared == 0) break;\n      // discard xid's\n      for (long i = 0; i < n_xid; i++) {\n        DB_TXN *txn = NULL;\n        error = db_env->get_txn_from_xid(db_env, &xids[i], &txn);\n        assert_always(error == 0);\n        error = txn->discard(txn, 0);\n        assert_always(error == 0);\n      }\n      total_prepared += n_prepared;\n    }\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"end XA cleanup\");\n    error =\n        db_env->close(db_env, total_prepared > 0 ? TOKUFT_DIRTY_SHUTDOWN : 0);\n    if (error != 0 && total_prepared > 0) {\n      LogPluginErrMsg(ERROR_LEVEL, 0,\n                      \"%ld prepared txns still live, please shutdown, error %d\",\n                      total_prepared, error);\n    } else\n      assert_always(error == 0);\n    db_env = NULL;\n  }\n\n  if (tokudb_primary_key_bytes_inserted) {\n    destroy_partitioned_counter(tokudb_primary_key_bytes_inserted);\n    tokudb_primary_key_bytes_inserted = NULL;\n  }\n\n#if defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n  delete_tree(&tokudb_map);\n#endif  // defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n\n  // 3938: drop the initialized flag and unlock\n  tokudb_hton_initialized = 0;\n  tokudb_hton_initialized_lock.unlock();\n\n  TOKUDB_DBUG_RETURN(error);\n}\n\nstatic int tokudb_close_connection(TOKUDB_UNUSED(handlerton *hton), THD *thd) {\n  int error = 0;\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, tokudb_hton);\n  if (trx && trx->checkpoint_lock_taken) {\n    error = db_env->checkpointing_resume(db_env);\n  }\n  tokudb::memory::free(trx);\n#if defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n  mutex_t_lock(tokudb_map_mutex);\n  struct tokudb_map_pair key = {thd, NULL};\n  struct tokudb_map_pair *found_key =\n      (struct tokudb_map_pair *)tree_search(&tokudb_map, &key, NULL);\n\n  if (found_key) {\n    tokudb::memory::free(found_key->last_lock_timeout);\n    tree_delete(&tokudb_map, found_key, sizeof(*found_key), NULL);\n  }\n  mutex_t_unlock(tokudb_map_mutex);\n#endif  // defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n  return error;\n}\n\nvoid tokudb_kill_connection(TOKUDB_UNUSED(handlerton *hton), THD *thd) {\n  TOKUDB_DBUG_ENTER(\"\");\n  db_env->kill_waiter(db_env, thd);\n  DBUG_VOID_RETURN;\n}\n\nbool tokudb_flush_logs(TOKUDB_UNUSED(handlerton *hton),\n                       bool binlog_group_commit) {\n  TOKUDB_DBUG_ENTER(\"\");\n  int error;\n  bool result = 0;\n\n  // if we are in 'FLUSH LOGS' and we are directed to checkpoint, do a\n  // checkpoint which also has the effect of flushing logs\n  if (!binlog_group_commit && tokudb::sysvars::checkpoint_on_flush_logs) {\n    error = db_env->txn_checkpoint(db_env, 0, 0, 0);\n    if (error) {\n      my_error(ER_ERROR_DURING_FLUSH_LOGS, MYF(0), error);\n      result = 1;\n      goto exit;\n    }\n  }\n  // if we are either in 'FLUSH LOGS', or, we are not in 'FLUSH LOGS' but in\n  // binlog_group_commit and we are in high durability, flush 'em\n  else if (!binlog_group_commit || (tokudb::sysvars::fsync_log_period == 0 &&\n                                    tokudb::sysvars::commit_sync(NULL))) {\n    error = db_env->log_flush(db_env, NULL);\n    assert_always(error == 0);\n  }\n\nexit:\n  TOKUDB_DBUG_RETURN(result);\n}\n\ntypedef struct txn_progress_info {\n  char status[200];\n  THD *thd;\n} * TXN_PROGRESS_INFO;\n\nstatic void txn_progress_func(TOKU_TXN_PROGRESS progress, void *extra) {\n  TXN_PROGRESS_INFO progress_info = (TXN_PROGRESS_INFO)extra;\n  int r = sprintf(progress_info->status,\n                  \"%sprocessing %s of transaction, %\" PRId64 \" out of %\" PRId64,\n                  progress->stalled_on_checkpoint\n                      ? \"Writing committed changes to disk, \"\n                      : \"\",\n                  progress->is_commit ? \"commit\" : \"abort\",\n                  progress->entries_processed, progress->entries_total);\n  assert_always(r >= 0);\n  thd_proc_info(progress_info->thd, progress_info->status);\n}\n\nstatic void commit_txn_with_progress(DB_TXN *txn, uint32_t flags, THD *thd) {\n  const char *orig_proc_info = tokudb_thd_get_proc_info(thd);\n  struct txn_progress_info info;\n  info.thd = thd;\n  int r = txn->commit_with_progress(txn, flags, txn_progress_func, &info);\n  if (r != 0) {\n    LogPluginErrMsg(ERROR_LEVEL, 0,\n                    \"Tried committing transaction %p and got error code %d\",\n                    txn, r);\n  }\n  assert_always(r == 0);\n  thd_proc_info(thd, orig_proc_info);\n}\n\nstatic void abort_txn_with_progress(DB_TXN *txn, THD *thd) {\n  const char *orig_proc_info = tokudb_thd_get_proc_info(thd);\n  struct txn_progress_info info;\n  info.thd = thd;\n  int r = txn->abort_with_progress(txn, txn_progress_func, &info);\n  if (r != 0) {\n    LogPluginErrMsg(ERROR_LEVEL, 0,\n                    \"Tried aborting transaction %p and got error code %d\", txn,\n                    r);\n  }\n  assert_always(r == 0);\n  thd_proc_info(thd, orig_proc_info);\n}\n\nstatic void tokudb_cleanup_handlers(tokudb_trx_data *trx, DB_TXN *txn) {\n  LIST *e;\n  while ((e = trx->handlers)) {\n    trx->handlers = list_delete(trx->handlers, e);\n    ha_tokudb *handler = (ha_tokudb *)e->data;\n    handler->cleanup_txn(txn);\n  }\n}\n\n// Determine if an fsync is used when a transaction is committed.\nstatic bool tokudb_sync_on_commit(THD *thd) {\n  // Check the client durability property which is set during 2PC\n  if (thd_get_durability_property(thd) == HA_IGNORE_DURABILITY) return false;\n  if (tokudb::sysvars::fsync_log_period > 0) return false;\n  return tokudb::sysvars::commit_sync(thd) != 0;\n}\n\nstatic int tokudb_commit(handlerton *hton, THD *thd, bool all) {\n  TOKUDB_DBUG_ENTER(\"%u\", all);\n  DBUG_PRINT(\"trans\", (\"ending transaction %s\", all ? \"all\" : \"stmt\"));\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, hton);\n  DB_TXN **txn = all ? &trx->all : &trx->stmt;\n  DB_TXN *this_txn = *txn;\n  if (this_txn) {\n    uint32_t syncflag = tokudb_sync_on_commit(thd) ? 0 : DB_TXN_NOSYNC;\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_TXN, \"commit trx %u txn %p syncflag %u\",\n                           all, this_txn, syncflag);\n    // test hook to induce a crash on a debug build\n    DBUG_EXECUTE_IF(\"tokudb_crash_commit_before\", DBUG_SUICIDE(););\n    tokudb_cleanup_handlers(trx, this_txn);\n    commit_txn_with_progress(this_txn, syncflag, thd);\n    // test hook to induce a crash on a debug build\n    DBUG_EXECUTE_IF(\"tokudb_crash_commit_after\", DBUG_SUICIDE(););\n    *txn = NULL;\n    trx->sub_sp_level = NULL;\n    if (this_txn == trx->sp_level || trx->all == NULL) {\n      trx->sp_level = NULL;\n    }\n  } else {\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_TXN, \"nothing to commit %d\", all);\n  }\n  reset_stmt_progress(&trx->stmt_progress);\n  TOKUDB_DBUG_RETURN(0);\n}\n\nstatic int tokudb_rollback(handlerton *hton, THD *thd, bool all) {\n  TOKUDB_DBUG_ENTER(\"%u\", all);\n  DBUG_PRINT(\"trans\", (\"aborting transaction %s\", all ? \"all\" : \"stmt\"));\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, hton);\n  DB_TXN **txn = all ? &trx->all : &trx->stmt;\n  DB_TXN *this_txn = *txn;\n  if (this_txn) {\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_TXN, \"rollback %u txn %p\", all,\n                           this_txn);\n    tokudb_cleanup_handlers(trx, this_txn);\n    abort_txn_with_progress(this_txn, thd);\n    *txn = NULL;\n    trx->sub_sp_level = NULL;\n    if (this_txn == trx->sp_level || trx->all == NULL) {\n      trx->sp_level = NULL;\n    }\n  } else {\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_TXN, \"abort0\");\n  }\n  reset_stmt_progress(&trx->stmt_progress);\n  TOKUDB_DBUG_RETURN(0);\n}\n\nstatic bool tokudb_sync_on_prepare(THD *thd) {\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"enter\");\n  bool r;\n  // skip sync of log if fsync log period > 0 or if\n  // client durability during 2PC has been set to ignore, usually because\n  // binlog coordinator is in use and performing group commit\n  if (tokudb::sysvars::fsync_log_period > 0 ||\n      thd_get_durability_property(thd) == HA_IGNORE_DURABILITY) {\n    r = false;\n  } else {\n    r = true;\n  }\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"exit %d\", r);\n  return r;\n}\n\nstatic int tokudb_xa_prepare(handlerton *hton, THD *thd, bool all) {\n  TOKUDB_DBUG_ENTER(\"%u\", all);\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"enter\");\n  int r = 0;\n\n  DBUG_PRINT(\"trans\", (\"preparing transaction %s\", all ? \"all\" : \"stmt\"));\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, hton);\n  DB_TXN *txn = all ? trx->all : trx->stmt;\n  if (txn) {\n    uint32_t syncflag = tokudb_sync_on_prepare(thd) ? 0 : DB_TXN_NOSYNC;\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"doing txn prepare:%d:%p\", all,\n                           txn);\n    // a TOKU_XA_XID is identical to a MYSQL_XID\n    TOKU_XA_XID thd_xid;\n    thd_get_xid(thd, (MYSQL_XID *)&thd_xid);\n    // test hook to induce a crash on a debug build\n    DBUG_EXECUTE_IF(\"tokudb_crash_prepare_before\", DBUG_SUICIDE(););\n    r = txn->xa_prepare(txn, &thd_xid, syncflag);\n    // test hook to induce a crash on a debug build\n    DBUG_EXECUTE_IF(\"tokudb_crash_prepare_after\", DBUG_SUICIDE(););\n\n    // XA log entries can be interleaved in the binlog since XA prepare on\n    // the master flushes to the binlog.  There can be log entries from\n    // different clients pushed into the binlog before XA commit is executed\n    // on the master.  Therefore, the slave thread must be able to juggle\n    // multiple XA transactions.  Tokudb does this by zapping the client\n    // transaction context on the slave when executing the XA prepare and\n    // expecting to process XA commit with commit_by_xid (which supplies the\n    // XID so that the transaction can be looked up and committed).\n    if (r == 0 && all && thd->slave_thread) {\n      TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"zap txn context %u\",\n                             thd_sql_command(thd));\n      if (thd_sql_command(thd) == SQLCOM_XA_PREPARE) {\n        trx->all = NULL;\n        trx->sub_sp_level = NULL;\n        trx->sp_level = NULL;\n      }\n    }\n  } else {\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"nothing to prepare %d\", all);\n  }\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"exit %d\", r);\n  TOKUDB_DBUG_RETURN(r);\n}\n\nstatic int tokudb_xa_recover(TOKUDB_UNUSED(handlerton *hton),\n                             XA_recover_txn *txn_list, uint len,\n                             TOKUDB_UNUSED(MEM_ROOT *mem_root)) {\n  TOKUDB_DBUG_ENTER(\"\");\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"enter\");\n  int r = 0;\n  if (len == 0 || txn_list == NULL) {\n    TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"exit %d\", 0);\n    TOKUDB_DBUG_RETURN(0);\n  }\n  std::vector<TOKU_XA_XID> xids;\n  xids.resize(len);\n\n  long num_returned = 0;\n  r = db_env->txn_xa_recover(db_env, &xids[0], len, &num_returned, DB_NEXT);\n\n  uint count = 0;\n  for (; count < num_returned; count++) {\n    const auto &trans = xids[count];\n    txn_list[count].id.set(trans.formatID, trans.data, trans.gtrid_length,\n                           trans.data + trans.gtrid_length, trans.bqual_length);\n\n    txn_list[count].mod_tables = new (mem_root) List<st_handler_tablename>();\n    if (!txn_list[count].mod_tables) break;\n  }\n  assert_always(r == 0);\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"exit %d\", count);\n  TOKUDB_DBUG_RETURN((int)count);\n}\n\nstatic xa_status_code tokudb_commit_by_xid(TOKUDB_UNUSED(handlerton *hton),\n                                           XID *xid) {\n  TOKUDB_DBUG_ENTER(\"\");\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"enter\");\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"xid %p\", xid);\n  int r = 0;\n  DB_TXN *txn = NULL;\n  TOKU_XA_XID *toku_xid = (TOKU_XA_XID *)xid;\n\n  r = db_env->get_txn_from_xid(db_env, toku_xid, &txn);\n  if (r) {\n    goto cleanup;\n  }\n\n  r = txn->commit(txn, 0);\n  if (r) {\n    goto cleanup;\n  }\n\n  r = 0;\ncleanup:\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"exit %d\", r);\n  if (TOKUDB_UNLIKELY(\n          (tokudb::sysvars::debug & TOKUDB_DEBUG_RETURN) ||\n          (r != 0 && (tokudb::sysvars::debug & TOKUDB_DEBUG_ERROR)))) {\n    TOKUDB_TRACE(\"return %d\", r);\n  }\n  DBUG_RETURN(r == 0 ? XA_OK : XAER_RMERR);\n}\n\nstatic xa_status_code tokudb_rollback_by_xid(TOKUDB_UNUSED(handlerton *hton),\n                                             XID *xid) {\n  TOKUDB_DBUG_ENTER(\"\");\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"enter\");\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"xid %p\", xid);\n  int r = 0;\n  DB_TXN *txn = NULL;\n  TOKU_XA_XID *toku_xid = (TOKU_XA_XID *)xid;\n\n  r = db_env->get_txn_from_xid(db_env, toku_xid, &txn);\n  if (r) {\n    goto cleanup;\n  }\n\n  r = txn->abort(txn);\n  if (r) {\n    goto cleanup;\n  }\n\n  r = 0;\ncleanup:\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_XA, \"exit %d\", r);\n  if (TOKUDB_UNLIKELY(\n          (tokudb::sysvars::debug & TOKUDB_DEBUG_RETURN) ||\n          (r != 0 && (tokudb::sysvars::debug & TOKUDB_DEBUG_ERROR)))) {\n    TOKUDB_TRACE(\"return %d\", r);\n  }\n  DBUG_RETURN(r == 0 ? XA_OK : XAER_RMERR);\n}\n\nstatic int tokudb_savepoint(handlerton *hton, THD *thd, void *savepoint) {\n  TOKUDB_DBUG_ENTER(\"%p\", savepoint);\n  int error;\n  SP_INFO save_info = (SP_INFO)savepoint;\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, hton);\n  if (thd->in_sub_stmt) {\n    assert_always(trx->stmt);\n    error = txn_begin(db_env, trx->sub_sp_level, &(save_info->txn),\n                      DB_INHERIT_ISOLATION, thd);\n    if (error) {\n      goto cleanup;\n    }\n    trx->sub_sp_level = save_info->txn;\n    save_info->in_sub_stmt = true;\n  } else {\n    error = txn_begin(db_env, trx->sp_level, &(save_info->txn),\n                      DB_INHERIT_ISOLATION, thd);\n    if (error) {\n      goto cleanup;\n    }\n    trx->sp_level = save_info->txn;\n    save_info->in_sub_stmt = false;\n  }\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_TXN, \"begin txn %p\", save_info->txn);\n  save_info->trx = trx;\n  error = 0;\ncleanup:\n  TOKUDB_DBUG_RETURN(error);\n}\n\nstatic int tokudb_rollback_to_savepoint(handlerton *hton, THD *thd,\n                                        void *savepoint) {\n  TOKUDB_DBUG_ENTER(\"%p\", savepoint);\n  int error;\n  SP_INFO save_info = (SP_INFO)savepoint;\n  DB_TXN *parent = NULL;\n  DB_TXN *txn_to_rollback = save_info->txn;\n\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, hton);\n  parent = txn_to_rollback->parent;\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_TXN, \"rollback txn %p\", txn_to_rollback);\n  if (!(error = txn_to_rollback->abort(txn_to_rollback))) {\n    if (save_info->in_sub_stmt) {\n      trx->sub_sp_level = parent;\n    } else {\n      trx->sp_level = parent;\n    }\n    error = tokudb_savepoint(hton, thd, savepoint);\n  }\n  TOKUDB_DBUG_RETURN(error);\n}\n\nstatic int tokudb_release_savepoint(handlerton *hton, THD *thd,\n                                    void *savepoint) {\n  TOKUDB_DBUG_ENTER(\"%p\", savepoint);\n  int error = 0;\n  SP_INFO save_info = (SP_INFO)savepoint;\n  DB_TXN *parent = NULL;\n  DB_TXN *txn_to_commit = save_info->txn;\n\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, hton);\n  parent = txn_to_commit->parent;\n  TOKUDB_TRACE_FOR_FLAGS(TOKUDB_DEBUG_TXN, \"commit txn %p\", txn_to_commit);\n  DB_TXN *child = txn_to_commit->get_child(txn_to_commit);\n  if (child == NULL && !(error = txn_to_commit->commit(txn_to_commit, 0))) {\n    if (save_info->in_sub_stmt) {\n      trx->sub_sp_level = parent;\n    } else {\n      trx->sp_level = parent;\n    }\n  }\n  save_info->txn = NULL;\n  TOKUDB_DBUG_RETURN(error);\n}\n\n#if defined(TOKU_INCLUDE_DISCOVER_FRM) && TOKU_INCLUDE_DISCOVER_FRM\nstatic int tokudb_discover(handlerton *hton, THD *thd, const char *db,\n                           const char *name, uchar **frmblob, size_t *frmlen) {\n  return tokudb_discover2(hton, thd, db, name, true, frmblob, frmlen);\n}\n\nstatic int tokudb_discover2(handlerton *hton, THD *thd, const char *db,\n                            const char *name, bool translate_name,\n                            uchar **frmblob, size_t *frmlen) {\n  char path[FN_REFLEN + 1];\n  build_table_filename(path, sizeof(path) - 1, db, name, \"\",\n                       translate_name ? 0 : FN_IS_TMP);\n  return tokudb_discover3(hton, thd, db, name, path, frmblob, frmlen);\n}\n\nstatic int tokudb_discover3(TOKUDB_UNUSED(handlerton *hton), THD *thd,\n                            const char *db, const char *name, char *path,\n                            uchar **frmblob, size_t *frmlen) {\n  TOKUDB_DBUG_ENTER(\"%s %s %s\", db, name, path);\n  int error;\n  DB *status_db = NULL;\n  DB_TXN *txn = NULL;\n  HA_METADATA_KEY curr_key = hatoku_frm_data;\n  DBT key = {};\n  DBT value = {};\n  bool do_commit = false;\n\n  error = txn_begin(db_env, 0, &txn, 0, thd);\n  if (error) {\n    goto cleanup;\n  }\n  do_commit = true;\n\n  error = open_status_dictionary(&status_db, path, txn);\n  if (error) {\n    goto cleanup;\n  }\n\n  key.data = &curr_key;\n  key.size = sizeof(curr_key);\n\n  error = status_db->getf_set(status_db, txn, 0, &key,\n                              smart_dbt_callback_verify_frm, &value);\n  if (error) {\n    goto cleanup;\n  }\n\n  *frmblob = (uchar *)value.data;\n  *frmlen = value.size;\n\n  error = 0;\ncleanup:\n  if (status_db) {\n    status_db->close(status_db, 0);\n  }\n  if (do_commit && txn) {\n    commit_txn(txn, 0);\n  }\n  TOKUDB_DBUG_RETURN(error);\n}\n#endif  // defined(TOKU_INCLUDE_DISCOVER_FRM) && TOKU_INCLUDE_DISCOVER_FRM\n\n#define STATPRINT(legend, val)                                        \\\n  if (legend != NULL && val != NULL)                                  \\\n  stat_print(thd, tokudb_hton_name, strlen(tokudb_hton_name), legend, \\\n             strlen(legend), val, strlen(val))\n\nextern sys_var *intern_find_sys_var(const char *str, uint length,\n                                    bool no_error);\n\nstatic bool tokudb_show_engine_status(THD *thd, stat_print_fn *stat_print) {\n  TOKUDB_DBUG_ENTER(\"\");\n  int error;\n  uint64_t panic;\n  const int panic_string_len = 1024;\n  char panic_string[panic_string_len] = {'\\0'};\n  uint64_t num_rows;\n  uint64_t max_rows;\n  fs_redzone_state redzone_state;\n  const int bufsiz = 1024;\n  char buf[bufsiz];\n\n  error = db_env->get_engine_status_num_rows(db_env, &max_rows);\n  TOKU_ENGINE_STATUS_ROW_S mystat[max_rows];\n  error = db_env->get_engine_status(db_env, mystat, max_rows, &num_rows,\n                                    &redzone_state, &panic, panic_string,\n                                    panic_string_len, TOKU_ENGINE_STATUS);\n\n  if (strlen(panic_string)) {\n    STATPRINT(\"Environment panic string\", panic_string);\n  }\n  if (error == 0) {\n    if (panic) {\n      snprintf(buf, bufsiz, \"%\" PRIu64, panic);\n      STATPRINT(\"Environment panic\", buf);\n    }\n\n    if (redzone_state == FS_BLOCKED) {\n      STATPRINT(\"*** URGENT WARNING ***\", \"FILE SYSTEM IS COMPLETELY FULL\");\n      snprintf(buf, bufsiz, \"FILE SYSTEM IS COMPLETELY FULL\");\n    } else if (redzone_state == FS_GREEN) {\n      snprintf(buf, bufsiz, \"more than %d percent of total file system space\",\n               2 * tokudb::sysvars::fs_reserve_percent);\n    } else if (redzone_state == FS_YELLOW) {\n      snprintf(buf, bufsiz,\n               \"*** WARNING *** FILE SYSTEM IS GETTING FULL (less than %d \"\n               \"percent free)\",\n               2 * tokudb::sysvars::fs_reserve_percent);\n    } else if (redzone_state == FS_RED) {\n      snprintf(buf, bufsiz,\n               \"*** WARNING *** FILE SYSTEM IS GETTING VERY FULL (less than \"\n               \"%d percent free): INSERTS ARE PROHIBITED\",\n               tokudb::sysvars::fs_reserve_percent);\n    } else {\n      snprintf(buf, bufsiz, \"information unavailable, unknown redzone state %d\",\n               redzone_state);\n    }\n    STATPRINT(\"disk free space\", buf);\n\n    for (uint64_t row = 0; row < num_rows; row++) {\n      switch (mystat[row].type) {\n        case FS_STATE:\n          snprintf(buf, bufsiz, \"%\" PRIu64 \"\", mystat[row].value.num);\n          break;\n        case UINT64:\n          snprintf(buf, bufsiz, \"%\" PRIu64 \"\", mystat[row].value.num);\n          break;\n        case CHARSTR:\n          snprintf(buf, bufsiz, \"%s\", mystat[row].value.str);\n          break;\n        case UNIXTIME: {\n          time_t t = mystat[row].value.num;\n          char tbuf[26];\n          snprintf(buf, bufsiz, \"%.24s\", ctime_r(&t, tbuf));\n          break;\n        }\n        case TOKUTIME: {\n          double t = tokutime_to_seconds(mystat[row].value.num);\n          snprintf(buf, bufsiz, \"%.6f\", t);\n          break;\n        }\n        case PARCOUNT: {\n          uint64_t v = read_partitioned_counter(mystat[row].value.parcount);\n          snprintf(buf, bufsiz, \"%\" PRIu64, v);\n          break;\n        }\n        case DOUBLE:\n          snprintf(buf, bufsiz, \"%.6f\", mystat[row].value.dnum);\n          break;\n        default:\n          snprintf(buf, bufsiz, \"UNKNOWN STATUS TYPE: %d\", mystat[row].type);\n          break;\n      }\n      STATPRINT(mystat[row].legend, buf);\n    }\n    uint64_t bytes_inserted =\n        read_partitioned_counter(tokudb_primary_key_bytes_inserted);\n    snprintf(buf, bufsiz, \"%\" PRIu64, bytes_inserted);\n    STATPRINT(\"handlerton: primary key bytes inserted\", buf);\n  }\n  if (error) {\n    set_my_errno(error);\n  }\n  TOKUDB_DBUG_RETURN(error);\n}\n\nvoid tokudb_checkpoint_lock(THD *thd) {\n  int error;\n  const char *old_proc_info;\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, tokudb_hton);\n  if (!trx) {\n    error = create_tokudb_trx_data_instance(&trx);\n    //\n    // can only fail due to memory allocation, so ok to assert\n    //\n    assert_always(!error);\n    thd_set_ha_data(thd, tokudb_hton, trx);\n  }\n\n  if (trx->checkpoint_lock_taken) {\n    goto cleanup;\n  }\n  //\n  // This can only fail if environment is not created, which is not possible\n  // in handlerton\n  //\n  old_proc_info = tokudb_thd_get_proc_info(thd);\n  thd_proc_info(thd, \"Trying to grab checkpointing lock.\");\n  error = db_env->checkpointing_postpone(db_env);\n  assert_always(!error);\n  thd_proc_info(thd, old_proc_info);\n\n  trx->checkpoint_lock_taken = true;\ncleanup:\n  return;\n}\n\nvoid tokudb_checkpoint_unlock(THD *thd) {\n  int error;\n  const char *old_proc_info;\n  tokudb_trx_data *trx = (tokudb_trx_data *)thd_get_ha_data(thd, tokudb_hton);\n  if (!trx) {\n    error = 0;\n    goto cleanup;\n  }\n  if (!trx->checkpoint_lock_taken) {\n    error = 0;\n    goto cleanup;\n  }\n  //\n  // at this point, we know the checkpoint lock has been taken\n  //\n  old_proc_info = tokudb_thd_get_proc_info(thd);\n  thd_proc_info(thd, \"Trying to release checkpointing lock.\");\n  error = db_env->checkpointing_resume(db_env);\n  assert_always(!error);\n  thd_proc_info(thd, old_proc_info);\n\n  trx->checkpoint_lock_taken = false;\n\ncleanup:\n  return;\n}\n\nstatic bool tokudb_show_status(TOKUDB_UNUSED(handlerton *hton), THD *thd,\n                               stat_print_fn *stat_print,\n                               enum ha_stat_type stat_type) {\n  switch (stat_type) {\n    case HA_ENGINE_STATUS:\n      return tokudb_show_engine_status(thd, stat_print);\n      break;\n    default:\n      break;\n  }\n  return false;\n}\n\nstatic void tokudb_print_error(TOKUDB_UNUSED(const DB_ENV *db_env),\n                               const char *db_errpfx, const char *buffer) {\n  LogPluginErrMsg(ERROR_LEVEL, 0, \"%s: %s\", db_errpfx, buffer);\n}\n\nstatic void tokudb_cleanup_log_files(void) {\n  TOKUDB_DBUG_ENTER(\"\");\n  char **names;\n  int error;\n\n  if ((error = db_env->txn_checkpoint(db_env, 0, 0, 0)))\n    my_error(ER_ERROR_DURING_FLUSH_LOGS, MYF(0), error);\n\n  if ((error = db_env->log_archive(db_env, &names, 0)) != 0) {\n    DBUG_PRINT(\"error\", (\"log_archive failed (error %d)\", error));\n    db_env->err(db_env, error, \"log_archive\");\n    DBUG_VOID_RETURN;\n  }\n\n  if (names) {\n    char **np;\n    for (np = names; *np; ++np) {\n#if 1\n      if (TOKUDB_UNLIKELY(tokudb::sysvars::debug))\n        TOKUDB_TRACE(\"cleanup:%s\", *np);\n#else\n      my_delete(*np, MYF(MY_WME));\n#endif\n    }\n\n    free(names);\n  }\n\n  DBUG_VOID_RETURN;\n}\n\n// Split ./database/table-dictionary into database, table and dictionary strings\nvoid tokudb_split_dname(const char *dname, String &database_name,\n                        String &table_name, String &dictionary_name) {\n  const char *splitter = strchr(dname, '/');\n  if (splitter) {\n    const char *database_ptr = splitter + 1;\n    const char *table_ptr = strchr(database_ptr, '/');\n    if (table_ptr) {\n      database_name.append(database_ptr, table_ptr - database_ptr);\n      table_ptr += 1;\n      const char *dictionary_ptr = strchr(table_ptr, '-');\n      if (dictionary_ptr) {\n        table_name.append(table_ptr, dictionary_ptr - table_ptr);\n        dictionary_ptr += 1;\n        dictionary_name.append(dictionary_ptr);\n      } else {\n        table_name.append(table_ptr);\n      }\n    } else {\n      database_name.append(database_ptr);\n    }\n  }\n}\n\nstruct st_mysql_storage_engine tokudb_storage_engine = {\n    MYSQL_HANDLERTON_INTERFACE_VERSION};\n\nstatic void tokudb_pretty_key(const DBT *key, const char *default_key,\n                              String *out) {\n  if (key->data == NULL) {\n    out->append(default_key);\n  } else {\n    bool do_hexdump = true;\n    if (do_hexdump) {\n      // hexdump the key\n      const unsigned char *data =\n          reinterpret_cast<const unsigned char *>(key->data);\n      for (size_t i = 0; i < key->size; i++) {\n        char str[3];\n        snprintf(str, sizeof str, \"%2.2x\", data[i]);\n        out->append(str);\n      }\n    }\n  }\n}\n\nvoid tokudb_pretty_left_key(const DBT *key, String *out) {\n  tokudb_pretty_key(key, \"-infinity\", out);\n}\n\nvoid tokudb_pretty_right_key(const DBT *key, String *out) {\n  tokudb_pretty_key(key, \"+infinity\", out);\n}\n\nconst char *tokudb_get_index_name(DB *db) {\n  if (db != NULL) {\n    return db->get_dname(db);\n  } else {\n    return \"$ydb_internal\";\n  }\n}\n\nstatic int tokudb_equal_key(const DBT *left_key, const DBT *right_key) {\n  if (left_key->data == NULL || right_key->data == NULL ||\n      left_key->size != right_key->size)\n    return 0;\n  else\n    return memcmp(left_key->data, right_key->data, left_key->size) == 0;\n}\n\nstatic void tokudb_lock_timeout_callback(DB *db, uint64_t requesting_txnid,\n                                         const DBT *left_key,\n                                         const DBT *right_key,\n                                         uint64_t blocking_txnid) {\n  THD *thd = current_thd;\n  if (!thd) return;\n  ulong lock_timeout_debug = tokudb::sysvars::lock_timeout_debug(thd);\n  if (lock_timeout_debug != 0) {\n    // generate a JSON document with the lock timeout info\n    String log_str;\n    log_str.append(\"{\");\n    my_thread_id mysql_thread_id = thd->thread_id();\n    log_str.append(\"\\\"mysql_thread_id\\\":\");\n    log_str.append_ulonglong(static_cast<ulonglong>(mysql_thread_id));\n    log_str.append(\", \\\"dbname\\\":\");\n    log_str.append(\"\\\"\");\n    log_str.append(tokudb_get_index_name(db));\n    log_str.append(\"\\\"\");\n    log_str.append(\", \\\"requesting_txnid\\\":\");\n    log_str.append_ulonglong(requesting_txnid);\n    log_str.append(\", \\\"blocking_txnid\\\":\");\n    log_str.append_ulonglong(blocking_txnid);\n    if (tokudb_equal_key(left_key, right_key)) {\n      String key_str;\n      tokudb_pretty_key(left_key, \"?\", &key_str);\n      log_str.append(\", \\\"key\\\":\");\n      log_str.append(\"\\\"\");\n      log_str.append(key_str);\n      log_str.append(\"\\\"\");\n    } else {\n      String left_str;\n      tokudb_pretty_left_key(left_key, &left_str);\n      log_str.append(\", \\\"key_left\\\":\");\n      log_str.append(\"\\\"\");\n      log_str.append(left_str);\n      log_str.append(\"\\\"\");\n      String right_str;\n      tokudb_pretty_right_key(right_key, &right_str);\n      log_str.append(\", \\\"key_right\\\":\");\n      log_str.append(\"\\\"\");\n      log_str.append(right_str);\n      log_str.append(\"\\\"\");\n    }\n    log_str.append(\"}\");\n    // set last_lock_timeout\n    if (lock_timeout_debug & 1) {\n      char *old_lock_timeout = tokudb::sysvars::last_lock_timeout(thd);\n      char *new_lock_timeout = tokudb::memory::strdup(log_str.c_ptr(), MY_FAE);\n      tokudb::sysvars::set_last_lock_timeout(thd, new_lock_timeout);\n#if defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n      mutex_t_lock(tokudb_map_mutex);\n      struct tokudb_map_pair old_key = {thd, old_lock_timeout};\n      tree_delete(&tokudb_map, &old_key, sizeof old_key, NULL);\n      struct tokudb_map_pair new_key = {thd, new_lock_timeout};\n      tree_insert(&tokudb_map, &new_key, sizeof new_key, NULL);\n      mutex_t_unlock(tokudb_map_mutex);\n#endif  // defined(TOKU_THDVAR_MEMALLOC_BUG) && TOKU_THDVAR_MEMALLOC_BUG\n      tokudb::memory::free(old_lock_timeout);\n    }\n    // dump to stderr\n    if (lock_timeout_debug & 2) {\n      LogPluginErrMsg(ERROR_LEVEL, 0, \"Lock timeout %s\", log_str.c_ptr());\n      LEX_CSTRING qs = thd->query();\n      LogPluginErrMsg(ERROR_LEVEL, 0, \"Requesting_thread_id:%\" PRIu64 \" q:%.*s\",\n                      static_cast<uint64_t>(mysql_thread_id), (int)qs.length,\n                      qs.str);\n    }\n  }\n}\n\n// Retrieves variables for information_schema.global_status.\n// Names (columnname) are automatically converted to upper case,\n// and prefixed with \"TOKUDB_\"\nstatic int show_tokudb_vars(TOKUDB_UNUSED(THD *thd), SHOW_VAR *var,\n                            TOKUDB_UNUSED(char *buff)) {\n  TOKUDB_DBUG_ENTER(\"\");\n\n  int error;\n  uint64_t panic;\n  const int panic_string_len = 1024;\n  char panic_string[panic_string_len] = {'\\0'};\n  fs_redzone_state redzone_state;\n\n  uint64_t num_rows;\n  error = db_env->get_engine_status(db_env, toku_global_status_rows,\n                                    toku_global_status_max_rows, &num_rows,\n                                    &redzone_state, &panic, panic_string,\n                                    panic_string_len, TOKU_GLOBAL_STATUS);\n  // TODO: Maybe do something with the panic output?\n  if (error == 0) {\n    assert_always(num_rows <= toku_global_status_max_rows);\n    // TODO: Maybe enable some of the items here: (copied from engine status\n\n    // TODO: (optionally) add redzone state, panic, panic string, etc.\n    // Right now it's being ignored.\n\n    for (uint64_t row = 0; row < num_rows; row++) {\n      SHOW_VAR &status_var = toku_global_status_variables[row];\n      TOKU_ENGINE_STATUS_ROW_S &status_row = toku_global_status_rows[row];\n\n      status_var.name = status_row.columnname;\n      status_var.scope = SHOW_SCOPE_GLOBAL;\n      switch (status_row.type) {\n        case FS_STATE:\n        case UINT64:\n          status_var.type = SHOW_LONGLONG;\n          status_var.value = (char *)&status_row.value.num;\n          break;\n        case CHARSTR:\n          status_var.type = SHOW_CHAR;\n          status_var.value = (char *)status_row.value.str;\n          break;\n        case UNIXTIME: {\n          status_var.type = SHOW_CHAR;\n          time_t t = status_row.value.num;\n          char tbuf[26];\n          // Reuse the memory in status_row. (It belongs to us).\n          snprintf(status_row.value.datebuf, sizeof(status_row.value.datebuf),\n                   \"%.24s\", ctime_r(&t, tbuf));\n          status_var.value = (char *)&status_row.value.datebuf[0];\n          break;\n        }\n        case TOKUTIME:\n          status_var.type = SHOW_DOUBLE;\n          // Reuse the memory in status_row. (It belongs to us).\n          status_row.value.dnum = tokutime_to_seconds(status_row.value.num);\n          status_var.value = (char *)&status_row.value.dnum;\n          break;\n        case PARCOUNT: {\n          status_var.type = SHOW_LONGLONG;\n          uint64_t v = read_partitioned_counter(status_row.value.parcount);\n          // Reuse the memory in status_row. (It belongs to us).\n          status_row.value.num = v;\n          status_var.value = (char *)&status_row.value.num;\n          break;\n        }\n        case DOUBLE:\n          status_var.type = SHOW_DOUBLE;\n          status_var.value = (char *)&status_row.value.dnum;\n          break;\n        default:\n          status_var.type = SHOW_CHAR;\n          // Reuse the memory in status_row.datebuf. (It belongs to\n          // us). UNKNOWN TYPE: %d fits in 26 bytes (sizeof datebuf)\n          // for any integer.\n          snprintf(status_row.value.datebuf, sizeof(status_row.value.datebuf),\n                   \"UNKNOWN TYPE: %d\", status_row.type);\n          status_var.value = (char *)&status_row.value.datebuf[0];\n          break;\n      }\n    }\n    // Sentinel value at end.\n    toku_global_status_variables[num_rows].scope = SHOW_SCOPE_GLOBAL;\n    toku_global_status_variables[num_rows].type = SHOW_LONG;\n    toku_global_status_variables[num_rows].value = (char *)NullS;\n    toku_global_status_variables[num_rows].name = (char *)NullS;\n\n    var->type = SHOW_ARRAY;\n    var->value = (char *)toku_global_status_variables;\n    var->scope = SHOW_SCOPE_GLOBAL;\n  }\n  if (error) {\n    set_my_errno(error);\n  }\n  TOKUDB_DBUG_RETURN(error);\n}\n\nstatic SHOW_VAR toku_global_status_variables_export[] = {\n    {\"Tokudb\", (char *)&show_tokudb_vars, SHOW_FUNC, SHOW_SCOPE_GLOBAL},\n    {NullS, NullS, SHOW_LONG, SHOW_SCOPE_GLOBAL}};\n\nmysql_declare_plugin(tokudb){\n    MYSQL_STORAGE_ENGINE_PLUGIN,\n    &tokudb_storage_engine,\n    tokudb_hton_name,\n    \"Percona\",\n    \"Percona TokuDB Storage Engine with Fractal Tree(tm) Technology\",\n    PLUGIN_LICENSE_GPL,\n    tokudb_init_func, /* plugin init */\n    nullptr,          /* plugin check uninstall */\n    tokudb_done_func, /* plugin deinit */\n    TOKUDB_PLUGIN_VERSION,\n    toku_global_status_variables_export, /* status variables */\n    tokudb::sysvars::system_variables,   /* system variables */\n    NULL,                                /* config options */\n    0,                                   /* flags */\n},\n    tokudb::information_schema::trx, tokudb::information_schema::lock_waits,\n    tokudb::information_schema::locks, tokudb::information_schema::file_map,\n    tokudb::information_schema::fractal_tree_info,\n    tokudb::information_schema::fractal_tree_block_map,\n    tokudb::information_schema::background_job_status mysql_declare_plugin_end;\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/router/src/plugin_info/src/library_file.cc": "/*\n  Copyright (c) 2017, 2018, Oracle and/or its affiliates. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License, version 2.0,\n  as published by the Free Software Foundation.\n\n  This program is also distributed with certain software (including\n  but not limited to OpenSSL) that is licensed under separate terms,\n  as designated in a particular file or component or in included license\n  documentation.  The authors of MySQL hereby grant you an additional\n  permission to link the program and your derivative works with the\n  separately licensed software that they have included with MySQL.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#include \"library_file.h\"\n\n#include \"my_config.h\"\n\n#include <stdexcept>\n\n#ifndef _WIN32\n#include <dlfcn.h>\n#include <unistd.h>\n#else\n#include <Windows.h>\n#include \"mysql/harness/filesystem.h\"\n#endif\n\n#define USE_DLCLOSE 1\n\n// disable dlclose() when built with lsan\n//\n// clang has __has_feature(address_sanitizer)\n// gcc has __SANITIZE_ADDRESS__\n#if defined(__has_feature)\n#if __has_feature(address_sanitizer)\n#undef USE_DLCLOSE\n#define USE_DLCLOSE 0\n#endif\n#endif\n\n#if defined(__SANITIZE_ADDRESS__) && __SANITIZE_ADDRESS__ == 1\n#undef USE_DLCLOSE\n#define USE_DLCLOSE 0\n#endif\n\n// dlopen/dlclose work differently on Alpine\n#if defined(LINUX_ALPINE)\n#undef USE_DLCLOSE\n#define USE_DLCLOSE 0\n#endif\n\nstruct Library_file::Library_file_impl {\n#ifndef _WIN32\n  void *handle;\n#else\n  HMODULE handle;\n#endif\n};\n\n#ifdef _WIN32\nnamespace {\nvoid throw_current_error(const std::string &prefix) {\n  char buffer[512];\n  FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_MAX_WIDTH_MASK,\n                nullptr, GetLastError(), LANG_NEUTRAL, buffer, sizeof(buffer),\n                nullptr);\n  throw std::runtime_error(prefix + buffer);\n}\n}  // namespace\n#endif\n\nLibrary_file::Library_file(const std::string &file_name,\n                           const std::string &plugin_name)\n    : impl_(new Library_file_impl()),\n      plugin_name_(plugin_name),\n      file_name_(file_name) {\n#ifndef _WIN32\n  impl_->handle = dlopen(file_name.c_str(), RTLD_LOCAL | RTLD_LAZY);\n  if (impl_->handle == nullptr) {\n    throw std::runtime_error(\"Could not load plugin file: \" + file_name +\n                             \". Error: \" + dlerror());\n  }\n#else\n  mysql_harness::Path lib_file(file_name);\n  // we need to do this so all the dlls that plugin library needs could be found\n  auto res = SetCurrentDirectory(lib_file.dirname().c_str());\n  if (!res) {\n    throw_current_error(\"Could not switch directory to \" +\n                        lib_file.dirname().str() + \": \");\n  }\n  impl_->handle = LoadLibrary(lib_file.real_path().c_str());\n  if (impl_->handle == nullptr) {\n    throw_current_error(\"Could not load plugin file: \" + file_name + \". \");\n  }\n#endif\n}\n\nuint32_t Library_file::get_abi_version() const {\n  Plugin_abi *plugin = get_plugin_struct<Plugin_abi>(plugin_name_);\n\n  return plugin->abi_version;\n}\n\ntemplate <class T>\nT *Library_file::get_plugin_struct(const std::string &symbol) const {\n  // In the older MySQLRouter releases some plugins did not use harness_plugin_\n  // prefix for the plugin structure name. So we check harness_plugin_xxx and\n  // then xxx if the first check failed.\n\n  T *result{nullptr};\n  try {\n    result = get_plugin_struct_internal<T>(\"harness_plugin_\" + symbol);\n  } catch (const std::runtime_error &) {\n    result = get_plugin_struct_internal<T>(plugin_name_);\n  }\n\n  return result;\n}\n\ntemplate <class T>\nT *Library_file::get_plugin_struct_internal(const std::string &symbol) const {\n  T *result{nullptr};\n\n#ifndef _WIN32\n  result = reinterpret_cast<T *>(dlsym(impl_->handle, symbol.c_str()));\n  const char *error = dlerror();\n  if (error) {\n    throw std::runtime_error(\"Loading plugin information for '\" + file_name_ +\n                             \"' failed: \" + error);\n  }\n#else\n  SetLastError(0);\n  result = reinterpret_cast<T *>(GetProcAddress(impl_->handle, symbol.c_str()));\n  DWORD error = GetLastError();\n  if (error) {\n    throw_current_error(\"Loading plugin information for '\" + file_name_ +\n                        \"' failed: \");\n  }\n#endif\n\n  return result;\n}\n\ntemplate Plugin_abi *Library_file::get_plugin_struct<Plugin_abi>(\n    const std::string &) const;\ntemplate Plugin_v1 *Library_file::get_plugin_struct<Plugin_v1>(\n    const std::string &) const;\ntemplate Plugin_abi *Library_file::get_plugin_struct_internal<Plugin_abi>(\n    const std::string &) const;\ntemplate Plugin_v1 *Library_file::get_plugin_struct_internal<Plugin_v1>(\n    const std::string &) const;\n\nLibrary_file::~Library_file() {\n// disable dlclose() if run with address sanitizer to get good memleak reports\n#if USE_DLCLOSE\n#ifndef _WIN32\n  if (impl_->handle) dlclose(impl_->handle);\n#else\n  if (impl_->handle) {\n    FreeLibrary(impl_->handle);\n  }\n#endif\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/router/src/harness/src/dynamic_loader.cc": "/*\n  Copyright (c) 2020, Oracle and/or its affiliates. All rights reserved.\n\n  This program is free software; you can redistribute it and/or modify\n  it under the terms of the GNU General Public License, version 2.0,\n  as published by the Free Software Foundation.\n\n  This program is also distributed with certain software (including\n  but not limited to OpenSSL) that is licensed under separate terms,\n  as designated in a particular file or component or in included license\n  documentation.  The authors of MySQL hereby grant you an additional\n  permission to link the program and your derivative works with the\n  separately licensed software that they have included with MySQL.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program; if not, write to the Free Software\n  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA\n*/\n\n#include \"mysql/harness/dynamic_loader.h\"\n\n#ifdef _WIN32\n#include <Windows.h>  // HMODULE\n#else\n#include <dlfcn.h>  // dlopen\n#endif\n\n#include \"mysql/harness/filesystem.h\"  // Path::make_path\n#include \"mysql/harness/stdx/expected.h\"\n\nusing namespace std::string_literals;\n\n#ifdef _WIN32\nstatic std::error_code last_error_code() {\n  // static_cast<> for the \"conversion from 'DWORD' to 'int' requires a\n  // narrowing conversion\"\n  return {static_cast<int>(GetLastError()), std::system_category()};\n#if 0\n  // currently unused on unix\n  return {errno, std::generic_category()};\n#endif\n}\n#endif\n\nconst char default_library_extension[] =\n#ifdef _WIN32\n    \"dll\"\n#else\n    \"so\"\n#endif\n    ;\n\nnamespace mysql_harness {\n\nconst std::error_category &dynamic_loader_category() noexcept {\n  class category_impl : public std::error_category {\n   public:\n    const char *name() const noexcept override { return \"dl\"; }\n    std::string message(int ev) const override {\n      switch (static_cast<DynamicLoaderErrc>(ev)) {\n        case DynamicLoaderErrc::kDlError:\n          return \"dlerror\";\n      }\n\n      return \"(unrecognized error)\";\n    }\n  };\n\n  static category_impl instance;\n  return instance;\n}\n\nstd::error_code make_error_code(DynamicLoaderErrc e) {\n  return {static_cast<int>(e), dynamic_loader_category()};\n}\n\n#ifdef _WIN32\n/**\n * get filename of a module.\n *\n * @note windows only.\n *\n * @param handle handle to a module\n * @returns filename of success, std::error_code on error.\n */\nstatic stdx::expected<std::string, std::error_code> module_filename(\n    DynamicLibrary::native_handle_type handle) {\n  std::string fn;\n\n  fn.resize(MAX_PATH);\n\n  const auto sz = GetModuleFileName(handle, &fn.front(), fn.size());\n  // fn.size() is buffer with \\0\n  // on success, returns size without trailing \\0\n  if (sz == 0) {\n    return stdx::make_unexpected(last_error_code());\n  } else if (sz == fn.size()) {\n    // truncation\n    return stdx::make_unexpected(\n        std::error_code(ERROR_INSUFFICIENT_BUFFER, std::system_category()));\n  } else {\n    fn.resize(sz);\n    return fn;\n  }\n}\n#endif\n\nstdx::expected<DynamicLibrary, std::error_code> DynamicLoader::load(\n    const std::string &libname) const {\n#ifdef _WIN32\n  if (0 == SetDllDirectory(search_path_.c_str())) {\n    return stdx::make_unexpected(last_error_code());\n  }\n\n  std::string filename = libname + \".\" + default_library_extension;\n\n  const DynamicLibrary::native_handle_type handle =\n      LoadLibrary(filename.c_str());\n  if (handle == nullptr) {\n    return stdx::make_unexpected(last_error_code());\n  }\n\n  if (auto res = module_filename(handle)) {\n    // if the filename can be resolved, use it.\n    filename = std::move(res.value());\n  }\n#else\n  // reset older error in the dl-lib\n  dlerror();\n\n  const std::string filename =\n      mysql_harness::Path::make_path(search_path_, libname,\n                                     default_library_extension)\n          .str();\n\n  const DynamicLibrary::native_handle_type handle =\n      dlopen(filename.c_str(), RTLD_LOCAL | RTLD_NOW);\n  if (handle == nullptr) {\n    error_msg_ = dlerror();\n    return stdx::make_unexpected(make_error_code(DynamicLoaderErrc::kDlError));\n  }\n#endif\n\n  return DynamicLibrary{filename, handle};\n}\n\nstdx::expected<void *, std::error_code> DynamicLibrary::symbol(\n    const std::string &name) const {\n#ifdef _WIN32\n  auto *sym = reinterpret_cast<void *>(GetProcAddress(handle_, name.c_str()));\n  if (sym == nullptr) {\n    return stdx::make_unexpected(last_error_code());\n  }\n#else\n  // as the return-value of dlsym() can be NULL even on success, the dlerror()\n  // must be checked if it is non-null\n  auto *sym = dlsym(handle_, name.c_str());\n\n  auto *error = dlerror();\n  if (error != nullptr) {\n    error_msg_ = error;\n    return stdx::make_unexpected(make_error_code(DynamicLoaderErrc::kDlError));\n  }\n#endif\n\n  return {sym};\n}\n\nvoid DynamicLibrary::unload() {\n#ifdef _WIN32\n  if (handle_ != nullptr) FreeLibrary(handle_);\n#else\n  if (handle_ != nullptr) dlclose(handle_);\n#endif\n  handle_ = nullptr;\n}\n\n}  // namespace mysql_harness\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/include/my_sharedlib.h": "/*\n   Copyright (c) 2016, 2017, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License, version 2.0,\n   as published by the Free Software Foundation.\n\n   This program is also distributed with certain software (including\n   but not limited to OpenSSL) that is licensed under separate terms,\n   as designated in a particular file or component or in included license\n   documentation.  The authors of MySQL hereby grant you an additional\n   permission to link the program and your derivative works with the\n   separately licensed software that they have included with MySQL.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License, version 2.0, for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n#ifndef MY_SHAREDLIB_INCLUDED\n#define MY_SHAREDLIB_INCLUDED\n\n/**\n  @file include/my_sharedlib.h\n  Functions related to handling of plugins and other dynamically loaded\n  libraries.\n*/\n\n#if defined(_WIN32)\n#define dlsym(lib, name) (void *)GetProcAddress((HMODULE)lib, name)\n#define dlopen(libname, unused) LoadLibraryEx(libname, NULL, 0)\n#define dlclose(lib) FreeLibrary((HMODULE)lib)\n#define DLERROR_GENERATE(errmsg, error_number)                          \\\n  char win_errormsg[2048];                                              \\\n  if (FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, error_number, 0,     \\\n                    win_errormsg, 2048, NULL)) {                        \\\n    char *ptr;                                                          \\\n    for (ptr = &win_errormsg[0] + strlen(win_errormsg) - 1;             \\\n         ptr >= &win_errormsg[0] && strchr(\"\\r\\n\\t\\0x20\", *ptr); ptr--) \\\n      *ptr = 0;                                                         \\\n    errmsg = win_errormsg;                                              \\\n  } else                                                                \\\n    errmsg = \"\"\n#define dlerror() \"\"\n#define dlopen_errno GetLastError()\n\n#else /* _WIN32 */\n\n#ifndef MYSQL_ABI_CHECK\n#include <dlfcn.h>\n#include <errno.h>\n#endif\n\n#define DLERROR_GENERATE(errmsg, error_number) errmsg = dlerror()\n#define dlopen_errno errno\n#endif /* _WIN32 */\n\n/*\n  MYSQL_PLUGIN_IMPORT macro is used to export mysqld data\n  (i.e variables) for usage in storage engine loadable plugins.\n  Outside of Windows, it is dummy.\n*/\n#if (defined(_WIN32) && defined(MYSQL_DYNAMIC_PLUGIN))\n#define MYSQL_PLUGIN_IMPORT __declspec(dllimport)\n#else\n#define MYSQL_PLUGIN_IMPORT\n#endif\n\n#endif  // MY_SHAREDLIB_INCLUDED\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/percona-pam-for-mysql/src/dialog.cc": "/*  Copyright (c) 2010, Oracle and/or its affiliates. All rights reserved.\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License as\n    published by the Free Software Foundation; version 2 of the\n    License.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA */\n\n/**\n  @file\n\n  dialog client authentication plugin with examples\n\n  dialog is a general purpose client authentication plugin, it simply\n  asks the user the question, as provided by the server and reports\n  the answer back to the server. No encryption is involved,\n  the answers are sent in clear text.\n\n  Two examples are provided: two_questions server plugin, that asks\n  the password and an \"Are you sure?\" question with a reply \"yes, of course\".\n  It demonstrates the usage of \"password\" (input is hidden) and \"ordinary\"\n  (input can be echoed) questions, and how to mark the last question,\n  to avoid an extra roundtrip.\n\n  And three_attempts plugin that gives the user three attempts to enter\n  a correct password. It shows the situation when a number of questions\n  is not known in advance.\n*/\n#if defined(WIN32) && !defined(RTLD_DEFAULT)\n#define RTLD_DEFAULT GetModuleHandle(NULL)\n#endif\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include \"mysql.h\"\n#include \"mysql/client_plugin.h\"\n#include \"mysql/plugin_auth.h\"\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#if !defined(_GNU_SOURCE)\n#define _GNU_SOURCE /* for RTLD_DEFAULT */\n#endif\n\n/**\n  first byte of the question string is the question \"type\".\n  It can be an \"ordinary\" or a \"password\" question.\n  The last bit set marks a last question in the authentication exchange.\n*/\n#define ORDINARY_QUESTION \"\\2\"\n#define LAST_QUESTION \"\\3\"\n#define PASSWORD_QUESTION \"\\4\"\n#define LAST_PASSWORD \"\\5\"\n\n/********************* SERVER SIDE ****************************************/\n\n/**\n  dialog demo with two questions, one password and one, the last, ordinary.\n*/\nstatic int two_questions(MYSQL_PLUGIN_VIO *vio, MYSQL_SERVER_AUTH_INFO *info) {\n  /* send a password question */\n  if (vio->write_packet(\n          vio,\n          (const unsigned char *)PASSWORD_QUESTION \"Password, please:\", 18))\n    return CR_ERROR;\n\n  /* read the answer */\n  unsigned char *pkt;\n  int pkt_len = vio->read_packet(vio, &pkt);\n  if (pkt_len < 0) return CR_ERROR;\n\n  info->password_used = PASSWORD_USED_YES;\n\n  /* fail if the password is wrong */\n  if (strcmp((const char *)pkt, info->auth_string)) return CR_ERROR;\n\n  /* send the last, ordinary, question */\n  if (vio->write_packet(\n          vio, (const unsigned char *)LAST_QUESTION \"Are you sure ?\", 15))\n    return CR_ERROR;\n\n  /* read the answer */\n  if ((pkt_len = vio->read_packet(vio, &pkt)) < 0) return CR_ERROR;\n\n  /* check the reply */\n  return strcmp((const char *)pkt, \"yes, of course\") ? CR_ERROR : CR_OK;\n}\n\nstatic struct st_mysql_auth two_handler = {\n    MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n    \"dialog\", /* requires dialog client plugin */\n    two_questions,\n    nullptr,\n    nullptr,\n    nullptr,\n    0UL,\n    nullptr};\n\n/* dialog demo where the number of questions is not known in advance */\nstatic int three_attempts(MYSQL_PLUGIN_VIO *vio, MYSQL_SERVER_AUTH_INFO *info) {\n  for (int i = 0; i < 3; i++) {\n    /* send the prompt */\n    if (vio->write_packet(\n            vio,\n            (const unsigned char *)PASSWORD_QUESTION \"Password, please:\", 18))\n      return CR_ERROR;\n\n    /* read the password */\n    unsigned char *pkt;\n    int pkt_len = vio->read_packet(vio, &pkt);\n    if (pkt_len < 0) return CR_ERROR;\n\n    info->password_used = PASSWORD_USED_YES;\n\n    /*\n      finish, if the password is correct.\n      note, that we did not mark the prompt packet as \"last\"\n    */\n    if (strcmp((const char *)pkt, info->auth_string) == 0) return CR_OK;\n  }\n\n  return CR_ERROR;\n}\n\nstatic struct st_mysql_auth three_handler = {\n    MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n    \"dialog\", /* requires dialog client plugin */\n    three_attempts,\n    nullptr,\n    nullptr,\n    nullptr,\n    0UL,\n    nullptr};\n\nmysql_declare_plugin(dialog){\n    MYSQL_AUTHENTICATION_PLUGIN,\n    &two_handler,\n    \"two_questions\",\n    \"Sergei Golubchik\",\n    \"Dialog plugin demo 1\",\n    PLUGIN_LICENSE_GPL,\n    nullptr,\n    nullptr,\n    nullptr,\n    0x0100,\n    nullptr,\n    nullptr,\n    nullptr,\n    0,\n},\n    {\n        MYSQL_AUTHENTICATION_PLUGIN,\n        &three_handler,\n        \"three_attempts\",\n        \"Sergei Golubchik\",\n        \"Dialog plugin demo 2\",\n        PLUGIN_LICENSE_GPL,\n        nullptr,\n        nullptr,\n        nullptr,\n        0x0100,\n        nullptr,\n        nullptr,\n        nullptr,\n        0,\n    } mysql_declare_plugin_end;\n\n/********************* CLIENT SIDE ***************************************/\n/*\n  This plugin performs a dialog with the user, asking questions and\n  reading answers. Depending on the client it may be desirable to do it\n  using GUI, or console, with or without curses, or read answers\n  from a smartcard, for example.\n\n  To support all this variety, the dialog plugin has a callback function\n  \"authentication_dialog_ask\". If the client has a function of this name\n  dialog plugin will use it for communication with the user. Otherwise\n  a default fgets() based implementation will be used.\n*/\n\n/**\n  type of the mysql_authentication_dialog_ask function\n\n  @param mysql          mysql\n  @param type           type of the input\n                        1 - ordinary string input\n                        2 - password string\n  @param prompt         prompt\n  @param buf            a buffer to store the use input\n  @param buf_len        the length of the buffer\n\n  @retval               a pointer to the user input string.\n                        It may be equal to 'buf' or to 'mysql->password'.\n                        In all other cases it is assumed to be an allocated\n                        string, and the \"dialog\" plugin will free() it.\n*/\ntypedef char *(*mysql_authentication_dialog_ask_t)(MYSQL *mysql, int type,\n                                                   const char *prompt,\n                                                   char *buf, int buf_len);\n\nstatic mysql_authentication_dialog_ask_t ask;\n\nstatic char *builtin_ask(MYSQL *mysql MY_ATTRIBUTE((unused)),\n                         int type MY_ATTRIBUTE((unused)), const char *prompt,\n                         char *buf, int buf_len) {\n  if (type == 2) /* password */\n  {\n    char *const password = get_tty_password(prompt);\n    strncpy(buf, password, buf_len - 1);\n    buf[buf_len - 1] = 0;\n    free(password);\n  } else {\n    if (!fgets(buf, buf_len - 1, stdin))\n      buf[0] = 0;\n    else {\n      const int len = strlen(buf);\n      if (len && buf[len - 1] == '\\n') buf[len - 1] = 0;\n    }\n  }\n\n  return buf;\n}\n\n/**\n  The main function of the dialog plugin.\n\n  Read the prompt, ask the question, send the reply, repeat until\n  the server is satisfied.\n\n  @note\n   1. this plugin shows how a client authentication plugin\n      may read a MySQL protocol OK packet internally - which is important\n      where a number of packets is not known in advance.\n   2. the first byte of the prompt is special. it is not\n      shown to the user, but signals whether it is the last question\n      (prompt[0] & 1 == 1) or not last (prompt[0] & 1 == 0),\n      and whether the input is a password (not echoed).\n   3. the prompt is expected to be sent zero-terminated\n*/\nstatic int perform_dialog(MYSQL_PLUGIN_VIO *vio, MYSQL *mysql) {\n  unsigned char cmd = 0;\n  char reply_buf[1024];\n  bool first = true;\n\n  do {\n    /* read the prompt */\n    unsigned char *pkt;\n    int pkt_len = vio->read_packet(vio, &pkt);\n    if (pkt_len < 0) return CR_ERROR;\n\n    char *reply;\n    if (pkt == nullptr && first) {\n      /*\n        in mysql_change_user() the client sends the first packet, so\n        the first vio->read_packet() does nothing (pkt == 0).\n\n        We send the \"password\", assuming the client knows what it's doing.\n        (in other words, the dialog plugin should be only set as a default\n        authentication plugin on the client if the first question\n        asks for a password - which will be sent in clear text, by the way)\n      */\n      reply = mysql->passwd;\n    } else {\n      cmd = *pkt++;\n\n      /* is it MySQL protocol packet ? */\n      if (cmd == 0 || cmd == 254)\n        return CR_OK_HANDSHAKE_COMPLETE; /* yes. we're done */\n\n      /*\n        asking for a password in the first packet mean mysql->password, if it's\n        set otherwise we ask the user and read the reply\n      */\n      if ((cmd >> 1) == 2 && first && mysql->passwd[0])\n        reply = mysql->passwd;\n      else\n        reply = ask(mysql, cmd >> 1, (const char *)pkt, reply_buf,\n                    sizeof(reply_buf));\n      if (!reply) return CR_ERROR;\n    }\n    /* send the reply to the server */\n    const int res =\n        vio->write_packet(vio, (const unsigned char *)reply, strlen(reply) + 1);\n\n    if (reply != mysql->passwd && reply != reply_buf) free(reply);\n\n    if (res) return CR_ERROR;\n\n    /* repeat unless it was the last question */\n    first = false;\n  } while ((cmd & 1) != 1);\n\n  /* the job of reading the ok/error packet is left to the server */\n  return CR_OK;\n}\n\n/**\n  initialization function of the dialog plugin\n\n  Pick up the client's authentication_dialog_ask() function, if exists,\n  or fall back to the default implementation.\n*/\n\nstatic int init_dialog(char *unused1 MY_ATTRIBUTE((unused)),\n                       size_t unused2 MY_ATTRIBUTE((unused)),\n                       int unused3 MY_ATTRIBUTE((unused)),\n                       va_list unused4 MY_ATTRIBUTE((unused))) {\n  void *sym = dlsym(RTLD_DEFAULT, \"mysql_authentication_dialog_ask\");\n  ask = sym ? (mysql_authentication_dialog_ask_t)sym : builtin_ask;\n  return 0;\n}\n\nmysql_declare_client_plugin(AUTHENTICATION) \"dialog\", \"Sergei Golubchik\",\n    \"Dialog Client Authentication Plugin\", {0, 1, 0}, \"GPL\",\n    nullptr, init_dialog, nullptr, nullptr, perform_dialog,\n    nullptr mysql_end_client_plugin;\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/auth/dialog.cc": "/*  Copyright (c) 2010, 2020, Oracle and/or its affiliates. All rights reserved.\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License, version 2.0,\n    as published by the Free Software Foundation.\n\n    This program is also distributed with certain software (including\n    but not limited to OpenSSL) that is licensed under separate terms,\n    as designated in a particular file or component or in included license\n    documentation.  The authors of MySQL hereby grant you an additional\n    permission to link the program and your derivative works with the\n    separately licensed software that they have included with MySQL.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License, version 2.0, for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/**\n  @file\n\n  dialog client authentication plugin with examples\n\n  dialog is a general purpose client authentication plugin, it simply\n  asks the user the question, as provided by the server and reports\n  the answer back to the server. No encryption is involved,\n  the answers are sent in clear text.\n\n  Two examples are provided: two_questions server plugin, that asks\n  the password and an \"Are you sure?\" question with a reply \"yes, of course\".\n  It demonstrates the usage of \"password\" (input is hidden) and \"ordinary\"\n  (input can be echoed) questions, and how to mark the last question,\n  to avoid an extra roundtrip.\n\n  And three_attempts plugin that gives the user three attempts to enter\n  a correct password. It shows the situation when a number of questions\n  is not known in advance.\n*/\n#include \"my_config.h\"\n\n#if defined(WIN32) && !defined(RTLD_DEFAULT)\n#define RTLD_DEFAULT GetModuleHandle(NULL)\n#endif\n\n#include <mysql.h>\n#include <mysql/client_plugin.h>\n#include <mysql/plugin_auth.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include \"my_compiler.h\"\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#if !defined(_GNU_SOURCE)\n#define _GNU_SOURCE /* for RTLD_DEFAULT */\n#endif\n\n/**\n  first byte of the question string is the question \"type\".\n  It can be an \"ordinary\" or a \"password\" question.\n  The last bit set marks a last question in the authentication exchange.\n*/\n#define ORDINARY_QUESTION \"\\2\"\n#define LAST_QUESTION \"\\3\"\n#define PASSWORD_QUESTION \"\\4\"\n#define LAST_PASSWORD \"\\5\"\n\n/********************* SERVER SIDE ****************************************/\n\n/**\n  dialog demo with two questions, one password and one, the last, ordinary.\n*/\nstatic int two_questions(MYSQL_PLUGIN_VIO *vio, MYSQL_SERVER_AUTH_INFO *info) {\n  unsigned char *pkt;\n  int pkt_len;\n\n  /* send a password question */\n  if (vio->write_packet(\n          vio,\n          (const unsigned char *)PASSWORD_QUESTION \"Password, please:\", 18))\n    return CR_ERROR;\n\n  /* read the answer */\n  if ((pkt_len = vio->read_packet(vio, &pkt)) < 0) return CR_ERROR;\n\n  info->password_used = PASSWORD_USED_YES;\n\n  /* fail if the password is wrong */\n  if (strcmp((const char *)pkt, info->auth_string)) return CR_ERROR;\n\n  /* send the last, ordinary, question */\n  if (vio->write_packet(\n          vio, (const unsigned char *)LAST_QUESTION \"Are you sure ?\", 15))\n    return CR_ERROR;\n\n  /* read the answer */\n  if ((pkt_len = vio->read_packet(vio, &pkt)) < 0) return CR_ERROR;\n\n  /* check the reply */\n  return strcmp((const char *)pkt, \"yes, of course\") ? CR_ERROR : CR_OK;\n}\n\nstatic int generate_auth_string_hash(char *outbuf, unsigned int *buflen,\n                                     const char *inbuf, unsigned int inbuflen) {\n  /*\n    if buffer specified by server is smaller than the buffer given\n    by plugin then return error\n  */\n  if (*buflen < inbuflen) return 1;\n  strncpy(outbuf, inbuf, inbuflen);\n  *buflen = strlen(inbuf);\n  return 0;\n}\n\nstatic int validate_auth_string_hash(char *const inbuf MY_ATTRIBUTE((unused)),\n                                     unsigned int buflen\n                                         MY_ATTRIBUTE((unused))) {\n  return 0;\n}\n\nstatic int set_salt(const char *password MY_ATTRIBUTE((unused)),\n                    unsigned int password_len MY_ATTRIBUTE((unused)),\n                    unsigned char *salt MY_ATTRIBUTE((unused)),\n                    unsigned char *salt_len) {\n  *salt_len = 0;\n  return 0;\n}\n\nstatic struct st_mysql_auth two_handler = {\n    MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n    \"dialog\", /* requires dialog client plugin */\n    two_questions,\n    generate_auth_string_hash,\n    validate_auth_string_hash,\n    set_salt,\n    AUTH_FLAG_PRIVILEGED_USER_FOR_PASSWORD_CHANGE,\n    nullptr};\n\n/* dialog demo where the number of questions is not known in advance */\nstatic int three_attempts(MYSQL_PLUGIN_VIO *vio, MYSQL_SERVER_AUTH_INFO *info) {\n  unsigned char *pkt;\n  int pkt_len, i;\n\n  for (i = 0; i < 3; i++) {\n    /* send the prompt */\n    if (vio->write_packet(\n            vio,\n            (const unsigned char *)PASSWORD_QUESTION \"Password, please:\", 18))\n      return CR_ERROR;\n\n    /* read the password */\n    if ((pkt_len = vio->read_packet(vio, &pkt)) < 0) return CR_ERROR;\n\n    info->password_used = PASSWORD_USED_YES;\n\n    /*\n      finish, if the password is correct.\n      note, that we did not mark the prompt packet as \"last\"\n    */\n    if (strcmp((const char *)pkt, info->auth_string) == 0) return CR_OK;\n  }\n\n  return CR_ERROR;\n}\n\nstatic struct st_mysql_auth three_handler = {\n    MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n    \"dialog\", /* requires dialog client plugin */\n    three_attempts,\n    generate_auth_string_hash,\n    validate_auth_string_hash,\n    set_salt,\n    AUTH_FLAG_PRIVILEGED_USER_FOR_PASSWORD_CHANGE,\n    nullptr};\n\nmysql_declare_plugin(dialog){\n    MYSQL_AUTHENTICATION_PLUGIN,\n    &two_handler,\n    \"two_questions\",\n    PLUGIN_AUTHOR_ORACLE,\n    \"Dialog plugin demo 1\",\n    PLUGIN_LICENSE_GPL,\n    nullptr, /* Init */\n    nullptr, /* Check uninstall */\n    nullptr, /* Deinit */\n    0x0101,\n    nullptr,\n    nullptr,\n    nullptr,\n    0,\n},\n    {\n        MYSQL_AUTHENTICATION_PLUGIN,\n        &three_handler,\n        \"three_attempts\",\n        \"Sergei Golubchik\",\n        \"Dialog plugin demo 2\",\n        PLUGIN_LICENSE_GPL,\n        nullptr, /* Init */\n        nullptr, /* Check uninstall */\n        nullptr, /* Deinit */\n        0x0101,\n        nullptr,\n        nullptr,\n        nullptr,\n        0,\n    } mysql_declare_plugin_end;\n\n/********************* CLIENT SIDE ***************************************/\n/*\n  This plugin performs a dialog with the user, asking questions and\n  reading answers. Depending on the client it may be desirable to do it\n  using GUI, or console, with or without curses, or read answers\n  from a smartcard, for example.\n\n  To support all this variety, the dialog plugin has a callback function\n  \"authentication_dialog_ask\". If the client has a function of this name\n  dialog plugin will use it for communication with the user. Otherwise\n  a default fgets() based implementation will be used.\n*/\n\n/**\n  type of the mysql_authentication_dialog_ask function\n\n  @param mysql          mysql\n  @param type           type of the input\n                        1 - ordinary string input\n                        2 - password string\n  @param prompt         prompt\n  @param buf            a buffer to store the use input\n  @param buf_len        the length of the buffer\n\n  @retval               a pointer to the user input string.\n                        It may be equal to 'buf' or to 'mysql->password'.\n                        In all other cases it is assumed to be an allocated\n                        string, and the \"dialog\" plugin will free() it.\n*/\ntypedef char *(*mysql_authentication_dialog_ask_t)(MYSQL *mysql, int type,\n                                                   const char *prompt,\n                                                   char *buf, int buf_len);\n\nstatic mysql_authentication_dialog_ask_t ask;\n\nstatic char *builtin_ask(MYSQL *mysql MY_ATTRIBUTE((unused)),\n                         int type MY_ATTRIBUTE((unused)), const char *prompt,\n                         char *buf, int buf_len) {\n  char *ptr;\n  fputs(prompt, stdout);\n  fputc(' ', stdout);\n  if (fgets(buf, buf_len, stdin) == nullptr) return nullptr;\n  if ((ptr = strchr(buf, '\\n'))) *ptr = 0;\n\n  return buf;\n}\n\n/**\n  The main function of the dialog plugin.\n\n  Read the prompt, ask the question, send the reply, repeat until\n  the server is satisfied.\n\n  @note\n   1. this plugin shows how a client authentication plugin\n      may read a MySQL protocol OK packet internally - which is important\n      where a number of packets is not known in advance.\n   2. the first byte of the prompt is special. it is not\n      shown to the user, but signals whether it is the last question\n      (prompt[0] & 1 == 1) or not last (prompt[0] & 1 == 0),\n      and whether the input is a password (not echoed).\n   3. the prompt is expected to be sent zero-terminated\n*/\nstatic int perform_dialog(MYSQL_PLUGIN_VIO *vio, MYSQL *mysql) {\n  unsigned char *pkt, cmd = 0;\n  int pkt_len, res;\n  char reply_buf[1024], *reply;\n\n  do {\n    /* read the prompt */\n    pkt_len = vio->read_packet(vio, &pkt);\n    if (pkt_len < 0) return CR_ERROR;\n\n    if (pkt == nullptr) {\n      /*\n        in mysql_change_user() the client sends the first packet, so\n        the first vio->read_packet() does nothing (pkt == 0).\n\n        We send the \"password\", assuming the client knows what it's doing.\n        (in other words, the dialog plugin should be only set as a default\n        authentication plugin on the client if the first question\n        asks for a password - which will be sent in clear text, by the way)\n      */\n      reply = mysql->passwd;\n    } else {\n      cmd = *pkt++;\n\n      /* is it MySQL protocol packet ? */\n      if (cmd == 0 || cmd == 254)\n        return CR_OK_HANDSHAKE_COMPLETE; /* yes. we're done */\n\n      /*\n        asking for a password with an empty prompt means mysql->password\n        otherwise we ask the user and read the reply\n      */\n      if ((cmd >> 1) == 2 && *pkt == 0)\n        reply = mysql->passwd;\n      else\n        reply = ask(mysql, cmd >> 1, (const char *)pkt, reply_buf,\n                    sizeof(reply_buf));\n      if (!reply) return CR_ERROR;\n    }\n    /* send the reply to the server */\n    res = vio->write_packet(vio, (const unsigned char *)reply,\n                            (int)strlen(reply) + 1);\n\n    if (reply != mysql->passwd && reply != reply_buf) free(reply);\n\n    if (res) return CR_ERROR;\n\n    /* repeat unless it was the last question */\n  } while ((cmd & 1) != 1);\n\n  /* the job of reading the ok/error packet is left to the server */\n  return CR_OK;\n}\n\n/**\n  initialization function of the dialog plugin\n\n  Pick up the client's authentication_dialog_ask() function, if exists,\n  or fall back to the default implementation.\n*/\n\nstatic int init_dialog(char *unused1 MY_ATTRIBUTE((unused)),\n                       size_t unused2 MY_ATTRIBUTE((unused)),\n                       int unused3 MY_ATTRIBUTE((unused)),\n                       va_list unused4 MY_ATTRIBUTE((unused))) {\n  void *sym = dlsym(RTLD_DEFAULT, \"mysql_authentication_dialog_ask\");\n  ask = sym ? (mysql_authentication_dialog_ask_t)sym : builtin_ask;\n  return 0;\n}\n\nmysql_declare_client_plugin(AUTHENTICATION) \"dialog\",\n    MYSQL_CLIENT_PLUGIN_AUTHOR_ORACLE, \"Dialog Client Authentication Plugin\",\n    {0, 1, 0}, \"GPL\", nullptr, init_dialog, nullptr, nullptr, perform_dialog,\n    nullptr mysql_end_client_plugin;\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/innodb_memcached/daemon_memcached/daemon/memcached.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n/*\n *  memcached - memory caching daemon\n *\n *       http://www.danga.com/memcached/\n *  Copyright (c) 2015, 2016, Oracle and/or its affiliates. All rights reserved.\n *  Copyright 2003 Danga Interactive, Inc.  All rights reserved.\n *  This file was modified by Oracle on 28-08-2015 and 23-03-2016.\n *  Modifications copyright (c) 2015, 2016, Oracle and/or its affiliates.\n *  All rights reserved.\n *\n *  Use and distribution licensed under the BSD license.  See\n *  the LICENSE file for full text.\n *\n *  Authors:\n *      Anatoly Vorobey <mellon@pobox.com>\n *      Brad Fitzpatrick <brad@danga.com>\n *\n *  Copyright (c) 2011, 2016, Oracle and/or its affiliates. All rights reserved.\n */\n#include \"config.h\"\n#include \"config_static.h\"\n#include \"memcached.h\"\n#include \"memcached/extension_loggers.h\"\n#include \"utilities/engine_loader.h\"\n\n#include <signal.h>\n#include <getopt.h>\n#include <fcntl.h>\n#include <errno.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n#include <assert.h>\n#include <limits.h>\n#include <ctype.h>\n#include <stdarg.h>\n#include <stddef.h>\n#include <dlfcn.h>\n\n#include \"memcached_mysql.h\"\n\n#define INNODB_MEMCACHED\nvoid my_thread_init();\nvoid my_thread_end();\n\nstatic inline void item_set_cas(const void *cookie, item *it, uint64_t cas) {\n    settings.engine.v1->item_set_cas(settings.engine.v0, cookie, it, cas);\n}\n\n/* The item must always be called \"it\" */\n#define SLAB_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->slab_stats[info.clsid].slab_op++;\n\n#define THREAD_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->thread_op++;\n\n#define THREAD_GUTS2(conn, thread_stats, slab_op, thread_op) \\\n    thread_stats->slab_op++; \\\n    thread_stats->thread_op++;\n\n#define SLAB_THREAD_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    SLAB_GUTS(conn, thread_stats, slab_op, thread_op) \\\n    THREAD_GUTS(conn, thread_stats, slab_op, thread_op)\n\n#define STATS_INCR1(GUTS, conn, slab_op, thread_op, key, nkey) { \\\n    struct independent_stats *independent_stats = get_independent_stats(conn); \\\n    struct thread_stats *thread_stats = \\\n        &independent_stats->thread_stats[conn->thread->index]; \\\n    topkeys_t *topkeys = independent_stats->topkeys; \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    GUTS(conn, thread_stats, slab_op, thread_op); \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n    TK(topkeys, slab_op, key, nkey, current_time); \\\n}\n\n#define STATS_INCR(conn, op, key, nkey) \\\n    STATS_INCR1(THREAD_GUTS, conn, op, op, key, nkey)\n\n#define SLAB_INCR(conn, op, key, nkey) \\\n    STATS_INCR1(SLAB_GUTS, conn, op, op, key, nkey)\n\n#define STATS_TWO(conn, slab_op, thread_op, key, nkey) \\\n    STATS_INCR1(THREAD_GUTS2, conn, slab_op, thread_op, key, nkey)\n\n#define SLAB_TWO(conn, slab_op, thread_op, key, nkey) \\\n    STATS_INCR1(SLAB_THREAD_GUTS, conn, slab_op, thread_op, key, nkey)\n\n#define STATS_HIT(conn, op, key, nkey) \\\n    SLAB_TWO(conn, op##_hits, cmd_##op, key, nkey)\n\n#define STATS_MISS(conn, op, key, nkey) \\\n    STATS_TWO(conn, op##_misses, cmd_##op, key, nkey)\n\n#if defined(HAVE_GCC_SYNC_BUILTINS)\n\n#define STATS_NOKEY(conn, op)\t\\\ndo { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n\t__sync_add_and_fetch(&thread_stats->op, 1); \\\n} while (0)\n\n#define STATS_NOKEY2(conn, op1, op2)\t\\\ndo { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n\t__sync_add_and_fetch(&thread_stats->op1, 1); \\\n\t__sync_add_and_fetch(&thread_stats->op2, 1); \\\n} while (0)\n\n#define STATS_ADD(conn, op, amt)\t\\\ndo { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n\t__sync_add_and_fetch(&thread_stats->op, amt); \\\n} while (0)\n\n#define MEMCACHED_ATOMIC_MSG\t\"InnoDB MEMCACHED: Memcached uses atomic increment \\n\"\n\n#else /* HAVE_GCC_SYNC_BUILTINS */\n#define STATS_NOKEY(conn, op) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op++; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define STATS_NOKEY2(conn, op1, op2) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op1++; \\\n    thread_stats->op2++; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define STATS_ADD(conn, op, amt) { \\\n    struct thread_stats *thread_stats = \\\n        get_thread_stats(conn); \\\n    pthread_mutex_lock(&thread_stats->mutex); \\\n    thread_stats->op += amt; \\\n    pthread_mutex_unlock(&thread_stats->mutex); \\\n}\n\n#define MEMCACHED_ATOMIC_MSG\t\"InnoDB Memcached: Memcached DOES NOT use atomic increment\"\n#endif /* HAVE_GCC_SYNC_BUILTINS */\n\nvolatile sig_atomic_t memcached_shutdown;\nvolatile sig_atomic_t memcached_initialized;\n\n/*\n * We keep the current time of day in a global variable that's updated by a\n * timer event. This saves us a bunch of time() system calls (we really only\n * need to get the time once a second, whereas there can be tens of thousands\n * of requests a second) and allows us to use server-start-relative timestamps\n * rather than absolute UNIX timestamps, a space savings on systems where\n * sizeof(time_t) > sizeof(unsigned int).\n */\nvolatile rel_time_t current_time;\n\n/*\n * forward declarations\n */\nstatic SOCKET new_socket(struct addrinfo *ai);\nstatic int try_read_command(conn *c);\nstatic inline struct independent_stats *get_independent_stats(conn *c);\nstatic inline struct thread_stats *get_thread_stats(conn *c);\nstatic void register_callback(ENGINE_HANDLE *eh,\n                              ENGINE_EVENT_TYPE type,\n                              EVENT_CALLBACK cb, const void *cb_data);\nenum try_read_result {\n    READ_DATA_RECEIVED,\n    READ_NO_DATA_RECEIVED,\n    READ_ERROR,            /** an error occurred (on the socket) (or client closed connection) */\n    READ_MEMORY_ERROR      /** failed to allocate more memory */\n};\n\nstatic enum try_read_result try_read_network(conn *c);\nstatic enum try_read_result try_read_udp(conn *c);\n\n/* stats */\nstatic void stats_init(void);\nstatic void server_stats(ADD_STAT add_stats, conn *c, bool aggregate);\nstatic void process_stat_settings(ADD_STAT add_stats, void *c);\n\n\n/* defaults */\nstatic void settings_init(void);\n\n/* event handling, network IO */\nstatic void event_handler(const int fd, const short which, void *arg);\nstatic void complete_nread(conn *c);\nstatic char *process_command(conn *c, char *command);\nstatic void write_and_free(conn *c, char *buf, int bytes);\nstatic int ensure_iov_space(conn *c);\nstatic int add_iov(conn *c, const void *buf, int len);\nstatic int add_msghdr(conn *c);\n\n\n/* time handling */\nstatic void set_current_time(void);  /* update the global variable holding\n                              global 32-bit seconds-since-start time\n                              (to avoid 64 bit time_t) */\n\n/** exported globals **/\nstruct stats stats;\nstruct settings settings;\nstatic time_t process_started;     /* when the process was started */\n\n/** file scope variables **/\nstatic conn *listen_conn = NULL;\nstatic int  udp_socket[100];\nstatic int  num_udp_socket;\nstatic struct event_base *main_base;\nstatic struct independent_stats *default_independent_stats;\n\nstatic struct engine_event_handler *engine_event_handlers[MAX_ENGINE_EVENT_TYPE + 1];\n\nenum transmit_result {\n    TRANSMIT_COMPLETE,   /** All done writing. */\n    TRANSMIT_INCOMPLETE, /** More data remaining to write. */\n    TRANSMIT_SOFT_ERROR, /** Can't write any more right now. */\n    TRANSMIT_HARD_ERROR  /** Can't write (c->state is set to conn_closing) */\n};\n\nstatic enum transmit_result transmit(conn *c);\n\n#define REALTIME_MAXDELTA 60*60*24*30\n\n// Perform all callbacks of a given type for the given connection.\nstatic void perform_callbacks(ENGINE_EVENT_TYPE type,\n                              const void *data,\n                              const void *c) {\n    for (struct engine_event_handler *h = engine_event_handlers[type];\n         h; h = h->next) {\n        h->cb(c, type, data, h->cb_data);\n    }\n}\n\n/*\n * given time value that's either unix time or delta from current unix time,\n * return unix time. Use the fact that delta can't exceed one month\n * (and real time value can't be that low).\n */\nstatic rel_time_t realtime(const time_t exptime) {\n    /* no. of seconds in 30 days - largest possible delta exptime */\n\n    if (exptime == 0) return 0; /* 0 means never expire */\n\n    if (exptime > REALTIME_MAXDELTA) {\n        /* if item expiration is at/before the server started, give it an\n           expiration time of 1 second after the server started.\n           (because 0 means don't expire).  without this, we'd\n           underflow and wrap around to some large value way in the\n           future, effectively making items expiring in the past\n           really expiring never */\n        if (exptime <= process_started)\n            return (rel_time_t)1;\n        return (rel_time_t)(exptime - process_started);\n    } else {\n        return (rel_time_t)(exptime + current_time);\n    }\n}\n\n/**\n * Convert the relative time to an absolute time (relative to EPOC ;) )\n */\nstatic time_t abstime(const rel_time_t exptime)\n{\n    return process_started + exptime;\n}\n\nstatic void stats_init(void) {\n    stats.daemon_conns = 0;\n    stats.rejected_conns = 0;\n    stats.curr_conns = stats.total_conns = stats.conn_structs = 0;\n\n    stats_prefix_init();\n}\n\nstatic void stats_reset(const void *cookie) {\n    struct conn *conn = (struct conn*)cookie;\n    STATS_LOCK();\n    stats.rejected_conns = 0;\n    stats.total_conns = 0;\n    stats_prefix_clear();\n    STATS_UNLOCK();\n    threadlocal_stats_reset(get_independent_stats(conn)->thread_stats);\n    settings.engine.v1->reset_stats(settings.engine.v0, cookie);\n}\n\nstatic void settings_init(void) {\n    settings.use_cas = true;\n    settings.access = 0700;\n    settings.port = 11211;\n    settings.udpport = 11211;\n    /* By default this string should be NULL for getaddrinfo() */\n    settings.inter = NULL;\n    settings.maxbytes = 64 * 1024 * 1024; /* default is 64MB */\n    settings.maxconns = 1000;         /* to limit connections-related memory to about 5MB */\n    settings.verbose = 0;\n    settings.oldest_live = 0;\n    settings.evict_to_free = 1;       /* push old items out of cache when memory runs out */\n    settings.socketpath = NULL;       /* by default, not using a unix socket */\n    settings.factor = 1.25;\n    settings.chunk_size = 48;         /* space for a modest key and value */\n    settings.num_threads = 4;         /* N workers */\n    settings.num_threads_per_udp = 0;\n    settings.prefix_delimiter = ':';\n    settings.detail_enabled = 0;\n    settings.allow_detailed = true;\n    settings.reqs_per_event = DEFAULT_REQS_PER_EVENT;\n    settings.backlog = 1024;\n    settings.binding_protocol = negotiating_prot;\n    settings.item_size_max = 1024 * 1024; /* The famous 1MB upper limit. */\n    settings.topkeys = 0;\n    settings.require_sasl = false;\n    settings.extensions.logger = get_stderr_logger();\n}\n\n/*\n * Adds a message header to a connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int add_msghdr(conn *c)\n{\n    struct msghdr *msg;\n\n    assert(c != NULL);\n\n    if (c->msgsize == c->msgused) {\n        msg = realloc(c->msglist, c->msgsize * 2 * sizeof(struct msghdr));\n        if (! msg)\n            return -1;\n        c->msglist = msg;\n        c->msgsize *= 2;\n    }\n\n    msg = c->msglist + c->msgused;\n\n    /* this wipes msg_iovlen, msg_control, msg_controllen, and\n       msg_flags, the last 3 of which aren't defined on solaris: */\n    memset(msg, 0, sizeof(struct msghdr));\n\n    msg->msg_iov = &c->iov[c->iovused];\n\n    if (c->request_addr_size > 0) {\n        msg->msg_name = &c->request_addr;\n        msg->msg_namelen = c->request_addr_size;\n    }\n\n    c->msgbytes = 0;\n    c->msgused++;\n\n    if (IS_UDP(c->transport)) {\n        /* Leave room for the UDP header, which we'll fill in later. */\n        return add_iov(c, NULL, UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\nstatic const char *prot_text(enum protocol prot) {\n    char *rv = \"unknown\";\n    switch(prot) {\n        case ascii_prot:\n            rv = \"ascii\";\n            break;\n        case binary_prot:\n            rv = \"binary\";\n            break;\n        case negotiating_prot:\n            rv = \"auto-negotiate\";\n            break;\n    }\n    return rv;\n}\n\nstruct {\n    pthread_mutex_t mutex;\n    bool disabled;\n    ssize_t count;\n    uint64_t num_disable;\n} listen_state;\n\nstatic bool is_listen_disabled(void) {\n    bool ret;\n    pthread_mutex_lock(&listen_state.mutex);\n    ret = listen_state.disabled;\n    pthread_mutex_unlock(&listen_state.mutex);\n    return ret;\n}\n\nstatic uint64_t get_listen_disabled_num(void) {\n    uint64_t ret;\n    pthread_mutex_lock(&listen_state.mutex);\n    ret = listen_state.num_disable;\n    pthread_mutex_unlock(&listen_state.mutex);\n    return ret;\n}\n\nstatic void disable_listen(void) {\n    pthread_mutex_lock(&listen_state.mutex);\n    listen_state.disabled = true;\n    listen_state.count = 10;\n    ++listen_state.num_disable;\n    pthread_mutex_unlock(&listen_state.mutex);\n\n    conn *next;\n    for (next = listen_conn; next; next = next->next) {\n        update_event(next, 0);\n        if (listen(next->sfd, 1) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"listen() failed\",\n                                            strerror(errno));\n        }\n    }\n}\n\nvoid safe_close(SOCKET sfd) {\n    if (sfd != INVALID_SOCKET) {\n        int rval;\n        while ((rval = closesocket(sfd)) == SOCKET_ERROR &&\n               (errno == EINTR || errno == EAGAIN)) {\n            /* go ahead and retry */\n        }\n\n        if (rval == SOCKET_ERROR) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"Failed to close socket %d (%s)!!\\n\", (int)sfd,\n                                            strerror(errno));\n        } else {\n            STATS_LOCK();\n            stats.curr_conns--;\n            STATS_UNLOCK();\n\n            if (is_listen_disabled()) {\n                notify_dispatcher();\n            }\n        }\n    }\n}\n\n/*\n * Free list management for connections.\n */\ncache_t *conn_cache;      /* suffix cache */\n\n/**\n * Reset all of the dynamic buffers used by a connection back to their\n * default sizes. The strategy for resizing the buffers is to allocate a\n * new one of the correct size and free the old one if the allocation succeeds\n * instead of using realloc to change the buffer size (because realloc may\n * not shrink the buffers, and will also copy the memory). If the allocation\n * fails the buffer will be unchanged.\n *\n * @param c the connection to resize the buffers for\n * @return true if all allocations succeeded, false if one or more of the\n *         allocations failed.\n */\nstatic bool conn_reset_buffersize(conn *c) {\n    bool ret = true;\n\n    if (c->rsize != DATA_BUFFER_SIZE) {\n        void *ptr = malloc(DATA_BUFFER_SIZE);\n        if (ptr != NULL) {\n            free(c->rbuf);\n            c->rbuf = ptr;\n            c->rsize = DATA_BUFFER_SIZE;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->wsize != DATA_BUFFER_SIZE) {\n        void *ptr = malloc(DATA_BUFFER_SIZE);\n        if (ptr != NULL) {\n            free(c->wbuf);\n            c->wbuf = ptr;\n            c->wsize = DATA_BUFFER_SIZE;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->isize != ITEM_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(item *) * ITEM_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->ilist);\n            c->ilist = ptr;\n            c->isize = ITEM_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->suffixsize != SUFFIX_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(char *) * SUFFIX_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->suffixlist);\n            c->suffixlist = ptr;\n            c->suffixsize = SUFFIX_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->iovsize != IOV_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(struct iovec) * IOV_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->iov);\n            c->iov = ptr;\n            c->iovsize = IOV_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    if (c->msgsize != MSG_LIST_INITIAL) {\n        void *ptr = malloc(sizeof(struct msghdr) * MSG_LIST_INITIAL);\n        if (ptr != NULL) {\n            free(c->msglist);\n            c->msglist = ptr;\n            c->msgsize = MSG_LIST_INITIAL;\n        } else {\n            ret = false;\n        }\n    }\n\n    return ret;\n}\n\n/**\n * Constructor for all memory allocations of connection objects. Initialize\n * all members and allocate the transfer buffers.\n *\n * @param buffer The memory allocated by the object cache\n * @param unused1 not used\n * @param unused2 not used\n * @return 0 on success, 1 if we failed to allocate memory\n */\nstatic int conn_constructor(void *buffer, void *unused1, int unused2) {\n    (void)unused1; (void)unused2;\n\n    conn *c = buffer;\n    memset(c, 0, sizeof(*c));\n    MEMCACHED_CONN_CREATE(c);\n\n    if (!conn_reset_buffersize(c)) {\n        free(c->rbuf);\n        free(c->wbuf);\n        free(c->ilist);\n        free(c->suffixlist);\n        free(c->iov);\n        free(c->msglist);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING,\n                                        NULL,\n                                        \"Failed to allocate buffers for connection\\n\");\n        return 1;\n    }\n\n    STATS_LOCK();\n    stats.conn_structs++;\n    STATS_UNLOCK();\n\n    return 0;\n}\n\n/**\n * Destructor for all connection objects. Release all allocated resources.\n *\n * @param buffer The memory allocated by the objec cache\n * @param unused not used\n */\nstatic void conn_destructor(void *buffer, void *unused) {\n    (void)unused;\n    conn *c = buffer;\n    free(c->rbuf);\n    free(c->wbuf);\n    free(c->ilist);\n    free(c->suffixlist);\n    free(c->iov);\n    free(c->msglist);\n\n    STATS_LOCK();\n    stats.conn_structs--;\n    STATS_UNLOCK();\n}\n\nconn *conn_new(const SOCKET sfd, STATE_FUNC init_state,\n               const int event_flags,\n               const int read_buffer_size, enum network_transport transport,\n               struct event_base *base, struct timeval *timeout) {\n    conn *c = cache_alloc(conn_cache);\n    if (c == NULL) {\n        return NULL;\n    }\n\n    assert(c->thread == NULL);\n\n    if (c->rsize < read_buffer_size) {\n        void *mem = malloc(read_buffer_size);\n        if (mem) {\n            c->rsize = read_buffer_size;\n            free(c->rbuf);\n            c->rbuf = mem;\n        } else {\n            assert(c->thread == NULL);\n            cache_free(conn_cache, c);\n            return NULL;\n        }\n    }\n\n    c->transport = transport;\n    c->protocol = settings.binding_protocol;\n\n    /* unix socket mode doesn't need this, so zeroed out.  but why\n     * is this done for every command?  presumably for UDP\n     * mode.  */\n    if (!settings.socketpath) {\n        c->request_addr_size = sizeof(c->request_addr);\n    } else {\n        c->request_addr_size = 0;\n    }\n\n    if (settings.verbose > 1) {\n        if (init_state == conn_listening) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d server listening (%s)\\n\", sfd,\n                                            prot_text(c->protocol));\n        } else if (IS_UDP(transport)) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d server listening (udp)\\n\", sfd);\n        } else if (c->protocol == negotiating_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new auto-negotiating client connection\\n\",\n                                            sfd);\n        } else if (c->protocol == ascii_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new ascii client connection.\\n\", sfd);\n        } else if (c->protocol == binary_prot) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new binary client connection.\\n\", sfd);\n        } else {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"<%d new unknown (%d) client connection\\n\",\n                                            sfd, c->protocol);\n            assert(false);\n        }\n    }\n\n    c->sfd = sfd;\n    c->state = init_state;\n    c->rlbytes = 0;\n    c->cmd = -1;\n    c->ascii_cmd = NULL;\n    c->rbytes = c->wbytes = 0;\n    c->wcurr = c->wbuf;\n    c->rcurr = c->rbuf;\n    c->ritem = 0;\n    c->icurr = c->ilist;\n    c->suffixcurr = c->suffixlist;\n    c->ileft = 0;\n    c->suffixleft = 0;\n    c->iovused = 0;\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->next = NULL;\n    c->list_state = 0;\n\n    c->write_and_go = init_state;\n    c->write_and_free = 0;\n    c->item = 0;\n\n    c->noreply = false;\n\n    event_set(&c->event, sfd, event_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = event_flags;\n\n    if (!register_event(c, timeout)) {\n        assert(c->thread == NULL);\n        cache_free(conn_cache, c);\n        return NULL;\n    }\n\n    STATS_LOCK();\n    stats.total_conns++;\n    STATS_UNLOCK();\n\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    c->refcount = 1;\n\n    MEMCACHED_CONN_ALLOCATE(c->sfd);\n\n    perform_callbacks(ON_CONNECT, NULL, c);\n\n    return c;\n}\n\nstatic void conn_cleanup(conn *c) {\n    assert(c != NULL);\n\n    if (c->item) {\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n\n    if (c->ileft != 0) {\n        for (; c->ileft > 0; c->ileft--,c->icurr++) {\n            settings.engine.v1->release(settings.engine.v0, c, *(c->icurr));\n        }\n    }\n\n    if (c->suffixleft != 0) {\n        for (; c->suffixleft > 0; c->suffixleft--, c->suffixcurr++) {\n            cache_free(c->thread->suffix_cache, *(c->suffixcurr));\n        }\n    }\n\n    if (c->write_and_free) {\n        free(c->write_and_free);\n        c->write_and_free = 0;\n    }\n\n    if (c->sasl_conn) {\n        sasl_dispose(&c->sasl_conn);\n        c->sasl_conn = NULL;\n    }\n\n    if (c->engine_storage) {\n\tvoid* cleanup_data = c->engine_storage;\n\tc->engine_storage = NULL;\n\tsettings.engine.v1->clean_engine(settings.engine.v0, c, cleanup_data);\n    }\n\n    c->tap_iterator = NULL;\n    c->thread = NULL;\n    assert(c->next == NULL);\n    c->ascii_cmd = NULL;\n    c->sfd = INVALID_SOCKET;\n    c->tap_nack_mode = false;\n}\n\nvoid conn_close(conn *c) {\n    assert(c != NULL);\n    assert(c->sfd == INVALID_SOCKET);\n\n    if (c->ascii_cmd != NULL) {\n        c->ascii_cmd->abort(c->ascii_cmd, c);\n    }\n\n    assert(c->thread);\n    LOCK_THREAD(c->thread);\n    /* remove from pending-io list */\n    if (settings.verbose > 1 && list_contains(c->thread->pending_io, c)) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Current connection was in the pending-io list.. Nuking it\\n\");\n    }\n    c->thread->pending_io = list_remove(c->thread->pending_io, c);\n    c->thread->pending_close = list_remove(c->thread->pending_close, c);\n    UNLOCK_THREAD(c->thread);\n\n    conn_cleanup(c);\n\n    /*\n     * The contract with the object cache is that we should return the\n     * object in a constructed state. Reset the buffers to the default\n     * size\n     */\n    conn_reset_buffersize(c);\n    assert(c->thread == NULL);\n    cache_free(conn_cache, c);\n}\n\n/*\n * Shrinks a connection's buffers if they're too big.  This prevents\n * periodic large \"get\" requests from permanently chewing lots of server\n * memory.\n *\n * This should only be called in between requests since it can wipe output\n * buffers!\n */\nstatic void conn_shrink(conn *c) {\n    assert(c != NULL);\n\n    if (IS_UDP(c->transport))\n        return;\n\n    if (c->rsize > READ_BUFFER_HIGHWAT && c->rbytes < DATA_BUFFER_SIZE) {\n        char *newbuf;\n\n        if (c->rcurr != c->rbuf)\n            memmove(c->rbuf, c->rcurr, (size_t)c->rbytes);\n\n        newbuf = (char *)realloc((void *)c->rbuf, DATA_BUFFER_SIZE);\n\n        if (newbuf) {\n            c->rbuf = newbuf;\n            c->rsize = DATA_BUFFER_SIZE;\n        }\n        /* TODO check other branch... */\n        c->rcurr = c->rbuf;\n    }\n\n    if (c->isize > ITEM_LIST_HIGHWAT) {\n        item **newbuf = (item**) realloc((void *)c->ilist, ITEM_LIST_INITIAL * sizeof(c->ilist[0]));\n        if (newbuf) {\n            c->ilist = newbuf;\n            c->isize = ITEM_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->msgsize > MSG_LIST_HIGHWAT) {\n        struct msghdr *newbuf = (struct msghdr *) realloc((void *)c->msglist, MSG_LIST_INITIAL * sizeof(c->msglist[0]));\n        if (newbuf) {\n            c->msglist = newbuf;\n            c->msgsize = MSG_LIST_INITIAL;\n        }\n    /* TODO check error condition? */\n    }\n\n    if (c->iovsize > IOV_LIST_HIGHWAT) {\n        struct iovec *newbuf = (struct iovec *) realloc((void *)c->iov, IOV_LIST_INITIAL * sizeof(c->iov[0]));\n        if (newbuf) {\n            c->iov = newbuf;\n            c->iovsize = IOV_LIST_INITIAL;\n        }\n    /* TODO check return value */\n    }\n}\n\n/**\n * Convert a state name to a human readable form.\n */\nconst char *state_text(STATE_FUNC state) {\n    if (state == conn_listening) {\n        return \"conn_listening\";\n    } else if (state == conn_new_cmd) {\n        return \"conn_new_cmd\";\n    } else if (state == conn_waiting) {\n        return \"conn_waiting\";\n    } else if (state == conn_read) {\n        return \"conn_read\";\n    } else if (state == conn_parse_cmd) {\n        return \"conn_parse_cmd\";\n    } else if (state == conn_write) {\n        return \"conn_write\";\n    } else if (state == conn_nread) {\n        return \"conn_nread\";\n    } else if (state == conn_swallow) {\n        return \"conn_swallow\";\n    } else if (state == conn_closing) {\n        return \"conn_closing\";\n    } else if (state == conn_mwrite) {\n        return \"conn_mwrite\";\n    } else if (state == conn_ship_log) {\n        return \"conn_ship_log\";\n    } else if (state == conn_add_tap_client) {\n        return \"conn_add_tap_client\";\n    } else if (state == conn_setup_tap_stream) {\n        return \"conn_setup_tap_stream\";\n    } else if (state == conn_pending_close) {\n        return \"conn_pending_close\";\n    } else if (state == conn_immediate_close) {\n        return \"conn_immediate_close\";\n    } else {\n        return \"Unknown\";\n    }\n}\n\n/*\n * Sets a connection's current state in the state machine. Any special\n * processing that needs to happen on certain state transitions can\n * happen here.\n */\nvoid conn_set_state(conn *c, STATE_FUNC state) {\n    assert(c != NULL);\n\n    if (state != c->state) {\n        /*\n         * The connections in the \"tap thread\" behaves differently than\n         * normal connections because they operate in a full duplex mode.\n         * New messages may appear from both sides, so we can't block on\n         * read from the nework / engine\n         */\n        if (c->thread == tap_thread) {\n            if (state == conn_waiting) {\n                c->which = EV_WRITE;\n                state = conn_ship_log;\n            }\n        }\n\n        if (settings.verbose > 2 || c->state == conn_closing\n            || c->state == conn_add_tap_client) {\n            settings.extensions.logger->log(EXTENSION_LOG_DETAIL, c,\n                                            \"%d: going from %s to %s\\n\",\n                                            c->sfd, state_text(c->state),\n                                            state_text(state));\n        }\n\n        c->state = state;\n\n        if (state == conn_write || state == conn_mwrite) {\n            MEMCACHED_PROCESS_COMMAND_END(c->sfd, c->wbuf, c->wbytes);\n        }\n    }\n}\n\n/*\n * Ensures that there is room for another struct iovec in a connection's\n * iov list.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\nstatic int ensure_iov_space(conn *c) {\n    assert(c != NULL);\n\n    if (c->iovused >= c->iovsize) {\n        int i, iovnum;\n        struct iovec *new_iov = (struct iovec *)realloc(c->iov,\n                                (c->iovsize * 2) * sizeof(struct iovec));\n        if (! new_iov)\n            return -1;\n        c->iov = new_iov;\n        c->iovsize *= 2;\n\n        /* Point all the msghdr structures at the new list. */\n        for (i = 0, iovnum = 0; i < c->msgused; i++) {\n            c->msglist[i].msg_iov = &c->iov[iovnum];\n            iovnum += c->msglist[i].msg_iovlen;\n        }\n    }\n\n    return 0;\n}\n\n\n/*\n * Adds data to the list of pending data that will be written out to a\n * connection.\n *\n * Returns 0 on success, -1 on out-of-memory.\n */\n\nstatic int add_iov(conn *c, const void *buf, int len) {\n    struct msghdr *m;\n    int leftover;\n    bool limit_to_mtu;\n\n    assert(c != NULL);\n\n    do {\n        m = &c->msglist[c->msgused - 1];\n\n        /*\n         * Limit UDP packets, and the first payloads of TCP replies, to\n         * UDP_MAX_PAYLOAD_SIZE bytes.\n         */\n        limit_to_mtu = IS_UDP(c->transport) || (1 == c->msgused);\n\n        /* We may need to start a new msghdr if this one is full. */\n        if (m->msg_iovlen == IOV_MAX ||\n            (limit_to_mtu && c->msgbytes >= UDP_MAX_PAYLOAD_SIZE)) {\n            add_msghdr(c);\n            m = &c->msglist[c->msgused - 1];\n        }\n\n        if (ensure_iov_space(c) != 0)\n            return -1;\n\n        /* If the fragment is too big to fit in the datagram, split it up */\n        if (limit_to_mtu && len + c->msgbytes > UDP_MAX_PAYLOAD_SIZE) {\n            leftover = len + c->msgbytes - UDP_MAX_PAYLOAD_SIZE;\n            len -= leftover;\n        } else {\n            leftover = 0;\n        }\n\n        m = &c->msglist[c->msgused - 1];\n        m->msg_iov[m->msg_iovlen].iov_base = (void *)buf;\n        m->msg_iov[m->msg_iovlen].iov_len = len;\n\n        c->msgbytes += len;\n        c->iovused++;\n        m->msg_iovlen++;\n\n        buf = ((char *)buf) + len;\n        len = leftover;\n    } while (leftover > 0);\n\n    return 0;\n}\n\n\n/*\n * Constructs a set of UDP headers and attaches them to the outgoing messages.\n */\nstatic int build_udp_headers(conn *c) {\n    int i;\n    unsigned char *hdr;\n\n    assert(c != NULL);\n\n    if (c->msgused > c->hdrsize) {\n        void *new_hdrbuf;\n        if (c->hdrbuf)\n            new_hdrbuf = realloc(c->hdrbuf, c->msgused * 2 * UDP_HEADER_SIZE);\n        else\n            new_hdrbuf = malloc(c->msgused * 2 * UDP_HEADER_SIZE);\n        if (! new_hdrbuf)\n            return -1;\n        c->hdrbuf = (unsigned char *)new_hdrbuf;\n        c->hdrsize = c->msgused * 2;\n    }\n\n    hdr = c->hdrbuf;\n    for (i = 0; i < c->msgused; i++) {\n        c->msglist[i].msg_iov[0].iov_base = (void*)hdr;\n        c->msglist[i].msg_iov[0].iov_len = UDP_HEADER_SIZE;\n        *hdr++ = c->request_id / 256;\n        *hdr++ = c->request_id % 256;\n        *hdr++ = i / 256;\n        *hdr++ = i % 256;\n        *hdr++ = c->msgused / 256;\n        *hdr++ = c->msgused % 256;\n        *hdr++ = 0;\n        *hdr++ = 0;\n        assert((void *) hdr == (caddr_t)c->msglist[i].msg_iov[0].iov_base + UDP_HEADER_SIZE);\n    }\n\n    return 0;\n}\n\n\nstatic void out_string(conn *c, const char *str) {\n    size_t len;\n\n    assert(c != NULL);\n\n    if (c->noreply) {\n        if (settings.verbose > 1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \">%d NOREPLY %s\\n\", c->sfd, str);\n        }\n        c->noreply = false;\n        if (c->sbytes > 0) {\n            conn_set_state(c, conn_swallow);\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n        return;\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d %s\\n\", c->sfd, str);\n    }\n\n    /* Nuke a partial output... */\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    add_msghdr(c);\n\n    len = strlen(str);\n    if ((len + 2) > c->wsize) {\n        /* ought to be always enough. just fail for simplicity */\n        str = \"SERVER_ERROR output line too long\";\n        len = strlen(str);\n    }\n\n    memcpy(c->wbuf, str, len);\n    memcpy(c->wbuf + len, \"\\r\\n\", 2);\n    c->wbytes = len + 2;\n    c->wcurr = c->wbuf;\n\n    conn_set_state(c, conn_write);\n\n    if (c->sbytes > 0) {\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n\n    return;\n}\n\n/*\n * we get here after reading the value in set/add/replace commands. The command\n * has been stored in c->cmd, and the item is ready in c->item.\n */\nstatic void complete_update_ascii(conn *c) {\n    assert(c != NULL);\n\n    item *it = c->item;\n    item_info info = { .nvalue = 1 };\n    if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n        settings.engine.v1->release(settings.engine.v0, c, it);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: Failed to get item info\\n\",\n                                        c->sfd);\n        out_string(c, \"SERVER_ERROR failed to get item details\");\n        return;\n    }\n\n    c->sbytes = 2; // swallow \\r\\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->store(settings.engine.v0, c, it, &c->cas,\n                                        c->store_op, 0);\n    }\n\n#ifdef ENABLE_DTRACE\n    switch (c->store_op) {\n    case OPERATION_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, info.key, info.nkey,\n                                 (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_CAS:\n        MEMCACHED_COMMAND_CAS(c->sfd, info.key, info.nkey, info.nbytes, c->cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"STORED\");\n        break;\n    case ENGINE_KEY_EEXISTS:\n        out_string(c, \"EXISTS\");\n        break;\n    case ENGINE_KEY_ENOENT:\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case ENGINE_NOT_STORED:\n        out_string(c, \"NOT_STORED\");\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        out_string(c, \"SERVER_ERROR not supported\");\n        break;\n    case ENGINE_ENOMEM:\n        out_string(c, \"SERVER_ERROR out of memory\");\n        break;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    case ENGINE_EINVAL:\n        out_string(c, \"CLIENT_ERROR invalid arguments\");\n        break;\n    case ENGINE_E2BIG:\n        out_string(c, \"CLIENT_ERROR value too big\");\n        break;\n    case ENGINE_EACCESS:\n        out_string(c, \"CLIENT_ERROR access control violation\");\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        out_string(c, \"SERVER_ERROR not my vbucket\");\n        break;\n    case ENGINE_FAILED:\n        out_string(c, \"SERVER_ERROR failure\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_WANT_MORE:\n        assert(false);\n        c->state = conn_closing;\n        break;\n\n    default:\n        out_string(c, \"SERVER_ERROR internal\");\n    }\n\n    if (c->store_op == OPERATION_CAS) {\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            SLAB_INCR(c, cas_hits, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_EEXISTS:\n            SLAB_INCR(c, cas_badval, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_ENOENT:\n            STATS_NOKEY(c, cas_misses);\n            break;\n        default:\n            ;\n        }\n    } else {\n        SLAB_INCR(c, cmd_set, info.key, info.nkey);\n    }\n\n    if (!c->ewouldblock) {\n        /* release the c->item reference */\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n}\n\n/**\n * get a pointer to the start of the request struct for the current command\n */\nstatic void* binary_get_request(conn *c) {\n    char *ret = c->rcurr;\n    ret -= (sizeof(c->binary_header) + c->binary_header.request.keylen +\n            c->binary_header.request.extlen);\n\n    assert(ret >= c->rbuf);\n    return ret;\n}\n\n/**\n * get a pointer to the key in this request\n */\nstatic char* binary_get_key(conn *c) {\n    return c->rcurr - (c->binary_header.request.keylen);\n}\n\n/**\n * Insert a key into a buffer, but replace all non-printable characters\n * with a '.'.\n *\n * @param dest where to store the output\n * @param destsz size of destination buffer\n * @param prefix string to insert before the data\n * @param client the client we are serving\n * @param from_client set to true if this data is from the client\n * @param key the key to add to the buffer\n * @param nkey the number of bytes in the key\n * @return number of bytes in dest if success, -1 otherwise\n */\nstatic ssize_t key_to_printable_buffer(char *dest, size_t destsz,\n                                       int client, bool from_client,\n                                       const char *prefix,\n                                       const char *key,\n                                       size_t nkey)\n{\n    ssize_t nw = snprintf(dest, destsz, \"%c%d %s \", from_client ? '>' : '<',\n                          client, prefix);\n    if (nw == -1) {\n        return -1;\n    }\n\n    char *ptr = dest + nw;\n    destsz -= nw;\n    if (nkey > destsz) {\n        nkey = destsz;\n    }\n\n    for (ssize_t ii = 0; ii < nkey; ++ii, ++key, ++ptr) {\n        if (isgraph(*key)) {\n            *ptr = *key;\n        } else {\n            *ptr = '.';\n        }\n    }\n\n    *ptr = '\\0';\n    return ptr - dest;\n}\n\n/**\n * Convert a byte array to a text string\n *\n * @param dest where to store the output\n * @param destsz size of destination buffer\n * @param prefix string to insert before the data\n * @param client the client we are serving\n * @param from_client set to true if this data is from the client\n * @param data the data to add to the buffer\n * @param size the number of bytes in data to print\n * @return number of bytes in dest if success, -1 otherwise\n */\nstatic ssize_t bytes_to_output_string(char *dest, size_t destsz,\n                                      int client, bool from_client,\n                                      const char *prefix,\n                                      const char *data,\n                                      size_t size)\n{\n    ssize_t nw = snprintf(dest, destsz, \"%c%d %s\", from_client ? '>' : '<',\n                          client, prefix);\n    if (nw == -1) {\n        return -1;\n    }\n    ssize_t offset = nw;\n\n    for (ssize_t ii = 0; ii < size; ++ii) {\n        if (ii % 4 == 0) {\n            if ((nw = snprintf(dest + offset, destsz - offset, \"\\n%c%d  \",\n                               from_client ? '>' : '<', client)) == -1) {\n                return  -1;\n            }\n            offset += nw;\n        }\n        if ((nw = snprintf(dest + offset, destsz - offset,\n                           \" 0x%02x\", (unsigned char)data[ii])) == -1) {\n            return -1;\n        }\n        offset += nw;\n    }\n\n    if ((nw = snprintf(dest + offset, destsz - offset, \"\\n\")) == -1) {\n        return -1;\n    }\n\n    return offset + nw;\n}\n\nstatic void add_bin_header(conn *c, uint16_t err, uint8_t hdr_len, uint16_t key_len, uint32_t body_len) {\n    protocol_binary_response_header* header;\n\n    assert(c);\n\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        /* XXX:  out_string is inappropriate here */\n        out_string(c, \"SERVER_ERROR out of memory\");\n        return;\n    }\n\n    header = (protocol_binary_response_header *)c->wbuf;\n\n    header->response.magic = (uint8_t)PROTOCOL_BINARY_RES;\n    header->response.opcode = c->binary_header.request.opcode;\n    header->response.keylen = (uint16_t)htons(key_len);\n\n    header->response.extlen = (uint8_t)hdr_len;\n    header->response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES;\n    header->response.status = (uint16_t)htons(err);\n\n    header->response.bodylen = htonl(body_len);\n    header->response.opaque = c->opaque;\n    header->response.cas = htonll(c->cas);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (bytes_to_output_string(buffer, sizeof(buffer), c->sfd, false,\n                                   \"Writing bin response:\",\n                                   (const char*)header->bytes,\n                                   sizeof(header->bytes)) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"%s\", buffer);\n        }\n    }\n\n    add_iov(c, c->wbuf, sizeof(header->response));\n}\n\n/**\n * Convert an error code generated from the storage engine to the corresponding\n * error code used by the protocol layer.\n * @param e the error code as used in the engine\n * @return the error code as used by the protocol layer\n */\nstatic protocol_binary_response_status engine_error_2_protocol_error(ENGINE_ERROR_CODE e) {\n    protocol_binary_response_status ret;\n\n    switch (e) {\n    case ENGINE_SUCCESS:\n        return PROTOCOL_BINARY_RESPONSE_SUCCESS;\n    case ENGINE_KEY_ENOENT:\n        return PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n    case ENGINE_KEY_EEXISTS:\n        return PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n    case ENGINE_ENOMEM:\n        return PROTOCOL_BINARY_RESPONSE_ENOMEM;\n    case ENGINE_TMPFAIL:\n        return PROTOCOL_BINARY_RESPONSE_ETMPFAIL;\n    case ENGINE_NOT_STORED:\n        return PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n    case ENGINE_EINVAL:\n        return PROTOCOL_BINARY_RESPONSE_EINVAL;\n    case ENGINE_ENOTSUP:\n        return PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED;\n    case ENGINE_E2BIG:\n        return PROTOCOL_BINARY_RESPONSE_E2BIG;\n    case ENGINE_NOT_MY_VBUCKET:\n        return PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET;\n    default:\n        ret = PROTOCOL_BINARY_RESPONSE_EINTERNAL;\n    }\n\n    return ret;\n}\n\nstatic void write_bin_packet(conn *c, protocol_binary_response_status err, int swallow) {\n    ssize_t len;\n    char buffer[1024] = { [sizeof(buffer) - 1] = '\\0' };\n\n    switch (err) {\n    case PROTOCOL_BINARY_RESPONSE_SUCCESS:\n        len = 0;\n        break;\n    case PROTOCOL_BINARY_RESPONSE_ENOMEM:\n        len = snprintf(buffer, sizeof(buffer), \"Out of memory\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_ETMPFAIL:\n        len = snprintf(buffer, sizeof(buffer), \"Temporary failure\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND:\n        len = snprintf(buffer, sizeof(buffer), \"Unknown command\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_KEY_ENOENT:\n        len = snprintf(buffer, sizeof(buffer), \"Not found\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_EINVAL:\n        len = snprintf(buffer, sizeof(buffer), \"Invalid arguments\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS:\n        len = snprintf(buffer, sizeof(buffer), \"Data exists for key\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_E2BIG:\n        len = snprintf(buffer, sizeof(buffer), \"Too large\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL:\n        len = snprintf(buffer, sizeof(buffer),\n                       \"Non-numeric server-side value for incr or decr\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_STORED:\n        len = snprintf(buffer, sizeof(buffer), \"Not stored\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_AUTH_ERROR:\n        len = snprintf(buffer, sizeof(buffer), \"Auth failure\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED:\n        len = snprintf(buffer, sizeof(buffer), \"Not supported\");\n        break;\n    case PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET:\n        len = snprintf(buffer, sizeof(buffer),\n                       \"I'm not responsible for this vbucket\");\n        break;\n\n    default:\n        len = snprintf(buffer, sizeof(buffer), \"UNHANDLED ERROR (%d)\", err);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \">%d UNHANDLED ERROR: %d\\n\", c->sfd, err);\n    }\n\n    /* Allow the engine to pass extra error information */\n    if (settings.engine.v1->errinfo != NULL) {\n        size_t elen = settings.engine.v1->errinfo(settings.engine.v0, c, buffer + len + 2,\n                                                  sizeof(buffer) - len - 3);\n\n        if (elen > 0) {\n            memcpy(buffer + len, \": \", 2);\n            len += elen + 2;\n        }\n    }\n\n    if (err != PROTOCOL_BINARY_RESPONSE_SUCCESS && settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d Writing an error: %s\\n\", c->sfd,\n                                        buffer);\n    }\n\n    add_bin_header(c, err, 0, 0, len);\n    if (len > 0) {\n        add_iov(c, buffer, len);\n    }\n    conn_set_state(c, conn_mwrite);\n    if (swallow > 0) {\n        c->sbytes = swallow;\n        c->write_and_go = conn_swallow;\n    } else {\n        c->write_and_go = conn_new_cmd;\n    }\n}\n\n/* Form and send a response to a command over the binary protocol */\nstatic void write_bin_response(conn *c, void *d, int hlen, int keylen, int dlen) {\n    if (!c->noreply || c->cmd == PROTOCOL_BINARY_CMD_GET ||\n        c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n        add_bin_header(c, 0, hlen, keylen, dlen);\n        if(dlen > 0) {\n            add_iov(c, d, dlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        conn_set_state(c, conn_new_cmd);\n    }\n}\n\n\nstatic void complete_incr_bin(conn *c) {\n    protocol_binary_response_incr* rsp = (protocol_binary_response_incr*)c->wbuf;\n    protocol_binary_request_incr* req = binary_get_request(c);\n\n    assert(c != NULL);\n    assert(c->wsize >= sizeof(*rsp));\n\n    /* fix byteorder in the request */\n    uint64_t delta = ntohll(req->message.body.delta);\n    uint64_t initial = ntohll(req->message.body.initial);\n    rel_time_t expiration = ntohl(req->message.body.expiration);\n    char *key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n    bool incr = (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT ||\n                 c->cmd == PROTOCOL_BINARY_CMD_INCREMENTQ);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        ssize_t nw;\n        nw = key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                     incr ? \"INCR\" : \"DECR\", key, nkey);\n        if (nw != -1) {\n            if (snprintf(buffer + nw, sizeof(buffer) - nw,\n                         \" %\" PRIu64 \", %\" PRIu64 \", %\" PRIu64 \"\\n\",\n                         delta, initial, (uint64_t)expiration) != -1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\",\n                                                buffer);\n            }\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->arithmetic(settings.engine.v0,\n                                             c, key, nkey, incr,\n                                             req->message.body.expiration != 0xffffffff,\n                                             delta, initial, expiration,\n                                             &c->cas,\n                                             &rsp->message.body.value,\n                                             c->binary_header.request.vbucket);\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        rsp->message.body.value = htonll(rsp->message.body.value);\n        write_bin_response(c, &rsp->message.body, 0, 0,\n                           sizeof (rsp->message.body.value));\n        if (incr) {\n            STATS_INCR(c, incr_hits, key, nkey);\n        } else {\n            STATS_INCR(c, decr_hits, key, nkey);\n        }\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        if (c->cmd == PROTOCOL_BINARY_CMD_INCREMENT) {\n            STATS_INCR(c, incr_misses, key, nkey);\n        } else {\n            STATS_INCR(c, decr_misses, key, nkey);\n        }\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_EINVAL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_DELTA_BADVAL, 0);\n        break;\n    case ENGINE_NOT_STORED:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_STORED, 0);\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        abort();\n    }\n}\n\nstatic void complete_update_bin(conn *c) {\n    protocol_binary_response_status eno = PROTOCOL_BINARY_RESPONSE_EINVAL;\n    assert(c != NULL);\n\n    item *it = c->item;\n    item_info info = { .nvalue = 1 };\n    if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n        settings.engine.v1->release(settings.engine.v0, c, it);\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: Failed to get item info\\n\",\n                                        c->sfd);\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n        return;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->store(settings.engine.v0, c,\n                                        it, &c->cas, c->store_op,\n                                        c->binary_header.request.vbucket);\n    }\n\n#ifdef ENABLE_DTRACE\n    switch (c->cmd) {\n    case OPERATION_ADD:\n        MEMCACHED_COMMAND_ADD(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_REPLACE:\n        MEMCACHED_COMMAND_REPLACE(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_APPEND:\n        MEMCACHED_COMMAND_APPEND(c->sfd, info.key, info.nkey,\n                                 (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_PREPEND:\n        MEMCACHED_COMMAND_PREPEND(c->sfd, info.key, info.nkey,\n                                  (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    case OPERATION_SET:\n        MEMCACHED_COMMAND_SET(c->sfd, info.key, info.nkey,\n                              (ret == ENGINE_SUCCESS) ? info.nbytes : -1, c->cas);\n        break;\n    }\n#endif\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        /* Stored */\n        write_bin_response(c, NULL, 0, 0, 0);\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    default:\n        if (c->store_op == OPERATION_ADD) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS;\n        } else if(c->store_op == OPERATION_REPLACE) {\n            eno = PROTOCOL_BINARY_RESPONSE_KEY_ENOENT;\n        } else {\n            eno = PROTOCOL_BINARY_RESPONSE_NOT_STORED;\n        }\n        write_bin_packet(c, eno, 0);\n    }\n\n    if (c->store_op == OPERATION_CAS) {\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            SLAB_INCR(c, cas_hits, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_EEXISTS:\n            SLAB_INCR(c, cas_badval, info.key, info.nkey);\n            break;\n        case ENGINE_KEY_ENOENT:\n            STATS_NOKEY(c, cas_misses);\n            break;\n        default:\n            ;\n        }\n    } else {\n        SLAB_INCR(c, cmd_set, info.key, info.nkey);\n    }\n\n    if (!c->ewouldblock) {\n        /* release the c->item reference */\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = 0;\n    }\n}\n\nstatic void process_bin_get(conn *c) {\n    item *it = NULL;\n\n    protocol_binary_response_get* rsp = (protocol_binary_response_get*)c->wbuf;\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"GET\", key, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->get(settings.engine.v0, c, &it, key, nkey,\n                                      c->binary_header.request.vbucket);\n    }\n\n    uint16_t keylen;\n    uint32_t bodylen;\n    item_info info = { .nvalue = 1 };\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"%d: Failed to get item info\\n\",\n                                            c->sfd);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            break;\n        }\n\n        keylen = 0;\n        bodylen = sizeof(rsp->message.body) + info.nbytes;\n\n        STATS_HIT(c, get, key, nkey);\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n            bodylen += nkey;\n            keylen = nkey;\n        }\n        add_bin_header(c, 0, sizeof(rsp->message.body), keylen, bodylen);\n        rsp->message.header.response.cas = htonll(info.cas);\n\n        // add the flags\n        rsp->message.body.flags = info.flags;\n        add_iov(c, &rsp->message.body, sizeof(rsp->message.body));\n\n        if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n            add_iov(c, info.key, nkey);\n        }\n\n        add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n        conn_set_state(c, conn_mwrite);\n        /* Remember this item so we can garbage collect it later */\n        c->item = it;\n        break;\n    case ENGINE_KEY_ENOENT:\n        STATS_MISS(c, get, key, nkey);\n\n        MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n\n        if (c->noreply) {\n            conn_set_state(c, conn_new_cmd);\n        } else {\n            if (c->cmd == PROTOCOL_BINARY_CMD_GETK) {\n                char *ofs = c->wbuf + sizeof(protocol_binary_response_header);\n                add_bin_header(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT,\n                               0, nkey, nkey);\n                memcpy(ofs, key, nkey);\n                add_iov(c, ofs, nkey);\n                conn_set_state(c, conn_mwrite);\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n            }\n        }\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_TMPFAIL:\n\tbreak;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    default:\n        /* @todo add proper error handling! */\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Unknown error code: %d\\n\", ret);\n        abort();\n    }\n\n    if (settings.detail_enabled && ret != ENGINE_EWOULDBLOCK) {\n        stats_prefix_record_get(key, nkey, ret == ENGINE_SUCCESS);\n    }\n}\n\nstatic void append_bin_stats(const char *key, const uint16_t klen,\n                             const char *val, const uint32_t vlen,\n                             conn *c) {\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    uint32_t bodylen = klen + vlen;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = PROTOCOL_BINARY_CMD_STAT,\n        .response.keylen = (uint16_t)htons(klen),\n        .response.datatype = (uint8_t)PROTOCOL_BINARY_RAW_BYTES,\n        .response.bodylen = htonl(bodylen),\n        .response.opaque = c->opaque\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (klen > 0) {\n        memcpy(buf, key, klen);\n        buf += klen;\n\n        if (vlen > 0) {\n            memcpy(buf, val, vlen);\n        }\n    }\n\n    c->dynamic_buffer.offset += sizeof(header.response) + bodylen;\n}\n\n/**\n * Append a key-value pair to the stats output buffer. This function assumes\n * that the output buffer is big enough (it will be if you call it through\n * append_stats)\n */\nstatic void append_ascii_stats(const char *key, const uint16_t klen,\n                               const char *val, const uint32_t vlen,\n                               conn *c) {\n    char *pos = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    uint32_t nbytes = 5; /* \"END\\r\\n\" or \"STAT \" */\n\n    if (klen == 0 && vlen == 0) {\n        memcpy(pos, \"END\\r\\n\", 5);\n    } else {\n        memcpy(pos, \"STAT \", 5);\n        memcpy(pos + nbytes, key, klen);\n        nbytes += klen;\n        if (vlen != 0) {\n            pos[nbytes] = ' ';\n            ++nbytes;\n            memcpy(pos + nbytes, val, vlen);\n            nbytes += vlen;\n        }\n        memcpy(pos + nbytes, \"\\r\\n\", 2);\n        nbytes += 2;\n    }\n\n    c->dynamic_buffer.offset += nbytes;\n}\n\nstatic bool grow_dynamic_buffer(conn *c, size_t needed) {\n    size_t nsize = c->dynamic_buffer.size;\n    size_t available = nsize - c->dynamic_buffer.offset;\n    bool rv = true;\n\n    /* Special case: No buffer -- need to allocate fresh */\n    if (c->dynamic_buffer.buffer == NULL) {\n        nsize = 1024;\n        available = c->dynamic_buffer.size = c->dynamic_buffer.offset = 0;\n    }\n\n    while (needed > available) {\n        assert(nsize > 0);\n        nsize = nsize << 1;\n        available = nsize - c->dynamic_buffer.offset;\n    }\n\n    if (nsize != c->dynamic_buffer.size) {\n        char *ptr = realloc(c->dynamic_buffer.buffer, nsize);\n        if (ptr) {\n            c->dynamic_buffer.buffer = ptr;\n            c->dynamic_buffer.size = nsize;\n        } else {\n            rv = false;\n        }\n    }\n\n    return rv;\n}\n\nstatic void append_stats(const char *key, const uint16_t klen,\n                         const char *val, const uint32_t vlen,\n                         const void *cookie)\n{\n    /* value without a key is invalid */\n    if (klen == 0 && vlen > 0) {\n        return ;\n    }\n\n    conn *c = (conn*)cookie;\n\n    if (c->protocol == binary_prot) {\n        size_t needed = vlen + klen + sizeof(protocol_binary_response_header);\n        if (!grow_dynamic_buffer(c, needed)) {\n            return ;\n        }\n        append_bin_stats(key, klen, val, vlen, c);\n    } else {\n        size_t needed = vlen + klen + 10; // 10 == \"STAT = \\r\\n\"\n        if (!grow_dynamic_buffer(c, needed)) {\n            return ;\n        }\n        append_ascii_stats(key, klen, val, vlen, c);\n    }\n\n    assert(c->dynamic_buffer.offset <= c->dynamic_buffer.size);\n}\n\nstatic void process_bin_stat(conn *c) {\n    char *subcommand = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"STATS\", subcommand, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        if (nkey == 0) {\n            /* request all statistics */\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c, NULL, 0, append_stats);\n            if (ret == ENGINE_SUCCESS) {\n                server_stats(&append_stats, c, false);\n            }\n        } else if (strncmp(subcommand, \"reset\", 5) == 0) {\n            stats_reset(c);\n            settings.engine.v1->reset_stats(settings.engine.v0, c);\n        } else if (strncmp(subcommand, \"settings\", 8) == 0) {\n            process_stat_settings(&append_stats, c);\n        } else if (strncmp(subcommand, \"detail\", 6) == 0) {\n            char *subcmd_pos = subcommand + 6;\n            if (settings.allow_detailed) {\n                if (strncmp(subcmd_pos, \" dump\", 5) == 0) {\n                    int len;\n                    char *dump_buf = stats_prefix_dump(&len);\n                    if (dump_buf == NULL || len <= 0) {\n                        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n                        return ;\n                    } else {\n                        append_stats(\"detailed\", strlen(\"detailed\"), dump_buf, len, c);\n                        free(dump_buf);\n                    }\n                } else if (strncmp(subcmd_pos, \" on\", 3) == 0) {\n                    settings.detail_enabled = 1;\n                } else if (strncmp(subcmd_pos, \" off\", 4) == 0) {\n                    settings.detail_enabled = 0;\n                } else {\n                    write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n                    return;\n                }\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n                return;\n            }\n        } else if (strncmp(subcommand, \"aggregate\", 9) == 0) {\n            server_stats(&append_stats, c, true);\n        } else if (strncmp(subcommand, \"topkeys\", 7) == 0) {\n            topkeys_t *tk = get_independent_stats(c)->topkeys;\n            if (tk != NULL) {\n                topkeys_stats(tk, c, current_time, append_stats);\n            } else {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n                return;\n            }\n        } else {\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c,\n                                                subcommand, nkey,\n                                                append_stats);\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        append_stats(NULL, 0, NULL, 0, c);\n        write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n        c->dynamic_buffer.buffer = NULL;\n        break;\n    case ENGINE_ENOMEM:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, 0);\n        break;\n    case ENGINE_TMPFAIL:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ETMPFAIL, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n}\n\nstatic void bin_read_chunk(conn *c, enum bin_substates next_substate, uint32_t chunk) {\n    assert(c);\n    c->substate = next_substate;\n    c->rlbytes = chunk;\n\n    /* Ok... do we have room for everything in our buffer? */\n    ptrdiff_t offset = c->rcurr + sizeof(protocol_binary_request_header) - c->rbuf;\n    if (c->rlbytes > c->rsize - offset) {\n        size_t nsize = c->rsize;\n        size_t size = c->rlbytes + sizeof(protocol_binary_request_header);\n\n        while (size > nsize) {\n            nsize *= 2;\n        }\n\n        if (nsize != c->rsize) {\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                        \"%d: Need to grow buffer from %lu to %lu\\n\",\n                        c->sfd, (unsigned long)c->rsize, (unsigned long)nsize);\n            }\n            char *newm = realloc(c->rbuf, nsize);\n            if (newm == NULL) {\n                if (settings.verbose) {\n                    settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                            \"%d: Failed to grow buffer.. closing connection\\n\",\n                            c->sfd);\n                }\n                conn_set_state(c, conn_closing);\n                return;\n            }\n\n            c->rbuf= newm;\n            /* rcurr should point to the same offset in the packet */\n            c->rcurr = c->rbuf + offset - sizeof(protocol_binary_request_header);\n            c->rsize = nsize;\n        }\n        if (c->rbuf != c->rcurr) {\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n            c->rcurr = c->rbuf;\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                \"%d: Repack input buffer\\n\",\n                                                c->sfd);\n            }\n        }\n    }\n\n    /* preserve the header in the buffer.. */\n    c->ritem = c->rcurr + sizeof(protocol_binary_request_header);\n    conn_set_state(c, conn_nread);\n}\n\nstatic void bin_read_key(conn *c, enum bin_substates next_substate, int extra) {\n    bin_read_chunk(c, next_substate, c->keylen + extra);\n}\n\n\n/* Just write an error message and disconnect the client */\nstatic void handle_binary_protocol_error(conn *c) {\n    write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                \"%d: Protocol error (opcode %02x), close connection\\n\",\n                c->sfd, c->binary_header.request.opcode);\n    }\n    c->write_and_go = conn_closing;\n}\n\nstatic void init_sasl_conn(conn *c) {\n    assert(c);\n    if (!c->sasl_conn) {\n        int result=sasl_server_new(\"memcached\",\n                                   NULL, NULL, NULL, NULL,\n                                   NULL, 0, &c->sasl_conn);\n        if (result != SASL_OK) {\n            if (settings.verbose) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                         \"%d: Failed to initialize SASL conn.\\n\",\n                         c->sfd);\n            }\n            c->sasl_conn = NULL;\n        }\n    }\n}\n\nstatic void get_auth_data(const void *cookie, auth_data_t *data) {\n    conn *c = (conn*)cookie;\n    if (c->sasl_conn) {\n        sasl_getprop(c->sasl_conn, SASL_USERNAME, (void*)&data->username);\n#ifdef ENABLE_ISASL\n        sasl_getprop(c->sasl_conn, ISASL_CONFIG, (void*)&data->config);\n#endif\n    }\n}\n\n#ifdef SASL_ENABLED\nstatic void bin_list_sasl_mechs(conn *c) {\n    init_sasl_conn(c);\n    const char *result_string = NULL;\n    unsigned int string_length = 0;\n    int result=sasl_listmech(c->sasl_conn, NULL,\n                             \"\",   /* What to prepend the string with */\n                             \" \",  /* What to separate mechanisms with */\n                             \"\",   /* What to append to the string */\n                             &result_string, &string_length,\n                             NULL);\n    if (result != SASL_OK) {\n        /* Perhaps there's a better error for this... */\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                     \"%d: Failed to list SASL mechanisms.\\n\",\n                     c->sfd);\n        }\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        return;\n    }\n    write_bin_response(c, (char*)result_string, 0, 0, string_length);\n}\n#endif\n\nstruct sasl_tmp {\n    int ksize;\n    int vsize;\n    char data[]; /* data + ksize == value */\n};\n\nstatic void process_bin_sasl_auth(conn *c) {\n    assert(c->binary_header.request.extlen == 0);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    if (nkey > MAX_SASL_MECH_LEN) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    char *key = binary_get_key(c);\n    assert(key);\n\n    size_t buffer_size = sizeof(struct sasl_tmp) + nkey + vlen + 2;\n    struct sasl_tmp *data = calloc(sizeof(struct sasl_tmp) + buffer_size, 1);\n    if (!data) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        c->write_and_go = conn_swallow;\n        return;\n    }\n\n    data->ksize = nkey;\n    data->vsize = vlen;\n    memcpy(data->data, key, nkey);\n\n    c->item = data;\n    c->ritem = data->data + nkey;\n    c->rlbytes = vlen;\n    conn_set_state(c, conn_nread);\n    c->substate = bin_reading_sasl_auth_data;\n}\n\nstatic void process_bin_complete_sasl_auth(conn *c) {\n    const char *out = NULL;\n    unsigned int outlen = 0;\n\n    assert(c->item);\n    init_sasl_conn(c);\n\n    int nkey = c->binary_header.request.keylen;\n    int vlen = c->binary_header.request.bodylen - nkey;\n\n    struct sasl_tmp *stmp = c->item;\n    char mech[nkey+1];\n    memcpy(mech, stmp->data, nkey);\n    mech[nkey] = 0x00;\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                \"%d: mech: ``%s'' with %d bytes of data\\n\", c->sfd, mech, vlen);\n    }\n\n    const char *challenge = vlen == 0 ? NULL : (stmp->data + nkey);\n\n    int result=-1;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        result = sasl_server_start(c->sasl_conn, mech,\n                                   challenge, vlen,\n                                   &out, &outlen);\n        break;\n    case PROTOCOL_BINARY_CMD_SASL_STEP:\n        result = sasl_server_step(c->sasl_conn,\n                                  challenge, vlen,\n                                  &out, &outlen);\n        break;\n    default:\n        assert(false); /* CMD should be one of the above */\n        /* This code is pretty much impossible, but makes the compiler\n           happier */\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                    \"%d: Unhandled command %d with challenge %s\\n\",\n                    c->sfd, c->cmd, challenge);\n        }\n        break;\n    }\n\n    free(c->item);\n    c->item = NULL;\n    c->ritem = NULL;\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                        \"%d: sasl result code:  %d\\n\",\n                                        c->sfd, result);\n    }\n\n    switch(result) {\n    case SASL_OK:\n        write_bin_response(c, \"Authenticated\", 0, 0, strlen(\"Authenticated\"));\n        auth_data_t data;\n        get_auth_data(c, &data);\n        perform_callbacks(ON_AUTH, (const void*)&data, c);\n        STATS_NOKEY(c, auth_cmds);\n        break;\n    case SASL_CONTINUE:\n        add_bin_header(c, PROTOCOL_BINARY_RESPONSE_AUTH_CONTINUE, 0, 0, outlen);\n        if(outlen > 0) {\n            add_iov(c, out, outlen);\n        }\n        conn_set_state(c, conn_mwrite);\n        c->write_and_go = conn_new_cmd;\n        break;\n    default:\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"%d: Unknown sasl response:  %d\\n\",\n                                            c->sfd, result);\n        }\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        STATS_NOKEY2(c, auth_cmds, auth_errors);\n    }\n}\n\nstatic bool authenticated(conn *c) {\n    bool rv = false;\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS: /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_AUTH:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_SASL_STEP:       /* FALLTHROUGH */\n    case PROTOCOL_BINARY_CMD_VERSION:         /* FALLTHROUGH */\n        rv = true;\n        break;\n    default:\n        if (c->sasl_conn) {\n            const void *uname = NULL;\n            sasl_getprop(c->sasl_conn, SASL_USERNAME, &uname);\n            rv = uname != NULL;\n        }\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                \"%d: authenticated() in cmd 0x%02x is %s\\n\",\n                c->sfd, c->cmd, rv ? \"true\" : \"false\");\n    }\n\n    return rv;\n}\n\nstatic bool binary_response_handler(const void *key, uint16_t keylen,\n                                    const void *ext, uint8_t extlen,\n                                    const void *body, uint32_t bodylen,\n                                    uint8_t datatype, uint16_t status,\n                                    uint64_t cas, const void *cookie)\n{\n    conn *c = (conn*)cookie;\n    /* Look at append_bin_stats */\n    size_t needed = keylen + extlen + bodylen + sizeof(protocol_binary_response_header);\n    if (!grow_dynamic_buffer(c, needed)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                    \"<%d ERROR: Failed to allocate memory for response\\n\",\n                    c->sfd);\n        }\n        return false;\n    }\n\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    protocol_binary_response_header header = {\n        .response.magic = (uint8_t)PROTOCOL_BINARY_RES,\n        .response.opcode = c->binary_header.request.opcode,\n        .response.keylen = (uint16_t)htons(keylen),\n        .response.extlen = extlen,\n        .response.datatype = datatype,\n        .response.status = (uint16_t)htons(status),\n        .response.bodylen = htonl(bodylen + keylen + extlen),\n        .response.opaque = c->opaque,\n        .response.cas = htonll(cas),\n    };\n\n    memcpy(buf, header.bytes, sizeof(header.response));\n    buf += sizeof(header.response);\n\n    if (extlen > 0) {\n        memcpy(buf, ext, extlen);\n        buf += extlen;\n    }\n\n    if (keylen > 0) {\n        memcpy(buf, key, keylen);\n        buf += keylen;\n    }\n\n    if (bodylen > 0) {\n        memcpy(buf, body, bodylen);\n    }\n\n    c->dynamic_buffer.offset += needed;\n\n    return true;\n}\n\n/**\n * Tap stats (these are only used by the tap thread, so they don't need\n * to be in the threadlocal struct right now...\n */\nstruct tap_cmd_stats {\n    uint64_t connect;\n    uint64_t mutation;\n    uint64_t checkpoint_start;\n    uint64_t checkpoint_end;\n    uint64_t delete;\n    uint64_t flush;\n    uint64_t opaque;\n    uint64_t vbucket_set;\n};\n\nstruct tap_stats {\n    pthread_mutex_t mutex;\n    struct tap_cmd_stats sent;\n    struct tap_cmd_stats received;\n} tap_stats = { .mutex = PTHREAD_MUTEX_INITIALIZER };\n\nstatic void ship_tap_log(conn *c) {\n    assert(c->thread->type == TAP);\n    c->msgcurr = 0;\n    c->msgused = 0;\n    c->iovused = 0;\n    if (add_msghdr(c) != 0) {\n        if (settings.verbose) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"%d: Failed to create output headers. Shutting down tap connection\\n\", c->sfd);\n        }\n        conn_set_state(c, conn_closing);\n        return ;\n    }\n    /* @todo add check for buffer overflow of c->wbuf) */\n    c->wcurr = c->wbuf;\n\n    bool more_data = true;\n    bool send_data = false;\n    bool disconnect = false;\n\n    item *it;\n    uint32_t bodylen;\n    int ii = 0;\n    c->icurr = c->ilist;\n    do {\n        /* @todo fixme! */\n        if (ii++ == 10) {\n            break;\n        }\n\n        void *engine;\n        uint16_t nengine;\n        uint8_t ttl;\n        uint16_t tap_flags;\n        uint32_t seqno;\n        uint16_t vbucket;\n\n        tap_event_t event = c->tap_iterator(settings.engine.v0, c, &it,\n                                            &engine, &nengine, &ttl,\n                                            &tap_flags, &seqno, &vbucket);\n        union {\n            protocol_binary_request_tap_mutation mutation;\n            protocol_binary_request_tap_delete delete;\n            protocol_binary_request_tap_flush flush;\n            protocol_binary_request_tap_opaque opaque;\n            protocol_binary_request_noop noop;\n        } msg = {\n            .mutation.message.header.request.magic = (uint8_t)PROTOCOL_BINARY_REQ,\n        };\n\n        msg.opaque.message.header.request.opaque = htonl(seqno);\n        msg.opaque.message.body.tap.enginespecific_length = htons(nengine);\n        msg.opaque.message.body.tap.ttl = ttl;\n        msg.opaque.message.body.tap.flags = htons(tap_flags);\n        msg.opaque.message.header.request.extlen = 8;\n        msg.opaque.message.header.request.vbucket = htons(vbucket);\n        item_info info = { .nvalue = 1 };\n\n        switch (event) {\n        case TAP_NOOP :\n            send_data = true;\n            msg.noop.message.header.request.opcode = PROTOCOL_BINARY_CMD_NOOP;\n            msg.noop.message.header.request.extlen = 0;\n            msg.noop.message.header.request.bodylen = htonl(0);\n            memcpy(c->wcurr, msg.noop.bytes, sizeof(msg.noop.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.noop.bytes));\n            c->wcurr += sizeof(msg.noop.bytes);\n            c->wbytes += sizeof(msg.noop.bytes);\n            break;\n        case TAP_PAUSE :\n            more_data = false;\n            break;\n        case TAP_CHECKPOINT_START:\n        case TAP_CHECKPOINT_END:\n        case TAP_MUTATION:\n            if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: Failed to get item info\\n\", c->sfd);\n                break;\n            }\n            send_data = true;\n            c->ilist[c->ileft++] = it;\n\n            if (event == TAP_CHECKPOINT_START) {\n                msg.mutation.message.header.request.opcode =\n                    PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.checkpoint_start++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_CHECKPOINT_END) {\n                msg.mutation.message.header.request.opcode =\n                    PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.checkpoint_end++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_MUTATION) {\n                msg.mutation.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_MUTATION;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.mutation++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            }\n\n            msg.mutation.message.header.request.cas = htonll(info.cas);\n            msg.mutation.message.header.request.keylen = htons(info.nkey);\n            msg.mutation.message.header.request.extlen = 16;\n\n            bodylen = 16 + info.nkey + nengine;\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                bodylen += info.nbytes;\n            }\n            msg.mutation.message.header.request.bodylen = htonl(bodylen);\n            msg.mutation.message.body.item.flags = htonl(info.flags);\n            msg.mutation.message.body.item.expiration = htonl(info.exptime);\n            msg.mutation.message.body.tap.enginespecific_length = htons(nengine);\n            msg.mutation.message.body.tap.ttl = ttl;\n            msg.mutation.message.body.tap.flags = htons(tap_flags);\n            memcpy(c->wcurr, msg.mutation.bytes, sizeof(msg.mutation.bytes));\n\n            add_iov(c, c->wcurr, sizeof(msg.mutation.bytes));\n            c->wcurr += sizeof(msg.mutation.bytes);\n            c->wbytes += sizeof(msg.mutation.bytes);\n\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n\n            add_iov(c, info.key, info.nkey);\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n            }\n\n            break;\n        case TAP_DELETION:\n            /* This is a delete */\n            if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: Failed to get item info\\n\", c->sfd);\n                break;\n            }\n            send_data = true;\n            c->ilist[c->ileft++] = it;\n            msg.delete.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_DELETE;\n            msg.delete.message.header.request.cas = htonll(info.cas);\n            msg.delete.message.header.request.keylen = htons(info.nkey);\n\n            bodylen = 8 + info.nkey + nengine;\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                bodylen += info.nbytes;\n            }\n            msg.delete.message.header.request.bodylen = htonl(bodylen);\n\n            memcpy(c->wcurr, msg.delete.bytes, sizeof(msg.delete.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.delete.bytes));\n            c->wcurr += sizeof(msg.delete.bytes);\n            c->wbytes += sizeof(msg.delete.bytes);\n\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n\n            add_iov(c, info.key, info.nkey);\n            if ((tap_flags & TAP_FLAG_NO_VALUE) == 0) {\n                add_iov(c, info.value[0].iov_base, info.value[0].iov_len);\n            }\n\n            pthread_mutex_lock(&tap_stats.mutex);\n            tap_stats.sent.delete++;\n            pthread_mutex_unlock(&tap_stats.mutex);\n            break;\n\n        case TAP_DISCONNECT:\n            disconnect = true;\n            more_data = false;\n            break;\n        case TAP_VBUCKET_SET:\n        case TAP_FLUSH:\n        case TAP_OPAQUE:\n            send_data = true;\n\n            if (event == TAP_OPAQUE) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_OPAQUE;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.opaque++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n\n            } else if (event == TAP_FLUSH) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_FLUSH;\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.flush++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            } else if (event == TAP_VBUCKET_SET) {\n                msg.flush.message.header.request.opcode = PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET;\n                msg.flush.message.body.tap.flags = htons(tap_flags);\n                pthread_mutex_lock(&tap_stats.mutex);\n                tap_stats.sent.vbucket_set++;\n                pthread_mutex_unlock(&tap_stats.mutex);\n            }\n\n            msg.flush.message.header.request.bodylen = htonl(8 + nengine);\n            memcpy(c->wcurr, msg.flush.bytes, sizeof(msg.flush.bytes));\n            add_iov(c, c->wcurr, sizeof(msg.flush.bytes));\n            c->wcurr += sizeof(msg.flush.bytes);\n            c->wbytes += sizeof(msg.flush.bytes);\n            if (nengine > 0) {\n                memcpy(c->wcurr, engine, nengine);\n                add_iov(c, c->wcurr, nengine);\n                c->wcurr += nengine;\n                c->wbytes += nengine;\n            }\n            break;\n        default:\n            abort();\n        }\n    } while (more_data);\n\n    c->ewouldblock = false;\n    if (send_data) {\n        conn_set_state(c, conn_mwrite);\n        if (disconnect) {\n            c->write_and_go = conn_closing;\n        } else {\n            c->write_and_go = conn_ship_log;\n        }\n    } else {\n        if (disconnect) {\n            conn_set_state(c, conn_closing);\n        } else {\n            /* No more items to ship to the slave at this time.. suspend.. */\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                \"%d: No more items in tap log.. waiting\\n\",\n                                                c->sfd);\n            }\n            c->ewouldblock = true;\n        }\n    }\n}\n\nstatic void process_bin_unknown_packet(conn *c) {\n    void *packet = c->rcurr - (c->binary_header.request.bodylen +\n                               sizeof(c->binary_header));\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->unknown_command(settings.engine.v0, c, packet,\n                                                  binary_response_handler);\n    }\n\n    if (ret == ENGINE_SUCCESS) {\n        if (c->dynamic_buffer.buffer != NULL) {\n            write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n            c->dynamic_buffer.buffer = NULL;\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n    } else if (ret == ENGINE_ENOTSUP) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND, 0);\n    } else if (ret == ENGINE_EWOULDBLOCK) {\n        c->ewouldblock = true;\n    } else {\n        /* FATAL ERROR, shut down connection */\n        conn_set_state(c, conn_closing);\n    }\n}\n\nstatic void process_bin_tap_connect(conn *c) {\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_tap_connect *req = (void*)packet;\n    const char *key = packet + sizeof(req->bytes);\n    const char *data = key + c->binary_header.request.keylen;\n    uint32_t flags = 0;\n    size_t ndata = c->binary_header.request.bodylen -\n        c->binary_header.request.extlen -\n        c->binary_header.request.keylen;\n\n    if (c->binary_header.request.extlen == 4) {\n        flags = ntohl(req->message.body.flags);\n\n        if (flags & TAP_CONNECT_FLAG_BACKFILL) {\n            /* the userdata has to be at least 8 bytes! */\n            if (ndata < 8) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                                \"%d: ERROR: Invalid tap connect message\\n\",\n                                                c->sfd);\n                conn_set_state(c, conn_closing);\n                return ;\n            }\n        }\n    } else {\n        data -= 4;\n        key -= 4;\n    }\n\n    if (settings.verbose && c->binary_header.request.keylen > 0) {\n        char buffer[1024];\n        int len = c->binary_header.request.keylen;\n        if (len >= sizeof(buffer)) {\n            len = sizeof(buffer) - 1;\n        }\n        memcpy(buffer, key, len);\n        buffer[len] = '\\0';\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"%d: Trying to connect with named tap connection: <%s>\\n\",\n                                        c->sfd, buffer);\n    }\n\n    TAP_ITERATOR iterator = settings.engine.v1->get_tap_iterator(\n        settings.engine.v0, c, key, c->binary_header.request.keylen,\n        flags, data, ndata);\n\n    if (iterator == NULL) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"%d: FATAL: The engine does not support tap\\n\",\n                                        c->sfd);\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n        c->write_and_go = conn_closing;\n    } else {\n        c->tap_iterator = iterator;\n        c->which = EV_WRITE;\n        conn_set_state(c, conn_ship_log);\n    }\n}\n\nstatic void process_bin_tap_packet(tap_event_t event, conn *c) {\n    assert(c != NULL);\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_tap_no_extras *tap = (void*)packet;\n    uint16_t nengine = ntohs(tap->message.body.tap.enginespecific_length);\n    uint16_t tap_flags = ntohs(tap->message.body.tap.flags);\n    uint32_t seqno = ntohl(tap->message.header.request.opaque);\n    uint8_t ttl = tap->message.body.tap.ttl;\n    assert(ttl > 0);\n    char *engine_specific = packet + sizeof(tap->bytes);\n    char *key = engine_specific + nengine;\n    uint16_t nkey = c->binary_header.request.keylen;\n    char *data = key + nkey;\n    uint32_t flags = 0;\n    uint32_t exptime = 0;\n    uint32_t ndata = c->binary_header.request.bodylen - nengine - nkey - 8;\n\n    if (event == TAP_MUTATION || event == TAP_CHECKPOINT_START ||\n        event == TAP_CHECKPOINT_END) {\n        protocol_binary_request_tap_mutation *mutation = (void*)tap;\n        flags = ntohl(mutation->message.body.item.flags);\n        exptime = ntohl(mutation->message.body.item.expiration);\n        key += 8;\n        data += 8;\n        ndata -= 8;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->tap_notify(settings.engine.v0, c,\n                                             engine_specific, nengine,\n                                             ttl - 1, tap_flags,\n                                             event, seqno,\n                                             key, nkey,\n                                             flags, exptime,\n                                             ntohll(tap->message.header.request.cas),\n                                             data, ndata,\n                                             c->binary_header.request.vbucket);\n    }\n\n    switch (ret) {\n    case ENGINE_DISCONNECT:\n        conn_set_state(c, conn_closing);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        if ((tap_flags & TAP_FLAG_ACK) ||\n            (ret != ENGINE_SUCCESS && c->tap_nack_mode))\n        {\n            write_bin_packet(c, engine_error_2_protocol_error(ret), 0);\n        } else {\n            conn_set_state(c, conn_new_cmd);\n        }\n    }\n}\n\nstatic void process_bin_tap_ack(conn *c) {\n    assert(c != NULL);\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_response_no_extras *rsp = (void*)packet;\n    uint32_t seqno = ntohl(rsp->message.header.response.opaque);\n    uint16_t status = ntohs(rsp->message.header.response.status);\n    char *key = packet + sizeof(rsp->bytes);\n\n    ENGINE_ERROR_CODE ret = ENGINE_DISCONNECT;\n    if (settings.engine.v1->tap_notify != NULL) {\n        ret = settings.engine.v1->tap_notify(settings.engine.v0, c, NULL, 0, 0, status,\n                                             TAP_ACK, seqno, key,\n                                             c->binary_header.request.keylen, 0, 0,\n                                             0, NULL, 0, 0);\n    }\n\n    if (ret == ENGINE_DISCONNECT) {\n        conn_set_state(c, conn_closing);\n    } else {\n        conn_set_state(c, conn_ship_log);\n    }\n}\n\n/**\n * We received a noop response.. just ignore it\n */\nstatic void process_bin_noop_response(conn *c) {\n    assert(c != NULL);\n    conn_set_state(c, conn_new_cmd);\n}\n\nstatic void process_bin_verbosity(conn *c) {\n    char *packet = (c->rcurr - (c->binary_header.request.bodylen +\n                                sizeof(c->binary_header)));\n    protocol_binary_request_verbosity *req = (void*)packet;\n    uint32_t level = (uint32_t)ntohl(req->message.body.level);\n    if (level > MAX_VERBOSITY_LEVEL) {\n        level = MAX_VERBOSITY_LEVEL;\n    }\n    settings.verbose = (int)level;\n    perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n    write_bin_response(c, NULL, 0, 0, 0);\n}\n\nstatic void process_bin_packet(conn *c) {\n    /* @todo this should be an array of funciton pointers and call through */\n    switch (c->binary_header.request.opcode) {\n    case PROTOCOL_BINARY_CMD_TAP_CONNECT:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.connect++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        conn_set_state(c, conn_add_tap_client);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_MUTATION:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.mutation++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_MUTATION, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.checkpoint_start++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_CHECKPOINT_START, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.checkpoint_end++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_CHECKPOINT_END, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_DELETE:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.delete++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_DELETION, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_FLUSH:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.flush++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_FLUSH, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_OPAQUE:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.opaque++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_OPAQUE, c);\n        break;\n    case PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET:\n        pthread_mutex_lock(&tap_stats.mutex);\n        tap_stats.received.vbucket_set++;\n        pthread_mutex_unlock(&tap_stats.mutex);\n        process_bin_tap_packet(TAP_VBUCKET_SET, c);\n        break;\n    case PROTOCOL_BINARY_CMD_VERBOSITY:\n        process_bin_verbosity(c);\n        break;\n    default:\n        process_bin_unknown_packet(c);\n    }\n}\n\n\n\ntypedef void (*RESPONSE_HANDLER)(conn*);\n/**\n * A map between the response packets op-code and the function to handle\n * the response message.\n */\nstatic RESPONSE_HANDLER response_handlers[256] = {\n    [PROTOCOL_BINARY_CMD_NOOP] = process_bin_noop_response,\n    [PROTOCOL_BINARY_CMD_TAP_MUTATION] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_DELETE] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_FLUSH] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_OPAQUE] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START] = process_bin_tap_ack,\n    [PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END] = process_bin_tap_ack\n};\n\nstatic void dispatch_bin_command(conn *c) {\n    int protocol_error = 0;\n\n    int extlen = c->binary_header.request.extlen;\n    uint16_t keylen = c->binary_header.request.keylen;\n    uint32_t bodylen = c->binary_header.request.bodylen;\n\n    if (settings.require_sasl && !authenticated(c)) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_AUTH_ERROR, 0);\n        c->write_and_go = conn_closing;\n        return;\n    }\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n    c->noreply = true;\n\n    /* binprot supports 16bit keys, but internals are still 8bit */\n    if (keylen > KEY_MAX_LENGTH) {\n        handle_binary_protocol_error(c);\n        return;\n    }\n\n    switch (c->cmd) {\n    case PROTOCOL_BINARY_CMD_SETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_SET;\n        break;\n    case PROTOCOL_BINARY_CMD_ADDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_ADD;\n        break;\n    case PROTOCOL_BINARY_CMD_REPLACEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_REPLACE;\n        break;\n    case PROTOCOL_BINARY_CMD_DELETEQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DELETE;\n        break;\n    case PROTOCOL_BINARY_CMD_INCREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_INCREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_DECREMENTQ:\n        c->cmd = PROTOCOL_BINARY_CMD_DECREMENT;\n        break;\n    case PROTOCOL_BINARY_CMD_QUITQ:\n        c->cmd = PROTOCOL_BINARY_CMD_QUIT;\n        break;\n    case PROTOCOL_BINARY_CMD_FLUSHQ:\n        c->cmd = PROTOCOL_BINARY_CMD_FLUSH;\n        break;\n    case PROTOCOL_BINARY_CMD_APPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_APPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_PREPENDQ:\n        c->cmd = PROTOCOL_BINARY_CMD_PREPEND;\n        break;\n    case PROTOCOL_BINARY_CMD_GETQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GET;\n        break;\n    case PROTOCOL_BINARY_CMD_GETKQ:\n        c->cmd = PROTOCOL_BINARY_CMD_GETK;\n        break;\n    default:\n        c->noreply = false;\n    }\n\n    switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_VERSION:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, VERSION, 0, 0, strlen(VERSION));\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_FLUSH:\n            if (keylen == 0 && bodylen == extlen && (extlen == 0 || extlen == 4)) {\n                bin_read_key(c, bin_read_flush_exptime, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_NOOP:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SET: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_ADD: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            if (extlen == 8 && keylen != 0 && bodylen >= (keylen + 8)) {\n                bin_read_key(c, bin_reading_set_header, 8);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_GETQ:  /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GET:   /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETKQ: /* FALLTHROUGH */\n        case PROTOCOL_BINARY_CMD_GETK:\n            if (extlen == 0 && bodylen == keylen && keylen > 0) {\n                bin_read_key(c, bin_reading_get_key, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_DELETE:\n            if (keylen > 0 && extlen == 0 && bodylen == keylen) {\n                bin_read_key(c, bin_reading_del_header, extlen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_INCREMENT:\n        case PROTOCOL_BINARY_CMD_DECREMENT:\n            if (keylen > 0 && extlen == 20 && bodylen == (keylen + extlen)) {\n                bin_read_key(c, bin_reading_incr_header, 20);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_APPEND:\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            if (keylen > 0 && extlen == 0) {\n                bin_read_key(c, bin_reading_set_header, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_STAT:\n            if (extlen == 0) {\n                bin_read_key(c, bin_reading_stat, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_QUIT:\n            if (keylen == 0 && extlen == 0 && bodylen == 0) {\n                write_bin_response(c, NULL, 0, 0, 0);\n                c->write_and_go = conn_closing;\n                if (c->noreply) {\n                    conn_set_state(c, conn_closing);\n                }\n            } else {\n                protocol_error = 1;\n            }\n            break;\n       case PROTOCOL_BINARY_CMD_TAP_CONNECT:\n            if (settings.engine.v1->get_tap_iterator == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet,\n                               c->binary_header.request.bodylen);\n            }\n            break;\n       case PROTOCOL_BINARY_CMD_TAP_MUTATION:\n       case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_START:\n       case PROTOCOL_BINARY_CMD_TAP_CHECKPOINT_END:\n       case PROTOCOL_BINARY_CMD_TAP_DELETE:\n       case PROTOCOL_BINARY_CMD_TAP_FLUSH:\n       case PROTOCOL_BINARY_CMD_TAP_OPAQUE:\n       case PROTOCOL_BINARY_CMD_TAP_VBUCKET_SET:\n            if (settings.engine.v1->tap_notify == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet, c->binary_header.request.bodylen);\n            }\n            break;\n#ifdef SASL_ENABLED\n        case PROTOCOL_BINARY_CMD_SASL_LIST_MECHS:\n            if (extlen == 0 && keylen == 0 && bodylen == 0) {\n                bin_list_sasl_mechs(c);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        case PROTOCOL_BINARY_CMD_SASL_AUTH:\n        case PROTOCOL_BINARY_CMD_SASL_STEP:\n            if (extlen == 0 && keylen != 0) {\n                bin_read_key(c, bin_reading_sasl_auth, 0);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n#endif\n        case PROTOCOL_BINARY_CMD_VERBOSITY:\n            if (extlen == 4 && keylen == 0 && bodylen == 4) {\n                bin_read_chunk(c, bin_reading_packet,\n                               c->binary_header.request.bodylen);\n            } else {\n                protocol_error = 1;\n            }\n            break;\n        default:\n            if (settings.engine.v1->unknown_command == NULL) {\n                write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_UNKNOWN_COMMAND,\n                                bodylen);\n            } else {\n                bin_read_chunk(c, bin_reading_packet, c->binary_header.request.bodylen);\n            }\n    }\n\n    if (protocol_error)\n        handle_binary_protocol_error(c);\n}\n\nstatic void process_bin_update(conn *c) {\n    char *key;\n    uint16_t nkey;\n    uint32_t vlen;\n    item *it = NULL;\n    protocol_binary_request_set* req = binary_get_request(c);\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n\n    /* fix byteorder in the request */\n    req->message.body.flags = req->message.body.flags;\n    rel_time_t expiration = ntohl(req->message.body.expiration);\n\n    vlen = c->binary_header.request.bodylen - (nkey + c->binary_header.request.extlen);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        const char *prefix;\n        if (c->cmd == PROTOCOL_BINARY_CMD_ADD) {\n            prefix = \"ADD\";\n        } else if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            prefix = \"SET\";\n        } else {\n            prefix = \"REPLACE\";\n        }\n\n        size_t nw;\n        nw = key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                     prefix, key, nkey);\n\n        if (nw != -1) {\n            if (snprintf(buffer + nw, sizeof(buffer) - nw,\n                         \" Value len is %d\\n\", vlen)) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\",\n                                                buffer);\n            }\n        }\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    item_info info = { .nvalue = 1 };\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen,\n                                           req->message.body.flags,\n                                           expiration);\n        if (ret == ENGINE_SUCCESS && !settings.engine.v1->get_item_info(settings.engine.v0,\n                                                                        c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            return;\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, c->binary_header.request.cas);\n\n        switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_ADD:\n            c->store_op = OPERATION_ADD;\n            break;\n        case PROTOCOL_BINARY_CMD_SET:\n            c->store_op = OPERATION_SET;\n            break;\n        case PROTOCOL_BINARY_CMD_REPLACE:\n            c->store_op = OPERATION_REPLACE;\n            break;\n        default:\n            assert(0);\n        }\n\n        if (c->binary_header.request.cas != 0) {\n            c->store_op = OPERATION_CAS;\n        }\n\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        conn_set_state(c, conn_nread);\n        c->substate = bin_read_set_value;\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_E2BIG, vlen);\n        } else {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        }\n\n        /*\n         * Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET (but only if cas matches).\n         * Anywhere else too?\n         */\n        if (c->cmd == PROTOCOL_BINARY_CMD_SET) {\n            /* @todo fix this for the ASYNC interface! */\n            settings.engine.v1->remove(settings.engine.v0, c, key, nkey,\n                                       ntohll(req->message.header.request.cas),\n                                       c->binary_header.request.vbucket);\n        }\n\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n    }\n}\n\nstatic void process_bin_append_prepend(conn *c) {\n    char *key;\n    int nkey;\n    int vlen;\n    item *it = NULL;\n\n    assert(c != NULL);\n\n    key = binary_get_key(c);\n    nkey = c->binary_header.request.keylen;\n    vlen = c->binary_header.request.bodylen - nkey;\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"Value len is %d\\n\", vlen);\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    item_info info = { .nvalue = 1 };\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen, 0, 0);\n        if (ret == ENGINE_SUCCESS && !settings.engine.v1->get_item_info(settings.engine.v0,\n                                                                        c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINTERNAL, 0);\n            return;\n        }\n    }\n\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, c->binary_header.request.cas);\n\n        switch (c->cmd) {\n        case PROTOCOL_BINARY_CMD_APPEND:\n            c->store_op = OPERATION_APPEND;\n            break;\n        case PROTOCOL_BINARY_CMD_PREPEND:\n            c->store_op = OPERATION_PREPEND;\n            break;\n        default:\n            assert(0);\n        }\n\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        conn_set_state(c, conn_nread);\n        c->substate = bin_read_set_value;\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_E2BIG, vlen);\n        } else {\n            write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_ENOMEM, vlen);\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n    }\n}\n\nstatic void process_bin_flush(conn *c) {\n    time_t exptime = 0;\n    protocol_binary_request_flush* req = binary_get_request(c);\n\n    if (c->binary_header.request.extlen == sizeof(req->message.body)) {\n        exptime = ntohl(req->message.body.expiration);\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"%d: flush %ld\", c->sfd,\n                                        (long)exptime);\n    }\n\n    ENGINE_ERROR_CODE ret;\n    ret = settings.engine.v1->flush(settings.engine.v0, c, exptime);\n\n    if (ret == ENGINE_SUCCESS) {\n        write_bin_response(c, NULL, 0, 0, 0);\n    } else if (ret == ENGINE_ENOTSUP) {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_SUPPORTED, 0);\n    } else {\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n    STATS_NOKEY(c, cmd_flush);\n}\n\nstatic void process_bin_delete(conn *c) {\n    protocol_binary_request_delete* req = binary_get_request(c);\n\n    char* key = binary_get_key(c);\n    size_t nkey = c->binary_header.request.keylen;\n\n    assert(c != NULL);\n\n    if (settings.verbose > 1) {\n        char buffer[1024];\n        if (key_to_printable_buffer(buffer, sizeof(buffer), c->sfd, true,\n                                    \"DELETE\", key, nkey) != -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c, \"%s\\n\",\n                                            buffer);\n        }\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        if (settings.detail_enabled) {\n            stats_prefix_record_delete(key, nkey);\n        }\n        ret = settings.engine.v1->remove(settings.engine.v0, c, key, nkey,\n                                         ntohll(req->message.header.request.cas),\n                                         c->binary_header.request.vbucket);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        write_bin_response(c, NULL, 0, 0, 0);\n        SLAB_INCR(c, delete_hits, key, nkey);\n        break;\n    case ENGINE_KEY_EEXISTS:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_EEXISTS, 0);\n        break;\n    case ENGINE_KEY_ENOENT:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_KEY_ENOENT, 0);\n        STATS_INCR(c, delete_misses, key, nkey);\n        break;\n    case ENGINE_NOT_MY_VBUCKET:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_NOT_MY_VBUCKET, 0);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    default:\n        write_bin_packet(c, PROTOCOL_BINARY_RESPONSE_EINVAL, 0);\n    }\n}\n\nstatic void complete_nread_binary(conn *c) {\n    assert(c != NULL);\n    assert(c->cmd >= 0);\n\n    switch(c->substate) {\n    case bin_reading_set_header:\n        if (c->cmd == PROTOCOL_BINARY_CMD_APPEND ||\n                c->cmd == PROTOCOL_BINARY_CMD_PREPEND) {\n            process_bin_append_prepend(c);\n        } else {\n            process_bin_update(c);\n        }\n        break;\n    case bin_read_set_value:\n        complete_update_bin(c);\n        break;\n    case bin_reading_get_key:\n        process_bin_get(c);\n        break;\n    case bin_reading_stat:\n        process_bin_stat(c);\n        break;\n    case bin_reading_del_header:\n        process_bin_delete(c);\n        break;\n    case bin_reading_incr_header:\n        complete_incr_bin(c);\n        break;\n    case bin_read_flush_exptime:\n        process_bin_flush(c);\n        break;\n    case bin_reading_sasl_auth:\n        process_bin_sasl_auth(c);\n        break;\n    case bin_reading_sasl_auth_data:\n        process_bin_complete_sasl_auth(c);\n        break;\n    case bin_reading_packet:\n        if (c->binary_header.request.magic == PROTOCOL_BINARY_RES) {\n            RESPONSE_HANDLER handler;\n            handler = response_handlers[c->binary_header.request.opcode];\n            if (handler) {\n                handler(c);\n            } else {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                       \"%d: ERROR: Unsupported response packet received: %u\\n\",\n                        c->sfd, (unsigned int)c->binary_header.request.opcode);\n                conn_set_state(c, conn_closing);\n            }\n        } else {\n            process_bin_packet(c);\n        }\n        break;\n    default:\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                \"Not handling substate %d\\n\", c->substate);\n        abort();\n    }\n}\n\nstatic void reset_cmd_handler(conn *c) {\n    c->sbytes = 0;\n    c->ascii_cmd = NULL;\n    c->cmd = -1;\n    c->substate = bin_no_state;\n    if(c->item != NULL) {\n        settings.engine.v1->release(settings.engine.v0, c, c->item);\n        c->item = NULL;\n    }\n    conn_shrink(c);\n    if (c->rbytes > 0) {\n        conn_set_state(c, conn_parse_cmd);\n    } else {\n        conn_set_state(c, conn_waiting);\n    }\n}\n\nstatic ENGINE_ERROR_CODE ascii_response_handler(const void *cookie,\n                                                int nbytes,\n                                                const char *dta)\n{\n    conn *c = (conn*)cookie;\n    if (!grow_dynamic_buffer(c, nbytes)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                    \"<%d ERROR: Failed to allocate memory for response\\n\",\n                    c->sfd);\n        }\n        return ENGINE_ENOMEM;\n    }\n\n    char *buf = c->dynamic_buffer.buffer + c->dynamic_buffer.offset;\n    memcpy(buf, dta, nbytes);\n    c->dynamic_buffer.offset += nbytes;\n\n    return ENGINE_SUCCESS;\n}\n\nstatic void complete_nread_ascii(conn *c) {\n    if (c->ascii_cmd != NULL) {\n        c->ewouldblock = false;\n        switch (c->ascii_cmd->execute(c->ascii_cmd->cookie, c, 0, NULL,\n                                      ascii_response_handler)) {\n        case ENGINE_SUCCESS:\n            if (c->dynamic_buffer.buffer != NULL) {\n                write_and_free(c, c->dynamic_buffer.buffer,\n                               c->dynamic_buffer.offset);\n                c->dynamic_buffer.buffer = NULL;\n            } else {\n                conn_set_state(c, conn_new_cmd);\n            }\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            break;\n        case ENGINE_DISCONNECT:\n        default:\n            conn_set_state(c, conn_closing);\n        }\n    } else {\n        complete_update_ascii(c);\n    }\n}\n\nstatic void complete_nread(conn *c) {\n    assert(c != NULL);\n    assert(c->protocol == ascii_prot\n           || c->protocol == binary_prot);\n\n    if (c->protocol == ascii_prot) {\n        complete_nread_ascii(c);\n    } else if (c->protocol == binary_prot) {\n        complete_nread_binary(c);\n    }\n}\n\n#define COMMAND_TOKEN 0\n#define SUBCOMMAND_TOKEN 1\n#define KEY_TOKEN 1\n\n#define MAX_TOKENS 30\n\n/*\n * Tokenize the command string by replacing whitespace with '\\0' and update\n * the token array tokens with pointer to start of each token and length.\n * Returns total number of tokens.  The last valid token is the terminal\n * token (value points to the first unprocessed character of the string and\n * length zero).\n *\n * Usage example:\n *\n *  while(tokenize_command(command, ncommand, tokens, max_tokens) > 0) {\n *      for(int ix = 0; tokens[ix].length != 0; ix++) {\n *          ...\n *      }\n *      ncommand = tokens[ix].value - command;\n *      command  = tokens[ix].value;\n *   }\n */\nstatic size_t tokenize_command(char *command, token_t *tokens, const size_t max_tokens) {\n    char *s, *e;\n    size_t ntokens = 0;\n\n    assert(command != NULL && tokens != NULL && max_tokens > 1);\n\n    for (s = e = command; ntokens < max_tokens - 1; ++e) {\n        if (*e == ' ') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n                *e = '\\0';\n            }\n            s = e + 1;\n        }\n        else if (*e == '\\0') {\n            if (s != e) {\n                tokens[ntokens].value = s;\n                tokens[ntokens].length = e - s;\n                ntokens++;\n            }\n\n            break; /* string end */\n        }\n    }\n\n    /*\n     * If we scanned the whole string, the terminal value pointer is null,\n     * otherwise it is the first unprocessed character.\n     */\n    tokens[ntokens].value =  *e == '\\0' ? NULL : e;\n    tokens[ntokens].length = 0;\n    ntokens++;\n\n    return ntokens;\n}\n\n#ifdef INNODB_MEMCACHED\nstatic void detokenize(token_t *tokens, size_t ntokens, char **out, int *nbytes)\n#else\nstatic void detokenize(token_t *tokens, int ntokens, char **out, int *nbytes)\n#endif\n{\n    int i, nb;\n    char *buf, *p;\n\n    nb = ntokens; // account for spaces, which is ntokens-1, plus the null\n    for (i = 0; i < ntokens; ++i) {\n        nb += tokens[i].length;\n    }\n\n    buf = malloc(nb * sizeof(char));\n    if (buf != NULL) {\n        p = buf;\n        for (i = 0; i < ntokens; ++i) {\n            memcpy(p, tokens[i].value, tokens[i].length);\n            p += tokens[i].length;\n            *p = ' ';\n            p++;\n        }\n        buf[nb - 1] = '\\0';\n        *nbytes = nb - 1;\n        *out = buf;\n    }\n}\n\n\n/* set up a connection to write a buffer then free it, used for stats */\nstatic void write_and_free(conn *c, char *buf, int bytes) {\n    if (buf) {\n        c->write_and_free = buf;\n        c->wcurr = buf;\n        c->wbytes = bytes;\n        conn_set_state(c, conn_write);\n        c->write_and_go = conn_new_cmd;\n    } else {\n        out_string(c, \"SERVER_ERROR out of memory writing stats\");\n    }\n}\n\nstatic inline bool set_noreply_maybe(conn *c, token_t *tokens, size_t ntokens)\n{\n    int noreply_index = ntokens - 2;\n\n    /*\n      NOTE: this function is not the first place where we are going to\n      send the reply.  We could send it instead from process_command()\n      if the request line has wrong number of tokens.  However parsing\n      malformed line for \"noreply\" option is not reliable anyway, so\n      it can't be helped.\n    */\n    if (tokens[noreply_index].value\n        && strcmp(tokens[noreply_index].value, \"noreply\") == 0) {\n        c->noreply = true;\n    }\n    return c->noreply;\n}\n\nvoid append_stat(const char *name, ADD_STAT add_stats, conn *c,\n                 const char *fmt, ...) {\n    char val_str[STAT_VAL_LEN];\n    int vlen;\n    va_list ap;\n\n    assert(name);\n    assert(add_stats);\n    assert(c);\n    assert(fmt);\n\n    va_start(ap, fmt);\n    vlen = vsnprintf(val_str, sizeof(val_str) - 1, fmt, ap);\n    va_end(ap);\n\n    add_stats(name, strlen(name), val_str, vlen, c);\n}\n\ninline static void process_stats_detail(conn *c, const char *command) {\n    assert(c != NULL);\n\n    if (settings.allow_detailed) {\n        if (strcmp(command, \"on\") == 0) {\n            settings.detail_enabled = 1;\n            out_string(c, \"OK\");\n        }\n        else if (strcmp(command, \"off\") == 0) {\n            settings.detail_enabled = 0;\n            out_string(c, \"OK\");\n        }\n        else if (strcmp(command, \"dump\") == 0) {\n            int len;\n            char *stats = stats_prefix_dump(&len);\n            write_and_free(c, stats, len);\n        }\n        else {\n            out_string(c, \"CLIENT_ERROR usage: stats detail on|off|dump\");\n        }\n    }\n    else {\n        out_string(c, \"CLIENT_ERROR detailed stats disabled\");\n    }\n}\n\nstatic void aggregate_callback(void *in, void *out) {\n    struct thread_stats *out_thread_stats = out;\n    struct independent_stats *in_independent_stats = in;\n    threadlocal_stats_aggregate(in_independent_stats->thread_stats,\n                                out_thread_stats);\n}\n\n/* return server specific stats only */\nstatic void server_stats(ADD_STAT add_stats, conn *c, bool aggregate) {\n    pid_t pid = getpid();\n    rel_time_t now = current_time;\n\n    struct thread_stats thread_stats;\n    threadlocal_stats_clear(&thread_stats);\n\n    if (aggregate && settings.engine.v1->aggregate_stats != NULL) {\n        settings.engine.v1->aggregate_stats(settings.engine.v0,\n                                            (const void *)c,\n                                            aggregate_callback,\n                                            &thread_stats);\n    } else {\n        threadlocal_stats_aggregate(get_independent_stats(c)->thread_stats,\n                                    &thread_stats);\n    }\n\n    struct slab_stats slab_stats;\n    slab_stats_aggregate(&thread_stats, &slab_stats);\n\n#ifndef __WIN32__\n    struct rusage usage;\n    getrusage(RUSAGE_SELF, &usage);\n#endif\n\n    STATS_LOCK();\n\n    APPEND_STAT(\"pid\", \"%lu\", (long)pid);\n    APPEND_STAT(\"uptime\", \"%u\", now);\n    APPEND_STAT(\"time\", \"%ld\", now + (long)process_started);\n    APPEND_STAT(\"version\", \"%s\", VERSION);\n    APPEND_STAT(\"libevent\", \"%s\", event_get_version());\n    APPEND_STAT(\"pointer_size\", \"%d\", (int)(8 * sizeof(void *)));\n\n#ifndef __WIN32__\n    append_stat(\"rusage_user\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_utime.tv_sec,\n                (long)usage.ru_utime.tv_usec);\n    append_stat(\"rusage_system\", add_stats, c, \"%ld.%06ld\",\n                (long)usage.ru_stime.tv_sec,\n                (long)usage.ru_stime.tv_usec);\n#endif\n\n    APPEND_STAT(\"daemon_connections\", \"%u\", stats.daemon_conns);\n    APPEND_STAT(\"curr_connections\", \"%u\", stats.curr_conns);\n    APPEND_STAT(\"total_connections\", \"%u\", stats.total_conns);\n    APPEND_STAT(\"connection_structures\", \"%u\", stats.conn_structs);\n    APPEND_STAT(\"cmd_get\", \"%\"PRIu64, thread_stats.cmd_get);\n    APPEND_STAT(\"cmd_set\", \"%\"PRIu64, slab_stats.cmd_set);\n    APPEND_STAT(\"cmd_flush\", \"%\"PRIu64, thread_stats.cmd_flush);\n    APPEND_STAT(\"auth_cmds\", \"%\"PRIu64, thread_stats.auth_cmds);\n    APPEND_STAT(\"auth_errors\", \"%\"PRIu64, thread_stats.auth_errors);\n    APPEND_STAT(\"get_hits\", \"%\"PRIu64, slab_stats.get_hits);\n    APPEND_STAT(\"get_misses\", \"%\"PRIu64, thread_stats.get_misses);\n    APPEND_STAT(\"delete_misses\", \"%\"PRIu64, thread_stats.delete_misses);\n    APPEND_STAT(\"delete_hits\", \"%\"PRIu64, slab_stats.delete_hits);\n    APPEND_STAT(\"incr_misses\", \"%\"PRIu64, thread_stats.incr_misses);\n    APPEND_STAT(\"incr_hits\", \"%\"PRIu64, thread_stats.incr_hits);\n    APPEND_STAT(\"decr_misses\", \"%\"PRIu64, thread_stats.decr_misses);\n    APPEND_STAT(\"decr_hits\", \"%\"PRIu64, thread_stats.decr_hits);\n    APPEND_STAT(\"cas_misses\", \"%\"PRIu64, thread_stats.cas_misses);\n    APPEND_STAT(\"cas_hits\", \"%\"PRIu64, slab_stats.cas_hits);\n    APPEND_STAT(\"cas_badval\", \"%\"PRIu64, slab_stats.cas_badval);\n    APPEND_STAT(\"bytes_read\", \"%\"PRIu64, thread_stats.bytes_read);\n    APPEND_STAT(\"bytes_written\", \"%\"PRIu64, thread_stats.bytes_written);\n    APPEND_STAT(\"limit_maxbytes\", \"%\"PRIu64, settings.maxbytes);\n    APPEND_STAT(\"accepting_conns\", \"%u\",  is_listen_disabled() ? 0 : 1);\n    APPEND_STAT(\"listen_disabled_num\", \"%\"PRIu64, get_listen_disabled_num());\n    APPEND_STAT(\"rejected_conns\", \"%\" PRIu64, (unsigned long long)stats.rejected_conns);\n    APPEND_STAT(\"threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"conn_yields\", \"%\" PRIu64, (unsigned long long)thread_stats.conn_yields);\n    STATS_UNLOCK();\n\n    /*\n     * Add tap stats (only if non-zero)\n     */\n    struct tap_stats ts;\n    pthread_mutex_lock(&tap_stats.mutex);\n    ts = tap_stats;\n    pthread_mutex_unlock(&tap_stats.mutex);\n\n    if (ts.sent.connect) {\n        APPEND_STAT(\"tap_connect_sent\", \"%\"PRIu64, ts.sent.connect);\n    }\n    if (ts.sent.mutation) {\n        APPEND_STAT(\"tap_mutation_sent\", \"%\"PRIu64, ts.sent.mutation);\n    }\n    if (ts.sent.checkpoint_start) {\n        APPEND_STAT(\"tap_checkpoint_start_sent\", \"%\"PRIu64, ts.sent.checkpoint_start);\n    }\n    if (ts.sent.checkpoint_end) {\n        APPEND_STAT(\"tap_checkpoint_end_sent\", \"%\"PRIu64, ts.sent.checkpoint_end);\n    }\n    if (ts.sent.delete) {\n        APPEND_STAT(\"tap_delete_sent\", \"%\"PRIu64, ts.sent.delete);\n    }\n    if (ts.sent.flush) {\n        APPEND_STAT(\"tap_flush_sent\", \"%\"PRIu64, ts.sent.flush);\n    }\n    if (ts.sent.opaque) {\n        APPEND_STAT(\"tap_opaque_sent\", \"%\"PRIu64, ts.sent.opaque);\n    }\n    if (ts.sent.vbucket_set) {\n        APPEND_STAT(\"tap_vbucket_set_sent\", \"%\"PRIu64,\n                    ts.sent.vbucket_set);\n    }\n    if (ts.received.connect) {\n        APPEND_STAT(\"tap_connect_received\", \"%\"PRIu64, ts.received.connect);\n    }\n    if (ts.received.mutation) {\n        APPEND_STAT(\"tap_mutation_received\", \"%\"PRIu64, ts.received.mutation);\n    }\n    if (ts.received.checkpoint_start) {\n        APPEND_STAT(\"tap_checkpoint_start_received\", \"%\"PRIu64, ts.received.checkpoint_start);\n    }\n    if (ts.received.checkpoint_end) {\n        APPEND_STAT(\"tap_checkpoint_end_received\", \"%\"PRIu64, ts.received.checkpoint_end);\n    }\n    if (ts.received.delete) {\n        APPEND_STAT(\"tap_delete_received\", \"%\"PRIu64, ts.received.delete);\n    }\n    if (ts.received.flush) {\n        APPEND_STAT(\"tap_flush_received\", \"%\"PRIu64, ts.received.flush);\n    }\n    if (ts.received.opaque) {\n        APPEND_STAT(\"tap_opaque_received\", \"%\"PRIu64, ts.received.opaque);\n    }\n    if (ts.received.vbucket_set) {\n        APPEND_STAT(\"tap_vbucket_set_received\", \"%\"PRIu64,\n                    ts.received.vbucket_set);\n    }\n}\n\nstatic void process_stat_settings(ADD_STAT add_stats, void *c) {\n    assert(add_stats);\n    APPEND_STAT(\"maxbytes\", \"%u\", (unsigned int)settings.maxbytes);\n    APPEND_STAT(\"maxconns\", \"%d\", settings.maxconns);\n    APPEND_STAT(\"tcpport\", \"%d\", settings.port);\n    APPEND_STAT(\"udpport\", \"%d\", settings.udpport);\n    APPEND_STAT(\"inter\", \"%s\", settings.inter ? settings.inter : \"NULL\");\n    APPEND_STAT(\"verbosity\", \"%d\", settings.verbose);\n    APPEND_STAT(\"oldest\", \"%lu\", (unsigned long)settings.oldest_live);\n    APPEND_STAT(\"evictions\", \"%s\", settings.evict_to_free ? \"on\" : \"off\");\n    APPEND_STAT(\"domain_socket\", \"%s\",\n                settings.socketpath ? settings.socketpath : \"NULL\");\n    APPEND_STAT(\"umask\", \"%o\", settings.access);\n    APPEND_STAT(\"growth_factor\", \"%.2f\", settings.factor);\n    APPEND_STAT(\"chunk_size\", \"%d\", settings.chunk_size);\n    APPEND_STAT(\"num_threads\", \"%d\", settings.num_threads);\n    APPEND_STAT(\"num_threads_per_udp\", \"%d\", settings.num_threads_per_udp);\n    APPEND_STAT(\"stat_key_prefix\", \"%c\", settings.prefix_delimiter);\n    APPEND_STAT(\"detail_enabled\", \"%s\",\n                settings.detail_enabled ? \"yes\" : \"no\");\n    APPEND_STAT(\"allow_detailed\", \"%s\",\n                settings.allow_detailed ? \"yes\" : \"no\");\n    APPEND_STAT(\"reqs_per_event\", \"%d\", settings.reqs_per_event);\n    APPEND_STAT(\"reqs_per_tap_event\", \"%d\", settings.reqs_per_tap_event);\n    APPEND_STAT(\"cas_enabled\", \"%s\", settings.use_cas ? \"yes\" : \"no\");\n    APPEND_STAT(\"tcp_backlog\", \"%d\", settings.backlog);\n    APPEND_STAT(\"binding_protocol\", \"%s\",\n                prot_text(settings.binding_protocol));\n#ifdef SASL_ENABLED\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", \"yes\");\n#else\n    APPEND_STAT(\"auth_enabled_sasl\", \"%s\", \"no\");\n#endif\n\n#ifdef ENABLE_ISASL\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"isasl\");\n#elif defined(ENABLE_SASL)\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"cyrus\");\n#else\n    APPEND_STAT(\"auth_sasl_engine\", \"%s\", \"none\");\n#endif\n    APPEND_STAT(\"auth_required_sasl\", \"%s\", settings.require_sasl ? \"yes\" : \"no\");\n    APPEND_STAT(\"item_size_max\", \"%d\", settings.item_size_max);\n    APPEND_STAT(\"topkeys\", \"%d\", settings.topkeys);\n\n    for (EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n         ptr != NULL;\n         ptr = ptr->next) {\n        APPEND_STAT(\"extension\", \"%s\", ptr->get_name());\n    }\n\n    APPEND_STAT(\"logger\", \"%s\", settings.extensions.logger->get_name());\n\n    for (EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *ptr = settings.extensions.ascii;\n         ptr != NULL;\n         ptr = ptr->next) {\n        APPEND_STAT(\"ascii_extension\", \"%s\", ptr->get_name(ptr->cookie));\n    }\n}\n\nstatic char *process_stat(conn *c, token_t *tokens, const size_t ntokens) {\n    const char *subcommand = tokens[SUBCOMMAND_TOKEN].value;\n    c->dynamic_buffer.offset = 0;\n\n    if (ntokens == 2) {\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            server_stats(&append_stats, c, false);\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c,\n                                                NULL, 0, &append_stats);\n            if (ret == ENGINE_EWOULDBLOCK) {\n                c->ewouldblock = true;\n                return c->rcurr + 5;\n            }\n        }\n    } else if (strcmp(subcommand, \"reset\") == 0) {\n        stats_reset(c);\n        out_string(c, \"RESET\");\n        return NULL;\n    } else if (strcmp(subcommand, \"detail\") == 0) {\n        /* NOTE: how to tackle detail with binary? */\n        if (ntokens < 4) {\n            process_stats_detail(c, \"\");  /* outputs the error message */\n        } else {\n            process_stats_detail(c, tokens[2].value);\n        }\n        /* Output already generated */\n        return NULL;\n    } else if (strcmp(subcommand, \"settings\") == 0) {\n        process_stat_settings(&append_stats, c);\n    } else if (strcmp(subcommand, \"cachedump\") == 0) {\n        char *buf = NULL;\n        unsigned int bytes = 0, id, limit = 0;\n\n        if (ntokens < 5) {\n            out_string(c, \"CLIENT_ERROR bad command line\");\n            return NULL;\n        }\n\n        if (!safe_strtoul(tokens[2].value, &id) ||\n            !safe_strtoul(tokens[3].value, &limit)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return NULL;\n        }\n\n        if (id >= POWER_LARGEST) {\n            out_string(c, \"CLIENT_ERROR Illegal slab id\");\n            return NULL;\n        }\n\n#ifdef FUTURE\n        buf = item_cachedump(id, limit, &bytes);\n#endif\n        write_and_free(c, buf, bytes);\n        return NULL;\n    } else if (strcmp(subcommand, \"aggregate\") == 0) {\n        server_stats(&append_stats, c, true);\n    } else if (strcmp(subcommand, \"topkeys\") == 0) {\n        topkeys_t *tk = get_independent_stats(c)->topkeys;\n        if (tk != NULL) {\n            topkeys_stats(tk, c, current_time, append_stats);\n        } else {\n            out_string(c, \"ERROR\");\n            return NULL;\n        }\n    } else {\n        /* getting here means that the subcommand is either engine specific or\n           is invalid. query the engine and see. */\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            char *buf = NULL;\n            int nb = -1;\n            detokenize(&tokens[1], ntokens - 2, &buf, &nb);\n            ret = settings.engine.v1->get_stats(settings.engine.v0, c, buf,\n                                                nb, append_stats);\n            free(buf);\n        }\n\n        switch (ret) {\n        case ENGINE_SUCCESS:\n            append_stats(NULL, 0, NULL, 0, c);\n            write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n            c->dynamic_buffer.buffer = NULL;\n            break;\n        case ENGINE_ENOMEM:\n            out_string(c, \"SERVER_ERROR out of memory writing stats\");\n            break;\n        case ENGINE_DISCONNECT:\n            c->state = conn_closing;\n            break;\n        case ENGINE_ENOTSUP:\n            out_string(c, \"SERVER_ERROR not supported\");\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            return tokens[SUBCOMMAND_TOKEN].value;\n        default:\n            out_string(c, \"ERROR\");\n            break;\n        }\n\n        return NULL;\n    }\n\n    /* append terminator and start the transfer */\n    append_stats(NULL, 0, NULL, 0, c);\n\n    if (c->dynamic_buffer.buffer == NULL) {\n        out_string(c, \"SERVER_ERROR out of memory writing stats\");\n    } else {\n        write_and_free(c, c->dynamic_buffer.buffer, c->dynamic_buffer.offset);\n        c->dynamic_buffer.buffer = NULL;\n    }\n\n    return NULL;\n}\n\n/**\n * Get a suffix buffer and insert it into the list of used suffix buffers\n * @param c the connection object\n * @return a pointer to a new suffix buffer or NULL if allocation failed\n */\nstatic char *get_suffix_buffer(conn *c) {\n    if (c->suffixleft == c->suffixsize) {\n        char **new_suffix_list;\n        size_t sz = sizeof(char*) * c->suffixsize * 2;\n\n        new_suffix_list = realloc(c->suffixlist, sz);\n        if (new_suffix_list) {\n            c->suffixsize *= 2;\n            c->suffixlist = new_suffix_list;\n        } else {\n            if (settings.verbose > 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                        \"=%d Failed to resize suffix buffer\\n\", c->sfd);\n            }\n\n            return NULL;\n        }\n    }\n\n    char *suffix = cache_alloc(c->thread->suffix_cache);\n    if (suffix != NULL) {\n        *(c->suffixlist + c->suffixleft) = suffix;\n        ++c->suffixleft;\n    }\n\n    return suffix;\n}\n\n/* ntokens is overwritten here... shrug.. */\nstatic inline char* process_get_command(conn *c, token_t *tokens, size_t ntokens, bool return_cas) {\n    char *key;\n    size_t nkey;\n    int i = c->ileft;\n    item *it = NULL;\n    token_t *key_token = &tokens[KEY_TOKEN];\n    int range = false;\n    assert(c != NULL);\n\n    do {\n        while(key_token->length != 0) {\n            /* whether there are more keys to fetch */\n            bool next_get = (key_token + 1)->value;\n\n            key = key_token->value;\n            nkey = key_token->length;\n\n            /* whether this is a range search */\n            if (nkey >=  2 && key[0] == '@'\n\t\t&& (key[1] == '>' || key[1] == '<')) {\n\t\trange = true;\n            }\n\n            if(nkey > KEY_MAX_LENGTH) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return NULL;\n            }\n\n            ENGINE_ERROR_CODE ret = c->aiostat;\n            c->aiostat = ENGINE_SUCCESS;\n\n            if (ret == ENGINE_SUCCESS) {\n                ret = settings.engine.v1->get(settings.engine.v0, c, &it,\n\t\t\t\t\t      key, nkey, next_get);\n            }\n\n            switch (ret) {\n            case ENGINE_EWOULDBLOCK:\n                c->ewouldblock = true;\n                c->ileft = i;\n                return key;\n\n            case ENGINE_SUCCESS:\n                break;\n            case ENGINE_KEY_ENOENT:\n            default:\n                it = NULL;\n                break;\n            }\n\n            if (settings.detail_enabled) {\n                stats_prefix_record_get(key, nkey, NULL != it);\n            }\n\n            if (it) {\n                item_info info = { .nvalue = 1 };\n                if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it,\n                                                       &info)) {\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    out_string(c, \"SERVER_ERROR error getting item data\");\n                    break;\n                }\n\n                if (i >= c->isize) {\n                    item **new_list = realloc(c->ilist, sizeof(item *) * c->isize * 2);\n                    if (new_list) {\n                        c->isize *= 2;\n                        c->ilist = new_list;\n                    } else {\n                        settings.engine.v1->release(settings.engine.v0, c, it);\n                        break;\n                    }\n                }\n\n                /* Rebuild the suffix */\n                char *suffix = get_suffix_buffer(c);\n                if (suffix == NULL) {\n                    out_string(c, \"SERVER_ERROR out of memory rebuilding suffix\");\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    return NULL;\n                }\n                int suffix_len = snprintf(suffix, SUFFIX_SIZE,\n                                          \" %u %u\\r\\n\", htonl(info.flags),\n                                          info.nbytes);\n\n                /*\n                 * Construct the response. Each hit adds three elements to the\n                 * outgoing data list:\n                 *   \"VALUE \"\n                 *   key\n                 *   \" \" + flags + \" \" + data length + \"\\r\\n\" + data (with \\r\\n)\n                 */\n\n                MEMCACHED_COMMAND_GET(c->sfd, info.key, info.nkey,\n                                      info.nbytes, info.cas);\n                if (return_cas)\n                {\n\n                  char *cas = get_suffix_buffer(c);\n                  if (cas == NULL) {\n                    out_string(c, \"SERVER_ERROR out of memory making CAS suffix\");\n                    settings.engine.v1->release(settings.engine.v0, c, it);\n                    return NULL;\n                  }\n                  int cas_len = snprintf(cas, SUFFIX_SIZE, \" %\"PRIu64\"\\r\\n\",\n                                         info.cas);\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, info.key, info.nkey) != 0 ||\n                      add_iov(c, suffix, suffix_len - 2) != 0 ||\n                      add_iov(c, cas, cas_len) != 0 ||\n                      add_iov(c, info.value[0].iov_base, info.value[0].iov_len) != 0 ||\n                      add_iov(c, \"\\r\\n\", 2) != 0)\n                      {\n                          settings.engine.v1->release(settings.engine.v0, c, it);\n                          break;\n                      }\n                }\n                else\n                {\n                  if (add_iov(c, \"VALUE \", 6) != 0 ||\n                      add_iov(c, info.key, info.nkey) != 0 ||\n                      add_iov(c, suffix, suffix_len) != 0 ||\n                      add_iov(c, info.value[0].iov_base, info.value[0].iov_len) != 0 ||\n                      add_iov(c, \"\\r\\n\", 2) != 0)\n                      {\n                          settings.engine.v1->release(settings.engine.v0, c, it);\n                          break;\n                      }\n                }\n\n\n                if (settings.verbose > 1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                    \">%d sending key %s\\n\",\n                                                    c->sfd, info.key);\n                }\n\n                /* item_get() has incremented it->refcount for us */\n                STATS_HIT(c, get, key, nkey);\n                *(c->ilist + i) = it;\n                i++;\n\n            } else {\n                STATS_MISS(c, get, key, nkey);\n                MEMCACHED_COMMAND_GET(c->sfd, key, nkey, -1, 0);\n            }\n\n            if (!range) {\n\t\tkey_token++;\n            } else {\n\t\tif (ret == ENGINE_KEY_ENOENT) {\n\t\t\tkey_token->value = NULL;\n\t\t}\n\t\tbreak;\n\t    }\n        }\n\n        /*\n         * If the command string hasn't been fully processed, get the next set\n         * of tokens.\n         */\n        if(key_token->value != NULL) {\n            ntokens = tokenize_command(key_token->value, tokens, MAX_TOKENS);\n            key_token = tokens;\n        }\n\n    } while(key_token->value != NULL);\n\n    c->icurr = c->ilist;\n    c->ileft = i;\n    c->suffixcurr = c->suffixlist;\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \">%d END\\n\", c->sfd);\n    }\n\n    /*\n        If the loop was terminated because of out-of-memory, it is not\n        reliable to add END\\r\\n to the buffer, because it might not end\n        in \\r\\n. So we send SERVER_ERROR instead.\n    */\n    if (key_token->value != NULL || add_iov(c, \"END\\r\\n\", 5) != 0\n        || (IS_UDP(c->transport) && build_udp_headers(c) != 0)) {\n        out_string(c, \"SERVER_ERROR out of memory writing get response\");\n    }\n    else {\n        conn_set_state(c, conn_mwrite);\n        c->msgcurr = 0;\n    }\n\n    return NULL;\n}\n\nstatic void process_update_command(conn *c, token_t *tokens, const size_t ntokens, ENGINE_STORE_OPERATION store_op, bool handle_cas) {\n    char *key;\n    size_t nkey;\n    unsigned int flags;\n    int32_t exptime_int = 0;\n    time_t exptime;\n    int vlen = 0;\n    uint64_t req_cas_id=0;\n    item *it = NULL;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (! (safe_strtoul(tokens[2].value, (uint32_t *)&flags)\n           && safe_strtol(tokens[3].value, &exptime_int)\n           && safe_strtol(tokens[4].value, (int32_t *)&vlen))) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    /* Negative expire values not allowed */\n\n    if (exptime_int < 0) {\n        out_string(c, \"CLIENT_ERROR Invalid expire time\");\n        return;\n    }\n\n    /* Ubuntu 8.04 breaks when I pass exptime to safe_strtol */\n    exptime = exptime_int;\n\n    // does cas value exist?\n    if (handle_cas) {\n        if (!safe_strtoull(tokens[5].value, &req_cas_id)) {\n            out_string(c, \"CLIENT_ERROR bad command line format\");\n            return;\n        }\n    }\n\n    if (vlen < 0) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return;\n    }\n\n    if (settings.detail_enabled) {\n        stats_prefix_record_set(key, nkey);\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->allocate(settings.engine.v0, c,\n                                           &it, key, nkey,\n                                           vlen, htonl(flags), exptime);\n    }\n\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        item_set_cas(c, it, req_cas_id);\n        if (!settings.engine.v1->get_item_info(settings.engine.v0, c, it, &info)) {\n            settings.engine.v1->release(settings.engine.v0, c, it);\n            out_string(c, \"SERVER_ERROR error getting item data\");\n            break;\n        }\n        c->item = it;\n        c->ritem = info.value[0].iov_base;\n        c->rlbytes = vlen;\n        c->store_op = store_op;\n        conn_set_state(c, conn_nread);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    default:\n        if (ret == ENGINE_E2BIG) {\n            out_string(c, \"SERVER_ERROR object too large for cache\");\n        } else {\n            out_string(c, \"SERVER_ERROR out of memory storing object\");\n        }\n        /* swallow the data line */\n        c->write_and_go = conn_swallow;\n        c->sbytes = vlen + 2;\n\n        /* Avoid stale data persisting in cache because we failed alloc.\n         * Unacceptable for SET. Anywhere else too? */\n        if (store_op == OPERATION_SET) {\n            settings.engine.v1->remove(settings.engine.v0, c, key, nkey, 0, 0);\n        }\n    }\n}\n\nstatic char* process_arithmetic_command(conn *c, token_t *tokens, const size_t ntokens, const bool incr) {\n\n    uint64_t delta;\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n\n    if (tokens[KEY_TOKEN].length > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (!safe_strtoull(tokens[2].value, &delta)) {\n        out_string(c, \"CLIENT_ERROR invalid numeric delta argument\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    uint64_t cas;\n    uint64_t result = 0;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->arithmetic(settings.engine.v0, c, key, nkey,\n                                             incr, false, delta, 0, 0, &cas,\n                                             &result, 0);\n    }\n\n    char temp[INCR_MAX_STORAGE_LEN];\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        if (incr) {\n            STATS_INCR(c, incr_hits, key, nkey);\n        } else {\n            STATS_INCR(c, decr_hits, key, nkey);\n        }\n        snprintf(temp, sizeof(temp), \"%\"PRIu64, result);\n        out_string(c, temp);\n        break;\n    case ENGINE_KEY_ENOENT:\n        if (incr) {\n            STATS_INCR(c, incr_misses, key, nkey);\n        } else {\n            STATS_INCR(c, decr_misses, key, nkey);\n        }\n        out_string(c, \"NOT_FOUND\");\n        break;\n    case ENGINE_ENOMEM:\n        out_string(c, \"SERVER_ERROR out of memory\");\n        break;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    case ENGINE_EINVAL:\n        out_string(c, \"CLIENT_ERROR cannot increment or decrement non-numeric value\");\n        break;\n    case ENGINE_NOT_STORED:\n        out_string(c, \"SERVER_ERROR failed to store item\");\n        break;\n    case ENGINE_DISCONNECT:\n        c->state = conn_closing;\n        break;\n    case ENGINE_ENOTSUP:\n        out_string(c, \"SERVER_ERROR not supported\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return key;\n    default:\n        abort();\n    }\n\n    return NULL;\n}\n\nstatic char *process_delete_command(conn *c, token_t *tokens,\n                                    const size_t ntokens) {\n    char *key;\n    size_t nkey;\n\n    assert(c != NULL);\n\n    if (ntokens > 3) {\n        bool hold_is_zero = strcmp(tokens[KEY_TOKEN+1].value, \"0\") == 0;\n        bool sets_noreply = set_noreply_maybe(c, tokens, ntokens);\n        bool valid = (ntokens == 4 && (hold_is_zero || sets_noreply))\n            || (ntokens == 5 && hold_is_zero && sets_noreply);\n        if (!valid) {\n            out_string(c, \"CLIENT_ERROR bad command line format.  \"\n                       \"Usage: delete <key> [noreply]\");\n            return NULL;\n        }\n    }\n\n    key = tokens[KEY_TOKEN].value;\n    nkey = tokens[KEY_TOKEN].length;\n\n    if (nkey > KEY_MAX_LENGTH) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->remove(settings.engine.v0, c,\n                                         key, nkey, 0, 0);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"DELETED\");\n        SLAB_INCR(c, delete_hits, key, nkey);\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return key;\n    case ENGINE_TMPFAIL:\n        out_string(c, \"SERVER_ERROR temporary failure\");\n        break;\n    default:\n        out_string(c, \"NOT_FOUND\");\n        STATS_INCR(c, delete_misses, key, nkey);\n    }\n\n    if (ret != ENGINE_EWOULDBLOCK && settings.detail_enabled) {\n        stats_prefix_record_delete(key, nkey);\n    }\n    return NULL;\n}\n\nstatic char *process_bind_command(conn *c, token_t *tokens,\n                                  const size_t ntokens) {\n    char *name;\n    size_t name_len;\n\n    assert(c != NULL);\n\n    if (ntokens > 3) {\n        out_string(c, \"CLIENT_ERROR bad command line format.  \"\n                      \"Usage: bind <table_id_name>\");\n        return NULL;\n    }\n\n    name = tokens[KEY_TOKEN].value;\n    name_len = tokens[KEY_TOKEN].length;\n\n    if (name_len > KEY_MAX_LENGTH || name_len == 0) {\n        out_string(c, \"CLIENT_ERROR bad command line format\");\n        return NULL;\n    }\n\n    ENGINE_ERROR_CODE ret = c->aiostat;\n    c->aiostat = ENGINE_SUCCESS;\n    c->ewouldblock = false;\n    if (ret == ENGINE_SUCCESS) {\n        ret = settings.engine.v1->bind(settings.engine.v0, c,\n                                       name, name_len);\n    }\n\n    /* For some reason the SLAB_INCR tries to access this... */\n    item_info info = { .nvalue = 1 };\n    switch (ret) {\n    case ENGINE_SUCCESS:\n        out_string(c, \"SUCCEED\");\n        break;\n    case ENGINE_EWOULDBLOCK:\n        c->ewouldblock = true;\n        return name;\n    case ENGINE_TMPFAIL:\n    default:\n        out_string(c, \"NOT_FOUND\");\n    }\n\n    return NULL;\n}\n\nstatic void process_verbosity_command(conn *c, token_t *tokens, const size_t ntokens) {\n    unsigned int level;\n\n    assert(c != NULL);\n\n    set_noreply_maybe(c, tokens, ntokens);\n    if (c->noreply && ntokens == 3) {\n        /* \"verbosity noreply\" is not according to the correct syntax */\n        c->noreply = false;\n        out_string(c, \"ERROR\");\n        return;\n    }\n\n    if (safe_strtoul(tokens[1].value, &level)) {\n        settings.verbose = level > MAX_VERBOSITY_LEVEL ? MAX_VERBOSITY_LEVEL : level;\n        perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n        out_string(c, \"OK\");\n    } else {\n        out_string(c, \"ERROR\");\n    }\n}\n\nstatic char* process_command(conn *c, char *command) {\n\n    token_t tokens[MAX_TOKENS];\n    size_t ntokens;\n    int comm;\n    char *ret = NULL;\n\n    assert(c != NULL);\n\n    MEMCACHED_PROCESS_COMMAND_START(c->sfd, c->rcurr, c->rbytes);\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                        \"<%d %s\\n\", c->sfd, command);\n    }\n\n    /*\n     * for commands set/add/replace, we build an item and read the data\n     * directly into it, then continue in nread_complete().\n     */\n\n    if (c->ewouldblock) {\n        /*\n         * If we are retrying after the engine has completed a pending io for\n         * this command, skip add_msghdr() etc and clear the ewouldblock flag.\n         */\n        c->ewouldblock = false;\n    } else {\n        c->msgcurr = 0;\n        c->msgused = 0;\n        c->iovused = 0;\n        if (add_msghdr(c) != 0) {\n            out_string(c, \"SERVER_ERROR out of memory preparing response\");\n            return NULL;\n        }\n    }\n\n    ntokens = tokenize_command(command, tokens, MAX_TOKENS);\n    if (ntokens >= 3 &&\n        ((strcmp(tokens[COMMAND_TOKEN].value, \"get\") == 0) ||\n         (strcmp(tokens[COMMAND_TOKEN].value, \"bget\") == 0))) {\n\n        ret = process_get_command(c, tokens, ntokens, false);\n\n    } else if ((ntokens == 6 || ntokens == 7) &&\n               ((strcmp(tokens[COMMAND_TOKEN].value, \"add\") == 0 && (comm = (int)OPERATION_ADD)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"set\") == 0 && (comm = (int)OPERATION_SET)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"replace\") == 0 && (comm = (int)OPERATION_REPLACE)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"prepend\") == 0 && (comm = (int)OPERATION_PREPEND)) ||\n                (strcmp(tokens[COMMAND_TOKEN].value, \"append\") == 0 && (comm = (int)OPERATION_APPEND)) )) {\n\n        process_update_command(c, tokens, ntokens, (ENGINE_STORE_OPERATION)comm, false);\n\n    } else if ((ntokens == 7 || ntokens == 8) && (strcmp(tokens[COMMAND_TOKEN].value, \"cas\") == 0 && (comm = (int)OPERATION_CAS))) {\n\n        process_update_command(c, tokens, ntokens, (ENGINE_STORE_OPERATION)comm, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"incr\") == 0)) {\n\n        ret = process_arithmetic_command(c, tokens, ntokens, 1);\n\n    } else if (ntokens >= 3 && (strcmp(tokens[COMMAND_TOKEN].value, \"gets\") == 0)) {\n\n        ret = process_get_command(c, tokens, ntokens, true);\n\n    } else if ((ntokens == 4 || ntokens == 5) && (strcmp(tokens[COMMAND_TOKEN].value, \"decr\") == 0)) {\n\n        ret = process_arithmetic_command(c, tokens, ntokens, 0);\n\n    } else if (ntokens >= 3 && ntokens <= 5 && (strcmp(tokens[COMMAND_TOKEN].value, \"delete\") == 0)) {\n\n        ret = process_delete_command(c, tokens, ntokens);\n\n    } else if (ntokens == 3 && (strcmp(tokens[COMMAND_TOKEN].value, \"bind\") == 0)) {\n\n        ret = process_bind_command(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"stats\") == 0)) {\n\n        ret = process_stat(c, tokens, ntokens);\n\n    } else if (ntokens >= 2 && ntokens <= 4 && (strcmp(tokens[COMMAND_TOKEN].value, \"flush_all\") == 0)) {\n        time_t exptime;\n\n        set_noreply_maybe(c, tokens, ntokens);\n\n        if (ntokens == (c->noreply ? 3 : 2)) {\n            exptime = 0;\n        } else {\n            exptime = strtol(tokens[1].value, NULL, 10);\n            if(errno == ERANGE) {\n                out_string(c, \"CLIENT_ERROR bad command line format\");\n                return NULL;\n            }\n        }\n\n        ENGINE_ERROR_CODE ret = c->aiostat;\n        c->aiostat = ENGINE_SUCCESS;\n        c->ewouldblock = false;\n        if (ret == ENGINE_SUCCESS) {\n            ret = settings.engine.v1->flush(settings.engine.v0, c, exptime);\n        }\n\n        switch (ret) {\n        case  ENGINE_SUCCESS:\n            out_string(c, \"OK\");\n            break;\n        case ENGINE_ENOTSUP:\n            out_string(c, \"SERVER_ERROR not supported\");\n            break;\n        case ENGINE_EWOULDBLOCK:\n            c->ewouldblock = true;\n            return c->rcurr + 9;\n        default:\n            out_string(c, \"SERVER_ERROR failed to flush cache\");\n        }\n\n        if (ret != ENGINE_EWOULDBLOCK) {\n            STATS_NOKEY(c, cmd_flush);\n        }\n        return NULL;\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"version\") == 0)) {\n\n        out_string(c, \"VERSION \" VERSION);\n\n    } else if (ntokens == 2 && (strcmp(tokens[COMMAND_TOKEN].value, \"quit\") == 0)) {\n\n        conn_set_state(c, conn_closing);\n\n    } else if ((ntokens == 3 || ntokens == 4) && (strcmp(tokens[COMMAND_TOKEN].value, \"verbosity\") == 0)) {\n        process_verbosity_command(c, tokens, ntokens);\n    } else if (settings.extensions.ascii != NULL) {\n        EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *cmd;\n        size_t nbytes = 0;\n        char *ptr = NULL;\n\n        if (ntokens > 0) {\n            if (ntokens == MAX_TOKENS) {\n                out_string(c, \"ERROR too many arguments\");\n                return NULL;\n            }\n\n            if (tokens[ntokens - 1].length == 0) {\n                --ntokens;\n            }\n        }\n\n        for (cmd = settings.extensions.ascii; cmd != NULL; cmd = cmd->next) {\n            if (cmd->accept(cmd->cookie, c, ntokens, tokens, &nbytes, &ptr)) {\n                break;\n            }\n        }\n\n        if (cmd == NULL) {\n            out_string(c, \"ERROR unknown command\");\n        } else if (nbytes == 0) {\n            switch (cmd->execute(cmd->cookie, c, ntokens, tokens,\n                                 ascii_response_handler)) {\n            case ENGINE_SUCCESS:\n                if (c->dynamic_buffer.buffer != NULL) {\n                    write_and_free(c, c->dynamic_buffer.buffer,\n                                   c->dynamic_buffer.offset);\n                    c->dynamic_buffer.buffer = NULL;\n                } else {\n                    conn_set_state(c, conn_new_cmd);\n                }\n                break;\n            case ENGINE_EWOULDBLOCK:\n                c->ewouldblock = true;\n                ret = tokens[KEY_TOKEN].value;;\n                break;\n            case ENGINE_DISCONNECT:\n            default:\n                conn_set_state(c, conn_closing);\n\n            }\n        } else {\n            c->rlbytes = nbytes;\n            c->ritem = ptr;\n            c->ascii_cmd = cmd;\n            /* NOT SUPPORTED YET! */\n            conn_set_state(c, conn_nread);\n        }\n    } else {\n        out_string(c, \"ERROR\");\n    }\n    return ret;\n}\n\n/*\n * if we have a complete line in the buffer, process it.\n */\nstatic int try_read_command(conn *c) {\n    assert(c != NULL);\n    assert(c->rcurr <= (c->rbuf + c->rsize));\n    assert(c->rbytes > 0);\n\n    if (c->protocol == negotiating_prot || c->transport == udp_transport)  {\n        if ((unsigned char)c->rbuf[0] == (unsigned char)PROTOCOL_BINARY_REQ) {\n            c->protocol = binary_prot;\n        } else {\n            c->protocol = ascii_prot;\n        }\n\n        if (settings.verbose > 1) {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                    \"%d: Client using the %s protocol\\n\", c->sfd,\n                    prot_text(c->protocol));\n        }\n    }\n\n    if (c->protocol == binary_prot) {\n        /* Do we have the complete packet header? */\n        if (c->rbytes < sizeof(c->binary_header)) {\n            /* need more data! */\n            return 0;\n        } else {\n#ifdef NEED_ALIGN\n            if (((long)(c->rcurr)) % 8 != 0) {\n                /* must realign input buffer */\n                memmove(c->rbuf, c->rcurr, c->rbytes);\n                c->rcurr = c->rbuf;\n                if (settings.verbose > 1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                             \"%d: Realign input buffer\\n\", c->sfd);\n                }\n            }\n#endif\n            protocol_binary_request_header* req;\n            req = (protocol_binary_request_header*)c->rcurr;\n\n            if (settings.verbose > 1) {\n                /* Dump the packet before we convert it to host order */\n                char buffer[1024];\n                ssize_t nw;\n                nw = bytes_to_output_string(buffer, sizeof(buffer), c->sfd,\n                                            true, \"Read binary protocol data:\",\n                                            (const char*)req->bytes,\n                                            sizeof(req->bytes));\n                if (nw != -1) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                                    \"%s\", buffer);\n                }\n            }\n\n            c->binary_header = *req;\n            c->binary_header.request.keylen = ntohs(req->request.keylen);\n            c->binary_header.request.bodylen = ntohl(req->request.bodylen);\n            c->binary_header.request.vbucket = ntohs(req->request.vbucket);\n            c->binary_header.request.cas = ntohll(req->request.cas);\n\n\n            if (c->binary_header.request.magic != PROTOCOL_BINARY_REQ &&\n                !(c->binary_header.request.magic == PROTOCOL_BINARY_RES &&\n                  response_handlers[c->binary_header.request.opcode])) {\n                if (settings.verbose) {\n                    if (c->binary_header.request.magic != PROTOCOL_BINARY_RES) {\n                        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                              \"%d: Invalid magic:  %x\\n\", c->sfd,\n                              c->binary_header.request.magic);\n                    } else {\n                        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                              \"%d: ERROR: Unsupported response packet received: %u\\n\",\n                              c->sfd, (unsigned int)c->binary_header.request.opcode);\n\n                    }\n                }\n                conn_set_state(c, conn_closing);\n                return -1;\n            }\n\n            c->msgcurr = 0;\n            c->msgused = 0;\n            c->iovused = 0;\n            if (add_msghdr(c) != 0) {\n                out_string(c, \"SERVER_ERROR out of memory\");\n                return 0;\n            }\n\n            c->cmd = c->binary_header.request.opcode;\n            c->keylen = c->binary_header.request.keylen;\n            c->opaque = c->binary_header.request.opaque;\n            /* clear the returned cas value */\n            c->cas = 0;\n\n            dispatch_bin_command(c);\n\n            c->rbytes -= sizeof(c->binary_header);\n            c->rcurr += sizeof(c->binary_header);\n        }\n    } else {\n        char *el, *cont, *left, lb;\n\n        if (c->rbytes == 0) {\n            return 0;\n        }\n\n        el = memchr(c->rcurr, '\\n', c->rbytes);\n        if (!el) {\n            if (c->rbytes > 1024) {\n                /*\n                 * We didn't have a '\\n' in the first k. This _has_ to be a\n                 * large multiget, if not we should just nuke the connection.\n                 */\n                char *ptr = c->rcurr;\n                while (*ptr == ' ') { /* ignore leading whitespaces */\n                    ++ptr;\n                }\n\n                if (ptr - c->rcurr > 100 ||\n                    (strncmp(ptr, \"get \", 4) && strncmp(ptr, \"gets \", 5))) {\n\n                    conn_set_state(c, conn_closing);\n                    return 1;\n                }\n            }\n\n            return 0;\n        }\n        cont = el + 1;\n        if ((el - c->rcurr) > 1 && *(el - 1) == '\\r') {\n            el--;\n        }\n        lb = *el;\n        *el = '\\0';\n\n        assert(cont <= (c->rcurr + c->rbytes));\n\n        LIBEVENT_THREAD *thread = c->thread;\n        LOCK_THREAD(thread);\n        left = process_command(c, c->rcurr);\n        if (c->ewouldblock) {\n            unregister_event(c);\n        }\n        UNLOCK_THREAD(thread);\n\n        if (left != NULL) {\n            /*\n             * We have not processed the entire command. This happens\n             * when the engine returns ENGINE_EWOULDBLOCK for one of the\n             * keys in a get/gets request.\n             */\n            assert (left <= el);\n\n            int count = strlen(c->rcurr);\n            if ((c->rcurr + count) == left) {\n                // Retry the entire command\n                cont = c->rcurr;\n            } else {\n                left -= (count + 1);\n                cont = left;\n                assert(cont >= c->rcurr);\n                if (cont > c->rcurr) {\n                    memmove(cont, c->rcurr, count);\n                }\n            }\n\n            /* de-tokenize the command */\n            while ((left = memchr(left, '\\0', el - left)) != NULL) {\n                *left = ' ';\n            }\n            *el = lb;\n        }\n\n        c->rbytes -= (cont - c->rcurr);\n        c->rcurr = cont;\n\n        assert(c->rcurr <= (c->rbuf + c->rsize));\n    }\n\n    return 1;\n}\n\n/*\n * read a UDP request.\n */\nstatic enum try_read_result try_read_udp(conn *c) {\n    int res;\n\n    assert(c != NULL);\n\n    c->request_addr_size = sizeof(c->request_addr);\n    res = recvfrom(c->sfd, c->rbuf, c->rsize,\n                   0, (struct sockaddr *)&c->request_addr, &c->request_addr_size);\n    if (res > 8) {\n        unsigned char *buf = (unsigned char *)c->rbuf;\n        STATS_ADD(c, bytes_read, res);\n\n        /* Beginning of UDP packet is the request ID; save it. */\n        c->request_id = buf[0] * 256 + buf[1];\n\n        /* If this is a multi-packet request, drop it. */\n        if (buf[4] != 0 || buf[5] != 1) {\n            out_string(c, \"SERVER_ERROR multi-packet request not supported\");\n            return READ_NO_DATA_RECEIVED;\n        }\n\n        /* Don't care about any of the rest of the header. */\n        res -= 8;\n        memmove(c->rbuf, c->rbuf + 8, res);\n\n        c->rbytes += res;\n        c->rcurr = c->rbuf;\n        return READ_DATA_RECEIVED;\n    }\n    return READ_NO_DATA_RECEIVED;\n}\n\n/*\n * read from network as much as we can, handle buffer overflow and connection\n * close.\n * before reading, move the remaining incomplete fragment of a command\n * (if any) to the beginning of the buffer.\n *\n * To protect us from someone flooding a connection with bogus data causing\n * the connection to eat up all available memory, break out and start looking\n * at the data I've got after a number of reallocs...\n *\n * @return enum try_read_result\n */\nstatic enum try_read_result try_read_network(conn *c) {\n    enum try_read_result gotdata = READ_NO_DATA_RECEIVED;\n    int res;\n    int num_allocs = 0;\n    assert(c != NULL);\n\n    if (c->rcurr != c->rbuf) {\n        if (c->rbytes != 0) /* otherwise there's nothing to copy */\n            memmove(c->rbuf, c->rcurr, c->rbytes);\n        c->rcurr = c->rbuf;\n    }\n\n    while (1) {\n        if (c->rbytes >= c->rsize) {\n            if (num_allocs == 4) {\n                return gotdata;\n            }\n            ++num_allocs;\n            char *new_rbuf = realloc(c->rbuf, c->rsize * 2);\n            if (!new_rbuf) {\n                if (settings.verbose > 0) {\n                 settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                          \"Couldn't realloc input buffer\\n\");\n                }\n                c->rbytes = 0; /* ignore what we read */\n                out_string(c, \"SERVER_ERROR out of memory reading request\");\n                c->write_and_go = conn_closing;\n                return READ_MEMORY_ERROR;\n            }\n            c->rcurr = c->rbuf = new_rbuf;\n            c->rsize *= 2;\n        }\n\n        int avail = c->rsize - c->rbytes;\n        res = recv(c->sfd, c->rbuf + c->rbytes, avail, 0);\n        if (res > 0) {\n            STATS_ADD(c, bytes_read, res);\n            gotdata = READ_DATA_RECEIVED;\n            c->rbytes += res;\n            if (res == avail) {\n                continue;\n            } else {\n                break;\n            }\n        }\n        if (res == 0) {\n            return READ_ERROR;\n        }\n        if (res == -1) {\n            if (errno == EAGAIN || errno == EWOULDBLOCK) {\n                break;\n            }\n            return READ_ERROR;\n        }\n    }\n    return gotdata;\n}\n\nbool register_event(conn *c, struct timeval *timeout) {\n#ifdef DEBUG\n    assert(!c->registered_in_libevent);\n#endif\n\n    if (event_add(&c->event, timeout) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING,\n                                        NULL,\n                                        \"Failed to add connection to libevent: %s\",\n                                        strerror(errno));\n        return false;\n    }\n\n#ifdef DEBUG\n    c->registered_in_libevent = true;\n#endif\n\n    return true;\n}\n\nbool unregister_event(conn *c) {\n#ifdef DEBUG\n    assert(c->registered_in_libevent);\n#endif\n\n    if (event_del(&c->event) == -1) {\n        return false;\n    }\n\n#ifdef DEBUG\n    c->registered_in_libevent = false;\n#endif\n\n    return true;\n}\n\n\nbool update_event(conn *c, const int new_flags) {\n    assert(c != NULL);\n\n    struct event_base *base = c->event.ev_base;\n    if (c->ev_flags == new_flags)\n        return true;\n\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                    \"Updated event for %d to read=%s, write=%s\\n\",\n                                    c->sfd, (new_flags & EV_READ ? \"yes\" : \"no\"),\n                                    (new_flags & EV_WRITE ? \"yes\" : \"no\"));\n\n    if (!unregister_event(c)) {\n        return false;\n    }\n\n    event_set(&c->event, c->sfd, new_flags, event_handler, (void *)c);\n    event_base_set(base, &c->event);\n    c->ev_flags = new_flags;\n\n    return register_event(c, NULL);\n}\n\n/*\n * Transmit the next chunk of data from our list of msgbuf structures.\n *\n * Returns:\n *   TRANSMIT_COMPLETE   All done writing.\n *   TRANSMIT_INCOMPLETE More data remaining to write.\n *   TRANSMIT_SOFT_ERROR Can't write any more right now.\n *   TRANSMIT_HARD_ERROR Can't write (c->state is set to conn_closing)\n */\nstatic enum transmit_result transmit(conn *c) {\n    assert(c != NULL);\n\n    if (c->msgcurr < c->msgused &&\n            c->msglist[c->msgcurr].msg_iovlen == 0) {\n        /* Finished writing the current msg; advance to the next. */\n        c->msgcurr++;\n    }\n    if (c->msgcurr < c->msgused) {\n        ssize_t res;\n        struct msghdr *m = &c->msglist[c->msgcurr];\n\n        res = sendmsg(c->sfd, m, 0);\n        if (res > 0) {\n            STATS_ADD(c, bytes_written, res);\n\n            /* We've written some of the data. Remove the completed\n               iovec entries from the list of pending writes. */\n            while (m->msg_iovlen > 0 && res >= m->msg_iov->iov_len) {\n                res -= m->msg_iov->iov_len;\n                m->msg_iovlen--;\n                m->msg_iov++;\n            }\n\n            /* Might have written just part of the last iovec entry;\n               adjust it so the next write will do the rest. */\n            if (res > 0) {\n                m->msg_iov->iov_base = (caddr_t)m->msg_iov->iov_base + res;\n                m->msg_iov->iov_len -= res;\n            }\n            return TRANSMIT_INCOMPLETE;\n        }\n        if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                            \"Couldn't update event\\n\");\n                }\n                conn_set_state(c, conn_closing);\n                return TRANSMIT_HARD_ERROR;\n            }\n            return TRANSMIT_SOFT_ERROR;\n        }\n        /* if res == 0 or res == -1 and error is not EAGAIN or EWOULDBLOCK,\n           we have a real error, on which we close the connection */\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"Failed to write, and not due to blocking: %s\",\n                                            strerror(errno));\n        }\n\n        if (IS_UDP(c->transport))\n            conn_set_state(c, conn_read);\n        else\n            conn_set_state(c, conn_closing);\n        return TRANSMIT_HARD_ERROR;\n    } else {\n        return TRANSMIT_COMPLETE;\n    }\n}\n\nbool conn_listening(conn *c)\n{\n    int sfd;\n    struct sockaddr_storage addr;\n    socklen_t addrlen = sizeof(addr);\n\n    if ((sfd = accept(c->sfd, (struct sockaddr *)&addr, &addrlen)) == -1) {\n        if (errno == EMFILE) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Too many open connections\\n\");\n            }\n            disable_listen();\n        } else if (errno != EAGAIN && errno != EWOULDBLOCK) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                            \"Failed to accept new client: %s\\n\",\n                                            strerror(errno));\n        }\n\n        return false;\n    }\n\n    STATS_LOCK();\n    int curr_conns = ++stats.curr_conns;\n    STATS_UNLOCK();\n\n    if (curr_conns >= settings.maxconns) {\n        STATS_LOCK();\n        ++stats.rejected_conns;\n        STATS_UNLOCK();\n\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Too many open connections\\n\");\n        }\n\n        safe_close(sfd);\n        return false;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return false;\n    }\n\n    dispatch_conn_new(sfd, conn_new_cmd, EV_READ | EV_PERSIST,\n                      DATA_BUFFER_SIZE, tcp_transport);\n\n    return false;\n}\n\n/**\n * Ship tap log to the other end. This state differs with all other states\n * in the way that it support full duplex dialog. We're listening to both read\n * and write events from libevent most of the time. If a read event occurs we\n * switch to the conn_read state to read and execute the input message (that would\n * be an ack message from the other side). If a write event occurs we continue to\n * send tap log to the other end.\n * @param c the tap connection to drive\n * @return true if we should continue to process work for this connection, false\n *              if we should start processing events for other connections.\n */\nbool conn_ship_log(conn *c) {\n    bool cont = false;\n\n    if (c->sfd == INVALID_SOCKET) {\n        return false;\n    }\n\n    short mask = EV_READ | EV_PERSIST | EV_WRITE;\n\n    if (c->which & EV_READ || c->rbytes > 0) {\n        if (c->rbytes > 0) {\n            if (try_read_command(c) == 0) {\n                conn_set_state(c, conn_read);\n            }\n        } else {\n            conn_set_state(c, conn_read);\n        }\n\n        // we're going to process something.. let's proceed\n        cont = true;\n\n        // We have a finite number of messages in the input queue\n        // so let's process all of them instead of backing off after\n        // reading a subset of them.\n        // Why? Because we've got every time we're calling ship_tap_log\n        // we try to send a chunk of items.. This means that if we end\n        // up in a situation where we're receiving a burst of nack messages\n        // we'll only process a subset of messages in our input queue,\n        // and it will slowly grow..\n        c->nevents = settings.reqs_per_tap_event;\n    } else if (c->which & EV_WRITE) {\n        --c->nevents;\n        if (c->nevents >= 0) {\n            LOCK_THREAD(c->thread);\n            c->ewouldblock = false;\n            ship_tap_log(c);\n            if (c->ewouldblock) {\n                mask = EV_READ | EV_PERSIST;\n            } else {\n                cont = true;\n            }\n            UNLOCK_THREAD(c->thread);\n        }\n    }\n\n    if (!update_event(c, mask)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO,\n                                            c, \"Couldn't update event\\n\");\n        }\n        conn_set_state(c, conn_closing);\n    }\n\n    return cont;\n}\n\nbool conn_waiting(conn *c) {\n    if (!update_event(c, EV_READ | EV_PERSIST)) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Couldn't update event\\n\");\n        }\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n    conn_set_state(c, conn_read);\n    return false;\n}\n\nbool conn_read(conn *c) {\n    int res = IS_UDP(c->transport) ? try_read_udp(c) : try_read_network(c);\n    switch (res) {\n    case READ_NO_DATA_RECEIVED:\n        conn_set_state(c, conn_waiting);\n        break;\n    case READ_DATA_RECEIVED:\n        conn_set_state(c, conn_parse_cmd);\n        break;\n    case READ_ERROR:\n        conn_set_state(c, conn_closing);\n        break;\n    case READ_MEMORY_ERROR: /* Failed to allocate more memory */\n        /* State already set by try_read_network */\n        break;\n    }\n\n    return true;\n}\n\nbool conn_parse_cmd(conn *c) {\n    if (try_read_command(c) == 0) {\n        /* wee need more data! */\n        conn_set_state(c, conn_waiting);\n    }\n\n    return !c->ewouldblock;\n}\n\nbool conn_new_cmd(conn *c) {\n    /* Only process nreqs at a time to avoid starving other connections */\n    --c->nevents;\n    if (c->nevents >= 0) {\n        reset_cmd_handler(c);\n    } else {\n        STATS_NOKEY(c, conn_yields);\n        if (c->rbytes > 0) {\n            /* We have already read in data into the input buffer,\n               so libevent will most likely not signal read events\n               on the socket (unless more data is available. As a\n               hack we should just put in a request to write data,\n               because that should be possible ;-)\n            */\n            if (!update_event(c, EV_WRITE | EV_PERSIST)) {\n                if (settings.verbose > 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_INFO,\n                                                    c, \"Couldn't update event\\n\");\n                }\n                conn_set_state(c, conn_closing);\n                return true;\n            }\n        }\n        return false;\n    }\n\n    return true;\n}\n\n\nbool conn_swallow(conn *c) {\n    ssize_t res;\n    /* we are reading sbytes and throwing them away */\n    if (c->sbytes == 0) {\n        conn_set_state(c, conn_new_cmd);\n        return true;\n    }\n\n    /* first check if we have leftovers in the conn_read buffer */\n    if (c->rbytes > 0) {\n        uint32_t tocopy = c->rbytes > c->sbytes ? c->sbytes : c->rbytes;\n        c->sbytes -= tocopy;\n        c->rcurr += tocopy;\n        c->rbytes -= tocopy;\n        return true;\n    }\n\n    /*  now try reading from the socket */\n    res = recv(c->sfd, c->rbuf, c->rsize > c->sbytes ? c->sbytes : c->rsize, 0);\n    if (res > 0) {\n        STATS_ADD(c, bytes_read, res);\n        c->sbytes -= res;\n        return true;\n    }\n    if (res == 0) { /* end of stream */\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n        if (!update_event(c, EV_READ | EV_PERSIST)) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't update event\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n        return false;\n    }\n\n    if (errno != ENOTCONN && errno != ECONNRESET) {\n        /* otherwise we have a real error, on which we close the connection */\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                        \"Failed to read, and not due to blocking (%s)\\n\",\n                                        strerror(errno));\n    }\n\n    conn_set_state(c, conn_closing);\n\n    return true;\n\n}\n\nbool conn_nread(conn *c) {\n    ssize_t res;\n\n    if (c->rlbytes == 0) {\n        LIBEVENT_THREAD *t = c->thread;\n        LOCK_THREAD(t);\n        bool block = c->ewouldblock = false;\n        complete_nread(c);\n        UNLOCK_THREAD(t);\n        /* Breaking this into two, as complete_nread may have\n           moved us to a different thread */\n        t = c->thread;\n        LOCK_THREAD(t);\n        if (c->ewouldblock) {\n            unregister_event(c);\n            block = true;\n        }\n        UNLOCK_THREAD(t);\n        return !block;\n    }\n    /* first check if we have leftovers in the conn_read buffer */\n    if (c->rbytes > 0) {\n        uint32_t tocopy = c->rbytes > c->rlbytes ? c->rlbytes : c->rbytes;\n        if (c->ritem != c->rcurr) {\n            memmove(c->ritem, c->rcurr, tocopy);\n        }\n        c->ritem += tocopy;\n        c->rlbytes -= tocopy;\n        c->rcurr += tocopy;\n        c->rbytes -= tocopy;\n        if (c->rlbytes == 0) {\n            return true;\n        }\n    }\n\n    /*  now try reading from the socket */\n    res = recv(c->sfd, c->ritem, c->rlbytes, 0);\n    if (res > 0) {\n        STATS_ADD(c, bytes_read, res);\n        if (c->rcurr == c->ritem) {\n            c->rcurr += res;\n        }\n        c->ritem += res;\n        c->rlbytes -= res;\n        return true;\n    }\n    if (res == 0) { /* end of stream */\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n\n#ifdef INNODB_MEMCACHED\n    /* MEMCACHED_RESOLVE: on solaris platform, when connect through\n    telnet and waiting for input from an \"add\" or \"set\" command,\n    it could have res == -1 and errno == 0. Thus causing early termination\n    Add \"!errno\" condition here to deal with this scenario for now */\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK || !errno)) {\n#else\n    if (res == -1 && (errno == EAGAIN || errno == EWOULDBLOCK)) {\n#endif /* INNODB_MEMCACHED */\n        if (!update_event(c, EV_READ | EV_PERSIST)) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't update event\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n        return false;\n    }\n\n    if (errno != ENOTCONN && errno != ECONNRESET) {\n        /* otherwise we have a real error, on which we close the connection */\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                                        \"Failed to read, and not due to blocking:\\n\"\n                                        \"errno: %d %s \\n\"\n                                        \"rcurr=%lx ritem=%lx rbuf=%lx rlbytes=%d rsize=%d\\n\",\n                                        errno, strerror(errno),\n                                        (long)c->rcurr, (long)c->ritem, (long)c->rbuf,\n                                        (int)c->rlbytes, (int)c->rsize);\n    }\n    conn_set_state(c, conn_closing);\n    return true;\n}\n\nbool conn_write(conn *c) {\n    /*\n     * We want to write out a simple response. If we haven't already,\n     * assemble it into a msgbuf list (this will be a single-entry\n     * list for TCP or a two-entry list for UDP).\n     */\n    if (c->iovused == 0 || (IS_UDP(c->transport) && c->iovused == 1)) {\n        if (add_iov(c, c->wcurr, c->wbytes) != 0) {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Couldn't build response\\n\");\n            }\n            conn_set_state(c, conn_closing);\n            return true;\n        }\n    }\n\n    return conn_mwrite(c);\n}\n\nbool conn_mwrite(conn *c) {\n    if (IS_UDP(c->transport) && c->msgcurr == 0 && build_udp_headers(c) != 0) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                            \"Failed to build UDP headers\\n\");\n        }\n        conn_set_state(c, conn_closing);\n        return true;\n    }\n\n    switch (transmit(c)) {\n    case TRANSMIT_COMPLETE:\n        if (c->state == conn_mwrite) {\n            while (c->ileft > 0) {\n                item *it = *(c->icurr);\n                settings.engine.v1->release(settings.engine.v0, c, it);\n                c->icurr++;\n                c->ileft--;\n            }\n            while (c->suffixleft > 0) {\n                char *suffix = *(c->suffixcurr);\n                cache_free(c->thread->suffix_cache, suffix);\n                c->suffixcurr++;\n                c->suffixleft--;\n            }\n            /* XXX:  I don't know why this wasn't the general case */\n            if(c->protocol == binary_prot) {\n                conn_set_state(c, c->write_and_go);\n            } else {\n                conn_set_state(c, conn_new_cmd);\n            }\n        } else if (c->state == conn_write) {\n            if (c->write_and_free) {\n                free(c->write_and_free);\n                c->write_and_free = 0;\n            }\n            conn_set_state(c, c->write_and_go);\n        } else {\n            if (settings.verbose > 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_INFO, c,\n                                                \"Unexpected state %d\\n\", c->state);\n            }\n            conn_set_state(c, conn_closing);\n        }\n        break;\n\n    case TRANSMIT_INCOMPLETE:\n    case TRANSMIT_HARD_ERROR:\n        break;                   /* Continue in state machine. */\n\n    case TRANSMIT_SOFT_ERROR:\n        return false;\n    }\n\n    return true;\n}\n\nbool conn_pending_close(conn *c) {\n    assert(c->sfd == INVALID_SOCKET);\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                    \"Awaiting clients to release the cookie (pending close for %p)\",\n                                    (void*)c);\n    LOCK_THREAD(c->thread);\n    c->thread->pending_io = list_remove(c->thread->pending_io, c);\n    if (!list_contains(c->thread->pending_close, c)) {\n        enlist_conn(c, &c->thread->pending_close);\n    }\n    UNLOCK_THREAD(c->thread);\n\n    /*\n     * tell the tap connection that we're disconnecting it now,\n     * but give it a grace period\n     */\n    perform_callbacks(ON_DISCONNECT, NULL, c);\n\n    /*\n     * disconnect callback may have changed the state for the object\n     * so we might complete the disconnect now\n     */\n    return c->state != conn_pending_close;\n}\n\nbool conn_immediate_close(conn *c) {\n    settings.extensions.logger->log(EXTENSION_LOG_DETAIL, c,\n                                    \"Immediate close of %p\",\n                                    (void*)c);\n    perform_callbacks(ON_DISCONNECT, NULL, c);\n    conn_close(c);\n\n    return false;\n}\n\nbool conn_closing(conn *c) {\n    if (IS_UDP(c->transport)) {\n        conn_cleanup(c);\n        return false;\n    }\n\n    // We don't want any network notifications anymore..\n    unregister_event(c);\n    safe_close(c->sfd);\n    c->sfd = INVALID_SOCKET;\n\n    if (c->refcount > 1) {\n        conn_set_state(c, conn_pending_close);\n    } else {\n        conn_set_state(c, conn_immediate_close);\n    }\n    return true;\n}\n\nbool conn_add_tap_client(conn *c) {\n    LIBEVENT_THREAD *tp = tap_thread;\n    LIBEVENT_THREAD *orig_thread = c->thread;\n\n    assert(orig_thread);\n    assert(orig_thread != tp);\n\n    c->ewouldblock = true;\n\n    unregister_event(c);\n\n    LOCK_THREAD(orig_thread);\n    /* Clean out the lists */\n    orig_thread->pending_io = list_remove(orig_thread->pending_io, c);\n    orig_thread->pending_close = list_remove(orig_thread->pending_close, c);\n\n    LOCK_THREAD(tp);\n    c->ev_flags = 0;\n    conn_set_state(c, conn_setup_tap_stream);\n    settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                    \"Moving %d conn from %p to %p\\n\",\n                                    c->sfd, c->thread, tp);\n    c->thread = tp;\n    c->event.ev_base = tp->base;\n    assert(c->next == NULL);\n    assert(c->list_state == 0);\n    enlist_conn(c, &tp->pending_io);\n\n    UNLOCK_THREAD(tp);\n\n    UNLOCK_THREAD(orig_thread);\n\n    notify_thread(tp);\n\n    return false;\n}\n\nbool conn_setup_tap_stream(conn *c) {\n    process_bin_tap_connect(c);\n    return true;\n}\n\nvoid event_handler(const int fd, const short which, void *arg) {\n    conn *c;\n\n    c = (conn *)arg;\n    assert(c != NULL);\n\n    if (memcached_shutdown) {\n        event_base_loopbreak(c->event.ev_base);\n        return ;\n    }\n\n    c->which = which;\n\n    /* sanity */\n    if (fd != c->sfd) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, c,\n                    \"Catastrophic: event fd doesn't match conn fd!\\n\");\n        }\n        conn_close(c);\n        return;\n    }\n\n    perform_callbacks(ON_SWITCH_CONN, c, c);\n\n    c->nevents = settings.reqs_per_event;\n    if (c->state == conn_ship_log) {\n        c->nevents = settings.reqs_per_tap_event;\n    }\n\n    LIBEVENT_THREAD *thr = c->thread;\n\n    // Do we have pending closes?\n    const size_t max_items = 256;\n    conn *pending_close[max_items];\n    size_t n_pending_close = 0;\n    if (thr != NULL) {\n        LOCK_THREAD(thr);\n        if (thr->pending_close && thr->last_checked != current_time) {\n            assert(!has_cycle(thr->pending_close));\n            thr->last_checked = current_time;\n\n            n_pending_close = list_to_array(pending_close, max_items,\n                                            &thr->pending_close);\n        }\n        UNLOCK_THREAD(thr);\n    }\n\n    if (settings.verbose) {\n        do {\n            settings.extensions.logger->log(EXTENSION_LOG_DEBUG, c,\n                                            \"%d - Running task: (%s)\\n\",\n                                            c->sfd, state_text(c->state));\n        } while (c->state(c));\n    } else {\n        while (c->state(c)) {\n            /* empty */\n        }\n    }\n\n    /* Close any connections pending close */\n    if (n_pending_close > 0) {\n        for (size_t i = 0; i < n_pending_close; ++i) {\n            conn *ce = pending_close[i];\n            if (ce->refcount == 1) {\n                settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                                                \"OK, time to nuke: %p\\n\",\n                                                (void*)ce);\n                conn_close(ce);\n            } else {\n                LOCK_THREAD(ce->thread);\n                enlist_conn(ce, &ce->thread->pending_close);\n                UNLOCK_THREAD(ce->thread);\n            }\n        }\n    }\n\n    if (thr != NULL) {\n        LOCK_THREAD(thr);\n        finalize_list(pending_close, n_pending_close);\n        UNLOCK_THREAD(thr);\n    }\n}\n\nstatic void dispatch_event_handler(int fd, short which, void *arg) {\n    char buffer[80];\n    ssize_t nr = recv(fd, buffer, sizeof(buffer), 0);\n\n    if (nr != -1 && is_listen_disabled()) {\n        bool enable = false;\n        pthread_mutex_lock(&listen_state.mutex);\n        listen_state.count -= nr;\n        if (listen_state.count <= 0) {\n            enable = true;\n            listen_state.disabled = false;\n        }\n        pthread_mutex_unlock(&listen_state.mutex);\n        if (enable) {\n            conn *next;\n            for (next = listen_conn; next; next = next->next) {\n                update_event(next, EV_READ | EV_PERSIST);\n                if (listen(next->sfd, settings.backlog) != 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"listen() failed\",\n                                                    strerror(errno));\n                }\n            }\n        }\n    }\n}\n\n\n\nstatic SOCKET new_socket(struct addrinfo *ai) {\n    SOCKET sfd;\n\n    sfd = socket(ai->ai_family, ai->ai_socktype, ai->ai_protocol);\n    if (sfd == INVALID_SOCKET) {\n        return INVALID_SOCKET;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return INVALID_SOCKET;\n    }\n\n    return sfd;\n}\n\n\n/*\n * Sets a socket's send buffer size to the maximum allowed by the system.\n */\nstatic void maximize_sndbuf(const int sfd) {\n    socklen_t intsize = sizeof(int);\n    int last_good = 0;\n    int min, max, avg;\n    int old_size;\n\n    /* Start with the default size. */\n    if (getsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&old_size, &intsize) != 0) {\n        if (settings.verbose > 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"getsockopt(SO_SNDBUF): %s\",\n                                            strerror(errno));\n        }\n\n        return;\n    }\n\n    /* Binary-search for the real maximum. */\n    min = old_size;\n    max = MAX_SENDBUF_SIZE;\n\n    while (min <= max) {\n        avg = ((unsigned int)(min + max)) / 2;\n        if (setsockopt(sfd, SOL_SOCKET, SO_SNDBUF, (void *)&avg, intsize) == 0) {\n            last_good = avg;\n            min = avg + 1;\n        } else {\n            max = avg - 1;\n        }\n    }\n\n    if (settings.verbose > 1) {\n        settings.extensions.logger->log(EXTENSION_LOG_DEBUG, NULL,\n                 \"<%d send buffer was %d, now %d\\n\", sfd, old_size, last_good);\n    }\n}\n\n\n\n/**\n * Create a socket and bind it to a specific port number\n * @param interface the interface to bind to\n * @param port the port number to bind to\n * @param transport the transport protocol (TCP / UDP)\n * @param portnumber_file A filepointer to write the port numbers to\n *        when they are successfully added to the list of ports we\n *        listen on.\n */\nstatic int server_socket(const char *interface,\n                         int port,\n                         enum network_transport transport,\n                         FILE *portnumber_file) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct addrinfo *ai;\n    struct addrinfo *next;\n    struct addrinfo hints = { .ai_flags = AI_PASSIVE,\n                              .ai_family = AF_UNSPEC };\n    char port_buf[NI_MAXSERV];\n    int error;\n    int success = 0;\n    int flags =1;\n    num_udp_socket = 0;\n\n    hints.ai_socktype = IS_UDP(transport) ? SOCK_DGRAM : SOCK_STREAM;\n\n    if (port == -1) {\n        port = 0;\n    }\n    snprintf(port_buf, sizeof(port_buf), \"%d\", port);\n    error= getaddrinfo(interface, port_buf, &hints, &ai);\n    if (error != 0) {\n        if (error != EAI_SYSTEM) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                     \"getaddrinfo(): %s\\n\", gai_strerror(error));\n        } else {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                     \"getaddrinfo(): %s\\n\", strerror(error));\n        }\n        return 1;\n    }\n\n    for (next= ai; next; next= next->ai_next) {\n        conn *listen_conn_add;\n        if ((sfd = new_socket(next)) == INVALID_SOCKET) {\n            /* getaddrinfo can return \"junk\" addresses,\n             * we make sure at least one works before erroring.\n             */\n            continue;\n        }\n\n#ifdef IPV6_V6ONLY\n        if (next->ai_family == AF_INET6) {\n            error = setsockopt(sfd, IPPROTO_IPV6, IPV6_V6ONLY, (char *) &flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(IPV6_V6ONLY): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                continue;\n            }\n        }\n#endif\n\n        setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n        if (IS_UDP(transport)) {\n            maximize_sndbuf(sfd);\n\t    udp_socket[num_udp_socket] = sfd;\n\t    num_udp_socket++;\n        } else {\n            error = setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(SO_KEEPALIVE): %s\",\n                                                strerror(errno));\n            }\n\n            error = setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(SO_LINGER): %s\",\n                                                strerror(errno));\n            }\n\n            error = setsockopt(sfd, IPPROTO_TCP, TCP_NODELAY, (void *)&flags, sizeof(flags));\n            if (error != 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"setsockopt(TCP_NODELAY): %s\",\n                                                strerror(errno));\n            }\n        }\n\n        if (bind(sfd, next->ai_addr, next->ai_addrlen) == SOCKET_ERROR) {\n            if (errno != EADDRINUSE) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"bind(): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            safe_close(sfd);\n            continue;\n        } else {\n            success++;\n            if (!IS_UDP(transport) && listen(sfd, settings.backlog) == SOCKET_ERROR) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                \"listen(): %s\",\n                                                strerror(errno));\n                safe_close(sfd);\n                freeaddrinfo(ai);\n                return 1;\n            }\n            if (portnumber_file != NULL &&\n                (next->ai_addr->sa_family == AF_INET ||\n                 next->ai_addr->sa_family == AF_INET6)) {\n                union {\n                    struct sockaddr_in in;\n                    struct sockaddr_in6 in6;\n                } my_sockaddr;\n                socklen_t len = sizeof(my_sockaddr);\n                if (getsockname(sfd, (struct sockaddr*)&my_sockaddr, &len)==0) {\n                    if (next->ai_addr->sa_family == AF_INET) {\n                        fprintf(portnumber_file, \"%s INET: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in.sin_port));\n                    } else {\n                        fprintf(portnumber_file, \"%s INET6: %u\\n\",\n                                IS_UDP(transport) ? \"UDP\" : \"TCP\",\n                                ntohs(my_sockaddr.in6.sin6_port));\n                    }\n                }\n            }\n        }\n\n        if (IS_UDP(transport)) {\n            int c;\n\n            for (c = 0; c < settings.num_threads_per_udp; c++) {\n                /* this is guaranteed to hit all threads because we round-robin */\n                dispatch_conn_new(sfd, conn_read, EV_READ | EV_PERSIST,\n                                  UDP_READ_BUFFER_SIZE, transport);\n                STATS_LOCK();\n                ++stats.curr_conns;\n                ++stats.daemon_conns;\n                STATS_UNLOCK();\n            }\n        } else {\n            if (!(listen_conn_add = conn_new(sfd, conn_listening,\n                                             EV_READ | EV_PERSIST, 1,\n                                             transport, main_base, NULL))) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"failed to create listening connection\\n\");\n                exit(EXIT_FAILURE);\n            }\n            listen_conn_add->next = listen_conn;\n            listen_conn = listen_conn_add;\n            STATS_LOCK();\n            ++stats.curr_conns;\n            ++stats.daemon_conns;\n            STATS_UNLOCK();\n        }\n    }\n\n    freeaddrinfo(ai);\n\n    /* Return zero iff we detected no errors in starting up connections */\n    return success == 0;\n}\n\nstatic int server_sockets(int port, enum network_transport transport,\n                          FILE *portnumber_file) {\n    if (settings.inter == NULL) {\n        return server_socket(settings.inter, port, transport, portnumber_file);\n    } else {\n        // tokenize them and bind to each one of them..\n        char *b;\n        int ret = 0;\n        char *list = strdup(settings.inter);\n\n        if (list == NULL) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                            \"Failed to allocate memory for parsing server interface string\\n\");\n            return 1;\n        }\n        for (char *p = strtok_r(list, \";,\", &b);\n             p != NULL;\n             p = strtok_r(NULL, \";,\", &b)) {\n            int the_port = port;\n\n            char *s = strchr(p, ':');\n            if (s != NULL) {\n                *s = '\\0';\n                ++s;\n                if (!safe_strtol(s, &the_port)) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"Invalid port number: \\\"%s\\\"\", s);\n                    return 1;\n                }\n            }\n            if (strcmp(p, \"*\") == 0) {\n                p = NULL;\n            }\n            ret |= server_socket(p, the_port, transport, portnumber_file);\n        }\n        free(list);\n        return ret;\n    }\n}\n\nstatic int new_socket_unix(void) {\n    int sfd;\n\n    if ((sfd = socket(AF_UNIX, SOCK_STREAM, 0)) == INVALID_SOCKET) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"socket(AF_UNIX, SOCK_STREAM, 0): %s\",\n                                        strerror(errno));\n        return INVALID_SOCKET;\n    }\n\n    if (evutil_make_socket_nonblocking(sfd) == -1) {\n        safe_close(sfd);\n        return INVALID_SOCKET;\n    }\n    return sfd;\n}\n\n/* this will probably not work on windows */\nstatic int server_socket_unix(const char *path, int access_mask) {\n    int sfd;\n    struct linger ling = {0, 0};\n    struct sockaddr_un addr;\n    struct stat tstat;\n    int flags =1;\n    int old_umask;\n\n    if (!path) {\n        return 1;\n    }\n\n    if ((sfd = new_socket_unix()) == -1) {\n        return 1;\n    }\n\n    /*\n     * Clean up a previous socket file if we left it around\n     */\n    if (lstat(path, &tstat) == 0) {\n        if (S_ISSOCK(tstat.st_mode))\n            unlink(path);\n    }\n\n    setsockopt(sfd, SOL_SOCKET, SO_REUSEADDR, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_KEEPALIVE, (void *)&flags, sizeof(flags));\n    setsockopt(sfd, SOL_SOCKET, SO_LINGER, (void *)&ling, sizeof(ling));\n\n    /*\n     * the memset call clears nonstandard fields in some impementations\n     * that otherwise mess things up.\n     */\n    memset(&addr, 0, sizeof(addr));\n\n    addr.sun_family = AF_UNIX;\n    strncpy(addr.sun_path, path, sizeof(addr.sun_path) - 1);\n    assert(strcmp(addr.sun_path, path) == 0);\n    old_umask = umask( ~(access_mask&0777));\n    if (bind(sfd, (struct sockaddr *)&addr, sizeof(addr)) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"bind(): %s\",\n                                        strerror(errno));\n        safe_close(sfd);\n        umask(old_umask);\n        return 1;\n    }\n    umask(old_umask);\n    if (listen(sfd, settings.backlog) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"listen(): %s\",\n                                        strerror(errno));\n        safe_close(sfd);\n        return 1;\n    }\n    if (!(listen_conn = conn_new(sfd, conn_listening,\n                                 EV_READ | EV_PERSIST, 1,\n                                 local_transport, main_base, NULL))) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"failed to create listening connection\\n\");\n        exit(EXIT_FAILURE);\n    }\n    STATS_LOCK();\n    ++stats.daemon_conns;\n    STATS_UNLOCK();\n\n    return 0;\n}\n\nstatic struct event clockevent;\n\n/* time-sensitive callers can call it by hand with this, outside the normal ever-1-second timer */\nstatic void set_current_time(void) {\n    struct timeval timer;\n\n    gettimeofday(&timer, NULL);\n    current_time = (rel_time_t) (timer.tv_sec - process_started);\n}\n\nstatic void clock_handler(const int fd, const short which, void *arg) {\n    struct timeval t = {.tv_sec = 1, .tv_usec = 0};\n    static bool initialized = false;\n\n    if (memcached_shutdown) {\n        event_base_loopbreak(main_base);\n        return ;\n    }\n\n    if (initialized) {\n        /* only delete the event if it's actually there. */\n        evtimer_del(&clockevent);\n    } else {\n        initialized = true;\n    }\n\n    evtimer_set(&clockevent, clock_handler, 0);\n    event_base_set(main_base, &clockevent);\n    evtimer_add(&clockevent, &t);\n\n    set_current_time();\n}\n\nstatic void usage(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\");\n    printf(\"-p <num>      TCP port number to listen on (default: 11211)\\n\"\n           \"-U <num>      UDP port number to listen on (default: 11211, 0 is off)\\n\"\n           \"-s <file>     UNIX socket path to listen on (disables network support)\\n\"\n           \"-a <mask>     access mask for UNIX socket, in octal (default: 0700)\\n\"\n           \"-l <addr>     interface to listen on (default: INADDR_ANY, all addresses)\\n\"\n           \"              <addr> may be specified as host:port. If you don't specify\\n\"\n           \"              a port number, the value you specified with -p or -U is\\n\"\n           \"              used. You may specify multiple addresses separated by comma\\n\"\n           \"              or by using -l multiple times\\n\"\n           \"-d            run as a daemon\\n\"\n           \"-r            maximize core file limit\\n\"\n           \"-u <username> assume identity of <username> (only when run as root)\\n\"\n           \"-m <num>      max memory to use for items in megabytes (default: 64 MB)\\n\"\n           \"-M            return error on memory exhausted (rather than removing items)\\n\"\n           \"-c <num>      max simultaneous connections (default: 1000)\\n\"\n           \"-k            lock down all paged memory.  Note that there is a\\n\"\n           \"              limit on how much memory you may lock.  Trying to\\n\"\n           \"              allocate more than that would fail, so be sure you\\n\"\n           \"              set the limit correctly for the user you started\\n\"\n           \"              the daemon with (not for -u <username> user;\\n\"\n           \"              under sh this is done with 'ulimit -S -l NUM_KB').\\n\"\n           \"-v            verbose (print errors/warnings while in event loop)\\n\"\n           \"-vv           very verbose (also print client commands/reponses)\\n\"\n           \"-vvv          extremely verbose (also print internal state transitions)\\n\"\n           \"-h            print this help and exit\\n\"\n           \"-i            print memcached and libevent license\\n\"\n           \"-P <file>     save PID in <file>, only used with -d option\\n\"\n           \"-f <factor>   chunk size growth factor (default: 1.25)\\n\"\n           \"-n <bytes>    minimum space allocated for key+value+flags (default: 48)\\n\");\n    printf(\"-L            Try to use large memory pages (if available). Increasing\\n\"\n           \"              the memory page size could reduce the number of TLB misses\\n\"\n           \"              and improve the performance. In order to get large pages\\n\"\n           \"              from the OS, memcached will allocate the total item-cache\\n\"\n           \"              in one large chunk.\\n\");\n    printf(\"-D <char>     Use <char> as the delimiter between key prefixes and IDs.\\n\"\n           \"              This is used for per-prefix stats reporting. The default is\\n\"\n           \"              \\\":\\\" (colon). If this option is specified, stats collection\\n\"\n           \"              is turned on automatically; if not, then it may be turned on\\n\"\n           \"              by sending the \\\"stats detail on\\\" command to the server.\\n\");\n    printf(\"-t <num>      number of threads to use (default: 4)\\n\");\n    printf(\"-R            Maximum number of requests per event, limits the number of\\n\"\n           \"              requests process for a given connection to prevent \\n\"\n           \"              starvation (default: 20)\\n\");\n    printf(\"-C            Disable use of CAS\\n\");\n    printf(\"-b            Set the backlog queue limit (default: 1024)\\n\");\n    printf(\"-B            Binding protocol - one of ascii, binary, or auto (default)\\n\");\n    printf(\"-I            Override the size of each slab page. Adjusts max item size\\n\"\n           \"              (default: 1mb, min: 1k, max: 128m)\\n\");\n    printf(\"-q            Disable detailed stats commands\\n\");\n#ifdef SASL_ENABLED\n    printf(\"-S            Require SASL authentication\\n\");\n#endif\n    printf(\"-X module,cfg Load the module and initialize it with the config\\n\");\n    printf(\"-E engine     Load engine as the storage engine\\n\");\n    printf(\"-e config     Pass config as configuration options to the storage engine\\n\");\n    printf(\"\\nEnvironment variables:\\n\"\n           \"MEMCACHED_PORT_FILENAME   File to write port information to\\n\"\n           \"MEMCACHED_TOP_KEYS        Number of top keys to keep track of\\n\"\n           \"MEMCACHED_REQS_TAP_EVENT  Similar to -R but for tap_ship_log\\n\");\n}\nstatic void usage_license(void) {\n    printf(PACKAGE \" \" VERSION \"\\n\\n\");\n    printf(\n    \"Copyright (c) 2003, Danga Interactive, Inc. <http://www.danga.com/>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions are\\n\"\n    \"met:\\n\"\n    \"\\n\"\n    \"    * Redistributions of source code must retain the above copyright\\n\"\n    \"notice, this list of conditions and the following disclaimer.\\n\"\n    \"\\n\"\n    \"    * Redistributions in binary form must reproduce the above\\n\"\n    \"copyright notice, this list of conditions and the following disclaimer\\n\"\n    \"in the documentation and/or other materials provided with the\\n\"\n    \"distribution.\\n\"\n    \"\\n\"\n    \"    * Neither the name of the Danga Interactive nor the names of its\\n\"\n    \"contributors may be used to endorse or promote products derived from\\n\"\n    \"this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\\n\"\n    \"\\\"AS IS\\\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\\n\"\n    \"A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\\n\"\n    \"OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\\n\"\n    \"SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\\n\"\n    \"LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\\n\"\n    \"OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    \"\\n\"\n    \"\\n\"\n    \"This product includes software developed by Niels Provos.\\n\"\n    \"\\n\"\n    \"[ libevent ]\\n\"\n    \"\\n\"\n    \"Copyright 2000-2003 Niels Provos <provos@citi.umich.edu>\\n\"\n    \"All rights reserved.\\n\"\n    \"\\n\"\n    \"Redistribution and use in source and binary forms, with or without\\n\"\n    \"modification, are permitted provided that the following conditions\\n\"\n    \"are met:\\n\"\n    \"1. Redistributions of source code must retain the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer.\\n\"\n    \"2. Redistributions in binary form must reproduce the above copyright\\n\"\n    \"   notice, this list of conditions and the following disclaimer in the\\n\"\n    \"   documentation and/or other materials provided with the distribution.\\n\"\n    \"3. All advertising materials mentioning features or use of this software\\n\"\n    \"   must display the following acknowledgement:\\n\"\n    \"      This product includes software developed by Niels Provos.\\n\"\n    \"4. The name of the author may not be used to endorse or promote products\\n\"\n    \"   derived from this software without specific prior written permission.\\n\"\n    \"\\n\"\n    \"THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR\\n\"\n    \"IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES\\n\"\n    \"OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.\\n\"\n    \"IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,\\n\"\n    \"INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\\n\"\n    \"NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\\n\"\n    \"DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\\n\"\n    \"THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\\n\"\n    \"(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\\n\"\n    \"THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\\n\"\n    );\n\n    return;\n}\n\nstatic void save_pid(const char *pid_file) {\n    FILE *fp;\n\n    if (access(pid_file, F_OK) == 0) {\n        if ((fp = fopen(pid_file, \"r\")) != NULL) {\n            char buffer[1024];\n            if (fgets(buffer, sizeof(buffer), fp) != NULL) {\n                unsigned int pid;\n                if (safe_strtoul(buffer, &pid) && kill((pid_t)pid, 0) == 0) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                               \"WARNING: The pid file contained the following (running) pid: %u\\n\", pid);\n                }\n            }\n            fclose(fp);\n        }\n    }\n\n    if ((fp = fopen(pid_file, \"w\")) == NULL) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"Could not open the pid file %s for writing: %s\\n\",\n                 pid_file, strerror(errno));\n        return;\n    }\n\n    fprintf(fp,\"%ld\\n\", (long)getpid());\n    if (fclose(fp) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not close the pid file %s: %s\\n\",\n                pid_file, strerror(errno));\n    }\n}\n\nstatic void remove_pidfile(const char *pid_file) {\n    if (pid_file != NULL) {\n        if (unlink(pid_file) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Could not remove the pid file %s: %s\\n\",\n                    pid_file, strerror(errno));\n        }\n    }\n}\n\n#ifndef HAVE_SIGIGNORE\nstatic int sigignore(int sig) {\n    struct sigaction sa = { .sa_handler = SIG_IGN, .sa_flags = 0 };\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(sig, &sa, 0) == -1) {\n        return -1;\n    }\n    return 0;\n}\n#endif /* !HAVE_SIGIGNORE */\n\nstatic void sigterm_handler(int sig) {\n    assert(sig == SIGTERM || sig == SIGINT);\n    memcached_shutdown = 1;\n}\n\nstatic int install_sigterm_handler(void) {\n    struct sigaction sa = {.sa_handler = sigterm_handler, .sa_flags = 0};\n\n    if (sigemptyset(&sa.sa_mask) == -1 || sigaction(SIGTERM, &sa, 0) == -1 ||\n        sigaction(SIGINT, &sa, 0) == -1) {\n        return -1;\n    }\n\n    return 0;\n}\n\n/*\n * On systems that supports multiple page sizes we may reduce the\n * number of TLB-misses by using the biggest available page size\n */\nstatic int enable_large_pages(void) {\n#if defined(HAVE_GETPAGESIZES) && defined(HAVE_MEMCNTL)\n    int ret = -1;\n    size_t sizes[32];\n    int avail = getpagesizes(sizes, 32);\n    if (avail != -1) {\n        size_t max = sizes[0];\n        struct memcntl_mha arg = {0};\n        int ii;\n\n        for (ii = 1; ii < avail; ++ii) {\n            if (max < sizes[ii]) {\n                max = sizes[ii];\n            }\n        }\n\n        arg.mha_flags   = 0;\n        arg.mha_pagesize = max;\n        arg.mha_cmd = MHA_MAPSIZE_BSSBRK;\n\n        if (memcntl(0, 0, MC_HAT_ADVISE, (caddr_t)&arg, 0, 0) == -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                  \"Failed to set large pages: %s\\nWill use default page size\\n\",\n                  strerror(errno));\n        } else {\n            ret = 0;\n        }\n    } else {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n          \"Failed to get supported pagesizes: %s\\nWill use default page size\\n\",\n          strerror(errno));\n    }\n\n    return ret;\n#else\n    return 0;\n#endif\n}\n\nstatic const char* get_server_version(void) {\n    return VERSION;\n}\n\nstatic void store_engine_specific(const void *cookie,\n                                  void *engine_data) {\n    conn *c = (conn*)cookie;\n    c->engine_storage = engine_data;\n}\n\nstatic void *get_engine_specific(const void *cookie) {\n    conn *c = (conn*)cookie;\n    return c->engine_storage;\n}\n\nstatic int get_socket_fd(const void *cookie) {\n    conn *c = (conn *)cookie;\n    return c->sfd;\n}\n\nstatic void set_tap_nack_mode(const void *cookie, bool enable) {\n    conn *c = (conn *)cookie;\n    c->tap_nack_mode = enable;\n}\n\nstatic void reserve_cookie(const void *cookie) {\n    conn *c = (conn *)cookie;\n    ++c->refcount;\n}\n\nstatic void release_cookie(const void *cookie) {\n    conn *c = (conn *)cookie;\n    --c->refcount;\n}\n\nstatic int num_independent_stats(void) {\n    return settings.num_threads + 1;\n}\n\nstatic void *new_independent_stats(void) {\n    int ii;\n    int nrecords = num_independent_stats();\n    struct independent_stats *independent_stats = calloc(sizeof(independent_stats) + sizeof(struct thread_stats) * nrecords, 1);\n\n#ifdef INNODB_MEMCACHED\n    if (independent_stats == NULL) {\n\tfprintf(stderr, \"Unable to allocate memory for\"\n\t\t       \"independent_stats...\\n\");\n       return (NULL);\n    }\n#endif\n\n    if (settings.topkeys > 0)\n        independent_stats->topkeys = topkeys_init(settings.topkeys);\n    for (ii = 0; ii < nrecords; ii++)\n        pthread_mutex_init(&independent_stats->thread_stats[ii].mutex, NULL);\n    return independent_stats;\n}\n\nstatic void release_independent_stats(void *stats) {\n    int ii;\n    int nrecords = num_independent_stats();\n    struct independent_stats *independent_stats = stats;\n    if (independent_stats->topkeys)\n        topkeys_free(independent_stats->topkeys);\n    for (ii = 0; ii < nrecords; ii++)\n        pthread_mutex_destroy(&independent_stats->thread_stats[ii].mutex);\n    free(independent_stats);\n}\n\nstatic inline struct independent_stats *get_independent_stats(conn *c) {\n    struct independent_stats *independent_stats;\n    if (settings.engine.v1->get_stats_struct != NULL) {\n        independent_stats = settings.engine.v1->get_stats_struct(settings.engine.v0, (const void *)c);\n        if (independent_stats == NULL)\n            independent_stats = default_independent_stats;\n    } else {\n        independent_stats = default_independent_stats;\n    }\n    return independent_stats;\n}\n\nstatic inline struct thread_stats *get_thread_stats(conn *c) {\n    struct independent_stats *independent_stats = get_independent_stats(c);\n    assert(c->thread->index < num_independent_stats());\n    return &independent_stats->thread_stats[c->thread->index];\n}\n\nstatic void register_callback(ENGINE_HANDLE *eh,\n                              ENGINE_EVENT_TYPE type,\n                              EVENT_CALLBACK cb, const void *cb_data) {\n    struct engine_event_handler *h =\n        calloc(sizeof(struct engine_event_handler), 1);\n\n    assert(h);\n    h->cb = cb;\n    h->cb_data = cb_data;\n    h->next = engine_event_handlers[type];\n    engine_event_handlers[type] = h;\n}\n\nstatic rel_time_t get_current_time(void)\n{\n    return current_time;\n}\n\nstatic void count_eviction(const void *cookie, const void *key, const int nkey) {\n    topkeys_t *tk = get_independent_stats((conn*)cookie)->topkeys;\n    TK(tk, evictions, key, nkey, get_current_time());\n}\n\n/**\n * To make it easy for engine implementors that doesn't want to care about\n * writing their own incr/decr code, they can just set the arithmetic function\n * to NULL and use this implementation. It is not efficient, due to the fact\n * that it does multiple calls through the interface (get and then cas store).\n * If you don't care, feel free to use it..\n */\nstatic ENGINE_ERROR_CODE internal_arithmetic(ENGINE_HANDLE* handle,\n                                             const void* cookie,\n                                             const void* key,\n                                             const int nkey,\n                                             const bool increment,\n                                             const bool create,\n                                             const uint64_t delta,\n                                             const uint64_t initial,\n                                             const rel_time_t exptime,\n                                             uint64_t *cas,\n                                             uint64_t *result,\n                                             uint16_t vbucket)\n{\n    ENGINE_HANDLE_V1 *e = (ENGINE_HANDLE_V1*)handle;\n\n    item *it = NULL;\n\n    ENGINE_ERROR_CODE ret;\n    ret = e->get(handle, cookie, &it, key, nkey, vbucket);\n\n    if (ret == ENGINE_SUCCESS) {\n        item_info info = { .nvalue = 1 };\n\n        if (!e->get_item_info(handle, cookie, it, &info)) {\n            e->release(handle, cookie, it);\n            return ENGINE_FAILED;\n        }\n\n        char value[80];\n\n        if (info.value[0].iov_len > (sizeof(value) - 1)) {\n            e->release(handle, cookie, it);\n            return ENGINE_EINVAL;\n        }\n\n        memcpy(value, info.value[0].iov_base, info.value[0].iov_len);\n        value[info.value[0].iov_len] = '\\0';\n\n        uint64_t val;\n        if (!safe_strtoull(value, &val)) {\n            e->release(handle, cookie, it);\n            return ENGINE_EINVAL;\n        }\n\n        if (increment) {\n            val += delta;\n        } else {\n            if (delta > val) {\n                val = 0;\n            } else {\n                val -= delta;\n            }\n        }\n\n        size_t nb = snprintf(value, sizeof(value), \"%\"PRIu64, val);\n        *result = val;\n        item *nit = NULL;\n        if (e->allocate(handle, cookie, &nit, key,\n                        nkey, nb, info.flags, info.exptime) != ENGINE_SUCCESS) {\n            e->release(handle, cookie, it);\n            return ENGINE_ENOMEM;\n        }\n\n        item_info i2 = { .nvalue = 1 };\n        if (!e->get_item_info(handle, cookie, nit, &i2)) {\n            e->release(handle, cookie, it);\n            e->release(handle, cookie, nit);\n            return ENGINE_FAILED;\n        }\n\n        memcpy(i2.value[0].iov_base, value, nb);\n        e->item_set_cas(handle, cookie, nit, info.cas);\n        ret = e->store(handle, cookie, nit, cas, OPERATION_CAS, vbucket);\n        e->release(handle, cookie, it);\n        e->release(handle, cookie, nit);\n    } else if (ret == ENGINE_KEY_ENOENT && create) {\n        char value[80];\n        size_t nb = snprintf(value, sizeof(value), \"%\"PRIu64\"\\r\\n\", initial);\n        *result = initial;\n        if (e->allocate(handle, cookie, &it, key, nkey, nb, 0, exptime) != ENGINE_SUCCESS) {\n            e->release(handle, cookie, it);\n            return ENGINE_ENOMEM;\n        }\n\n        item_info info = { .nvalue = 1 };\n        if (!e->get_item_info(handle, cookie, it, &info)) {\n            e->release(handle, cookie, it);\n            return ENGINE_FAILED;\n        }\n\n        memcpy(info.value[0].iov_base, value, nb);\n        ret = e->store(handle, cookie, it, cas, OPERATION_CAS, vbucket);\n        e->release(handle, cookie, it);\n    }\n\n    /* We had a race condition.. just call ourself recursively to retry */\n    if (ret == ENGINE_KEY_EEXISTS) {\n        return internal_arithmetic(handle, cookie, key, nkey, increment, create, delta,\n                                   initial, exptime, cas, result, vbucket);\n    }\n\n    return ret;\n}\n\n/**\n * Register an extension if it's not already registered\n *\n * @param type the type of the extension to register\n * @param extension the extension to register\n * @return true if success, false otherwise\n */\nstatic bool register_extension(extension_type_t type, void *extension)\n{\n    if (extension == NULL) {\n        return false;\n    }\n\n    switch (type) {\n    case EXTENSION_DAEMON:\n        for (EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n             ptr != NULL;\n             ptr = ptr->next) {\n            if (ptr == extension) {\n                return false;\n            }\n        }\n        ((EXTENSION_DAEMON_DESCRIPTOR *)(extension))->next = settings.extensions.daemons;\n        settings.extensions.daemons = extension;\n        return true;\n    case EXTENSION_LOGGER:\n        settings.extensions.logger = extension;\n        return true;\n    case EXTENSION_ASCII_PROTOCOL:\n        if (settings.extensions.ascii != NULL) {\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *last;\n            for (last = settings.extensions.ascii; last->next != NULL;\n                 last = last->next) {\n                if (last == extension) {\n                    return false;\n                }\n            }\n            if (last == extension) {\n                return false;\n            }\n            last->next = extension;\n            last->next->next = NULL;\n        } else {\n            settings.extensions.ascii = extension;\n            settings.extensions.ascii->next = NULL;\n        }\n        return true;\n\n    default:\n        return false;\n    }\n}\n\n/**\n * Unregister an extension\n *\n * @param type the type of the extension to remove\n * @param extension the extension to remove\n */\nstatic void unregister_extension(extension_type_t type, void *extension)\n{\n    switch (type) {\n    case EXTENSION_DAEMON:\n        {\n            EXTENSION_DAEMON_DESCRIPTOR *prev = NULL;\n            EXTENSION_DAEMON_DESCRIPTOR *ptr = settings.extensions.daemons;\n\n            while (ptr != NULL && ptr != extension) {\n                prev = ptr;\n                ptr = ptr->next;\n            }\n\n            if (ptr != NULL && prev != NULL) {\n                prev->next = ptr->next;\n            }\n\n            if (settings.extensions.daemons == ptr) {\n                settings.extensions.daemons = ptr->next;\n            }\n        }\n        break;\n    case EXTENSION_LOGGER:\n        if (settings.extensions.logger == extension) {\n            if (get_stderr_logger() == extension) {\n                settings.extensions.logger = get_null_logger();\n            } else {\n                settings.extensions.logger = get_stderr_logger();\n            }\n        }\n        break;\n    case EXTENSION_ASCII_PROTOCOL:\n        {\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *prev = NULL;\n            EXTENSION_ASCII_PROTOCOL_DESCRIPTOR *ptr = settings.extensions.ascii;\n\n            while (ptr != NULL && ptr != extension) {\n                prev = ptr;\n                ptr = ptr->next;\n            }\n\n            if (ptr != NULL && prev != NULL) {\n                prev->next = ptr->next;\n            }\n\n            if (settings.extensions.ascii == ptr) {\n                settings.extensions.ascii = ptr->next;\n            }\n        }\n        break;\n\n    default:\n        ;\n    }\n\n}\n\n/**\n * Get the named extension\n */\nstatic void* get_extension(extension_type_t type)\n{\n    switch (type) {\n    case EXTENSION_DAEMON:\n        return settings.extensions.daemons;\n\n    case EXTENSION_LOGGER:\n        return settings.extensions.logger;\n\n    case EXTENSION_ASCII_PROTOCOL:\n        return settings.extensions.ascii;\n\n    default:\n        return NULL;\n    }\n}\n\n#ifdef INNODB_MEMCACHED\nvoid shutdown_server(void) {\n#else\nstatic void shutdown_server(void) {\n#endif /* INNODB_MEMCACHED */\n#ifdef INNODB_MEMCACHED\n    int i;\n    /* Clean up connections */\n    while (listen_conn) {\n\tconn_closing(listen_conn);\n\tlisten_conn = listen_conn->next;\n    }\n\n    for (i = 0; i < num_udp_socket; i++) {\n\tsafe_close(udp_socket[i]);\n    }\n#endif\n    memcached_shutdown = 1;\n}\n\n#ifdef INNODB_MEMCACHED\nbool shutdown_complete(void)\n{\n    return(memcached_shutdown == 2);\n}\n\nbool init_complete(void)\n{\n    return(memcached_initialized == 1);\n}\n#endif\n\nstatic EXTENSION_LOGGER_DESCRIPTOR* get_logger(void)\n{\n    return settings.extensions.logger;\n}\n\nstatic EXTENSION_LOG_LEVEL get_log_level(void)\n{\n    EXTENSION_LOG_LEVEL ret;\n    switch (settings.verbose) {\n    case 0: ret = EXTENSION_LOG_WARNING; break;\n    case 1: ret = EXTENSION_LOG_INFO; break;\n    case 2: ret = EXTENSION_LOG_DEBUG; break;\n    default:\n        ret = EXTENSION_LOG_DETAIL;\n    }\n    return ret;\n}\n\nstatic void set_log_level(EXTENSION_LOG_LEVEL severity)\n{\n    switch (severity) {\n    case EXTENSION_LOG_WARNING: settings.verbose = 0; break;\n    case EXTENSION_LOG_INFO: settings.verbose = 1; break;\n    case EXTENSION_LOG_DEBUG: settings.verbose = 2; break;\n    default:\n        settings.verbose = 3;\n    }\n}\n\nstatic void get_config_append_stats(const char *key, const uint16_t klen,\n                                    const char *val, const uint32_t vlen,\n                                    const void *cookie)\n{\n    if (klen == 0  || vlen == 0) {\n        return ;\n    }\n\n    char *pos = (char*)cookie;\n    size_t nbytes = strlen(pos);\n\n    if ((nbytes + klen + vlen + 3) > 1024) {\n        // Not enough size in the buffer..\n        return;\n    }\n\n    memcpy(pos + nbytes, key, klen);\n    nbytes += klen;\n    pos[nbytes] = '=';\n    ++nbytes;\n    memcpy(pos + nbytes, val, vlen);\n    nbytes += vlen;\n    memcpy(pos + nbytes, \";\", 2);\n}\n\nstatic bool get_config(struct config_item items[]) {\n    char config[1024];\n    config[0] = '\\0';\n    process_stat_settings(get_config_append_stats, config);\n    int rval = parse_config(config, items, NULL);\n    return rval >= 0;\n}\n\n/**\n * Callback the engines may call to get the public server interface\n * @return pointer to a structure containing the interface. The client should\n *         know the layout and perform the proper casts.\n */\nstatic SERVER_HANDLE_V1 *get_server_api(void)\n{\n    static SERVER_CORE_API core_api = {\n        .server_version = get_server_version,\n        .hash = hash,\n        .realtime = realtime,\n        .abstime = abstime,\n        .get_current_time = get_current_time,\n        .parse_config = parse_config,\n        .shutdown = shutdown_server,\n        .get_config = get_config\n    };\n\n    static SERVER_COOKIE_API server_cookie_api = {\n        .get_auth_data = get_auth_data,\n        .store_engine_specific = store_engine_specific,\n        .get_engine_specific = get_engine_specific,\n        .get_socket_fd = get_socket_fd,\n        .set_tap_nack_mode = set_tap_nack_mode,\n        .notify_io_complete = notify_io_complete,\n        .reserve = reserve_cookie,\n        .release = release_cookie\n    };\n\n    static SERVER_STAT_API server_stat_api = {\n        .new_stats = new_independent_stats,\n        .release_stats = release_independent_stats,\n        .evicting = count_eviction\n    };\n\n    static SERVER_LOG_API server_log_api = {\n        .get_logger = get_logger,\n        .get_level = get_log_level,\n        .set_level = set_log_level\n    };\n    static SERVER_EXTENSION_API extension_api = {\n        .register_extension = register_extension,\n        .unregister_extension = unregister_extension,\n        .get_extension = get_extension\n    };\n\n    static SERVER_CALLBACK_API callback_api = {\n        .register_callback = register_callback,\n        .perform_callbacks = perform_callbacks,\n    };\n\n    static SERVER_HANDLE_V1 rv = {\n        .interface = 1,\n        .core = &core_api,\n        .stat = &server_stat_api,\n        .extension = &extension_api,\n        .callback = &callback_api,\n        .log = &server_log_api,\n        .cookie = &server_cookie_api\n    };\n\n    if (rv.engine == NULL) {\n        rv.engine = settings.engine.v0;\n    }\n\n    return &rv;\n}\n\n/**\n * Load a shared object and initialize all the extensions in there.\n *\n * @param soname the name of the shared object (may not be NULL)\n * @param config optional configuration parameters\n * @return true if success, false otherwise\n */\nstatic bool load_extension(const char *soname, const char *config) {\n    if (soname == NULL) {\n        return false;\n    }\n\n    /* Hack to remove the warning from C99 */\n    union my_hack {\n        MEMCACHED_EXTENSIONS_INITIALIZE initialize;\n        void* voidptr;\n    } funky = {.initialize = NULL };\n\n    void *handle = dlopen(soname, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to open library \\\"%s\\\": %s\\n\",\n                soname, msg ? msg : \"unknown error\");\n        return false;\n    }\n\n    void *symbol = dlsym(handle, \"memcached_extensions_initialize\");\n    if (symbol == NULL) {\n        const char *msg = dlerror();\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not find symbol \\\"memcached_extensions_initialize\\\" in %s: %s\\n\",\n                soname, msg ? msg : \"unknown error\");\n        return false;\n    }\n    funky.voidptr = symbol;\n\n    EXTENSION_ERROR_CODE error = (*funky.initialize)(config, get_server_api);\n\n    if (error != EXTENSION_SUCCESS) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to initalize extensions from %s. Error code: %d\\n\",\n                soname, error);\n        dlclose(handle);\n        return false;\n    }\n\n    if (settings.verbose > 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, NULL,\n                \"Loaded extensions from: %s\\n\", soname);\n    }\n\n    return true;\n}\n\n/**\n * Do basic sanity check of the runtime environment\n * @return true if no errors found, false if we can't use this env\n */\nstatic bool sanitycheck(void) {\n    /* One of our biggest problems is old and bogus libevents */\n    const char *ever = event_get_version();\n    if (ever != NULL) {\n        if (strncmp(ever, \"1.\", 2) == 0) {\n            /* Require at least 1.3 (that's still a couple of years old) */\n            if ((ever[2] == '1' || ever[2] == '2') && !isdigit(ever[3])) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"You are using libevent %s.\\nPlease upgrade to\"\n                        \" a more recent version (1.3 or newer)\\n\",\n                        event_get_version());\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\n#ifdef INNODB_MEMCACHED\nstatic\nchar*\nmy_strdupl(const char* str, int len)\n{\n\tchar*   s = (char*) malloc(len + 1);\n\ts[len] = 0;\n\treturn((char*) memcpy(s, str, len));\n}\n\n/** Function that messages MySQL config variable string to something\nthat can be parsed by getopt() */\nstatic\nvoid\ndaemon_memcached_make_option(char* option, int* option_argc,\n                             char*** option_argv)\n{\n\tstatic const char*      sep = \" \";\n\tchar*                   last;\n\tchar*                   opt_str;\n\tchar*                   my_str;\n\tint                     num_arg = 0;\n\tint                     i = 1;\n\n\tmy_str = my_strdupl(option, strlen(option));\n\n\tfor (opt_str = strtok_r(my_str, sep, &last);\n\t     opt_str;\n\t     opt_str = strtok_r(NULL, sep, &last)) {\n\t\tnum_arg++;\n\t}\n\n\t/* reset my_str, since strtok_r could alter it */\n\tstrncpy(my_str, option, strlen(option));\n\n\t*option_argv = (char**) malloc((num_arg + 1)\n\t\t\t\t       * sizeof(**option_argv));\n\n\tfor (opt_str = strtok_r(my_str, sep, &last);\n\t     opt_str;\n\t     opt_str = strtok_r(NULL, sep, &last)) {\n\t\t(*option_argv)[i] = opt_str;\n\t\ti++;\n\t}\n\n\tassert(i == num_arg + 1);\n\n\t*option_argc = (num_arg + 1);\n\n\treturn;\n}\n\n/* Structure that adds the call back functions struture pointers,\npassed to InnoDB engine */\ntypedef struct eng_config_info {\n\tchar*           option_string;\n\tvoid*           cb_ptr;\n\tunsigned int    eng_r_batch_size;\n\tunsigned int    eng_w_batch_size;\n\tbool\t\tenable_binlog;\n} eng_config_info_t;\n#endif /* INNODB_MEMCACHED */\n\n#ifdef INNODB_MEMCACHED\nvoid* daemon_memcached_main(void *p) {\n#else\nint main (int argc, char **argv) {\n#endif\n    int c;\n    bool lock_memory = false;\n    bool do_daemonize = false;\n    bool preallocate = false;\n    int maxcore = 0;\n    char *username = NULL;\n    char *pid_file = NULL;\n    struct passwd *pw;\n    struct rlimit rlim;\n    char unit = '\\0';\n    int size_max = 0;\n\n    bool protocol_specified = false;\n    bool tcp_specified = false;\n    bool udp_specified = false;\n    memcached_context_t* m_config = (memcached_context_t*)p;\n    const char *engine;\n    const char *engine_config = NULL;\n    char old_options[1024] = { [0] = '\\0' };\n    char *old_opts = old_options;\n#ifdef INNODB_MEMCACHED\n    int option_argc = 0;\n    char** option_argv = NULL;\n    eng_config_info_t my_eng_config;\n\n    memcached_initialized = 0;\n\n    if (m_config->m_engine_library) {\n\tengine = m_config->m_engine_library;\n\n\t/* FIXME: We should have a better way to pass the callback structure\n\tpoint to storage engine. It is now appended in the configure\n\tstring in eng_config_info_t structure */\n\tmy_eng_config.cb_ptr = m_config->m_innodb_api_cb;\n\tmy_eng_config.eng_r_batch_size = m_config->m_r_batch_size;\n\tmy_eng_config.eng_w_batch_size = m_config->m_w_batch_size;\n\tmy_eng_config.enable_binlog = m_config->m_enable_binlog;\n\tmy_eng_config.option_string = old_opts;\n\tengine_config = (const char *) (&my_eng_config);\n\n    } else {\n\tengine = \"default_engine.so\";\n    }\n#else\n    engine = \"default_engine.so\";\n#endif /* INNODB_MEMCACHED */\n\n    memcached_shutdown = 0;\n    memcached_initialized = 0;\n\n    if (!sanitycheck()) {\n        return(NULL);\n    }\n\n    /* make the time we started always be 2 seconds before we really\n       did, so time(0) - time.started is never zero.  if so, things\n       like 'settings.oldest_live' which act as booleans as well as\n       values are now false in boolean context... */\n    process_started = time(0) - 2;\n    set_current_time();\n\n    /* Initialize the socket subsystem */\n    initialize_sockets();\n\n    /* init settings */\n    settings_init();\n\n    if (memcached_initialize_stderr_logger(get_server_api) != EXTENSION_SUCCESS) {\n        fprintf(stderr, \"Failed to initialize log system\\n\");\n        return (NULL);\n    }\n\n    if (m_config->m_mem_option) {\n\tdaemon_memcached_make_option(m_config->m_mem_option,\n\t\t\t\t     &option_argc,\n\t\t\t\t     &option_argv);\n    }\n\n#ifdef INNODB_MEMCACHED\n\n    if (option_argc > 0 && option_argv) {\n\t    /* Always reset the index to 1, since this function can\n\t    be invoked multiple times with install/uninstall plugins */\n\t    optind = 1;\n\t    while (-1 != (c = getopt(option_argc, option_argv,\n\t\t  \"a:\"  /* access mask for unix socket */\n\t\t  \"p:\"  /* TCP port number to listen on */\n\t\t  \"s:\"  /* unix socket path to listen on */\n\t\t  \"U:\"  /* UDP port number to listen on */\n\t\t  \"m:\"  /* max memory to use for items in megabytes */\n\t\t  \"M\"   /* return error on memory exhausted */\n\t\t  \"c:\"  /* max simultaneous connections */\n\t\t  \"k\"   /* lock down all paged memory */\n\t\t  \"hi\"  /* help, licence info */\n\t\t  \"r\"   /* maximize core file limit */\n\t\t  \"v\"   /* verbose */\n\t\t  \"d\"   /* daemon mode */\n\t\t  \"l:\"  /* interface to listen on */\n\t\t  \"u:\"  /* user identity to run as */\n\t\t  \"P:\"  /* save PID in file */\n\t\t  \"f:\"  /* factor? */\n\t\t  \"n:\"  /* minimum space allocated for key+value+flags */\n\t\t  \"t:\"  /* threads */\n\t\t  \"D:\"  /* prefix delimiter? */\n\t\t  \"L\"   /* Large memory pages */\n\t\t  \"R:\"  /* max requests per event */\n\t\t  \"C\"   /* Disable use of CAS */\n\t\t  \"b:\"  /* backlog queue limit */\n\t\t  \"B:\"  /* Binding protocol */\n\t\t  \"I:\"  /* Max item size */\n\t\t  \"S\"   /* Sasl ON */\n\t\t  \"E:\"  /* Engine to load */\n\t\t  \"e:\"  /* Engine options */\n\t\t  \"q\"   /* Disallow detailed stats */\n\t\t  \"X:\"  /* Load extension */\n\t\t))) {\n\t\tswitch (c) {\n\t\tcase 'a':\n\t\t    /* access for unix domain socket, as octal mask (like chmod)*/\n\t\t    settings.access= strtol(optarg,NULL,8);\n\t\t    break;\n\n\t\tcase 'U':\n\t\t    settings.udpport = atoi(optarg);\n\t\t    udp_specified = true;\n\t\t    break;\n\t\tcase 'p':\n\t\t    settings.port = atoi(optarg);\n\t\t    tcp_specified = true;\n\t\t    break;\n\t\tcase 's':\n\t\t    settings.socketpath = optarg;\n\t\t    break;\n\t\tcase 'm':\n\t\t    settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;\n\t\t     old_opts += sprintf(old_opts, \"cache_size=%lu;\",\n\t\t\t\t\t (unsigned long)settings.maxbytes);\n\t\t   break;\n\t\tcase 'M':\n\t\t    settings.evict_to_free = 0;\n\t\t    old_opts += sprintf(old_opts, \"eviction=false;\");\n\t\t    break;\n\t\tcase 'c':\n\t\t    settings.maxconns = atoi(optarg);\n\t\t    break;\n\t\tcase 'h':\n\t\t    usage();\n\t\t    exit(EXIT_SUCCESS);\n\t\tcase 'i':\n\t\t    usage_license();\n\t\t    exit(EXIT_SUCCESS);\n\t\tcase 'k':\n\t\t    lock_memory = true;\n\t\t    break;\n\t\tcase 'v':\n\t\t    settings.verbose++;\n\t\t    perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n\t\t    break;\n\t\tcase 'l':\n\t\t    settings.inter= strdup(optarg);\n\t\t    break;\n\t\tcase 'd':\n\t\t    do_daemonize = true;\n\t\t    break;\n\t\tcase 'r':\n\t\t    maxcore = 1;\n\t\t    break;\n\t\tcase 'R':\n\t\t    settings.reqs_per_event = atoi(optarg);\n\t\t    if (settings.reqs_per_event <= 0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t      \"Number of requests per event must be greater than 0\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    break;\n\t\tcase 'u':\n\t\t    username = optarg;\n\t\t    break;\n\t\tcase 'P':\n\t\t    pid_file = optarg;\n\t\t    break;\n\t\tcase 'f':\n\t\t    settings.factor = atof(optarg);\n\t\t    if (settings.factor <= 1.0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Factor must be greater than 1\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t     old_opts += sprintf(old_opts, \"factor=%f;\",\n\t\t\t\t\t settings.factor);\n\t\t   break;\n\t\tcase 'n':\n\t\t    settings.chunk_size = atoi(optarg);\n\t\t    if (settings.chunk_size == 0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Chunk size must be greater than 0\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    old_opts += sprintf(old_opts, \"chunk_size=%u;\",\n\t\t\t\t\tsettings.chunk_size);\n\t\t    break;\n\t\tcase 't':\n\t\t    settings.num_threads = atoi(optarg);\n\t\t    if (settings.num_threads <= 0) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Number of threads must be greater than 0\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    /* There're other problems when you get above 64 threads.\n\t\t     * In the future we should portably detect # of cores for the\n\t\t     * default.\n\t\t     */\n\t\t    if (settings.num_threads > 64) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"WARNING: Setting a high number of worker\"\n\t\t\t\t\"threads is not recommended.\\n\"\n\t\t\t\t\" Set this value to the number of cores in\"\n\t\t\t\t\" your machine or less.\\n\");\n\t\t    }\n\t\t    break;\n\t\tcase 'D':\n\t\t    settings.prefix_delimiter = optarg[0];\n\t\t    settings.detail_enabled = 1;\n\t\t    break;\n\t\tcase 'L' :\n\t\t    if (enable_large_pages() == 0) {\n\t\t\tpreallocate = true;\n\t\t\told_opts += sprintf(old_opts, \"preallocate=true;\");\n\t\t    }\n\t\t    break;\n\t\tcase 'C' :\n\t\t    settings.use_cas = false;\n\t\t    break;\n\t\tcase 'b' :\n\t\t    settings.backlog = atoi(optarg);\n\t\t    break;\n\t\tcase 'B':\n\t\t    protocol_specified = true;\n\t\t    if (strcmp(optarg, \"auto\") == 0) {\n\t\t\tsettings.binding_protocol = negotiating_prot;\n\t\t    } else if (strcmp(optarg, \"binary\") == 0) {\n\t\t\tsettings.binding_protocol = binary_prot;\n\t\t    } else if (strcmp(optarg, \"ascii\") == 0) {\n\t\t\tsettings.binding_protocol = ascii_prot;\n\t\t    } else {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Invalid value for binding protocol: %s\\n\"\n\t\t\t\t\" -- should be one of auto, binary, or ascii\\n\", optarg);\n\t\t\texit(EX_USAGE);\n\t\t    }\n\t\t    break;\n\t\tcase 'I':\n\t\t    unit = optarg[strlen(optarg)-1];\n\t\t    if (unit == 'k' || unit == 'm' ||\n\t\t\tunit == 'K' || unit == 'M') {\n\t\t\toptarg[strlen(optarg)-1] = '\\0';\n\t\t\tsize_max = atoi(optarg);\n\t\t\tif (unit == 'k' || unit == 'K')\n\t\t\t    size_max *= 1024;\n\t\t\tif (unit == 'm' || unit == 'M')\n\t\t\t    size_max *= 1024 * 1024;\n\t\t\tsettings.item_size_max = size_max;\n\t\t    } else {\n\t\t\tsettings.item_size_max = atoi(optarg);\n\t\t    }\n\t\t    if (settings.item_size_max < 1024) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Item max size cannot be less than 1024 bytes.\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    if (settings.item_size_max > 1024 * 1024 * 128) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t\t\"Cannot set item size limit higher than 128 mb.\\n\");\n\t\t\treturn (void*)1;\n\t\t    }\n\t\t    if (settings.item_size_max > 1024 * 1024) {\n\t\t\tsettings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t    \"WARNING: Setting item max size above 1MB is not\"\n\t\t\t    \" recommended!\\n\"\n\t\t\t    \" Raising this limit increases the minimum memory requirements\\n\"\n\t\t\t    \" and will decrease your memory efficiency.\\n\"\n\t\t\t);\n\t\t    }\n#ifndef __WIN32__\n\t\t    old_opts += sprintf(old_opts, \"item_size_max=%zu;\",\n\t\t\t\t\tsettings.item_size_max);\n#else\n\t\t    old_opts += sprintf(old_opts, \"item_size_max=%lu;\", (long unsigned)\n\t\t\t\t\tsettings.item_size_max);\n#endif\n\t\t    break;\n\t\tcase 'E':\n\t\t    engine = optarg;\n\t\t    break;\n\t\tcase 'e':\n\t\t    /* FIXME, we use engine_config to pass callback function\n\t\t    for now. Will need a better solution \n\t\t    engine_config = optarg; */\n\t\t    break;\n\t\tcase 'q':\n\t\t    settings.allow_detailed = false;\n\t\t    break;\n\t\tcase 'S': /* set Sasl authentication to true. Default is false */\n# ifdef ENABLE_MEMCACHED_SASL\n#  ifndef SASL_ENABLED\n\t\t    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t    \"This server is not built with SASL support.\\n\");\n\t\t    exit(EX_USAGE);\n#  endif /* !SASL_ENABLED */\n\t\t    settings.require_sasl = true;\n# endif /* ENABLE_MEMCACHED_SASL */\n\t\t    break;\n\t\tcase 'X' :\n\t\t    {\n\t\t\tchar *ptr = strchr(optarg, ',');\n\t\t\tif (ptr != NULL) {\n\t\t\t    *ptr = '\\0';\n\t\t\t    ++ptr;\n\t\t\t}\n\t\t\tif (!load_extension(optarg, ptr)) {\n\t\t\t    exit(EXIT_FAILURE);\n\t\t\t}\n\t\t\tif (ptr != NULL) {\n\t\t\t    *(ptr - 1) = ',';\n\t\t\t}\n\t\t    }\n\t\t    break;\n\t\tdefault:\n\t\t    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n\t\t\t    \"Illegal argument \\\"%c\\\"\\n\", c);\n\t\t    return (void*)1;\n\t\t}\n\t}\n\n\tfree(option_argv);\n    }\n    fprintf(stderr, MEMCACHED_ATOMIC_MSG);\n#else\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"a:\"  /* access mask for unix socket */\n          \"p:\"  /* TCP port number to listen on */\n          \"s:\"  /* unix socket path to listen on */\n          \"U:\"  /* UDP port number to listen on */\n          \"m:\"  /* max memory to use for items in megabytes */\n          \"M\"   /* return error on memory exhausted */\n          \"c:\"  /* max simultaneous connections */\n          \"k\"   /* lock down all paged memory */\n          \"hi\"  /* help, licence info */\n          \"r\"   /* maximize core file limit */\n          \"v\"   /* verbose */\n          \"d\"   /* daemon mode */\n          \"l:\"  /* interface to listen on */\n          \"u:\"  /* user identity to run as */\n          \"P:\"  /* save PID in file */\n          \"f:\"  /* factor? */\n          \"n:\"  /* minimum space allocated for key+value+flags */\n          \"t:\"  /* threads */\n          \"D:\"  /* prefix delimiter? */\n          \"L\"   /* Large memory pages */\n          \"R:\"  /* max requests per event */\n          \"C\"   /* Disable use of CAS */\n          \"b:\"  /* backlog queue limit */\n          \"B:\"  /* Binding protocol */\n          \"I:\"  /* Max item size */\n          \"S\"   /* Sasl ON */\n          \"E:\"  /* Engine to load */\n          \"e:\"  /* Engine options */\n          \"q\"   /* Disallow detailed stats */\n          \"X:\"  /* Load extension */\n        ))) {\n        switch (c) {\n        case 'a':\n            /* access for unix domain socket, as octal mask (like chmod)*/\n            settings.access= strtol(optarg,NULL,8);\n            break;\n\n        case 'U':\n            settings.udpport = atoi(optarg);\n            udp_specified = true;\n            break;\n        case 'p':\n            settings.port = atoi(optarg);\n            tcp_specified = true;\n            break;\n        case 's':\n            settings.socketpath = optarg;\n            break;\n        case 'm':\n            settings.maxbytes = ((size_t)atoi(optarg)) * 1024 * 1024;\n             old_opts += sprintf(old_opts, \"cache_size=%lu;\",\n                                 (unsigned long)settings.maxbytes);\n           break;\n        case 'M':\n            settings.evict_to_free = 0;\n            old_opts += sprintf(old_opts, \"eviction=false;\");\n            break;\n        case 'c':\n            settings.maxconns = atoi(optarg);\n            break;\n        case 'h':\n            usage();\n            exit(EXIT_SUCCESS);\n        case 'i':\n            usage_license();\n            exit(EXIT_SUCCESS);\n        case 'k':\n            lock_memory = true;\n            break;\n        case 'v':\n            settings.verbose++;\n            perform_callbacks(ON_LOG_LEVEL, NULL, NULL);\n            break;\n        case 'l':\n            if (settings.inter != NULL) {\n                size_t len = strlen(settings.inter) + strlen(optarg) + 2;\n                char *p = malloc(len);\n                if (p == NULL) {\n                    settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                                    \"Failed to allocate memory\\n\");\n                    return 1;\n                }\n                snprintf(p, len, \"%s,%s\", settings.inter, optarg);\n                free(settings.inter);\n                settings.inter = p;\n            } else {\n                settings.inter= strdup(optarg);\n            }\n            break;\n        case 'd':\n            do_daemonize = true;\n            break;\n        case 'r':\n            maxcore = 1;\n            break;\n        case 'R':\n            settings.reqs_per_event = atoi(optarg);\n            if (settings.reqs_per_event <= 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                      \"Number of requests per event must be greater than 0\\n\");\n                return 1;\n            }\n            break;\n        case 'u':\n            username = optarg;\n            break;\n        case 'P':\n            pid_file = optarg;\n            break;\n        case 'f':\n            settings.factor = atof(optarg);\n            if (settings.factor <= 1.0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Factor must be greater than 1\\n\");\n                return 1;\n            }\n             old_opts += sprintf(old_opts, \"factor=%f;\",\n                                 settings.factor);\n           break;\n        case 'n':\n            settings.chunk_size = atoi(optarg);\n            if (settings.chunk_size == 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Chunk size must be greater than 0\\n\");\n                return 1;\n            }\n            old_opts += sprintf(old_opts, \"chunk_size=%u;\",\n                                settings.chunk_size);\n            break;\n        case 't':\n            settings.num_threads = atoi(optarg);\n            if (settings.num_threads <= 0) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Number of threads must be greater than 0\\n\");\n                return 1;\n            }\n            /* There're other problems when you get above 64 threads.\n             * In the future we should portably detect # of cores for the\n             * default.\n             */\n            if (settings.num_threads > 64) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"WARNING: Setting a high number of worker\"\n                        \"threads is not recommended.\\n\"\n                        \" Set this value to the number of cores in\"\n                        \" your machine or less.\\n\");\n            }\n            break;\n        case 'D':\n            settings.prefix_delimiter = optarg[0];\n            settings.detail_enabled = 1;\n            break;\n        case 'L' :\n            if (enable_large_pages() == 0) {\n                preallocate = true;\n                old_opts += sprintf(old_opts, \"preallocate=true;\");\n            }\n            break;\n        case 'C' :\n            settings.use_cas = false;\n            break;\n        case 'b' :\n            settings.backlog = atoi(optarg);\n            break;\n        case 'B':\n            protocol_specified = true;\n            if (strcmp(optarg, \"auto\") == 0) {\n                settings.binding_protocol = negotiating_prot;\n            } else if (strcmp(optarg, \"binary\") == 0) {\n                settings.binding_protocol = binary_prot;\n            } else if (strcmp(optarg, \"ascii\") == 0) {\n                settings.binding_protocol = ascii_prot;\n            } else {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Invalid value for binding protocol: %s\\n\"\n                        \" -- should be one of auto, binary, or ascii\\n\", optarg);\n                exit(EX_USAGE);\n            }\n            break;\n        case 'I':\n            unit = optarg[strlen(optarg)-1];\n            if (unit == 'k' || unit == 'm' ||\n                unit == 'K' || unit == 'M') {\n                optarg[strlen(optarg)-1] = '\\0';\n                size_max = atoi(optarg);\n                if (unit == 'k' || unit == 'K')\n                    size_max *= 1024;\n                if (unit == 'm' || unit == 'M')\n                    size_max *= 1024 * 1024;\n                settings.item_size_max = size_max;\n            } else {\n                settings.item_size_max = atoi(optarg);\n            }\n            if (settings.item_size_max < 1024) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Item max size cannot be less than 1024 bytes.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024 * 128) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Cannot set item size limit higher than 128 mb.\\n\");\n                return 1;\n            }\n            if (settings.item_size_max > 1024 * 1024) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"WARNING: Setting item max size above 1MB is not\"\n                    \" recommended!\\n\"\n                    \" Raising this limit increases the minimum memory requirements\\n\"\n                    \" and will decrease your memory efficiency.\\n\"\n                );\n            }\n#ifndef __WIN32__\n            old_opts += sprintf(old_opts, \"item_size_max=%zu;\",\n                                settings.item_size_max);\n#else\n            old_opts += sprintf(old_opts, \"item_size_max=%lu;\", (long unsigned)\n                                settings.item_size_max);\n#endif\n            break;\n        case 'E':\n            engine = optarg;\n            break;\n        case 'e':\n            engine_config = optarg;\n            break;\n        case 'q':\n            settings.allow_detailed = false;\n            break;\n        case 'S': /* set Sasl authentication to true. Default is false */\n#ifndef SASL_ENABLED\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"This server is not built with SASL support.\\n\");\n            exit(EX_USAGE);\n#endif\n            settings.require_sasl = true;\n            break;\n        case 'X' :\n            {\n                char *ptr = strchr(optarg, ',');\n                if (ptr != NULL) {\n                    *ptr = '\\0';\n                    ++ptr;\n                }\n                if (!load_extension(optarg, ptr)) {\n                    exit(EXIT_FAILURE);\n                }\n                if (ptr != NULL) {\n                    *(ptr - 1) = ',';\n                }\n            }\n            break;\n        default:\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n#endif /* INNODB_MEMCACHED */\n\n    if (getenv(\"MEMCACHED_REQS_TAP_EVENT\") != NULL) {\n        settings.reqs_per_tap_event = atoi(getenv(\"MEMCACHED_REQS_TAP_EVENT\"));\n    }\n\n    if (settings.reqs_per_tap_event <= 0) {\n        settings.reqs_per_tap_event = DEFAULT_REQS_PER_TAP_EVENT;\n    }\n\n\n    if (install_sigterm_handler() != 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                                        \"Failed to install SIGTERM handler\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    char *topkeys_env = getenv(\"MEMCACHED_TOP_KEYS\");\n    if (topkeys_env != NULL) {\n        settings.topkeys = atoi(topkeys_env);\n        if (settings.topkeys < 0) {\n            settings.topkeys = 0;\n        }\n    }\n\n    if (settings.require_sasl) {\n        if (!protocol_specified) {\n            settings.binding_protocol = binary_prot;\n        } else {\n            if (settings.binding_protocol == negotiating_prot) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"ERROR: You cannot use auto-negotiating protocol while requiring SASL.\\n\");\n                exit(EX_USAGE);\n            }\n            if (settings.binding_protocol == ascii_prot) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"ERROR: You cannot use only ASCII protocol while requiring SASL.\\n\");\n                exit(EX_USAGE);\n            }\n        }\n    }\n\n    if (tcp_specified && !udp_specified) {\n        settings.udpport = settings.port;\n    } else if (udp_specified && !tcp_specified) {\n        settings.port = settings.udpport;\n    }\n\n    /*\n    if (engine_config != NULL && strlen(old_options) > 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"ERROR: You can't mix -e with the old options\\n\");\n        return (NULL);\n    } else if (engine_config == NULL && strlen(old_options) > 0) {\n        engine_config = old_options;\n    } */\n\n    if (maxcore != 0) {\n        struct rlimit rlim_new;\n        /*\n         * First try raising to infinity; if that fails, try bringing\n         * the soft limit to the hard.\n         */\n        if (getrlimit(RLIMIT_CORE, &rlim) == 0) {\n            rlim_new.rlim_cur = rlim_new.rlim_max = RLIM_INFINITY;\n            if (setrlimit(RLIMIT_CORE, &rlim_new)!= 0) {\n                /* failed. try raising just to the old max */\n                rlim_new.rlim_cur = rlim_new.rlim_max = rlim.rlim_max;\n                (void)setrlimit(RLIMIT_CORE, &rlim_new);\n            }\n        }\n        /*\n         * getrlimit again to see what we ended up with. Only fail if\n         * the soft limit ends up 0, because then no core files will be\n         * created at all.\n         */\n\n        if ((getrlimit(RLIMIT_CORE, &rlim) != 0) || rlim.rlim_cur == 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to ensure corefile creation\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /*\n     * If needed, increase rlimits to allow as many connections\n     * as needed.\n     */\n\n    if (getrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"failed to getrlimit number of files\\n\");\n        exit(EX_OSERR);\n    } else {\n        int maxfiles = settings.maxconns;\n        if (rlim.rlim_cur < maxfiles)\n            rlim.rlim_cur = maxfiles;\n        if (rlim.rlim_max < rlim.rlim_cur)\n            rlim.rlim_max = rlim.rlim_cur;\n        if (setrlimit(RLIMIT_NOFILE, &rlim) != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to set rlimit for open files. Try running as\"\n                    \" root or requesting smaller maxconns value.\\n\");\n            exit(EX_OSERR);\n        }\n    }\n\n    /* Sanity check for the connection structures */\n    int nfiles = 0;\n    if (settings.port != 0) {\n        nfiles += 2;\n    }\n    if (settings.udpport != 0) {\n        nfiles += settings.num_threads * 2;\n    }\n\n    if (settings.maxconns <= nfiles) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Configuratioin error. \\n\"\n                \"You specified %d connections, but the system will use at \"\n                \"least %d\\nconnection structures to start.\\n\",\n                settings.maxconns, nfiles);\n        exit(EX_USAGE);\n    }\n\n    /* lose root privileges if we have them */\n    if (getuid() == 0 || geteuid() == 0) {\n        if (username == 0 || *username == '\\0') {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"can't run as root without the -u switch\\n\");\n            exit(EX_USAGE);\n        }\n        if ((pw = getpwnam(username)) == 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"can't find the user %s to switch to\\n\", username);\n            exit(EX_NOUSER);\n        }\n        if (setgid(pw->pw_gid) < 0 || setuid(pw->pw_uid) < 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to assume identity of user %s: %s\\n\", username,\n                    strerror(errno));\n            exit(EX_OSERR);\n        }\n    }\n\n#ifdef SASL_ENABLED\n    init_sasl();\n#endif /* SASL */\n\n    /* daemonize if requested */\n    /* if we want to ensure our ability to dump core, don't chdir to / */\n    if (do_daemonize) {\n        if (sigignore(SIGHUP) == -1) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Failed to ignore SIGHUP: \", strerror(errno));\n        }\n        if (daemonize(maxcore, settings.verbose) == -1) {\n             settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"failed to daemon() in order to daemonize\\n\");\n            exit(EXIT_FAILURE);\n        }\n    }\n\n    /* lock paged memory if needed */\n    if (lock_memory) {\n#ifdef HAVE_MLOCKALL\n        int res = mlockall(MCL_CURRENT | MCL_FUTURE);\n        if (res != 0) {\n            settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"warning: -k invalid, mlockall() failed: %s\\n\",\n                    strerror(errno));\n        }\n#else\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"warning: -k invalid, mlockall() not supported on this platform.  proceeding without.\\n\");\n#endif\n    }\n\n    /* initialize main thread libevent instance */\n    main_base = event_init();\n\n    /* Load the storage engine */\n    ENGINE_HANDLE *engine_handle = NULL;\n    if (!load_engine(engine,get_server_api,settings.extensions.logger,&engine_handle)) {\n        /* Error already reported */\n#ifdef INNODB_MEMCACHED\n        shutdown_server();\n        goto func_exit;\n#else\n        exit(EXIT_FAILURE);\n#endif\n    }\n\n#ifdef INNODB_MEMCACHED\n    my_thread_init();\n#endif\n\n    if(!init_engine(engine_handle,engine_config,settings.extensions.logger)) {\n#ifdef INNODB_MEMCACHED\n\tmy_thread_end();\n        shutdown_server();\n        goto func_exit;\n#else\n\treturn(false);\n#endif /* INNODB_MEMCACHED */\n    }\n\n    if(settings.verbose > 0) {\n        log_engine_details(engine_handle,settings.extensions.logger);\n    }\n    settings.engine.v1 = (ENGINE_HANDLE_V1 *) engine_handle;\n\n    if (settings.engine.v1->arithmetic == NULL) {\n        settings.engine.v1->arithmetic = internal_arithmetic;\n    }\n\n    /* initialize other stuff */\n    stats_init();\n\n    if (!(conn_cache = cache_create(\"conn\", sizeof(conn), sizeof(void*),\n                                    conn_constructor, conn_destructor))) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to create connection cache\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    default_independent_stats = new_independent_stats();\n\n#ifdef INNODB_MEMCACHED\n    if (!default_independent_stats) {\n\texit(EXIT_FAILURE);\n    }\n#endif\n\n#ifndef __WIN32__\n    /*\n     * ignore SIGPIPE signals; we can use errno == EPIPE if we\n     * need that information\n     */\n    if (sigignore(SIGPIPE) == -1) {\n        settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"failed to ignore SIGPIPE; sigaction\");\n        exit(EX_OSERR);\n    }\n#endif\n\n    /* start up worker threads if MT mode */\n    thread_init(settings.num_threads, main_base, dispatch_event_handler);\n\n    /* initialise clock event */\n    clock_handler(0, 0, 0);\n\n    /* create unix mode sockets after dropping privileges */\n    if (settings.socketpath != NULL) {\n        if (server_socket_unix(settings.socketpath,settings.access)) {\n            vperror(\"failed to listen on UNIX socket: %s\", settings.socketpath);\n            exit(EX_OSERR);\n        }\n    }\n\n    /* create the listening socket, bind it, and init */\n    if (settings.socketpath == NULL) {\n        int udp_port;\n\n        const char *portnumber_filename = getenv(\"MEMCACHED_PORT_FILENAME\");\n        char temp_portnumber_filename[PATH_MAX];\n        FILE *portnumber_file = NULL;\n\n        if (portnumber_filename != NULL) {\n            snprintf(temp_portnumber_filename,\n                     sizeof(temp_portnumber_filename),\n                     \"%s.lck\", portnumber_filename);\n\n            portnumber_file = fopen(temp_portnumber_filename, \"a\");\n            if (portnumber_file == NULL) {\n                settings.extensions.logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Failed to open \\\"%s\\\": %s\\n\",\n                        temp_portnumber_filename, strerror(errno));\n            }\n        }\n\n        if (settings.port && server_sockets(settings.port, tcp_transport,\n                                            portnumber_file)) {\n\t\tvperror(\"failed to listen on TCP port %d\", settings.port);\n#ifdef INNODB_MEMCACHED\n\t\tmy_thread_end();\n\t\tshutdown_server();\n\t\tgoto func_exit;\n#else\n\t\texit(EX_OSERR);\n#endif /* INNODB_MEMCACHED */\n        }\n\n        /*\n         * initialization order: first create the listening sockets\n         * (may need root on low ports), then drop root if needed,\n         * then daemonise if needed, then init libevent (in some cases\n         * descriptors created by libevent wouldn't survive forking).\n         */\n        udp_port = settings.udpport ? settings.udpport : settings.port;\n\n        /* create the UDP listening socket and bind it */\n        if (settings.udpport && server_sockets(settings.udpport, udp_transport,\n                                               portnumber_file)) {\n            vperror(\"failed to listen on UDP port %d\", settings.udpport);\n            exit(EX_OSERR);\n        }\n\n        if (portnumber_file) {\n            fclose(portnumber_file);\n            rename(temp_portnumber_filename, portnumber_filename);\n        }\n    }\n\n    if (pid_file != NULL) {\n        save_pid(pid_file);\n    }\n\n    /* Drop privileges no longer needed */\n    drop_privileges();\n\n    memcached_initialized = 1;\n\n    /* enter the event loop */\n    event_base_loop(main_base, 0);\n\n    if (settings.verbose) {\n        settings.extensions.logger->log(EXTENSION_LOG_INFO, NULL,\n                                        \"Initiating shutdown\\n\");\n    }\n\nfunc_exit:\n\n    if (settings.engine.v1)\n      settings.engine.v1->destroy(settings.engine.v0, false);\n\n    threads_shutdown();\n\n    /* remove the PID file if we're a daemon */\n    if (do_daemonize)\n        remove_pidfile(pid_file);\n    /* Clean up strdup() call for bind() address */\n    if (settings.inter)\n      free(settings.inter);\n\n#ifdef INNODB_MEMCACHED\n    /* free event base */\n    if (main_base) {\n        event_base_free(main_base);\n        main_base = NULL;\n    }\n    my_thread_end();\n#endif\n\n    memcached_shutdown = 2;\n    memcached_initialized = 2;\n\n    return EXIT_SUCCESS;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/innodb_memcached/daemon_memcached/utilities/engine_loader.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include \"config.h\"\n#include <ctype.h>\n#include <stdio.h>\n#include <string.h>\n#include <dlfcn.h>\n#include \"utilities/engine_loader.h\"\n#include <memcached/types.h>\n\nstatic const char * const feature_descriptions[] = {\n    \"compare and swap\",\n    \"persistent storage\",\n    \"secondary engine\",\n    \"access control\",\n    \"multi tenancy\",\n    \"LRU\"\n};\n\nvoid *handle = NULL;\n\nbool load_engine(const char *soname,\n                 SERVER_HANDLE_V1 *(*get_server_api)(void),\n                 EXTENSION_LOGGER_DESCRIPTOR *logger,\n                 ENGINE_HANDLE **engine_handle)\n{\n    ENGINE_HANDLE *engine = NULL;\n    /* Hack to remove the warning from C99 */\n    union my_hack {\n        CREATE_INSTANCE create;\n        void* voidptr;\n    } my_create = {.create = NULL };\n\n    handle = dlopen(soname, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to open library \\\"%s\\\": %s\\n\",\n                soname ? soname : \"self\",\n                msg ? msg : \"unknown error\");\n        return false;\n    }\n\n    void *symbol = dlsym(handle, \"create_instance\");\n    if (symbol == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Could not find symbol \\\"create_instance\\\" in %s: %s\\n\",\n                soname ? soname : \"self\",\n                dlerror());\n        return false;\n    }\n    my_create.voidptr = symbol;\n\n    /* request a instance with protocol version 1 */\n    ENGINE_ERROR_CODE error = (*my_create.create)(1, get_server_api, &engine);\n\n    if (error != ENGINE_SUCCESS || engine == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to create instance. Error code: %d\\n\", error);\n        dlclose(handle);\n        return false;\n    }\n    *engine_handle = engine;\n    return true;\n}\n\nbool init_engine(ENGINE_HANDLE * engine,\n                 const char *config_str,\n                 EXTENSION_LOGGER_DESCRIPTOR *logger)\n{\n    ENGINE_HANDLE_V1 *engine_v1 = NULL;\n\n    if (handle == NULL) {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                \"Failed to initialize engine, engine must fist be loaded.\");\n        return false;\n    }\n\n    if (engine->interface == 1) {\n        engine_v1 = (ENGINE_HANDLE_V1*)engine;\n\n        // validate that the required engine interface is implemented:\n        if (engine_v1->get_info == NULL || engine_v1->initialize == NULL ||\n            engine_v1->destroy == NULL || engine_v1->allocate == NULL ||\n            engine_v1->remove == NULL || engine_v1->release == NULL ||\n            engine_v1->get == NULL || engine_v1->store == NULL ||\n            engine_v1->flush == NULL ||\n            engine_v1->get_stats == NULL || engine_v1->reset_stats == NULL ||\n            engine_v1->item_set_cas == NULL ||\n            engine_v1->get_item_info == NULL)\n        {\n            logger->log(EXTENSION_LOG_WARNING, NULL,\n                        \"Failed to initialize engine; it does not implement the engine interface.\");\n            return false;\n        }\n\n        ENGINE_ERROR_CODE error = engine_v1->initialize(engine,config_str);\n        if (error != ENGINE_SUCCESS) {\n            engine_v1->destroy(engine, false);\n            logger->log(EXTENSION_LOG_WARNING, NULL,\n                    \"Failed to initialize instance. Error code: %d\\n\",\n                    error);\n            dlclose(handle);\n            return false;\n        }\n    } else {\n        logger->log(EXTENSION_LOG_WARNING, NULL,\n                 \"Unsupported interface level\\n\");\n        dlclose(handle);\n        return false;\n    }\n    return true;\n}\n\nvoid log_engine_details(ENGINE_HANDLE * engine,\n                        EXTENSION_LOGGER_DESCRIPTOR *logger)\n{\n    ENGINE_HANDLE_V1 *engine_v1 = (ENGINE_HANDLE_V1*)engine;\n    const engine_info *info;\n    info = engine_v1->get_info(engine);\n    if (info) {\n        char message[4096];\n        ssize_t nw = snprintf(message, sizeof(message), \"Loaded engine: %s\\n\",\n                                        info->description ?\n                                        info->description : \"Unknown\");\n        if (nw == -1) {\n            return;\n        }\n        ssize_t offset = nw;\n        bool comma = false;\n\n        if (info->num_features > 0) {\n            nw = snprintf(message + offset, sizeof(message) - offset,\n                          \"Supplying the following features: \");\n            if (nw == -1) {\n                return;\n            }\n            offset += nw;\n            for (int ii = 0; ii < info->num_features; ++ii) {\n                if (info->features[ii].description != NULL) {\n                    // We don't want to write partially from source\n                    if (sizeof(message)-offset <=\n                        2+strlen(info->features[ii].description))\n                    {\n                        return;\n                    }\n\n                    nw = snprintf(message + offset, sizeof(message) - offset,\n                                  \"%s%s\", comma ? \", \" : \"\",\n                                  info->features[ii].description);\n                } else {\n                    if (info->features[ii].feature <= LAST_REGISTERED_ENGINE_FEATURE) {\n                        nw = snprintf(message + offset, sizeof(message) - offset,\n                                      \"%s%s\", comma ? \", \" : \"\",\n                                      feature_descriptions[info->features[ii].feature]);\n                    } else {\n                        nw = snprintf(message + offset, sizeof(message) - offset,\n                                      \"%sUnknown feature: %d\", comma ? \", \" : \"\",\n                                      info->features[ii].feature);\n                    }\n                }\n                comma = true;\n                if (nw == -1) {\n                    return;\n                }\n                offset += nw;\n            }\n        }\n        logger->log(EXTENSION_LOG_INFO, NULL, \"%s\\n\", message);\n    } else {\n        logger->log(EXTENSION_LOG_INFO, NULL,\n                                        \"Loaded engine: Unknown\\n\");\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/innodb_memcached/daemon_memcached/programs/engine_testapp.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include \"config.h\"\n#include <assert.h>\n#include <dlfcn.h>\n#include <errno.h>\n#include <stdarg.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <unistd.h>\n#include <signal.h>\n#include <pthread.h>\n#include \"utilities/engine_loader.h\"\n#include <memcached/engine_testapp.h>\n#include <memcached/extension_loggers.h>\n#include <mock_server.h>\n\nstruct mock_engine {\n    ENGINE_HANDLE_V1 me;\n    ENGINE_HANDLE_V1 *the_engine;\n    TAP_ITERATOR iterator;\n};\n\n#ifndef WIN32\nstatic sig_atomic_t alarmed;\n\nstatic void alarm_handler(int sig) {\n    alarmed = 1;\n}\n#endif\n\nstatic inline struct mock_engine* get_handle(ENGINE_HANDLE* handle) {\n    return (struct mock_engine*)handle;\n}\n\nstatic tap_event_t mock_tap_iterator(ENGINE_HANDLE* handle,\n                                     const void *cookie, item **itm,\n                                     void **es, uint16_t *nes, uint8_t *ttl,\n                                     uint16_t *flags, uint32_t *seqno,\n                                     uint16_t *vbucket) {\n   struct mock_engine *me = get_handle(handle);\n   return me->iterator((ENGINE_HANDLE*)me->the_engine, cookie, itm, es, nes,\n                       ttl, flags, seqno, vbucket);\n}\n\nstatic const engine_info* mock_get_info(ENGINE_HANDLE* handle) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_info((ENGINE_HANDLE*)me->the_engine);\n}\n\nstatic ENGINE_ERROR_CODE mock_initialize(ENGINE_HANDLE* handle,\n                                         const char* config_str) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->initialize((ENGINE_HANDLE*)me->the_engine, config_str);\n}\n\nstatic void mock_destroy(ENGINE_HANDLE* handle, const bool force) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->destroy((ENGINE_HANDLE*)me->the_engine, force);\n}\n\nstatic ENGINE_ERROR_CODE mock_allocate(ENGINE_HANDLE* handle,\n                                       const void* cookie,\n                                       item **item,\n                                       const void* key,\n                                       const size_t nkey,\n                                       const size_t nbytes,\n                                       const int flags,\n                                       const rel_time_t exptime) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->allocate((ENGINE_HANDLE*)me->the_engine, c,\n                                           item, key, nkey,\n                                           nbytes, flags,\n                                           exptime)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_remove(ENGINE_HANDLE* handle,\n                                     const void* cookie,\n                                     const void* key,\n                                     const size_t nkey,\n                                     uint64_t cas,\n                                     uint16_t vbucket)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->remove((ENGINE_HANDLE*)me->the_engine, c, key,\n                                         nkey, cas, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_release(ENGINE_HANDLE* handle,\n                         const void *cookie,\n                         item* item) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->release((ENGINE_HANDLE*)me->the_engine, cookie, item);\n}\n\nstatic ENGINE_ERROR_CODE mock_get(ENGINE_HANDLE* handle,\n                                  const void* cookie,\n                                  item** item,\n                                  const void* key,\n                                  const int nkey,\n                                  uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->get((ENGINE_HANDLE*)me->the_engine, c, item,\n                                      key, nkey, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_get_stats(ENGINE_HANDLE* handle,\n                                        const void* cookie,\n                                        const char* stat_key,\n                                        int nkey,\n                                        ADD_STAT add_stat)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->get_stats((ENGINE_HANDLE*)me->the_engine, c, stat_key,\n                                            nkey, add_stat)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_store(ENGINE_HANDLE* handle,\n                                    const void *cookie,\n                                    item* item,\n                                    uint64_t *cas,\n                                    ENGINE_STORE_OPERATION operation,\n                                    uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->store((ENGINE_HANDLE*)me->the_engine, c, item, cas,\n                                        operation, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_arithmetic(ENGINE_HANDLE* handle,\n                                         const void* cookie,\n                                         const void* key,\n                                         const int nkey,\n                                         const bool increment,\n                                         const bool create,\n                                         const uint64_t delta,\n                                         const uint64_t initial,\n                                         const rel_time_t exptime,\n                                         uint64_t *cas,\n                                         uint64_t *result,\n                                         uint16_t vbucket) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->arithmetic((ENGINE_HANDLE*)me->the_engine, c, key,\n                                             nkey, increment, create,\n                                             delta, initial, exptime,\n                                             cas, result, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_flush(ENGINE_HANDLE* handle,\n                                    const void* cookie, time_t when) {\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->flush((ENGINE_HANDLE*)me->the_engine, c, when)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_reset_stats(ENGINE_HANDLE* handle, const void *cookie) {\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->reset_stats((ENGINE_HANDLE*)me->the_engine, cookie);\n}\n\nstatic ENGINE_ERROR_CODE mock_unknown_command(ENGINE_HANDLE* handle,\n                                              const void* cookie,\n                                              protocol_binary_request_header *request,\n                                              ADD_RESPONSE response)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->unknown_command((ENGINE_HANDLE*)me->the_engine, c,\n                                                  request, response)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic void mock_item_set_cas(ENGINE_HANDLE *handle, const void *cookie,\n                              item* item, uint64_t val)\n{\n    struct mock_engine *me = get_handle(handle);\n    me->the_engine->item_set_cas((ENGINE_HANDLE*)me->the_engine, cookie, item, val);\n}\n\n\nstatic bool mock_get_item_info(ENGINE_HANDLE *handle, const void *cookie,\n                               const item* item, item_info *item_info)\n{\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_item_info((ENGINE_HANDLE*)me->the_engine,\n                                         cookie, item, item_info);\n}\n\nstatic void *mock_get_stats_struct(ENGINE_HANDLE* handle, const void* cookie)\n{\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->get_stats_struct((ENGINE_HANDLE*)me->the_engine, cookie);\n}\n\nstatic ENGINE_ERROR_CODE mock_aggregate_stats(ENGINE_HANDLE* handle,\n                                              const void* cookie,\n                                              void (*callback)(void*, void*),\n                                              void *vptr)\n{\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->aggregate_stats((ENGINE_HANDLE*)me->the_engine, c,\n                                                  callback, vptr)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\nstatic ENGINE_ERROR_CODE mock_tap_notify(ENGINE_HANDLE* handle,\n                                        const void *cookie,\n                                        void *engine_specific,\n                                        uint16_t nengine,\n                                        uint8_t ttl,\n                                        uint16_t tap_flags,\n                                        tap_event_t tap_event,\n                                        uint32_t tap_seqno,\n                                        const void *key,\n                                        size_t nkey,\n                                        uint32_t flags,\n                                        uint32_t exptime,\n                                        uint64_t cas,\n                                        const void *data,\n                                        size_t ndata,\n                                         uint16_t vbucket) {\n\n    struct mock_engine *me = get_handle(handle);\n    struct mock_connstruct *c = (void*)cookie;\n    if (c == NULL) {\n        c = (void*)create_mock_cookie();\n    }\n\n    c->nblocks = 0;\n    ENGINE_ERROR_CODE ret = ENGINE_SUCCESS;\n    pthread_mutex_lock(&c->mutex);\n    while (ret == ENGINE_SUCCESS &&\n           (ret = me->the_engine->tap_notify((ENGINE_HANDLE*)me->the_engine, c,\n                                             engine_specific, nengine, ttl, tap_flags,\n                                             tap_event, tap_seqno, key, nkey, flags,\n                                             exptime, cas, data, ndata, vbucket)) == ENGINE_EWOULDBLOCK &&\n           c->handle_ewouldblock)\n    {\n        ++c->nblocks;\n        pthread_cond_wait(&c->cond, &c->mutex);\n        ret = c->status;\n    }\n    pthread_mutex_unlock(&c->mutex);\n\n    if (c != cookie) {\n        destroy_mock_cookie(c);\n    }\n\n    return ret;\n}\n\n\nstatic TAP_ITERATOR mock_get_tap_iterator(ENGINE_HANDLE* handle, const void* cookie,\n                                           const void* client, size_t nclient,\n                                           uint32_t flags,\n                                           const void* userdata, size_t nuserdata) {\n    struct mock_engine *me = get_handle(handle);\n    me->iterator = me->the_engine->get_tap_iterator((ENGINE_HANDLE*)me->the_engine, cookie,\n                                                    client, nclient, flags, userdata, nuserdata);\n    return (me->iterator != NULL) ? mock_tap_iterator : NULL;\n}\n\nstatic size_t mock_errinfo(ENGINE_HANDLE *handle, const void* cookie,\n                           char *buffer, size_t buffsz) {\n    struct mock_engine *me = get_handle(handle);\n    return me->the_engine->errinfo((ENGINE_HANDLE*)me->the_engine, cookie,\n                                   buffer, buffsz);\n}\n\n\nstruct mock_engine default_mock_engine = {\n    .me = {\n        .interface = {\n            .interface = 1\n        },\n        .get_info = mock_get_info,\n        .initialize = mock_initialize,\n        .destroy = mock_destroy,\n        .allocate = mock_allocate,\n        .remove = mock_remove,\n        .release = mock_release,\n        .get = mock_get,\n        .store = mock_store,\n        .arithmetic = mock_arithmetic,\n        .flush = mock_flush,\n        .get_stats = mock_get_stats,\n        .reset_stats = mock_reset_stats,\n        .get_stats_struct = mock_get_stats_struct,\n        .aggregate_stats = mock_aggregate_stats,\n        .unknown_command = mock_unknown_command,\n        .tap_notify = mock_tap_notify,\n        .get_tap_iterator = mock_get_tap_iterator,\n        .item_set_cas = mock_item_set_cas,\n        .get_item_info = mock_get_item_info,\n        .errinfo = mock_errinfo\n    }\n};\nstruct mock_engine mock_engine;\n\nEXTENSION_LOGGER_DESCRIPTOR *logger_descriptor = NULL;\nstatic ENGINE_HANDLE *handle = NULL;\nstatic ENGINE_HANDLE_V1 *handle_v1 = NULL;\n\nstatic void usage(void) {\n    printf(\"\\n\");\n    printf(\"engine_testapp -E <path_to_engine_lib> -T <path_to_testlib>\\n\");\n    printf(\"               [-e <engine_config>] [-h]\\n\");\n    printf(\"\\n\");\n    printf(\"-E <path_to_engine_lib>      Path to the engine library file. The\\n\");\n    printf(\"                             engine library file is a library file\\n\");\n    printf(\"                             (.so or .dll) that the contains the \\n\");\n    printf(\"                             implementation of the engine being\\n\");\n    printf(\"                             tested.\\n\");\n    printf(\"\\n\");\n    printf(\"-T <path_to_testlib>         Path to the test library file. The test\\n\");\n    printf(\"                             library file is a library file (.so or\\n\");\n    printf(\"                             .dll) that contains the set of tests\\n\");\n    printf(\"                             to be executed.\\n\");\n    printf(\"\\n\");\n    printf(\"-t <timeout>                 Maximum time to run a test.\\n\");\n    printf(\"-e <engine_config>           Engine configuration string passed to\\n\");\n    printf(\"                             the engine.\\n\");\n    printf(\"-q                           Only print errors.\");\n    printf(\"-.                           Print a . for each executed test.\");\n    printf(\"\\n\");\n    printf(\"-h                           Prints this usage text.\\n\");\n    printf(\"\\n\");\n}\n\nstatic int report_test(const char *name, enum test_result r, bool quiet) {\n    int rc = 0;\n    char *msg = NULL;\n    bool color_enabled = getenv(\"TESTAPP_ENABLE_COLOR\") != NULL;\n    int color = 0;\n    char color_str[8] = { 0 };\n    char *reset_color = \"\\033[m\";\n    switch(r) {\n    case SUCCESS:\n        msg=\"OK\";\n        color = 32;\n        break;\n    case SKIPPED:\n        msg=\"SKIPPED\";\n        color = 32;\n        break;\n    case FAIL:\n        color = 31;\n        msg=\"FAIL\";\n        rc = 1;\n        break;\n    case DIED:\n        color = 31;\n        msg = \"DIED\";\n        rc = 1;\n        break;\n    case TIMEOUT:\n        color = 31;\n        msg = \"TIMED OUT\";\n        rc = 1;\n        break;\n    case CORE:\n        color = 31;\n        msg = \"CORE DUMPED\";\n        rc = 1;\n        break;\n    case PENDING:\n        color = 33;\n        msg = \"PENDING\";\n        break;\n    }\n    assert(msg);\n    if (color_enabled) {\n        snprintf(color_str, sizeof(color_str), \"\\033[%dm\", color);\n    }\n    if (quiet) {\n        if (r != SUCCESS) {\n            printf(\"%s:  %s%s%s\\n\", name, color_str, msg,\n                   color_enabled ? reset_color : \"\");\n            fflush(stdout);\n        }\n    } else {\n        printf(\"%s%s%s\\n\", color_str, msg, color_enabled ? reset_color : \"\");\n    }\n    return rc;\n}\n\nstatic ENGINE_HANDLE_V1 *start_your_engines(const char *engine, const char* cfg, bool engine_init) {\n\n    init_mock_server(handle);\n    if (!load_engine(engine, &get_mock_server_api, logger_descriptor, &handle)) {\n        fprintf(stderr, \"Failed to load engine %s.\\n\", engine);\n        return NULL;\n    }\n\n    if (engine_init) {\n        if(!init_engine(handle, cfg, logger_descriptor)) {\n            fprintf(stderr, \"Failed to init engine %s with config %s.\\n\", engine, cfg);\n            return NULL;\n        }\n    }\n\n    mock_engine = default_mock_engine;\n    handle_v1 = mock_engine.the_engine = (ENGINE_HANDLE_V1*)handle;\n    handle = (ENGINE_HANDLE*)&mock_engine.me;\n    handle_v1 = &mock_engine.me;\n\n    // Reset all members that aren't set (to allow the users to write\n    // testcases to verify that they initialize them..\n    assert(mock_engine.me.interface.interface == mock_engine.the_engine->interface.interface);\n\n    if (mock_engine.the_engine->get_stats_struct == NULL) {\n        mock_engine.me.get_stats_struct = NULL;\n    }\n    if (mock_engine.the_engine->aggregate_stats == NULL) {\n        mock_engine.me.aggregate_stats = NULL;\n    }\n    if (mock_engine.the_engine->unknown_command == NULL) {\n        mock_engine.me.unknown_command = NULL;\n    }\n    if (mock_engine.the_engine->tap_notify == NULL) {\n        mock_engine.me.tap_notify = NULL;\n    }\n    if (mock_engine.the_engine->get_tap_iterator == NULL) {\n        mock_engine.me.get_tap_iterator = NULL;\n    }\n    if (mock_engine.the_engine->errinfo == NULL) {\n        mock_engine.me.errinfo = NULL;\n    }\n\n    return &mock_engine.me;\n}\n\nstatic void destroy_engine(bool force) {\n    if (handle_v1) {\n        handle_v1->destroy(handle, force);\n        handle_v1 = NULL;\n        handle = NULL;\n    }\n}\n\nstatic void reload_engine(ENGINE_HANDLE **h, ENGINE_HANDLE_V1 **h1,\n                          const char* engine, const char *cfg, bool init, bool force) {\n    destroy_engine(force);\n    handle_v1 = start_your_engines(engine, cfg, init);\n    handle = (ENGINE_HANDLE*)(handle_v1);\n    *h1 = handle_v1;\n    *h = handle;\n}\n\nstatic enum test_result run_test(engine_test_t test, const char *engine, const char *default_cfg) {\n    enum test_result ret = PENDING;\n    if (test.tfun != NULL) {\n#if !defined(USE_GCOV) && !defined(WIN32)\n        pid_t pid = fork();\n        if (pid == 0) {\n#endif\n            /* Start the engines and go */\n            start_your_engines(engine, test.cfg ? test.cfg : default_cfg, true);\n            if (test.test_setup != NULL) {\n                if (!test.test_setup(handle, handle_v1)) {\n                    fprintf(stderr, \"Failed to run setup for test %s\\n\", test.name);\n                    return FAIL;\n                }\n            }\n            ret = test.tfun(handle, handle_v1);\n            if (test.test_teardown != NULL) {\n                if (!test.test_teardown(handle, handle_v1)) {\n                    fprintf(stderr, \"WARNING: Failed to run teardown for test %s\\n\", test.name);\n                }\n            }\n            destroy_engine(false);\n#if !defined(USE_GCOV) && !defined(WIN32)\n            exit((int)ret);\n        } else if (pid == (pid_t)-1) {\n            ret = FAIL;\n        } else {\n            int rc;\n            while (alarmed == 0 && waitpid(pid, &rc, 0) == (pid_t)-1) {\n                if (errno != EINTR) {\n                    abort();\n                }\n            }\n\n            if (alarmed) {\n                kill(pid, 9);\n                ret = TIMEOUT;\n            } else if (WIFEXITED(rc)) {\n                ret = (enum test_result)WEXITSTATUS(rc);\n            } else if (WIFSIGNALED(rc) && WCOREDUMP(rc)) {\n                ret = CORE;\n            } else {\n                ret = DIED;\n            }\n        }\n#endif\n    }\n\n    return ret;\n}\n\nstatic void setup_alarm_handler() {\n#ifndef WIN32\n    struct sigaction sig_handler;\n\n    sig_handler.sa_handler = alarm_handler;\n    sig_handler.sa_flags = 0;\n\n    sigaction(SIGALRM, &sig_handler, NULL);\n#endif\n}\n\nstatic void set_test_timeout(int timeout) {\n#ifndef WIN32\n    alarm(timeout);\n#endif\n}\n\nstatic void clear_test_timeout() {\n#ifndef WIN32\n    alarm(0);\n    alarmed = 0;\n#endif\n}\n\nint main(int argc, char **argv) {\n    int c, exitcode = 0, num_cases = 0, timeout = 0;\n    bool quiet = false;\n    bool dot = false;\n    const char *engine = NULL;\n    const char *engine_args = NULL;\n    const char *test_suite = NULL;\n    const char *test_case = NULL;\n    engine_test_t *testcases = NULL;\n    logger_descriptor = get_null_logger();\n\n    /* Hack to remove the warning from C99 */\n    union {\n        GET_TESTS get_tests;\n        void* voidptr;\n    } my_get_test = {.get_tests = NULL };\n\n    /* Hack to remove the warning from C99 */\n    union {\n        SETUP_SUITE setup_suite;\n        void* voidptr;\n    } my_setup_suite = {.setup_suite = NULL };\n\n    /* Hack to remove the warning from C99 */\n    union {\n        TEARDOWN_SUITE teardown_suite;\n        void* voidptr;\n    } my_teardown_suite = {.teardown_suite = NULL };\n\n\n    /* Use unbuffered stdio */\n    setbuf(stdout, NULL);\n    setbuf(stderr, NULL);\n\n    setup_alarm_handler();\n\n    /* process arguments */\n    while (-1 != (c = getopt(argc, argv,\n          \"h\"  /* usage */\n          \"E:\" /* Engine to load */\n          \"e:\" /* Engine options */\n          \"T:\" /* Library with tests to load */\n          \"t:\" /* Timeout */\n          \"q\"  /* Be more quiet (only report failures) */\n          \".\"  /* dot mode. */\n          \"n:\"  /* test case to run */\n        ))) {\n        switch (c) {\n        case 'E':\n            engine = optarg;\n            break;\n        case 'e':\n            engine_args = optarg;\n            break;\n        case 'h':\n            usage();\n            return 0;\n        case 'T':\n            test_suite = optarg;\n            break;\n        case 't':\n            timeout = atoi(optarg);\n            break;\n        case 'n':\n            test_case = optarg;\n            break;\n        case 'q':\n            quiet = true;\n            break;\n        case '.':\n            dot = true;\n            break;\n        default:\n            fprintf(stderr, \"Illegal argument \\\"%c\\\"\\n\", c);\n            return 1;\n        }\n    }\n\n    //validate args\n    if (engine == NULL) {\n        fprintf(stderr, \"You must provide a path to the storage engine library.\\n\");\n        return 1;\n    }\n\n    if (test_suite == NULL) {\n        fprintf(stderr, \"You must provide a path to the testsuite library.\\n\");\n        return 1;\n    }\n\n    //load test_suite\n    void* handle = dlopen(test_suite, RTLD_NOW | RTLD_LOCAL);\n    if (handle == NULL) {\n        const char *msg = dlerror();\n        fprintf(stderr, \"Failed to load testsuite %s: %s\\n\", test_suite, msg ? msg : \"unknown error\");\n        return 1;\n    }\n\n    //get the test cases\n    void *symbol = dlsym(handle, \"get_tests\");\n    if (symbol == NULL) {\n        const char *msg = dlerror();\n        fprintf(stderr, \"Could not find get_tests function in testsuite %s: %s\\n\", test_suite, msg ? msg : \"unknown error\");\n        return 1;\n    }\n    my_get_test.voidptr = symbol;\n    testcases = (*my_get_test.get_tests)();\n\n    //set up the suite if needed\n    struct test_harness harness = { .default_engine_cfg = engine_args,\n                                    .engine_path = engine,\n                                    .reload_engine = reload_engine,\n                                    .start_engine = start_your_engines,\n                                    .create_cookie = create_mock_cookie,\n                                    .destroy_cookie = destroy_mock_cookie,\n                                    .set_ewouldblock_handling = mock_set_ewouldblock_handling,\n                                    .lock_cookie = lock_mock_cookie,\n                                    .unlock_cookie = unlock_mock_cookie,\n                                    .waitfor_cookie = waitfor_mock_cookie,\n                                    .time_travel = mock_time_travel };\n    symbol = dlsym(handle, \"setup_suite\");\n    if (symbol != NULL) {\n        my_setup_suite.voidptr = symbol;\n        if (!(*my_setup_suite.setup_suite)(&harness)) {\n            fprintf(stderr, \"Failed to set up test suite %s \\n\", test_suite);\n            return 1;\n        }\n    }\n\n\n    for (num_cases = 0; testcases[num_cases].name; num_cases++) {\n        /* Just counting */\n    }\n\n    if (!quiet) {\n        printf(\"1..%d\\n\", num_cases);\n    }\n\n    int i;\n    bool need_newline = false;\n    for (i = 0; testcases[i].name; i++) {\n        if (test_case != NULL && strcmp(test_case, testcases[i].name) != 0)\n            continue;\n        if (!quiet) {\n            printf(\"Running %s... \", testcases[i].name);\n            fflush(stdout);\n        } else if(dot) {\n            printf(\".\");\n            need_newline = true;\n            /* Add a newline every few tests */\n            if ((i+1) % 70 == 0) {\n                printf(\"\\n\");\n                need_newline = false;\n            }\n        }\n        set_test_timeout(timeout);\n        exitcode += report_test(testcases[i].name,\n                                run_test(testcases[i], engine, engine_args),\n                                quiet);\n        clear_test_timeout();\n    }\n\n    if (need_newline) {\n        printf(\"\\n\");\n    }\n\n    //tear down the suite if needed\n    symbol = dlsym(handle, \"teardown_suite\");\n    if (symbol != NULL) {\n        my_teardown_suite.voidptr = symbol;\n        if (!(*my_teardown_suite.teardown_suite)()) {\n            fprintf(stderr, \"Failed to teardown up test suite %s \\n\", test_suite);\n        }\n    }\n\n    printf(\"# Passed %d of %d tests\\n\", num_cases - exitcode, num_cases);\n\n    return exitcode;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/innodb_memcached/daemon_memcached/win32/dlfcn.h": "#ifndef DLFCN_H\n#define DLFCN_H\nvoid* dlopen(const char* path, int mode);\nvoid* dlsym(void* handle, const char* symbol);\nint dlclose(void* handle);\nconst char *dlerror(void);\n\n#define RTLD_LAZY 1\n#define RTLD_LOCAL 2\n\n#define RTLD_NOW 0x00002\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/innodb_memcached/daemon_memcached/win32/dlfcn.c": "/* -*- Mode: C; tab-width: 4; c-basic-offset: 4; indent-tabs-mode: nil -*- */\n#include <stdio.h>\n#include <windows.h>\n#include <dlfcn.h>\n#include <stdbool.h>\n\n/*\n * Keep track if the user tried to call dlopen(NULL, xx) to be able to give a sane\n * error message\n */\nstatic bool self = false;\n\nvoid* dlopen(const char* path, int mode) {\n    if (path == NULL) {\n        // We don't support opening ourself\n        self = true;\n        return NULL;\n    }\n\n    void* handle = LoadLibrary(path);\n    if (handle == NULL) {\n        char *buf = malloc(strlen(path) + 20);\n        sprintf(buf, \"%s.dll\", path);\n        handle = LoadLibrary(buf);\n        free(buf);\n    }\n\n    return handle;\n}\n\nvoid* dlsym(void* handle, const char* symbol) {\n    return GetProcAddress(handle, symbol);\n}\n\nint dlclose(void* handle) {\n    // dlclose returns zero on success.\n    // FreeLibrary returns nonzero on success.\n    return FreeLibrary(handle) != 0;\n}\n\nstatic char dlerror_buf[200];\n\nconst char *dlerror(void) {\n    if (self) {\n        return \"not supported\";\n    }\n\n    DWORD err = GetLastError();\n    LPVOID error_msg;\n    if (FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER |\n                      FORMAT_MESSAGE_FROM_SYSTEM |\n                      FORMAT_MESSAGE_IGNORE_INSERTS,\n                      NULL, err, 0, (LPTSTR)&error_msg, 0, NULL) != 0) {\n        strncpy(dlerror_buf, error_msg, sizeof(dlerror_buf));\n        dlerror_buf[sizeof(dlerror_buf) - 1] = '\\0';\n        LocalFree(error_msg);\n    } else {\n        return \"Failed to get error message\";\n    }\n\n    return dlerror_buf;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/extra/libedit/libedit-20190324-3.1/ltmain.sh": "#! /bin/sh\n## DO NOT EDIT - This file generated from ./build-aux/ltmain.in\n##               by inline-source v2014-01-03.01\n\n# libtool (GNU libtool) 2.4.6\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.6\npackage_revision=2.4.6\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Run './libtool --help' for help with using this script from the\n# command line.\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# After configure completes, it has a better idea of some of the\n# shell tools we need than the defaults used by the functions shared\n# with bootstrap, so set those here where they can still be over-\n# ridden by the user, but otherwise take precedence.\n\n: ${AUTOCONF=\"autoconf\"}\n: ${AUTOMAKE=\"automake\"}\n\n\n## -------------------------- ##\n## Source external libraries. ##\n## -------------------------- ##\n\n# Much of our low-level functionality needs to be sourced from external\n# libraries, which are installed to $pkgauxdir.\n\n# Set a version string for this script.\nscriptversion=2015-01-20.17; # UTC\n\n# General shell script boiler plate, and helper functions.\n# Written by Gary V. Vaughan, 2004\n\n# Copyright (C) 2004-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n\n# As a special exception to the GNU General Public License, if you distribute\n# this file as part of a program or library that is built using GNU Libtool,\n# you may include this file under the same distribution terms that you use\n# for the rest of that program.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNES FOR A PARTICULAR PURPOSE. See the GNU\n# General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program. If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# Evaluate this file near the top of your script to gain access to\n# the functions and variables defined here:\n#\n#   . `echo \"$0\" | ${SED-sed} 's|[^/]*$||'`/build-aux/funclib.sh\n#\n# If you need to override any of the default environment variable\n# settings, do that before evaluating this file.\n\n\n## -------------------- ##\n## Shell normalisation. ##\n## -------------------- ##\n\n# Some shells need a little help to be as Bourne compatible as possible.\n# Before doing anything else, make sure all that help has been provided!\n\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix ;; esac\nfi\n\n# NLS nuisances: We save the old values in case they are required later.\n_G_user_locale=\n_G_safe_locale=\nfor _G_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test set = \\\"\\${$_G_var+set}\\\"; then\n          save_$_G_var=\\$$_G_var\n          $_G_var=C\n\t  export $_G_var\n\t  _G_user_locale=\\\"$_G_var=\\\\\\$save_\\$_G_var; \\$_G_user_locale\\\"\n\t  _G_safe_locale=\\\"$_G_var=C; \\$_G_safe_locale\\\"\n\tfi\"\ndone\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Make sure IFS has a sensible default\nsp=' '\nnl='\n'\nIFS=\"$sp\t$nl\"\n\n# There are apparently some retarded systems that use ';' as a PATH separator!\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n\n## ------------------------- ##\n## Locate command utilities. ##\n## ------------------------- ##\n\n\n# func_executable_p FILE\n# ----------------------\n# Check that FILE is an executable regular file.\nfunc_executable_p ()\n{\n    test -f \"$1\" && test -x \"$1\"\n}\n\n\n# func_path_progs PROGS_LIST CHECK_FUNC [PATH]\n# --------------------------------------------\n# Search for either a program that responds to --version with output\n# containing \"GNU\", or else returned by CHECK_FUNC otherwise, by\n# trying all the directories in PATH with each of the elements of\n# PROGS_LIST.\n#\n# CHECK_FUNC should accept the path to a candidate program, and\n# set $func_check_prog_result if it truncates its output less than\n# $_G_path_prog_max characters.\nfunc_path_progs ()\n{\n    _G_progs_list=$1\n    _G_check_func=$2\n    _G_PATH=${3-\"$PATH\"}\n\n    _G_path_prog_max=0\n    _G_path_prog_found=false\n    _G_save_IFS=$IFS; IFS=${PATH_SEPARATOR-:}\n    for _G_dir in $_G_PATH; do\n      IFS=$_G_save_IFS\n      test -z \"$_G_dir\" && _G_dir=.\n      for _G_prog_name in $_G_progs_list; do\n        for _exeext in '' .EXE; do\n          _G_path_prog=$_G_dir/$_G_prog_name$_exeext\n          func_executable_p \"$_G_path_prog\" || continue\n          case `\"$_G_path_prog\" --version 2>&1` in\n            *GNU*) func_path_progs_result=$_G_path_prog _G_path_prog_found=: ;;\n            *)     $_G_check_func $_G_path_prog\n\t\t   func_path_progs_result=$func_check_prog_result\n\t\t   ;;\n          esac\n          $_G_path_prog_found && break 3\n        done\n      done\n    done\n    IFS=$_G_save_IFS\n    test -z \"$func_path_progs_result\" && {\n      echo \"no acceptable sed could be found in \\$PATH\" >&2\n      exit 1\n    }\n}\n\n\n# We want to be able to use the functions in this file before configure\n# has figured out where the best binaries are kept, which means we have\n# to search for them ourselves - except when the results are already set\n# where we skip the searches.\n\n# Unless the user overrides by setting SED, search the path for either GNU\n# sed, or the sed that truncates its output the least.\ntest -z \"$SED\" && {\n  _G_sed_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n  for _G_i in 1 2 3 4 5 6 7; do\n    _G_sed_script=$_G_sed_script$nl$_G_sed_script\n  done\n  echo \"$_G_sed_script\" 2>/dev/null | sed 99q >conftest.sed\n  _G_sed_script=\n\n  func_check_prog_sed ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo '' >> conftest.nl\n      \"$_G_path_prog\" -f conftest.sed <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"sed gsed\" func_check_prog_sed $PATH:/usr/xpg4/bin\n  rm -f conftest.sed\n  SED=$func_path_progs_result\n}\n\n\n# Unless the user overrides by setting GREP, search the path for either GNU\n# grep, or the grep that truncates its output the least.\ntest -z \"$GREP\" && {\n  func_check_prog_grep ()\n  {\n    _G_path_prog=$1\n\n    _G_count=0\n    _G_path_prog_max=0\n    printf 0123456789 >conftest.in\n    while :\n    do\n      cat conftest.in conftest.in >conftest.tmp\n      mv conftest.tmp conftest.in\n      cp conftest.in conftest.nl\n      echo 'GREP' >> conftest.nl\n      \"$_G_path_prog\" -e 'GREP$' -e '-(cannot match)-' <conftest.nl >conftest.out 2>/dev/null || break\n      diff conftest.out conftest.nl >/dev/null 2>&1 || break\n      _G_count=`expr $_G_count + 1`\n      if test \"$_G_count\" -gt \"$_G_path_prog_max\"; then\n        # Best one so far, save it but keep looking for a better one\n        func_check_prog_result=$_G_path_prog\n        _G_path_prog_max=$_G_count\n      fi\n      # 10*(2^10) chars as input seems more than enough\n      test 10 -lt \"$_G_count\" && break\n    done\n    rm -f conftest.in conftest.tmp conftest.nl conftest.out\n  }\n\n  func_path_progs \"grep ggrep\" func_check_prog_grep $PATH:/usr/xpg4/bin\n  GREP=$func_path_progs_result\n}\n\n\n## ------------------------------- ##\n## User overridable command paths. ##\n## ------------------------------- ##\n\n# All uppercase variable names are used for environment variables.  These\n# variables can be overridden by the user before calling a script that\n# uses them if a suitable command of that name is not already available\n# in the command search PATH.\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"printf %s\\n\"}\n: ${EGREP=\"$GREP -E\"}\n: ${FGREP=\"$GREP -F\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n\n\n## -------------------- ##\n## Useful sed snippets. ##\n## -------------------- ##\n\nsed_dirname='s|/[^/]*$||'\nsed_basename='s|^.*/||'\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s|\\([`\"$\\\\]\\)|\\\\\\1|g'\n\n# Same as above, but do not quote variable references.\nsed_double_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s|[].[^$\\\\*\\/]|\\\\&|g'\n\n# Sed substitution that converts a w32 file name or path\n# that contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nsed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-'\\' parameter expansions in output of sed_double_quote_subst that\n# were '\\'-ed in input to the same.  If an odd number of '\\' preceded a\n# '$' in input to sed_double_quote_subst, that '$' was protected from\n# expansion.  Since each input '\\' is now two '\\'s, look for any number\n# of runs of four '\\'s followed by two '\\'s and then a '$'.  '\\' that '$'.\n_G_bs='\\\\'\n_G_bs2='\\\\\\\\'\n_G_bs4='\\\\\\\\\\\\\\\\'\n_G_dollar='\\$'\nsed_double_backslash=\"\\\n  s/$_G_bs4/&\\\\\n/g\n  s/^$_G_bs2$_G_dollar/$_G_bs&/\n  s/\\\\([^$_G_bs]\\\\)$_G_bs2$_G_dollar/\\\\1$_G_bs2$_G_bs$_G_dollar/g\n  s/\\n//g\"\n\n\n## ----------------- ##\n## Global variables. ##\n## ----------------- ##\n\n# Except for the global variables explicitly listed below, the following\n# functions in the '^func_' namespace, and the '^require_' namespace\n# variables initialised in the 'Resource management' section, sourcing\n# this file will not pollute your global namespace with anything\n# else. There's no portable way to scope variables in Bourne shell\n# though, so actually running these functions will sometimes place\n# results into a variable named after the function, and often use\n# temporary variables in the '^_G_' namespace. If you are careful to\n# avoid using those namespaces casually in your sourcing script, things\n# should continue to work as you expect. And, of course, you can freely\n# overwrite any of the functions or variables defined here before\n# calling anything to customize them.\n\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\n# Allow overriding, eg assuming that you follow the convention of\n# putting '$debug_cmd' at the start of all your functions, you can get\n# bash to show function call trace with:\n#\n#    debug_cmd='eval echo \"${FUNCNAME[0]} $*\" >&2' bash your-script-name\ndebug_cmd=${debug_cmd-\":\"}\nexit_cmd=:\n\n# By convention, finish your script with:\n#\n#    exit $exit_status\n#\n# so that you can set exit_status to non-zero if you want to indicate\n# something went wrong during execution without actually bailing out at\n# the point of failure.\nexit_status=$EXIT_SUCCESS\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=$0\n\n# The name of this program.\nprogname=`$ECHO \"$progpath\" |$SED \"$sed_basename\"`\n\n# Make sure we have an absolute progpath for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=`$ECHO \"$progpath\" |$SED \"$sed_dirname\"`\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=$progdir/$progname\n     ;;\n  *)\n     _G_IFS=$IFS\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=$_G_IFS\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=$_G_IFS\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=$progdir/$progname\n     ;;\nesac\n\n\n## ----------------- ##\n## Standard options. ##\n## ----------------- ##\n\n# The following options affect the operation of the functions defined\n# below, and should be set appropriately depending on run-time para-\n# meters passed on the command line.\n\nopt_dry_run=false\nopt_quiet=false\nopt_verbose=false\n\n# Categories 'all' and 'none' are always available.  Append any others\n# you will pass as the first argument to func_warning from your own\n# code.\nwarning_categories=\n\n# By default, display warnings according to 'opt_warning_types'.  Set\n# 'warning_func'  to ':' to elide all warnings, or func_fatal_error to\n# treat the next displayed warning as a fatal error.\nwarning_func=func_warn_and_continue\n\n# Set to 'all' to display all warnings, 'none' to suppress all\n# warnings, or a space delimited list of some subset of\n# 'warning_categories' to display only the listed warnings.\nopt_warning_types=all\n\n\n## -------------------- ##\n## Resource management. ##\n## -------------------- ##\n\n# This section contains definitions for functions that each ensure a\n# particular resource (a file, or a non-empty configuration variable for\n# example) is available, and if appropriate to extract default values\n# from pertinent package files. Call them using their associated\n# 'require_*' variable to ensure that they are executed, at most, once.\n#\n# It's entirely deliberate that calling these functions can set\n# variables that don't obey the namespace limitations obeyed by the rest\n# of this file, in order that that they be as useful as possible to\n# callers.\n\n\n# require_term_colors\n# -------------------\n# Allow display of bold text on terminals that support it.\nrequire_term_colors=func_require_term_colors\nfunc_require_term_colors ()\n{\n    $debug_cmd\n\n    test -t 1 && {\n      # COLORTERM and USE_ANSI_COLORS environment variables take\n      # precedence, because most terminfo databases neglect to describe\n      # whether color sequences are supported.\n      test -n \"${COLORTERM+set}\" && : ${USE_ANSI_COLORS=\"1\"}\n\n      if test 1 = \"$USE_ANSI_COLORS\"; then\n        # Standard ANSI escape sequences\n        tc_reset='\u001b[0m'\n        tc_bold='\u001b[1m';   tc_standout='\u001b[7m'\n        tc_red='\u001b[31m';   tc_green='\u001b[32m'\n        tc_blue='\u001b[34m';  tc_cyan='\u001b[36m'\n      else\n        # Otherwise trust the terminfo database after all.\n        test -n \"`tput sgr0 2>/dev/null`\" && {\n          tc_reset=`tput sgr0`\n          test -n \"`tput bold 2>/dev/null`\" && tc_bold=`tput bold`\n          tc_standout=$tc_bold\n          test -n \"`tput smso 2>/dev/null`\" && tc_standout=`tput smso`\n          test -n \"`tput setaf 1 2>/dev/null`\" && tc_red=`tput setaf 1`\n          test -n \"`tput setaf 2 2>/dev/null`\" && tc_green=`tput setaf 2`\n          test -n \"`tput setaf 4 2>/dev/null`\" && tc_blue=`tput setaf 4`\n          test -n \"`tput setaf 5 2>/dev/null`\" && tc_cyan=`tput setaf 5`\n        }\n      fi\n    }\n\n    require_term_colors=:\n}\n\n\n## ----------------- ##\n## Function library. ##\n## ----------------- ##\n\n# This section contains a variety of useful functions to call in your\n# scripts. Take note of the portable wrappers for features provided by\n# some modern shells, which will fall back to slower equivalents on\n# less featureful shells.\n\n\n# func_append VAR VALUE\n# ---------------------\n# Append VALUE onto the existing contents of VAR.\n\n  # We should try to minimise forks, especially on Windows where they are\n  # unreasonably slow, so skip the feature probes when bash or zsh are\n  # being used:\n  if test set = \"${BASH_VERSION+set}${ZSH_VERSION+set}\"; then\n    : ${_G_HAVE_ARITH_OP=\"yes\"}\n    : ${_G_HAVE_XSI_OPS=\"yes\"}\n    # The += operator was introduced in bash 3.1\n    case $BASH_VERSION in\n      [12].* | 3.0 | 3.0*) ;;\n      *)\n        : ${_G_HAVE_PLUSEQ_OP=\"yes\"}\n        ;;\n    esac\n  fi\n\n  # _G_HAVE_PLUSEQ_OP\n  # Can be empty, in which case the shell is probed, \"yes\" if += is\n  # useable or anything else if it does not work.\n  test -z \"$_G_HAVE_PLUSEQ_OP\" \\\n    && (eval 'x=a; x+=\" b\"; test \"a b\" = \"$x\"') 2>/dev/null \\\n    && _G_HAVE_PLUSEQ_OP=yes\n\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1+=\\$2\"\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_append ()\n  {\n    $debug_cmd\n\n    eval \"$1=\\$$1\\$2\"\n  }\nfi\n\n\n# func_append_quoted VAR VALUE\n# ----------------------------\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nif test yes = \"$_G_HAVE_PLUSEQ_OP\"; then\n  eval 'func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1+=\\\\ \\$func_quote_for_eval_result\"\n  }'\nelse\n  func_append_quoted ()\n  {\n    $debug_cmd\n\n    func_quote_for_eval \"$2\"\n    eval \"$1=\\$$1\\\\ \\$func_quote_for_eval_result\"\n  }\nfi\n\n\n# func_append_uniq VAR VALUE\n# --------------------------\n# Append unique VALUE onto the existing contents of VAR, assuming\n# entries are delimited by the first character of VALUE.  For example:\n#\n#   func_append_uniq options \" --another-option option-argument\"\n#\n# will only append to $options if \" --another-option option-argument \"\n# is not already present somewhere in $options already (note spaces at\n# each end implied by leading space in second argument).\nfunc_append_uniq ()\n{\n    $debug_cmd\n\n    eval _G_current_value='`$ECHO $'$1'`'\n    _G_delim=`expr \"$2\" : '\\(.\\)'`\n\n    case $_G_delim$_G_current_value$_G_delim in\n      *\"$2$_G_delim\"*) ;;\n      *) func_append \"$@\" ;;\n    esac\n}\n\n\n# func_arith TERM...\n# ------------------\n# Set func_arith_result to the result of evaluating TERMs.\n  test -z \"$_G_HAVE_ARITH_OP\" \\\n    && (eval 'test 2 = $(( 1 + 1 ))') 2>/dev/null \\\n    && _G_HAVE_ARITH_OP=yes\n\nif test yes = \"$_G_HAVE_ARITH_OP\"; then\n  eval 'func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=$(( $* ))\n  }'\nelse\n  func_arith ()\n  {\n    $debug_cmd\n\n    func_arith_result=`expr \"$@\"`\n  }\nfi\n\n\n# func_basename FILE\n# ------------------\n# Set func_basename_result to FILE with everything up to and including\n# the last / stripped.\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  # If this shell supports suffix pattern removal, then use it to avoid\n  # forking. Hide the definitions single quotes in case the shell chokes\n  # on unsupported syntax...\n  _b='func_basename_result=${1##*/}'\n  _d='case $1 in\n        */*) func_dirname_result=${1%/*}$2 ;;\n        *  ) func_dirname_result=$3        ;;\n      esac'\n\nelse\n  # ...otherwise fall back to using sed.\n  _b='func_basename_result=`$ECHO \"$1\" |$SED \"$sed_basename\"`'\n  _d='func_dirname_result=`$ECHO \"$1\"  |$SED \"$sed_dirname\"`\n      if test \"X$func_dirname_result\" = \"X$1\"; then\n        func_dirname_result=$3\n      else\n        func_append func_dirname_result \"$2\"\n      fi'\nfi\n\neval 'func_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n}'\n\n\n# func_dirname FILE APPEND NONDIR_REPLACEMENT\n# -------------------------------------------\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\neval 'func_dirname ()\n{\n    $debug_cmd\n\n    '\"$_d\"'\n}'\n\n\n# func_dirname_and_basename FILE APPEND NONDIR_REPLACEMENT\n# --------------------------------------------------------\n# Perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# For efficiency, we do not delegate to the functions above but instead\n# duplicate the functionality here.\neval 'func_dirname_and_basename ()\n{\n    $debug_cmd\n\n    '\"$_b\"'\n    '\"$_d\"'\n}'\n\n\n# func_echo ARG...\n# ----------------\n# Echo program name prefixed message.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_echo_all ARG...\n# --------------------\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n\n# func_echo_infix_1 INFIX ARG...\n# ------------------------------\n# Echo program name, followed by INFIX on the first line, with any\n# additional lines not showing INFIX.\nfunc_echo_infix_1 ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    _G_infix=$1; shift\n    _G_indent=$_G_infix\n    _G_prefix=\"$progname: $_G_infix: \"\n    _G_message=$*\n\n    # Strip color escape sequences before counting printable length\n    for _G_tc in \"$tc_reset\" \"$tc_bold\" \"$tc_standout\" \"$tc_red\" \"$tc_green\" \"$tc_blue\" \"$tc_cyan\"\n    do\n      test -n \"$_G_tc\" && {\n        _G_esc_tc=`$ECHO \"$_G_tc\" | $SED \"$sed_make_literal_regex\"`\n        _G_indent=`$ECHO \"$_G_indent\" | $SED \"s|$_G_esc_tc||g\"`\n      }\n    done\n    _G_indent=\"$progname: \"`echo \"$_G_indent\" | $SED 's|.| |g'`\"  \" ## exclude from sc_prohibit_nested_quotes\n\n    func_echo_infix_1_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_infix_1_IFS\n      $ECHO \"$_G_prefix$tc_bold$_G_line$tc_reset\" >&2\n      _G_prefix=$_G_indent\n    done\n    IFS=$func_echo_infix_1_IFS\n}\n\n\n# func_error ARG...\n# -----------------\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"  $tc_standout${tc_red}error$tc_reset\" \"$*\" >&2\n}\n\n\n# func_fatal_error ARG...\n# -----------------------\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    $debug_cmd\n\n    func_error \"$*\"\n    exit $EXIT_FAILURE\n}\n\n\n# func_grep EXPRESSION FILENAME\n# -----------------------------\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $debug_cmd\n\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_len STRING\n# ---------------\n# Set func_len_result to the length of STRING. STRING may not\n# start with a hyphen.\n  test -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=${#1}\n  }'\nelse\n  func_len ()\n  {\n    $debug_cmd\n\n    func_len_result=`expr \"$1\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n  }\nfi\n\n\n# func_mkdir_p DIRECTORY-PATH\n# ---------------------------\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    $debug_cmd\n\n    _G_directory_path=$1\n    _G_dir_list=\n\n    if test -n \"$_G_directory_path\" && test : != \"$opt_dry_run\"; then\n\n      # Protect directory names starting with '-'\n      case $_G_directory_path in\n        -*) _G_directory_path=./$_G_directory_path ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$_G_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        _G_dir_list=$_G_directory_path:$_G_dir_list\n\n        # If the last portion added has no slash in it, the list is done\n        case $_G_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        _G_directory_path=`$ECHO \"$_G_directory_path\" | $SED -e \"$sed_dirname\"`\n      done\n      _G_dir_list=`$ECHO \"$_G_dir_list\" | $SED 's|:*$||'`\n\n      func_mkdir_p_IFS=$IFS; IFS=:\n      for _G_dir in $_G_dir_list; do\n\tIFS=$func_mkdir_p_IFS\n        # mkdir can fail with a 'File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$_G_dir\" 2>/dev/null || :\n      done\n      IFS=$func_mkdir_p_IFS\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$_G_directory_path\" || \\\n        func_fatal_error \"Failed to create '$1'\"\n    fi\n}\n\n\n# func_mktempdir [BASENAME]\n# -------------------------\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, BASENAME is the basename for that directory.\nfunc_mktempdir ()\n{\n    $debug_cmd\n\n    _G_template=${TMPDIR-/tmp}/${1-$progname}\n\n    if test : = \"$opt_dry_run\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      _G_tmpdir=$_G_template-$$\n    else\n\n      # If mktemp works, use that first and foremost\n      _G_tmpdir=`mktemp -d \"$_G_template-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$_G_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        _G_tmpdir=$_G_template-${RANDOM-0}$$\n\n        func_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$_G_tmpdir\"\n        umask $func_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$_G_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory '$_G_tmpdir'\"\n    fi\n\n    $ECHO \"$_G_tmpdir\"\n}\n\n\n# func_normal_abspath PATH\n# ------------------------\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\nfunc_normal_abspath ()\n{\n    $debug_cmd\n\n    # These SED scripts presuppose an absolute path with a trailing slash.\n    _G_pathcar='s|^/\\([^/]*\\).*$|\\1|'\n    _G_pathcdr='s|^/[^/]*||'\n    _G_removedotparts=':dotsl\n\t\ts|/\\./|/|g\n\t\tt dotsl\n\t\ts|/\\.$|/|'\n    _G_collapseslashes='s|/\\{1,\\}|/|g'\n    _G_finalslash='s|/*$|/|'\n\n    # Start from root dir and reassemble the path.\n    func_normal_abspath_result=\n    func_normal_abspath_tpath=$1\n    func_normal_abspath_altnamespace=\n    case $func_normal_abspath_tpath in\n      \"\")\n        # Empty path, that just means $cwd.\n        func_stripname '' '/' \"`pwd`\"\n        func_normal_abspath_result=$func_stripname_result\n        return\n        ;;\n      # The next three entries are used to spot a run of precisely\n      # two leading slashes without using negated character classes;\n      # we take advantage of case's first-match behaviour.\n      ///*)\n        # Unusual form of absolute path, do nothing.\n        ;;\n      //*)\n        # Not necessarily an ordinary path; POSIX reserves leading '//'\n        # and for example Cygwin uses it to access remote file shares\n        # over CIFS/SMB, so we conserve a leading double slash if found.\n        func_normal_abspath_altnamespace=/\n        ;;\n      /*)\n        # Absolute path, do nothing.\n        ;;\n      *)\n        # Relative path, prepend $cwd.\n        func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n        ;;\n    esac\n\n    # Cancel out all the simple stuff to save iterations.  We also want\n    # the path to end with a slash for ease of parsing, so make sure\n    # there is one (and only one) here.\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_removedotparts\" -e \"$_G_collapseslashes\" -e \"$_G_finalslash\"`\n    while :; do\n      # Processed it all yet?\n      if test / = \"$func_normal_abspath_tpath\"; then\n        # If we ascended to the root using \"..\" the result may be empty now.\n        if test -z \"$func_normal_abspath_result\"; then\n          func_normal_abspath_result=/\n        fi\n        break\n      fi\n      func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcar\"`\n      func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n          -e \"$_G_pathcdr\"`\n      # Figure out what to do with it\n      case $func_normal_abspath_tcomponent in\n        \"\")\n          # Trailing empty path component, ignore it.\n          ;;\n        ..)\n          # Parent dir; strip last assembled component from result.\n          func_dirname \"$func_normal_abspath_result\"\n          func_normal_abspath_result=$func_dirname_result\n          ;;\n        *)\n          # Actual path component, append it.\n          func_append func_normal_abspath_result \"/$func_normal_abspath_tcomponent\"\n          ;;\n      esac\n    done\n    # Restore leading double-slash if one was found on entry.\n    func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n\n# func_notquiet ARG...\n# --------------------\n# Echo program name prefixed message only when not in quiet mode.\nfunc_notquiet ()\n{\n    $debug_cmd\n\n    $opt_quiet || func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n\n# func_relative_path SRCDIR DSTDIR\n# --------------------------------\n# Set func_relative_path_result to the relative path from SRCDIR to DSTDIR.\nfunc_relative_path ()\n{\n    $debug_cmd\n\n    func_relative_path_result=\n    func_normal_abspath \"$1\"\n    func_relative_path_tlibdir=$func_normal_abspath_result\n    func_normal_abspath \"$2\"\n    func_relative_path_tbindir=$func_normal_abspath_result\n\n    # Ascend the tree starting from libdir\n    while :; do\n      # check if we have found a prefix of bindir\n      case $func_relative_path_tbindir in\n        $func_relative_path_tlibdir)\n          # found an exact match\n          func_relative_path_tcancelled=\n          break\n          ;;\n        $func_relative_path_tlibdir*)\n          # found a matching prefix\n          func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n          func_relative_path_tcancelled=$func_stripname_result\n          if test -z \"$func_relative_path_result\"; then\n            func_relative_path_result=.\n          fi\n          break\n          ;;\n        *)\n          func_dirname $func_relative_path_tlibdir\n          func_relative_path_tlibdir=$func_dirname_result\n          if test -z \"$func_relative_path_tlibdir\"; then\n            # Have to descend all the way to the root!\n            func_relative_path_result=../$func_relative_path_result\n            func_relative_path_tcancelled=$func_relative_path_tbindir\n            break\n          fi\n          func_relative_path_result=../$func_relative_path_result\n          ;;\n      esac\n    done\n\n    # Now calculate path; take care to avoid doubling-up slashes.\n    func_stripname '' '/' \"$func_relative_path_result\"\n    func_relative_path_result=$func_stripname_result\n    func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n    if test -n \"$func_stripname_result\"; then\n      func_append func_relative_path_result \"/$func_stripname_result\"\n    fi\n\n    # Normalisation. If bindir is libdir, return '.' else relative path.\n    if test -n \"$func_relative_path_result\"; then\n      func_stripname './' '' \"$func_relative_path_result\"\n      func_relative_path_result=$func_stripname_result\n    fi\n\n    test -n \"$func_relative_path_result\" || func_relative_path_result=.\n\n    :\n}\n\n\n# func_quote_for_eval ARG...\n# --------------------------\n# Aesthetically quote ARGs to be evaled later.\n# This function returns two values:\n#   i) func_quote_for_eval_result\n#      double-quoted, suitable for a subsequent eval\n#  ii) func_quote_for_eval_unquoted_result\n#      has all characters that are still active within double\n#      quotes backslashified.\nfunc_quote_for_eval ()\n{\n    $debug_cmd\n\n    func_quote_for_eval_unquoted_result=\n    func_quote_for_eval_result=\n    while test 0 -lt $#; do\n      case $1 in\n        *[\\\\\\`\\\"\\$]*)\n\t  _G_unquoted_arg=`printf '%s\\n' \"$1\" |$SED \"$sed_quote_subst\"` ;;\n        *)\n          _G_unquoted_arg=$1 ;;\n      esac\n      if test -n \"$func_quote_for_eval_unquoted_result\"; then\n\tfunc_append func_quote_for_eval_unquoted_result \" $_G_unquoted_arg\"\n      else\n        func_append func_quote_for_eval_unquoted_result \"$_G_unquoted_arg\"\n      fi\n\n      case $_G_unquoted_arg in\n        # Double-quote args containing shell metacharacters to delay\n        # word splitting, command substitution and variable expansion\n        # for a subsequent eval.\n        # Many Bourne shells cannot handle close brackets correctly\n        # in scan sets, so we specify it separately.\n        *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n          _G_quoted_arg=\\\"$_G_unquoted_arg\\\"\n          ;;\n        *)\n          _G_quoted_arg=$_G_unquoted_arg\n\t  ;;\n      esac\n\n      if test -n \"$func_quote_for_eval_result\"; then\n\tfunc_append func_quote_for_eval_result \" $_G_quoted_arg\"\n      else\n        func_append func_quote_for_eval_result \"$_G_quoted_arg\"\n      fi\n      shift\n    done\n}\n\n\n# func_quote_for_expand ARG\n# -------------------------\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    $debug_cmd\n\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\t_G_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$sed_double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        _G_arg=$1 ;;\n    esac\n\n    case $_G_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        _G_arg=\\\"$_G_arg\\\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=$_G_arg\n}\n\n\n# func_stripname PREFIX SUFFIX NAME\n# ---------------------------------\n# strip PREFIX and SUFFIX from NAME, and store in func_stripname_result.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_stripname ()\n  {\n    $debug_cmd\n\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary variable first.\n    func_stripname_result=$3\n    func_stripname_result=${func_stripname_result#\"$1\"}\n    func_stripname_result=${func_stripname_result%\"$2\"}\n  }'\nelse\n  func_stripname ()\n  {\n    $debug_cmd\n\n    case $2 in\n      .*) func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%\\\\\\\\$2\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"$3\" | $SED -e \"s%^$1%%\" -e \"s%$2\\$%%\"`;;\n    esac\n  }\nfi\n\n\n# func_show_eval CMD [FAIL_EXP]\n# -----------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    func_quote_for_expand \"$_G_cmd\"\n    eval \"func_notquiet $func_quote_for_expand_result\"\n\n    $opt_dry_run || {\n      eval \"$_G_cmd\"\n      _G_status=$?\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_show_eval_locale CMD [FAIL_EXP]\n# ------------------------------------\n# Unless opt_quiet is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    $debug_cmd\n\n    _G_cmd=$1\n    _G_fail_exp=${2-':'}\n\n    $opt_quiet || {\n      func_quote_for_expand \"$_G_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    $opt_dry_run || {\n      eval \"$_G_user_locale\n\t    $_G_cmd\"\n      _G_status=$?\n      eval \"$_G_safe_locale\"\n      if test 0 -ne \"$_G_status\"; then\n\teval \"(exit $_G_status); $_G_fail_exp\"\n      fi\n    }\n}\n\n\n# func_tr_sh\n# ----------\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n    $debug_cmd\n\n    case $1 in\n    [0-9]* | *[!a-zA-Z0-9_]*)\n      func_tr_sh_result=`$ECHO \"$1\" | $SED -e 's/^\\([0-9]\\)/_\\1/' -e 's/[^a-zA-Z0-9_]/_/g'`\n      ;;\n    * )\n      func_tr_sh_result=$1\n      ;;\n    esac\n}\n\n\n# func_verbose ARG...\n# -------------------\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $debug_cmd\n\n    $opt_verbose && func_echo \"$*\"\n\n    :\n}\n\n\n# func_warn_and_continue ARG...\n# -----------------------------\n# Echo program name prefixed warning message to standard error.\nfunc_warn_and_continue ()\n{\n    $debug_cmd\n\n    $require_term_colors\n\n    func_echo_infix_1 \"${tc_red}warning$tc_reset\" \"$*\" >&2\n}\n\n\n# func_warning CATEGORY ARG...\n# ----------------------------\n# Echo program name prefixed warning message to standard error. Warning\n# messages can be filtered according to CATEGORY, where this function\n# elides messages where CATEGORY is not listed in the global variable\n# 'opt_warning_types'.\nfunc_warning ()\n{\n    $debug_cmd\n\n    # CATEGORY must be in the warning_categories list!\n    case \" $warning_categories \" in\n      *\" $1 \"*) ;;\n      *) func_internal_error \"invalid warning category '$1'\" ;;\n    esac\n\n    _G_category=$1\n    shift\n\n    case \" $opt_warning_types \" in\n      *\" $_G_category \"*) $warning_func ${1+\"$@\"} ;;\n    esac\n}\n\n\n# func_sort_ver VER1 VER2\n# -----------------------\n# 'sort -V' is not generally available.\n# Note this deviates from the version comparison in automake\n# in that it treats 1.5 < 1.5.0, and treats 1.4.4a < 1.4-p3a\n# but this should suffice as we won't be specifying old\n# version formats or redundant trailing .0 in bootstrap.conf.\n# If we did want full compatibility then we should probably\n# use m4_version_compare from autoconf.\nfunc_sort_ver ()\n{\n    $debug_cmd\n\n    printf '%s\\n%s\\n' \"$1\" \"$2\" \\\n      | sort -t. -k 1,1n -k 2,2n -k 3,3n -k 4,4n -k 5,5n -k 6,6n -k 7,7n -k 8,8n -k 9,9n\n}\n\n# func_lt_ver PREV CURR\n# ---------------------\n# Return true if PREV and CURR are in the correct order according to\n# func_sort_ver, otherwise false.  Use it like this:\n#\n#  func_lt_ver \"$prev_ver\" \"$proposed_ver\" || func_fatal_error \"...\"\nfunc_lt_ver ()\n{\n    $debug_cmd\n\n    test \"x$1\" = x`func_sort_ver \"$1\" \"$2\" | $SED 1q`\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n#! /bin/sh\n\n# Set a version string for this script.\nscriptversion=2014-01-07.03; # UTC\n\n# A portable, pluggable option parser for Bourne shell.\n# Written by Gary V. Vaughan, 2010\n\n# Copyright (C) 2010-2015 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# Please report bugs or propose patches to gary@gnu.org.\n\n\n## ------ ##\n## Usage. ##\n## ------ ##\n\n# This file is a library for parsing options in your shell scripts along\n# with assorted other useful supporting features that you can make use\n# of too.\n#\n# For the simplest scripts you might need only:\n#\n#   #!/bin/sh\n#   . relative/path/to/funclib.sh\n#   . relative/path/to/options-parser\n#   scriptversion=1.0\n#   func_options ${1+\"$@\"}\n#   eval set dummy \"$func_options_result\"; shift\n#   ...rest of your script...\n#\n# In order for the '--version' option to work, you will need to have a\n# suitably formatted comment like the one at the top of this file\n# starting with '# Written by ' and ending with '# warranty; '.\n#\n# For '-h' and '--help' to work, you will also need a one line\n# description of your script's purpose in a comment directly above the\n# '# Written by ' line, like the one at the top of this file.\n#\n# The default options also support '--debug', which will turn on shell\n# execution tracing (see the comment above debug_cmd below for another\n# use), and '--verbose' and the func_verbose function to allow your script\n# to display verbose messages only when your user has specified\n# '--verbose'.\n#\n# After sourcing this file, you can plug processing for additional\n# options by amending the variables from the 'Configuration' section\n# below, and following the instructions in the 'Option parsing'\n# section further down.\n\n## -------------- ##\n## Configuration. ##\n## -------------- ##\n\n# You should override these variables in your script after sourcing this\n# file so that they reflect the customisations you have added to the\n# option parser.\n\n# The usage line for option parsing errors and the start of '-h' and\n# '--help' output messages. You can embed shell variables for delayed\n# expansion at the time the message is displayed, but you will need to\n# quote other shell meta-characters carefully to prevent them being\n# expanded when the contents are evaled.\nusage='$progpath [OPTION]...'\n\n# Short help message in response to '-h' and '--help'.  Add to this or\n# override it after sourcing this library to reflect the full set of\n# options your script accepts.\nusage_message=\"\\\n       --debug        enable verbose shell tracing\n   -W, --warnings=CATEGORY\n                      report the warnings falling in CATEGORY [all]\n   -v, --verbose      verbosely report processing\n       --version      print version information and exit\n   -h, --help         print short or long help message and exit\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nlong_help_message=\"\nWarning categories include:\n       'all'          show all warnings\n       'none'         turn off all the warnings\n       'error'        warnings are treated as fatal errors\"\n\n# Help message printed before fatal option parsing errors.\nfatal_help=\"Try '\\$progname --help' for more information.\"\n\n\n\n## ------------------------- ##\n## Hook function management. ##\n## ------------------------- ##\n\n# This section contains functions for adding, removing, and running hooks\n# to the main code.  A hook is just a named list of of function, that can\n# be run in order later on.\n\n# func_hookable FUNC_NAME\n# -----------------------\n# Declare that FUNC_NAME will run hooks added with\n# 'func_add_hook FUNC_NAME ...'.\nfunc_hookable ()\n{\n    $debug_cmd\n\n    func_append hookable_fns \" $1\"\n}\n\n\n# func_add_hook FUNC_NAME HOOK_FUNC\n# ---------------------------------\n# Request that FUNC_NAME call HOOK_FUNC before it returns.  FUNC_NAME must\n# first have been declared \"hookable\" by a call to 'func_hookable'.\nfunc_add_hook ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not accept hook functions.\" ;;\n    esac\n\n    eval func_append ${1}_hooks '\" $2\"'\n}\n\n\n# func_remove_hook FUNC_NAME HOOK_FUNC\n# ------------------------------------\n# Remove HOOK_FUNC from the list of functions called by FUNC_NAME.\nfunc_remove_hook ()\n{\n    $debug_cmd\n\n    eval ${1}_hooks='`$ECHO \"\\$'$1'_hooks\" |$SED \"s| '$2'||\"`'\n}\n\n\n# func_run_hooks FUNC_NAME [ARG]...\n# ---------------------------------\n# Run all hook functions registered to FUNC_NAME.\n# It is assumed that the list of hook functions contains nothing more\n# than a whitespace-delimited list of legal shell function names, and\n# no effort is wasted trying to catch shell meta-characters or preserve\n# whitespace.\nfunc_run_hooks ()\n{\n    $debug_cmd\n\n    case \" $hookable_fns \" in\n      *\" $1 \"*) ;;\n      *) func_fatal_error \"'$1' does not support hook funcions.n\" ;;\n    esac\n\n    eval _G_hook_fns=\\$$1_hooks; shift\n\n    for _G_hook in $_G_hook_fns; do\n      eval $_G_hook '\"$@\"'\n\n      # store returned options list back into positional\n      # parameters for next 'cmd' execution.\n      eval _G_hook_result=\\$${_G_hook}_result\n      eval set dummy \"$_G_hook_result\"; shift\n    done\n\n    func_quote_for_eval ${1+\"$@\"}\n    func_run_hooks_result=$func_quote_for_eval_result\n}\n\n\n\n## --------------- ##\n## Option parsing. ##\n## --------------- ##\n\n# In order to add your own option parsing hooks, you must accept the\n# full positional parameter list in your hook function, remove any\n# options that you action, and then pass back the remaining unprocessed\n# options in '<hooked_function_name>_result', escaped suitably for\n# 'eval'.  Like this:\n#\n#    my_options_prep ()\n#    {\n#        $debug_cmd\n#\n#        # Extend the existing usage message.\n#        usage_message=$usage_message'\n#      -s, --silent       don'\\''t print informational messages\n#    '\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_options_prep_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_options_prep my_options_prep\n#\n#\n#    my_silent_option ()\n#    {\n#        $debug_cmd\n#\n#        # Note that for efficiency, we parse as many options as we can\n#        # recognise in a loop before passing the remainder back to the\n#        # caller on the first unrecognised argument we encounter.\n#        while test $# -gt 0; do\n#          opt=$1; shift\n#          case $opt in\n#            --silent|-s) opt_silent=: ;;\n#            # Separate non-argument short options:\n#            -s*)         func_split_short_opt \"$_G_opt\"\n#                         set dummy \"$func_split_short_opt_name\" \\\n#                             \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n#                         shift\n#                         ;;\n#            *)            set dummy \"$_G_opt\" \"$*\"; shift; break ;;\n#          esac\n#        done\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_silent_option_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_parse_options my_silent_option\n#\n#\n#    my_option_validation ()\n#    {\n#        $debug_cmd\n#\n#        $opt_silent && $opt_verbose && func_fatal_help \"\\\n#    '--silent' and '--verbose' options are mutually exclusive.\"\n#\n#        func_quote_for_eval ${1+\"$@\"}\n#        my_option_validation_result=$func_quote_for_eval_result\n#    }\n#    func_add_hook func_validate_options my_option_validation\n#\n# You'll alse need to manually amend $usage_message to reflect the extra\n# options you parse.  It's preferable to append if you can, so that\n# multiple option parsing hooks can be added safely.\n\n\n# func_options [ARG]...\n# ---------------------\n# All the functions called inside func_options are hookable. See the\n# individual implementations for details.\nfunc_hookable func_options\nfunc_options ()\n{\n    $debug_cmd\n\n    func_options_prep ${1+\"$@\"}\n    eval func_parse_options \\\n        ${func_options_prep_result+\"$func_options_prep_result\"}\n    eval func_validate_options \\\n        ${func_parse_options_result+\"$func_parse_options_result\"}\n\n    eval func_run_hooks func_options \\\n        ${func_validate_options_result+\"$func_validate_options_result\"}\n\n    # save modified positional parameters for caller\n    func_options_result=$func_run_hooks_result\n}\n\n\n# func_options_prep [ARG]...\n# --------------------------\n# All initialisations required before starting the option parse loop.\n# Note that when calling hook functions, we pass through the list of\n# positional parameters.  If a hook function modifies that list, and\n# needs to propogate that back to rest of this script, then the complete\n# modified list must be put in 'func_run_hooks_result' before\n# returning.\nfunc_hookable func_options_prep\nfunc_options_prep ()\n{\n    $debug_cmd\n\n    # Option defaults:\n    opt_verbose=false\n    opt_warning_types=\n\n    func_run_hooks func_options_prep ${1+\"$@\"}\n\n    # save modified positional parameters for caller\n    func_options_prep_result=$func_run_hooks_result\n}\n\n\n# func_parse_options [ARG]...\n# ---------------------------\n# The main option parsing loop.\nfunc_hookable func_parse_options\nfunc_parse_options ()\n{\n    $debug_cmd\n\n    func_parse_options_result=\n\n    # this just eases exit handling\n    while test $# -gt 0; do\n      # Defer to hook functions for initial option parsing, so they\n      # get priority in the event of reusing an option name.\n      func_run_hooks func_parse_options ${1+\"$@\"}\n\n      # Adjust func_parse_options positional parameters to match\n      eval set dummy \"$func_run_hooks_result\"; shift\n\n      # Break out of the loop if we already parsed every option.\n      test $# -gt 0 || break\n\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --debug|-x)   debug_cmd='set -x'\n                      func_echo \"enabling shell trace mode\"\n                      $debug_cmd\n                      ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                      set dummy --warnings none ${1+\"$@\"}\n                      shift\n\t\t      ;;\n\n        --warnings|--warning|-W)\n                      test $# = 0 && func_missing_arg $_G_opt && break\n                      case \" $warning_categories $1\" in\n                        *\" $1 \"*)\n                          # trailing space prevents matching last $1 above\n                          func_append_uniq opt_warning_types \" $1\"\n                          ;;\n                        *all)\n                          opt_warning_types=$warning_categories\n                          ;;\n                        *none)\n                          opt_warning_types=none\n                          warning_func=:\n                          ;;\n                        *error)\n                          opt_warning_types=$warning_categories\n                          warning_func=func_fatal_error\n                          ;;\n                        *)\n                          func_fatal_error \\\n                             \"unsupported warning category: '$1'\"\n                          ;;\n                      esac\n                      shift\n                      ;;\n\n        --verbose|-v) opt_verbose=: ;;\n        --version)    func_version ;;\n        -\\?|-h)       func_usage ;;\n        --help)       func_help ;;\n\n\t# Separate optargs to long options (plugins may need this):\n\t--*=*)        func_split_equals \"$_G_opt\"\n\t              set dummy \"$func_split_equals_lhs\" \\\n                          \"$func_split_equals_rhs\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n       # Separate optargs to short options:\n        -W*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        # Separate non-argument short options:\n        -\\?*|-h*|-v*|-x*)\n                      func_split_short_opt \"$_G_opt\"\n                      set dummy \"$func_split_short_opt_name\" \\\n                          \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n                      shift\n                      ;;\n\n        --)           break ;;\n        -*)           func_fatal_help \"unrecognised option: '$_G_opt'\" ;;\n        *)            set dummy \"$_G_opt\" ${1+\"$@\"}; shift; break ;;\n      esac\n    done\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    func_parse_options_result=$func_quote_for_eval_result\n}\n\n\n# func_validate_options [ARG]...\n# ------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nfunc_hookable func_validate_options\nfunc_validate_options ()\n{\n    $debug_cmd\n\n    # Display all warnings if -W was not given.\n    test -n \"$opt_warning_types\" || opt_warning_types=\" $warning_categories\"\n\n    func_run_hooks func_validate_options ${1+\"$@\"}\n\n    # Bail if the options were screwed!\n    $exit_cmd $EXIT_FAILURE\n\n    # save modified positional parameters for caller\n    func_validate_options_result=$func_run_hooks_result\n}\n\n\n\n## ----------------- ##\n## Helper functions. ##\n## ----------------- ##\n\n# This section contains the helper functions used by the rest of the\n# hookable option parser framework in ascii-betical order.\n\n\n# func_fatal_help ARG...\n# ----------------------\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    eval \\$ECHO \\\"\"$fatal_help\"\\\"\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n\n# func_help\n# ---------\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\"\n    exit 0\n}\n\n\n# func_missing_arg ARGNAME\n# ------------------------\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $debug_cmd\n\n    func_error \"Missing argument for '$1'.\"\n    exit_cmd=exit\n}\n\n\n# func_split_equals STRING\n# ------------------------\n# Set func_split_equals_lhs and func_split_equals_rhs shell variables after\n# splitting STRING at the '=' sign.\ntest -z \"$_G_HAVE_XSI_OPS\" \\\n    && (eval 'x=a/b/c;\n      test 5aa/bb/cc = \"${#x}${x%%/*}${x%/*}${x#*/}${x##*/}\"') 2>/dev/null \\\n    && _G_HAVE_XSI_OPS=yes\n\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=${1%%=*}\n      func_split_equals_rhs=${1#*=}\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        && func_split_equals_rhs=\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_equals ()\n  {\n      $debug_cmd\n\n      func_split_equals_lhs=`expr \"x$1\" : 'x\\([^=]*\\)'`\n      func_split_equals_rhs=\n      test \"x$func_split_equals_lhs\" = \"x$1\" \\\n        || func_split_equals_rhs=`expr \"x$1\" : 'x[^=]*=\\(.*\\)$'`\n  }\nfi #func_split_equals\n\n\n# func_split_short_opt SHORTOPT\n# -----------------------------\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nif test yes = \"$_G_HAVE_XSI_OPS\"\nthen\n  # This is an XSI compatible shell, allowing a faster implementation...\n  eval 'func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_arg=${1#??}\n      func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\n  }'\nelse\n  # ...otherwise fall back to using expr, which is often a shell builtin.\n  func_split_short_opt ()\n  {\n      $debug_cmd\n\n      func_split_short_opt_name=`expr \"x$1\" : 'x-\\(.\\)'`\n      func_split_short_opt_arg=`expr \"x$1\" : 'x-.\\(.*\\)$'`\n  }\nfi #func_split_short_opt\n\n\n# func_usage\n# ----------\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"Run '$progname --help |${PAGER-more}' for full usage\"\n    exit 0\n}\n\n\n# func_usage_message\n# ------------------\n# Echo short help message to standard output.\nfunc_usage_message ()\n{\n    $debug_cmd\n\n    eval \\$ECHO \\\"\"Usage: $usage\"\\\"\n    echo\n    $SED -n 's|^# ||\n        /^Written by/{\n          x;p;x\n        }\n\th\n\t/^Written by/q' < \"$progpath\"\n    echo\n    eval \\$ECHO \\\"\"$usage_message\"\\\"\n}\n\n\n# func_version\n# ------------\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $debug_cmd\n\n    printf '%s\\n' \"$progname $scriptversion\"\n    $SED -n '\n        /(C)/!b go\n        :more\n        /\\./!{\n          N\n          s|\\n# | |\n          b more\n        }\n        :go\n        /^# Written by /,/# warranty; / {\n          s|^# ||\n          s|^# *$||\n          s|\\((C)\\)[ 0-9,-]*[ ,-]\\([1-9][0-9]* \\)|\\1 \\2|\n          p\n        }\n        /^# Written by / {\n          s|^# ||\n          p\n        }\n        /^warranty; /q' < \"$progpath\"\n\n    exit $?\n}\n\n\n# Local variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'before-save-hook 'time-stamp)\n# time-stamp-pattern: \"10/scriptversion=%:y-%02m-%02d.%02H; # UTC\"\n# time-stamp-time-zone: \"UTC\"\n# End:\n\n# Set a version string.\nscriptversion='(GNU libtool) 2.4.6'\n\n\n# func_echo ARG...\n# ----------------\n# Libtool also displays the current mode in messages, so override\n# funclib.sh func_echo with this custom definition.\nfunc_echo ()\n{\n    $debug_cmd\n\n    _G_message=$*\n\n    func_echo_IFS=$IFS\n    IFS=$nl\n    for _G_line in $_G_message; do\n      IFS=$func_echo_IFS\n      $ECHO \"$progname${opt_mode+: $opt_mode}: $_G_line\"\n    done\n    IFS=$func_echo_IFS\n}\n\n\n# func_warning ARG...\n# -------------------\n# Libtool warnings are not categorized, so override funclib.sh\n# func_warning with this simpler definition.\nfunc_warning ()\n{\n    $debug_cmd\n\n    $warning_func ${1+\"$@\"}\n}\n\n\n## ---------------- ##\n## Options parsing. ##\n## ---------------- ##\n\n# Hook in the functions to make sure our own options are parsed during\n# the option parsing loop.\n\nusage='$progpath [OPTION]... [MODE-ARG]...'\n\n# Short help message in response to '-h'.\nusage_message=\"Options:\n       --config             show all configuration variables\n       --debug              enable verbose shell tracing\n   -n, --dry-run            display commands without modifying any files\n       --features           display basic configuration information and exit\n       --mode=MODE          use operation mode MODE\n       --no-warnings        equivalent to '-Wnone'\n       --preserve-dup-deps  don't remove duplicate dependency libraries\n       --quiet, --silent    don't print informational messages\n       --tag=TAG            use configuration variables from tag TAG\n   -v, --verbose            print more informational messages than default\n       --version            print version information\n   -W, --warnings=CATEGORY  report the warnings falling in CATEGORY [all]\n   -h, --help, --help-all   print short, long, or detailed help message\n\"\n\n# Additional text appended to 'usage_message' in response to '--help'.\nfunc_help ()\n{\n    $debug_cmd\n\n    func_usage_message\n    $ECHO \"$long_help_message\n\nMODE must be one of the following:\n\n       clean           remove files from the build directory\n       compile         compile a source file into a libtool object\n       execute         automatically set library path, then run a program\n       finish          complete the installation of libtool libraries\n       install         install libraries or executables\n       link            create a library or an executable\n       uninstall       remove libraries from an installed directory\n\nMODE-ARGS vary depending on the MODE.  When passed as first option,\n'--mode=MODE' may be abbreviated as 'MODE' or a unique abbreviation of that.\nTry '$progname --help --mode=MODE' for a more detailed description of MODE.\n\nWhen reporting a bug, please describe a test case to reproduce it and\ninclude the following information:\n\n       host-triplet:   $host\n       shell:          $SHELL\n       compiler:       $LTCC\n       compiler flags: $LTCFLAGS\n       linker:         $LD (gnu? $with_gnu_ld)\n       version:        $progname (GNU libtool) 2.4.6\n       automake:       `($AUTOMAKE --version) 2>/dev/null |$SED 1q`\n       autoconf:       `($AUTOCONF --version) 2>/dev/null |$SED 1q`\n\nReport bugs to <bug-libtool@gnu.org>.\nGNU libtool home page: <http://www.gnu.org/software/libtool/>.\nGeneral help using GNU software: <http://www.gnu.org/gethelp/>.\"\n    exit 0\n}\n\n\n# func_lo2o OBJECT-NAME\n# ---------------------\n# Transform OBJECT-NAME from a '.lo' suffix to the platform specific\n# object suffix.\n\nlo2o=s/\\\\.lo\\$/.$objext/\no2lo=s/\\\\.$objext\\$/.lo/\n\nif test yes = \"$_G_HAVE_XSI_OPS\"; then\n  eval 'func_lo2o ()\n  {\n    case $1 in\n      *.lo) func_lo2o_result=${1%.lo}.$objext ;;\n      *   ) func_lo2o_result=$1               ;;\n    esac\n  }'\n\n  # func_xform LIBOBJ-OR-SOURCE\n  # ---------------------------\n  # Transform LIBOBJ-OR-SOURCE from a '.o' or '.c' (or otherwise)\n  # suffix to a '.lo' libtool-object suffix.\n  eval 'func_xform ()\n  {\n    func_xform_result=${1%.*}.lo\n  }'\nelse\n  # ...otherwise fall back to using sed.\n  func_lo2o ()\n  {\n    func_lo2o_result=`$ECHO \"$1\" | $SED \"$lo2o\"`\n  }\n\n  func_xform ()\n  {\n    func_xform_result=`$ECHO \"$1\" | $SED 's|\\.[^.]*$|.lo|'`\n  }\nfi\n\n\n# func_fatal_configuration ARG...\n# -------------------------------\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func__fatal_error ${1+\"$@\"} \\\n      \"See the $PACKAGE documentation for more information.\" \\\n      \"Fatal configuration error.\"\n}\n\n\n# func_config\n# -----------\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n\n# func_features\n# -------------\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test yes = \"$build_libtool_libs\"; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test yes = \"$build_old_libs\"; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n\n# func_enable_tag TAGNAME\n# -----------------------\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n    # Global variable:\n    tagname=$1\n\n    re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n    re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n    sed_extractcf=/$re_begincf/,/$re_endcf/p\n\n    # Validate tagname.\n    case $tagname in\n      *[!-_A-Za-z0-9,/]*)\n        func_fatal_error \"invalid tag name: $tagname\"\n        ;;\n    esac\n\n    # Don't test for the \"default\" C tag, as we know it's\n    # there but not specially marked.\n    case $tagname in\n        CC) ;;\n    *)\n        if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\t  taglist=\"$taglist $tagname\"\n\n\t  # Evaluate the configuration.  Be careful to quote the path\n\t  # and the sed script, to avoid splitting on whitespace, but\n\t  # also don't use non-portable quotes within backquotes within\n\t  # quotes we have to do it in 2 steps:\n\t  extractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\t  eval \"$extractedcf\"\n        else\n\t  func_error \"ignoring unknown tag $tagname\"\n        fi\n        ;;\n    esac\n}\n\n\n# func_check_version_match\n# ------------------------\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n    if test \"$package_revision\" != \"$macro_revision\"; then\n      if test \"$VERSION\" != \"$macro_version\"; then\n        if test -z \"$macro_version\"; then\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        else\n          cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n        fi\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n      fi\n\n      exit $EXIT_MISMATCH\n    fi\n}\n\n\n# libtool_options_prep [ARG]...\n# -----------------------------\n# Preparation for options parsed by libtool.\nlibtool_options_prep ()\n{\n    $debug_mode\n\n    # Option defaults:\n    opt_config=false\n    opt_dlopen=\n    opt_dry_run=false\n    opt_help=false\n    opt_mode=\n    opt_preserve_dup_deps=false\n    opt_quiet=false\n\n    nonopt=\n    preserve_args=\n\n    # Shorthand for --mode=foo, only valid as the first argument\n    case $1 in\n    clean|clea|cle|cl)\n      shift; set dummy --mode clean ${1+\"$@\"}; shift\n      ;;\n    compile|compil|compi|comp|com|co|c)\n      shift; set dummy --mode compile ${1+\"$@\"}; shift\n      ;;\n    execute|execut|execu|exec|exe|ex|e)\n      shift; set dummy --mode execute ${1+\"$@\"}; shift\n      ;;\n    finish|finis|fini|fin|fi|f)\n      shift; set dummy --mode finish ${1+\"$@\"}; shift\n      ;;\n    install|instal|insta|inst|ins|in|i)\n      shift; set dummy --mode install ${1+\"$@\"}; shift\n      ;;\n    link|lin|li|l)\n      shift; set dummy --mode link ${1+\"$@\"}; shift\n      ;;\n    uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n      shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n      ;;\n    esac\n\n    # Pass back the list of options.\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_options_prep_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_options_prep libtool_options_prep\n\n\n# libtool_parse_options [ARG]...\n# ---------------------------------\n# Provide handling for libtool specific options.\nlibtool_parse_options ()\n{\n    $debug_cmd\n\n    # Perform our own loop to consume as many options as possible in\n    # each iteration.\n    while test $# -gt 0; do\n      _G_opt=$1\n      shift\n      case $_G_opt in\n        --dry-run|--dryrun|-n)\n                        opt_dry_run=:\n                        ;;\n\n        --config)       func_config ;;\n\n        --dlopen|-dlopen)\n                        opt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$1\"\n                        shift\n                        ;;\n\n        --preserve-dup-deps)\n                        opt_preserve_dup_deps=: ;;\n\n        --features)     func_features ;;\n\n        --finish)       set dummy --mode finish ${1+\"$@\"}; shift ;;\n\n        --help)         opt_help=: ;;\n\n        --help-all)     opt_help=': help-all' ;;\n\n        --mode)         test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_mode=$1\n                        case $1 in\n                          # Valid mode arguments:\n                          clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n                          # Catch anything else as an error\n                          *) func_error \"invalid argument for $_G_opt\"\n                             exit_cmd=exit\n                             break\n                             ;;\n                        esac\n                        shift\n                        ;;\n\n        --no-silent|--no-quiet)\n                        opt_quiet=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-warnings|--no-warning|--no-warn)\n                        opt_warning=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --no-verbose)\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --silent|--quiet)\n                        opt_quiet=:\n                        opt_verbose=false\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n        --tag)          test $# = 0 && func_missing_arg $_G_opt && break\n                        opt_tag=$1\n                        func_append preserve_args \" $_G_opt $1\"\n                        func_enable_tag \"$1\"\n                        shift\n                        ;;\n\n        --verbose|-v)   opt_quiet=false\n                        opt_verbose=:\n                        func_append preserve_args \" $_G_opt\"\n                        ;;\n\n\t# An option not handled by this hook function:\n        *)\t\tset dummy \"$_G_opt\" ${1+\"$@\"};\tshift; break  ;;\n      esac\n    done\n\n\n    # save modified positional parameters for caller\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_parse_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_parse_options libtool_parse_options\n\n\n\n# libtool_validate_options [ARG]...\n# ---------------------------------\n# Perform any sanity checks on option settings and/or unconsumed\n# arguments.\nlibtool_validate_options ()\n{\n    # save first non-option argument\n    if test 0 -lt $#; then\n      nonopt=$1\n      shift\n    fi\n\n    # preserve --debug\n    test : = \"$debug_cmd\" || func_append preserve_args \" --debug\"\n\n    case $host in\n      # Solaris2 added to fix http://debbugs.gnu.org/cgi/bugreport.cgi?bug=16452\n      # see also: http://gcc.gnu.org/bugzilla/show_bug.cgi?id=59788\n      *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* | *os2*)\n        # don't eliminate duplications in $postdeps and $predeps\n        opt_duplicate_compiler_generated_deps=:\n        ;;\n      *)\n        opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n        ;;\n    esac\n\n    $opt_help || {\n      # Sanity checks first:\n      func_check_version_match\n\n      test yes != \"$build_libtool_libs\" \\\n        && test yes != \"$build_old_libs\" \\\n        && func_fatal_configuration \"not configured to build any kind of library\"\n\n      # Darwin sucks\n      eval std_shrext=\\\"$shrext_cmds\\\"\n\n      # Only execute mode is allowed to have -dlopen flags.\n      if test -n \"$opt_dlopen\" && test execute != \"$opt_mode\"; then\n        func_error \"unrecognized option '-dlopen'\"\n        $ECHO \"$help\" 1>&2\n        exit $EXIT_FAILURE\n      fi\n\n      # Change the help message to a mode-specific one.\n      generic_help=$help\n      help=\"Try '$progname --help --mode=$opt_mode' for more information.\"\n    }\n\n    # Pass back the unparsed argument list\n    func_quote_for_eval ${1+\"$@\"}\n    libtool_validate_options_result=$func_quote_for_eval_result\n}\nfunc_add_hook func_validate_options libtool_validate_options\n\n\n# Process options as early as possible so that --help and --version\n# can return quickly.\nfunc_options ${1+\"$@\"}\neval set dummy \"$func_options_result\"; shift\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\nmagic='%%%MAGIC variable%%%'\nmagic_exe='%%%MAGIC EXE variable%%%'\n\n# Global variables.\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# func_generated_by_libtool\n# True iff stdin has been generated by Libtool. This function is only\n# a basic sanity check; it will hardly flush out determined imposters.\nfunc_generated_by_libtool_p ()\n{\n  $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool '.la' library or '.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if 'file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case $lalib_p_line in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test yes = \"$lalib_p\"\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    test -f \"$1\" &&\n      $lt_truncate_bin < \"$1\" 2>/dev/null | func_generated_by_libtool_p\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $debug_cmd\n\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$sp$nl\n      eval cmd=\\\"$cmd\\\"\n      IFS=$save_ifs\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# 'FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $debug_cmd\n\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case $lt_sysroot:$1 in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result='='$func_stripname_result\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $debug_cmd\n\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`$SED -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with '--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=$1\n    if test yes = \"$build_libtool_libs\"; then\n      write_lobj=\\'$2\\'\n    else\n      write_lobj=none\n    fi\n\n    if test yes = \"$build_old_libs\"; then\n      write_oldobj=\\'$3\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"$write_libobj\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $debug_cmd\n\n  func_convert_core_file_wine_to_w32_result=$1\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"$func_convert_core_file_wine_to_w32_tmp\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $debug_cmd\n\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\"; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=$func_convert_core_file_wine_to_w32_result\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $debug_cmd\n\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: '$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $debug_cmd\n\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $debug_cmd\n\n  if test -z \"$2\" && test -n \"$1\"; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  '$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=$1\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $debug_cmd\n\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  '$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=$3\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $debug_cmd\n\n  case $4 in\n  $1 ) func_to_host_path_result=$3$func_to_host_path_result\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via '$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $debug_cmd\n\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $debug_cmd\n\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=$1\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_msys_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=$func_convert_core_file_wine_to_w32_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_file_result=$1\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=$func_cygpath_result\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via '$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $debug_cmd\n\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=func_convert_path_$func_stripname_result\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $debug_cmd\n\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=$1\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_msys_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=$func_convert_core_path_wine_to_w32_result\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $debug_cmd\n\n  func_to_host_path_result=$1\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=$func_cygpath_result\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_dll_def_p FILE\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with _LT_DLL_DEF_P in libtool.m4\nfunc_dll_def_p ()\n{\n  $debug_cmd\n\n  func_dll_def_p_tmp=`$SED -n \\\n    -e 's/^[\t ]*//' \\\n    -e '/^\\(;.*\\)*$/d' \\\n    -e 's/^\\(EXPORTS\\|LIBRARY\\)\\([\t ].*\\)*$/DEF/p' \\\n    -e q \\\n    \"$1\"`\n  test DEF = \"$func_dll_def_p_tmp\"\n}\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $debug_cmd\n\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=$nonopt  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=$arg\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=$arg\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify '-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=$IFS; IFS=,\n\t  for arg in $args; do\n\t    IFS=$save_ifs\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=$save_ifs\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=$srcfile\n\t  srcfile=$arg\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with '-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=$func_basename_result\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from '$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest yes = \"$build_libtool_libs\" \\\n\t  || func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name '$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=$func_basename_result\n    xdir=$func_dirname_result\n    lobj=$xdir$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test yes = \"$build_old_libs\"; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test no = \"$pic_mode\" && test pass_all != \"$deplibs_check_method\"; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test no = \"$compiler_c_o\"; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.$objext\n      lockfile=$output_obj.lock\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test yes = \"$need_locks\"; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test warn = \"$need_locks\"; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test yes = \"$build_libtool_libs\"; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test no != \"$pic_mode\"; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test yes = \"$suppress_opt\"; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test yes = \"$build_old_libs\"; then\n      if test yes != \"$pic_mode\"; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test yes = \"$compiler_c_o\"; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test warn = \"$need_locks\" &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support '-c' and '-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test no != \"$need_locks\"; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test compile = \"$opt_mode\" && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a '.o' file suitable for static linking\n  -static           only build a '.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a 'standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix '.c' with the\nlibrary object suffix, '.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to '-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe '--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the 'install' or 'cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      '-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  use a list of object files found in FILE to specify objects\n  -os2dllname NAME  force a short DLL name on OS/2 (no effect on other OSes)\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with '-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in '.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in '.la', then a libtool library is created,\nonly library objects ('.lo' files) may be specified, and '-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in '.a' or '.lib', then a standard library is created\nusing 'ar' and 'ranlib', or on Windows using 'lib'.\n\nIf OUTPUT-FILE ends in '.lo' or '.$objext', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically '/bin/rm').  RM-OPTIONS are options (such as '-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode '$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try '$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test : = \"$opt_help\"; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | $SED -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    $SED '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $debug_cmd\n\n    # The first argument is the command name.\n    cmd=$nonopt\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"'$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"'$file' was not linked with '-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find '$dlname' in '$dir' or '$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=$func_dirname_result\n\t;;\n\n      *)\n\tfunc_warning \"'-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=$absdir\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=$magic\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=$progdir/$program\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if $opt_dry_run; then\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    else\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\\$cmd$args\n    fi\n}\n\ntest execute = \"$opt_mode\" && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $debug_cmd\n\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"'$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument '$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and '=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  $SED -e \"$sysroot_cmd s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_quiet && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the '-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the '$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the '$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the '$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to '/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest finish = \"$opt_mode\" && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $debug_cmd\n\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$SHELL\" = \"$nonopt\" || test /bin/sh = \"$nonopt\" ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac\n    then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=false\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=: ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test X-m = \"X$prev\" && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=:\n    if $isdir; then\n      destdir=$dest\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=$func_dirname_result\n      destname=$func_basename_result\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"'$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"'$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"'$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=$func_dirname_result\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install '$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking '$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink '\\''$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=$1\n\t  shift\n\n\t  srcname=$realname\n\t  test -n \"$relink_command\" && srcname=${realname}T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=$stripme\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  os2*)\n\t    case $realname in\n\t    *_dll.a)\n\t      tstripme=\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try 'ln -sf' first, because the 'ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=$destdir/$realname\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=$func_basename_result\n\tinstname=$dir/${name}i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=$destfile\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to '$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test yes = \"$build_old_libs\"; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=$destdir/$destname\n\telse\n\t  func_basename \"$file\"\n\t  destfile=$func_basename_result\n\t  destfile=$destdir/$destfile\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=.exe\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script '$wrapper'\"\n\n\t  finalize=:\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=$libdir/`$ECHO \"$lib\" | $SED 's%^.*/%%g'`\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"'$lib' has not been installed in '$libdir'\"\n\t      finalize=false\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test no = \"$fast_install\" && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if $finalize; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=$func_basename_result\n\t        outputname=$tmpdir/$file\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_quiet || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink '$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=$outputname\n\t      else\n\t        func_warning \"cannot relink '$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=$func_basename_result\n\n      # Set up the ranlib parameters.\n      oldlib=$destdir/$name\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run '$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL \"$progpath\" $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest install = \"$opt_mode\" && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $debug_cmd\n\n    my_outputname=$1\n    my_originator=$2\n    my_pic_p=${3-false}\n    my_prefix=`$ECHO \"$my_originator\" | $SED 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=${my_outputname}S.c\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=$output_objdir/$my_outputname.nm\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for '$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined __GNUC__ && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test yes = \"$dlself\"; then\n\t  func_verbose \"generating symbol list for '$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from '$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=$output_objdir/$outputname.exp\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"$SED -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"$SED -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from '$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=$func_basename_result\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\"; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=$func_basename_result\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\"; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  func_show_eval '$RM \"${nlist}I\"'\n\t  if test -n \"$global_symbol_to_import\"; then\n\t    eval \"$global_symbol_to_import\"' < \"$nlist\"S > \"$nlist\"I'\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\\\n\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\nstatic void lt_syminit(void)\n{\n  LT_DLSYM_CONST lt_dlsymlist *symbol = lt_${my_prefix}_LTX_preloaded_symbols;\n  for (; symbol->name; ++symbol)\n    {\"\n\t    $SED 's/.*/      if (STREQ (symbol->name, \\\"&\\\")) symbol->address = (void *) \\&&;/' < \"$nlist\"I >> \"$output_objdir/$my_dlsyms\"\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n    }\n}\"\n\t  fi\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{ {\\\"$my_originator\\\", (void *) 0},\"\n\n\t  if test -s \"$nlist\"I; then\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {\\\"@INIT@\\\", (void *) &lt_syminit},\"\n\t  fi\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    $my_pic_p && pic_flag_for_symtable=\" $pic_flag\"\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\" \"${nlist}I\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=$output_objdir/${my_outputname}S.$objext\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for '$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $debug_cmd\n\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $debug_cmd\n\n  win32_libid_type=unknown\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      case $nm_interface in\n      \"MS dumpbin\")\n\tif func_cygming_ms_implib_p \"$1\" ||\n\t   func_cygming_gnu_implib_p \"$1\"\n\tthen\n\t  win32_nmres=import\n\telse\n\t  win32_nmres=\n\tfi\n\t;;\n      *)\n\tfunc_to_tool_file \"$1\" func_convert_file_msys_to_w32\n\twin32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t  $SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s|.*|import|\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n\t;;\n      esac\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $debug_cmd\n\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $debug_cmd\n\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive that possess that section. Heuristic: eliminate\n    # all those that have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $debug_cmd\n\n  if func_cygming_gnu_implib_p \"$1\"; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\"; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $debug_cmd\n\n    f_ex_an_ar_dir=$1; shift\n    f_ex_an_ar_oldlib=$1\n    if test yes = \"$lock_old_archive_extraction\"; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test yes = \"$lock_old_archive_extraction\"; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $debug_cmd\n\n    my_gentop=$1; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\n    my_xlib=\n    my_xabs=\n    my_xdir=\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=$my_xlib ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=$func_basename_result\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=$my_gentop/$my_xlib_u\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  func_basename \"$darwin_archive\"\n\t  darwin_base_archive=$func_basename_result\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches; do\n\t      func_mkdir_p \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\" \"$darwin_archive\"\n\t      cd \"unfat-$$/$darwin_base_archive-$darwin_arch\"\n\t      func_extract_an_archive \"`pwd`\" \"$darwin_base_archive\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/$darwin_base_archive-$darwin_arch/$darwin_base_archive\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$sed_basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=$my_oldobjs\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory where it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ that is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options that match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"$outputname:$output:\\$LINENO: libtool wrapper (GNU $PACKAGE) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"$outputname:$output:\\$LINENO: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test yes = \"$fast_install\"; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | $SED 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t\\$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: '\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#define STREQ(s1, s2) (strcmp ((s1), (s2)) == 0)\n\n/* declarations of non-ANSI functions */\n#if defined __MINGW32__\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined __CYGWIN__\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined other_platform || defined ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined _MSC_VER\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n#elif defined __MINGW32__\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined __CYGWIN__\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined other platforms ... */\n#endif\n\n#if defined PATH_MAX\n# define LT_PATHMAX PATH_MAX\n#elif defined MAXPATHLEN\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined _WIN32 || defined __MSDOS__ || defined __DJGPP__ || \\\n  defined __OS2__\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free (stale); stale = 0; } \\\n} while (0)\n\n#if defined LT_DEBUGWRAPPER\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\n#if __GNUC__ < 4 || (__GNUC__ == 4 && __GNUC_MINOR__ < 5)\n# define externally_visible volatile\n#else\n# define externally_visible __attribute__((externally_visible)) volatile\n#endif\nexternally_visible const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test yes = \"$shlibpath_overrides_runpath\" && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test yes = \"$fast_install\"; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  int rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, (size_t) argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (STREQ (argv[i], dumpscript_opt))\n\t{\nEOF\n\t    case $host in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (STREQ (argv[i], debug_opt))\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (STREQ (argv[i], ltwrapper_option_prefix))\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = (int) _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  size_t tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined HAVE_DOS_BASED_FILE_SYSTEM\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = (size_t) (q - p);\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (STREQ (str, pat))\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    size_t len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      size_t orig_value_len = strlen (orig_value);\n      size_t add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      size_t len = strlen (new_value);\n      while ((len > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[--len] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $debug_cmd\n\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_suncc_cstd_abi\n# !!ONLY CALL THIS FOR SUN CC AFTER $compile_command IS FULLY EXPANDED!!\n# Several compiler flags select an ABI that is incompatible with the\n# Cstd library. Avoid specifying it if any are in CXXFLAGS.\nfunc_suncc_cstd_abi ()\n{\n    $debug_cmd\n\n    case \" $compile_command \" in\n    *\" -compat=g \"*|*\\ -std=c++[0-9][0-9]\\ *|*\" -library=stdcxx4 \"*|*\" -library=stlport4 \"*)\n      suncc_use_cstd_abi=no\n      ;;\n    *)\n      suncc_use_cstd_abi=yes\n      ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $debug_cmd\n\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # what system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll that has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    os2dllname=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=false\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=$wl-single_module\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest yes != \"$build_libtool_libs\" \\\n\t  && func_fatal_configuration \"cannot build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test yes = \"$build_libtool_libs\" && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=$1\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  $preload || {\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=:\n\t  }\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test no = \"$dlself\"; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test dlprefiles = \"$prev\"; then\n\t      dlself=yes\n\t    elif test dlfiles = \"$prev\" && test yes != \"$dlopen_self\"; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test dlfiles = \"$prev\"; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=$arg\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file '$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tmllvm)\n\t  # Clang does not use LLVM to link, so we can simply discard any\n\t  # '-mllvm $arg' options when doing the link step.\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test none = \"$pic_object\" &&\n\t\t   test none = \"$non_pic_object\"; then\n\t\t  func_fatal_error \"cannot find name of object for '$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=$func_dirname_result\n\n\t\tif test none != \"$pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=$xdir$pic_object\n\n\t\t  if test dlfiles = \"$prev\"; then\n\t\t    if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test dlprefiles = \"$prev\"; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=$pic_object\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test none != \"$non_pic_object\"; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=$xdir$non_pic_object\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t\t    arg=$non_pic_object\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=$pic_object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=$func_dirname_result\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"'$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file '$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tos2dllname)\n\t  os2dllname=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=-$arg\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test rpath = \"$prev\"; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=$arg\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=$arg\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"'-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test X-export-symbols = \"X$arg\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between '-L' and '$1'\"\n\t  else\n\t    func_fatal_error \"need path for '-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of '$dir'\"\n\t  dir=$absdir\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test X-lc = \"X$arg\" || test X-lm = \"X$arg\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test X-lc = \"X$arg\" && continue\n\t    ;;\n\t  esac\n\telif test X-lc_r = \"X$arg\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly* | *-*-bitrig*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -mllvm)\n\tprev=mllvm\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=$wl-multi_module\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"'-no-install' is ignored for $host\"\n\t  func_warning \"assuming '-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -os2dllname)\n\tprev=os2dllname\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=$IFS; IFS=,\n\tfor flag in $args; do\n\t  IFS=$save_ifs\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=$save_ifs\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # -fstack-protector*   stack protector flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -g*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      # -stdlib=*            select c++ std lib with clang\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-g*|-flto*|-fwhopr*|-fuse-linker-plugin|-fstack-protector*|-stdlib=*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      -Z*)\n        if test os2 = \"`expr $host : '.*\\(os2\\)'`\"; then\n          # OS/2 uses -Zxxx to specify OS/2-specific options\n\t  compiler_flags=\"$compiler_flags $arg\"\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  case $arg in\n\t  -Zlinker | -Zstack)\n\t    prev=xcompiler\n\t    ;;\n\t  esac\n\t  continue\n        else\n\t  # Otherwise treat like 'Some other compiler flag' below\n\t  func_quote_for_eval \"$arg\"\n\t  arg=$func_quote_for_eval_result\n        fi\n\t;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test none = \"$pic_object\" &&\n\t     test none = \"$non_pic_object\"; then\n\t    func_fatal_error \"cannot find name of object for '$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=$func_dirname_result\n\n\t  test none = \"$pic_object\" || {\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=$xdir$pic_object\n\n\t    if test dlfiles = \"$prev\"; then\n\t      if test yes = \"$build_libtool_libs\" && test yes = \"$dlopen_support\"; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test dlprefiles = \"$prev\"; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=$pic_object\n\t  }\n\n\t  # Non-PIC object.\n\t  if test none != \"$non_pic_object\"; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=$xdir$non_pic_object\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test none = \"$pic_object\"; then\n\t      arg=$non_pic_object\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=$pic_object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=$func_dirname_result\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"'$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test dlfiles = \"$prev\"; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test dlprefiles = \"$prev\"; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=$func_quote_for_eval_result\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the '$prevarg' option requires an argument\"\n\n    if test yes = \"$export_dynamic\" && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=$func_basename_result\n    libobjs_save=$libobjs\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    # Definition is injected by LT_CONFIG during libtool generation.\n    func_munge_path_list sys_lib_dlsearch_path \"$LT_SYS_LIBRARY_PATH\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=$func_dirname_result$objdir\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test lib = \"$linkmode\"; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can '-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=false\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test lib,link = \"$linkmode,$pass\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=$tmp_deplibs\n      fi\n\n      if test lib,link = \"$linkmode,$pass\" ||\n\t test prog,scan = \"$linkmode,$pass\"; then\n\tlibs=$deplibs\n\tdeplibs=\n      fi\n      if test prog = \"$linkmode\"; then\n\tcase $pass in\n\tdlopen) libs=$dlfiles ;;\n\tdlpreopen) libs=$dlprefiles ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test lib,dlpreopen = \"$linkmode,$pass\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=$dlprefiles\n      fi\n      if test dlopen = \"$pass\"; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=$deplibs\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=false\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test lib != \"$linkmode\" && test prog != \"$linkmode\"; then\n\t    func_warning \"'-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test lib = \"$linkmode\"; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=$searchdir/lib$name$search_ext\n\t      if test -f \"$lib\"; then\n\t\tif test .la = \"$search_ext\"; then\n\t\t  found=:\n\t\telse\n\t\t  found=false\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if $found; then\n\t    # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=$l\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\"; then # only static version available\n\t\t    found=false\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=$func_dirname_result\n\t\t    lib=$ladir/$old_library\n\t\t    if test prog,link = \"$linkmode,$pass\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  else\n\t    # deplib doesn't seem to be a libtool library\n\t    if test prog,link = \"$linkmode,$pass\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test lib = \"$linkmode\" && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test lib = \"$linkmode\"; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test conv = \"$pass\" && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test conv = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test scan = \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"'-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test link = \"$pass\"; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=false\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=:\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=:\n\t\t;;\n\t      esac\n\t      if $valid_a_lib; then\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test link != \"$pass\"; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test conv = \"$pass\"; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test prog = \"$linkmode\"; then\n\t    if test dlpreopen = \"$pass\" || test yes != \"$dlopen_support\" || test no = \"$build_libtool_libs\"; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=:\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\t$found || test -f \"$lib\" \\\n\t  || func_fatal_error \"cannot find the library '$lib' or unhandled argument '$deplib'\"\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"'$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=$func_dirname_result\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test lib,link = \"$linkmode,$pass\" ||\n\t   test prog,scan = \"$linkmode,$pass\" ||\n\t   { test prog != \"$linkmode\" && test lib != \"$linkmode\"; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test conv = \"$pass\"; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for '$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test prog != \"$linkmode\" && test lib != \"$linkmode\"; then\n\t    func_fatal_error \"'$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test yes = \"$prefer_static_libs\" ||\n\t     test built,no = \"$prefer_static_libs,$installed\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=$l\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for '$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test dlopen = \"$pass\"; then\n\t  test -z \"$libdir\" \\\n\t    && func_fatal_error \"cannot -dlopen a convenience library: '$lib'\"\n\t  if test -z \"$dlname\" ||\n\t     test yes != \"$dlopen_support\" ||\n\t     test no = \"$build_libtool_libs\"\n\t  then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=$ladir ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of '$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=$ladir\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=$func_basename_result\n\n\t# Find the relevant object directory and library name.\n\tif test yes = \"$installed\"; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library '$lib' was moved.\"\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    libdir=$abs_ladir\n\t  else\n\t    dir=$lt_sysroot$libdir\n\t    absdir=$lt_sysroot$libdir\n\t  fi\n\t  test yes = \"$hardcode_automatic\" && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=$ladir\n\t    absdir=$abs_ladir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=$ladir/$objdir\n\t    absdir=$abs_ladir/$objdir\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test dlpreopen = \"$pass\"; then\n\t  if test -z \"$libdir\" && test prog = \"$linkmode\"; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: '$lib'\"\n\t  fi\n\t  case $host in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test lib = \"$linkmode\"; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test prog,link = \"$linkmode,$pass\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test prog = \"$linkmode\" && test link != \"$pass\"; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=false\n\t  if test no != \"$link_all_deplibs\" || test -z \"$library_names\" ||\n\t     test no = \"$build_libtool_libs\"; then\n\t    linkalldeplibs=:\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if $linkalldeplibs; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test no = \"$prefer_static_libs\" ||\n\t         test built,yes = \"$prefer_static_libs,$installed\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\"; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case $temp_rpath: in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if $alldeplibs &&\n\t     { test pass_all = \"$deplibs_check_method\" ||\n\t       { test yes = \"$build_libtool_libs\" &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test built = \"$use_static_libs\" && test yes = \"$installed\"; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test no = \"$use_static_libs\" || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* | *os2*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test no = \"$installed\"; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=$dlpremoduletest\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test yes = \"$shouldnotlink\" && test link = \"$pass\"; then\n\t    echo\n\t    if test prog = \"$linkmode\"; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test lib = \"$linkmode\" &&\n\t     test yes = \"$hardcode_into_libs\"; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=$1\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=$dlname\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc* | *os2*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=-$major\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=$realname\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=$soname\n\t    func_basename \"$soroot\"\n\t    soname=$func_basename_result\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from '$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for '$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test prog = \"$linkmode\" || test relink != \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test no = \"$hardcode_direct\"; then\n\t\tadd=$dir/$linklib\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=-L$dir ;;\n\t\t  *-*-sysv4*uw2*) add_dir=-L$dir ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=-L$dir ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we cannot\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\"; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=$dir/$old_library\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=$dir/$old_library\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test no = \"$hardcode_minus_L\"; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=$dir ;;\n\t\tesac\n\t\tadd_dir=-L$dir\n\t\tadd=-l$name\n\t      elif test no = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test yes = \"$hardcode_direct\" &&\n\t         test no = \"$hardcode_direct_absolute\"; then\n\t\tadd=$dir/$linklib\n\t      elif test yes = \"$hardcode_minus_L\"; then\n\t\tadd_dir=-L$absdir\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=-l$name\n\t      elif test yes = \"$hardcode_shlibpath_var\"; then\n\t\tadd_shlibpath=$dir\n\t\tadd=-l$name\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test yes != \"$lib_linked\"; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test yes != \"$hardcode_direct\" &&\n\t\t test yes != \"$hardcode_minus_L\" &&\n\t\t test yes = \"$hardcode_shlibpath_var\"; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test prog = \"$linkmode\" || test relink = \"$opt_mode\"; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test yes = \"$hardcode_direct\" &&\n\t       test no = \"$hardcode_direct_absolute\"; then\n\t      add=$libdir/$linklib\n\t    elif test yes = \"$hardcode_minus_L\"; then\n\t      add_dir=-L$libdir\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_shlibpath_var\"; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=-l$name\n\t    elif test yes = \"$hardcode_automatic\"; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\"; then\n\t\tadd=$inst_prefix_dir$libdir/$linklib\n\t      else\n\t\tadd=$libdir/$linklib\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=-L$libdir\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=-l$name\n\t    fi\n\n\t    if test prog = \"$linkmode\"; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test prog = \"$linkmode\"; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test unsupported != \"$hardcode_direct\"; then\n\t    test -n \"$old_library\" && linklib=$old_library\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test yes = \"$build_libtool_libs\"; then\n\t  # Not a shared library\n\t  if test pass_all != \"$deplibs_check_method\"; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system cannot link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test yes = \"$module\"; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test no = \"$build_old_libs\"; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test lib = \"$linkmode\"; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test yes != \"$hardcode_into_libs\" ||\n\t       test yes = \"$build_old_libs\" ||\n\t       test yes = \"$link_static\"; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=$temp_deplibs\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test no = \"$link_static\" && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test no != \"$link_all_deplibs\"; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=$deplib ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=$dir ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of '$dir'\"\n\t\t    absdir=$dir\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`$SED -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\"; then\n\t\t    for tmp in $deplibrary_names; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\"; then\n\t\t      depdepl=$absdir/$objdir/$depdepl\n\t\t      darwin_install_name=`$OTOOL -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`$OTOOL64 -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" $wl-dylib_file $wl$darwin_install_name:$depdepl\"\n\t\t      func_append linker_flags \" -dylib_file $darwin_install_name:$depdepl\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=-L$absdir/$objdir\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"'$deplib' seems to be moved\"\n\n\t\t  path=-L$absdir\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test link = \"$pass\"; then\n\tif test prog = \"$linkmode\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=$newdependency_libs\n      if test dlpreopen = \"$pass\"; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test dlopen != \"$pass\"; then\n\ttest conv = \"$pass\" || {\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\t}\n\n\tif test prog,link = \"$linkmode,$pass\"; then\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\telse\n\t  vars=deplibs\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n\n      # Add Sun CC postdeps if required:\n      test CXX = \"$tagname\" && {\n        case $host_os in\n        linux*)\n          case `$CC -V 2>&1 | sed 5q` in\n          *Sun\\ C*) # Sun C++ 5.9\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n\n        solaris*)\n          func_cc_basename \"$CC\"\n          case $func_cc_basename_result in\n          CC* | sunCC*)\n            func_suncc_cstd_abi\n\n            if test no != \"$suncc_use_cstd_abi\"; then\n              func_append postdeps ' -library=Cstd -library=Crun'\n            fi\n            ;;\n          esac\n          ;;\n        esac\n      }\n\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\n\t  ;;\n\tesac\n\tif test -n \"$i\"; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test prog = \"$linkmode\"; then\n      dlfiles=$newdlfiles\n    fi\n    if test prog = \"$linkmode\" || test lib = \"$linkmode\"; then\n      dlprefiles=$newdlprefiles\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"'-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=$output\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form 'libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest no = \"$module\" \\\n\t  && func_fatal_help \"libtool library '$output' must begin with 'lib'\"\n\n\tif test no != \"$need_lib_prefix\"; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test pass_all != \"$deplibs_check_method\"; then\n\t  func_fatal_error \"cannot build libtool library '$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test no = \"$dlself\" \\\n\t|| func_warning \"'-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test 1 -lt \"$#\" \\\n\t&& func_warning \"ignoring multiple '-rpath's for a libtool library\"\n\n      install_libdir=$1\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test yes = \"$build_libtool_libs\"; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a '.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"'-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"'-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=$IFS; IFS=:\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=$save_ifs\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to '-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=$1\n\t  number_minor=$2\n\t  number_revision=$3\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # that has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|freebsd-elf|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_revision\n\t    ;;\n\t  freebsd-aout|qnx|sunos)\n\t    current=$number_major\n\t    revision=$number_minor\n\t    age=0\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=$number_minor\n\t    revision=$number_minor\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=$1\n\t  revision=$2\n\t  age=$3\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT '$current' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION '$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE '$age' must be a nonnegative integer\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE '$age' is greater than the current interface number '$current'\"\n\t  func_fatal_error \"'$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n          # On Darwin other compilers\n          case $CC in\n              nagfor*)\n                  verstring=\"$wl-compatibility_version $wl$minor_current $wl-current_version $wl$minor_current.$revision\"\n                  ;;\n              *)\n                  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n                  ;;\n          esac\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\tfreebsd-elf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test no = \"$lt_irix_increment\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=$verstring_prefix$major.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring_prefix$major.$iface:$verstring\n\t  done\n\n\t  # Before this point, $major must not contain '.'.\n\t  major=.$major\n\t  versuffix=$major.$revision\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=$major.$age.$revision\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=.$current.$age.$revision\n\t  verstring=$current.$age.$revision\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test 0 -ne \"$loop\"; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=$verstring:$iface.0\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":$current.0\"\n\t  ;;\n\n\tqnx)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsco)\n\t  major=.$current\n\t  versuffix=.$current\n\t  ;;\n\n\tsunos)\n\t  major=.$current\n\t  versuffix=.$current.$revision\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 file systems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=-$major\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type '$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=0.0\n\t    ;;\n\t  esac\n\t  if test no = \"$need_version\"; then\n\t    versuffix=\n\t  else\n\t    versuffix=.0.0\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test yes,no = \"$avoid_version,$need_version\"; then\n\t  major=\n\t  versuffix=\n\t  verstring=\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test yes = \"$allow_undefined\"; then\n\t  if test unsupported = \"$allow_undefined_flag\"; then\n\t    if test yes = \"$build_old_libs\"; then\n\t      func_warning \"undefined symbols not allowed in $host shared libraries; building static only\"\n\t      build_libtool_libs=no\n\t    else\n\t      func_fatal_error \"can't build $host shared library unless -no-undefined is specified\"\n\t    fi\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=$no_undefined_flag\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" :\n      func_append libobjs \" $symfileobj\"\n      test \" \" = \"$libobjs\" && libobjs=\n\n      if test relink != \"$opt_mode\"; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/$libname$release.*)\n\t       if test -n \"$precious_files_regex\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test yes = \"$build_old_libs\" && test convenience != \"$build_libtool_libs\"; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test yes != \"$hardcode_into_libs\" || test yes = \"$build_old_libs\"; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=$dlfiles\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=$dlprefiles\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test yes = \"$build_libtool_libs\"; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test yes = \"$build_libtool_need_lc\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\n\tversuffix=\n\tmajor=\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\"; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\"; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest yes = \"$want_nocaseglob\" && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test yes = \"$want_nocaseglob\"; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=$potent_lib\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | $SED 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=$potliblink;;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's|[^/]*$||'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=$potent_lib # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\"; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\"; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test yes = \"$allow_libtool_libs_with_static_runtimes\"; then\n\t    for i in $predeps $postdeps; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s|$i||\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test none = \"$deplibs_check_method\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test yes = \"$droppeddeps\"; then\n\t  if test yes = \"$module\"; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using 'nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** 'nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test no = \"$build_old_libs\"; then\n\t      oldlibs=$output_objdir/$libname.$libext\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test no = \"$allow_undefined\"; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test no = \"$build_old_libs\"; then\n\t\toldlibs=$output_objdir/$libname.$libext\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=$new_libs\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test yes = \"$build_libtool_libs\"; then\n\t# Remove $wl instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test yes = \"$hardcode_into_libs\"; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=$finalize_rpath\n\t  test relink = \"$opt_mode\" || rpath=$compile_rpath$rpath\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=$libdir\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=$hardcode_libdirs\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=$finalize_shlibpath\n\ttest relink = \"$opt_mode\" || shlibpath=$compile_shlibpath$shlibpath\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=$1\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=$realname\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=$output_objdir/$realname\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=$output_objdir/$libname.uexp\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    func_dll_def_p \"$export_symbols\" || {\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=$export_symbols\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    }\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test yes = \"$always_export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for '$libname.la'\"\n\t    export_symbols=$output_objdir/$libname.exp\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=$save_ifs\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test yes = \"$try_normal_branch\" \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=$output_objdir/$output_la.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=$save_ifs\n\t    if test -n \"$export_symbols_regex\" && test : != \"$skipped_export\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=$export_symbols\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test : != \"$skipped_export\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands, which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=$tmp_deplibs\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test yes = \"$compiler_needs_object\" &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=$output_objdir/${outputname}x\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test yes = \"$thread_safe\" && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test : != \"$skipped_export\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test yes = \"$with_gnu_ld\"; then\n\t    output=$output_objdir/$output_la.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test : != \"$skipped_export\" && test -n \"$file_list_spec\"; then\n\t    output=$output_objdir/$output_la.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test yes = \"$compiler_needs_object\"; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-$k.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test -z \"$objlist\" ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test 1 -eq \"$k\"; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-$k.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-$k.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\$concat_cmds$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    ${skipped_export-false} && {\n\t      func_verbose \"generating symbol list for '$libname.la'\"\n\t      export_symbols=$output_objdir/$libname.exp\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    }\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=$IFS; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=$save_ifs\n\t      $opt_quiet || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test relink = \"$opt_mode\"; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=$save_ifs\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          ${skipped_export-false} && {\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=$export_symbols\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=$orig_export_symbols\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for '$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands, which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  }\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test yes = \"$module\" && test -n \"$module_cmds\"; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=$IFS; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=$sp$nl\n\t  eval cmd=\\\"$cmd\\\"\n\t  IFS=$save_ifs\n\t  $opt_quiet || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test relink = \"$opt_mode\"; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=$save_ifs\n\n\t# Restore the uninstalled library and exit\n\tif test relink = \"$opt_mode\"; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test yes = \"$module\" || test yes = \"$export_dynamic\"; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=$soname\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test no != \"$dlself\"; then\n\tfunc_warning \"'-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"'-l' and '-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"'-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"'-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object '$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=$output\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # if reload_cmds runs $LD directly, get rid of -Wl from\n      # whole_archive_flag_spec and hope we can get by with turning comma\n      # into space.\n      case $reload_cmds in\n        *\\$LD[\\ \\$]*) wl= ;;\n      esac\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  test -n \"$wl\" || tmp_whole_archive_flags=`$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\t  reload_conv_objs=$reload_objs\\ $tmp_whole_archive_flags\n\telse\n\t  gentop=$output_objdir/${obj}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test yes = \"$build_libtool_libs\" || libobjs=$non_pic_objects\n\n      # Create the old-style object.\n      reload_objs=$objs$old_deplibs' '`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.$libext$/d; /\\.lib$/d; $lo2o\" | $NL2SP`' '$reload_conv_objs\n\n      output=$obj\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      test yes = \"$build_libtool_libs\" || {\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      }\n\n      if test -n \"$pic_flag\" || test default != \"$pic_mode\"; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=$libobj\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"'-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"'-release' is ignored for programs\"\n\n      $preload \\\n\t&& test unknown,unknown,unknown = \"$dlopen_support,$dlopen_self,$dlopen_self_static\" \\\n\t&& func_warning \"'LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test CXX = \"$tagname\"; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" $wl-bind_at_load\"\n\t      func_append finalize_command \" $wl-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=$new_libs\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$libdir\" | $SED -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=$rpath\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=$libdir\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=$hardcode_libdirs\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=$rpath\n\n      if test -n \"$libobjs\" && test yes = \"$build_old_libs\"; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" false\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=:\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=false\n        ;;\n      *cygwin* | *mingw* )\n        test yes = \"$build_libtool_libs\" || wrappers_required=false\n        ;;\n      *)\n        if test no = \"$need_relink\" || test yes != \"$build_libtool_libs\"; then\n          wrappers_required=false\n        fi\n        ;;\n      esac\n      $wrappers_required || {\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=$compile_command$compile_rpath\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.$objext\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.$objext\"'\n\tfi\n\n\texit $exit_status\n      }\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test yes = \"$no_install\"; then\n\t# We don't need to create a wrapper script.\n\tlink_command=$compile_var$compile_command$compile_rpath\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      case $hardcode_action,$fast_install in\n        relink,*)\n\t  # Fast installation is not supported\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n\n\t  func_warning \"this platform does not like uninstalled shared libraries\"\n\t  func_warning \"'$output' will be relinked during installation\"\n\t  ;;\n        *,yes)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n          ;;\n\t*,no)\n\t  link_command=$compile_var$compile_command$compile_rpath\n\t  relink_command=$finalize_var$finalize_command$finalize_rpath\n          ;;\n\t*,needless)\n\t  link_command=$finalize_var$compile_command$finalize_rpath\n\t  relink_command=\n          ;;\n      esac\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=$output_path/$objdir/lt-$output_name.c\n\t    cwrapper=$output_path/$output_name.exe\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\"; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      case $build_libtool_libs in\n        convenience)\n\t  oldobjs=\"$libobjs_save $symfileobj\"\n\t  addlibs=$convenience\n\t  build_libtool_libs=no\n\t  ;;\n\tmodule)\n\t  oldobjs=$libobjs_save\n\t  addlibs=$old_convenience\n\t  build_libtool_libs=no\n          ;;\n\t*)\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  $preload && test -f \"$symfileobj\" \\\n\t    && func_append oldobjs \" $symfileobj\"\n\t  addlibs=$old_convenience\n\t  ;;\n      esac\n\n      if test -n \"$addlibs\"; then\n\tgentop=$output_objdir/${outputname}x\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test yes = \"$build_libtool_libs\"; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=$output_objdir/${outputname}x\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=$func_basename_result\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\"; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test -z \"$oldobjs\"; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test yes = \"$build_old_libs\" && old_library=$libname.$libext\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL \\\"$progpath\\\" $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test yes = \"$hardcode_automatic\"; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test yes = \"$installed\"; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=$output_objdir/${outputname}i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=$func_basename_result\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=$newdependency_libs\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=$func_basename_result\n\t\teval libdir=`$SED -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"'$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=$newdlfiles\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=$lib ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=$newdlprefiles\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test -n \"$bindir\"; then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result/$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that cannot go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test no,yes = \"$installed,$need_relink\"; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\nif test link = \"$opt_mode\" || test relink = \"$opt_mode\"; then\n  func_mode_link ${1+\"$@\"}\nfi\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $debug_cmd\n\n    RM=$nonopt\n    files=\n    rmforce=false\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=$magic\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=: ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=$func_dirname_result\n      if test . = \"$dir\"; then\n\todir=$objdir\n      else\n\todir=$dir/$objdir\n      fi\n      func_basename \"$file\"\n      name=$func_basename_result\n      test uninstall = \"$opt_mode\" && odir=$dir\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test clean = \"$opt_mode\"; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif $rmforce; then\n\tcontinue\n      fi\n\n      rmfiles=$file\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case $opt_mode in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" '$rmforce || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" && test none != \"$pic_object\"; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" && test none != \"$non_pic_object\"; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test clean = \"$opt_mode\"; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.$objext\"\n\t    if test yes = \"$fast_install\" && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\"; then\n\t      func_append rmfiles \" $odir/lt-$noexename.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the $objdir's in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\nif test uninstall = \"$opt_mode\" || test clean = \"$opt_mode\"; then\n  func_mode_uninstall ${1+\"$@\"}\nfi\n\ntest -z \"$opt_mode\" && {\n  help=$generic_help\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode '$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# where we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/extra/libedit/libedit-20190324-3.1/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996-2001, 2003-2015 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n# Copyright (C) 2014 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program or library that is built\n# using GNU Libtool, you may include this file under the  same\n# distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n])\n\n# serial 58 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.62])dnl We use AC_PATH_PROGS_FEATURE_CHECK\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=$ltmain\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_PREPARE_CC_BASENAME\n# -----------------------\nm4_defun([_LT_PREPARE_CC_BASENAME], [\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nfunc_cc_basename ()\n{\n    for cc_temp in @S|@*\"\"; do\n      case $cc_temp in\n        compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n        distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n        \\-*) ;;\n        *) break;;\n      esac\n    done\n    func_cc_basename_result=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n}\n])# _LT_PREPARE_CC_BASENAME\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# It would be clearer to call AC_REQUIREs from _LT_PREPARE_CC_BASENAME,\n# but that macro is also expanded into generated libtool script, which\n# arranges for $SED and $ECHO to be set by different means.\nm4_defun([_LT_CC_BASENAME],\n[m4_require([_LT_PREPARE_CC_BASENAME])dnl\nAC_REQUIRE([_LT_DECL_SED])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\nfunc_cc_basename $1\ncc_basename=$func_cc_basename_result\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after 'm4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\nm4_require([_LT_CMD_TRUNCATE])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options that allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\"; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test set != \"${COLLECT_NAMES+set}\"; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a '.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\nold_CC=$CC\nold_CFLAGS=$CFLAGS\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from 'configure', and 'config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# 'config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=$ac_aux_dir/ltmain.sh\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the 'libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to 'config.status' so that its\n# declaration there will have the same value as in 'configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags='_LT_TAGS'dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the 'libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into 'config.status', and then the shell code to quote escape them in\n# for loops in 'config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\" ## exclude from sc_prohibit_nested_quotes\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# '#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest 0 = \"$lt_write_fail\" && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n'$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test 0 != $[#]\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry '$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry '$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest yes = \"$silent\" &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options that allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\"; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=${ofile}T\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n# Generated automatically by $as_me ($PACKAGE) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n\n# Provide generalized library-building support services.\n# Written by Gordon Matzigkeit, 1996\n\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# Configured defaults for sys_lib_dlsearch_path munging.\n: \\${LT_SYS_LIBRARY_PATH=\"$configure_time_lt_sys_library_path\"}\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n    cat <<'_LT_EOF' >> \"$cfgfile\"\n\n# ### BEGIN FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_PREPARE_MUNGE_PATH_LIST\n_LT_PREPARE_CC_BASENAME\n\n# ### END FUNCTIONS SHARED WITH CONFIGURE\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test set != \"${COLLECT_NAMES+set}\"; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"$LT_MULTI_MODULE\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test 0 = \"$_lt_result\"; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=$save_LDFLAGS\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test 0 = \"$_lt_result\" && $GREP forced_load conftest >/dev/null 2>&1; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='$wl-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='$wl-flat_namespace $wl-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='$wl-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test yes = \"$lt_cv_apple_cc_single_mod\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test yes = \"$lt_cv_ld_exported_symbols_list\"; then\n      _lt_dar_export_syms=' $wl-exported_symbols_list,$output_objdir/$libname-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/$libname-symbols.expsym $lib'\n    fi\n    if test : != \"$DSYMUTIL\" && test no = \"$lt_cv_ld_force_load\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test yes = \"$lt_cv_ld_force_load\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience $wl-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=$_lt_dar_allow_undefined\n  case $cc_basename in\n     ifort*|nagfor*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test yes = \"$_lt_dar_can_shared\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dsymutil\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dsymutil\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod$_lt_dar_export_syms$_lt_dsymutil\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags$_lt_dar_export_syms$_lt_dsymutil\"\n    m4_if([$1], [CXX],\n[   if test yes != \"$lt_cv_apple_cc_single_mod\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dsymutil\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's|^|_|' < \\$export_symbols > \\$output_objdir/\\$libname-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\$lib-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$lib-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring$_lt_dar_export_syms$_lt_dsymutil\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test set = \"${lt_cv_aix_libpath+set}\"; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=/usr/lib:/lib\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script that will find a shell with a builtin\n# printf (that we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\ncase $ECHO in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[AS_HELP_STRING([--with-sysroot@<:@=DIR@:>@],\n  [Search for dependent libraries within DIR (or the compiler's sysroot\n   if not specified).])],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase $with_sysroot in #(\n yes)\n   if test yes = \"$GCC\"; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([$with_sysroot])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and where our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest no = \"$enable_libtool_lock\" || enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out what ABI is being produced by ac_compile, and set mode\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=32\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=64\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test yes = \"$lt_cv_prog_gnu_ld\"; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nmips64*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    emul=elf\n    case `/usr/bin/file conftest.$ac_objext` in\n      *32-bit*)\n\temul=\"${emul}32\"\n\t;;\n      *64-bit*)\n\temul=\"${emul}64\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *MSB*)\n\temul=\"${emul}btsmip\"\n\t;;\n      *LSB*)\n\temul=\"${emul}ltsmip\"\n\t;;\n    esac\n    case `/usr/bin/file conftest.$ac_objext` in\n      *N32*)\n\temul=\"${emul}n32\"\n\t;;\n    esac\n    LD=\"${LD-ld} -m $emul\"\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.  Note that the listed cases only cover the\n  # situations where additional linker options are needed (such as when\n  # doing 32-bit compilation for a host where ld defaults to 64-bit, or\n  # vice versa); the common cases where no linker options are needed do\n  # not appear in the list.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=$CFLAGS\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test yes != \"$lt_cv_cc_needs_belf\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=$SAVE_CFLAGS\n  fi\n  ;;\n*-*solaris*)\n  # Find out what ABI is being produced by ac_compile, and set linker\n  # options accordingly.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*|x86_64-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=${LD-ld}_sol2\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=$enable_libtool_lock\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test 0 -eq \"$ac_status\"; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test 0 -ne \"$ac_status\"; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test no = \"$lt_cv_ar_at_file\"; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  bitrig* | openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"  ## exclude from sc_useless_quotes_in_assignment\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=$LDFLAGS\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=$save_LDFLAGS\n])\n\nif test yes = \"[$]$2\"; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=ABCD\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  bitrig* | darwin* | dragonfly* | freebsd* | netbsd* | openbsd*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n       test undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test X`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test 17 != \"$i\" # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n \"$lt_cv_sys_max_cmd_len\"; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes = \"$cross_compiling\"; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisibility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined __GNUC__ && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s \"conftest$ac_exeext\" 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test yes != \"$enable_dlopen\"; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=load_add_on\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=LoadLibrary\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n    # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],[\n    lt_cv_dlopen=dyld\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  tpf*)\n    # Don't try to run any link tests for TPF.  We know it's impossible\n    # because TPF is a cross-compiler, and we know how we open DSOs.\n    lt_cv_dlopen=dlopen\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=no\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=shl_load],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=shl_load lt_cv_dlopen_libs=-ldld],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=dlopen],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-ldl],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=dlopen lt_cv_dlopen_libs=-lsvld],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=dld_link lt_cv_dlopen_libs=-ldld])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test no = \"$lt_cv_dlopen\"; then\n    enable_dlopen=no\n  else\n    enable_dlopen=yes\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=$CPPFLAGS\n    test yes = \"$ac_cv_header_dlfcn_h\" && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=$LDFLAGS\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=$LIBS\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test yes = \"$lt_cv_dlopen_self\"; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=$save_CPPFLAGS\n    LDFLAGS=$save_LDFLAGS\n    LIBS=$save_LIBS\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=nottested\nif test no = \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" && test no != \"$need_locks\"; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test no = \"$hard_links\"; then\n    AC_MSG_WARN(['$CC' does not support '-c -o', so 'make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED([LT_OBJDIR], \"$lt_cv_objdir/\",\n  [Define to the sub-directory where libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test yes = \"$_LT_TAGVAR(hardcode_automatic, $1)\"; then\n\n  # We can hardcode non-existent directories.\n  if test no != \"$_LT_TAGVAR(hardcode_direct, $1)\" &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test no != \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" &&\n     test no != \"$_LT_TAGVAR(hardcode_minus_L, $1)\"; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test relink = \"$_LT_TAGVAR(hardcode_action, $1)\" ||\n   test yes = \"$_LT_TAGVAR(inherit_rpath, $1)\"; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test yes = \"$shlibpath_overrides_runpath\" ||\n     test no = \"$enable_shared\"; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\"; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_PREPARE_MUNGE_PATH_LIST\n# ---------------------------\n# Make sure func_munge_path_list() is defined correctly.\nm4_defun([_LT_PREPARE_MUNGE_PATH_LIST],\n[[# func_munge_path_list VARIABLE PATH\n# -----------------------------------\n# VARIABLE is name of variable containing _space_ separated list of\n# directories to be munged by the contents of PATH, which is string\n# having a format:\n# \"DIR[:DIR]:\"\n#       string \"DIR[ DIR]\" will be prepended to VARIABLE\n# \":DIR[:DIR]\"\n#       string \"DIR[ DIR]\" will be appended to VARIABLE\n# \"DIRP[:DIRP]::[DIRA:]DIRA\"\n#       string \"DIRP[ DIRP]\" will be prepended to VARIABLE and string\n#       \"DIRA[ DIRA]\" will be appended to VARIABLE\n# \"DIR[:DIR]\"\n#       VARIABLE will be replaced by \"DIR[ DIR]\"\nfunc_munge_path_list ()\n{\n    case x@S|@2 in\n    x)\n        ;;\n    *:)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'` \\@S|@@S|@1\\\"\n        ;;\n    x:*)\n        eval @S|@1=\\\"\\@S|@@S|@1 `$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    *::*)\n        eval @S|@1=\\\"\\@S|@@S|@1\\ `$ECHO @S|@2 | $SED -e 's/.*:://' -e 's/:/ /g'`\\\"\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED -e 's/::.*//' -e 's/:/ /g'`\\ \\@S|@@S|@1\\\"\n        ;;\n    *)\n        eval @S|@1=\\\"`$ECHO @S|@2 | $SED 's/:/ /g'`\\\"\n        ;;\n    esac\n}\n]])# _LT_PREPARE_PATH_LIST\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PREPARE_MUNGE_PATH_LIST])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test yes = \"$GCC\"; then\n  case $host_os in\n    darwin*) lt_awk_arg='/^libraries:/,/LR/' ;;\n    *) lt_awk_arg='/^libraries:/' ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq='s|=\\([[A-Za-z]]:\\)|\\1|g' ;;\n    *) lt_sed_strip_eq='s|=/|/|g' ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary...\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=/`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  # ...but if some path component already ends with the multilib dir we assume\n  # that all is fine and trust -print-search-dirs as is (GCC 4.2? or newer).\n  case \"$lt_multi_os_dir; $lt_search_path_spec \" in\n  \"/; \"* | \"/.; \"* | \"/./; \"* | *\"$lt_multi_os_dir \"* | *\"$lt_multi_os_dir/ \"*)\n    lt_multi_os_dir=\n    ;;\n  esac\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path$lt_multi_os_dir\"\n    elif test -n \"$lt_multi_os_dir\"; then\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS = \" \"; FS = \"/|\\n\";} {\n  lt_foo = \"\";\n  lt_count = 0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo = \"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's|/\\([[A-Za-z]]:\\)|\\1|g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=.so\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\nAC_ARG_VAR([LT_SYS_LIBRARY_PATH],\n[User-defined run-time library search path.])\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='$libname$release$shared_ext$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test ia64 = \"$host_cpu\"; then\n    # AIX 5 supports IA64\n    library_names_spec='$libname$release$shared_ext$major $libname$release$shared_ext$versuffix $libname$shared_ext'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line '#! .'.  This would cause the generated library to\n    # depend on '.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | $CC -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # Using Import Files as archive members, it is possible to support\n    # filename-based versioning of shared library archives on AIX. While\n    # this would work for both with and without runtime linking, it will\n    # prevent static linking of such archives. So we do filename-based\n    # shared library versioning with .so extension only, which is used\n    # when both runtime linking and shared linking is enabled.\n    # Unfortunately, runtime linking may impact performance, so we do\n    # not want this to be the default eventually. Also, we use the\n    # versioned .so libs for executables only if there is the -brtl\n    # linker flag in LDFLAGS as well, or --with-aix-soname=svr4 only.\n    # To allow for filename-based versioning support, we need to create\n    # libNAME.so.V as an archive file, containing:\n    # *) an Import File, referring to the versioned filename of the\n    #    archive as well as the shared archive member, telling the\n    #    bitwidth (32 or 64) of that shared object, and providing the\n    #    list of exported symbols of that shared object, eventually\n    #    decorated with the 'weak' keyword\n    # *) the shared object with the F_LOADONLY flag set, to really avoid\n    #    it being seen by the linker.\n    # At run time we better use the real file rather than another symlink,\n    # but for link time we create the symlink libNAME.so -> libNAME.so.V\n\n    case $with_aix_soname,$aix_use_runtimelinking in\n    # AIX (on Power*) has no versioning support, so currently we cannot hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    aix,yes) # traditional libtool\n      dynamic_linker='AIX unversionable lib.so'\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      ;;\n    aix,no) # traditional AIX only\n      dynamic_linker='AIX lib.a[(]lib.so.V[)]'\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      ;;\n    svr4,*) # full svr4 only\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,yes) # both, prefer svr4\n      dynamic_linker=\"AIX lib.so.V[(]$shared_archive_member_spec.o[)], lib.a[(]lib.so.V[)]\"\n      library_names_spec='$libname$release$shared_ext$major $libname$shared_ext'\n      # unpreferred sharedlib libNAME.a needs extra handling\n      postinstall_cmds='test -n \"$linkname\" || linkname=\"$realname\"~func_stripname \"\" \".so\" \"$linkname\"~$install_shared_prog \"$dir/$func_stripname_result.$libext\" \"$destdir/$func_stripname_result.$libext\"~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib \"$destdir/$func_stripname_result.$libext\"'\n      postuninstall_cmds='for n in $library_names $old_library; do :; done~func_stripname \"\" \".so\" \"$n\"~test \"$func_stripname_result\" = \"$n\" || func_append rmfiles \" $odir/$func_stripname_result.$libext\"'\n      # We do not specify a path in Import Files, so LIBPATH fires.\n      shlibpath_overrides_runpath=yes\n      ;;\n    *,no) # both, prefer aix\n      dynamic_linker=\"AIX lib.a[(]lib.so.V[)], lib.so.V[(]$shared_archive_member_spec.o[)]\"\n      library_names_spec='$libname$release.a $libname.a'\n      soname_spec='$libname$release$shared_ext$major'\n      # unpreferred sharedlib libNAME.so.V and symlink libNAME.so need extra handling\n      postinstall_cmds='test -z \"$dlname\" || $install_shared_prog $dir/$dlname $destdir/$dlname~test -z \"$tstripme\" || test -z \"$striplib\" || $striplib $destdir/$dlname~test -n \"$linkname\" || linkname=$realname~func_stripname \"\" \".a\" \"$linkname\"~(cd \"$destdir\" && $LN_S -f $dlname $func_stripname_result.so)'\n      postuninstall_cmds='test -z \"$dlname\" || func_append rmfiles \" $odir/$dlname\"~for n in $old_library $library_names; do :; done~func_stripname \"\" \".a\" \"$n\"~func_append rmfiles \" $odir/$func_stripname_result.so\"'\n      ;;\n    esac\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='$libname$shared_ext'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo $libname | sed -e 's/^lib/cyg/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo $libname | sed -e 's/^lib/pw/'``echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext'\n    library_names_spec='$libname.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=$LIB\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\$file`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='$libname`echo $release | $SED -e 's/[[.]]/-/g'`$versuffix$shared_ext $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$major$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$major$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n      soname_spec='$libname$release$shared_ext$major'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    if test 32 = \"$HPUX_IA64_MODE\"; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux32\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n      sys_lib_dlsearch_path_spec=/usr/lib/hpux64\n    fi\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test yes = \"$lt_cv_prog_gnu_ld\"; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$release$shared_ext $libname$shared_ext'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib$libsuff /lib$libsuff /usr/local/lib$libsuff\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib$libsuff /lib$libsuff\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\nlinux*android*)\n  version_type=none # Android doesn't support versioned libraries.\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext'\n  soname_spec='$libname$release$shared_ext'\n  finish_cmds=\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  dynamic_linker='Android linker'\n  # Don't embed -rpath directories since the linker doesn't support them.\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Ideally, we could use ldconfig to report *all* directores which are\n  # searched for libraries, however this is still not possible.  Aside from not\n  # being certain /sbin/ldconfig is available, command\n  # 'ldconfig -N -X -v | grep ^/' on 64bit Fedora does not report /usr/lib64,\n  # even though it is searched at run-time.  Try to do the best guess by\n  # appending ld.so.conf contents (and includes) to the search path.\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n    soname_spec='$libname$release$shared_ext$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd* | bitrig*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=/usr/lib\n  need_lib_prefix=no\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    need_version=no\n  else\n    need_version=yes\n  fi\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\nos2*)\n  libname_spec='$name'\n  version_type=windows\n  shrext_cmds=.dll\n  need_version=no\n  need_lib_prefix=no\n  # OS/2 can only load a DLL with a base name of 8 characters or less.\n  soname_spec='`test -n \"$os2dllname\" && libname=\"$os2dllname\";\n    v=$($ECHO $release$versuffix | tr -d .-);\n    n=$($ECHO $libname | cut -b -$((8 - ${#v})) | tr . _);\n    $ECHO $n$v`$shared_ext'\n  library_names_spec='${libname}_dll.$libext'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=BEGINLIBPATH\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  postinstall_cmds='base_file=`basename \\$file`~\n    dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\$base_file'\\''i; $ECHO \\$dlname'\\''`~\n    dldir=$destdir/`dirname \\$dlpath`~\n    test -d \\$dldir || mkdir -p \\$dldir~\n    $install_prog $dir/$dlname \\$dldir/$dlname~\n    chmod a+x \\$dldir/$dlname~\n    if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n      eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n    fi'\n  postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; $ECHO \\$dlname'\\''`~\n    dlpath=$dir/\\$dldll~\n    $RM \\$dlpath'\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='$libname$release$shared_ext$major'\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$shared_ext$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test yes = \"$with_gnu_ld\"; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec; then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname$shared_ext.$versuffix $libname$shared_ext.$major $libname$shared_ext'\n    soname_spec='$libname$shared_ext.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=sco\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test yes = \"$with_gnu_ld\"; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='$libname$release$shared_ext$versuffix $libname$release$shared_ext$major $libname$shared_ext'\n  soname_spec='$libname$release$shared_ext$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest no = \"$dynamic_linker\" && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test yes = \"$GCC\"; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test set = \"${lt_cv_sys_lib_search_path_spec+set}\"; then\n  sys_lib_search_path_spec=$lt_cv_sys_lib_search_path_spec\nfi\n\nif test set = \"${lt_cv_sys_lib_dlsearch_path_spec+set}\"; then\n  sys_lib_dlsearch_path_spec=$lt_cv_sys_lib_dlsearch_path_spec\nfi\n\n# remember unaugmented sys_lib_dlsearch_path content for libtool script decls...\nconfigure_time_dlsearch_path=$sys_lib_dlsearch_path_spec\n\n# ... but it needs LT_SYS_LIBRARY_PATH munging for other configure-time code\nfunc_munge_path_list sys_lib_dlsearch_path_spec \"$LT_SYS_LIBRARY_PATH\"\n\n# to be used as default LT_SYS_LIBRARY_PATH value in generated libtool\nconfigure_time_lt_sys_library_path=$LT_SYS_LIBRARY_PATH\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([sys_lib_dlsearch_path_spec], [configure_time_dlsearch_path], [2],\n    [Detected run-time system search path for libraries])\n_LT_DECL([], [configure_time_lt_sys_library_path], [2],\n    [Explicit LT_SYS_LIBRARY_PATH set during ./configure time])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program that can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=$MAGIC_CMD # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=$MAGIC_CMD\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$1\"; then\n      lt_cv_path_MAGIC_CMD=$ac_dir/\"$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=$lt_cv_path_MAGIC_CMD\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=$lt_save_ifs\n  MAGIC_CMD=$lt_save_MAGIC_CMD\n  ;;\nesac])\nMAGIC_CMD=$lt_cv_path_MAGIC_CMD\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program that can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test no = \"$withval\" || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test yes = \"$GCC\"; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return, which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=$ac_prog\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test yes = \"$with_gnu_ld\"; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=$lt_save_ifs\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=$ac_dir/$ac_prog\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest no != \"$with_gnu_ld\" && break\n\t;;\n      *)\n\ttest yes != \"$with_gnu_ld\" && break\n\t;;\n      esac\n    fi\n  done\n  IFS=$lt_save_ifs\nelse\n  lt_cv_path_LD=$LD # Let the user override the test with a path.\nfi])\nLD=$lt_cv_path_LD\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test yes != \"$GCC\"; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test yes = \"$GCC\"; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib $wl-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_PATH_DD\n# -----------\n# find a working dd\nm4_defun([_LT_PATH_DD],\n[AC_CACHE_CHECK([for a working dd], [ac_cv_path_lt_DD],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\n: ${lt_DD:=$DD}\nAC_PATH_PROGS_FEATURE_CHECK([lt_DD], [dd],\n[if \"$ac_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && ac_cv_path_lt_DD=\"$ac_path_lt_DD\" ac_path_lt_DD_found=:\nfi])\nrm -f conftest.i conftest2.i conftest.out])\n])# _LT_PATH_DD\n\n\n# _LT_CMD_TRUNCATE\n# ----------------\n# find command to truncate a binary pipe\nm4_defun([_LT_CMD_TRUNCATE],\n[m4_require([_LT_PATH_DD])\nAC_CACHE_CHECK([how to truncate binary pipes], [lt_cv_truncate_bin],\n[printf 0123456789abcdef0123456789abcdef >conftest.i\ncat conftest.i conftest.i >conftest2.i\nlt_cv_truncate_bin=\nif \"$ac_cv_path_lt_DD\" bs=32 count=1 <conftest2.i >conftest.out 2>/dev/null; then\n  cmp -s conftest.i conftest.out \\\n  && lt_cv_truncate_bin=\"$ac_cv_path_lt_DD bs=4096 count=1\"\nfi\nrm -f conftest.i conftest2.i conftest.out\ntest -z \"$lt_cv_truncate_bin\" && lt_cv_truncate_bin=\"$SED -e 4q\"])\n_LT_DECL([lt_truncate_bin], [lt_cv_truncate_bin], [1],\n  [Command to truncate a binary pipe])\n])# _LT_CMD_TRUNCATE\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# 'unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# that responds to the $file_magic_cmd with a given extended regex.\n# If you have 'file' or equivalent on your system and you're not sure\n# whether 'pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd* | bitrig*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nos2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=$NM\nelse\n  lt_nm_to_check=${ac_tool_prefix}nm\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=$IFS; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=$lt_save_ifs\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=$ac_dir/$lt_tmp_nm\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\"; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the 'sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\t# MSYS converts /dev/null to NUL, MinGW nm treats NUL as empty\n\tcase $build_os in\n\tmingw*) lt_bad_file=conftest.nm/nofile ;;\n\t*) lt_bad_file=/dev/null ;;\n\tesac\n\tcase `\"$tmp_nm\" -B $lt_bad_file 2>&1 | sed '1q'` in\n\t*$lt_bad_file* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break 2\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break 2\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=$lt_save_ifs\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test no != \"$lt_cv_path_NM\"; then\n  NM=$lt_cv_path_NM\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols -headers /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols -headers\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test : != \"$DUMPBIN\"; then\n    NM=$DUMPBIN\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh;\n  # decide which one to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=$ECHO\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test yes != \"$lt_cv_path_mainfest_tool\"; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# _LT_DLL_DEF_P([FILE])\n# ---------------------\n# True iff FILE is a Windows DLL '.def' file.\n# Keep in sync with func_dll_def_p in the libtool script\nAC_DEFUN([_LT_DLL_DEF_P],\n[dnl\n  test DEF = \"`$SED -n dnl\n    -e '\\''s/^[[\t ]]*//'\\'' dnl Strip leading whitespace\n    -e '\\''/^\\(;.*\\)*$/d'\\'' dnl      Delete empty lines and comments\n    -e '\\''s/^\\(EXPORTS\\|LIBRARY\\)\\([[\t ]].*\\)*$/DEF/p'\\'' dnl\n    -e q dnl                          Only consider the first \"real\" line\n    $1`\" dnl\n])# _LT_DLL_DEF_P\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=-lmw)\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=-lm)\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test yes = \"$GCC\"; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test ia64 = \"$host_cpu\"; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  # Gets list of data symbols to import.\n  lt_cv_sys_global_symbol_to_import=\"sed -n -e 's/^I .* \\(.*\\)$/\\1/p'\"\n  # Adjust the below global symbol transforms to fixup imported variables.\n  lt_cdecl_hook=\" -e 's/^I .* \\(.*\\)$/extern __declspec(dllimport) char \\1;/p'\"\n  lt_c_name_hook=\" -e 's/^I .* \\(.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\"\n  lt_c_name_lib_hook=\"\\\n  -e 's/^I .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) 0},/p'\\\n  -e 's/^I .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) 0},/p'\"\nelse\n  # Disable hooks by default.\n  lt_cv_sys_global_symbol_to_import=\n  lt_cdecl_hook=\n  lt_c_name_hook=\n  lt_c_name_lib_hook=\nfi\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n\"\\\n$lt_cdecl_hook\\\n\" -e 's/^T .* \\(.*\\)$/extern int \\1();/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n\"\\\n$lt_c_name_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\n\n# Transform an extracted symbol line into symbol name with lib prefix and\n# symbol address.\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n\"\\\n$lt_c_name_lib_hook\\\n\" -e 's/^: \\(.*\\) .*$/  {\\\"\\1\\\", (void *) 0},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(lib.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/p'\"\\\n\" -e 's/^$symcode$symcode* .* \\(.*\\)$/  {\\\"lib\\1\\\", (void *) \\&\\1},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function,\n    # D for any global variable and I for any imported variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     /^ *Symbol name *: /{split(\\$ 0,sn,\\\":\\\"); si=substr(sn[2],2)};\"\\\n\"     /^ *Type *: code/{print \\\"T\\\",si,substr(si,length(prfx))};\"\\\n\"     /^ *Type *: data/{print \\\"I\\\",si,substr(si,length(prfx))};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=\\\"D\\\"}; \\$ 0~/\\(\\).*\\|/{f=\\\"T\\\"};\"\\\n\"     {split(\\$ 0,a,/\\||\\r/); split(a[2],s)};\"\\\n\"     s[1]~/^[@?]/{print f,s[1],s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print f,t[1],substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined _WIN32 || defined __CYGWIN__ || defined _WIN32_WCE\n/* DATA imports from DLLs on WIN32 can't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined __osf__\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* .* \\(.*\\)$/  {\\\"\\1\\\", (void *) \\&\\1},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=conftstm.$ac_objext\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest$ac_exeext; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test yes = \"$pipe_works\"; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_import], [lt_cv_sys_global_symbol_to_import], [1],\n    [Transform the output of nm into a list of symbols to manually relocate])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([nm_interface], [lt_cv_nm_interface], [1],\n    [The name lister interface])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test yes = \"$GXX\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test ia64 = \"$host_cpu\"; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    if test ia64 != \"$host_cpu\"; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64, which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test yes = \"$GCC\"; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the '-m68020' flag to GCC prevents building anything better,\n            # like '-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test ia64 = \"$host_cpu\"; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      case $cc_basename in\n      nagfor*)\n        # NAG Fortran compiler\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      esac\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      case $host_os in\n      os2*)\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-static'\n\t;;\n      esac\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='$wl-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64, which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms that do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to GNU nm, but means don't demangle to AIX nm.\n    # Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n    # weak defined symbols like other global defined symbols, whereas\n    # GNU nm marks them as \"W\".\n    # While the 'weak' keyword is ignored in the Export File, we need\n    # it in the Import File for the 'aix-soname' feature, so we have\n    # to replace the \"-B\" option with \"-P\" for AIX nm.\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=$ltdll_cmds\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ' (' and ')$', so one must not match beginning or\n  # end of line.  Example: 'a|bc|.*d.*' will exclude the symbols 'a' and 'bc',\n  # as well as any symbol that contains 'd'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test yes != \"$GCC\"; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd* | bitrig*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test yes = \"$with_gnu_ld\"; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test yes = \"$lt_use_gnu_ld_interface\"; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='$wl'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v | $SED -e 's/([^)]\\+)\\s\\+//' 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test ia64 != \"$host_cpu\"; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file, use it as\n\t# is; otherwise, prepend EXPORTS...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n          cp $export_symbols $output_objdir/$soname.def;\n        else\n          echo EXPORTS > $output_objdir/$soname.def;\n          cat $export_symbols >> $output_objdir/$soname.def;\n        fi~\n        $CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test linux-dietlibc = \"$host_os\"; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test no = \"$tmp_diet\"\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n        nagfor*)                        # NAGFOR 5.3\n          tmp_sharedflag='-Wl,-shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\n        if test yes = \"$supports_anon_versioning\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n            cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n            echo \"local: *; };\" >> $output_objdir/$libname.ver~\n            $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\ttcc*)\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='-rdynamic'\n\t  ;;\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test yes = \"$supports_anon_versioning\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n              cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n              echo \"local: *; };\" >> $output_objdir/$libname.ver~\n              $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 cannot\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test no = \"$_LT_TAGVAR(ld_shlibs, $1)\"; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test yes = \"$GCC\" && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test ia64 = \"$host_cpu\"; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to GNU nm, but means don't demangle to AIX nm.\n\t# Without the \"-l\" option, or with the \"-B\" option, AIX nm treats\n\t# weak defined symbols like other global defined symbols, whereas\n\t# GNU nm marks them as \"W\".\n\t# While the 'weak' keyword is ignored in the Export File, we need\n\t# it in the Import File for the 'aix-soname' feature, so we have\n\t# to replace the \"-B\" option with \"-P\" for AIX nm.\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { if (\\$ 2 == \"W\") { print \\$ 3 \" weak\" } else { print \\$ 3 } } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='`func_echo_all $NM | $SED -e '\\''s/B\\([[^B]]*\\)$/P\\1/'\\''` -PCpgl $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) && ([substr](\\$ 1,1,1) != \".\")) { if ((\\$ 2 == \"W\") || (\\$ 2 == \"V\") || (\\$ 2 == \"Z\")) { print \\$ 1 \" weak\" } else { print \\$ 1 } } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# have runtime linking enabled, and use it for executables.\n\t# For shared libraries, we enable/disable runtime linking\n\t# depending on the kind of the shared library created -\n\t# when \"with_aix_soname,aix_use_runtimelinking\" is:\n\t# \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\t# \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n\t#            lib.a(lib.so.V) shared, rtl:no,  for executables\n\t# \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a(lib.so.V) shared, rtl:no\n\t# \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n\t#            lib.a           static archive\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test x-brtl = \"x$ld_flag\" || test x-Wl,-brtl = \"x$ld_flag\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t    # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t    # so we don't have lib.a shared libs to link our executables.\n\t    # We have to force runtime linking in this case.\n\t    aix_use_runtimelinking=yes\n\t    LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t  fi\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n      case $with_aix_soname,$aix_use_runtimelinking in\n      aix,*) ;; # traditional, no import file\n      svr4,* | *,yes) # use import file\n\t# The Import File defines what to hardcode.\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n\t;;\n      esac\n\n      if test yes = \"$GCC\"; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test yes = \"$aix_use_runtimelinking\"; then\n\t  shared_flag=\"$shared_flag \"'$wl-G'\n\tfi\n\t# Need to ensure runtime linking is disabled for the traditional\n\t# shared library, or the linker may eventually find shared libraries\n\t# /with/ Import File - we do not want to mix them.\n\tshared_flag_aix='-shared'\n\tshared_flag_svr4='-shared $wl-G'\n      else\n\t# not using gcc\n\tif test ia64 = \"$host_cpu\"; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag='$wl-G'\n\t  else\n\t    shared_flag='$wl-bM:SRE'\n\t  fi\n\t  shared_flag_aix='$wl-bM:SRE'\n\t  shared_flag_svr4='$wl-G'\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n      else\n\tif test ia64 = \"$host_cpu\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t  if test yes = \"$with_gnu_ld\"; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t  # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t  compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t  if test svr4 != \"$with_aix_soname\"; then\n\t    # This is similar to how AIX traditionally builds its shared libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t  fi\n\t  if test aix != \"$with_aix_soname\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t  else\n\t    # used by -dlpreopen to get the symbols\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t  fi\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n            cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n            echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n          else\n            $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n          fi~\n          $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n          linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n          lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n          case $lt_outputfile in\n            *.exe|*.EXE) ;;\n            *)\n              lt_outputfile=$lt_outputfile.exe\n              lt_tool_outputfile=$lt_tool_outputfile.exe\n              ;;\n          esac~\n          if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n            $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n            $RM \"$lt_outputfile.manifest\";\n          fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=.dll\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n      ;;\n\n    hpux10*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test yes,no = \"$GCC,$with_gnu_ld\"; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test no = \"$with_gnu_ld\"; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=$LDFLAGS\n\t   LDFLAGS=\"$LDFLAGS -shared $wl-exported_symbol ${wl}foo $wl-update_registry $wl/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=$save_LDFLAGS])\n\tif test yes = \"$lt_cv_irix_exported_symbol\"; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations $wl-exports_file $wl$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    linux*)\n      case $cc_basename in\n      tcc*)\n\t# Fabrice Bellard et al's Tiny C Compiler\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t;;\n      esac\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd* | bitrig*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags $wl-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\telse\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      shrext_cmds=.dll\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\temxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t$ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t$ECHO EXPORTS >> $output_objdir/$libname.def~\n\tprefix_cmds=\"$SED\"~\n\tif test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t  prefix_cmds=\"$prefix_cmds -e 1d\";\n\tfi~\n\tprefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\tcat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t$CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\temximp -o $lib $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    osf3*)\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $pic_flag $libobjs $deplibs $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n          $CC -shared$allow_undefined_flag $wl-input $wl$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test yes = \"$GCC\"; then\n\twlarc='$wl'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $wl-z ${wl}text $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n          $CC -shared $pic_flag $wl-z ${wl}text $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $LD -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='$wl'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n            $CC -G$allow_undefined_flag -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands '-z linker_flag'.  GCC discards it without '$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test yes = \"$GCC\"; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test sequent = \"$host_vendor\"; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We CANNOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test yes = \"$GCC\"; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test sni = \"$host_vendor\"; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test yes,yes = \"$GCC,$enable_shared\"; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME$shared_ext during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting $shlibpath_var if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=$CC\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report what library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test no = \"$can_build_shared\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test yes = \"$enable_shared\" && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test ia64 != \"$host_cpu\"; then\n      case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n      yes,aix,yes) ;;\t\t\t# shared object as lib.so file only\n      yes,svr4,*) ;;\t\t\t# shared object as lib.so archive member only\n      yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n      esac\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test yes = \"$enable_shared\" || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=$lt_save_CC\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test no != \"$CXX\" &&\n    ( (test g++ = \"$CXX\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test g++ != \"$CXX\"))); then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_caught_CXX_error\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test yes = \"$GXX\"; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test yes = \"$GXX\"; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test yes = \"$with_gnu_ld\"; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='$wl'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test ia64 = \"$host_cpu\"; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # have runtime linking enabled, and use it for executables.\n          # For shared libraries, we enable/disable runtime linking\n          # depending on the kind of the shared library created -\n          # when \"with_aix_soname,aix_use_runtimelinking\" is:\n          # \"aix,no\"   lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"aix,yes\"  lib.so          shared, rtl:yes, for executables\n          #            lib.a           static archive\n          # \"both,no\"  lib.so.V(shr.o) shared, rtl:yes\n          #            lib.a(lib.so.V) shared, rtl:no,  for executables\n          # \"both,yes\" lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a(lib.so.V) shared, rtl:no\n          # \"svr4,*\"   lib.so.V(shr.o) shared, rtl:yes, for executables\n          #            lib.a           static archive\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    if test svr4,no = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n\t      # With aix-soname=svr4, we create the lib.so.V shared archives only,\n\t      # so we don't have lib.a shared libs to link our executables.\n\t      # We have to force runtime linking in this case.\n\t      aix_use_runtimelinking=yes\n\t      LDFLAGS=\"$LDFLAGS -Wl,-brtl\"\n\t    fi\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='$wl-f,'\n        case $with_aix_soname,$aix_use_runtimelinking in\n        aix,*) ;;\t# no import file\n        svr4,* | *,yes) # use import file\n          # The Import File defines what to hardcode.\n          _LT_TAGVAR(hardcode_direct, $1)=no\n          _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n          ;;\n        esac\n\n        if test yes = \"$GXX\"; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`$CC -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test yes = \"$aix_use_runtimelinking\"; then\n\t    shared_flag=$shared_flag' $wl-G'\n\t  fi\n\t  # Need to ensure runtime linking is disabled for the traditional\n\t  # shared library, or the linker may eventually find shared libraries\n\t  # /with/ Import File - we do not want to mix them.\n\t  shared_flag_aix='-shared'\n\t  shared_flag_svr4='-shared $wl-G'\n        else\n          # not using gcc\n          if test ia64 = \"$host_cpu\"; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test yes = \"$aix_use_runtimelinking\"; then\n\t      shared_flag='$wl-G'\n\t    else\n\t      shared_flag='$wl-bM:SRE'\n\t    fi\n\t    shared_flag_aix='$wl-bM:SRE'\n\t    shared_flag_svr4='$wl-G'\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n\tif test aix,yes = \"$with_aix_soname,$aix_use_runtimelinking\"; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          # The \"-G\" linker flag allows undefined symbols.\n          _LT_TAGVAR(no_undefined_flag, $1)='-bernotok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs $wl'$no_entry_flag' $compiler_flags `if test -n \"$allow_undefined_flag\"; then func_echo_all \"$wl$allow_undefined_flag\"; else :; fi` $wl'$exp_sym_flag:\\$export_symbols' '$shared_flag\n        else\n          if test ia64 = \"$host_cpu\"; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\$wl$no_entry_flag\"' $compiler_flags $wl$allow_undefined_flag '\"\\$wl$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' $wl-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-berok'\n\t    if test yes = \"$with_gnu_ld\"; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$RM -r $output_objdir/$realname.d~$MKDIR $output_objdir/$realname.d'\n\t    # -brtl affects multiple linker settings, -berok does not and is overridden later\n\t    compiler_flags_filtered='`func_echo_all \"$compiler_flags \" | $SED -e \"s%-brtl\\\\([[, ]]\\\\)%-berok\\\\1%g\"`'\n\t    if test svr4 != \"$with_aix_soname\"; then\n\t      # This is similar to how AIX traditionally builds its shared\n\t      # libraries. Need -bnortl late, we may have -brtl in LDFLAGS.\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_aix' -o $output_objdir/$realname.d/$soname $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$realname.d/$soname'\n\t    fi\n\t    if test aix != \"$with_aix_soname\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$CC '$shared_flag_svr4' -o $output_objdir/$realname.d/$shared_archive_member_spec.o $libobjs $deplibs $wl-bnoentry '$compiler_flags_filtered'$wl-bE:$export_symbols$allow_undefined_flag~$STRIP -e $output_objdir/$realname.d/$shared_archive_member_spec.o~( func_echo_all \"#! $soname($shared_archive_member_spec.o)\"; if test shr_64 = \"$shared_archive_member_spec\"; then func_echo_all \"# 64\"; else func_echo_all \"# 32\"; fi; cat $export_symbols ) > $output_objdir/$realname.d/$shared_archive_member_spec.imp~$AR $AR_FLAGS $output_objdir/$soname $output_objdir/$realname.d/$shared_archive_member_spec.o $output_objdir/$realname.d/$shared_archive_member_spec.imp'\n\t    else\n\t      # used by -dlpreopen to get the symbols\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$MV  $output_objdir/$realname.d/$soname $output_objdir'\n\t    fi\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"$_LT_TAGVAR(archive_expsym_cmds, $1)\"'~$RM -r $output_objdir/$realname.d'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=.dll\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp \"$export_symbols\" \"$output_objdir/$soname.def\";\n              echo \"$tool_output_objdir$soname.def\" > \"$output_objdir/$soname.exp\";\n            else\n              $SED -e '\\''s/^/-link -EXPORT:/'\\'' < $export_symbols > $output_objdir/$soname.exp;\n            fi~\n            $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n            linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n            lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n            case $lt_outputfile in\n              *.exe|*.EXE) ;;\n              *)\n                lt_outputfile=$lt_outputfile.exe\n                lt_tool_outputfile=$lt_tool_outputfile.exe\n                ;;\n            esac~\n            func_to_tool_file \"$lt_outputfile\"~\n            if test : != \"$MANIFEST_TOOL\" && test -f \"$lt_outputfile.manifest\"; then\n              $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n              $RM \"$lt_outputfile.manifest\";\n            fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file, use it as\n\t    # is; otherwise, prepend EXPORTS...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if _LT_DLL_DEF_P([$export_symbols]); then\n              cp $export_symbols $output_objdir/$soname.def;\n            else\n              echo EXPORTS > $output_objdir/$soname.def;\n              cat $export_symbols >> $output_objdir/$soname.def;\n            fi~\n            $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname $wl--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      os2*)\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\tshrext_cmds=.dll\n\t_LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  emxexp $libobjs | $SED /\"_DLL_InitTerm\"/d >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$ECHO \"LIBRARY ${soname%$shared_ext} INITINSTANCE TERMINSTANCE\" > $output_objdir/$libname.def~\n\t  $ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~\n\t  $ECHO \"DATA MULTIPLE NONSHARED\" >> $output_objdir/$libname.def~\n\t  $ECHO EXPORTS >> $output_objdir/$libname.def~\n\t  prefix_cmds=\"$SED\"~\n\t  if test EXPORTS = \"`$SED 1q $export_symbols`\"; then\n\t    prefix_cmds=\"$prefix_cmds -e 1d\";\n\t  fi~\n\t  prefix_cmds=\"$prefix_cmds -e \\\"s/^\\(.*\\)$/_\\1/g\\\"\"~\n\t  cat $export_symbols | $prefix_cmds >> $output_objdir/$libname.def~\n\t  $CC -Zdll -Zcrtdll -o $output_objdir/$soname $libobjs $deplibs $compiler_flags $output_objdir/$libname.def~\n\t  emximp -o $lib $output_objdir/$libname.def'\n\t_LT_TAGVAR(old_archive_From_new_cmds, $1)='emximp -o $output_objdir/${libname}_dll.a $output_objdir/$libname.def'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test yes = \"$GXX\"; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag $wl+b $wl$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test \"x$output_objdir/$soname\" = \"x$lib\" || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test no = \"$with_gnu_ld\"; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl+b $wl$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC $wl+h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag $wl+h $wl$soname $wl+b $wl$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s|^|_|\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags $wl-h,$soname $wl--retain-symbols-file,$output_objdir/$soname.expsym $wl--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test yes = \"$GXX\"; then\n\t      if test no = \"$with_gnu_ld\"; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib $wl-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive$convenience $wl--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n               rm -rf $tpldir~\n               $CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n               compile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n                $AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n                $RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n                rm -rf $tpldir~\n                $CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n                $CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname $wl-retain-symbols-file $wl$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl--rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname  -o $lib $wl-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname -o $lib'\n\t    if test yes = \"$supports_anon_versioning\"; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n                cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n                echo \"local: *; };\" >> $output_objdir/$libname.ver~\n                $CC -qmkshrobj $libobjs $deplibs $compiler_flags $wl-soname $wl$soname $wl-version-script $wl$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file $wl$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` $wl--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd* | bitrig*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=$wlarc'--whole-archive$convenience '$wlarc'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\$tempext\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n                  echo \"-hidden\">> $lib.exp~\n                  $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname $wl-input $wl$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry $output_objdir/so_locations -o $lib~\n                  $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list= ; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' $wl-expect_unresolved $wl\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-msym $wl-soname $wl$soname `test -n \"$verstring\" && func_echo_all \"$wl-set_version $wl$verstring\"` $wl-update_registry $wl$output_objdir/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-rpath $wl$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G$allow_undefined_flag -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n              $CC -G$allow_undefined_flag $wl-M $wl$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands '-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test yes,no = \"$GXX,$with_gnu_ld\"; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' $wl-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -shared $pic_flag -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require '-G' NOT '-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags $wl-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n                  $CC -G -nostdlib $wl-M $wl$lib.exp $wl-h $wl$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$wl-z ${wl}allextract$convenience $wl-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We CANNOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='$wl-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='$wl-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='$wl-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='$wl-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n              '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n              '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $wl-Bexport:$export_symbols $wl-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test no = \"$_LT_TAGVAR(ld_shlibs, $1)\" && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=$GXX\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test yes != \"$_lt_caught_CXX_error\"\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case @S|@2 in\n  .*) func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%\\\\\\\\@S|@2\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"@S|@3\" | $SED \"s%^@S|@1%%; s%@S|@2\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $prev$p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test x-L = \"$p\" ||\n          test x-R = \"$p\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test no = \"$pre_test_object_deps_done\"; then\n\t case $prev in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=$prev$p\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} $prev$p\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=$prev$p\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} $prev$p\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test no = \"$pre_test_object_deps_done\"; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=$p\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | $SED -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test no = \"$F77\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_F77\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$G77\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_F77\"\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test no = \"$FC\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test yes != \"$_lt_disable_FC\"; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test no = \"$can_build_shared\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test yes = \"$enable_shared\" && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test ia64 != \"$host_cpu\"; then\n\t  case $enable_shared,$with_aix_soname,$aix_use_runtimelinking in\n\t  yes,aix,yes) ;;\t\t# shared object as lib.so file only\n\t  yes,svr4,*) ;;\t\t# shared object as lib.so archive member only\n\t  yes,*) enable_static=no ;;\t# shared object in lib.a archive as well\n\t  esac\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test yes = \"$enable_shared\" || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=$ac_cv_fc_compiler_gnu\n    _LT_TAGVAR(LD, $1)=$LD\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test yes != \"$_lt_disable_FC\"\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=$LD\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to 'libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=$lt_simple_compile_test_code\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test set = \"${GCJFLAGS+set}\" || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f \"$lt_ac_sed\" && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test 10 -lt \"$lt_ac_count\" && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test \"$lt_ac_count\" -gt \"$lt_ac_max\"; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[if ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine what file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/extra/icu/source/common/putilimp.h": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n******************************************************************************\n*\n*   Copyright (C) 1997-2016, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*\n******************************************************************************\n*\n*  FILE NAME : putilimp.h\n*\n*   Date        Name        Description\n*   10/17/04    grhoten     Move internal functions from putil.h to this file.\n******************************************************************************\n*/\n\n#ifndef PUTILIMP_H\n#define PUTILIMP_H\n\n#include \"unicode/utypes.h\"\n#include \"unicode/putil.h\"\n\n/**\n * \\def U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC\n * Nearly all CPUs and compilers implement a right-shift of a signed integer\n * as an Arithmetic Shift Right which copies the sign bit (the Most Significant Bit (MSB))\n * into the vacated bits (sign extension).\n * For example, (int32_t)0xfff5fff3>>4 becomes 0xffff5fff and -1>>1=-1.\n *\n * This can be useful for storing a signed value in the upper bits\n * and another bit field in the lower bits.\n * The signed value can be retrieved by simple right-shifting.\n *\n * This is consistent with the Java language.\n *\n * However, the C standard allows compilers to implement a right-shift of a signed integer\n * as a Logical Shift Right which copies a 0 into the vacated bits.\n * For example, (int32_t)0xfff5fff3>>4 becomes 0x0fff5fff and -1>>1=0x7fffffff.\n *\n * Code that depends on the natural behavior should be guarded with this macro,\n * with an alternate path for unusual platforms.\n * @internal\n */\n#ifdef U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC\n    /* Use the predefined value. */\n#else\n    /*\n     * Nearly all CPUs & compilers implement a right-shift of a signed integer\n     * as an Arithmetic Shift Right (with sign extension).\n     */\n#   define U_SIGNED_RIGHT_SHIFT_IS_ARITHMETIC 1\n#endif\n\n/** Define this to 1 if your platform supports IEEE 754 floating point,\n   to 0 if it does not. */\n#ifndef IEEE_754\n#   define IEEE_754 1\n#endif\n\n/**\n * uintptr_t is an optional part of the standard definitions in stdint.h.\n * The opengroup.org documentation for stdint.h says\n * \"On XSI-conformant systems, the intptr_t and uintptr_t types are required;\n * otherwise, they are optional.\"\n * We assume that when uintptr_t is defined, UINTPTR_MAX is defined as well.\n *\n * Do not use ptrdiff_t since it is signed. size_t is unsigned.\n */\n/* TODO: This check fails on some z environments. Filed a ticket #9357 for this. */\n#if !defined(__intptr_t_defined) && !defined(UINTPTR_MAX) && (U_PLATFORM != U_PF_OS390)\ntypedef size_t uintptr_t;\n#endif\n\n/**\n * \\def U_HAVE_MSVC_2003_OR_EARLIER\n * Flag for workaround of MSVC 2003 optimization bugs\n * @internal\n */\n#if !defined(U_HAVE_MSVC_2003_OR_EARLIER) && defined(_MSC_VER) && (_MSC_VER < 1400)\n#define U_HAVE_MSVC_2003_OR_EARLIER\n#endif\n\n/*===========================================================================*/\n/** @{ Information about POSIX support                                       */\n/*===========================================================================*/\n\n#ifdef U_HAVE_NL_LANGINFO_CODESET\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API || U_PLATFORM == U_PF_ANDROID || U_PLATFORM == U_PF_QNX\n#   define U_HAVE_NL_LANGINFO_CODESET 0\n#else\n#   define U_HAVE_NL_LANGINFO_CODESET 1\n#endif\n\n#ifdef U_NL_LANGINFO_CODESET\n    /* Use the predefined value. */\n#elif !U_HAVE_NL_LANGINFO_CODESET\n#   define U_NL_LANGINFO_CODESET -1\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#else\n#   define U_NL_LANGINFO_CODESET CODESET\n#endif\n\n#ifdef U_TZSET\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n    // UWP doesn't support tzset or environment variables for tz\n#if U_PLATFORM_HAS_WINUWP_API == 0\n#   define U_TZSET _tzset\n#endif\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#else\n#   define U_TZSET tzset\n#endif\n\n#if defined(U_TIMEZONE) || defined(U_HAVE_TIMEZONE)\n    /* Use the predefined value. */\n#elif U_PLATFORM == U_PF_ANDROID\n#   define U_TIMEZONE timezone\n#elif U_PLATFORM_IS_LINUX_BASED\n#   if defined(__UCLIBC__)\n       /* uClibc does not have __timezone or _timezone. */\n#   elif defined(_NEWLIB_VERSION)\n#      define U_TIMEZONE      _timezone\n#   elif defined(__GLIBC__)\n       /* glibc */\n#      define U_TIMEZONE      __timezone\n#   endif\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_TIMEZONE _timezone\n#elif U_PLATFORM == U_PF_BSD && !defined(__NetBSD__)\n   /* not defined */\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#elif U_PLATFORM == U_PF_IPHONE\n   /* not defined */\n#else\n#   define U_TIMEZONE timezone\n#endif\n\n#ifdef U_TZNAME\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n    /* not usable on all windows platforms */\n#if U_PLATFORM_HAS_WINUWP_API == 0\n#   define U_TZNAME _tzname\n#endif\n#elif U_PLATFORM == U_PF_OS400\n   /* not defined */\n#else\n#   define U_TZNAME tzname\n#endif\n\n#ifdef U_HAVE_MMAP\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_HAVE_MMAP 0\n#else\n#   define U_HAVE_MMAP 1\n#endif\n\n#ifdef U_HAVE_POPEN\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_HAVE_POPEN 0\n#elif U_PLATFORM == U_PF_OS400\n#   define U_HAVE_POPEN 0\n#else\n#   define U_HAVE_POPEN 1\n#endif\n\n/**\n * \\def U_HAVE_DIRENT_H\n * Defines whether dirent.h is available.\n * @internal\n */\n#ifdef U_HAVE_DIRENT_H\n    /* Use the predefined value. */\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#   define U_HAVE_DIRENT_H 0\n#else\n#   define U_HAVE_DIRENT_H 1\n#endif\n\n/** @} */\n\n/*===========================================================================*/\n/** @{ GCC built in functions for atomic memory operations                   */\n/*===========================================================================*/\n\n/**\n * \\def U_HAVE_GCC_ATOMICS\n * @internal\n */\n#ifdef U_HAVE_GCC_ATOMICS\n    /* Use the predefined value. */\n#elif U_PLATFORM == U_PF_MINGW\n    #define U_HAVE_GCC_ATOMICS 0\n#elif U_GCC_MAJOR_MINOR >= 404 || defined(__clang__)\n    /* TODO: Intel icc and IBM xlc on AIX also support gcc atomics.  (Intel originated them.)\n     *       Add them for these compilers.\n     * Note: Clang sets __GNUC__ defines for version 4.2, so misses the 4.4 test here.\n     */\n#   define U_HAVE_GCC_ATOMICS 1\n#else\n#   define U_HAVE_GCC_ATOMICS 0\n#endif\n\n/** @} */\n\n/**\n * \\def U_HAVE_STD_ATOMICS\n * Defines whether the standard C++11 <atomic> is available.\n * ICU will use this when avialable,\n * otherwise will fall back to compiler or platform specific alternatives.\n * @internal\n */\n#ifdef U_HAVE_STD_ATOMICS\n    /* Use the predefined value. */\n#elif U_CPLUSPLUS_VERSION < 11\n    /* Not C++11, disable use of atomics */\n#   define U_HAVE_STD_ATOMICS 0\n#elif __clang__ && __clang_major__==3 && __clang_minor__<=1\n    /* Clang 3.1, has atomic variable initializer bug. */\n#   define U_HAVE_STD_ATOMICS 0\n#else \n    /* U_HAVE_ATOMIC is typically set by an autoconf test of #include <atomic>  */\n    /*   Can be set manually, or left undefined, on platforms without autoconf. */\n#   if defined(U_HAVE_ATOMIC) &&  U_HAVE_ATOMIC \n#      define U_HAVE_STD_ATOMICS 1\n#   else\n#      define U_HAVE_STD_ATOMICS 0\n#   endif\n#endif\n\n\n/**\n *  \\def U_HAVE_CLANG_ATOMICS\n *  Defines whether Clang c11 style built-in atomics are avaialable.\n *  These are used in preference to gcc atomics when both are available.\n */\n#ifdef U_HAVE_CLANG_ATOMICS\n    /* Use the predefined value. */\n#elif __has_builtin(__c11_atomic_load) && \\\n    __has_builtin(__c11_atomic_store) && \\\n    __has_builtin(__c11_atomic_fetch_add) && \\\n    __has_builtin(__c11_atomic_fetch_sub)\n#    define U_HAVE_CLANG_ATOMICS 1\n#else\n#    define U_HAVE_CLANG_ATOMICS 0\n#endif\n\n/*===========================================================================*/\n/** @{ Programs used by ICU code                                             */\n/*===========================================================================*/\n\n/**\n * \\def U_MAKE_IS_NMAKE\n * Defines whether the \"make\" program is Windows nmake.\n */\n#ifdef U_MAKE_IS_NMAKE\n    /* Use the predefined value. */\n#elif U_PLATFORM == U_PF_WINDOWS\n#   define U_MAKE_IS_NMAKE 1\n#else\n#   define U_MAKE_IS_NMAKE 0\n#endif\n\n/** @} */\n\n/*==========================================================================*/\n/* Platform utilities                                                       */\n/*==========================================================================*/\n\n/**\n * Platform utilities isolates the platform dependencies of the\n * libarary.  For each platform which this code is ported to, these\n * functions may have to be re-implemented.\n */\n\n/**\n * Floating point utility to determine if a double is Not a Number (NaN).\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isNaN(double d);\n/**\n * Floating point utility to determine if a double has an infinite value.\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isInfinite(double d);\n/**\n * Floating point utility to determine if a double has a positive infinite value.\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isPositiveInfinity(double d);\n/**\n * Floating point utility to determine if a double has a negative infinite value.\n * @internal\n */\nU_INTERNAL UBool   U_EXPORT2 uprv_isNegativeInfinity(double d);\n/**\n * Floating point utility that returns a Not a Number (NaN) value.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_getNaN(void);\n/**\n * Floating point utility that returns an infinite value.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_getInfinity(void);\n\n/**\n * Floating point utility to truncate a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_trunc(double d);\n/**\n * Floating point utility to calculate the floor of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_floor(double d);\n/**\n * Floating point utility to calculate the ceiling of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_ceil(double d);\n/**\n * Floating point utility to calculate the absolute value of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fabs(double d);\n/**\n * Floating point utility to calculate the fractional and integer parts of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_modf(double d, double* pinteger);\n/**\n * Floating point utility to calculate the remainder of a double divided by another double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fmod(double d, double y);\n/**\n * Floating point utility to calculate d to the power of exponent (d^exponent).\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_pow(double d, double exponent);\n/**\n * Floating point utility to calculate 10 to the power of exponent (10^exponent).\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_pow10(int32_t exponent);\n/**\n * Floating point utility to calculate the maximum value of two doubles.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fmax(double d, double y);\n/**\n * Floating point utility to calculate the minimum value of two doubles.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_fmin(double d, double y);\n/**\n * Private utility to calculate the maximum value of two integers.\n * @internal\n */\nU_INTERNAL int32_t U_EXPORT2 uprv_max(int32_t d, int32_t y);\n/**\n * Private utility to calculate the minimum value of two integers.\n * @internal\n */\nU_INTERNAL int32_t U_EXPORT2 uprv_min(int32_t d, int32_t y);\n\n#if U_IS_BIG_ENDIAN\n#   define uprv_isNegative(number) (*((signed char *)&(number))<0)\n#else\n#   define uprv_isNegative(number) (*((signed char *)&(number)+sizeof(number)-1)<0)\n#endif\n\n/**\n * Return the largest positive number that can be represented by an integer\n * type of arbitrary bit length.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_maxMantissa(void);\n\n/**\n * Floating point utility to calculate the logarithm of a double.\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_log(double d);\n\n/**\n * Does common notion of rounding e.g. uprv_floor(x + 0.5);\n * @param x the double number\n * @return the rounded double\n * @internal\n */\nU_INTERNAL double  U_EXPORT2 uprv_round(double x);\n\n#if 0\n/**\n * Returns the number of digits after the decimal point in a double number x.\n *\n * @param x the double number\n * @return the number of digits after the decimal point in a double number x.\n * @internal\n */\n/*U_INTERNAL int32_t  U_EXPORT2 uprv_digitsAfterDecimal(double x);*/\n#endif\n\n#if !U_CHARSET_IS_UTF8\n/**\n * Please use ucnv_getDefaultName() instead.\n * Return the default codepage for this platform and locale.\n * This function can call setlocale() on Unix platforms. Please read the\n * platform documentation on setlocale() before calling this function.\n * @return the default codepage for this platform \n * @internal\n */\nU_INTERNAL const char*  U_EXPORT2 uprv_getDefaultCodepage(void);\n#endif\n\n/**\n * Please use uloc_getDefault() instead.\n * Return the default locale ID string by querying ths system, or\n *     zero if one cannot be found. \n * This function can call setlocale() on Unix platforms. Please read the\n * platform documentation on setlocale() before calling this function.\n * @return the default locale ID string\n * @internal\n */\nU_INTERNAL const char*  U_EXPORT2 uprv_getDefaultLocaleID(void);\n\n/**\n * Time zone utilities\n *\n * Wrappers for C runtime library functions relating to timezones.\n * The t_tzset() function (similar to tzset) uses the current setting\n * of the environment variable TZ to assign values to three global\n * variables: daylight, timezone, and tzname. These variables have the\n * following meanings, and are declared in &lt;time.h&gt;.\n *\n *   daylight   Nonzero if daylight-saving-time zone (DST) is specified\n *              in TZ; otherwise, 0. Default value is 1.\n *   timezone   Difference in seconds between coordinated universal\n *              time and local time. E.g., -28,800 for PST (GMT-8hrs)\n *   tzname(0)  Three-letter time-zone name derived from TZ environment\n *              variable. E.g., \"PST\".\n *   tzname(1)  Three-letter DST zone name derived from TZ environment\n *              variable.  E.g., \"PDT\". If DST zone is omitted from TZ,\n *              tzname(1) is an empty string.\n *\n * Notes: For example, to set the TZ environment variable to correspond\n * to the current time zone in Germany, you can use one of the\n * following statements:\n *\n *   set TZ=GST1GDT\n *   set TZ=GST+1GDT\n *\n * If the TZ value is not set, t_tzset() attempts to use the time zone\n * information specified by the operating system. Under Windows NT\n * and Windows 95, this information is specified in the Control Panel's\n * Date/Time application.\n * @internal\n */\nU_INTERNAL void     U_EXPORT2 uprv_tzset(void);\n\n/**\n * Difference in seconds between coordinated universal\n * time and local time. E.g., -28,800 for PST (GMT-8hrs)\n * @return the difference in seconds between coordinated universal time and local time.\n * @internal\n */\nU_INTERNAL int32_t  U_EXPORT2 uprv_timezone(void);\n\n/**\n *   tzname(0)  Three-letter time-zone name derived from TZ environment\n *              variable. E.g., \"PST\".\n *   tzname(1)  Three-letter DST zone name derived from TZ environment\n *              variable.  E.g., \"PDT\". If DST zone is omitted from TZ,\n *              tzname(1) is an empty string.\n * @internal\n */\nU_INTERNAL const char* U_EXPORT2 uprv_tzname(int n);\n\n/**\n * Reset the global tzname cache.\n * @internal\n */\nU_INTERNAL void uprv_tzname_clear_cache();\n\n/**\n * Get UTC (GMT) time measured in milliseconds since 0:00 on 1/1/1970.\n * This function is affected by 'faketime' and should be the bottleneck for all user-visible ICU time functions.\n * @return the UTC time measured in milliseconds\n * @internal\n */\nU_INTERNAL UDate U_EXPORT2 uprv_getUTCtime(void);\n\n/**\n * Get UTC (GMT) time measured in milliseconds since 0:00 on 1/1/1970.\n * This function is not affected by 'faketime', so it should only be used by low level test functions- not by anything that\n * exposes time to the end user.\n * @return the UTC time measured in milliseconds\n * @internal\n */\nU_INTERNAL UDate U_EXPORT2 uprv_getRawUTCtime(void);\n\n/**\n * Determine whether a pathname is absolute or not, as defined by the platform.\n * @param path Pathname to test\n * @return TRUE if the path is absolute\n * @internal (ICU 3.0)\n */\nU_INTERNAL UBool U_EXPORT2 uprv_pathIsAbsolute(const char *path);\n\n/**\n * Use U_MAX_PTR instead of this function.\n * @param void pointer to test\n * @return the largest possible pointer greater than the base\n * @internal (ICU 3.8)\n */\nU_INTERNAL void * U_EXPORT2 uprv_maximumPtr(void *base);\n\n/**\n * Maximum value of a (void*) - use to indicate the limit of an 'infinite' buffer.\n * In fact, buffer sizes must not exceed 2GB so that the difference between\n * the buffer limit and the buffer start can be expressed in an int32_t.\n *\n * The definition of U_MAX_PTR must fulfill the following conditions:\n * - return the largest possible pointer greater than base\n * - return a valid pointer according to the machine architecture (AS/400, 64-bit, etc.)\n * - avoid wrapping around at high addresses\n * - make sure that the returned pointer is not farther from base than 0x7fffffff bytes\n *\n * @param base The beginning of a buffer to find the maximum offset from\n * @internal\n */\n#ifndef U_MAX_PTR\n#  if U_PLATFORM == U_PF_OS390 && !defined(_LP64)\n    /* We have 31-bit pointers. */\n#    define U_MAX_PTR(base) ((void *)0x7fffffff)\n#  elif U_PLATFORM == U_PF_OS400\n#    define U_MAX_PTR(base) uprv_maximumPtr((void *)base)\n#  elif 0\n    /*\n     * For platforms where pointers are scalar values (which is normal, but unlike i5/OS)\n     * but that do not define uintptr_t.\n     *\n     * However, this does not work on modern compilers:\n     * The C++ standard does not define pointer overflow, and allows compilers to\n     * assume that p+u>p for any pointer p and any integer u>0.\n     * Thus, modern compilers optimize away the \">\" comparison.\n     * (See ICU tickets #7187 and #8096.)\n     */\n#    define U_MAX_PTR(base) \\\n    ((void *)(((char *)(base)+0x7fffffffu) > (char *)(base) \\\n        ? ((char *)(base)+0x7fffffffu) \\\n        : (char *)-1))\n#  else\n    /* Default version. C++ standard compliant for scalar pointers. */\n#    define U_MAX_PTR(base) \\\n    ((void *)(((uintptr_t)(base)+0x7fffffffu) > (uintptr_t)(base) \\\n        ? ((uintptr_t)(base)+0x7fffffffu) \\\n        : (uintptr_t)-1))\n#  endif\n#endif\n\n/*  Dynamic Library Functions */\n\ntypedef void (UVoidFunction)(void);\n\n#if U_ENABLE_DYLOAD\n/**\n * Load a library\n * @internal (ICU 4.4)\n */\nU_INTERNAL void * U_EXPORT2 uprv_dl_open(const char *libName, UErrorCode *status);\n\n/**\n * Close a library\n * @internal (ICU 4.4)\n */\nU_INTERNAL void U_EXPORT2 uprv_dl_close( void *lib, UErrorCode *status);\n\n/**\n * Extract a symbol from a library (function)\n * @internal (ICU 4.8)\n */\nU_INTERNAL UVoidFunction* U_EXPORT2 uprv_dlsym_func( void *lib, const char *symbolName, UErrorCode *status);\n\n/**\n * Extract a symbol from a library (function)\n * Not implemented, no clients.\n * @internal\n */\n/* U_INTERNAL void * U_EXPORT2 uprv_dlsym_data( void *lib, const char *symbolName, UErrorCode *status); */\n\n#endif\n\n/**\n * Define malloc and related functions\n * @internal\n */\n#if U_PLATFORM == U_PF_OS400\n# define uprv_default_malloc(x) _C_TS_malloc(x)\n# define uprv_default_realloc(x,y) _C_TS_realloc(x,y)\n# define uprv_default_free(x) _C_TS_free(x)\n/* also _C_TS_calloc(x) */\n#else\n/* C defaults */\n# define uprv_default_malloc(x) malloc(x)\n# define uprv_default_realloc(x,y) realloc(x,y)\n# define uprv_default_free(x) free(x)\n#endif\n\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/extra/icu/source/common/putil.cpp": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n******************************************************************************\n*\n*   Copyright (C) 1997-2016, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*\n******************************************************************************\n*\n*  FILE NAME : putil.c (previously putil.cpp and ptypes.cpp)\n*\n*   Date        Name        Description\n*   04/14/97    aliu        Creation.\n*   04/24/97    aliu        Added getDefaultDataDirectory() and\n*                            getDefaultLocaleID().\n*   04/28/97    aliu        Rewritten to assume Unix and apply general methods\n*                            for assumed case.  Non-UNIX platforms must be\n*                            special-cased.  Rewrote numeric methods dealing\n*                            with NaN and Infinity to be platform independent\n*                             over all IEEE 754 platforms.\n*   05/13/97    aliu        Restored sign of timezone\n*                            (semantics are hours West of GMT)\n*   06/16/98    erm         Added IEEE_754 stuff, cleaned up isInfinite, isNan,\n*                             nextDouble..\n*   07/22/98    stephen     Added remainder, max, min, trunc\n*   08/13/98    stephen     Added isNegativeInfinity, isPositiveInfinity\n*   08/24/98    stephen     Added longBitsFromDouble\n*   09/08/98    stephen     Minor changes for Mac Port\n*   03/02/99    stephen     Removed openFile().  Added AS400 support.\n*                            Fixed EBCDIC tables\n*   04/15/99    stephen     Converted to C.\n*   06/28/99    stephen     Removed mutex locking in u_isBigEndian().\n*   08/04/99    jeffrey R.  Added OS/2 changes\n*   11/15/99    helena      Integrated S/390 IEEE support.\n*   04/26/01    Barry N.    OS/400 support for uprv_getDefaultLocaleID\n*   08/15/01    Steven H.   OS/400 support for uprv_getDefaultCodepage\n*   01/03/08    Steven L.   Fake Time Support\n******************************************************************************\n*/\n\n// Defines _XOPEN_SOURCE for access to POSIX functions.\n// Must be before any other #includes.\n#include \"uposixdefs.h\"\n\n// First, the platform type. Need this for U_PLATFORM.\n#include \"unicode/platform.h\"\n\n#if U_PLATFORM == U_PF_MINGW && defined __STRICT_ANSI__\n/* tzset isn't defined in strict ANSI on MinGW. */\n#undef __STRICT_ANSI__\n#endif\n\n/*\n * Cygwin with GCC requires inclusion of time.h after the above disabling strict asci mode statement.\n */\n#include <time.h>\n\n#if !U_PLATFORM_USES_ONLY_WIN32_API\n#include <sys/time.h>\n#endif\n\n/* include the rest of the ICU headers */\n#include \"unicode/putil.h\"\n#include \"unicode/ustring.h\"\n#include \"putilimp.h\"\n#include \"uassert.h\"\n#include \"umutex.h\"\n#include \"cmemory.h\"\n#include \"cstring.h\"\n#include \"locmap.h\"\n#include \"ucln_cmn.h\"\n#include \"charstr.h\"\n\n/* Include standard headers. */\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <math.h>\n#include <locale.h>\n#include <float.h>\n\n#ifndef U_COMMON_IMPLEMENTATION\n#error U_COMMON_IMPLEMENTATION not set - must be set for all ICU source files in common/ - see http://userguide.icu-project.org/howtouseicu\n#endif\n\n\n/* include system headers */\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    /*\n     * TODO: U_PLATFORM_USES_ONLY_WIN32_API includes MinGW.\n     * Should Cygwin be included as well (U_PLATFORM_HAS_WIN32_API)\n     * to use native APIs as much as possible?\n     */\n#ifndef WIN32_LEAN_AND_MEAN\n#   define WIN32_LEAN_AND_MEAN\n#endif\n#   define VC_EXTRALEAN\n#   define NOUSER\n#   define NOSERVICE\n#   define NOIME\n#   define NOMCX\n#   include <windows.h>\n#   include \"unicode\\uloc.h\"\n#if U_PLATFORM_HAS_WINUWP_API == 0\n#   include \"wintz.h\"\n#else // U_PLATFORM_HAS_WINUWP_API\ntypedef PVOID LPMSG; // TODO: figure out how to get rid of this typedef\n#include <Windows.Globalization.h>\n#include <windows.system.userprofile.h>\n#include <wrl\\wrappers\\corewrappers.h>\n#include <wrl\\client.h>\n\nusing namespace ABI::Windows::Foundation;\nusing namespace Microsoft::WRL;\nusing namespace Microsoft::WRL::Wrappers;\n#endif\n#elif U_PLATFORM == U_PF_OS400\n#   include <float.h>\n#   include <qusec.h>       /* error code structure */\n#   include <qusrjobi.h>\n#   include <qliept.h>      /* EPT_CALL macro  - this include must be after all other \"QSYSINCs\" */\n#   include <mih/testptr.h> /* For uprv_maximumPtr */\n#elif U_PLATFORM == U_PF_OS390\n#   include \"unicode/ucnv.h\"   /* Needed for UCNV_SWAP_LFNL_OPTION_STRING */\n#elif U_PLATFORM_IS_DARWIN_BASED || U_PLATFORM_IS_LINUX_BASED || U_PLATFORM == U_PF_BSD || U_PLATFORM == U_PF_SOLARIS\n#   include <limits.h>\n#   include <unistd.h>\n#   if U_PLATFORM == U_PF_SOLARIS\n#       ifndef _XPG4_2\n#           define _XPG4_2\n#       endif\n#   endif\n#elif U_PLATFORM == U_PF_QNX\n#   include <sys/neutrino.h>\n#endif\n\n/*\n * Only include langinfo.h if we have a way to get the codeset. If we later\n * depend on more feature, we can test on U_HAVE_NL_LANGINFO.\n *\n */\n\n#if U_HAVE_NL_LANGINFO_CODESET\n#include <langinfo.h>\n#endif\n\n/**\n * Simple things (presence of functions, etc) should just go in configure.in and be added to\n * icucfg.h via autoheader.\n */\n#if U_PLATFORM_IMPLEMENTS_POSIX\n#   if U_PLATFORM == U_PF_OS400\n#    define HAVE_DLFCN_H 0\n#    define HAVE_DLOPEN 0\n#   else\n#   ifndef HAVE_DLFCN_H\n#    define HAVE_DLFCN_H 1\n#   endif\n#   ifndef HAVE_DLOPEN\n#    define HAVE_DLOPEN 1\n#   endif\n#   endif\n#   ifndef HAVE_GETTIMEOFDAY\n#    define HAVE_GETTIMEOFDAY 1\n#   endif\n#else\n#   define HAVE_DLFCN_H 0\n#   define HAVE_DLOPEN 0\n#   define HAVE_GETTIMEOFDAY 0\n#endif\n\nU_NAMESPACE_USE\n\n/* Define the extension for data files, again... */\n#define DATA_TYPE \"dat\"\n\n/* Leave this copyright notice here! */\nstatic const char copyright[] = U_COPYRIGHT_STRING;\n\n/* floating point implementations ------------------------------------------- */\n\n/* We return QNAN rather than SNAN*/\n#define SIGN 0x80000000U\n\n/* Make it easy to define certain types of constants */\ntypedef union {\n    int64_t i64; /* This must be defined first in order to allow the initialization to work. This is a C89 feature. */\n    double d64;\n} BitPatternConversion;\nstatic const BitPatternConversion gNan = { (int64_t) INT64_C(0x7FF8000000000000) };\nstatic const BitPatternConversion gInf = { (int64_t) INT64_C(0x7FF0000000000000) };\n\n/*---------------------------------------------------------------------------\n  Platform utilities\n  Our general strategy is to assume we're on a POSIX platform.  Platforms which\n  are non-POSIX must declare themselves so.  The default POSIX implementation\n  will sometimes work for non-POSIX platforms as well (e.g., the NaN-related\n  functions).\n  ---------------------------------------------------------------------------*/\n\n#if U_PLATFORM_USES_ONLY_WIN32_API || U_PLATFORM == U_PF_OS400\n#   undef U_POSIX_LOCALE\n#else\n#   define U_POSIX_LOCALE    1\n#endif\n\n/*\n    WARNING! u_topNBytesOfDouble and u_bottomNBytesOfDouble\n    can't be properly optimized by the gcc compiler sometimes (i.e. gcc 3.2).\n*/\n#if !IEEE_754\nstatic char*\nu_topNBytesOfDouble(double* d, int n)\n{\n#if U_IS_BIG_ENDIAN\n    return (char*)d;\n#else\n    return (char*)(d + 1) - n;\n#endif\n}\n\nstatic char*\nu_bottomNBytesOfDouble(double* d, int n)\n{\n#if U_IS_BIG_ENDIAN\n    return (char*)(d + 1) - n;\n#else\n    return (char*)d;\n#endif\n}\n#endif   /* !IEEE_754 */\n\n#if IEEE_754\nstatic UBool\nu_signBit(double d) {\n    uint8_t hiByte;\n#if U_IS_BIG_ENDIAN\n    hiByte = *(uint8_t *)&d;\n#else\n    hiByte = *(((uint8_t *)&d) + sizeof(double) - 1);\n#endif\n    return (hiByte & 0x80) != 0;\n}\n#endif\n\n\n\n#if defined (U_DEBUG_FAKETIME)\n/* Override the clock to test things without having to move the system clock.\n * Assumes POSIX gettimeofday() will function\n */\nUDate fakeClock_t0 = 0; /** Time to start the clock from **/\nUDate fakeClock_dt = 0; /** Offset (fake time - real time) **/\nUBool fakeClock_set = FALSE; /** True if fake clock has spun up **/\nstatic UMutex fakeClockMutex = U_MUTEX_INTIALIZER;\n\nstatic UDate getUTCtime_real() {\n    struct timeval posixTime;\n    gettimeofday(&posixTime, NULL);\n    return (UDate)(((int64_t)posixTime.tv_sec * U_MILLIS_PER_SECOND) + (posixTime.tv_usec/1000));\n}\n\nstatic UDate getUTCtime_fake() {\n    umtx_lock(&fakeClockMutex);\n    if(!fakeClock_set) {\n        UDate real = getUTCtime_real();\n        const char *fake_start = getenv(\"U_FAKETIME_START\");\n        if((fake_start!=NULL) && (fake_start[0]!=0)) {\n            sscanf(fake_start,\"%lf\",&fakeClock_t0);\n            fakeClock_dt = fakeClock_t0 - real;\n            fprintf(stderr,\"U_DEBUG_FAKETIME was set at compile time, so the ICU clock will start at a preset value\\n\"\n                    \"env variable U_FAKETIME_START=%.0f (%s) for an offset of %.0f ms from the current time %.0f\\n\",\n                    fakeClock_t0, fake_start, fakeClock_dt, real);\n        } else {\n          fakeClock_dt = 0;\n            fprintf(stderr,\"U_DEBUG_FAKETIME was set at compile time, but U_FAKETIME_START was not set.\\n\"\n                    \"Set U_FAKETIME_START to the number of milliseconds since 1/1/1970 to set the ICU clock.\\n\");\n        }\n        fakeClock_set = TRUE;\n    }\n    umtx_unlock(&fakeClockMutex);\n\n    return getUTCtime_real() + fakeClock_dt;\n}\n#endif\n\n#if U_PLATFORM_USES_ONLY_WIN32_API\ntypedef union {\n    int64_t int64;\n    FILETIME fileTime;\n} FileTimeConversion;   /* This is like a ULARGE_INTEGER */\n\n/* Number of 100 nanoseconds from 1/1/1601 to 1/1/1970 */\n#define EPOCH_BIAS  INT64_C(116444736000000000)\n#define HECTONANOSECOND_PER_MILLISECOND   10000\n\n#endif\n\n/*---------------------------------------------------------------------------\n  Universal Implementations\n  These are designed to work on all platforms.  Try these, and if they\n  don't work on your platform, then special case your platform with new\n  implementations.\n---------------------------------------------------------------------------*/\n\nU_CAPI UDate U_EXPORT2\nuprv_getUTCtime()\n{\n#if defined(U_DEBUG_FAKETIME)\n    return getUTCtime_fake(); /* Hook for overriding the clock */\n#else\n    return uprv_getRawUTCtime();\n#endif\n}\n\n/* Return UTC (GMT) time measured in milliseconds since 0:00 on 1/1/70.*/\nU_CAPI UDate U_EXPORT2\nuprv_getRawUTCtime()\n{\n#if U_PLATFORM_USES_ONLY_WIN32_API\n\n    FileTimeConversion winTime;\n    GetSystemTimeAsFileTime(&winTime.fileTime);\n    return (UDate)((winTime.int64 - EPOCH_BIAS) / HECTONANOSECOND_PER_MILLISECOND);\n#else\n\n#if HAVE_GETTIMEOFDAY\n    struct timeval posixTime;\n    gettimeofday(&posixTime, NULL);\n    return (UDate)(((int64_t)posixTime.tv_sec * U_MILLIS_PER_SECOND) + (posixTime.tv_usec/1000));\n#else\n    time_t epochtime;\n    time(&epochtime);\n    return (UDate)epochtime * U_MILLIS_PER_SECOND;\n#endif\n\n#endif\n}\n\n/*-----------------------------------------------------------------------------\n  IEEE 754\n  These methods detect and return NaN and infinity values for doubles\n  conforming to IEEE 754.  Platforms which support this standard include X86,\n  Mac 680x0, Mac PowerPC, AIX RS/6000, and most others.\n  If this doesn't work on your platform, you have non-IEEE floating-point, and\n  will need to code your own versions.  A naive implementation is to return 0.0\n  for getNaN and getInfinity, and false for isNaN and isInfinite.\n  ---------------------------------------------------------------------------*/\n\nU_CAPI UBool U_EXPORT2\nuprv_isNaN(double number)\n{\n#if IEEE_754\n    BitPatternConversion convertedNumber;\n    convertedNumber.d64 = number;\n    /* Infinity is 0x7FF0000000000000U. Anything greater than that is a NaN */\n    return (UBool)((convertedNumber.i64 & U_INT64_MAX) > gInf.i64);\n\n#elif U_PLATFORM == U_PF_OS390\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    uint32_t lowBits  = *(uint32_t*)u_bottomNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n\n    return ((highBits & 0x7F080000L) == 0x7F080000L) &&\n      (lowBits == 0x00000000L);\n\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an NaN value,*/\n    /* you'll need to replace this default implementation with what's correct*/\n    /* for your platform.*/\n    return number != number;\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isInfinite(double number)\n{\n#if IEEE_754\n    BitPatternConversion convertedNumber;\n    convertedNumber.d64 = number;\n    /* Infinity is exactly 0x7FF0000000000000U. */\n    return (UBool)((convertedNumber.i64 & U_INT64_MAX) == gInf.i64);\n#elif U_PLATFORM == U_PF_OS390\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    uint32_t lowBits  = *(uint32_t*)u_bottomNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n\n    return ((highBits  & ~SIGN) == 0x70FF0000L) && (lowBits == 0x00000000L);\n\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an infinity*/\n    /* value, you'll need to replace this default implementation with what's*/\n    /* correct for your platform.*/\n    return number == (2.0 * number);\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isPositiveInfinity(double number)\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return (UBool)(number > 0 && uprv_isInfinite(number));\n#else\n    return uprv_isInfinite(number);\n#endif\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_isNegativeInfinity(double number)\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return (UBool)(number < 0 && uprv_isInfinite(number));\n\n#else\n    uint32_t highBits = *(uint32_t*)u_topNBytesOfDouble(&number,\n                        sizeof(uint32_t));\n    return((highBits & SIGN) && uprv_isInfinite(number));\n\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_getNaN()\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return gNan.d64;\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an NaN value,*/\n    /* you'll need to replace this default implementation with what's correct*/\n    /* for your platform.*/\n    return 0.0;\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_getInfinity()\n{\n#if IEEE_754 || U_PLATFORM == U_PF_OS390\n    return gInf.d64;\n#else\n    /* If your platform doesn't support IEEE 754 but *does* have an infinity*/\n    /* value, you'll need to replace this default implementation with what's*/\n    /* correct for your platform.*/\n    return 0.0;\n#endif\n}\n\nU_CAPI double U_EXPORT2\nuprv_floor(double x)\n{\n    return floor(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_ceil(double x)\n{\n    return ceil(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_round(double x)\n{\n    return uprv_floor(x + 0.5);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fabs(double x)\n{\n    return fabs(x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_modf(double x, double* y)\n{\n    return modf(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmod(double x, double y)\n{\n    return fmod(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_pow(double x, double y)\n{\n    /* This is declared as \"double pow(double x, double y)\" */\n    return pow(x, y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_pow10(int32_t x)\n{\n    return pow(10.0, (double)x);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmax(double x, double y)\n{\n#if IEEE_754\n    /* first handle NaN*/\n    if(uprv_isNaN(x) || uprv_isNaN(y))\n        return uprv_getNaN();\n\n    /* check for -0 and 0*/\n    if(x == 0.0 && y == 0.0 && u_signBit(x))\n        return y;\n\n#endif\n\n    /* this should work for all flt point w/o NaN and Inf special cases */\n    return (x > y ? x : y);\n}\n\nU_CAPI double U_EXPORT2\nuprv_fmin(double x, double y)\n{\n#if IEEE_754\n    /* first handle NaN*/\n    if(uprv_isNaN(x) || uprv_isNaN(y))\n        return uprv_getNaN();\n\n    /* check for -0 and 0*/\n    if(x == 0.0 && y == 0.0 && u_signBit(y))\n        return y;\n\n#endif\n\n    /* this should work for all flt point w/o NaN and Inf special cases */\n    return (x > y ? y : x);\n}\n\n/**\n * Truncates the given double.\n * trunc(3.3) = 3.0, trunc (-3.3) = -3.0\n * This is different than calling floor() or ceil():\n * floor(3.3) = 3, floor(-3.3) = -4\n * ceil(3.3) = 4, ceil(-3.3) = -3\n */\nU_CAPI double U_EXPORT2\nuprv_trunc(double d)\n{\n#if IEEE_754\n    /* handle error cases*/\n    if(uprv_isNaN(d))\n        return uprv_getNaN();\n    if(uprv_isInfinite(d))\n        return uprv_getInfinity();\n\n    if(u_signBit(d))    /* Signbit() picks up -0.0;  d<0 does not. */\n        return ceil(d);\n    else\n        return floor(d);\n\n#else\n    return d >= 0 ? floor(d) : ceil(d);\n\n#endif\n}\n\n/**\n * Return the largest positive number that can be represented by an integer\n * type of arbitrary bit length.\n */\nU_CAPI double U_EXPORT2\nuprv_maxMantissa(void)\n{\n    return pow(2.0, DBL_MANT_DIG + 1.0) - 1.0;\n}\n\nU_CAPI double U_EXPORT2\nuprv_log(double d)\n{\n    return log(d);\n}\n\nU_CAPI void * U_EXPORT2\nuprv_maximumPtr(void * base)\n{\n#if U_PLATFORM == U_PF_OS400\n    /*\n     * With the provided function we should never be out of range of a given segment\n     * (a traditional/typical segment that is).  Our segments have 5 bytes for the\n     * id and 3 bytes for the offset.  The key is that the casting takes care of\n     * only retrieving the offset portion minus x1000.  Hence, the smallest offset\n     * seen in a program is x001000 and when casted to an int would be 0.\n     * That's why we can only add 0xffefff.  Otherwise, we would exceed the segment.\n     *\n     * Currently, 16MB is the current addressing limitation on i5/OS if the activation is\n     * non-TERASPACE.  If it is TERASPACE it is 2GB - 4k(header information).\n     * This function determines the activation based on the pointer that is passed in and\n     * calculates the appropriate maximum available size for\n     * each pointer type (TERASPACE and non-TERASPACE)\n     *\n     * Unlike other operating systems, the pointer model isn't determined at\n     * compile time on i5/OS.\n     */\n    if ((base != NULL) && (_TESTPTR(base, _C_TERASPACE_CHECK))) {\n        /* if it is a TERASPACE pointer the max is 2GB - 4k */\n        return ((void *)(((char *)base)-((uint32_t)(base))+((uint32_t)0x7fffefff)));\n    }\n    /* otherwise 16MB since NULL ptr is not checkable or the ptr is not TERASPACE */\n    return ((void *)(((char *)base)-((uint32_t)(base))+((uint32_t)0xffefff)));\n\n#else\n    return U_MAX_PTR(base);\n#endif\n}\n\n/*---------------------------------------------------------------------------\n  Platform-specific Implementations\n  Try these, and if they don't work on your platform, then special case your\n  platform with new implementations.\n  ---------------------------------------------------------------------------*/\n\n/* Generic time zone layer -------------------------------------------------- */\n\n/* Time zone utilities */\nU_CAPI void U_EXPORT2\nuprv_tzset()\n{\n#if defined(U_TZSET)\n    U_TZSET();\n#else\n    /* no initialization*/\n#endif\n}\n\nU_CAPI int32_t U_EXPORT2\nuprv_timezone()\n{\n#ifdef U_TIMEZONE\n    return U_TIMEZONE;\n#else\n    time_t t, t1, t2;\n    struct tm tmrec;\n    int32_t tdiff = 0;\n\n    time(&t);\n    uprv_memcpy( &tmrec, localtime(&t), sizeof(tmrec) );\n#if U_PLATFORM != U_PF_IPHONE\n    UBool dst_checked = (tmrec.tm_isdst != 0); /* daylight savings time is checked*/\n#endif\n    t1 = mktime(&tmrec);                 /* local time in seconds*/\n    uprv_memcpy( &tmrec, gmtime(&t), sizeof(tmrec) );\n    t2 = mktime(&tmrec);                 /* GMT (or UTC) in seconds*/\n    tdiff = t2 - t1;\n\n#if U_PLATFORM != U_PF_IPHONE\n    /* imitate NT behaviour, which returns same timezone offset to GMT for\n       winter and summer.\n       This does not work on all platforms. For instance, on glibc on Linux\n       and on Mac OS 10.5, tdiff calculated above remains the same\n       regardless of whether DST is in effect or not. iOS is another\n       platform where this does not work. Linux + glibc and Mac OS 10.5\n       have U_TIMEZONE defined so that this code is not reached.\n    */\n    if (dst_checked)\n        tdiff += 3600;\n#endif\n    return tdiff;\n#endif\n}\n\n/* Note that U_TZNAME does *not* have to be tzname, but if it is,\n   some platforms need to have it declared here. */\n\n#if defined(U_TZNAME) && (U_PLATFORM == U_PF_IRIX || U_PLATFORM_IS_DARWIN_BASED)\n/* RS6000 and others reject char **tzname.  */\nextern U_IMPORT char *U_TZNAME[];\n#endif\n\n#if !UCONFIG_NO_FILE_IO && ((U_PLATFORM_IS_DARWIN_BASED && (U_PLATFORM != U_PF_IPHONE || defined(U_TIMEZONE))) || U_PLATFORM_IS_LINUX_BASED || U_PLATFORM == U_PF_BSD || U_PLATFORM == U_PF_SOLARIS)\n/* These platforms are likely to use Olson timezone IDs. */\n#define CHECK_LOCALTIME_LINK 1\n#if U_PLATFORM_IS_DARWIN_BASED\n#include <tzfile.h>\n#define TZZONEINFO      (TZDIR \"/\")\n#elif U_PLATFORM == U_PF_SOLARIS\n#define TZDEFAULT       \"/etc/localtime\"\n#define TZZONEINFO      \"/usr/share/lib/zoneinfo/\"\n#define TZZONEINFO2     \"../usr/share/lib/zoneinfo/\"\n#define TZ_ENV_CHECK    \"localtime\"\n#else\n#define TZDEFAULT       \"/etc/localtime\"\n#define TZZONEINFO      \"/usr/share/zoneinfo/\"\n#endif\n#if U_HAVE_DIRENT_H\n#define TZFILE_SKIP     \"posixrules\" /* tz file to skip when searching. */\n/* Some Linux distributions have 'localtime' in /usr/share/zoneinfo\n   symlinked to /etc/localtime, which makes searchForTZFile return\n   'localtime' when it's the first match. */\n#define TZFILE_SKIP2    \"localtime\"\n#define SEARCH_TZFILE\n#include <dirent.h>  /* Needed to search through system timezone files */\n#endif\nstatic char gTimeZoneBuffer[PATH_MAX];\nstatic char *gTimeZoneBufferPtr = NULL;\n#endif\n\n#if !U_PLATFORM_USES_ONLY_WIN32_API\n#define isNonDigit(ch) (ch < '0' || '9' < ch)\nstatic UBool isValidOlsonID(const char *id) {\n    int32_t idx = 0;\n\n    /* Determine if this is something like Iceland (Olson ID)\n    or AST4ADT (non-Olson ID) */\n    while (id[idx] && isNonDigit(id[idx]) && id[idx] != ',') {\n        idx++;\n    }\n\n    /* If we went through the whole string, then it might be okay.\n    The timezone is sometimes set to \"CST-7CDT\", \"CST6CDT5,J129,J131/19:30\",\n    \"GRNLNDST3GRNLNDDT\" or similar, so we cannot use it.\n    The rest of the time it could be an Olson ID. George */\n    return (UBool)(id[idx] == 0\n        || uprv_strcmp(id, \"PST8PDT\") == 0\n        || uprv_strcmp(id, \"MST7MDT\") == 0\n        || uprv_strcmp(id, \"CST6CDT\") == 0\n        || uprv_strcmp(id, \"EST5EDT\") == 0);\n}\n\n/* On some Unix-like OS, 'posix' subdirectory in\n   /usr/share/zoneinfo replicates the top-level contents. 'right'\n   subdirectory has the same set of files, but individual files\n   are different from those in the top-level directory or 'posix'\n   because 'right' has files for TAI (Int'l Atomic Time) while 'posix'\n   has files for UTC.\n   When the first match for /etc/localtime is in either of them\n   (usually in posix because 'right' has different file contents),\n   or TZ environment variable points to one of them, createTimeZone\n   fails because, say, 'posix/America/New_York' is not an Olson\n   timezone id ('America/New_York' is). So, we have to skip\n   'posix/' and 'right/' at the beginning. */\nstatic void skipZoneIDPrefix(const char** id) {\n    if (uprv_strncmp(*id, \"posix/\", 6) == 0\n        || uprv_strncmp(*id, \"right/\", 6) == 0)\n    {\n        *id += 6;\n    }\n}\n#endif\n\n#if defined(U_TZNAME) && !U_PLATFORM_USES_ONLY_WIN32_API\n\n#define CONVERT_HOURS_TO_SECONDS(offset) (int32_t)(offset*3600)\ntypedef struct OffsetZoneMapping {\n    int32_t offsetSeconds;\n    int32_t daylightType; /* 0=U_DAYLIGHT_NONE, 1=daylight in June-U_DAYLIGHT_JUNE, 2=daylight in December=U_DAYLIGHT_DECEMBER*/\n    const char *stdID;\n    const char *dstID;\n    const char *olsonID;\n} OffsetZoneMapping;\n\nenum { U_DAYLIGHT_NONE=0,U_DAYLIGHT_JUNE=1,U_DAYLIGHT_DECEMBER=2 };\n\n/*\nThis list tries to disambiguate a set of abbreviated timezone IDs and offsets\nand maps it to an Olson ID.\nBefore adding anything to this list, take a look at\nicu/source/tools/tzcode/tz.alias\nSometimes no daylight savings (0) is important to define due to aliases.\nThis list can be tested with icu/source/test/compat/tzone.pl\nMore values could be added to daylightType to increase precision.\n*/\nstatic const struct OffsetZoneMapping OFFSET_ZONE_MAPPINGS[] = {\n    {-45900, 2, \"CHAST\", \"CHADT\", \"Pacific/Chatham\"},\n    {-43200, 1, \"PETT\", \"PETST\", \"Asia/Kamchatka\"},\n    {-43200, 2, \"NZST\", \"NZDT\", \"Pacific/Auckland\"},\n    {-43200, 1, \"ANAT\", \"ANAST\", \"Asia/Anadyr\"},\n    {-39600, 1, \"MAGT\", \"MAGST\", \"Asia/Magadan\"},\n    {-37800, 2, \"LHST\", \"LHST\", \"Australia/Lord_Howe\"},\n    {-36000, 2, \"EST\", \"EST\", \"Australia/Sydney\"},\n    {-36000, 1, \"SAKT\", \"SAKST\", \"Asia/Sakhalin\"},\n    {-36000, 1, \"VLAT\", \"VLAST\", \"Asia/Vladivostok\"},\n    {-34200, 2, \"CST\", \"CST\", \"Australia/South\"},\n    {-32400, 1, \"YAKT\", \"YAKST\", \"Asia/Yakutsk\"},\n    {-32400, 1, \"CHOT\", \"CHOST\", \"Asia/Choibalsan\"},\n    {-31500, 2, \"CWST\", \"CWST\", \"Australia/Eucla\"},\n    {-28800, 1, \"IRKT\", \"IRKST\", \"Asia/Irkutsk\"},\n    {-28800, 1, \"ULAT\", \"ULAST\", \"Asia/Ulaanbaatar\"},\n    {-28800, 2, \"WST\", \"WST\", \"Australia/West\"},\n    {-25200, 1, \"HOVT\", \"HOVST\", \"Asia/Hovd\"},\n    {-25200, 1, \"KRAT\", \"KRAST\", \"Asia/Krasnoyarsk\"},\n    {-21600, 1, \"NOVT\", \"NOVST\", \"Asia/Novosibirsk\"},\n    {-21600, 1, \"OMST\", \"OMSST\", \"Asia/Omsk\"},\n    {-18000, 1, \"YEKT\", \"YEKST\", \"Asia/Yekaterinburg\"},\n    {-14400, 1, \"SAMT\", \"SAMST\", \"Europe/Samara\"},\n    {-14400, 1, \"AMT\", \"AMST\", \"Asia/Yerevan\"},\n    {-14400, 1, \"AZT\", \"AZST\", \"Asia/Baku\"},\n    {-10800, 1, \"AST\", \"ADT\", \"Asia/Baghdad\"},\n    {-10800, 1, \"MSK\", \"MSD\", \"Europe/Moscow\"},\n    {-10800, 1, \"VOLT\", \"VOLST\", \"Europe/Volgograd\"},\n    {-7200, 0, \"EET\", \"CEST\", \"Africa/Tripoli\"},\n    {-7200, 1, \"EET\", \"EEST\", \"Europe/Athens\"}, /* Conflicts with Africa/Cairo */\n    {-7200, 1, \"IST\", \"IDT\", \"Asia/Jerusalem\"},\n    {-3600, 0, \"CET\", \"WEST\", \"Africa/Algiers\"},\n    {-3600, 2, \"WAT\", \"WAST\", \"Africa/Windhoek\"},\n    {0, 1, \"GMT\", \"IST\", \"Europe/Dublin\"},\n    {0, 1, \"GMT\", \"BST\", \"Europe/London\"},\n    {0, 0, \"WET\", \"WEST\", \"Africa/Casablanca\"},\n    {0, 0, \"WET\", \"WET\", \"Africa/El_Aaiun\"},\n    {3600, 1, \"AZOT\", \"AZOST\", \"Atlantic/Azores\"},\n    {3600, 1, \"EGT\", \"EGST\", \"America/Scoresbysund\"},\n    {10800, 1, \"PMST\", \"PMDT\", \"America/Miquelon\"},\n    {10800, 2, \"UYT\", \"UYST\", \"America/Montevideo\"},\n    {10800, 1, \"WGT\", \"WGST\", \"America/Godthab\"},\n    {10800, 2, \"BRT\", \"BRST\", \"Brazil/East\"},\n    {12600, 1, \"NST\", \"NDT\", \"America/St_Johns\"},\n    {14400, 1, \"AST\", \"ADT\", \"Canada/Atlantic\"},\n    {14400, 2, \"AMT\", \"AMST\", \"America/Cuiaba\"},\n    {14400, 2, \"CLT\", \"CLST\", \"Chile/Continental\"},\n    {14400, 2, \"FKT\", \"FKST\", \"Atlantic/Stanley\"},\n    {14400, 2, \"PYT\", \"PYST\", \"America/Asuncion\"},\n    {18000, 1, \"CST\", \"CDT\", \"America/Havana\"},\n    {18000, 1, \"EST\", \"EDT\", \"US/Eastern\"}, /* Conflicts with America/Grand_Turk */\n    {21600, 2, \"EAST\", \"EASST\", \"Chile/EasterIsland\"},\n    {21600, 0, \"CST\", \"MDT\", \"Canada/Saskatchewan\"},\n    {21600, 0, \"CST\", \"CDT\", \"America/Guatemala\"},\n    {21600, 1, \"CST\", \"CDT\", \"US/Central\"}, /* Conflicts with Mexico/General */\n    {25200, 1, \"MST\", \"MDT\", \"US/Mountain\"}, /* Conflicts with Mexico/BajaSur */\n    {28800, 0, \"PST\", \"PST\", \"Pacific/Pitcairn\"},\n    {28800, 1, \"PST\", \"PDT\", \"US/Pacific\"}, /* Conflicts with Mexico/BajaNorte */\n    {32400, 1, \"AKST\", \"AKDT\", \"US/Alaska\"},\n    {36000, 1, \"HAST\", \"HADT\", \"US/Aleutian\"}\n};\n\n/*#define DEBUG_TZNAME*/\n\nstatic const char* remapShortTimeZone(const char *stdID, const char *dstID, int32_t daylightType, int32_t offset)\n{\n    int32_t idx;\n#ifdef DEBUG_TZNAME\n    fprintf(stderr, \"TZ=%s std=%s dst=%s daylight=%d offset=%d\\n\", getenv(\"TZ\"), stdID, dstID, daylightType, offset);\n#endif\n    for (idx = 0; idx < UPRV_LENGTHOF(OFFSET_ZONE_MAPPINGS); idx++)\n    {\n        if (offset == OFFSET_ZONE_MAPPINGS[idx].offsetSeconds\n            && daylightType == OFFSET_ZONE_MAPPINGS[idx].daylightType\n            && strcmp(OFFSET_ZONE_MAPPINGS[idx].stdID, stdID) == 0\n            && strcmp(OFFSET_ZONE_MAPPINGS[idx].dstID, dstID) == 0)\n        {\n            return OFFSET_ZONE_MAPPINGS[idx].olsonID;\n        }\n    }\n    return NULL;\n}\n#endif\n\n#ifdef SEARCH_TZFILE\n#define MAX_READ_SIZE 512\n\ntypedef struct DefaultTZInfo {\n    char* defaultTZBuffer;\n    int64_t defaultTZFileSize;\n    FILE* defaultTZFilePtr;\n    UBool defaultTZstatus;\n    int32_t defaultTZPosition;\n} DefaultTZInfo;\n\n/*\n * This method compares the two files given to see if they are a match.\n * It is currently use to compare two TZ files.\n */\nstatic UBool compareBinaryFiles(const char* defaultTZFileName, const char* TZFileName, DefaultTZInfo* tzInfo) {\n    FILE* file; \n    int64_t sizeFile;\n    int64_t sizeFileLeft;\n    int32_t sizeFileRead;\n    int32_t sizeFileToRead;\n    char bufferFile[MAX_READ_SIZE];\n    UBool result = TRUE;\n\n    if (tzInfo->defaultTZFilePtr == NULL) {\n        tzInfo->defaultTZFilePtr = fopen(defaultTZFileName, \"r\");\n    }\n    file = fopen(TZFileName, \"r\");\n\n    tzInfo->defaultTZPosition = 0; /* reset position to begin search */\n\n    if (file != NULL && tzInfo->defaultTZFilePtr != NULL) {\n        /* First check that the file size are equal. */\n        if (tzInfo->defaultTZFileSize == 0) {\n            fseek(tzInfo->defaultTZFilePtr, 0, SEEK_END);\n            tzInfo->defaultTZFileSize = ftell(tzInfo->defaultTZFilePtr);\n        }\n        fseek(file, 0, SEEK_END);\n        sizeFile = ftell(file);\n        sizeFileLeft = sizeFile;\n\n        if (sizeFile != tzInfo->defaultTZFileSize) {\n            result = FALSE;\n        } else {\n            /* Store the data from the files in seperate buffers and\n             * compare each byte to determine equality.\n             */\n            if (tzInfo->defaultTZBuffer == NULL) {\n                rewind(tzInfo->defaultTZFilePtr);\n                tzInfo->defaultTZBuffer = (char*)uprv_malloc(sizeof(char) * tzInfo->defaultTZFileSize);\n                sizeFileRead = fread(tzInfo->defaultTZBuffer, 1, tzInfo->defaultTZFileSize, tzInfo->defaultTZFilePtr);\n            }\n            rewind(file);\n            while(sizeFileLeft > 0) {\n                uprv_memset(bufferFile, 0, MAX_READ_SIZE);\n                sizeFileToRead = sizeFileLeft < MAX_READ_SIZE ? sizeFileLeft : MAX_READ_SIZE;\n\n                sizeFileRead = fread(bufferFile, 1, sizeFileToRead, file);\n                if (memcmp(tzInfo->defaultTZBuffer + tzInfo->defaultTZPosition, bufferFile, sizeFileRead) != 0) {\n                    result = FALSE;\n                    break;\n                }\n                sizeFileLeft -= sizeFileRead;\n                tzInfo->defaultTZPosition += sizeFileRead;\n            }\n        }\n    } else {\n        result = FALSE;\n    }\n\n    if (file != NULL) {\n        fclose(file);\n    }\n\n    return result;\n}\n\n\n/* dirent also lists two entries: \".\" and \"..\" that we can safely ignore. */\n#define SKIP1 \".\"\n#define SKIP2 \"..\"\nstatic UBool U_CALLCONV putil_cleanup(void);\nstatic CharString *gSearchTZFileResult = NULL;\n\n/*\n * This method recursively traverses the directory given for a matching TZ file and returns the first match.\n * This function is not thread safe - it uses a global, gSearchTZFileResult, to hold its results.\n */\nstatic char* searchForTZFile(const char* path, DefaultTZInfo* tzInfo) {\n    DIR* dirp = opendir(path);\n    DIR* subDirp = NULL;\n    struct dirent* dirEntry = NULL;\n\n    char* result = NULL;\n    if (dirp == NULL) {\n        return result;\n    }\n\n    if (gSearchTZFileResult == NULL) {\n        gSearchTZFileResult = new CharString;\n        if (gSearchTZFileResult == NULL) {\n            return NULL;\n        }\n        ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n    }\n\n    /* Save the current path */\n    UErrorCode status = U_ZERO_ERROR;\n    CharString curpath(path, -1, status);\n    if (U_FAILURE(status)) {\n        return NULL;\n    }\n\n    /* Check each entry in the directory. */\n    while((dirEntry = readdir(dirp)) != NULL) {\n        const char* dirName = dirEntry->d_name;\n        if (uprv_strcmp(dirName, SKIP1) != 0 && uprv_strcmp(dirName, SKIP2) != 0) {\n            /* Create a newpath with the new entry to test each entry in the directory. */\n            CharString newpath(curpath, status);\n            newpath.append(dirName, -1, status);\n            if (U_FAILURE(status)) {\n                return NULL;\n            }\n\n            if ((subDirp = opendir(newpath.data())) != NULL) {\n                /* If this new path is a directory, make a recursive call with the newpath. */\n                closedir(subDirp);\n                newpath.append('/', status);\n                if (U_FAILURE(status)) {\n                    return NULL;\n                }\n                result = searchForTZFile(newpath.data(), tzInfo);\n                /*\n                 Have to get out here. Otherwise, we'd keep looking\n                 and return the first match in the top-level directory\n                 if there's a match in the top-level. If not, this function\n                 would return NULL and set gTimeZoneBufferPtr to NULL in initDefault().\n                 It worked without this in most cases because we have a fallback of calling\n                 localtime_r to figure out the default timezone.\n                */\n                if (result != NULL)\n                    break;\n            } else if (uprv_strcmp(TZFILE_SKIP, dirName) != 0 && uprv_strcmp(TZFILE_SKIP2, dirName) != 0) {\n                if(compareBinaryFiles(TZDEFAULT, newpath.data(), tzInfo)) {\n                    int32_t amountToSkip = sizeof(TZZONEINFO) - 1;\n                    if (amountToSkip > newpath.length()) {\n                        amountToSkip = newpath.length();\n                    }\n                    const char* zoneid = newpath.data() + amountToSkip;\n                    skipZoneIDPrefix(&zoneid);\n                    gSearchTZFileResult->clear();\n                    gSearchTZFileResult->append(zoneid, -1, status);\n                    if (U_FAILURE(status)) {\n                        return NULL;\n                    }\n                    result = gSearchTZFileResult->data();\n                    /* Get out after the first one found. */\n                    break;\n                }\n            }\n        }\n    }\n    closedir(dirp);\n    return result;\n}\n#endif\n\nU_CAPI void U_EXPORT2\nuprv_tzname_clear_cache()\n{\n#if defined(CHECK_LOCALTIME_LINK) && !defined(DEBUG_SKIP_LOCALTIME_LINK)\n    gTimeZoneBufferPtr = NULL;\n#endif\n}\n\n// With the Universal Windows Platform we can just ask Windows for the name\n#if U_PLATFORM_HAS_WINUWP_API\nU_CAPI const char* U_EXPORT2\nuprv_getWindowsTimeZone()\n{\n    // Get default Windows timezone.   \n    ComPtr<IInspectable> calendar;\n    HRESULT hr = RoActivateInstance(\n        HStringReference(RuntimeClass_Windows_Globalization_Calendar).Get(),\n        &calendar);\n    if (SUCCEEDED(hr))\n    {\n        ComPtr<ABI::Windows::Globalization::ITimeZoneOnCalendar> timezone;\n        hr = calendar.As(&timezone);\n        if (SUCCEEDED(hr))\n        {\n            HString timezoneString;\n            hr = timezone->GetTimeZone(timezoneString.GetAddressOf());\n            if (SUCCEEDED(hr))\n            {\n                int32_t length = wcslen(timezoneString.GetRawBuffer(NULL));\n                char* asciiId = (char*)uprv_calloc(length + 1, sizeof(char));\n                if (asciiId != nullptr)\n                {\n                    u_UCharsToChars((UChar*)timezoneString.GetRawBuffer(NULL), asciiId, length);\n                    return asciiId;\n                }\n            }\n        }\n    }\n\n    // Failed\n    return nullptr;\n}\n#endif\n\nU_CAPI const char* U_EXPORT2\nuprv_tzname(int n)\n{\n    const char *tzid = NULL;\n#if U_PLATFORM_USES_ONLY_WIN32_API\n#if U_PLATFORM_HAS_WINUWP_API > 0\n    tzid = uprv_getWindowsTimeZone();\n#else\n    tzid = uprv_detectWindowsTimeZone();\n#endif\n\n    if (tzid != NULL) {\n        return tzid;\n    }\n\n#ifndef U_TZNAME\n    // The return value is free'd in timezone.cpp on Windows because\n    // the other code path returns a pointer to a heap location.\n    // If we don't have a name already, then tzname wouldn't be any\n    // better, so just fall back.\n    return uprv_strdup(\"Etc/UTC\");\n#endif // !U_TZNAME\n\n#else\n\n/*#if U_PLATFORM_IS_DARWIN_BASED\n    int ret;\n\n    tzid = getenv(\"TZFILE\");\n    if (tzid != NULL) {\n        return tzid;\n    }\n#endif*/\n\n/* This code can be temporarily disabled to test tzname resolution later on. */\n#ifndef DEBUG_TZNAME\n    tzid = getenv(\"TZ\");\n    if (tzid != NULL && isValidOlsonID(tzid)\n#if U_PLATFORM == U_PF_SOLARIS\n    /* When TZ equals localtime on Solaris, check the /etc/localtime file. */\n        && uprv_strcmp(tzid, TZ_ENV_CHECK) != 0\n#endif\n    ) {\n        /* The colon forces tzset() to treat the remainder as zoneinfo path */ \n        if (tzid[0] == ':') { \n            tzid++; \n        } \n        /* This might be a good Olson ID. */\n        skipZoneIDPrefix(&tzid);\n        return tzid;\n    }\n    /* else U_TZNAME will give a better result. */\n#endif\n\n#if defined(CHECK_LOCALTIME_LINK) && !defined(DEBUG_SKIP_LOCALTIME_LINK)\n    /* Caller must handle threading issues */\n    if (gTimeZoneBufferPtr == NULL) {\n        /*\n        This is a trick to look at the name of the link to get the Olson ID\n        because the tzfile contents is underspecified.\n        This isn't guaranteed to work because it may not be a symlink.\n        */\n        int32_t ret = (int32_t)readlink(TZDEFAULT, gTimeZoneBuffer, sizeof(gTimeZoneBuffer)-1);\n        if (0 < ret) {\n            int32_t tzZoneInfoLen = uprv_strlen(TZZONEINFO);\n            gTimeZoneBuffer[ret] = 0;\n            if (uprv_strncmp(gTimeZoneBuffer, TZZONEINFO, tzZoneInfoLen) == 0\n                && isValidOlsonID(gTimeZoneBuffer + tzZoneInfoLen))\n            {\n                return (gTimeZoneBufferPtr = gTimeZoneBuffer + tzZoneInfoLen);\n            }\n#if U_PLATFORM == U_PF_SOLARIS\n            else\n            {\n                tzZoneInfoLen = uprv_strlen(TZZONEINFO2);\n                if (uprv_strncmp(gTimeZoneBuffer, TZZONEINFO2, tzZoneInfoLen) == 0\n                                && isValidOlsonID(gTimeZoneBuffer + tzZoneInfoLen))\n                {\n                    return (gTimeZoneBufferPtr = gTimeZoneBuffer + tzZoneInfoLen);\n                }\n            }\n#endif\n        } else {\n#if defined(SEARCH_TZFILE)\n            DefaultTZInfo* tzInfo = (DefaultTZInfo*)uprv_malloc(sizeof(DefaultTZInfo));\n            if (tzInfo != NULL) {\n                tzInfo->defaultTZBuffer = NULL;\n                tzInfo->defaultTZFileSize = 0;\n                tzInfo->defaultTZFilePtr = NULL;\n                tzInfo->defaultTZstatus = FALSE;\n                tzInfo->defaultTZPosition = 0;\n\n                gTimeZoneBufferPtr = searchForTZFile(TZZONEINFO, tzInfo);\n\n                /* Free previously allocated memory */\n                if (tzInfo->defaultTZBuffer != NULL) {\n                    uprv_free(tzInfo->defaultTZBuffer);\n                }\n                if (tzInfo->defaultTZFilePtr != NULL) {\n                    fclose(tzInfo->defaultTZFilePtr);\n                }\n                uprv_free(tzInfo);\n            }\n\n            if (gTimeZoneBufferPtr != NULL && isValidOlsonID(gTimeZoneBufferPtr)) {\n                return gTimeZoneBufferPtr;\n            }\n#endif\n        }\n    }\n    else {\n        return gTimeZoneBufferPtr;\n    }\n#endif\n#endif\n\n#ifdef U_TZNAME\n#if U_PLATFORM_USES_ONLY_WIN32_API\n    /* The return value is free'd in timezone.cpp on Windows because\n     * the other code path returns a pointer to a heap location. */\n    return uprv_strdup(U_TZNAME[n]);\n#else\n    /*\n    U_TZNAME is usually a non-unique abbreviation, which isn't normally usable.\n    So we remap the abbreviation to an olson ID.\n\n    Since Windows exposes a little more timezone information,\n    we normally don't use this code on Windows because\n    uprv_detectWindowsTimeZone should have already given the correct answer.\n    */\n    {\n        struct tm juneSol, decemberSol;\n        int daylightType;\n        static const time_t juneSolstice=1182478260; /*2007-06-21 18:11 UT*/\n        static const time_t decemberSolstice=1198332540; /*2007-12-22 06:09 UT*/\n\n        /* This probing will tell us when daylight savings occurs.  */\n        localtime_r(&juneSolstice, &juneSol);\n        localtime_r(&decemberSolstice, &decemberSol);\n        if(decemberSol.tm_isdst > 0) {\n          daylightType = U_DAYLIGHT_DECEMBER;\n        } else if(juneSol.tm_isdst > 0) {\n          daylightType = U_DAYLIGHT_JUNE;\n        } else {\n          daylightType = U_DAYLIGHT_NONE;\n        }\n        tzid = remapShortTimeZone(U_TZNAME[0], U_TZNAME[1], daylightType, uprv_timezone());\n        if (tzid != NULL) {\n            return tzid;\n        }\n    }\n    return U_TZNAME[n];\n#endif\n#else\n    return \"\";\n#endif\n}\n\n/* Get and set the ICU data directory --------------------------------------- */\n\nstatic icu::UInitOnce gDataDirInitOnce = U_INITONCE_INITIALIZER;\nstatic char *gDataDirectory = NULL;\n\nUInitOnce gTimeZoneFilesInitOnce = U_INITONCE_INITIALIZER;\nstatic CharString *gTimeZoneFilesDirectory = NULL;\n\n#if U_POSIX_LOCALE || U_PLATFORM_USES_ONLY_WIN32_API\n static char *gCorrectedPOSIXLocale = NULL; /* Sometimes heap allocated */\n static bool gCorrectedPOSIXLocaleHeapAllocated = false;\n#endif\n\nstatic UBool U_CALLCONV putil_cleanup(void)\n{\n    if (gDataDirectory && *gDataDirectory) {\n        uprv_free(gDataDirectory);\n    }\n    gDataDirectory = NULL;\n    gDataDirInitOnce.reset();\n\n    delete gTimeZoneFilesDirectory;\n    gTimeZoneFilesDirectory = NULL;\n    gTimeZoneFilesInitOnce.reset();\n\n#ifdef SEARCH_TZFILE\n    delete gSearchTZFileResult;\n    gSearchTZFileResult = NULL;\n#endif\n\n#if U_POSIX_LOCALE || U_PLATFORM_USES_ONLY_WIN32_API\n    if (gCorrectedPOSIXLocale && gCorrectedPOSIXLocaleHeapAllocated) {\n        uprv_free(gCorrectedPOSIXLocale);\n        gCorrectedPOSIXLocale = NULL;\n        gCorrectedPOSIXLocaleHeapAllocated = false;\n    }\n#endif\n    return TRUE;\n}\n\n/*\n * Set the data directory.\n *    Make a copy of the passed string, and set the global data dir to point to it.\n */\nU_CAPI void U_EXPORT2\nu_setDataDirectory(const char *directory) {\n    char *newDataDir;\n    int32_t length;\n\n    if(directory==NULL || *directory==0) {\n        /* A small optimization to prevent the malloc and copy when the\n        shared library is used, and this is a way to make sure that NULL\n        is never returned.\n        */\n        newDataDir = (char *)\"\";\n    }\n    else {\n        length=(int32_t)uprv_strlen(directory);\n        newDataDir = (char *)uprv_malloc(length + 2);\n        /* Exit out if newDataDir could not be created. */\n        if (newDataDir == NULL) {\n            return;\n        }\n        uprv_strcpy(newDataDir, directory);\n\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n        {\n            char *p;\n            while(p = uprv_strchr(newDataDir, U_FILE_ALT_SEP_CHAR)) {\n                *p = U_FILE_SEP_CHAR;\n            }\n        }\n#endif\n    }\n\n    if (gDataDirectory && *gDataDirectory) {\n        uprv_free(gDataDirectory);\n    }\n    gDataDirectory = newDataDir;\n    ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n}\n\nU_CAPI UBool U_EXPORT2\nuprv_pathIsAbsolute(const char *path)\n{\n  if(!path || !*path) {\n    return FALSE;\n  }\n\n  if(*path == U_FILE_SEP_CHAR) {\n    return TRUE;\n  }\n\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n  if(*path == U_FILE_ALT_SEP_CHAR) {\n    return TRUE;\n  }\n#endif\n\n#if U_PLATFORM_USES_ONLY_WIN32_API\n  if( (((path[0] >= 'A') && (path[0] <= 'Z')) ||\n       ((path[0] >= 'a') && (path[0] <= 'z'))) &&\n      path[1] == ':' ) {\n    return TRUE;\n  }\n#endif\n\n  return FALSE;\n}\n\n/* Temporary backup setting of ICU_DATA_DIR_PREFIX_ENV_VAR\n   until some client wrapper makefiles are updated */\n#if U_PLATFORM_IS_DARWIN_BASED && TARGET_IPHONE_SIMULATOR\n# if !defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n#  define ICU_DATA_DIR_PREFIX_ENV_VAR \"IPHONE_SIMULATOR_ROOT\"\n# endif\n#endif\n\nstatic void U_CALLCONV dataDirectoryInitFn() {\n    /* If we already have the directory, then return immediately. Will happen if user called\n     * u_setDataDirectory().\n     */\n    if (gDataDirectory) {\n        return;\n    }\n\n    const char *path = NULL;\n#if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n    char datadir_path_buffer[PATH_MAX];\n#endif\n\n    /*\n    When ICU_NO_USER_DATA_OVERRIDE is defined, users aren't allowed to\n    override ICU's data with the ICU_DATA environment variable. This prevents\n    problems where multiple custom copies of ICU's specific version of data\n    are installed on a system. Either the application must define the data\n    directory with u_setDataDirectory, define ICU_DATA_DIR when compiling\n    ICU, set the data with udata_setCommonData or trust that all of the\n    required data is contained in ICU's data library that contains\n    the entry point defined by U_ICUDATA_ENTRY_POINT.\n\n    There may also be some platforms where environment variables\n    are not allowed.\n    */\n#   if !defined(ICU_NO_USER_DATA_OVERRIDE) && !UCONFIG_NO_FILE_IO\n    /* First try to get the environment variable */\n#       if U_PLATFORM_HAS_WINUWP_API == 0  // Windows UWP does not support getenv\n        path=getenv(\"ICU_DATA\");\n#       endif\n#   endif\n\n    /* ICU_DATA_DIR may be set as a compile option.\n     * U_ICU_DATA_DEFAULT_DIR is provided and is set by ICU at compile time\n     * and is used only when data is built in archive mode eliminating the need\n     * for ICU_DATA_DIR to be set. U_ICU_DATA_DEFAULT_DIR is set to the installation\n     * directory of the data dat file. Users should use ICU_DATA_DIR if they want to\n     * set their own path.\n     */\n#if defined(ICU_DATA_DIR) || defined(U_ICU_DATA_DEFAULT_DIR)\n    if(path==NULL || *path==0) {\n# if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n        const char *prefix = getenv(ICU_DATA_DIR_PREFIX_ENV_VAR);\n# endif\n# ifdef ICU_DATA_DIR\n        path=ICU_DATA_DIR;\n# else\n        path=U_ICU_DATA_DEFAULT_DIR;\n# endif\n# if defined(ICU_DATA_DIR_PREFIX_ENV_VAR)\n        if (prefix != NULL) {\n            snprintf(datadir_path_buffer, PATH_MAX, \"%s%s\", prefix, path);\n            path=datadir_path_buffer;\n        }\n# endif\n    }\n#endif\n\n#if defined(ICU_DATA_DIR_WINDOWS) && U_PLATFORM_HAS_WINUWP_API != 0\n    // Use data from the %windir%\\globalization\\icu directory\n    // This is only available if ICU is built as a system component\n    char datadir_path_buffer[MAX_PATH];\n    UINT length = GetWindowsDirectoryA(datadir_path_buffer, UPRV_LENGTHOF(datadir_path_buffer));\n    if (length > 0 && length < (UPRV_LENGTHOF(datadir_path_buffer) - sizeof(ICU_DATA_DIR_WINDOWS) - 1))\n    {\n        if (datadir_path_buffer[length - 1] != '\\\\')\n        {\n            datadir_path_buffer[length++] = '\\\\';\n            datadir_path_buffer[length] = '\\0';\n        }\n\n        if ((length + 1 + sizeof(ICU_DATA_DIR_WINDOWS)) < UPRV_LENGTHOF(datadir_path_buffer))\n        {\n            uprv_strcat(datadir_path_buffer, ICU_DATA_DIR_WINDOWS);\n            path = datadir_path_buffer;\n        }\n    }\n#endif\n\n    if(path==NULL) {\n        /* It looks really bad, set it to something. */\n#if U_PLATFORM_HAS_WIN32_API\n        // Windows UWP will require icudtl.dat file in same directory as icuuc.dll\n        path = \".\\\\\";\n#else\n        path = \"\";\n#endif\n    }\n\n    u_setDataDirectory(path);\n    return;\n}\n\nU_CAPI const char * U_EXPORT2\nu_getDataDirectory(void) {\n    umtx_initOnce(gDataDirInitOnce, &dataDirectoryInitFn);\n    return gDataDirectory;\n}\n\nstatic void setTimeZoneFilesDir(const char *path, UErrorCode &status) {\n    if (U_FAILURE(status)) {\n        return;\n    }\n    gTimeZoneFilesDirectory->clear();\n    gTimeZoneFilesDirectory->append(path, status);\n#if (U_FILE_SEP_CHAR != U_FILE_ALT_SEP_CHAR)\n    char *p = gTimeZoneFilesDirectory->data();\n    while (p = uprv_strchr(p, U_FILE_ALT_SEP_CHAR)) {\n        *p = U_FILE_SEP_CHAR;\n    }\n#endif\n}\n\n#define TO_STRING(x) TO_STRING_2(x) \n#define TO_STRING_2(x) #x\n\nstatic void U_CALLCONV TimeZoneDataDirInitFn(UErrorCode &status) {\n    U_ASSERT(gTimeZoneFilesDirectory == NULL);\n    ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n    gTimeZoneFilesDirectory = new CharString();\n    if (gTimeZoneFilesDirectory == NULL) {\n        status = U_MEMORY_ALLOCATION_ERROR;\n        return;\n    }\n#if U_PLATFORM_HAS_WINUWP_API == 0\n    const char *dir = getenv(\"ICU_TIMEZONE_FILES_DIR\");\n#else\n    // TODO: UWP does not support alternate timezone data directories at this time\n    const char *dir = \"\";\n#endif // U_PLATFORM_HAS_WINUWP_API\n#if defined(U_TIMEZONE_FILES_DIR)\n    if (dir == NULL) {\n        dir = TO_STRING(U_TIMEZONE_FILES_DIR);\n    }\n#endif\n    if (dir == NULL) {\n        dir = \"\";\n    }\n    setTimeZoneFilesDir(dir, status);\n}\n\n\nU_CAPI const char * U_EXPORT2\nu_getTimeZoneFilesDirectory(UErrorCode *status) {\n    umtx_initOnce(gTimeZoneFilesInitOnce, &TimeZoneDataDirInitFn, *status);\n    return U_SUCCESS(*status) ? gTimeZoneFilesDirectory->data() : \"\";\n}\n\nU_CAPI void U_EXPORT2\nu_setTimeZoneFilesDirectory(const char *path, UErrorCode *status) {\n    umtx_initOnce(gTimeZoneFilesInitOnce, &TimeZoneDataDirInitFn, *status);\n    setTimeZoneFilesDir(path, *status);\n\n    // Note: this function does some extra churn, first setting based on the\n    //       environment, then immediately replacing with the value passed in.\n    //       The logic is simpler that way, and performance shouldn't be an issue.\n}\n\n\n#if U_POSIX_LOCALE\n/* A helper function used by uprv_getPOSIXIDForDefaultLocale and\n * uprv_getPOSIXIDForDefaultCodepage. Returns the posix locale id for\n * LC_CTYPE and LC_MESSAGES. It doesn't support other locale categories.\n */\nstatic const char *uprv_getPOSIXIDForCategory(int category)\n{\n    const char* posixID = NULL;\n    if (category == LC_MESSAGES || category == LC_CTYPE) {\n        /*\n        * On Solaris two different calls to setlocale can result in\n        * different values. Only get this value once.\n        *\n        * We must check this first because an application can set this.\n        *\n        * LC_ALL can't be used because it's platform dependent. The LANG\n        * environment variable seems to affect LC_CTYPE variable by default.\n        * Here is what setlocale(LC_ALL, NULL) can return.\n        * HPUX can return 'C C C C C C C'\n        * Solaris can return /en_US/C/C/C/C/C on the second try.\n        * Linux can return LC_CTYPE=C;LC_NUMERIC=C;...\n        *\n        * The default codepage detection also needs to use LC_CTYPE.\n        *\n        * Do not call setlocale(LC_*, \"\")! Using an empty string instead\n        * of NULL, will modify the libc behavior.\n        */\n        posixID = setlocale(category, NULL);\n        if ((posixID == 0)\n            || (uprv_strcmp(\"C\", posixID) == 0)\n            || (uprv_strcmp(\"POSIX\", posixID) == 0))\n        {\n            /* Maybe we got some garbage.  Try something more reasonable */\n            posixID = getenv(\"LC_ALL\");\n            /* Solaris speaks POSIX -  See IEEE Std 1003.1-2008 \n             * This is needed to properly handle empty env. variables\n             */\n#if U_PLATFORM == U_PF_SOLARIS\n            if ((posixID == 0) || (posixID[0] == '\\0')) {\n                posixID = getenv(category == LC_MESSAGES ? \"LC_MESSAGES\" : \"LC_CTYPE\");\n                if ((posixID == 0) || (posixID[0] == '\\0')) {\n#else\n            if (posixID == 0) {\n                posixID = getenv(category == LC_MESSAGES ? \"LC_MESSAGES\" : \"LC_CTYPE\");\n                if (posixID == 0) {\n#endif                    \n                    posixID = getenv(\"LANG\");\n                }\n            }\n        }\n    }\n    if ((posixID==0)\n        || (uprv_strcmp(\"C\", posixID) == 0)\n        || (uprv_strcmp(\"POSIX\", posixID) == 0))\n    {\n        /* Nothing worked.  Give it a nice POSIX default value. */\n        posixID = \"en_US_POSIX\";\n    }\n    return posixID;\n}\n\n/* Return just the POSIX id for the default locale, whatever happens to be in\n * it. It gets the value from LC_MESSAGES and indirectly from LC_ALL and LANG.\n */\nstatic const char *uprv_getPOSIXIDForDefaultLocale(void)\n{\n    static const char* posixID = NULL;\n    if (posixID == 0) {\n        posixID = uprv_getPOSIXIDForCategory(LC_MESSAGES);\n    }\n    return posixID;\n}\n\n#if !U_CHARSET_IS_UTF8\n/* Return just the POSIX id for the default codepage, whatever happens to be in\n * it. It gets the value from LC_CTYPE and indirectly from LC_ALL and LANG.\n */\nstatic const char *uprv_getPOSIXIDForDefaultCodepage(void)\n{\n    static const char* posixID = NULL;\n    if (posixID == 0) {\n        posixID = uprv_getPOSIXIDForCategory(LC_CTYPE);\n    }\n    return posixID;\n}\n#endif\n#endif\n\n/* NOTE: The caller should handle thread safety */\nU_CAPI const char* U_EXPORT2\nuprv_getDefaultLocaleID()\n{\n#if U_POSIX_LOCALE\n/*\n  Note that:  (a '!' means the ID is improper somehow)\n     LC_ALL  ---->     default_loc          codepage\n--------------------------------------------------------\n     ab.CD             ab                   CD\n     ab@CD             ab__CD               -\n     ab@CD.EF          ab__CD               EF\n\n     ab_CD.EF@GH       ab_CD_GH             EF\n\nSome 'improper' ways to do the same as above:\n  !  ab_CD@GH.EF       ab_CD_GH             EF\n  !  ab_CD.EF@GH.IJ    ab_CD_GH             EF\n  !  ab_CD@ZZ.EF@GH.IJ ab_CD_GH             EF\n\n     _CD@GH            _CD_GH               -\n     _CD.EF@GH         _CD_GH               EF\n\nThe variant cannot have dots in it.\nThe 'rightmost' variant (@xxx) wins.\nThe leftmost codepage (.xxx) wins.\n*/\n    char *correctedPOSIXLocale = 0;\n    const char* posixID = uprv_getPOSIXIDForDefaultLocale();\n    const char *p;\n    const char *q;\n    int32_t len;\n\n    /* Format: (no spaces)\n    ll [ _CC ] [ . MM ] [ @ VV]\n\n      l = lang, C = ctry, M = charmap, V = variant\n    */\n\n    if (gCorrectedPOSIXLocale != NULL) {\n        return gCorrectedPOSIXLocale;\n    }\n\n    if ((p = uprv_strchr(posixID, '.')) != NULL) {\n        /* assume new locale can't be larger than old one? */\n        correctedPOSIXLocale = static_cast<char *>(uprv_malloc(uprv_strlen(posixID)+1));\n        /* Exit on memory allocation error. */\n        if (correctedPOSIXLocale == NULL) {\n            return NULL;\n        }\n        uprv_strncpy(correctedPOSIXLocale, posixID, p-posixID);\n        correctedPOSIXLocale[p-posixID] = 0;\n\n        /* do not copy after the @ */\n        if ((p = uprv_strchr(correctedPOSIXLocale, '@')) != NULL) {\n            correctedPOSIXLocale[p-correctedPOSIXLocale] = 0;\n        }\n    }\n\n    /* Note that we scan the *uncorrected* ID. */\n    if ((p = uprv_strrchr(posixID, '@')) != NULL) {\n        if (correctedPOSIXLocale == NULL) {\n            correctedPOSIXLocale = static_cast<char *>(uprv_malloc(uprv_strlen(posixID)+1));\n            /* Exit on memory allocation error. */\n            if (correctedPOSIXLocale == NULL) {\n                return NULL;\n            }\n            uprv_strncpy(correctedPOSIXLocale, posixID, p-posixID);\n            correctedPOSIXLocale[p-posixID] = 0;\n        }\n        p++;\n\n        /* Take care of any special cases here.. */\n        if (!uprv_strcmp(p, \"nynorsk\")) {\n            p = \"NY\";\n            /* Don't worry about no__NY. In practice, it won't appear. */\n        }\n\n        if (uprv_strchr(correctedPOSIXLocale,'_') == NULL) {\n            uprv_strcat(correctedPOSIXLocale, \"__\"); /* aa@b -> aa__b */\n        }\n        else {\n            uprv_strcat(correctedPOSIXLocale, \"_\"); /* aa_CC@b -> aa_CC_b */\n        }\n\n        if ((q = uprv_strchr(p, '.')) != NULL) {\n            /* How big will the resulting string be? */\n            len = (int32_t)(uprv_strlen(correctedPOSIXLocale) + (q-p));\n            uprv_strncat(correctedPOSIXLocale, p, q-p);\n            correctedPOSIXLocale[len] = 0;\n        }\n        else {\n            /* Anything following the @ sign */\n            uprv_strcat(correctedPOSIXLocale, p);\n        }\n\n        /* Should there be a map from 'no@nynorsk' -> no_NO_NY here?\n         * How about 'russian' -> 'ru'?\n         * Many of the other locales using ISO codes will be handled by the\n         * canonicalization functions in uloc_getDefault.\n         */\n    }\n\n    /* Was a correction made? */\n    if (correctedPOSIXLocale != NULL) {\n        posixID = correctedPOSIXLocale;\n    }\n    else {\n        /* copy it, just in case the original pointer goes away.  See j2395 */\n        correctedPOSIXLocale = (char *)uprv_malloc(uprv_strlen(posixID) + 1);\n        /* Exit on memory allocation error. */\n        if (correctedPOSIXLocale == NULL) {\n            return NULL;\n        }\n        posixID = uprv_strcpy(correctedPOSIXLocale, posixID);\n    }\n\n    if (gCorrectedPOSIXLocale == NULL) {\n        gCorrectedPOSIXLocale = correctedPOSIXLocale;\n        gCorrectedPOSIXLocaleHeapAllocated = true;\n        ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n        correctedPOSIXLocale = NULL;\n    }\n\n    if (correctedPOSIXLocale != NULL) {  /* Was already set - clean up. */\n        uprv_free(correctedPOSIXLocale);\n    }\n\n    return posixID;\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n#define POSIX_LOCALE_CAPACITY 64\n    UErrorCode status = U_ZERO_ERROR;\n    char *correctedPOSIXLocale = 0;\n\n    // If we have already figured this out just use the cached value\n    if (gCorrectedPOSIXLocale != NULL) {\n        return gCorrectedPOSIXLocale;\n    }\n\n    // No cached value, need to determine the current value\n    static WCHAR windowsLocale[LOCALE_NAME_MAX_LENGTH];\n#if U_PLATFORM_HAS_WINUWP_API == 0 \n    // If not a Universal Windows App, we'll need user default language.\n    // Vista and above should use Locale Names instead of LCIDs\n    int length = GetUserDefaultLocaleName(windowsLocale, UPRV_LENGTHOF(windowsLocale));\n#else\n    // In a UWP app, we want the top language that the application and user agreed upon\n    ComPtr<ABI::Windows::Foundation::Collections::IVectorView<HSTRING>> languageList;\n\n    ComPtr<ABI::Windows::Globalization::IApplicationLanguagesStatics> applicationLanguagesStatics;\n    HRESULT hr = GetActivationFactory(\n        HStringReference(RuntimeClass_Windows_Globalization_ApplicationLanguages).Get(),\n        &applicationLanguagesStatics);\n    if (SUCCEEDED(hr))\n    {\n        hr = applicationLanguagesStatics->get_Languages(&languageList);\n    }\n\n    if (FAILED(hr))\n    {\n        // If there is no application context, then use the top language from the user language profile\n        ComPtr<ABI::Windows::System::UserProfile::IGlobalizationPreferencesStatics> globalizationPreferencesStatics;\n        hr = GetActivationFactory(\n            HStringReference(RuntimeClass_Windows_System_UserProfile_GlobalizationPreferences).Get(),\n            &globalizationPreferencesStatics);\n        if (SUCCEEDED(hr))\n        {\n            hr = globalizationPreferencesStatics->get_Languages(&languageList);\n        }\n    }\n\n    // We have a list of languages, ICU knows one, so use the top one for our locale\n    HString topLanguage;\n    if (SUCCEEDED(hr))\n    {\n        hr = languageList->GetAt(0, topLanguage.GetAddressOf());\n    }\n\n    if (FAILED(hr))\n    {\n        // Unexpected, use en-US by default\n        if (gCorrectedPOSIXLocale == NULL) {\n            gCorrectedPOSIXLocale = \"en_US\";\n        }\n\n        return gCorrectedPOSIXLocale;\n    }\n\n    // ResolveLocaleName will get a likely subtags form consistent with Windows behavior.\n    int length = ResolveLocaleName(topLanguage.GetRawBuffer(NULL), windowsLocale, UPRV_LENGTHOF(windowsLocale));\n#endif\n    // Now we should have a Windows locale name that needs converted to the POSIX style,\n    if (length > 0)\n    {\n        // First we need to go from UTF-16 to char (and also convert from _ to - while we're at it.)\n        char modifiedWindowsLocale[LOCALE_NAME_MAX_LENGTH];\n\n        int32_t i;\n        for (i = 0; i < UPRV_LENGTHOF(modifiedWindowsLocale); i++)\n        {\n            if (windowsLocale[i] == '_')\n            {\n                modifiedWindowsLocale[i] = '-';\n            }\n            else\n            {\n                modifiedWindowsLocale[i] = static_cast<char>(windowsLocale[i]);\n            }\n\n            if (modifiedWindowsLocale[i] == '\\0')\n            {\n                break;\n            }\n        }\n\n        if (i >= UPRV_LENGTHOF(modifiedWindowsLocale))\n        {\n            // Ran out of room, can't really happen, maybe we'll be lucky about a matching\n            // locale when tags are dropped\n            modifiedWindowsLocale[UPRV_LENGTHOF(modifiedWindowsLocale) - 1] = '\\0';\n        }\n\n        // Now normalize the resulting name\n        if (correctedPOSIXLocale)\n        {\n            int32_t posixLen = uloc_canonicalize(modifiedWindowsLocale, correctedPOSIXLocale, POSIX_LOCALE_CAPACITY, &status);\n            if (U_SUCCESS(status))\n            {\n                *(correctedPOSIXLocale + posixLen) = 0;\n                gCorrectedPOSIXLocale = correctedPOSIXLocale;\n                gCorrectedPOSIXLocaleHeapAllocated = true;\n                ucln_common_registerCleanup(UCLN_COMMON_PUTIL, putil_cleanup);\n            }\n            else\n            {\n                uprv_free(correctedPOSIXLocale);\n            }\n        }\n    }\n\n    // If unable to find a locale we can agree upon, use en-US by default\n    if (gCorrectedPOSIXLocale == NULL) {\n        gCorrectedPOSIXLocale = \"en_US\";\n    }\n    return gCorrectedPOSIXLocale;\n\n#elif U_PLATFORM == U_PF_OS400\n    /* locales are process scoped and are by definition thread safe */\n    static char correctedLocale[64];\n    const  char *localeID = getenv(\"LC_ALL\");\n           char *p;\n\n    if (localeID == NULL)\n        localeID = getenv(\"LANG\");\n    if (localeID == NULL)\n        localeID = setlocale(LC_ALL, NULL);\n    /* Make sure we have something... */\n    if (localeID == NULL)\n        return \"en_US_POSIX\";\n\n    /* Extract the locale name from the path. */\n    if((p = uprv_strrchr(localeID, '/')) != NULL)\n    {\n        /* Increment p to start of locale name. */\n        p++;\n        localeID = p;\n    }\n\n    /* Copy to work location. */\n    uprv_strcpy(correctedLocale, localeID);\n\n    /* Strip off the '.locale' extension. */\n    if((p = uprv_strchr(correctedLocale, '.')) != NULL) {\n        *p = 0;\n    }\n\n    /* Upper case the locale name. */\n    T_CString_toUpperCase(correctedLocale);\n\n    /* See if we are using the POSIX locale.  Any of the\n    * following are equivalent and use the same QLGPGCMA\n    * (POSIX) locale.\n    * QLGPGCMA2 means UCS2\n    * QLGPGCMA_4 means UTF-32\n    * QLGPGCMA_8 means UTF-8\n    */\n    if ((uprv_strcmp(\"C\", correctedLocale) == 0) ||\n        (uprv_strcmp(\"POSIX\", correctedLocale) == 0) ||\n        (uprv_strncmp(\"QLGPGCMA\", correctedLocale, 8) == 0))\n    {\n        uprv_strcpy(correctedLocale, \"en_US_POSIX\");\n    }\n    else\n    {\n        int16_t LocaleLen;\n\n        /* Lower case the lang portion. */\n        for(p = correctedLocale; *p != 0 && *p != '_'; p++)\n        {\n            *p = uprv_tolower(*p);\n        }\n\n        /* Adjust for Euro.  After '_E' add 'URO'. */\n        LocaleLen = uprv_strlen(correctedLocale);\n        if (correctedLocale[LocaleLen - 2] == '_' &&\n            correctedLocale[LocaleLen - 1] == 'E')\n        {\n            uprv_strcat(correctedLocale, \"URO\");\n        }\n\n        /* If using Lotus-based locale then convert to\n         * equivalent non Lotus.\n         */\n        else if (correctedLocale[LocaleLen - 2] == '_' &&\n            correctedLocale[LocaleLen - 1] == 'L')\n        {\n            correctedLocale[LocaleLen - 2] = 0;\n        }\n\n        /* There are separate simplified and traditional\n         * locales called zh_HK_S and zh_HK_T.\n         */\n        else if (uprv_strncmp(correctedLocale, \"zh_HK\", 5) == 0)\n        {\n            uprv_strcpy(correctedLocale, \"zh_HK\");\n        }\n\n        /* A special zh_CN_GBK locale...\n        */\n        else if (uprv_strcmp(correctedLocale, \"zh_CN_GBK\") == 0)\n        {\n            uprv_strcpy(correctedLocale, \"zh_CN\");\n        }\n\n    }\n\n    return correctedLocale;\n#endif\n\n}\n\n#if !U_CHARSET_IS_UTF8\n#if U_POSIX_LOCALE\n/*\nDue to various platform differences, one platform may specify a charset,\nwhen they really mean a different charset. Remap the names so that they are\ncompatible with ICU. Only conflicting/ambiguous aliases should be resolved\nhere. Before adding anything to this function, please consider adding unique\nnames to the ICU alias table in the data directory.\n*/\nstatic const char*\nremapPlatformDependentCodepage(const char *locale, const char *name) {\n    if (locale != NULL && *locale == 0) {\n        /* Make sure that an empty locale is handled the same way. */\n        locale = NULL;\n    }\n    if (name == NULL) {\n        return NULL;\n    }\n#if U_PLATFORM == U_PF_AIX\n    if (uprv_strcmp(name, \"IBM-943\") == 0) {\n        /* Use the ASCII compatible ibm-943 */\n        name = \"Shift-JIS\";\n    }\n    else if (uprv_strcmp(name, \"IBM-1252\") == 0) {\n        /* Use the windows-1252 that contains the Euro */\n        name = \"IBM-5348\";\n    }\n#elif U_PLATFORM == U_PF_SOLARIS\n    if (locale != NULL && uprv_strcmp(name, \"EUC\") == 0) {\n        /* Solaris underspecifies the \"EUC\" name. */\n        if (uprv_strcmp(locale, \"zh_CN\") == 0) {\n            name = \"EUC-CN\";\n        }\n        else if (uprv_strcmp(locale, \"zh_TW\") == 0) {\n            name = \"EUC-TW\";\n        }\n        else if (uprv_strcmp(locale, \"ko_KR\") == 0) {\n            name = \"EUC-KR\";\n        }\n    }\n    else if (uprv_strcmp(name, \"eucJP\") == 0) {\n        /*\n        ibm-954 is the best match.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n    else if (uprv_strcmp(name, \"646\") == 0) {\n        /*\n         * The default codepage given by Solaris is 646 but the C library routines treat it as if it was\n         * ISO-8859-1 instead of US-ASCII(646).\n         */\n        name = \"ISO-8859-1\";\n    }\n#elif U_PLATFORM_IS_DARWIN_BASED\n    if (locale == NULL && *name == 0) {\n        /*\n        No locale was specified, and an empty name was passed in.\n        This usually indicates that nl_langinfo didn't return valid information.\n        Mac OS X uses UTF-8 by default (especially the locale data and console).\n        */\n        name = \"UTF-8\";\n    }\n    else if (uprv_strcmp(name, \"CP949\") == 0) {\n        /* Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. */\n        name = \"EUC-KR\";\n    }\n    else if (locale != NULL && uprv_strcmp(locale, \"en_US_POSIX\") != 0 && uprv_strcmp(name, \"US-ASCII\") == 0) {\n        /*\n         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.\n         */\n        name = \"UTF-8\";\n    }\n#elif U_PLATFORM == U_PF_BSD\n    if (uprv_strcmp(name, \"CP949\") == 0) {\n        /* Remap CP949 to a similar codepage to avoid issues with backslash and won symbol. */\n        name = \"EUC-KR\";\n    }\n#elif U_PLATFORM == U_PF_HPUX\n    if (locale != NULL && uprv_strcmp(locale, \"zh_HK\") == 0 && uprv_strcmp(name, \"big5\") == 0) {\n        /* HP decided to extend big5 as hkbig5 even though it's not compatible :-( */\n        /* zh_TW.big5 is not the same charset as zh_HK.big5! */\n        name = \"hkbig5\";\n    }\n    else if (uprv_strcmp(name, \"eucJP\") == 0) {\n        /*\n        ibm-1350 is the best match, but unavailable.\n        ibm-954 is mostly a superset of ibm-1350.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n#elif U_PLATFORM == U_PF_LINUX\n    if (locale != NULL && uprv_strcmp(name, \"euc\") == 0) {\n        /* Linux underspecifies the \"EUC\" name. */\n        if (uprv_strcmp(locale, \"korean\") == 0) {\n            name = \"EUC-KR\";\n        }\n        else if (uprv_strcmp(locale, \"japanese\") == 0) {\n            /* See comment below about eucJP */\n            name = \"eucjis\";\n        }\n    }\n    else if (uprv_strcmp(name, \"eucjp\") == 0) {\n        /*\n        ibm-1350 is the best match, but unavailable.\n        ibm-954 is mostly a superset of ibm-1350.\n        ibm-33722 is the default for eucJP (similar to Windows).\n        */\n        name = \"eucjis\";\n    }\n    else if (locale != NULL && uprv_strcmp(locale, \"en_US_POSIX\") != 0 &&\n            (uprv_strcmp(name, \"ANSI_X3.4-1968\") == 0 || uprv_strcmp(name, \"US-ASCII\") == 0)) {\n        /*\n         * For non C/POSIX locale, default the code page to UTF-8 instead of US-ASCII.\n         */\n        name = \"UTF-8\";\n    }\n    /*\n     * Linux returns ANSI_X3.4-1968 for C/POSIX, but the call site takes care of\n     * it by falling back to 'US-ASCII' when NULL is returned from this\n     * function. So, we don't have to worry about it here.\n     */\n#endif\n    /* return NULL when \"\" is passed in */\n    if (*name == 0) {\n        name = NULL;\n    }\n    return name;\n}\n\nstatic const char*\ngetCodepageFromPOSIXID(const char *localeName, char * buffer, int32_t buffCapacity)\n{\n    char localeBuf[100];\n    const char *name = NULL;\n    char *variant = NULL;\n\n    if (localeName != NULL && (name = (uprv_strchr(localeName, '.'))) != NULL) {\n        size_t localeCapacity = uprv_min(sizeof(localeBuf), (name-localeName)+1);\n        uprv_strncpy(localeBuf, localeName, localeCapacity);\n        localeBuf[localeCapacity-1] = 0; /* ensure NULL termination */\n        name = uprv_strncpy(buffer, name+1, buffCapacity);\n        buffer[buffCapacity-1] = 0; /* ensure NULL termination */\n        if ((variant = const_cast<char *>(uprv_strchr(name, '@'))) != NULL) {\n            *variant = 0;\n        }\n        name = remapPlatformDependentCodepage(localeBuf, name);\n    }\n    return name;\n}\n#endif\n\nstatic const char*\nint_getDefaultCodepage()\n{\n#if U_PLATFORM == U_PF_OS400\n    uint32_t ccsid = 37; /* Default to ibm-37 */\n    static char codepage[64];\n    Qwc_JOBI0400_t jobinfo;\n    Qus_EC_t error = { sizeof(Qus_EC_t) }; /* SPI error code */\n\n    EPT_CALL(QUSRJOBI)(&jobinfo, sizeof(jobinfo), \"JOBI0400\",\n        \"*                         \", \"                \", &error);\n\n    if (error.Bytes_Available == 0) {\n        if (jobinfo.Coded_Char_Set_ID != 0xFFFF) {\n            ccsid = (uint32_t)jobinfo.Coded_Char_Set_ID;\n        }\n        else if (jobinfo.Default_Coded_Char_Set_Id != 0xFFFF) {\n            ccsid = (uint32_t)jobinfo.Default_Coded_Char_Set_Id;\n        }\n        /* else use the default */\n    }\n    sprintf(codepage,\"ibm-%d\", ccsid);\n    return codepage;\n\n#elif U_PLATFORM == U_PF_OS390\n    static char codepage[64];\n\n    strncpy(codepage, nl_langinfo(CODESET),63-strlen(UCNV_SWAP_LFNL_OPTION_STRING));\n    strcat(codepage,UCNV_SWAP_LFNL_OPTION_STRING);\n    codepage[63] = 0; /* NULL terminate */\n\n    return codepage;\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n    static char codepage[64];\n    DWORD codepageNumber = 0;\n\n#if U_PLATFORM_HAS_WINUWP_API > 0\n    // UWP doesn't have a direct API to get the default ACP as Microsoft would rather\n    // have folks use Unicode than a \"system\" code page, however this is the same\n    // codepage as the system default locale codepage.  (FWIW, the system locale is\n    // ONLY used for codepage, it should never be used for anything else)\n    GetLocaleInfoEx(LOCALE_NAME_SYSTEM_DEFAULT, LOCALE_IDEFAULTANSICODEPAGE | LOCALE_RETURN_NUMBER,\n        (LPWSTR)&codepageNumber, sizeof(codepageNumber) / sizeof(WCHAR));\n#else\n    // Win32 apps can call GetACP\n    codepageNumber = GetACP();\n#endif\n    // Special case for UTF-8\n    if (codepageNumber == 65001)\n    { \n        return \"UTF-8\";\n    }\n    // Windows codepages can look like windows-1252, so format the found number\n    // the numbers are eclectic, however all valid system code pages, besides UTF-8\n    // are between 3 and 19999\n    if (codepageNumber > 0 && codepageNumber < 20000)\n    {\n        sprintf(codepage, \"windows-%ld\", codepageNumber);\n        return codepage;\n    }\n    // If the codepage number call failed then return UTF-8\n    return \"UTF-8\";\n\n#elif U_POSIX_LOCALE\n    static char codesetName[100];\n    const char *localeName = NULL;\n    const char *name = NULL;\n\n    localeName = uprv_getPOSIXIDForDefaultCodepage();\n    uprv_memset(codesetName, 0, sizeof(codesetName));\n    /* On Solaris nl_langinfo returns C locale values unless setlocale\n     * was called earlier.\n     */\n#if (U_HAVE_NL_LANGINFO_CODESET && U_PLATFORM != U_PF_SOLARIS)\n    /* When available, check nl_langinfo first because it usually gives more\n       useful names. It depends on LC_CTYPE.\n       nl_langinfo may use the same buffer as setlocale. */\n    {\n        const char *codeset = nl_langinfo(U_NL_LANGINFO_CODESET);\n#if U_PLATFORM_IS_DARWIN_BASED || U_PLATFORM_IS_LINUX_BASED\n        /*\n         * On Linux and MacOSX, ensure that default codepage for non C/POSIX locale is UTF-8\n         * instead of ASCII.\n         */\n        if (uprv_strcmp(localeName, \"en_US_POSIX\") != 0) {\n            codeset = remapPlatformDependentCodepage(localeName, codeset);\n        } else\n#endif\n        {\n            codeset = remapPlatformDependentCodepage(NULL, codeset);\n        }\n\n        if (codeset != NULL) {\n            uprv_strncpy(codesetName, codeset, sizeof(codesetName));\n            codesetName[sizeof(codesetName)-1] = 0;\n            return codesetName;\n        }\n    }\n#endif\n\n    /* Use setlocale in a nice way, and then check some environment variables.\n       Maybe the application used setlocale already.\n    */\n    uprv_memset(codesetName, 0, sizeof(codesetName));\n    name = getCodepageFromPOSIXID(localeName, codesetName, sizeof(codesetName));\n    if (name) {\n        /* if we can find the codeset name from setlocale, return that. */\n        return name;\n    }\n\n    if (*codesetName == 0)\n    {\n        /* Everything failed. Return US ASCII (ISO 646). */\n        (void)uprv_strcpy(codesetName, \"US-ASCII\");\n    }\n    return codesetName;\n#else\n    return \"US-ASCII\";\n#endif\n}\n\n\nU_CAPI const char*  U_EXPORT2\nuprv_getDefaultCodepage()\n{\n    static char const  *name = NULL;\n    umtx_lock(NULL);\n    if (name == NULL) {\n        name = int_getDefaultCodepage();\n    }\n    umtx_unlock(NULL);\n    return name;\n}\n#endif  /* !U_CHARSET_IS_UTF8 */\n\n\n/* end of platform-specific implementation -------------- */\n\n/* version handling --------------------------------------------------------- */\n\nU_CAPI void U_EXPORT2\nu_versionFromString(UVersionInfo versionArray, const char *versionString) {\n    char *end;\n    uint16_t part=0;\n\n    if(versionArray==NULL) {\n        return;\n    }\n\n    if(versionString!=NULL) {\n        for(;;) {\n            versionArray[part]=(uint8_t)uprv_strtoul(versionString, &end, 10);\n            if(end==versionString || ++part==U_MAX_VERSION_LENGTH || *end!=U_VERSION_DELIMITER) {\n                break;\n            }\n            versionString=end+1;\n        }\n    }\n\n    while(part<U_MAX_VERSION_LENGTH) {\n        versionArray[part++]=0;\n    }\n}\n\nU_CAPI void U_EXPORT2\nu_versionFromUString(UVersionInfo versionArray, const UChar *versionString) {\n    if(versionArray!=NULL && versionString!=NULL) {\n        char versionChars[U_MAX_VERSION_STRING_LENGTH+1];\n        int32_t len = u_strlen(versionString);\n        if(len>U_MAX_VERSION_STRING_LENGTH) {\n            len = U_MAX_VERSION_STRING_LENGTH;\n        }\n        u_UCharsToChars(versionString, versionChars, len);\n        versionChars[len]=0;\n        u_versionFromString(versionArray, versionChars);\n    }\n}\n\nU_CAPI void U_EXPORT2\nu_versionToString(const UVersionInfo versionArray, char *versionString) {\n    uint16_t count, part;\n    uint8_t field;\n\n    if(versionString==NULL) {\n        return;\n    }\n\n    if(versionArray==NULL) {\n        versionString[0]=0;\n        return;\n    }\n\n    /* count how many fields need to be written */\n    for(count=4; count>0 && versionArray[count-1]==0; --count) {\n    }\n\n    if(count <= 1) {\n        count = 2;\n    }\n\n    /* write the first part */\n    /* write the decimal field value */\n    field=versionArray[0];\n    if(field>=100) {\n        *versionString++=(char)('0'+field/100);\n        field%=100;\n    }\n    if(field>=10) {\n        *versionString++=(char)('0'+field/10);\n        field%=10;\n    }\n    *versionString++=(char)('0'+field);\n\n    /* write the following parts */\n    for(part=1; part<count; ++part) {\n        /* write a dot first */\n        *versionString++=U_VERSION_DELIMITER;\n\n        /* write the decimal field value */\n        field=versionArray[part];\n        if(field>=100) {\n            *versionString++=(char)('0'+field/100);\n            field%=100;\n        }\n        if(field>=10) {\n            *versionString++=(char)('0'+field/10);\n            field%=10;\n        }\n        *versionString++=(char)('0'+field);\n    }\n\n    /* NUL-terminate */\n    *versionString=0;\n}\n\nU_CAPI void U_EXPORT2\nu_getVersion(UVersionInfo versionArray) {\n    (void)copyright;   // Suppress unused variable warning from clang.\n    u_versionFromString(versionArray, U_ICU_VERSION);\n}\n\n/**\n * icucfg.h dependent code \n */\n\n#if U_ENABLE_DYLOAD\n \n#if HAVE_DLOPEN && !U_PLATFORM_USES_ONLY_WIN32_API\n\n#if HAVE_DLFCN_H\n\n#ifdef __MVS__\n#ifndef __SUSV3\n#define __SUSV3 1\n#endif\n#endif\n#include <dlfcn.h>\n#endif\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  void *ret = NULL;\n  if(U_FAILURE(*status)) return ret;\n  ret =  dlopen(libName, RTLD_NOW|RTLD_GLOBAL);\n  if(ret==NULL) {\n#ifdef U_TRACE_DYLOAD\n    printf(\"dlerror on dlopen(%s): %s\\n\", libName, dlerror());\n#endif\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return ret;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  if(U_FAILURE(*status)) return;\n  dlclose(lib);\n}\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  union {\n      UVoidFunction *fp;\n      void *vp;\n  } uret;\n  uret.fp = NULL;\n  if(U_FAILURE(*status)) return uret.fp;\n  uret.vp = dlsym(lib, sym);\n  if(uret.vp == NULL) {\n#ifdef U_TRACE_DYLOAD\n    printf(\"dlerror on dlsym(%p,%s): %s\\n\", lib,sym, dlerror());\n#endif\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return uret.fp;\n}\n\n#else\n\n/* null (nonexistent) implementation. */\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  if(U_FAILURE(*status)) return NULL;\n  *status = U_UNSUPPORTED_ERROR;\n  return NULL;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  if(U_FAILURE(*status)) return;\n  *status = U_UNSUPPORTED_ERROR;\n  return;\n}\n\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  if(U_SUCCESS(*status)) {\n    *status = U_UNSUPPORTED_ERROR;\n  }\n  return (UVoidFunction*)NULL;\n}\n\n\n\n#endif\n\n#elif U_PLATFORM_USES_ONLY_WIN32_API\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n  HMODULE lib = NULL;\n  \n  if(U_FAILURE(*status)) return NULL;\n  \n  lib = LoadLibraryA(libName);\n  \n  if(lib==NULL) {\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  \n  return (void*)lib;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n  HMODULE handle = (HMODULE)lib;\n  if(U_FAILURE(*status)) return;\n  \n  FreeLibrary(handle);\n  \n  return;\n}\n\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  HMODULE handle = (HMODULE)lib;\n  UVoidFunction* addr = NULL;\n  \n  if(U_FAILURE(*status) || lib==NULL) return NULL;\n  \n  addr = (UVoidFunction*)GetProcAddress(handle, sym);\n  \n  if(addr==NULL) {\n    DWORD lastError = GetLastError();\n    if(lastError == ERROR_PROC_NOT_FOUND) {\n      *status = U_MISSING_RESOURCE_ERROR;\n    } else {\n      *status = U_UNSUPPORTED_ERROR; /* other unknown error. */\n    }\n  }\n  \n  return addr;\n}\n\n\n#else\n\n/* No dynamic loading set. */\n\nU_INTERNAL void * U_EXPORT2\nuprv_dl_open(const char *libName, UErrorCode *status) {\n    (void)libName;\n    if(U_FAILURE(*status)) return NULL;\n    *status = U_UNSUPPORTED_ERROR;\n    return NULL;\n}\n\nU_INTERNAL void U_EXPORT2\nuprv_dl_close(void *lib, UErrorCode *status) {\n    (void)lib;\n    if(U_FAILURE(*status)) return;\n    *status = U_UNSUPPORTED_ERROR;\n    return;\n}\n\n\nU_INTERNAL UVoidFunction* U_EXPORT2\nuprv_dlsym_func(void *lib, const char* sym, UErrorCode *status) {\n  (void)lib;\n  (void)sym;\n  if(U_SUCCESS(*status)) {\n    *status = U_UNSUPPORTED_ERROR;\n  }\n  return (UVoidFunction*)NULL;\n}\n\n#endif /* U_ENABLE_DYLOAD */\n\n/*\n * Hey, Emacs, please set the following:\n *\n * Local Variables:\n * indent-tabs-mode: nil\n * End:\n *\n */\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/extra/icu/source/common/icuplug.cpp": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n******************************************************************************\n*\n*   Copyright (C) 2009-2015, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*\n******************************************************************************\n*\n*  FILE NAME : icuplug.c\n*\n*   Date         Name        Description\n*   10/29/2009   sl          New.\n******************************************************************************\n*/\n\n#include \"unicode/icuplug.h\"\n\n\n#if UCONFIG_ENABLE_PLUGINS\n\n\n#include \"icuplugimp.h\"\n#include \"cstring.h\"\n#include \"cmemory.h\"\n#include \"putilimp.h\"\n#include \"ucln.h\"\n#include <stdio.h>\n#ifdef __MVS__  /* defined by z/OS compiler */\n#define _POSIX_SOURCE\n#include <cics.h> /* 12 Nov 2011 JAM iscics() function */\n#endif\n#include \"charstr.h\"\n\nusing namespace icu;\n\n#ifndef UPLUG_TRACE\n#define UPLUG_TRACE 0\n#endif\n\n#if UPLUG_TRACE\n#include <stdio.h>\n#define DBG(x) fprintf(stderr, \"%s:%d: \",__FILE__,__LINE__); fprintf x\n#endif\n\n/**\n * Internal structure of an ICU plugin. \n */\n\nstruct UPlugData {\n  UPlugEntrypoint  *entrypoint; /**< plugin entrypoint */\n  uint32_t structSize;    /**< initialized to the size of this structure */\n  uint32_t token;         /**< must be U_PLUG_TOKEN */\n  void *lib;              /**< plugin library, or NULL */\n  char libName[UPLUG_NAME_MAX];   /**< library name */\n  char sym[UPLUG_NAME_MAX];        /**< plugin symbol, or NULL */\n  char config[UPLUG_NAME_MAX];     /**< configuration data */\n  void *context;          /**< user context data */\n  char name[UPLUG_NAME_MAX];   /**< name of plugin */\n  UPlugLevel  level; /**< level of plugin */\n  UBool   awaitingLoad; /**< TRUE if the plugin is awaiting a load call */\n  UBool   dontUnload; /**< TRUE if plugin must stay resident (leak plugin and lib) */\n  UErrorCode pluginStatus; /**< status code of plugin */\n};\n\n\n\n#define UPLUG_LIBRARY_INITIAL_COUNT 8\n#define UPLUG_PLUGIN_INITIAL_COUNT 12\n\n/**\n * Remove an item\n * @param list the full list\n * @param listSize the number of entries in the list\n * @param memberSize the size of one member\n * @param itemToRemove the item number of the member\n * @return the new listsize \n */\nstatic int32_t uplug_removeEntryAt(void *list, int32_t listSize, int32_t memberSize, int32_t itemToRemove) {\n  uint8_t *bytePtr = (uint8_t *)list;\n    \n  /* get rid of some bad cases first */\n  if(listSize<1) {\n    return listSize;\n  }\n    \n  /* is there anything to move? */\n  if(listSize > itemToRemove+1) {\n    memmove(bytePtr+(itemToRemove*memberSize), bytePtr+((itemToRemove+1)*memberSize), memberSize);\n  }\n    \n  return listSize-1;\n}\n\n\n\n\n#if U_ENABLE_DYLOAD\n/**\n * Library management. Internal. \n * @internal\n */\nstruct UPlugLibrary;\n\n/**\n * Library management. Internal. \n * @internal\n */\ntypedef struct UPlugLibrary {\n  void *lib;                           /**< library ptr */\n  char name[UPLUG_NAME_MAX]; /**< library name */\n  uint32_t ref;                        /**< reference count */\n} UPlugLibrary;\n\nstatic UPlugLibrary   staticLibraryList[UPLUG_LIBRARY_INITIAL_COUNT];\nstatic UPlugLibrary * libraryList = staticLibraryList;\nstatic int32_t libraryCount = 0;\nstatic int32_t libraryMax = UPLUG_LIBRARY_INITIAL_COUNT;\n\n/**\n * Search for a library. Doesn't lock\n * @param libName libname to search for\n * @return the library's struct\n */\nstatic int32_t searchForLibraryName(const char *libName) {\n  int32_t i;\n    \n  for(i=0;i<libraryCount;i++) {\n    if(!uprv_strcmp(libName, libraryList[i].name)) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nstatic int32_t searchForLibrary(void *lib) {\n  int32_t i;\n    \n  for(i=0;i<libraryCount;i++) {\n    if(lib==libraryList[i].lib) {\n      return i;\n    }\n  }\n  return -1;\n}\n\nU_INTERNAL char * U_EXPORT2\nuplug_findLibrary(void *lib, UErrorCode *status) {\n  int32_t libEnt;\n  char *ret = NULL;\n  if(U_FAILURE(*status)) {\n    return NULL;\n  }\n  libEnt = searchForLibrary(lib);\n  if(libEnt!=-1) { \n    ret = libraryList[libEnt].name;\n  } else {\n    *status = U_MISSING_RESOURCE_ERROR;\n  }\n  return ret;\n}\n\nU_INTERNAL void * U_EXPORT2\nuplug_openLibrary(const char *libName, UErrorCode *status) {\n  int32_t libEntry = -1;\n  void *lib = NULL;\n    \n  if(U_FAILURE(*status)) return NULL;\n\n  libEntry = searchForLibraryName(libName);\n  if(libEntry == -1) {\n    libEntry = libraryCount++;\n    if(libraryCount >= libraryMax) {\n      /* Ran out of library slots. Statically allocated because we can't depend on allocating memory.. */\n      *status = U_MEMORY_ALLOCATION_ERROR;\n#if UPLUG_TRACE\n      DBG((stderr, \"uplug_openLibrary() - out of library slots (max %d)\\n\", libraryMax));\n#endif\n      return NULL;\n    }\n    /* Some operating systems don't want \n       DL operations from multiple threads. */\n    libraryList[libEntry].lib = uprv_dl_open(libName, status);\n#if UPLUG_TRACE\n    DBG((stderr, \"uplug_openLibrary(%s,%s) libEntry %d, lib %p\\n\", libName, u_errorName(*status), libEntry, lib));\n#endif\n        \n    if(libraryList[libEntry].lib == NULL || U_FAILURE(*status)) {\n      /* cleanup. */\n      libraryList[libEntry].lib = NULL; /* failure with open */\n      libraryList[libEntry].name[0] = 0;\n#if UPLUG_TRACE\n      DBG((stderr, \"uplug_openLibrary(%s,%s) libEntry %d, lib %p\\n\", libName, u_errorName(*status), libEntry, lib));\n#endif\n      /* no need to free - just won't increase the count. */\n      libraryCount--;\n    } else { /* is it still there? */\n      /* link it in */\n      uprv_strncpy(libraryList[libEntry].name,libName,UPLUG_NAME_MAX);\n      libraryList[libEntry].ref=1;\n      lib = libraryList[libEntry].lib;\n    }\n\n  } else {\n    lib = libraryList[libEntry].lib;\n    libraryList[libEntry].ref++;\n  }\n  return lib;\n}\n\nU_INTERNAL void U_EXPORT2\nuplug_closeLibrary(void *lib, UErrorCode *status) {\n  int32_t i;\n    \n#if UPLUG_TRACE\n  DBG((stderr, \"uplug_closeLibrary(%p,%s) list %p\\n\", lib, u_errorName(*status), (void*)libraryList));\n#endif\n  if(U_FAILURE(*status)) return;\n    \n  for(i=0;i<libraryCount;i++) {\n    if(lib==libraryList[i].lib) {\n      if(--(libraryList[i].ref) == 0) {\n        uprv_dl_close(libraryList[i].lib, status);\n        libraryCount = uplug_removeEntryAt(libraryList, libraryCount, sizeof(*libraryList), i);\n      }\n      return;\n    }\n  }\n  *status = U_INTERNAL_PROGRAM_ERROR; /* could not find the entry! */\n}\n\n#endif\n\nstatic UPlugData pluginList[UPLUG_PLUGIN_INITIAL_COUNT];\nstatic int32_t pluginCount = 0;\n\n\n\n  \nstatic int32_t uplug_pluginNumber(UPlugData* d) {\n  UPlugData *pastPlug = &pluginList[pluginCount];\n  if(d<=pluginList) {\n    return 0;\n  } else if(d>=pastPlug) {\n    return pluginCount;\n  } else {\n    return (d-pluginList)/sizeof(pluginList[0]);\n  }\n}\n\n\nU_CAPI UPlugData * U_EXPORT2\nuplug_nextPlug(UPlugData *prior) {\n  if(prior==NULL) {\n    return pluginList;\n  } else {\n    UPlugData *nextPlug = &prior[1];\n    UPlugData *pastPlug = &pluginList[pluginCount];\n    \n    if(nextPlug>=pastPlug) {\n      return NULL;\n    } else {\n      return nextPlug;\n    }\n  }\n}\n\n\n\n/**\n * Call the plugin with some params\n */\nstatic void uplug_callPlug(UPlugData *plug, UPlugReason reason, UErrorCode *status) {\n  UPlugTokenReturn token;\n  if(plug==NULL||U_FAILURE(*status)) {\n    return;\n  }\n  token = (*(plug->entrypoint))(plug, reason, status);\n  if(token!=UPLUG_TOKEN) {\n    *status = U_INTERNAL_PROGRAM_ERROR;\n  }\n}\n\n\nstatic void uplug_unloadPlug(UPlugData *plug, UErrorCode *status) {\n  if(plug->awaitingLoad) {  /* shouldn't happen. Plugin hasn'tbeen loaded yet.*/\n    *status = U_INTERNAL_PROGRAM_ERROR;\n    return; \n  }\n  if(U_SUCCESS(plug->pluginStatus)) {\n    /* Don't unload a plug which has a failing load status - means it didn't actually load. */\n    uplug_callPlug(plug, UPLUG_REASON_UNLOAD, status);\n  }\n}\n\nstatic void uplug_queryPlug(UPlugData *plug, UErrorCode *status) {\n  if(!plug->awaitingLoad || !(plug->level == UPLUG_LEVEL_UNKNOWN) ) {  /* shouldn't happen. Plugin hasn'tbeen loaded yet.*/\n    *status = U_INTERNAL_PROGRAM_ERROR;\n    return; \n  }\n  plug->level = UPLUG_LEVEL_INVALID;\n  uplug_callPlug(plug, UPLUG_REASON_QUERY, status);\n  if(U_SUCCESS(*status)) { \n    if(plug->level == UPLUG_LEVEL_INVALID) {\n      plug->pluginStatus = U_PLUGIN_DIDNT_SET_LEVEL;\n      plug->awaitingLoad = FALSE;\n    }\n  } else {\n    plug->pluginStatus = U_INTERNAL_PROGRAM_ERROR;\n    plug->awaitingLoad = FALSE;\n  }\n}\n\n\nstatic void uplug_loadPlug(UPlugData *plug, UErrorCode *status) {\n  if(U_FAILURE(*status)) {\n    return;\n  }\n  if(!plug->awaitingLoad || (plug->level < UPLUG_LEVEL_LOW) ) {  /* shouldn't happen. Plugin hasn'tbeen loaded yet.*/\n    *status = U_INTERNAL_PROGRAM_ERROR;\n    return;\n  }\n  uplug_callPlug(plug, UPLUG_REASON_LOAD, status);\n  plug->awaitingLoad = FALSE;\n  if(!U_SUCCESS(*status)) {\n    plug->pluginStatus = U_INTERNAL_PROGRAM_ERROR;\n  }\n}\n\nstatic UPlugData *uplug_allocateEmptyPlug(UErrorCode *status)\n{\n  UPlugData *plug = NULL;\n\n  if(U_FAILURE(*status)) {\n    return NULL;\n  }\n\n  if(pluginCount == UPLUG_PLUGIN_INITIAL_COUNT) {\n    *status = U_MEMORY_ALLOCATION_ERROR;\n    return NULL;\n  }\n\n  plug = &pluginList[pluginCount++];\n\n  plug->token = UPLUG_TOKEN;\n  plug->structSize = sizeof(UPlugData);\n  plug->name[0]=0;\n  plug->level = UPLUG_LEVEL_UNKNOWN; /* initialize to null state */\n  plug->awaitingLoad = TRUE;\n  plug->dontUnload = FALSE;\n  plug->pluginStatus = U_ZERO_ERROR;\n  plug->libName[0] = 0;\n  plug->config[0]=0;\n  plug->sym[0]=0;\n  plug->lib=NULL;\n  plug->entrypoint=NULL;\n\n\n  return plug;\n}\n\nstatic UPlugData *uplug_allocatePlug(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *symName,\n                                     UErrorCode *status) {\n  UPlugData *plug = uplug_allocateEmptyPlug(status);\n  if(U_FAILURE(*status)) {\n    return NULL;\n  }\n\n  if(config!=NULL) {\n    uprv_strncpy(plug->config, config, UPLUG_NAME_MAX);\n  } else {\n    plug->config[0] = 0;\n  }\n    \n  if(symName!=NULL) {\n    uprv_strncpy(plug->sym, symName, UPLUG_NAME_MAX);\n  } else {\n    plug->sym[0] = 0;\n  }\n    \n  plug->entrypoint = entrypoint;\n  plug->lib = lib;\n  uplug_queryPlug(plug, status);\n    \n  return plug;\n}\n\nstatic void uplug_deallocatePlug(UPlugData *plug, UErrorCode *status) {\n  UErrorCode subStatus = U_ZERO_ERROR;\n  if(!plug->dontUnload) {\n#if U_ENABLE_DYLOAD\n    uplug_closeLibrary(plug->lib, &subStatus);\n#endif\n  }\n  plug->lib = NULL;\n  if(U_SUCCESS(*status) && U_FAILURE(subStatus)) {\n    *status = subStatus;\n  }\n  /* shift plugins up and decrement count. */\n  if(U_SUCCESS(*status)) {\n    /* all ok- remove. */\n    pluginCount = uplug_removeEntryAt(pluginList, pluginCount, sizeof(plug[0]), uplug_pluginNumber(plug));\n  } else {\n    /* not ok- leave as a message. */\n    plug->awaitingLoad=FALSE;\n    plug->entrypoint=0;\n    plug->dontUnload=TRUE;\n  }\n}\n\nstatic void uplug_doUnloadPlug(UPlugData *plugToRemove, UErrorCode *status) {\n  if(plugToRemove != NULL) {\n    uplug_unloadPlug(plugToRemove, status);\n    uplug_deallocatePlug(plugToRemove, status);\n  }\n}\n\nU_CAPI void U_EXPORT2\nuplug_removePlug(UPlugData *plug, UErrorCode *status)  {\n  UPlugData *cursor = NULL;\n  UPlugData *plugToRemove = NULL;\n  if(U_FAILURE(*status)) return;\n    \n  for(cursor=pluginList;cursor!=NULL;) {\n    if(cursor==plug) {\n      plugToRemove = plug;\n      cursor=NULL;\n    } else {\n      cursor = uplug_nextPlug(cursor);\n    }\n  }\n    \n  uplug_doUnloadPlug(plugToRemove, status);\n}\n\n\n\n\nU_CAPI void U_EXPORT2 \nuplug_setPlugNoUnload(UPlugData *data, UBool dontUnload)\n{\n  data->dontUnload = dontUnload;\n}\n\n\nU_CAPI void U_EXPORT2\nuplug_setPlugLevel(UPlugData *data, UPlugLevel level) {\n  data->level = level;\n}\n\n\nU_CAPI UPlugLevel U_EXPORT2\nuplug_getPlugLevel(UPlugData *data) {\n  return data->level;\n}\n\n\nU_CAPI void U_EXPORT2\nuplug_setPlugName(UPlugData *data, const char *name) {\n  uprv_strncpy(data->name, name, UPLUG_NAME_MAX);\n}\n\n\nU_CAPI const char * U_EXPORT2\nuplug_getPlugName(UPlugData *data) {\n  return data->name;\n}\n\n\nU_CAPI const char * U_EXPORT2\nuplug_getSymbolName(UPlugData *data) {\n  return data->sym;\n}\n\nU_CAPI const char * U_EXPORT2\nuplug_getLibraryName(UPlugData *data, UErrorCode *status) {\n  if(data->libName[0]) {\n    return data->libName;\n  } else {\n#if U_ENABLE_DYLOAD\n    return uplug_findLibrary(data->lib, status);\n#else\n    return NULL;\n#endif\n  }\n}\n\nU_CAPI void * U_EXPORT2\nuplug_getLibrary(UPlugData *data) {\n  return data->lib;\n}\n\nU_CAPI void * U_EXPORT2\nuplug_getContext(UPlugData *data) {\n  return data->context;\n}\n\n\nU_CAPI void U_EXPORT2\nuplug_setContext(UPlugData *data, void *context) {\n  data->context = context;\n}\n\nU_CAPI const char* U_EXPORT2\nuplug_getConfiguration(UPlugData *data) {\n  return data->config;\n}\n\nU_INTERNAL UPlugData* U_EXPORT2\nuplug_getPlugInternal(int32_t n) { \n  if(n <0 || n >= pluginCount) {\n    return NULL;\n  } else { \n    return &(pluginList[n]);\n  }\n}\n\n\nU_CAPI UErrorCode U_EXPORT2\nuplug_getPlugLoadStatus(UPlugData *plug) {\n  return plug->pluginStatus;\n}\n\n\n\n\n/**\n * Initialize a plugin fron an entrypoint and library - but don't load it.\n */\nstatic UPlugData* uplug_initPlugFromEntrypointAndLibrary(UPlugEntrypoint *entrypoint, const char *config, void *lib, const char *sym,\n                                                         UErrorCode *status) {\n  UPlugData *plug = NULL;\n\n  plug = uplug_allocatePlug(entrypoint, config, lib, sym, status);\n\n  if(U_SUCCESS(*status)) {\n    return plug;\n  } else {\n    uplug_deallocatePlug(plug, status);\n    return NULL;\n  }\n}\n\nU_CAPI UPlugData* U_EXPORT2\nuplug_loadPlugFromEntrypoint(UPlugEntrypoint *entrypoint, const char *config, UErrorCode *status) {\n  UPlugData* plug = uplug_initPlugFromEntrypointAndLibrary(entrypoint, config, NULL, NULL, status);\n  uplug_loadPlug(plug, status);\n  return plug;\n}\n\n#if U_ENABLE_DYLOAD\n\nstatic UPlugData* \nuplug_initErrorPlug(const char *libName, const char *sym, const char *config, const char *nameOrError, UErrorCode loadStatus, UErrorCode *status)\n{\n  UPlugData *plug = uplug_allocateEmptyPlug(status);\n  if(U_FAILURE(*status)) return NULL;\n\n  plug->pluginStatus = loadStatus;\n  plug->awaitingLoad = FALSE; /* Won't load. */\n  plug->dontUnload = TRUE; /* cannot unload. */\n\n  if(sym!=NULL) {\n    uprv_strncpy(plug->sym, sym, UPLUG_NAME_MAX);\n  }\n\n  if(libName!=NULL) {\n    uprv_strncpy(plug->libName, libName, UPLUG_NAME_MAX);\n  }\n\n  if(nameOrError!=NULL) {\n    uprv_strncpy(plug->name, nameOrError, UPLUG_NAME_MAX);\n  }\n\n  if(config!=NULL) {\n    uprv_strncpy(plug->config, config, UPLUG_NAME_MAX);\n  }\n\n  return plug;\n}\n\n/**\n * Fetch a plugin from DLL, and then initialize it from a library- but don't load it.\n */\nstatic UPlugData* \nuplug_initPlugFromLibrary(const char *libName, const char *sym, const char *config, UErrorCode *status) {\n  void *lib = NULL;\n  UPlugData *plug = NULL;\n  if(U_FAILURE(*status)) { return NULL; }\n  lib = uplug_openLibrary(libName, status);\n  if(lib!=NULL && U_SUCCESS(*status)) {\n    UPlugEntrypoint *entrypoint = NULL;\n    entrypoint = (UPlugEntrypoint*)uprv_dlsym_func(lib, sym, status);\n\n    if(entrypoint!=NULL&&U_SUCCESS(*status)) {\n      plug = uplug_initPlugFromEntrypointAndLibrary(entrypoint, config, lib, sym, status);\n      if(plug!=NULL&&U_SUCCESS(*status)) {\n        plug->lib = lib; /* plug takes ownership of library */\n        lib = NULL; /* library is now owned by plugin. */\n      }\n    } else {\n      UErrorCode subStatus = U_ZERO_ERROR;\n      plug = uplug_initErrorPlug(libName,sym,config,\"ERROR: Could not load entrypoint\",(lib==NULL)?U_MISSING_RESOURCE_ERROR:*status,&subStatus);\n    }\n    if(lib!=NULL) { /* still need to close the lib */\n      UErrorCode subStatus = U_ZERO_ERROR;\n      uplug_closeLibrary(lib, &subStatus); /* don't care here */\n    }\n  } else {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    plug = uplug_initErrorPlug(libName,sym,config,\"ERROR: could not load library\",(lib==NULL)?U_MISSING_RESOURCE_ERROR:*status,&subStatus);\n  }\n  return plug;\n}\n\nU_CAPI UPlugData* U_EXPORT2\nuplug_loadPlugFromLibrary(const char *libName, const char *sym, const char *config, UErrorCode *status) { \n  UPlugData *plug = NULL;\n  if(U_FAILURE(*status)) { return NULL; }\n  plug = uplug_initPlugFromLibrary(libName, sym, config, status);\n  uplug_loadPlug(plug, status);\n\n  return plug;\n}\n\n#endif\n\nstatic UPlugLevel gCurrentLevel = UPLUG_LEVEL_LOW;\n\nU_CAPI UPlugLevel U_EXPORT2 uplug_getCurrentLevel() {\n  return gCurrentLevel;\n}\n\nstatic UBool U_CALLCONV uplug_cleanup(void)\n{\n  int32_t i;\n    \n  UPlugData *pluginToRemove;\n  /* cleanup plugs */\n  for(i=0;i<pluginCount;i++) {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    pluginToRemove = &pluginList[i];\n    /* unload and deallocate */\n    uplug_doUnloadPlug(pluginToRemove, &subStatus);\n  }\n  /* close other held libs? */\n  gCurrentLevel = UPLUG_LEVEL_LOW;\n  return TRUE;\n}\n\n#if U_ENABLE_DYLOAD\n\nstatic void uplug_loadWaitingPlugs(UErrorCode *status) {\n  int32_t i;\n  UPlugLevel currentLevel = uplug_getCurrentLevel();\n    \n  if(U_FAILURE(*status)) {\n    return;\n  }\n#if UPLUG_TRACE\n  DBG((stderr,  \"uplug_loadWaitingPlugs() Level: %d\\n\", currentLevel));\n#endif\n  /* pass #1: low level plugs */\n  for(i=0;i<pluginCount;i++) {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    UPlugData *pluginToLoad = &pluginList[i];\n    if(pluginToLoad->awaitingLoad) {\n      if(pluginToLoad->level == UPLUG_LEVEL_LOW) {\n        if(currentLevel > UPLUG_LEVEL_LOW) {\n          pluginToLoad->pluginStatus = U_PLUGIN_TOO_HIGH;\n        } else {\n          UPlugLevel newLevel;\n          uplug_loadPlug(pluginToLoad, &subStatus);\n          newLevel = uplug_getCurrentLevel();\n          if(newLevel > currentLevel) {\n            pluginToLoad->pluginStatus = U_PLUGIN_CHANGED_LEVEL_WARNING;\n            currentLevel = newLevel;\n          }\n        }\n        pluginToLoad->awaitingLoad = FALSE;\n      } \n    }\n  }    \n  for(i=0;i<pluginCount;i++) {\n    UErrorCode subStatus = U_ZERO_ERROR;\n    UPlugData *pluginToLoad = &pluginList[i];\n        \n    if(pluginToLoad->awaitingLoad) {\n      if(pluginToLoad->level == UPLUG_LEVEL_INVALID) { \n        pluginToLoad->pluginStatus = U_PLUGIN_DIDNT_SET_LEVEL;\n      } else if(pluginToLoad->level == UPLUG_LEVEL_UNKNOWN) {\n        pluginToLoad->pluginStatus = U_INTERNAL_PROGRAM_ERROR;\n      } else {\n        uplug_loadPlug(pluginToLoad, &subStatus);\n      }\n      pluginToLoad->awaitingLoad = FALSE;\n    }\n  }\n    \n#if UPLUG_TRACE\n  DBG((stderr,  \" Done Loading Plugs. Level: %d\\n\", (int32_t)uplug_getCurrentLevel()));\n#endif\n}\n\n/* Name of the plugin config file */\nstatic char plugin_file[2048] = \"\";\n#endif\n\nU_INTERNAL const char* U_EXPORT2\nuplug_getPluginFile() {\n#if U_ENABLE_DYLOAD && !UCONFIG_NO_FILE_IO\n  return plugin_file;\n#else\n  return NULL;\n#endif\n}\n\n\n//  uplug_init()  is called first thing from u_init().\n\nU_CAPI void U_EXPORT2\nuplug_init(UErrorCode *status) {\n#if !U_ENABLE_DYLOAD\n  (void)status; /* unused */\n#elif !UCONFIG_NO_FILE_IO\n  CharString plugin_dir;\n  const char *env = getenv(\"ICU_PLUGINS\");\n\n  if(U_FAILURE(*status)) return;\n  if(env != NULL) {\n    plugin_dir.append(env, -1, *status);\n  }\n  if(U_FAILURE(*status)) return;\n\n#if defined(DEFAULT_ICU_PLUGINS) \n  if(plugin_dir.isEmpty()) {\n    plugin_dir.append(DEFAULT_ICU_PLUGINS, -1, *status);\n  }\n#endif\n\n#if UPLUG_TRACE\n  DBG((stderr, \"ICU_PLUGINS=%s\\n\", plugin_dir.data()));\n#endif\n\n  if(!plugin_dir.isEmpty()) {\n    FILE *f;\n        \n    CharString pluginFile;\n#ifdef OS390BATCH\n/* There are potentially a lot of ways to implement a plugin directory on OS390/zOS  */\n/* Keeping in mind that unauthorized file access is logged, monitored, and enforced  */\n/* I've chosen to open a DDNAME if BATCH and leave it alone for (presumably) UNIX    */\n/* System Services.  Alternative techniques might be allocating a member in          */\n/* SYS1.PARMLIB or setting an environment variable \"ICU_PLUGIN_PATH\" (?).  The       */\n/* DDNAME can be connected to a file in the HFS if need be.                          */\n\n    pluginFile.append(\"//DD:ICUPLUG\", -1, *status);        /* JAM 20 Oct 2011 */\n#else\n    pluginFile.append(plugin_dir, *status);\n    pluginFile.append(U_FILE_SEP_STRING, -1, *status);\n    pluginFile.append(\"icuplugins\", -1, *status);\n    pluginFile.append(U_ICU_VERSION_SHORT, -1, *status);\n    pluginFile.append(\".txt\", -1, *status);\n#endif\n\n#if UPLUG_TRACE\n    DBG((stderr, \"status=%s\\n\", u_errorName(*status)));\n#endif\n\n    if(U_FAILURE(*status)) {\n      return;\n    }\n    if((size_t)pluginFile.length() > (sizeof(plugin_file)-1)) {\n      *status = U_BUFFER_OVERFLOW_ERROR;\n#if UPLUG_TRACE\n      DBG((stderr, \"status=%s\\n\", u_errorName(*status)));\n#endif\n      return;\n    }\n    \n    /* plugin_file is not used for processing - it is only used \n       so that uplug_getPluginFile() works (i.e. icuinfo)\n    */\n    uprv_strncpy(plugin_file, pluginFile.data(), sizeof(plugin_file));\n        \n#if UPLUG_TRACE\n    DBG((stderr, \"pluginfile= %s len %d/%d\\n\", plugin_file, (int)strlen(plugin_file), (int)sizeof(plugin_file)));\n#endif\n        \n#ifdef __MVS__\n    if (iscics()) /* 12 Nov 2011 JAM */\n    {\n        f = NULL;\n    }\n    else\n#endif\n    {\n        f = fopen(pluginFile.data(), \"r\");\n    }\n\n    if(f != NULL) {\n      char linebuf[1024];\n      char *p, *libName=NULL, *symName=NULL, *config=NULL;\n      int32_t line = 0;\n            \n            \n      while(fgets(linebuf,1023,f)) {\n        line++;\n\n        if(!*linebuf || *linebuf=='#') {\n          continue;\n        } else {\n          p = linebuf;\n          while(*p&&isspace((int)*p))\n            p++;\n          if(!*p || *p=='#') continue;\n          libName = p;\n          while(*p&&!isspace((int)*p)) {\n            p++;\n          }\n          if(!*p || *p=='#') continue; /* no tab after libname */\n          *p=0; /* end of libname */\n          p++;\n          while(*p&&isspace((int)*p)) {\n            p++;\n          }\n          if(!*p||*p=='#') continue; /* no symname after libname +tab */\n          symName = p;\n          while(*p&&!isspace((int)*p)) {\n            p++;\n          }\n                    \n          if(*p) { /* has config */\n            *p=0;\n            ++p;\n            while(*p&&isspace((int)*p)) {\n              p++;\n            }\n            if(*p) {\n              config = p;\n            }\n          }\n                    \n          /* chop whitespace at the end of the config */\n          if(config!=NULL&&*config!=0) {\n            p = config+strlen(config);\n            while(p>config&&isspace((int)*(--p))) {\n              *p=0;\n            }\n          }\n                \n          /* OK, we're good. */\n          { \n            UErrorCode subStatus = U_ZERO_ERROR;\n            UPlugData *plug = uplug_initPlugFromLibrary(libName, symName, config, &subStatus);\n            if(U_FAILURE(subStatus) && U_SUCCESS(*status)) {\n              *status = subStatus;\n            }\n#if UPLUG_TRACE\n            DBG((stderr, \"PLUGIN libName=[%s], sym=[%s], config=[%s]\\n\", libName, symName, config));\n            DBG((stderr, \" -> %p, %s\\n\", (void*)plug, u_errorName(subStatus)));\n#else\n            (void)plug; /* unused */\n#endif\n          }\n        }\n      }\n      fclose(f);\n    } else {\n#if UPLUG_TRACE\n      DBG((stderr, \"Can't open plugin file %s\\n\", plugin_file));\n#endif\n    }\n  }\n  uplug_loadWaitingPlugs(status);\n#endif /* U_ENABLE_DYLOAD */\n  gCurrentLevel = UPLUG_LEVEL_HIGH;\n  ucln_registerCleanup(UCLN_UPLUG, uplug_cleanup);\n}\n\n#endif\n\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/extra/icu/source/common/unicode/urename.h": "// \u00a9 2016 and later: Unicode, Inc. and others.\n// License & terms of use: http://www.unicode.org/copyright.html\n/*\n*******************************************************************************\n*   Copyright (C) 2002-2016, International Business Machines\n*   Corporation and others.  All Rights Reserved.\n*******************************************************************************\n*\n*   file name:  urename.h\n*   encoding:   UTF-8\n*   tab size:   8 (not used)\n*   indentation:4\n*\n*   Created by: Perl script tools/genren.pl written by Vladimir Weinstein\n*\n*  Contains data for renaming ICU exports.\n*  Gets included by umachine.h\n*\n*  THIS FILE IS MACHINE-GENERATED, DON'T PLAY WITH IT IF YOU DON'T KNOW WHAT\n*  YOU ARE DOING, OTHERWISE VERY BAD THINGS WILL HAPPEN!\n*/\n\n#ifndef URENAME_H\n#define URENAME_H\n\n/* U_DISABLE_RENAMING can be defined in the following ways:\n *   - when running configure, e.g.\n *        runConfigureICU Linux --disable-renaming\n *   - by changing the default setting of U_DISABLE_RENAMING in uconfig.h\n */\n\n#include \"unicode/uconfig.h\"\n\n#if !U_DISABLE_RENAMING\n\n/* We need the U_ICU_ENTRY_POINT_RENAME definition. There's a default one in unicode/uvernum.h we can use, but we will give\n   the platform a chance to define it first.\n   Normally (if utypes.h or umachine.h was included first) this will not be necessary as it will already be defined.\n */\n\n#ifndef U_ICU_ENTRY_POINT_RENAME\n#include \"unicode/umachine.h\"\n#endif\n\n/* If we still don't have U_ICU_ENTRY_POINT_RENAME use the default. */\n#ifndef U_ICU_ENTRY_POINT_RENAME\n#include \"unicode/uvernum.h\"\n#endif\n\n/* Error out before the following defines cause very strange and unexpected code breakage */\n#ifndef U_ICU_ENTRY_POINT_RENAME\n#error U_ICU_ENTRY_POINT_RENAME is not defined - cannot continue. Consider defining U_DISABLE_RENAMING if renaming should not be used.\n#endif\n\n\n/* C exports renaming data */\n\n#define T_CString_int64ToString U_ICU_ENTRY_POINT_RENAME(T_CString_int64ToString)\n#define T_CString_integerToString U_ICU_ENTRY_POINT_RENAME(T_CString_integerToString)\n#define T_CString_stringToInteger U_ICU_ENTRY_POINT_RENAME(T_CString_stringToInteger)\n#define T_CString_toLowerCase U_ICU_ENTRY_POINT_RENAME(T_CString_toLowerCase)\n#define T_CString_toUpperCase U_ICU_ENTRY_POINT_RENAME(T_CString_toUpperCase)\n#define UCNV_FROM_U_CALLBACK_ESCAPE U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_ESCAPE)\n#define UCNV_FROM_U_CALLBACK_SKIP U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_SKIP)\n#define UCNV_FROM_U_CALLBACK_STOP U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_STOP)\n#define UCNV_FROM_U_CALLBACK_SUBSTITUTE U_ICU_ENTRY_POINT_RENAME(UCNV_FROM_U_CALLBACK_SUBSTITUTE)\n#define UCNV_TO_U_CALLBACK_ESCAPE U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_ESCAPE)\n#define UCNV_TO_U_CALLBACK_SKIP U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_SKIP)\n#define UCNV_TO_U_CALLBACK_STOP U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_STOP)\n#define UCNV_TO_U_CALLBACK_SUBSTITUTE U_ICU_ENTRY_POINT_RENAME(UCNV_TO_U_CALLBACK_SUBSTITUTE)\n#define UDataMemory_createNewInstance U_ICU_ENTRY_POINT_RENAME(UDataMemory_createNewInstance)\n#define UDataMemory_init U_ICU_ENTRY_POINT_RENAME(UDataMemory_init)\n#define UDataMemory_isLoaded U_ICU_ENTRY_POINT_RENAME(UDataMemory_isLoaded)\n#define UDataMemory_normalizeDataPointer U_ICU_ENTRY_POINT_RENAME(UDataMemory_normalizeDataPointer)\n#define UDataMemory_setData U_ICU_ENTRY_POINT_RENAME(UDataMemory_setData)\n#define UDatamemory_assign U_ICU_ENTRY_POINT_RENAME(UDatamemory_assign)\n#define _ASCIIData U_ICU_ENTRY_POINT_RENAME(_ASCIIData)\n#define _Bocu1Data U_ICU_ENTRY_POINT_RENAME(_Bocu1Data)\n#define _CESU8Data U_ICU_ENTRY_POINT_RENAME(_CESU8Data)\n#define _CompoundTextData U_ICU_ENTRY_POINT_RENAME(_CompoundTextData)\n#define _HZData U_ICU_ENTRY_POINT_RENAME(_HZData)\n#define _IMAPData U_ICU_ENTRY_POINT_RENAME(_IMAPData)\n#define _ISCIIData U_ICU_ENTRY_POINT_RENAME(_ISCIIData)\n#define _ISO2022Data U_ICU_ENTRY_POINT_RENAME(_ISO2022Data)\n#define _LMBCSData1 U_ICU_ENTRY_POINT_RENAME(_LMBCSData1)\n#define _LMBCSData11 U_ICU_ENTRY_POINT_RENAME(_LMBCSData11)\n#define _LMBCSData16 U_ICU_ENTRY_POINT_RENAME(_LMBCSData16)\n#define _LMBCSData17 U_ICU_ENTRY_POINT_RENAME(_LMBCSData17)\n#define _LMBCSData18 U_ICU_ENTRY_POINT_RENAME(_LMBCSData18)\n#define _LMBCSData19 U_ICU_ENTRY_POINT_RENAME(_LMBCSData19)\n#define _LMBCSData2 U_ICU_ENTRY_POINT_RENAME(_LMBCSData2)\n#define _LMBCSData3 U_ICU_ENTRY_POINT_RENAME(_LMBCSData3)\n#define _LMBCSData4 U_ICU_ENTRY_POINT_RENAME(_LMBCSData4)\n#define _LMBCSData5 U_ICU_ENTRY_POINT_RENAME(_LMBCSData5)\n#define _LMBCSData6 U_ICU_ENTRY_POINT_RENAME(_LMBCSData6)\n#define _LMBCSData8 U_ICU_ENTRY_POINT_RENAME(_LMBCSData8)\n#define _Latin1Data U_ICU_ENTRY_POINT_RENAME(_Latin1Data)\n#define _MBCSData U_ICU_ENTRY_POINT_RENAME(_MBCSData)\n#define _SCSUData U_ICU_ENTRY_POINT_RENAME(_SCSUData)\n#define _UTF16BEData U_ICU_ENTRY_POINT_RENAME(_UTF16BEData)\n#define _UTF16Data U_ICU_ENTRY_POINT_RENAME(_UTF16Data)\n#define _UTF16LEData U_ICU_ENTRY_POINT_RENAME(_UTF16LEData)\n#define _UTF16v2Data U_ICU_ENTRY_POINT_RENAME(_UTF16v2Data)\n#define _UTF32BEData U_ICU_ENTRY_POINT_RENAME(_UTF32BEData)\n#define _UTF32Data U_ICU_ENTRY_POINT_RENAME(_UTF32Data)\n#define _UTF32LEData U_ICU_ENTRY_POINT_RENAME(_UTF32LEData)\n#define _UTF7Data U_ICU_ENTRY_POINT_RENAME(_UTF7Data)\n#define _UTF8Data U_ICU_ENTRY_POINT_RENAME(_UTF8Data)\n#define allowedHourFormatsCleanup U_ICU_ENTRY_POINT_RENAME(allowedHourFormatsCleanup)\n#define cmemory_cleanup U_ICU_ENTRY_POINT_RENAME(cmemory_cleanup)\n#define dayPeriodRulesCleanup U_ICU_ENTRY_POINT_RENAME(dayPeriodRulesCleanup)\n#define deleteAllowedHourFormats U_ICU_ENTRY_POINT_RENAME(deleteAllowedHourFormats)\n#define gTimeZoneFilesInitOnce U_ICU_ENTRY_POINT_RENAME(gTimeZoneFilesInitOnce)\n#define izrule_clone U_ICU_ENTRY_POINT_RENAME(izrule_clone)\n#define izrule_close U_ICU_ENTRY_POINT_RENAME(izrule_close)\n#define izrule_equals U_ICU_ENTRY_POINT_RENAME(izrule_equals)\n#define izrule_getDSTSavings U_ICU_ENTRY_POINT_RENAME(izrule_getDSTSavings)\n#define izrule_getDynamicClassID U_ICU_ENTRY_POINT_RENAME(izrule_getDynamicClassID)\n#define izrule_getFinalStart U_ICU_ENTRY_POINT_RENAME(izrule_getFinalStart)\n#define izrule_getFirstStart U_ICU_ENTRY_POINT_RENAME(izrule_getFirstStart)\n#define izrule_getName U_ICU_ENTRY_POINT_RENAME(izrule_getName)\n#define izrule_getNextStart U_ICU_ENTRY_POINT_RENAME(izrule_getNextStart)\n#define izrule_getPreviousStart U_ICU_ENTRY_POINT_RENAME(izrule_getPreviousStart)\n#define izrule_getRawOffset U_ICU_ENTRY_POINT_RENAME(izrule_getRawOffset)\n#define izrule_getStaticClassID U_ICU_ENTRY_POINT_RENAME(izrule_getStaticClassID)\n#define izrule_isEquivalentTo U_ICU_ENTRY_POINT_RENAME(izrule_isEquivalentTo)\n#define izrule_open U_ICU_ENTRY_POINT_RENAME(izrule_open)\n#define locale_getKeywords U_ICU_ENTRY_POINT_RENAME(locale_getKeywords)\n#define locale_getKeywordsStart U_ICU_ENTRY_POINT_RENAME(locale_getKeywordsStart)\n#define locale_get_default U_ICU_ENTRY_POINT_RENAME(locale_get_default)\n#define locale_set_default U_ICU_ENTRY_POINT_RENAME(locale_set_default)\n#define pl_addFontRun U_ICU_ENTRY_POINT_RENAME(pl_addFontRun)\n#define pl_addLocaleRun U_ICU_ENTRY_POINT_RENAME(pl_addLocaleRun)\n#define pl_addValueRun U_ICU_ENTRY_POINT_RENAME(pl_addValueRun)\n#define pl_close U_ICU_ENTRY_POINT_RENAME(pl_close)\n#define pl_closeFontRuns U_ICU_ENTRY_POINT_RENAME(pl_closeFontRuns)\n#define pl_closeLine U_ICU_ENTRY_POINT_RENAME(pl_closeLine)\n#define pl_closeLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_closeLocaleRuns)\n#define pl_closeValueRuns U_ICU_ENTRY_POINT_RENAME(pl_closeValueRuns)\n#define pl_countLineRuns U_ICU_ENTRY_POINT_RENAME(pl_countLineRuns)\n#define pl_create U_ICU_ENTRY_POINT_RENAME(pl_create)\n#define pl_getAscent U_ICU_ENTRY_POINT_RENAME(pl_getAscent)\n#define pl_getDescent U_ICU_ENTRY_POINT_RENAME(pl_getDescent)\n#define pl_getFontRunCount U_ICU_ENTRY_POINT_RENAME(pl_getFontRunCount)\n#define pl_getFontRunFont U_ICU_ENTRY_POINT_RENAME(pl_getFontRunFont)\n#define pl_getFontRunLastLimit U_ICU_ENTRY_POINT_RENAME(pl_getFontRunLastLimit)\n#define pl_getFontRunLimit U_ICU_ENTRY_POINT_RENAME(pl_getFontRunLimit)\n#define pl_getLeading U_ICU_ENTRY_POINT_RENAME(pl_getLeading)\n#define pl_getLineAscent U_ICU_ENTRY_POINT_RENAME(pl_getLineAscent)\n#define pl_getLineDescent U_ICU_ENTRY_POINT_RENAME(pl_getLineDescent)\n#define pl_getLineLeading U_ICU_ENTRY_POINT_RENAME(pl_getLineLeading)\n#define pl_getLineVisualRun U_ICU_ENTRY_POINT_RENAME(pl_getLineVisualRun)\n#define pl_getLineWidth U_ICU_ENTRY_POINT_RENAME(pl_getLineWidth)\n#define pl_getLocaleRunCount U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunCount)\n#define pl_getLocaleRunLastLimit U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunLastLimit)\n#define pl_getLocaleRunLimit U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunLimit)\n#define pl_getLocaleRunLocale U_ICU_ENTRY_POINT_RENAME(pl_getLocaleRunLocale)\n#define pl_getParagraphLevel U_ICU_ENTRY_POINT_RENAME(pl_getParagraphLevel)\n#define pl_getTextDirection U_ICU_ENTRY_POINT_RENAME(pl_getTextDirection)\n#define pl_getValueRunCount U_ICU_ENTRY_POINT_RENAME(pl_getValueRunCount)\n#define pl_getValueRunLastLimit U_ICU_ENTRY_POINT_RENAME(pl_getValueRunLastLimit)\n#define pl_getValueRunLimit U_ICU_ENTRY_POINT_RENAME(pl_getValueRunLimit)\n#define pl_getValueRunValue U_ICU_ENTRY_POINT_RENAME(pl_getValueRunValue)\n#define pl_getVisualRunAscent U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunAscent)\n#define pl_getVisualRunDescent U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunDescent)\n#define pl_getVisualRunDirection U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunDirection)\n#define pl_getVisualRunFont U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunFont)\n#define pl_getVisualRunGlyphCount U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunGlyphCount)\n#define pl_getVisualRunGlyphToCharMap U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunGlyphToCharMap)\n#define pl_getVisualRunGlyphs U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunGlyphs)\n#define pl_getVisualRunLeading U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunLeading)\n#define pl_getVisualRunPositions U_ICU_ENTRY_POINT_RENAME(pl_getVisualRunPositions)\n#define pl_isComplex U_ICU_ENTRY_POINT_RENAME(pl_isComplex)\n#define pl_nextLine U_ICU_ENTRY_POINT_RENAME(pl_nextLine)\n#define pl_openEmptyFontRuns U_ICU_ENTRY_POINT_RENAME(pl_openEmptyFontRuns)\n#define pl_openEmptyLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_openEmptyLocaleRuns)\n#define pl_openEmptyValueRuns U_ICU_ENTRY_POINT_RENAME(pl_openEmptyValueRuns)\n#define pl_openFontRuns U_ICU_ENTRY_POINT_RENAME(pl_openFontRuns)\n#define pl_openLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_openLocaleRuns)\n#define pl_openValueRuns U_ICU_ENTRY_POINT_RENAME(pl_openValueRuns)\n#define pl_reflow U_ICU_ENTRY_POINT_RENAME(pl_reflow)\n#define pl_resetFontRuns U_ICU_ENTRY_POINT_RENAME(pl_resetFontRuns)\n#define pl_resetLocaleRuns U_ICU_ENTRY_POINT_RENAME(pl_resetLocaleRuns)\n#define pl_resetValueRuns U_ICU_ENTRY_POINT_RENAME(pl_resetValueRuns)\n#define res_countArrayItems U_ICU_ENTRY_POINT_RENAME(res_countArrayItems)\n#define res_findResource U_ICU_ENTRY_POINT_RENAME(res_findResource)\n#define res_getAlias U_ICU_ENTRY_POINT_RENAME(res_getAlias)\n#define res_getArrayItem U_ICU_ENTRY_POINT_RENAME(res_getArrayItem)\n#define res_getBinary U_ICU_ENTRY_POINT_RENAME(res_getBinary)\n#define res_getIntVector U_ICU_ENTRY_POINT_RENAME(res_getIntVector)\n#define res_getPublicType U_ICU_ENTRY_POINT_RENAME(res_getPublicType)\n#define res_getResource U_ICU_ENTRY_POINT_RENAME(res_getResource)\n#define res_getString U_ICU_ENTRY_POINT_RENAME(res_getString)\n#define res_getTableItemByIndex U_ICU_ENTRY_POINT_RENAME(res_getTableItemByIndex)\n#define res_getTableItemByKey U_ICU_ENTRY_POINT_RENAME(res_getTableItemByKey)\n#define res_load U_ICU_ENTRY_POINT_RENAME(res_load)\n#define res_read U_ICU_ENTRY_POINT_RENAME(res_read)\n#define res_unload U_ICU_ENTRY_POINT_RENAME(res_unload)\n#define u_UCharsToChars U_ICU_ENTRY_POINT_RENAME(u_UCharsToChars)\n#define u_austrcpy U_ICU_ENTRY_POINT_RENAME(u_austrcpy)\n#define u_austrncpy U_ICU_ENTRY_POINT_RENAME(u_austrncpy)\n#define u_caseInsensitivePrefixMatch U_ICU_ENTRY_POINT_RENAME(u_caseInsensitivePrefixMatch)\n#define u_catclose U_ICU_ENTRY_POINT_RENAME(u_catclose)\n#define u_catgets U_ICU_ENTRY_POINT_RENAME(u_catgets)\n#define u_catopen U_ICU_ENTRY_POINT_RENAME(u_catopen)\n#define u_charAge U_ICU_ENTRY_POINT_RENAME(u_charAge)\n#define u_charDigitValue U_ICU_ENTRY_POINT_RENAME(u_charDigitValue)\n#define u_charDirection U_ICU_ENTRY_POINT_RENAME(u_charDirection)\n#define u_charFromName U_ICU_ENTRY_POINT_RENAME(u_charFromName)\n#define u_charMirror U_ICU_ENTRY_POINT_RENAME(u_charMirror)\n#define u_charName U_ICU_ENTRY_POINT_RENAME(u_charName)\n#define u_charType U_ICU_ENTRY_POINT_RENAME(u_charType)\n#define u_charsToUChars U_ICU_ENTRY_POINT_RENAME(u_charsToUChars)\n#define u_cleanup U_ICU_ENTRY_POINT_RENAME(u_cleanup)\n#define u_countChar32 U_ICU_ENTRY_POINT_RENAME(u_countChar32)\n#define u_digit U_ICU_ENTRY_POINT_RENAME(u_digit)\n#define u_enumCharNames U_ICU_ENTRY_POINT_RENAME(u_enumCharNames)\n#define u_enumCharTypes U_ICU_ENTRY_POINT_RENAME(u_enumCharTypes)\n#define u_errorName U_ICU_ENTRY_POINT_RENAME(u_errorName)\n#define u_fadopt U_ICU_ENTRY_POINT_RENAME(u_fadopt)\n#define u_fclose U_ICU_ENTRY_POINT_RENAME(u_fclose)\n#define u_feof U_ICU_ENTRY_POINT_RENAME(u_feof)\n#define u_fflush U_ICU_ENTRY_POINT_RENAME(u_fflush)\n#define u_fgetConverter U_ICU_ENTRY_POINT_RENAME(u_fgetConverter)\n#define u_fgetNumberFormat U_ICU_ENTRY_POINT_RENAME(u_fgetNumberFormat)\n#define u_fgetc U_ICU_ENTRY_POINT_RENAME(u_fgetc)\n#define u_fgetcodepage U_ICU_ENTRY_POINT_RENAME(u_fgetcodepage)\n#define u_fgetcx U_ICU_ENTRY_POINT_RENAME(u_fgetcx)\n#define u_fgetfile U_ICU_ENTRY_POINT_RENAME(u_fgetfile)\n#define u_fgetlocale U_ICU_ENTRY_POINT_RENAME(u_fgetlocale)\n#define u_fgets U_ICU_ENTRY_POINT_RENAME(u_fgets)\n#define u_file_read U_ICU_ENTRY_POINT_RENAME(u_file_read)\n#define u_file_write U_ICU_ENTRY_POINT_RENAME(u_file_write)\n#define u_file_write_flush U_ICU_ENTRY_POINT_RENAME(u_file_write_flush)\n#define u_finit U_ICU_ENTRY_POINT_RENAME(u_finit)\n#define u_flushDefaultConverter U_ICU_ENTRY_POINT_RENAME(u_flushDefaultConverter)\n#define u_foldCase U_ICU_ENTRY_POINT_RENAME(u_foldCase)\n#define u_fopen U_ICU_ENTRY_POINT_RENAME(u_fopen)\n#define u_fopen_u U_ICU_ENTRY_POINT_RENAME(u_fopen_u)\n#define u_forDigit U_ICU_ENTRY_POINT_RENAME(u_forDigit)\n#define u_formatMessage U_ICU_ENTRY_POINT_RENAME(u_formatMessage)\n#define u_formatMessageWithError U_ICU_ENTRY_POINT_RENAME(u_formatMessageWithError)\n#define u_fprintf U_ICU_ENTRY_POINT_RENAME(u_fprintf)\n#define u_fprintf_u U_ICU_ENTRY_POINT_RENAME(u_fprintf_u)\n#define u_fputc U_ICU_ENTRY_POINT_RENAME(u_fputc)\n#define u_fputs U_ICU_ENTRY_POINT_RENAME(u_fputs)\n#define u_frewind U_ICU_ENTRY_POINT_RENAME(u_frewind)\n#define u_fscanf U_ICU_ENTRY_POINT_RENAME(u_fscanf)\n#define u_fscanf_u U_ICU_ENTRY_POINT_RENAME(u_fscanf_u)\n#define u_fsetcodepage U_ICU_ENTRY_POINT_RENAME(u_fsetcodepage)\n#define u_fsetlocale U_ICU_ENTRY_POINT_RENAME(u_fsetlocale)\n#define u_fsettransliterator U_ICU_ENTRY_POINT_RENAME(u_fsettransliterator)\n#define u_fstropen U_ICU_ENTRY_POINT_RENAME(u_fstropen)\n#define u_fungetc U_ICU_ENTRY_POINT_RENAME(u_fungetc)\n#define u_getBidiPairedBracket U_ICU_ENTRY_POINT_RENAME(u_getBidiPairedBracket)\n#define u_getCombiningClass U_ICU_ENTRY_POINT_RENAME(u_getCombiningClass)\n#define u_getDataDirectory U_ICU_ENTRY_POINT_RENAME(u_getDataDirectory)\n#define u_getDataVersion U_ICU_ENTRY_POINT_RENAME(u_getDataVersion)\n#define u_getDefaultConverter U_ICU_ENTRY_POINT_RENAME(u_getDefaultConverter)\n#define u_getFC_NFKC_Closure U_ICU_ENTRY_POINT_RENAME(u_getFC_NFKC_Closure)\n#define u_getISOComment U_ICU_ENTRY_POINT_RENAME(u_getISOComment)\n#define u_getIntPropertyMaxValue U_ICU_ENTRY_POINT_RENAME(u_getIntPropertyMaxValue)\n#define u_getIntPropertyMinValue U_ICU_ENTRY_POINT_RENAME(u_getIntPropertyMinValue)\n#define u_getIntPropertyValue U_ICU_ENTRY_POINT_RENAME(u_getIntPropertyValue)\n#define u_getMainProperties U_ICU_ENTRY_POINT_RENAME(u_getMainProperties)\n#define u_getNumericValue U_ICU_ENTRY_POINT_RENAME(u_getNumericValue)\n#define u_getPropertyEnum U_ICU_ENTRY_POINT_RENAME(u_getPropertyEnum)\n#define u_getPropertyName U_ICU_ENTRY_POINT_RENAME(u_getPropertyName)\n#define u_getPropertyValueEnum U_ICU_ENTRY_POINT_RENAME(u_getPropertyValueEnum)\n#define u_getPropertyValueName U_ICU_ENTRY_POINT_RENAME(u_getPropertyValueName)\n#define u_getTimeZoneFilesDirectory U_ICU_ENTRY_POINT_RENAME(u_getTimeZoneFilesDirectory)\n#define u_getUnicodeProperties U_ICU_ENTRY_POINT_RENAME(u_getUnicodeProperties)\n#define u_getUnicodeVersion U_ICU_ENTRY_POINT_RENAME(u_getUnicodeVersion)\n#define u_getVersion U_ICU_ENTRY_POINT_RENAME(u_getVersion)\n#define u_get_stdout U_ICU_ENTRY_POINT_RENAME(u_get_stdout)\n#define u_hasBinaryProperty U_ICU_ENTRY_POINT_RENAME(u_hasBinaryProperty)\n#define u_init U_ICU_ENTRY_POINT_RENAME(u_init)\n#define u_isIDIgnorable U_ICU_ENTRY_POINT_RENAME(u_isIDIgnorable)\n#define u_isIDPart U_ICU_ENTRY_POINT_RENAME(u_isIDPart)\n#define u_isIDStart U_ICU_ENTRY_POINT_RENAME(u_isIDStart)\n#define u_isISOControl U_ICU_ENTRY_POINT_RENAME(u_isISOControl)\n#define u_isJavaIDPart U_ICU_ENTRY_POINT_RENAME(u_isJavaIDPart)\n#define u_isJavaIDStart U_ICU_ENTRY_POINT_RENAME(u_isJavaIDStart)\n#define u_isJavaSpaceChar U_ICU_ENTRY_POINT_RENAME(u_isJavaSpaceChar)\n#define u_isMirrored U_ICU_ENTRY_POINT_RENAME(u_isMirrored)\n#define u_isUAlphabetic U_ICU_ENTRY_POINT_RENAME(u_isUAlphabetic)\n#define u_isULowercase U_ICU_ENTRY_POINT_RENAME(u_isULowercase)\n#define u_isUUppercase U_ICU_ENTRY_POINT_RENAME(u_isUUppercase)\n#define u_isUWhiteSpace U_ICU_ENTRY_POINT_RENAME(u_isUWhiteSpace)\n#define u_isWhitespace U_ICU_ENTRY_POINT_RENAME(u_isWhitespace)\n#define u_isalnum U_ICU_ENTRY_POINT_RENAME(u_isalnum)\n#define u_isalnumPOSIX U_ICU_ENTRY_POINT_RENAME(u_isalnumPOSIX)\n#define u_isalpha U_ICU_ENTRY_POINT_RENAME(u_isalpha)\n#define u_isbase U_ICU_ENTRY_POINT_RENAME(u_isbase)\n#define u_isblank U_ICU_ENTRY_POINT_RENAME(u_isblank)\n#define u_iscntrl U_ICU_ENTRY_POINT_RENAME(u_iscntrl)\n#define u_isdefined U_ICU_ENTRY_POINT_RENAME(u_isdefined)\n#define u_isdigit U_ICU_ENTRY_POINT_RENAME(u_isdigit)\n#define u_isgraph U_ICU_ENTRY_POINT_RENAME(u_isgraph)\n#define u_isgraphPOSIX U_ICU_ENTRY_POINT_RENAME(u_isgraphPOSIX)\n#define u_islower U_ICU_ENTRY_POINT_RENAME(u_islower)\n#define u_isprint U_ICU_ENTRY_POINT_RENAME(u_isprint)\n#define u_isprintPOSIX U_ICU_ENTRY_POINT_RENAME(u_isprintPOSIX)\n#define u_ispunct U_ICU_ENTRY_POINT_RENAME(u_ispunct)\n#define u_isspace U_ICU_ENTRY_POINT_RENAME(u_isspace)\n#define u_istitle U_ICU_ENTRY_POINT_RENAME(u_istitle)\n#define u_isupper U_ICU_ENTRY_POINT_RENAME(u_isupper)\n#define u_isxdigit U_ICU_ENTRY_POINT_RENAME(u_isxdigit)\n#define u_locbund_close U_ICU_ENTRY_POINT_RENAME(u_locbund_close)\n#define u_locbund_getNumberFormat U_ICU_ENTRY_POINT_RENAME(u_locbund_getNumberFormat)\n#define u_locbund_init U_ICU_ENTRY_POINT_RENAME(u_locbund_init)\n#define u_memcasecmp U_ICU_ENTRY_POINT_RENAME(u_memcasecmp)\n#define u_memchr U_ICU_ENTRY_POINT_RENAME(u_memchr)\n#define u_memchr32 U_ICU_ENTRY_POINT_RENAME(u_memchr32)\n#define u_memcmp U_ICU_ENTRY_POINT_RENAME(u_memcmp)\n#define u_memcmpCodePointOrder U_ICU_ENTRY_POINT_RENAME(u_memcmpCodePointOrder)\n#define u_memcpy U_ICU_ENTRY_POINT_RENAME(u_memcpy)\n#define u_memmove U_ICU_ENTRY_POINT_RENAME(u_memmove)\n#define u_memrchr U_ICU_ENTRY_POINT_RENAME(u_memrchr)\n#define u_memrchr32 U_ICU_ENTRY_POINT_RENAME(u_memrchr32)\n#define u_memset U_ICU_ENTRY_POINT_RENAME(u_memset)\n#define u_parseMessage U_ICU_ENTRY_POINT_RENAME(u_parseMessage)\n#define u_parseMessageWithError U_ICU_ENTRY_POINT_RENAME(u_parseMessageWithError)\n#define u_printf U_ICU_ENTRY_POINT_RENAME(u_printf)\n#define u_printf_parse U_ICU_ENTRY_POINT_RENAME(u_printf_parse)\n#define u_printf_u U_ICU_ENTRY_POINT_RENAME(u_printf_u)\n#define u_releaseDefaultConverter U_ICU_ENTRY_POINT_RENAME(u_releaseDefaultConverter)\n#define u_scanf_parse U_ICU_ENTRY_POINT_RENAME(u_scanf_parse)\n#define u_setAtomicIncDecFunctions U_ICU_ENTRY_POINT_RENAME(u_setAtomicIncDecFunctions)\n#define u_setDataDirectory U_ICU_ENTRY_POINT_RENAME(u_setDataDirectory)\n#define u_setMemoryFunctions U_ICU_ENTRY_POINT_RENAME(u_setMemoryFunctions)\n#define u_setMutexFunctions U_ICU_ENTRY_POINT_RENAME(u_setMutexFunctions)\n#define u_setTimeZoneFilesDirectory U_ICU_ENTRY_POINT_RENAME(u_setTimeZoneFilesDirectory)\n#define u_shapeArabic U_ICU_ENTRY_POINT_RENAME(u_shapeArabic)\n#define u_snprintf U_ICU_ENTRY_POINT_RENAME(u_snprintf)\n#define u_snprintf_u U_ICU_ENTRY_POINT_RENAME(u_snprintf_u)\n#define u_sprintf U_ICU_ENTRY_POINT_RENAME(u_sprintf)\n#define u_sprintf_u U_ICU_ENTRY_POINT_RENAME(u_sprintf_u)\n#define u_sscanf U_ICU_ENTRY_POINT_RENAME(u_sscanf)\n#define u_sscanf_u U_ICU_ENTRY_POINT_RENAME(u_sscanf_u)\n#define u_strCaseCompare U_ICU_ENTRY_POINT_RENAME(u_strCaseCompare)\n#define u_strCompare U_ICU_ENTRY_POINT_RENAME(u_strCompare)\n#define u_strCompareIter U_ICU_ENTRY_POINT_RENAME(u_strCompareIter)\n#define u_strFindFirst U_ICU_ENTRY_POINT_RENAME(u_strFindFirst)\n#define u_strFindLast U_ICU_ENTRY_POINT_RENAME(u_strFindLast)\n#define u_strFoldCase U_ICU_ENTRY_POINT_RENAME(u_strFoldCase)\n#define u_strFromJavaModifiedUTF8WithSub U_ICU_ENTRY_POINT_RENAME(u_strFromJavaModifiedUTF8WithSub)\n#define u_strFromPunycode U_ICU_ENTRY_POINT_RENAME(u_strFromPunycode)\n#define u_strFromUTF32 U_ICU_ENTRY_POINT_RENAME(u_strFromUTF32)\n#define u_strFromUTF32WithSub U_ICU_ENTRY_POINT_RENAME(u_strFromUTF32WithSub)\n#define u_strFromUTF8 U_ICU_ENTRY_POINT_RENAME(u_strFromUTF8)\n#define u_strFromUTF8Lenient U_ICU_ENTRY_POINT_RENAME(u_strFromUTF8Lenient)\n#define u_strFromUTF8WithSub U_ICU_ENTRY_POINT_RENAME(u_strFromUTF8WithSub)\n#define u_strFromWCS U_ICU_ENTRY_POINT_RENAME(u_strFromWCS)\n#define u_strHasMoreChar32Than U_ICU_ENTRY_POINT_RENAME(u_strHasMoreChar32Than)\n#define u_strToJavaModifiedUTF8 U_ICU_ENTRY_POINT_RENAME(u_strToJavaModifiedUTF8)\n#define u_strToLower U_ICU_ENTRY_POINT_RENAME(u_strToLower)\n#define u_strToPunycode U_ICU_ENTRY_POINT_RENAME(u_strToPunycode)\n#define u_strToTitle U_ICU_ENTRY_POINT_RENAME(u_strToTitle)\n#define u_strToUTF32 U_ICU_ENTRY_POINT_RENAME(u_strToUTF32)\n#define u_strToUTF32WithSub U_ICU_ENTRY_POINT_RENAME(u_strToUTF32WithSub)\n#define u_strToUTF8 U_ICU_ENTRY_POINT_RENAME(u_strToUTF8)\n#define u_strToUTF8WithSub U_ICU_ENTRY_POINT_RENAME(u_strToUTF8WithSub)\n#define u_strToUpper U_ICU_ENTRY_POINT_RENAME(u_strToUpper)\n#define u_strToWCS U_ICU_ENTRY_POINT_RENAME(u_strToWCS)\n#define u_strcasecmp U_ICU_ENTRY_POINT_RENAME(u_strcasecmp)\n#define u_strcat U_ICU_ENTRY_POINT_RENAME(u_strcat)\n#define u_strchr U_ICU_ENTRY_POINT_RENAME(u_strchr)\n#define u_strchr32 U_ICU_ENTRY_POINT_RENAME(u_strchr32)\n#define u_strcmp U_ICU_ENTRY_POINT_RENAME(u_strcmp)\n#define u_strcmpCodePointOrder U_ICU_ENTRY_POINT_RENAME(u_strcmpCodePointOrder)\n#define u_strcmpFold U_ICU_ENTRY_POINT_RENAME(u_strcmpFold)\n#define u_strcpy U_ICU_ENTRY_POINT_RENAME(u_strcpy)\n#define u_strcspn U_ICU_ENTRY_POINT_RENAME(u_strcspn)\n#define u_strlen U_ICU_ENTRY_POINT_RENAME(u_strlen)\n#define u_strncasecmp U_ICU_ENTRY_POINT_RENAME(u_strncasecmp)\n#define u_strncat U_ICU_ENTRY_POINT_RENAME(u_strncat)\n#define u_strncmp U_ICU_ENTRY_POINT_RENAME(u_strncmp)\n#define u_strncmpCodePointOrder U_ICU_ENTRY_POINT_RENAME(u_strncmpCodePointOrder)\n#define u_strncpy U_ICU_ENTRY_POINT_RENAME(u_strncpy)\n#define u_strpbrk U_ICU_ENTRY_POINT_RENAME(u_strpbrk)\n#define u_strrchr U_ICU_ENTRY_POINT_RENAME(u_strrchr)\n#define u_strrchr32 U_ICU_ENTRY_POINT_RENAME(u_strrchr32)\n#define u_strrstr U_ICU_ENTRY_POINT_RENAME(u_strrstr)\n#define u_strspn U_ICU_ENTRY_POINT_RENAME(u_strspn)\n#define u_strstr U_ICU_ENTRY_POINT_RENAME(u_strstr)\n#define u_strtok_r U_ICU_ENTRY_POINT_RENAME(u_strtok_r)\n#define u_terminateChars U_ICU_ENTRY_POINT_RENAME(u_terminateChars)\n#define u_terminateUChar32s U_ICU_ENTRY_POINT_RENAME(u_terminateUChar32s)\n#define u_terminateUChars U_ICU_ENTRY_POINT_RENAME(u_terminateUChars)\n#define u_terminateWChars U_ICU_ENTRY_POINT_RENAME(u_terminateWChars)\n#define u_tolower U_ICU_ENTRY_POINT_RENAME(u_tolower)\n#define u_totitle U_ICU_ENTRY_POINT_RENAME(u_totitle)\n#define u_toupper U_ICU_ENTRY_POINT_RENAME(u_toupper)\n#define u_uastrcpy U_ICU_ENTRY_POINT_RENAME(u_uastrcpy)\n#define u_uastrncpy U_ICU_ENTRY_POINT_RENAME(u_uastrncpy)\n#define u_unescape U_ICU_ENTRY_POINT_RENAME(u_unescape)\n#define u_unescapeAt U_ICU_ENTRY_POINT_RENAME(u_unescapeAt)\n#define u_versionFromString U_ICU_ENTRY_POINT_RENAME(u_versionFromString)\n#define u_versionFromUString U_ICU_ENTRY_POINT_RENAME(u_versionFromUString)\n#define u_versionToString U_ICU_ENTRY_POINT_RENAME(u_versionToString)\n#define u_vformatMessage U_ICU_ENTRY_POINT_RENAME(u_vformatMessage)\n#define u_vformatMessageWithError U_ICU_ENTRY_POINT_RENAME(u_vformatMessageWithError)\n#define u_vfprintf U_ICU_ENTRY_POINT_RENAME(u_vfprintf)\n#define u_vfprintf_u U_ICU_ENTRY_POINT_RENAME(u_vfprintf_u)\n#define u_vfscanf U_ICU_ENTRY_POINT_RENAME(u_vfscanf)\n#define u_vfscanf_u U_ICU_ENTRY_POINT_RENAME(u_vfscanf_u)\n#define u_vparseMessage U_ICU_ENTRY_POINT_RENAME(u_vparseMessage)\n#define u_vparseMessageWithError U_ICU_ENTRY_POINT_RENAME(u_vparseMessageWithError)\n#define u_vsnprintf U_ICU_ENTRY_POINT_RENAME(u_vsnprintf)\n#define u_vsnprintf_u U_ICU_ENTRY_POINT_RENAME(u_vsnprintf_u)\n#define u_vsprintf U_ICU_ENTRY_POINT_RENAME(u_vsprintf)\n#define u_vsprintf_u U_ICU_ENTRY_POINT_RENAME(u_vsprintf_u)\n#define u_vsscanf U_ICU_ENTRY_POINT_RENAME(u_vsscanf)\n#define u_vsscanf_u U_ICU_ENTRY_POINT_RENAME(u_vsscanf_u)\n#define u_writeIdenticalLevelRun U_ICU_ENTRY_POINT_RENAME(u_writeIdenticalLevelRun)\n#define ubidi_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(ubidi_addPropertyStarts)\n#define ubidi_close U_ICU_ENTRY_POINT_RENAME(ubidi_close)\n#define ubidi_countParagraphs U_ICU_ENTRY_POINT_RENAME(ubidi_countParagraphs)\n#define ubidi_countRuns U_ICU_ENTRY_POINT_RENAME(ubidi_countRuns)\n#define ubidi_getBaseDirection U_ICU_ENTRY_POINT_RENAME(ubidi_getBaseDirection)\n#define ubidi_getClass U_ICU_ENTRY_POINT_RENAME(ubidi_getClass)\n#define ubidi_getClassCallback U_ICU_ENTRY_POINT_RENAME(ubidi_getClassCallback)\n#define ubidi_getCustomizedClass U_ICU_ENTRY_POINT_RENAME(ubidi_getCustomizedClass)\n#define ubidi_getDirection U_ICU_ENTRY_POINT_RENAME(ubidi_getDirection)\n#define ubidi_getJoiningGroup U_ICU_ENTRY_POINT_RENAME(ubidi_getJoiningGroup)\n#define ubidi_getJoiningType U_ICU_ENTRY_POINT_RENAME(ubidi_getJoiningType)\n#define ubidi_getLength U_ICU_ENTRY_POINT_RENAME(ubidi_getLength)\n#define ubidi_getLevelAt U_ICU_ENTRY_POINT_RENAME(ubidi_getLevelAt)\n#define ubidi_getLevels U_ICU_ENTRY_POINT_RENAME(ubidi_getLevels)\n#define ubidi_getLogicalIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getLogicalIndex)\n#define ubidi_getLogicalMap U_ICU_ENTRY_POINT_RENAME(ubidi_getLogicalMap)\n#define ubidi_getLogicalRun U_ICU_ENTRY_POINT_RENAME(ubidi_getLogicalRun)\n#define ubidi_getMaxValue U_ICU_ENTRY_POINT_RENAME(ubidi_getMaxValue)\n#define ubidi_getMemory U_ICU_ENTRY_POINT_RENAME(ubidi_getMemory)\n#define ubidi_getMirror U_ICU_ENTRY_POINT_RENAME(ubidi_getMirror)\n#define ubidi_getPairedBracket U_ICU_ENTRY_POINT_RENAME(ubidi_getPairedBracket)\n#define ubidi_getPairedBracketType U_ICU_ENTRY_POINT_RENAME(ubidi_getPairedBracketType)\n#define ubidi_getParaLevel U_ICU_ENTRY_POINT_RENAME(ubidi_getParaLevel)\n#define ubidi_getParaLevelAtIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getParaLevelAtIndex)\n#define ubidi_getParagraph U_ICU_ENTRY_POINT_RENAME(ubidi_getParagraph)\n#define ubidi_getParagraphByIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getParagraphByIndex)\n#define ubidi_getProcessedLength U_ICU_ENTRY_POINT_RENAME(ubidi_getProcessedLength)\n#define ubidi_getReorderingMode U_ICU_ENTRY_POINT_RENAME(ubidi_getReorderingMode)\n#define ubidi_getReorderingOptions U_ICU_ENTRY_POINT_RENAME(ubidi_getReorderingOptions)\n#define ubidi_getResultLength U_ICU_ENTRY_POINT_RENAME(ubidi_getResultLength)\n#define ubidi_getRuns U_ICU_ENTRY_POINT_RENAME(ubidi_getRuns)\n#define ubidi_getSingleton U_ICU_ENTRY_POINT_RENAME(ubidi_getSingleton)\n#define ubidi_getText U_ICU_ENTRY_POINT_RENAME(ubidi_getText)\n#define ubidi_getVisualIndex U_ICU_ENTRY_POINT_RENAME(ubidi_getVisualIndex)\n#define ubidi_getVisualMap U_ICU_ENTRY_POINT_RENAME(ubidi_getVisualMap)\n#define ubidi_getVisualRun U_ICU_ENTRY_POINT_RENAME(ubidi_getVisualRun)\n#define ubidi_invertMap U_ICU_ENTRY_POINT_RENAME(ubidi_invertMap)\n#define ubidi_isBidiControl U_ICU_ENTRY_POINT_RENAME(ubidi_isBidiControl)\n#define ubidi_isInverse U_ICU_ENTRY_POINT_RENAME(ubidi_isInverse)\n#define ubidi_isJoinControl U_ICU_ENTRY_POINT_RENAME(ubidi_isJoinControl)\n#define ubidi_isMirrored U_ICU_ENTRY_POINT_RENAME(ubidi_isMirrored)\n#define ubidi_isOrderParagraphsLTR U_ICU_ENTRY_POINT_RENAME(ubidi_isOrderParagraphsLTR)\n#define ubidi_open U_ICU_ENTRY_POINT_RENAME(ubidi_open)\n#define ubidi_openSized U_ICU_ENTRY_POINT_RENAME(ubidi_openSized)\n#define ubidi_orderParagraphsLTR U_ICU_ENTRY_POINT_RENAME(ubidi_orderParagraphsLTR)\n#define ubidi_reorderLogical U_ICU_ENTRY_POINT_RENAME(ubidi_reorderLogical)\n#define ubidi_reorderVisual U_ICU_ENTRY_POINT_RENAME(ubidi_reorderVisual)\n#define ubidi_setClassCallback U_ICU_ENTRY_POINT_RENAME(ubidi_setClassCallback)\n#define ubidi_setContext U_ICU_ENTRY_POINT_RENAME(ubidi_setContext)\n#define ubidi_setInverse U_ICU_ENTRY_POINT_RENAME(ubidi_setInverse)\n#define ubidi_setLine U_ICU_ENTRY_POINT_RENAME(ubidi_setLine)\n#define ubidi_setPara U_ICU_ENTRY_POINT_RENAME(ubidi_setPara)\n#define ubidi_setReorderingMode U_ICU_ENTRY_POINT_RENAME(ubidi_setReorderingMode)\n#define ubidi_setReorderingOptions U_ICU_ENTRY_POINT_RENAME(ubidi_setReorderingOptions)\n#define ubidi_writeReordered U_ICU_ENTRY_POINT_RENAME(ubidi_writeReordered)\n#define ubidi_writeReverse U_ICU_ENTRY_POINT_RENAME(ubidi_writeReverse)\n#define ubiditransform_close U_ICU_ENTRY_POINT_RENAME(ubiditransform_close)\n#define ubiditransform_open U_ICU_ENTRY_POINT_RENAME(ubiditransform_open)\n#define ubiditransform_transform U_ICU_ENTRY_POINT_RENAME(ubiditransform_transform)\n#define ublock_getCode U_ICU_ENTRY_POINT_RENAME(ublock_getCode)\n#define ubrk_close U_ICU_ENTRY_POINT_RENAME(ubrk_close)\n#define ubrk_countAvailable U_ICU_ENTRY_POINT_RENAME(ubrk_countAvailable)\n#define ubrk_current U_ICU_ENTRY_POINT_RENAME(ubrk_current)\n#define ubrk_first U_ICU_ENTRY_POINT_RENAME(ubrk_first)\n#define ubrk_following U_ICU_ENTRY_POINT_RENAME(ubrk_following)\n#define ubrk_getAvailable U_ICU_ENTRY_POINT_RENAME(ubrk_getAvailable)\n#define ubrk_getBinaryRules U_ICU_ENTRY_POINT_RENAME(ubrk_getBinaryRules)\n#define ubrk_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ubrk_getLocaleByType)\n#define ubrk_getRuleStatus U_ICU_ENTRY_POINT_RENAME(ubrk_getRuleStatus)\n#define ubrk_getRuleStatusVec U_ICU_ENTRY_POINT_RENAME(ubrk_getRuleStatusVec)\n#define ubrk_isBoundary U_ICU_ENTRY_POINT_RENAME(ubrk_isBoundary)\n#define ubrk_last U_ICU_ENTRY_POINT_RENAME(ubrk_last)\n#define ubrk_next U_ICU_ENTRY_POINT_RENAME(ubrk_next)\n#define ubrk_open U_ICU_ENTRY_POINT_RENAME(ubrk_open)\n#define ubrk_openBinaryRules U_ICU_ENTRY_POINT_RENAME(ubrk_openBinaryRules)\n#define ubrk_openRules U_ICU_ENTRY_POINT_RENAME(ubrk_openRules)\n#define ubrk_preceding U_ICU_ENTRY_POINT_RENAME(ubrk_preceding)\n#define ubrk_previous U_ICU_ENTRY_POINT_RENAME(ubrk_previous)\n#define ubrk_refreshUText U_ICU_ENTRY_POINT_RENAME(ubrk_refreshUText)\n#define ubrk_safeClone U_ICU_ENTRY_POINT_RENAME(ubrk_safeClone)\n#define ubrk_setText U_ICU_ENTRY_POINT_RENAME(ubrk_setText)\n#define ubrk_setUText U_ICU_ENTRY_POINT_RENAME(ubrk_setUText)\n#define ubrk_swap U_ICU_ENTRY_POINT_RENAME(ubrk_swap)\n#define ucache_compareKeys U_ICU_ENTRY_POINT_RENAME(ucache_compareKeys)\n#define ucache_deleteKey U_ICU_ENTRY_POINT_RENAME(ucache_deleteKey)\n#define ucache_hashKeys U_ICU_ENTRY_POINT_RENAME(ucache_hashKeys)\n#define ucal_add U_ICU_ENTRY_POINT_RENAME(ucal_add)\n#define ucal_clear U_ICU_ENTRY_POINT_RENAME(ucal_clear)\n#define ucal_clearField U_ICU_ENTRY_POINT_RENAME(ucal_clearField)\n#define ucal_clone U_ICU_ENTRY_POINT_RENAME(ucal_clone)\n#define ucal_close U_ICU_ENTRY_POINT_RENAME(ucal_close)\n#define ucal_countAvailable U_ICU_ENTRY_POINT_RENAME(ucal_countAvailable)\n#define ucal_equivalentTo U_ICU_ENTRY_POINT_RENAME(ucal_equivalentTo)\n#define ucal_get U_ICU_ENTRY_POINT_RENAME(ucal_get)\n#define ucal_getAttribute U_ICU_ENTRY_POINT_RENAME(ucal_getAttribute)\n#define ucal_getAvailable U_ICU_ENTRY_POINT_RENAME(ucal_getAvailable)\n#define ucal_getCanonicalTimeZoneID U_ICU_ENTRY_POINT_RENAME(ucal_getCanonicalTimeZoneID)\n#define ucal_getDSTSavings U_ICU_ENTRY_POINT_RENAME(ucal_getDSTSavings)\n#define ucal_getDayOfWeekType U_ICU_ENTRY_POINT_RENAME(ucal_getDayOfWeekType)\n#define ucal_getDefaultTimeZone U_ICU_ENTRY_POINT_RENAME(ucal_getDefaultTimeZone)\n#define ucal_getFieldDifference U_ICU_ENTRY_POINT_RENAME(ucal_getFieldDifference)\n#define ucal_getGregorianChange U_ICU_ENTRY_POINT_RENAME(ucal_getGregorianChange)\n#define ucal_getKeywordValuesForLocale U_ICU_ENTRY_POINT_RENAME(ucal_getKeywordValuesForLocale)\n#define ucal_getLimit U_ICU_ENTRY_POINT_RENAME(ucal_getLimit)\n#define ucal_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ucal_getLocaleByType)\n#define ucal_getMillis U_ICU_ENTRY_POINT_RENAME(ucal_getMillis)\n#define ucal_getNow U_ICU_ENTRY_POINT_RENAME(ucal_getNow)\n#define ucal_getTZDataVersion U_ICU_ENTRY_POINT_RENAME(ucal_getTZDataVersion)\n#define ucal_getTimeZoneDisplayName U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneDisplayName)\n#define ucal_getTimeZoneID U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneID)\n#define ucal_getTimeZoneIDForWindowsID U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneIDForWindowsID)\n#define ucal_getTimeZoneTransitionDate U_ICU_ENTRY_POINT_RENAME(ucal_getTimeZoneTransitionDate)\n#define ucal_getType U_ICU_ENTRY_POINT_RENAME(ucal_getType)\n#define ucal_getWeekendTransition U_ICU_ENTRY_POINT_RENAME(ucal_getWeekendTransition)\n#define ucal_getWindowsTimeZoneID U_ICU_ENTRY_POINT_RENAME(ucal_getWindowsTimeZoneID)\n#define ucal_inDaylightTime U_ICU_ENTRY_POINT_RENAME(ucal_inDaylightTime)\n#define ucal_isSet U_ICU_ENTRY_POINT_RENAME(ucal_isSet)\n#define ucal_isWeekend U_ICU_ENTRY_POINT_RENAME(ucal_isWeekend)\n#define ucal_open U_ICU_ENTRY_POINT_RENAME(ucal_open)\n#define ucal_openCountryTimeZones U_ICU_ENTRY_POINT_RENAME(ucal_openCountryTimeZones)\n#define ucal_openTimeZoneIDEnumeration U_ICU_ENTRY_POINT_RENAME(ucal_openTimeZoneIDEnumeration)\n#define ucal_openTimeZones U_ICU_ENTRY_POINT_RENAME(ucal_openTimeZones)\n#define ucal_roll U_ICU_ENTRY_POINT_RENAME(ucal_roll)\n#define ucal_set U_ICU_ENTRY_POINT_RENAME(ucal_set)\n#define ucal_setAttribute U_ICU_ENTRY_POINT_RENAME(ucal_setAttribute)\n#define ucal_setDate U_ICU_ENTRY_POINT_RENAME(ucal_setDate)\n#define ucal_setDateTime U_ICU_ENTRY_POINT_RENAME(ucal_setDateTime)\n#define ucal_setDefaultTimeZone U_ICU_ENTRY_POINT_RENAME(ucal_setDefaultTimeZone)\n#define ucal_setGregorianChange U_ICU_ENTRY_POINT_RENAME(ucal_setGregorianChange)\n#define ucal_setMillis U_ICU_ENTRY_POINT_RENAME(ucal_setMillis)\n#define ucal_setTimeZone U_ICU_ENTRY_POINT_RENAME(ucal_setTimeZone)\n#define ucase_addCaseClosure U_ICU_ENTRY_POINT_RENAME(ucase_addCaseClosure)\n#define ucase_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(ucase_addPropertyStarts)\n#define ucase_addStringCaseClosure U_ICU_ENTRY_POINT_RENAME(ucase_addStringCaseClosure)\n#define ucase_fold U_ICU_ENTRY_POINT_RENAME(ucase_fold)\n#define ucase_getCaseLocale U_ICU_ENTRY_POINT_RENAME(ucase_getCaseLocale)\n#define ucase_getType U_ICU_ENTRY_POINT_RENAME(ucase_getType)\n#define ucase_getTypeOrIgnorable U_ICU_ENTRY_POINT_RENAME(ucase_getTypeOrIgnorable)\n#define ucase_hasBinaryProperty U_ICU_ENTRY_POINT_RENAME(ucase_hasBinaryProperty)\n#define ucase_isCaseSensitive U_ICU_ENTRY_POINT_RENAME(ucase_isCaseSensitive)\n#define ucase_isSoftDotted U_ICU_ENTRY_POINT_RENAME(ucase_isSoftDotted)\n#define ucase_toFullFolding U_ICU_ENTRY_POINT_RENAME(ucase_toFullFolding)\n#define ucase_toFullLower U_ICU_ENTRY_POINT_RENAME(ucase_toFullLower)\n#define ucase_toFullTitle U_ICU_ENTRY_POINT_RENAME(ucase_toFullTitle)\n#define ucase_toFullUpper U_ICU_ENTRY_POINT_RENAME(ucase_toFullUpper)\n#define ucase_tolower U_ICU_ENTRY_POINT_RENAME(ucase_tolower)\n#define ucase_totitle U_ICU_ENTRY_POINT_RENAME(ucase_totitle)\n#define ucase_toupper U_ICU_ENTRY_POINT_RENAME(ucase_toupper)\n#define ucasemap_close U_ICU_ENTRY_POINT_RENAME(ucasemap_close)\n#define ucasemap_getBreakIterator U_ICU_ENTRY_POINT_RENAME(ucasemap_getBreakIterator)\n#define ucasemap_getLocale U_ICU_ENTRY_POINT_RENAME(ucasemap_getLocale)\n#define ucasemap_getOptions U_ICU_ENTRY_POINT_RENAME(ucasemap_getOptions)\n#define ucasemap_internalUTF8ToTitle U_ICU_ENTRY_POINT_RENAME(ucasemap_internalUTF8ToTitle)\n#define ucasemap_mapUTF8 U_ICU_ENTRY_POINT_RENAME(ucasemap_mapUTF8)\n#define ucasemap_open U_ICU_ENTRY_POINT_RENAME(ucasemap_open)\n#define ucasemap_setBreakIterator U_ICU_ENTRY_POINT_RENAME(ucasemap_setBreakIterator)\n#define ucasemap_setLocale U_ICU_ENTRY_POINT_RENAME(ucasemap_setLocale)\n#define ucasemap_setOptions U_ICU_ENTRY_POINT_RENAME(ucasemap_setOptions)\n#define ucasemap_toTitle U_ICU_ENTRY_POINT_RENAME(ucasemap_toTitle)\n#define ucasemap_utf8FoldCase U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8FoldCase)\n#define ucasemap_utf8ToLower U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8ToLower)\n#define ucasemap_utf8ToTitle U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8ToTitle)\n#define ucasemap_utf8ToUpper U_ICU_ENTRY_POINT_RENAME(ucasemap_utf8ToUpper)\n#define uchar_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(uchar_addPropertyStarts)\n#define uchar_swapNames U_ICU_ENTRY_POINT_RENAME(uchar_swapNames)\n#define ucln_cleanupOne U_ICU_ENTRY_POINT_RENAME(ucln_cleanupOne)\n#define ucln_common_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_common_registerCleanup)\n#define ucln_i18n_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_i18n_registerCleanup)\n#define ucln_io_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_io_registerCleanup)\n#define ucln_lib_cleanup U_ICU_ENTRY_POINT_RENAME(ucln_lib_cleanup)\n#define ucln_registerCleanup U_ICU_ENTRY_POINT_RENAME(ucln_registerCleanup)\n#define ucnv_MBCSFromUChar32 U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSFromUChar32)\n#define ucnv_MBCSFromUnicodeWithOffsets U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSFromUnicodeWithOffsets)\n#define ucnv_MBCSGetFilteredUnicodeSetForUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSGetFilteredUnicodeSetForUnicode)\n#define ucnv_MBCSGetType U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSGetType)\n#define ucnv_MBCSGetUnicodeSetForUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSGetUnicodeSetForUnicode)\n#define ucnv_MBCSIsLeadByte U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSIsLeadByte)\n#define ucnv_MBCSSimpleGetNextUChar U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSSimpleGetNextUChar)\n#define ucnv_MBCSToUnicodeWithOffsets U_ICU_ENTRY_POINT_RENAME(ucnv_MBCSToUnicodeWithOffsets)\n#define ucnv_bld_countAvailableConverters U_ICU_ENTRY_POINT_RENAME(ucnv_bld_countAvailableConverters)\n#define ucnv_bld_getAvailableConverter U_ICU_ENTRY_POINT_RENAME(ucnv_bld_getAvailableConverter)\n#define ucnv_canCreateConverter U_ICU_ENTRY_POINT_RENAME(ucnv_canCreateConverter)\n#define ucnv_cbFromUWriteBytes U_ICU_ENTRY_POINT_RENAME(ucnv_cbFromUWriteBytes)\n#define ucnv_cbFromUWriteSub U_ICU_ENTRY_POINT_RENAME(ucnv_cbFromUWriteSub)\n#define ucnv_cbFromUWriteUChars U_ICU_ENTRY_POINT_RENAME(ucnv_cbFromUWriteUChars)\n#define ucnv_cbToUWriteSub U_ICU_ENTRY_POINT_RENAME(ucnv_cbToUWriteSub)\n#define ucnv_cbToUWriteUChars U_ICU_ENTRY_POINT_RENAME(ucnv_cbToUWriteUChars)\n#define ucnv_close U_ICU_ENTRY_POINT_RENAME(ucnv_close)\n#define ucnv_compareNames U_ICU_ENTRY_POINT_RENAME(ucnv_compareNames)\n#define ucnv_convert U_ICU_ENTRY_POINT_RENAME(ucnv_convert)\n#define ucnv_convertEx U_ICU_ENTRY_POINT_RENAME(ucnv_convertEx)\n#define ucnv_countAliases U_ICU_ENTRY_POINT_RENAME(ucnv_countAliases)\n#define ucnv_countAvailable U_ICU_ENTRY_POINT_RENAME(ucnv_countAvailable)\n#define ucnv_countStandards U_ICU_ENTRY_POINT_RENAME(ucnv_countStandards)\n#define ucnv_createAlgorithmicConverter U_ICU_ENTRY_POINT_RENAME(ucnv_createAlgorithmicConverter)\n#define ucnv_createConverter U_ICU_ENTRY_POINT_RENAME(ucnv_createConverter)\n#define ucnv_createConverterFromPackage U_ICU_ENTRY_POINT_RENAME(ucnv_createConverterFromPackage)\n#define ucnv_createConverterFromSharedData U_ICU_ENTRY_POINT_RENAME(ucnv_createConverterFromSharedData)\n#define ucnv_detectUnicodeSignature U_ICU_ENTRY_POINT_RENAME(ucnv_detectUnicodeSignature)\n#define ucnv_extContinueMatchFromU U_ICU_ENTRY_POINT_RENAME(ucnv_extContinueMatchFromU)\n#define ucnv_extContinueMatchToU U_ICU_ENTRY_POINT_RENAME(ucnv_extContinueMatchToU)\n#define ucnv_extGetUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_extGetUnicodeSet)\n#define ucnv_extInitialMatchFromU U_ICU_ENTRY_POINT_RENAME(ucnv_extInitialMatchFromU)\n#define ucnv_extInitialMatchToU U_ICU_ENTRY_POINT_RENAME(ucnv_extInitialMatchToU)\n#define ucnv_extSimpleMatchFromU U_ICU_ENTRY_POINT_RENAME(ucnv_extSimpleMatchFromU)\n#define ucnv_extSimpleMatchToU U_ICU_ENTRY_POINT_RENAME(ucnv_extSimpleMatchToU)\n#define ucnv_fixFileSeparator U_ICU_ENTRY_POINT_RENAME(ucnv_fixFileSeparator)\n#define ucnv_flushCache U_ICU_ENTRY_POINT_RENAME(ucnv_flushCache)\n#define ucnv_fromAlgorithmic U_ICU_ENTRY_POINT_RENAME(ucnv_fromAlgorithmic)\n#define ucnv_fromUChars U_ICU_ENTRY_POINT_RENAME(ucnv_fromUChars)\n#define ucnv_fromUCountPending U_ICU_ENTRY_POINT_RENAME(ucnv_fromUCountPending)\n#define ucnv_fromUWriteBytes U_ICU_ENTRY_POINT_RENAME(ucnv_fromUWriteBytes)\n#define ucnv_fromUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_fromUnicode)\n#define ucnv_fromUnicode_UTF8 U_ICU_ENTRY_POINT_RENAME(ucnv_fromUnicode_UTF8)\n#define ucnv_fromUnicode_UTF8_OFFSETS_LOGIC U_ICU_ENTRY_POINT_RENAME(ucnv_fromUnicode_UTF8_OFFSETS_LOGIC)\n#define ucnv_getAlias U_ICU_ENTRY_POINT_RENAME(ucnv_getAlias)\n#define ucnv_getAliases U_ICU_ENTRY_POINT_RENAME(ucnv_getAliases)\n#define ucnv_getAvailableName U_ICU_ENTRY_POINT_RENAME(ucnv_getAvailableName)\n#define ucnv_getCCSID U_ICU_ENTRY_POINT_RENAME(ucnv_getCCSID)\n#define ucnv_getCanonicalName U_ICU_ENTRY_POINT_RENAME(ucnv_getCanonicalName)\n#define ucnv_getCompleteUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_getCompleteUnicodeSet)\n#define ucnv_getDefaultName U_ICU_ENTRY_POINT_RENAME(ucnv_getDefaultName)\n#define ucnv_getDisplayName U_ICU_ENTRY_POINT_RENAME(ucnv_getDisplayName)\n#define ucnv_getFromUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_getFromUCallBack)\n#define ucnv_getInvalidChars U_ICU_ENTRY_POINT_RENAME(ucnv_getInvalidChars)\n#define ucnv_getInvalidUChars U_ICU_ENTRY_POINT_RENAME(ucnv_getInvalidUChars)\n#define ucnv_getMaxCharSize U_ICU_ENTRY_POINT_RENAME(ucnv_getMaxCharSize)\n#define ucnv_getMinCharSize U_ICU_ENTRY_POINT_RENAME(ucnv_getMinCharSize)\n#define ucnv_getName U_ICU_ENTRY_POINT_RENAME(ucnv_getName)\n#define ucnv_getNextUChar U_ICU_ENTRY_POINT_RENAME(ucnv_getNextUChar)\n#define ucnv_getNonSurrogateUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_getNonSurrogateUnicodeSet)\n#define ucnv_getPlatform U_ICU_ENTRY_POINT_RENAME(ucnv_getPlatform)\n#define ucnv_getStandard U_ICU_ENTRY_POINT_RENAME(ucnv_getStandard)\n#define ucnv_getStandardName U_ICU_ENTRY_POINT_RENAME(ucnv_getStandardName)\n#define ucnv_getStarters U_ICU_ENTRY_POINT_RENAME(ucnv_getStarters)\n#define ucnv_getSubstChars U_ICU_ENTRY_POINT_RENAME(ucnv_getSubstChars)\n#define ucnv_getToUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_getToUCallBack)\n#define ucnv_getType U_ICU_ENTRY_POINT_RENAME(ucnv_getType)\n#define ucnv_getUnicodeSet U_ICU_ENTRY_POINT_RENAME(ucnv_getUnicodeSet)\n#define ucnv_incrementRefCount U_ICU_ENTRY_POINT_RENAME(ucnv_incrementRefCount)\n#define ucnv_io_countKnownConverters U_ICU_ENTRY_POINT_RENAME(ucnv_io_countKnownConverters)\n#define ucnv_io_getConverterName U_ICU_ENTRY_POINT_RENAME(ucnv_io_getConverterName)\n#define ucnv_io_stripASCIIForCompare U_ICU_ENTRY_POINT_RENAME(ucnv_io_stripASCIIForCompare)\n#define ucnv_io_stripEBCDICForCompare U_ICU_ENTRY_POINT_RENAME(ucnv_io_stripEBCDICForCompare)\n#define ucnv_isAmbiguous U_ICU_ENTRY_POINT_RENAME(ucnv_isAmbiguous)\n#define ucnv_isFixedWidth U_ICU_ENTRY_POINT_RENAME(ucnv_isFixedWidth)\n#define ucnv_load U_ICU_ENTRY_POINT_RENAME(ucnv_load)\n#define ucnv_loadSharedData U_ICU_ENTRY_POINT_RENAME(ucnv_loadSharedData)\n#define ucnv_open U_ICU_ENTRY_POINT_RENAME(ucnv_open)\n#define ucnv_openAllNames U_ICU_ENTRY_POINT_RENAME(ucnv_openAllNames)\n#define ucnv_openCCSID U_ICU_ENTRY_POINT_RENAME(ucnv_openCCSID)\n#define ucnv_openPackage U_ICU_ENTRY_POINT_RENAME(ucnv_openPackage)\n#define ucnv_openStandardNames U_ICU_ENTRY_POINT_RENAME(ucnv_openStandardNames)\n#define ucnv_openU U_ICU_ENTRY_POINT_RENAME(ucnv_openU)\n#define ucnv_reset U_ICU_ENTRY_POINT_RENAME(ucnv_reset)\n#define ucnv_resetFromUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_resetFromUnicode)\n#define ucnv_resetToUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_resetToUnicode)\n#define ucnv_safeClone U_ICU_ENTRY_POINT_RENAME(ucnv_safeClone)\n#define ucnv_setDefaultName U_ICU_ENTRY_POINT_RENAME(ucnv_setDefaultName)\n#define ucnv_setFallback U_ICU_ENTRY_POINT_RENAME(ucnv_setFallback)\n#define ucnv_setFromUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_setFromUCallBack)\n#define ucnv_setSubstChars U_ICU_ENTRY_POINT_RENAME(ucnv_setSubstChars)\n#define ucnv_setSubstString U_ICU_ENTRY_POINT_RENAME(ucnv_setSubstString)\n#define ucnv_setToUCallBack U_ICU_ENTRY_POINT_RENAME(ucnv_setToUCallBack)\n#define ucnv_swap U_ICU_ENTRY_POINT_RENAME(ucnv_swap)\n#define ucnv_swapAliases U_ICU_ENTRY_POINT_RENAME(ucnv_swapAliases)\n#define ucnv_toAlgorithmic U_ICU_ENTRY_POINT_RENAME(ucnv_toAlgorithmic)\n#define ucnv_toUChars U_ICU_ENTRY_POINT_RENAME(ucnv_toUChars)\n#define ucnv_toUCountPending U_ICU_ENTRY_POINT_RENAME(ucnv_toUCountPending)\n#define ucnv_toUWriteCodePoint U_ICU_ENTRY_POINT_RENAME(ucnv_toUWriteCodePoint)\n#define ucnv_toUWriteUChars U_ICU_ENTRY_POINT_RENAME(ucnv_toUWriteUChars)\n#define ucnv_toUnicode U_ICU_ENTRY_POINT_RENAME(ucnv_toUnicode)\n#define ucnv_unload U_ICU_ENTRY_POINT_RENAME(ucnv_unload)\n#define ucnv_unloadSharedDataIfReady U_ICU_ENTRY_POINT_RENAME(ucnv_unloadSharedDataIfReady)\n#define ucnv_usesFallback U_ICU_ENTRY_POINT_RENAME(ucnv_usesFallback)\n#define ucnvsel_close U_ICU_ENTRY_POINT_RENAME(ucnvsel_close)\n#define ucnvsel_open U_ICU_ENTRY_POINT_RENAME(ucnvsel_open)\n#define ucnvsel_openFromSerialized U_ICU_ENTRY_POINT_RENAME(ucnvsel_openFromSerialized)\n#define ucnvsel_selectForString U_ICU_ENTRY_POINT_RENAME(ucnvsel_selectForString)\n#define ucnvsel_selectForUTF8 U_ICU_ENTRY_POINT_RENAME(ucnvsel_selectForUTF8)\n#define ucnvsel_serialize U_ICU_ENTRY_POINT_RENAME(ucnvsel_serialize)\n#define ucol_cloneBinary U_ICU_ENTRY_POINT_RENAME(ucol_cloneBinary)\n#define ucol_close U_ICU_ENTRY_POINT_RENAME(ucol_close)\n#define ucol_closeElements U_ICU_ENTRY_POINT_RENAME(ucol_closeElements)\n#define ucol_countAvailable U_ICU_ENTRY_POINT_RENAME(ucol_countAvailable)\n#define ucol_equal U_ICU_ENTRY_POINT_RENAME(ucol_equal)\n#define ucol_equals U_ICU_ENTRY_POINT_RENAME(ucol_equals)\n#define ucol_getAttribute U_ICU_ENTRY_POINT_RENAME(ucol_getAttribute)\n#define ucol_getAvailable U_ICU_ENTRY_POINT_RENAME(ucol_getAvailable)\n#define ucol_getBound U_ICU_ENTRY_POINT_RENAME(ucol_getBound)\n#define ucol_getContractions U_ICU_ENTRY_POINT_RENAME(ucol_getContractions)\n#define ucol_getContractionsAndExpansions U_ICU_ENTRY_POINT_RENAME(ucol_getContractionsAndExpansions)\n#define ucol_getDisplayName U_ICU_ENTRY_POINT_RENAME(ucol_getDisplayName)\n#define ucol_getEquivalentReorderCodes U_ICU_ENTRY_POINT_RENAME(ucol_getEquivalentReorderCodes)\n#define ucol_getFunctionalEquivalent U_ICU_ENTRY_POINT_RENAME(ucol_getFunctionalEquivalent)\n#define ucol_getKeywordValues U_ICU_ENTRY_POINT_RENAME(ucol_getKeywordValues)\n#define ucol_getKeywordValuesForLocale U_ICU_ENTRY_POINT_RENAME(ucol_getKeywordValuesForLocale)\n#define ucol_getKeywords U_ICU_ENTRY_POINT_RENAME(ucol_getKeywords)\n#define ucol_getLocale U_ICU_ENTRY_POINT_RENAME(ucol_getLocale)\n#define ucol_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ucol_getLocaleByType)\n#define ucol_getMaxExpansion U_ICU_ENTRY_POINT_RENAME(ucol_getMaxExpansion)\n#define ucol_getMaxVariable U_ICU_ENTRY_POINT_RENAME(ucol_getMaxVariable)\n#define ucol_getOffset U_ICU_ENTRY_POINT_RENAME(ucol_getOffset)\n#define ucol_getReorderCodes U_ICU_ENTRY_POINT_RENAME(ucol_getReorderCodes)\n#define ucol_getRules U_ICU_ENTRY_POINT_RENAME(ucol_getRules)\n#define ucol_getRulesEx U_ICU_ENTRY_POINT_RENAME(ucol_getRulesEx)\n#define ucol_getShortDefinitionString U_ICU_ENTRY_POINT_RENAME(ucol_getShortDefinitionString)\n#define ucol_getSortKey U_ICU_ENTRY_POINT_RENAME(ucol_getSortKey)\n#define ucol_getStrength U_ICU_ENTRY_POINT_RENAME(ucol_getStrength)\n#define ucol_getTailoredSet U_ICU_ENTRY_POINT_RENAME(ucol_getTailoredSet)\n#define ucol_getUCAVersion U_ICU_ENTRY_POINT_RENAME(ucol_getUCAVersion)\n#define ucol_getUnsafeSet U_ICU_ENTRY_POINT_RENAME(ucol_getUnsafeSet)\n#define ucol_getVariableTop U_ICU_ENTRY_POINT_RENAME(ucol_getVariableTop)\n#define ucol_getVersion U_ICU_ENTRY_POINT_RENAME(ucol_getVersion)\n#define ucol_greater U_ICU_ENTRY_POINT_RENAME(ucol_greater)\n#define ucol_greaterOrEqual U_ICU_ENTRY_POINT_RENAME(ucol_greaterOrEqual)\n#define ucol_keyHashCode U_ICU_ENTRY_POINT_RENAME(ucol_keyHashCode)\n#define ucol_looksLikeCollationBinary U_ICU_ENTRY_POINT_RENAME(ucol_looksLikeCollationBinary)\n#define ucol_mergeSortkeys U_ICU_ENTRY_POINT_RENAME(ucol_mergeSortkeys)\n#define ucol_next U_ICU_ENTRY_POINT_RENAME(ucol_next)\n#define ucol_nextSortKeyPart U_ICU_ENTRY_POINT_RENAME(ucol_nextSortKeyPart)\n#define ucol_normalizeShortDefinitionString U_ICU_ENTRY_POINT_RENAME(ucol_normalizeShortDefinitionString)\n#define ucol_open U_ICU_ENTRY_POINT_RENAME(ucol_open)\n#define ucol_openAvailableLocales U_ICU_ENTRY_POINT_RENAME(ucol_openAvailableLocales)\n#define ucol_openBinary U_ICU_ENTRY_POINT_RENAME(ucol_openBinary)\n#define ucol_openElements U_ICU_ENTRY_POINT_RENAME(ucol_openElements)\n#define ucol_openFromShortString U_ICU_ENTRY_POINT_RENAME(ucol_openFromShortString)\n#define ucol_openRules U_ICU_ENTRY_POINT_RENAME(ucol_openRules)\n#define ucol_prepareShortStringOpen U_ICU_ENTRY_POINT_RENAME(ucol_prepareShortStringOpen)\n#define ucol_previous U_ICU_ENTRY_POINT_RENAME(ucol_previous)\n#define ucol_primaryOrder U_ICU_ENTRY_POINT_RENAME(ucol_primaryOrder)\n#define ucol_reset U_ICU_ENTRY_POINT_RENAME(ucol_reset)\n#define ucol_restoreVariableTop U_ICU_ENTRY_POINT_RENAME(ucol_restoreVariableTop)\n#define ucol_safeClone U_ICU_ENTRY_POINT_RENAME(ucol_safeClone)\n#define ucol_secondaryOrder U_ICU_ENTRY_POINT_RENAME(ucol_secondaryOrder)\n#define ucol_setAttribute U_ICU_ENTRY_POINT_RENAME(ucol_setAttribute)\n#define ucol_setMaxVariable U_ICU_ENTRY_POINT_RENAME(ucol_setMaxVariable)\n#define ucol_setOffset U_ICU_ENTRY_POINT_RENAME(ucol_setOffset)\n#define ucol_setReorderCodes U_ICU_ENTRY_POINT_RENAME(ucol_setReorderCodes)\n#define ucol_setStrength U_ICU_ENTRY_POINT_RENAME(ucol_setStrength)\n#define ucol_setText U_ICU_ENTRY_POINT_RENAME(ucol_setText)\n#define ucol_setVariableTop U_ICU_ENTRY_POINT_RENAME(ucol_setVariableTop)\n#define ucol_strcoll U_ICU_ENTRY_POINT_RENAME(ucol_strcoll)\n#define ucol_strcollIter U_ICU_ENTRY_POINT_RENAME(ucol_strcollIter)\n#define ucol_strcollUTF8 U_ICU_ENTRY_POINT_RENAME(ucol_strcollUTF8)\n#define ucol_swap U_ICU_ENTRY_POINT_RENAME(ucol_swap)\n#define ucol_swapInverseUCA U_ICU_ENTRY_POINT_RENAME(ucol_swapInverseUCA)\n#define ucol_tertiaryOrder U_ICU_ENTRY_POINT_RENAME(ucol_tertiaryOrder)\n#define ucsdet_close U_ICU_ENTRY_POINT_RENAME(ucsdet_close)\n#define ucsdet_detect U_ICU_ENTRY_POINT_RENAME(ucsdet_detect)\n#define ucsdet_detectAll U_ICU_ENTRY_POINT_RENAME(ucsdet_detectAll)\n#define ucsdet_enableInputFilter U_ICU_ENTRY_POINT_RENAME(ucsdet_enableInputFilter)\n#define ucsdet_getAllDetectableCharsets U_ICU_ENTRY_POINT_RENAME(ucsdet_getAllDetectableCharsets)\n#define ucsdet_getConfidence U_ICU_ENTRY_POINT_RENAME(ucsdet_getConfidence)\n#define ucsdet_getDetectableCharsets U_ICU_ENTRY_POINT_RENAME(ucsdet_getDetectableCharsets)\n#define ucsdet_getLanguage U_ICU_ENTRY_POINT_RENAME(ucsdet_getLanguage)\n#define ucsdet_getName U_ICU_ENTRY_POINT_RENAME(ucsdet_getName)\n#define ucsdet_getUChars U_ICU_ENTRY_POINT_RENAME(ucsdet_getUChars)\n#define ucsdet_isInputFilterEnabled U_ICU_ENTRY_POINT_RENAME(ucsdet_isInputFilterEnabled)\n#define ucsdet_open U_ICU_ENTRY_POINT_RENAME(ucsdet_open)\n#define ucsdet_setDeclaredEncoding U_ICU_ENTRY_POINT_RENAME(ucsdet_setDeclaredEncoding)\n#define ucsdet_setDetectableCharset U_ICU_ENTRY_POINT_RENAME(ucsdet_setDetectableCharset)\n#define ucsdet_setText U_ICU_ENTRY_POINT_RENAME(ucsdet_setText)\n#define ucurr_countCurrencies U_ICU_ENTRY_POINT_RENAME(ucurr_countCurrencies)\n#define ucurr_forLocale U_ICU_ENTRY_POINT_RENAME(ucurr_forLocale)\n#define ucurr_forLocaleAndDate U_ICU_ENTRY_POINT_RENAME(ucurr_forLocaleAndDate)\n#define ucurr_getDefaultFractionDigits U_ICU_ENTRY_POINT_RENAME(ucurr_getDefaultFractionDigits)\n#define ucurr_getDefaultFractionDigitsForUsage U_ICU_ENTRY_POINT_RENAME(ucurr_getDefaultFractionDigitsForUsage)\n#define ucurr_getKeywordValuesForLocale U_ICU_ENTRY_POINT_RENAME(ucurr_getKeywordValuesForLocale)\n#define ucurr_getName U_ICU_ENTRY_POINT_RENAME(ucurr_getName)\n#define ucurr_getNumericCode U_ICU_ENTRY_POINT_RENAME(ucurr_getNumericCode)\n#define ucurr_getPluralName U_ICU_ENTRY_POINT_RENAME(ucurr_getPluralName)\n#define ucurr_getRoundingIncrement U_ICU_ENTRY_POINT_RENAME(ucurr_getRoundingIncrement)\n#define ucurr_getRoundingIncrementForUsage U_ICU_ENTRY_POINT_RENAME(ucurr_getRoundingIncrementForUsage)\n#define ucurr_isAvailable U_ICU_ENTRY_POINT_RENAME(ucurr_isAvailable)\n#define ucurr_openISOCurrencies U_ICU_ENTRY_POINT_RENAME(ucurr_openISOCurrencies)\n#define ucurr_register U_ICU_ENTRY_POINT_RENAME(ucurr_register)\n#define ucurr_unregister U_ICU_ENTRY_POINT_RENAME(ucurr_unregister)\n#define udat_adoptNumberFormat U_ICU_ENTRY_POINT_RENAME(udat_adoptNumberFormat)\n#define udat_adoptNumberFormatForFields U_ICU_ENTRY_POINT_RENAME(udat_adoptNumberFormatForFields)\n#define udat_applyPattern U_ICU_ENTRY_POINT_RENAME(udat_applyPattern)\n#define udat_applyPatternRelative U_ICU_ENTRY_POINT_RENAME(udat_applyPatternRelative)\n#define udat_clone U_ICU_ENTRY_POINT_RENAME(udat_clone)\n#define udat_close U_ICU_ENTRY_POINT_RENAME(udat_close)\n#define udat_countAvailable U_ICU_ENTRY_POINT_RENAME(udat_countAvailable)\n#define udat_countSymbols U_ICU_ENTRY_POINT_RENAME(udat_countSymbols)\n#define udat_format U_ICU_ENTRY_POINT_RENAME(udat_format)\n#define udat_formatCalendar U_ICU_ENTRY_POINT_RENAME(udat_formatCalendar)\n#define udat_formatCalendarForFields U_ICU_ENTRY_POINT_RENAME(udat_formatCalendarForFields)\n#define udat_formatForFields U_ICU_ENTRY_POINT_RENAME(udat_formatForFields)\n#define udat_get2DigitYearStart U_ICU_ENTRY_POINT_RENAME(udat_get2DigitYearStart)\n#define udat_getAvailable U_ICU_ENTRY_POINT_RENAME(udat_getAvailable)\n#define udat_getBooleanAttribute U_ICU_ENTRY_POINT_RENAME(udat_getBooleanAttribute)\n#define udat_getCalendar U_ICU_ENTRY_POINT_RENAME(udat_getCalendar)\n#define udat_getContext U_ICU_ENTRY_POINT_RENAME(udat_getContext)\n#define udat_getLocaleByType U_ICU_ENTRY_POINT_RENAME(udat_getLocaleByType)\n#define udat_getNumberFormat U_ICU_ENTRY_POINT_RENAME(udat_getNumberFormat)\n#define udat_getNumberFormatForField U_ICU_ENTRY_POINT_RENAME(udat_getNumberFormatForField)\n#define udat_getSymbols U_ICU_ENTRY_POINT_RENAME(udat_getSymbols)\n#define udat_isLenient U_ICU_ENTRY_POINT_RENAME(udat_isLenient)\n#define udat_open U_ICU_ENTRY_POINT_RENAME(udat_open)\n#define udat_parse U_ICU_ENTRY_POINT_RENAME(udat_parse)\n#define udat_parseCalendar U_ICU_ENTRY_POINT_RENAME(udat_parseCalendar)\n#define udat_registerOpener U_ICU_ENTRY_POINT_RENAME(udat_registerOpener)\n#define udat_set2DigitYearStart U_ICU_ENTRY_POINT_RENAME(udat_set2DigitYearStart)\n#define udat_setBooleanAttribute U_ICU_ENTRY_POINT_RENAME(udat_setBooleanAttribute)\n#define udat_setCalendar U_ICU_ENTRY_POINT_RENAME(udat_setCalendar)\n#define udat_setContext U_ICU_ENTRY_POINT_RENAME(udat_setContext)\n#define udat_setLenient U_ICU_ENTRY_POINT_RENAME(udat_setLenient)\n#define udat_setNumberFormat U_ICU_ENTRY_POINT_RENAME(udat_setNumberFormat)\n#define udat_setSymbols U_ICU_ENTRY_POINT_RENAME(udat_setSymbols)\n#define udat_toCalendarDateField U_ICU_ENTRY_POINT_RENAME(udat_toCalendarDateField)\n#define udat_toPattern U_ICU_ENTRY_POINT_RENAME(udat_toPattern)\n#define udat_toPatternRelativeDate U_ICU_ENTRY_POINT_RENAME(udat_toPatternRelativeDate)\n#define udat_toPatternRelativeTime U_ICU_ENTRY_POINT_RENAME(udat_toPatternRelativeTime)\n#define udat_unregisterOpener U_ICU_ENTRY_POINT_RENAME(udat_unregisterOpener)\n#define udata_checkCommonData U_ICU_ENTRY_POINT_RENAME(udata_checkCommonData)\n#define udata_close U_ICU_ENTRY_POINT_RENAME(udata_close)\n#define udata_closeSwapper U_ICU_ENTRY_POINT_RENAME(udata_closeSwapper)\n#define udata_getHeaderSize U_ICU_ENTRY_POINT_RENAME(udata_getHeaderSize)\n#define udata_getInfo U_ICU_ENTRY_POINT_RENAME(udata_getInfo)\n#define udata_getInfoSize U_ICU_ENTRY_POINT_RENAME(udata_getInfoSize)\n#define udata_getLength U_ICU_ENTRY_POINT_RENAME(udata_getLength)\n#define udata_getMemory U_ICU_ENTRY_POINT_RENAME(udata_getMemory)\n#define udata_getRawMemory U_ICU_ENTRY_POINT_RENAME(udata_getRawMemory)\n#define udata_open U_ICU_ENTRY_POINT_RENAME(udata_open)\n#define udata_openChoice U_ICU_ENTRY_POINT_RENAME(udata_openChoice)\n#define udata_openSwapper U_ICU_ENTRY_POINT_RENAME(udata_openSwapper)\n#define udata_openSwapperForInputData U_ICU_ENTRY_POINT_RENAME(udata_openSwapperForInputData)\n#define udata_printError U_ICU_ENTRY_POINT_RENAME(udata_printError)\n#define udata_readInt16 U_ICU_ENTRY_POINT_RENAME(udata_readInt16)\n#define udata_readInt32 U_ICU_ENTRY_POINT_RENAME(udata_readInt32)\n#define udata_setAppData U_ICU_ENTRY_POINT_RENAME(udata_setAppData)\n#define udata_setCommonData U_ICU_ENTRY_POINT_RENAME(udata_setCommonData)\n#define udata_setFileAccess U_ICU_ENTRY_POINT_RENAME(udata_setFileAccess)\n#define udata_swapDataHeader U_ICU_ENTRY_POINT_RENAME(udata_swapDataHeader)\n#define udata_swapInvStringBlock U_ICU_ENTRY_POINT_RENAME(udata_swapInvStringBlock)\n#define udatpg_addPattern U_ICU_ENTRY_POINT_RENAME(udatpg_addPattern)\n#define udatpg_clone U_ICU_ENTRY_POINT_RENAME(udatpg_clone)\n#define udatpg_close U_ICU_ENTRY_POINT_RENAME(udatpg_close)\n#define udatpg_getAppendItemFormat U_ICU_ENTRY_POINT_RENAME(udatpg_getAppendItemFormat)\n#define udatpg_getAppendItemName U_ICU_ENTRY_POINT_RENAME(udatpg_getAppendItemName)\n#define udatpg_getBaseSkeleton U_ICU_ENTRY_POINT_RENAME(udatpg_getBaseSkeleton)\n#define udatpg_getBestPattern U_ICU_ENTRY_POINT_RENAME(udatpg_getBestPattern)\n#define udatpg_getBestPatternWithOptions U_ICU_ENTRY_POINT_RENAME(udatpg_getBestPatternWithOptions)\n#define udatpg_getDateTimeFormat U_ICU_ENTRY_POINT_RENAME(udatpg_getDateTimeFormat)\n#define udatpg_getDecimal U_ICU_ENTRY_POINT_RENAME(udatpg_getDecimal)\n#define udatpg_getPatternForSkeleton U_ICU_ENTRY_POINT_RENAME(udatpg_getPatternForSkeleton)\n#define udatpg_getSkeleton U_ICU_ENTRY_POINT_RENAME(udatpg_getSkeleton)\n#define udatpg_open U_ICU_ENTRY_POINT_RENAME(udatpg_open)\n#define udatpg_openBaseSkeletons U_ICU_ENTRY_POINT_RENAME(udatpg_openBaseSkeletons)\n#define udatpg_openEmpty U_ICU_ENTRY_POINT_RENAME(udatpg_openEmpty)\n#define udatpg_openSkeletons U_ICU_ENTRY_POINT_RENAME(udatpg_openSkeletons)\n#define udatpg_replaceFieldTypes U_ICU_ENTRY_POINT_RENAME(udatpg_replaceFieldTypes)\n#define udatpg_replaceFieldTypesWithOptions U_ICU_ENTRY_POINT_RENAME(udatpg_replaceFieldTypesWithOptions)\n#define udatpg_setAppendItemFormat U_ICU_ENTRY_POINT_RENAME(udatpg_setAppendItemFormat)\n#define udatpg_setAppendItemName U_ICU_ENTRY_POINT_RENAME(udatpg_setAppendItemName)\n#define udatpg_setDateTimeFormat U_ICU_ENTRY_POINT_RENAME(udatpg_setDateTimeFormat)\n#define udatpg_setDecimal U_ICU_ENTRY_POINT_RENAME(udatpg_setDecimal)\n#define udict_swap U_ICU_ENTRY_POINT_RENAME(udict_swap)\n#define udtitvfmt_close U_ICU_ENTRY_POINT_RENAME(udtitvfmt_close)\n#define udtitvfmt_format U_ICU_ENTRY_POINT_RENAME(udtitvfmt_format)\n#define udtitvfmt_open U_ICU_ENTRY_POINT_RENAME(udtitvfmt_open)\n#define uenum_close U_ICU_ENTRY_POINT_RENAME(uenum_close)\n#define uenum_count U_ICU_ENTRY_POINT_RENAME(uenum_count)\n#define uenum_next U_ICU_ENTRY_POINT_RENAME(uenum_next)\n#define uenum_nextDefault U_ICU_ENTRY_POINT_RENAME(uenum_nextDefault)\n#define uenum_openCharStringsEnumeration U_ICU_ENTRY_POINT_RENAME(uenum_openCharStringsEnumeration)\n#define uenum_openFromStringEnumeration U_ICU_ENTRY_POINT_RENAME(uenum_openFromStringEnumeration)\n#define uenum_openUCharStringsEnumeration U_ICU_ENTRY_POINT_RENAME(uenum_openUCharStringsEnumeration)\n#define uenum_reset U_ICU_ENTRY_POINT_RENAME(uenum_reset)\n#define uenum_unext U_ICU_ENTRY_POINT_RENAME(uenum_unext)\n#define uenum_unextDefault U_ICU_ENTRY_POINT_RENAME(uenum_unextDefault)\n#define ufieldpositer_close U_ICU_ENTRY_POINT_RENAME(ufieldpositer_close)\n#define ufieldpositer_next U_ICU_ENTRY_POINT_RENAME(ufieldpositer_next)\n#define ufieldpositer_open U_ICU_ENTRY_POINT_RENAME(ufieldpositer_open)\n#define ufile_close_translit U_ICU_ENTRY_POINT_RENAME(ufile_close_translit)\n#define ufile_fill_uchar_buffer U_ICU_ENTRY_POINT_RENAME(ufile_fill_uchar_buffer)\n#define ufile_flush_io U_ICU_ENTRY_POINT_RENAME(ufile_flush_io)\n#define ufile_flush_translit U_ICU_ENTRY_POINT_RENAME(ufile_flush_translit)\n#define ufile_getch U_ICU_ENTRY_POINT_RENAME(ufile_getch)\n#define ufile_getch32 U_ICU_ENTRY_POINT_RENAME(ufile_getch32)\n#define ufmt_64tou U_ICU_ENTRY_POINT_RENAME(ufmt_64tou)\n#define ufmt_close U_ICU_ENTRY_POINT_RENAME(ufmt_close)\n#define ufmt_defaultCPToUnicode U_ICU_ENTRY_POINT_RENAME(ufmt_defaultCPToUnicode)\n#define ufmt_digitvalue U_ICU_ENTRY_POINT_RENAME(ufmt_digitvalue)\n#define ufmt_getArrayItemByIndex U_ICU_ENTRY_POINT_RENAME(ufmt_getArrayItemByIndex)\n#define ufmt_getArrayLength U_ICU_ENTRY_POINT_RENAME(ufmt_getArrayLength)\n#define ufmt_getDate U_ICU_ENTRY_POINT_RENAME(ufmt_getDate)\n#define ufmt_getDecNumChars U_ICU_ENTRY_POINT_RENAME(ufmt_getDecNumChars)\n#define ufmt_getDouble U_ICU_ENTRY_POINT_RENAME(ufmt_getDouble)\n#define ufmt_getInt64 U_ICU_ENTRY_POINT_RENAME(ufmt_getInt64)\n#define ufmt_getLong U_ICU_ENTRY_POINT_RENAME(ufmt_getLong)\n#define ufmt_getObject U_ICU_ENTRY_POINT_RENAME(ufmt_getObject)\n#define ufmt_getType U_ICU_ENTRY_POINT_RENAME(ufmt_getType)\n#define ufmt_getUChars U_ICU_ENTRY_POINT_RENAME(ufmt_getUChars)\n#define ufmt_isNumeric U_ICU_ENTRY_POINT_RENAME(ufmt_isNumeric)\n#define ufmt_isdigit U_ICU_ENTRY_POINT_RENAME(ufmt_isdigit)\n#define ufmt_open U_ICU_ENTRY_POINT_RENAME(ufmt_open)\n#define ufmt_ptou U_ICU_ENTRY_POINT_RENAME(ufmt_ptou)\n#define ufmt_uto64 U_ICU_ENTRY_POINT_RENAME(ufmt_uto64)\n#define ufmt_utop U_ICU_ENTRY_POINT_RENAME(ufmt_utop)\n#define ugender_getInstance U_ICU_ENTRY_POINT_RENAME(ugender_getInstance)\n#define ugender_getListGender U_ICU_ENTRY_POINT_RENAME(ugender_getListGender)\n#define uhash_close U_ICU_ENTRY_POINT_RENAME(uhash_close)\n#define uhash_compareCaselessUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_compareCaselessUnicodeString)\n#define uhash_compareChars U_ICU_ENTRY_POINT_RENAME(uhash_compareChars)\n#define uhash_compareIChars U_ICU_ENTRY_POINT_RENAME(uhash_compareIChars)\n#define uhash_compareLong U_ICU_ENTRY_POINT_RENAME(uhash_compareLong)\n#define uhash_compareScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_compareScriptSet)\n#define uhash_compareUChars U_ICU_ENTRY_POINT_RENAME(uhash_compareUChars)\n#define uhash_compareUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_compareUnicodeString)\n#define uhash_count U_ICU_ENTRY_POINT_RENAME(uhash_count)\n#define uhash_deleteHashtable U_ICU_ENTRY_POINT_RENAME(uhash_deleteHashtable)\n#define uhash_deleteScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_deleteScriptSet)\n#define uhash_equals U_ICU_ENTRY_POINT_RENAME(uhash_equals)\n#define uhash_equalsScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_equalsScriptSet)\n#define uhash_find U_ICU_ENTRY_POINT_RENAME(uhash_find)\n#define uhash_get U_ICU_ENTRY_POINT_RENAME(uhash_get)\n#define uhash_geti U_ICU_ENTRY_POINT_RENAME(uhash_geti)\n#define uhash_hashCaselessUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_hashCaselessUnicodeString)\n#define uhash_hashChars U_ICU_ENTRY_POINT_RENAME(uhash_hashChars)\n#define uhash_hashIChars U_ICU_ENTRY_POINT_RENAME(uhash_hashIChars)\n#define uhash_hashLong U_ICU_ENTRY_POINT_RENAME(uhash_hashLong)\n#define uhash_hashScriptSet U_ICU_ENTRY_POINT_RENAME(uhash_hashScriptSet)\n#define uhash_hashUChars U_ICU_ENTRY_POINT_RENAME(uhash_hashUChars)\n#define uhash_hashUnicodeString U_ICU_ENTRY_POINT_RENAME(uhash_hashUnicodeString)\n#define uhash_iget U_ICU_ENTRY_POINT_RENAME(uhash_iget)\n#define uhash_igeti U_ICU_ENTRY_POINT_RENAME(uhash_igeti)\n#define uhash_init U_ICU_ENTRY_POINT_RENAME(uhash_init)\n#define uhash_iput U_ICU_ENTRY_POINT_RENAME(uhash_iput)\n#define uhash_iputi U_ICU_ENTRY_POINT_RENAME(uhash_iputi)\n#define uhash_iremove U_ICU_ENTRY_POINT_RENAME(uhash_iremove)\n#define uhash_iremovei U_ICU_ENTRY_POINT_RENAME(uhash_iremovei)\n#define uhash_nextElement U_ICU_ENTRY_POINT_RENAME(uhash_nextElement)\n#define uhash_open U_ICU_ENTRY_POINT_RENAME(uhash_open)\n#define uhash_openSize U_ICU_ENTRY_POINT_RENAME(uhash_openSize)\n#define uhash_put U_ICU_ENTRY_POINT_RENAME(uhash_put)\n#define uhash_puti U_ICU_ENTRY_POINT_RENAME(uhash_puti)\n#define uhash_remove U_ICU_ENTRY_POINT_RENAME(uhash_remove)\n#define uhash_removeAll U_ICU_ENTRY_POINT_RENAME(uhash_removeAll)\n#define uhash_removeElement U_ICU_ENTRY_POINT_RENAME(uhash_removeElement)\n#define uhash_removei U_ICU_ENTRY_POINT_RENAME(uhash_removei)\n#define uhash_setKeyComparator U_ICU_ENTRY_POINT_RENAME(uhash_setKeyComparator)\n#define uhash_setKeyDeleter U_ICU_ENTRY_POINT_RENAME(uhash_setKeyDeleter)\n#define uhash_setKeyHasher U_ICU_ENTRY_POINT_RENAME(uhash_setKeyHasher)\n#define uhash_setResizePolicy U_ICU_ENTRY_POINT_RENAME(uhash_setResizePolicy)\n#define uhash_setValueComparator U_ICU_ENTRY_POINT_RENAME(uhash_setValueComparator)\n#define uhash_setValueDeleter U_ICU_ENTRY_POINT_RENAME(uhash_setValueDeleter)\n#define uidna_IDNToASCII U_ICU_ENTRY_POINT_RENAME(uidna_IDNToASCII)\n#define uidna_IDNToUnicode U_ICU_ENTRY_POINT_RENAME(uidna_IDNToUnicode)\n#define uidna_close U_ICU_ENTRY_POINT_RENAME(uidna_close)\n#define uidna_compare U_ICU_ENTRY_POINT_RENAME(uidna_compare)\n#define uidna_labelToASCII U_ICU_ENTRY_POINT_RENAME(uidna_labelToASCII)\n#define uidna_labelToASCII_UTF8 U_ICU_ENTRY_POINT_RENAME(uidna_labelToASCII_UTF8)\n#define uidna_labelToUnicode U_ICU_ENTRY_POINT_RENAME(uidna_labelToUnicode)\n#define uidna_labelToUnicodeUTF8 U_ICU_ENTRY_POINT_RENAME(uidna_labelToUnicodeUTF8)\n#define uidna_nameToASCII U_ICU_ENTRY_POINT_RENAME(uidna_nameToASCII)\n#define uidna_nameToASCII_UTF8 U_ICU_ENTRY_POINT_RENAME(uidna_nameToASCII_UTF8)\n#define uidna_nameToUnicode U_ICU_ENTRY_POINT_RENAME(uidna_nameToUnicode)\n#define uidna_nameToUnicodeUTF8 U_ICU_ENTRY_POINT_RENAME(uidna_nameToUnicodeUTF8)\n#define uidna_openUTS46 U_ICU_ENTRY_POINT_RENAME(uidna_openUTS46)\n#define uidna_toASCII U_ICU_ENTRY_POINT_RENAME(uidna_toASCII)\n#define uidna_toUnicode U_ICU_ENTRY_POINT_RENAME(uidna_toUnicode)\n#define uiter_current32 U_ICU_ENTRY_POINT_RENAME(uiter_current32)\n#define uiter_getState U_ICU_ENTRY_POINT_RENAME(uiter_getState)\n#define uiter_next32 U_ICU_ENTRY_POINT_RENAME(uiter_next32)\n#define uiter_previous32 U_ICU_ENTRY_POINT_RENAME(uiter_previous32)\n#define uiter_setCharacterIterator U_ICU_ENTRY_POINT_RENAME(uiter_setCharacterIterator)\n#define uiter_setReplaceable U_ICU_ENTRY_POINT_RENAME(uiter_setReplaceable)\n#define uiter_setState U_ICU_ENTRY_POINT_RENAME(uiter_setState)\n#define uiter_setString U_ICU_ENTRY_POINT_RENAME(uiter_setString)\n#define uiter_setUTF16BE U_ICU_ENTRY_POINT_RENAME(uiter_setUTF16BE)\n#define uiter_setUTF8 U_ICU_ENTRY_POINT_RENAME(uiter_setUTF8)\n#define uldn_close U_ICU_ENTRY_POINT_RENAME(uldn_close)\n#define uldn_getContext U_ICU_ENTRY_POINT_RENAME(uldn_getContext)\n#define uldn_getDialectHandling U_ICU_ENTRY_POINT_RENAME(uldn_getDialectHandling)\n#define uldn_getLocale U_ICU_ENTRY_POINT_RENAME(uldn_getLocale)\n#define uldn_keyDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_keyDisplayName)\n#define uldn_keyValueDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_keyValueDisplayName)\n#define uldn_languageDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_languageDisplayName)\n#define uldn_localeDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_localeDisplayName)\n#define uldn_open U_ICU_ENTRY_POINT_RENAME(uldn_open)\n#define uldn_openForContext U_ICU_ENTRY_POINT_RENAME(uldn_openForContext)\n#define uldn_regionDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_regionDisplayName)\n#define uldn_scriptCodeDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_scriptCodeDisplayName)\n#define uldn_scriptDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_scriptDisplayName)\n#define uldn_variantDisplayName U_ICU_ENTRY_POINT_RENAME(uldn_variantDisplayName)\n#define ulist_addItemBeginList U_ICU_ENTRY_POINT_RENAME(ulist_addItemBeginList)\n#define ulist_addItemEndList U_ICU_ENTRY_POINT_RENAME(ulist_addItemEndList)\n#define ulist_close_keyword_values_iterator U_ICU_ENTRY_POINT_RENAME(ulist_close_keyword_values_iterator)\n#define ulist_containsString U_ICU_ENTRY_POINT_RENAME(ulist_containsString)\n#define ulist_count_keyword_values U_ICU_ENTRY_POINT_RENAME(ulist_count_keyword_values)\n#define ulist_createEmptyList U_ICU_ENTRY_POINT_RENAME(ulist_createEmptyList)\n#define ulist_deleteList U_ICU_ENTRY_POINT_RENAME(ulist_deleteList)\n#define ulist_getListFromEnum U_ICU_ENTRY_POINT_RENAME(ulist_getListFromEnum)\n#define ulist_getListSize U_ICU_ENTRY_POINT_RENAME(ulist_getListSize)\n#define ulist_getNext U_ICU_ENTRY_POINT_RENAME(ulist_getNext)\n#define ulist_next_keyword_value U_ICU_ENTRY_POINT_RENAME(ulist_next_keyword_value)\n#define ulist_removeString U_ICU_ENTRY_POINT_RENAME(ulist_removeString)\n#define ulist_resetList U_ICU_ENTRY_POINT_RENAME(ulist_resetList)\n#define ulist_reset_keyword_values_iterator U_ICU_ENTRY_POINT_RENAME(ulist_reset_keyword_values_iterator)\n#define ulistfmt_close U_ICU_ENTRY_POINT_RENAME(ulistfmt_close)\n#define ulistfmt_format U_ICU_ENTRY_POINT_RENAME(ulistfmt_format)\n#define ulistfmt_open U_ICU_ENTRY_POINT_RENAME(ulistfmt_open)\n#define uloc_acceptLanguage U_ICU_ENTRY_POINT_RENAME(uloc_acceptLanguage)\n#define uloc_acceptLanguageFromHTTP U_ICU_ENTRY_POINT_RENAME(uloc_acceptLanguageFromHTTP)\n#define uloc_addLikelySubtags U_ICU_ENTRY_POINT_RENAME(uloc_addLikelySubtags)\n#define uloc_canonicalize U_ICU_ENTRY_POINT_RENAME(uloc_canonicalize)\n#define uloc_countAvailable U_ICU_ENTRY_POINT_RENAME(uloc_countAvailable)\n#define uloc_forLanguageTag U_ICU_ENTRY_POINT_RENAME(uloc_forLanguageTag)\n#define uloc_getAvailable U_ICU_ENTRY_POINT_RENAME(uloc_getAvailable)\n#define uloc_getBaseName U_ICU_ENTRY_POINT_RENAME(uloc_getBaseName)\n#define uloc_getCharacterOrientation U_ICU_ENTRY_POINT_RENAME(uloc_getCharacterOrientation)\n#define uloc_getCountry U_ICU_ENTRY_POINT_RENAME(uloc_getCountry)\n#define uloc_getCurrentCountryID U_ICU_ENTRY_POINT_RENAME(uloc_getCurrentCountryID)\n#define uloc_getCurrentLanguageID U_ICU_ENTRY_POINT_RENAME(uloc_getCurrentLanguageID)\n#define uloc_getDefault U_ICU_ENTRY_POINT_RENAME(uloc_getDefault)\n#define uloc_getDisplayCountry U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayCountry)\n#define uloc_getDisplayKeyword U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayKeyword)\n#define uloc_getDisplayKeywordValue U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayKeywordValue)\n#define uloc_getDisplayLanguage U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayLanguage)\n#define uloc_getDisplayName U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayName)\n#define uloc_getDisplayScript U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayScript)\n#define uloc_getDisplayScriptInContext U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayScriptInContext)\n#define uloc_getDisplayVariant U_ICU_ENTRY_POINT_RENAME(uloc_getDisplayVariant)\n#define uloc_getISO3Country U_ICU_ENTRY_POINT_RENAME(uloc_getISO3Country)\n#define uloc_getISO3Language U_ICU_ENTRY_POINT_RENAME(uloc_getISO3Language)\n#define uloc_getISOCountries U_ICU_ENTRY_POINT_RENAME(uloc_getISOCountries)\n#define uloc_getISOLanguages U_ICU_ENTRY_POINT_RENAME(uloc_getISOLanguages)\n#define uloc_getKeywordValue U_ICU_ENTRY_POINT_RENAME(uloc_getKeywordValue)\n#define uloc_getLCID U_ICU_ENTRY_POINT_RENAME(uloc_getLCID)\n#define uloc_getLanguage U_ICU_ENTRY_POINT_RENAME(uloc_getLanguage)\n#define uloc_getLineOrientation U_ICU_ENTRY_POINT_RENAME(uloc_getLineOrientation)\n#define uloc_getLocaleForLCID U_ICU_ENTRY_POINT_RENAME(uloc_getLocaleForLCID)\n#define uloc_getName U_ICU_ENTRY_POINT_RENAME(uloc_getName)\n#define uloc_getParent U_ICU_ENTRY_POINT_RENAME(uloc_getParent)\n#define uloc_getScript U_ICU_ENTRY_POINT_RENAME(uloc_getScript)\n#define uloc_getTableStringWithFallback U_ICU_ENTRY_POINT_RENAME(uloc_getTableStringWithFallback)\n#define uloc_getVariant U_ICU_ENTRY_POINT_RENAME(uloc_getVariant)\n#define uloc_isRightToLeft U_ICU_ENTRY_POINT_RENAME(uloc_isRightToLeft)\n#define uloc_minimizeSubtags U_ICU_ENTRY_POINT_RENAME(uloc_minimizeSubtags)\n#define uloc_openKeywordList U_ICU_ENTRY_POINT_RENAME(uloc_openKeywordList)\n#define uloc_openKeywords U_ICU_ENTRY_POINT_RENAME(uloc_openKeywords)\n#define uloc_setDefault U_ICU_ENTRY_POINT_RENAME(uloc_setDefault)\n#define uloc_setKeywordValue U_ICU_ENTRY_POINT_RENAME(uloc_setKeywordValue)\n#define uloc_toLanguageTag U_ICU_ENTRY_POINT_RENAME(uloc_toLanguageTag)\n#define uloc_toLegacyKey U_ICU_ENTRY_POINT_RENAME(uloc_toLegacyKey)\n#define uloc_toLegacyType U_ICU_ENTRY_POINT_RENAME(uloc_toLegacyType)\n#define uloc_toUnicodeLocaleKey U_ICU_ENTRY_POINT_RENAME(uloc_toUnicodeLocaleKey)\n#define uloc_toUnicodeLocaleType U_ICU_ENTRY_POINT_RENAME(uloc_toUnicodeLocaleType)\n#define ulocdata_close U_ICU_ENTRY_POINT_RENAME(ulocdata_close)\n#define ulocdata_getCLDRVersion U_ICU_ENTRY_POINT_RENAME(ulocdata_getCLDRVersion)\n#define ulocdata_getDelimiter U_ICU_ENTRY_POINT_RENAME(ulocdata_getDelimiter)\n#define ulocdata_getExemplarSet U_ICU_ENTRY_POINT_RENAME(ulocdata_getExemplarSet)\n#define ulocdata_getLocaleDisplayPattern U_ICU_ENTRY_POINT_RENAME(ulocdata_getLocaleDisplayPattern)\n#define ulocdata_getLocaleSeparator U_ICU_ENTRY_POINT_RENAME(ulocdata_getLocaleSeparator)\n#define ulocdata_getMeasurementSystem U_ICU_ENTRY_POINT_RENAME(ulocdata_getMeasurementSystem)\n#define ulocdata_getNoSubstitute U_ICU_ENTRY_POINT_RENAME(ulocdata_getNoSubstitute)\n#define ulocdata_getPaperSize U_ICU_ENTRY_POINT_RENAME(ulocdata_getPaperSize)\n#define ulocdata_open U_ICU_ENTRY_POINT_RENAME(ulocdata_open)\n#define ulocdata_setNoSubstitute U_ICU_ENTRY_POINT_RENAME(ulocdata_setNoSubstitute)\n#define ulocimp_getCountry U_ICU_ENTRY_POINT_RENAME(ulocimp_getCountry)\n#define ulocimp_getLanguage U_ICU_ENTRY_POINT_RENAME(ulocimp_getLanguage)\n#define ulocimp_getRegionForSupplementalData U_ICU_ENTRY_POINT_RENAME(ulocimp_getRegionForSupplementalData)\n#define ulocimp_getScript U_ICU_ENTRY_POINT_RENAME(ulocimp_getScript)\n#define ulocimp_toBcpKey U_ICU_ENTRY_POINT_RENAME(ulocimp_toBcpKey)\n#define ulocimp_toBcpType U_ICU_ENTRY_POINT_RENAME(ulocimp_toBcpType)\n#define ulocimp_toLegacyKey U_ICU_ENTRY_POINT_RENAME(ulocimp_toLegacyKey)\n#define ulocimp_toLegacyType U_ICU_ENTRY_POINT_RENAME(ulocimp_toLegacyType)\n#define ultag_isUnicodeLocaleKey U_ICU_ENTRY_POINT_RENAME(ultag_isUnicodeLocaleKey)\n#define ultag_isUnicodeLocaleType U_ICU_ENTRY_POINT_RENAME(ultag_isUnicodeLocaleType)\n#define umsg_applyPattern U_ICU_ENTRY_POINT_RENAME(umsg_applyPattern)\n#define umsg_autoQuoteApostrophe U_ICU_ENTRY_POINT_RENAME(umsg_autoQuoteApostrophe)\n#define umsg_clone U_ICU_ENTRY_POINT_RENAME(umsg_clone)\n#define umsg_close U_ICU_ENTRY_POINT_RENAME(umsg_close)\n#define umsg_format U_ICU_ENTRY_POINT_RENAME(umsg_format)\n#define umsg_getLocale U_ICU_ENTRY_POINT_RENAME(umsg_getLocale)\n#define umsg_open U_ICU_ENTRY_POINT_RENAME(umsg_open)\n#define umsg_parse U_ICU_ENTRY_POINT_RENAME(umsg_parse)\n#define umsg_setLocale U_ICU_ENTRY_POINT_RENAME(umsg_setLocale)\n#define umsg_toPattern U_ICU_ENTRY_POINT_RENAME(umsg_toPattern)\n#define umsg_vformat U_ICU_ENTRY_POINT_RENAME(umsg_vformat)\n#define umsg_vparse U_ICU_ENTRY_POINT_RENAME(umsg_vparse)\n#define umtx_condBroadcast U_ICU_ENTRY_POINT_RENAME(umtx_condBroadcast)\n#define umtx_condSignal U_ICU_ENTRY_POINT_RENAME(umtx_condSignal)\n#define umtx_condWait U_ICU_ENTRY_POINT_RENAME(umtx_condWait)\n#define umtx_lock U_ICU_ENTRY_POINT_RENAME(umtx_lock)\n#define umtx_unlock U_ICU_ENTRY_POINT_RENAME(umtx_unlock)\n#define uniset_getUnicode32Instance U_ICU_ENTRY_POINT_RENAME(uniset_getUnicode32Instance)\n#define unorm2_append U_ICU_ENTRY_POINT_RENAME(unorm2_append)\n#define unorm2_close U_ICU_ENTRY_POINT_RENAME(unorm2_close)\n#define unorm2_composePair U_ICU_ENTRY_POINT_RENAME(unorm2_composePair)\n#define unorm2_getCombiningClass U_ICU_ENTRY_POINT_RENAME(unorm2_getCombiningClass)\n#define unorm2_getDecomposition U_ICU_ENTRY_POINT_RENAME(unorm2_getDecomposition)\n#define unorm2_getInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getInstance)\n#define unorm2_getNFCInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFCInstance)\n#define unorm2_getNFDInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFDInstance)\n#define unorm2_getNFKCCasefoldInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFKCCasefoldInstance)\n#define unorm2_getNFKCInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFKCInstance)\n#define unorm2_getNFKDInstance U_ICU_ENTRY_POINT_RENAME(unorm2_getNFKDInstance)\n#define unorm2_getRawDecomposition U_ICU_ENTRY_POINT_RENAME(unorm2_getRawDecomposition)\n#define unorm2_hasBoundaryAfter U_ICU_ENTRY_POINT_RENAME(unorm2_hasBoundaryAfter)\n#define unorm2_hasBoundaryBefore U_ICU_ENTRY_POINT_RENAME(unorm2_hasBoundaryBefore)\n#define unorm2_isInert U_ICU_ENTRY_POINT_RENAME(unorm2_isInert)\n#define unorm2_isNormalized U_ICU_ENTRY_POINT_RENAME(unorm2_isNormalized)\n#define unorm2_normalize U_ICU_ENTRY_POINT_RENAME(unorm2_normalize)\n#define unorm2_normalizeSecondAndAppend U_ICU_ENTRY_POINT_RENAME(unorm2_normalizeSecondAndAppend)\n#define unorm2_openFiltered U_ICU_ENTRY_POINT_RENAME(unorm2_openFiltered)\n#define unorm2_quickCheck U_ICU_ENTRY_POINT_RENAME(unorm2_quickCheck)\n#define unorm2_spanQuickCheckYes U_ICU_ENTRY_POINT_RENAME(unorm2_spanQuickCheckYes)\n#define unorm2_swap U_ICU_ENTRY_POINT_RENAME(unorm2_swap)\n#define unorm_compare U_ICU_ENTRY_POINT_RENAME(unorm_compare)\n#define unorm_concatenate U_ICU_ENTRY_POINT_RENAME(unorm_concatenate)\n#define unorm_getFCD16 U_ICU_ENTRY_POINT_RENAME(unorm_getFCD16)\n#define unorm_getQuickCheck U_ICU_ENTRY_POINT_RENAME(unorm_getQuickCheck)\n#define unorm_isNormalized U_ICU_ENTRY_POINT_RENAME(unorm_isNormalized)\n#define unorm_isNormalizedWithOptions U_ICU_ENTRY_POINT_RENAME(unorm_isNormalizedWithOptions)\n#define unorm_next U_ICU_ENTRY_POINT_RENAME(unorm_next)\n#define unorm_normalize U_ICU_ENTRY_POINT_RENAME(unorm_normalize)\n#define unorm_previous U_ICU_ENTRY_POINT_RENAME(unorm_previous)\n#define unorm_quickCheck U_ICU_ENTRY_POINT_RENAME(unorm_quickCheck)\n#define unorm_quickCheckWithOptions U_ICU_ENTRY_POINT_RENAME(unorm_quickCheckWithOptions)\n#define unum_applyPattern U_ICU_ENTRY_POINT_RENAME(unum_applyPattern)\n#define unum_clone U_ICU_ENTRY_POINT_RENAME(unum_clone)\n#define unum_close U_ICU_ENTRY_POINT_RENAME(unum_close)\n#define unum_countAvailable U_ICU_ENTRY_POINT_RENAME(unum_countAvailable)\n#define unum_format U_ICU_ENTRY_POINT_RENAME(unum_format)\n#define unum_formatDecimal U_ICU_ENTRY_POINT_RENAME(unum_formatDecimal)\n#define unum_formatDouble U_ICU_ENTRY_POINT_RENAME(unum_formatDouble)\n#define unum_formatDoubleCurrency U_ICU_ENTRY_POINT_RENAME(unum_formatDoubleCurrency)\n#define unum_formatDoubleForFields U_ICU_ENTRY_POINT_RENAME(unum_formatDoubleForFields)\n#define unum_formatInt64 U_ICU_ENTRY_POINT_RENAME(unum_formatInt64)\n#define unum_formatUFormattable U_ICU_ENTRY_POINT_RENAME(unum_formatUFormattable)\n#define unum_getAttribute U_ICU_ENTRY_POINT_RENAME(unum_getAttribute)\n#define unum_getAvailable U_ICU_ENTRY_POINT_RENAME(unum_getAvailable)\n#define unum_getContext U_ICU_ENTRY_POINT_RENAME(unum_getContext)\n#define unum_getDoubleAttribute U_ICU_ENTRY_POINT_RENAME(unum_getDoubleAttribute)\n#define unum_getLocaleByType U_ICU_ENTRY_POINT_RENAME(unum_getLocaleByType)\n#define unum_getSymbol U_ICU_ENTRY_POINT_RENAME(unum_getSymbol)\n#define unum_getTextAttribute U_ICU_ENTRY_POINT_RENAME(unum_getTextAttribute)\n#define unum_open U_ICU_ENTRY_POINT_RENAME(unum_open)\n#define unum_parse U_ICU_ENTRY_POINT_RENAME(unum_parse)\n#define unum_parseDecimal U_ICU_ENTRY_POINT_RENAME(unum_parseDecimal)\n#define unum_parseDouble U_ICU_ENTRY_POINT_RENAME(unum_parseDouble)\n#define unum_parseDoubleCurrency U_ICU_ENTRY_POINT_RENAME(unum_parseDoubleCurrency)\n#define unum_parseInt64 U_ICU_ENTRY_POINT_RENAME(unum_parseInt64)\n#define unum_parseToUFormattable U_ICU_ENTRY_POINT_RENAME(unum_parseToUFormattable)\n#define unum_setAttribute U_ICU_ENTRY_POINT_RENAME(unum_setAttribute)\n#define unum_setContext U_ICU_ENTRY_POINT_RENAME(unum_setContext)\n#define unum_setDoubleAttribute U_ICU_ENTRY_POINT_RENAME(unum_setDoubleAttribute)\n#define unum_setSymbol U_ICU_ENTRY_POINT_RENAME(unum_setSymbol)\n#define unum_setTextAttribute U_ICU_ENTRY_POINT_RENAME(unum_setTextAttribute)\n#define unum_toPattern U_ICU_ENTRY_POINT_RENAME(unum_toPattern)\n#define unumsys_close U_ICU_ENTRY_POINT_RENAME(unumsys_close)\n#define unumsys_getDescription U_ICU_ENTRY_POINT_RENAME(unumsys_getDescription)\n#define unumsys_getName U_ICU_ENTRY_POINT_RENAME(unumsys_getName)\n#define unumsys_getRadix U_ICU_ENTRY_POINT_RENAME(unumsys_getRadix)\n#define unumsys_isAlgorithmic U_ICU_ENTRY_POINT_RENAME(unumsys_isAlgorithmic)\n#define unumsys_open U_ICU_ENTRY_POINT_RENAME(unumsys_open)\n#define unumsys_openAvailableNames U_ICU_ENTRY_POINT_RENAME(unumsys_openAvailableNames)\n#define unumsys_openByName U_ICU_ENTRY_POINT_RENAME(unumsys_openByName)\n#define uplrules_close U_ICU_ENTRY_POINT_RENAME(uplrules_close)\n#define uplrules_getKeywords U_ICU_ENTRY_POINT_RENAME(uplrules_getKeywords)\n#define uplrules_open U_ICU_ENTRY_POINT_RENAME(uplrules_open)\n#define uplrules_openForType U_ICU_ENTRY_POINT_RENAME(uplrules_openForType)\n#define uplrules_select U_ICU_ENTRY_POINT_RENAME(uplrules_select)\n#define uplrules_selectWithFormat U_ICU_ENTRY_POINT_RENAME(uplrules_selectWithFormat)\n#define uplug_closeLibrary U_ICU_ENTRY_POINT_RENAME(uplug_closeLibrary)\n#define uplug_findLibrary U_ICU_ENTRY_POINT_RENAME(uplug_findLibrary)\n#define uplug_getConfiguration U_ICU_ENTRY_POINT_RENAME(uplug_getConfiguration)\n#define uplug_getContext U_ICU_ENTRY_POINT_RENAME(uplug_getContext)\n#define uplug_getCurrentLevel U_ICU_ENTRY_POINT_RENAME(uplug_getCurrentLevel)\n#define uplug_getLibrary U_ICU_ENTRY_POINT_RENAME(uplug_getLibrary)\n#define uplug_getLibraryName U_ICU_ENTRY_POINT_RENAME(uplug_getLibraryName)\n#define uplug_getPlugInternal U_ICU_ENTRY_POINT_RENAME(uplug_getPlugInternal)\n#define uplug_getPlugLevel U_ICU_ENTRY_POINT_RENAME(uplug_getPlugLevel)\n#define uplug_getPlugLoadStatus U_ICU_ENTRY_POINT_RENAME(uplug_getPlugLoadStatus)\n#define uplug_getPlugName U_ICU_ENTRY_POINT_RENAME(uplug_getPlugName)\n#define uplug_getPluginFile U_ICU_ENTRY_POINT_RENAME(uplug_getPluginFile)\n#define uplug_getSymbolName U_ICU_ENTRY_POINT_RENAME(uplug_getSymbolName)\n#define uplug_init U_ICU_ENTRY_POINT_RENAME(uplug_init)\n#define uplug_loadPlugFromEntrypoint U_ICU_ENTRY_POINT_RENAME(uplug_loadPlugFromEntrypoint)\n#define uplug_loadPlugFromLibrary U_ICU_ENTRY_POINT_RENAME(uplug_loadPlugFromLibrary)\n#define uplug_nextPlug U_ICU_ENTRY_POINT_RENAME(uplug_nextPlug)\n#define uplug_openLibrary U_ICU_ENTRY_POINT_RENAME(uplug_openLibrary)\n#define uplug_removePlug U_ICU_ENTRY_POINT_RENAME(uplug_removePlug)\n#define uplug_setContext U_ICU_ENTRY_POINT_RENAME(uplug_setContext)\n#define uplug_setPlugLevel U_ICU_ENTRY_POINT_RENAME(uplug_setPlugLevel)\n#define uplug_setPlugName U_ICU_ENTRY_POINT_RENAME(uplug_setPlugName)\n#define uplug_setPlugNoUnload U_ICU_ENTRY_POINT_RENAME(uplug_setPlugNoUnload)\n#define uprops_getSource U_ICU_ENTRY_POINT_RENAME(uprops_getSource)\n#define upropsvec_addPropertyStarts U_ICU_ENTRY_POINT_RENAME(upropsvec_addPropertyStarts)\n#define uprv_aestrncpy U_ICU_ENTRY_POINT_RENAME(uprv_aestrncpy)\n#define uprv_asciiFromEbcdic U_ICU_ENTRY_POINT_RENAME(uprv_asciiFromEbcdic)\n#define uprv_asciitolower U_ICU_ENTRY_POINT_RENAME(uprv_asciitolower)\n#define uprv_calloc U_ICU_ENTRY_POINT_RENAME(uprv_calloc)\n#define uprv_ceil U_ICU_ENTRY_POINT_RENAME(uprv_ceil)\n#define uprv_compareASCIIPropertyNames U_ICU_ENTRY_POINT_RENAME(uprv_compareASCIIPropertyNames)\n#define uprv_compareEBCDICPropertyNames U_ICU_ENTRY_POINT_RENAME(uprv_compareEBCDICPropertyNames)\n#define uprv_compareInvAscii U_ICU_ENTRY_POINT_RENAME(uprv_compareInvAscii)\n#define uprv_compareInvEbcdic U_ICU_ENTRY_POINT_RENAME(uprv_compareInvEbcdic)\n#define uprv_compareInvEbcdicAsAscii U_ICU_ENTRY_POINT_RENAME(uprv_compareInvEbcdicAsAscii)\n#define uprv_convertToLCID U_ICU_ENTRY_POINT_RENAME(uprv_convertToLCID)\n#define uprv_convertToLCIDPlatform U_ICU_ENTRY_POINT_RENAME(uprv_convertToLCIDPlatform)\n#define uprv_convertToPosix U_ICU_ENTRY_POINT_RENAME(uprv_convertToPosix)\n#define uprv_copyAscii U_ICU_ENTRY_POINT_RENAME(uprv_copyAscii)\n#define uprv_copyEbcdic U_ICU_ENTRY_POINT_RENAME(uprv_copyEbcdic)\n#define uprv_decContextClearStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextClearStatus)\n#define uprv_decContextDefault U_ICU_ENTRY_POINT_RENAME(uprv_decContextDefault)\n#define uprv_decContextGetRounding U_ICU_ENTRY_POINT_RENAME(uprv_decContextGetRounding)\n#define uprv_decContextGetStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextGetStatus)\n#define uprv_decContextRestoreStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextRestoreStatus)\n#define uprv_decContextSaveStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextSaveStatus)\n#define uprv_decContextSetRounding U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetRounding)\n#define uprv_decContextSetStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatus)\n#define uprv_decContextSetStatusFromString U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatusFromString)\n#define uprv_decContextSetStatusFromStringQuiet U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatusFromStringQuiet)\n#define uprv_decContextSetStatusQuiet U_ICU_ENTRY_POINT_RENAME(uprv_decContextSetStatusQuiet)\n#define uprv_decContextStatusToString U_ICU_ENTRY_POINT_RENAME(uprv_decContextStatusToString)\n#define uprv_decContextTestSavedStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextTestSavedStatus)\n#define uprv_decContextTestStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextTestStatus)\n#define uprv_decContextZeroStatus U_ICU_ENTRY_POINT_RENAME(uprv_decContextZeroStatus)\n#define uprv_decNumberAbs U_ICU_ENTRY_POINT_RENAME(uprv_decNumberAbs)\n#define uprv_decNumberAdd U_ICU_ENTRY_POINT_RENAME(uprv_decNumberAdd)\n#define uprv_decNumberAnd U_ICU_ENTRY_POINT_RENAME(uprv_decNumberAnd)\n#define uprv_decNumberClass U_ICU_ENTRY_POINT_RENAME(uprv_decNumberClass)\n#define uprv_decNumberClassToString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberClassToString)\n#define uprv_decNumberCompare U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompare)\n#define uprv_decNumberCompareSignal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompareSignal)\n#define uprv_decNumberCompareTotal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompareTotal)\n#define uprv_decNumberCompareTotalMag U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCompareTotalMag)\n#define uprv_decNumberCopy U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopy)\n#define uprv_decNumberCopyAbs U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopyAbs)\n#define uprv_decNumberCopyNegate U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopyNegate)\n#define uprv_decNumberCopySign U_ICU_ENTRY_POINT_RENAME(uprv_decNumberCopySign)\n#define uprv_decNumberDivide U_ICU_ENTRY_POINT_RENAME(uprv_decNumberDivide)\n#define uprv_decNumberDivideInteger U_ICU_ENTRY_POINT_RENAME(uprv_decNumberDivideInteger)\n#define uprv_decNumberExp U_ICU_ENTRY_POINT_RENAME(uprv_decNumberExp)\n#define uprv_decNumberFMA U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFMA)\n#define uprv_decNumberFromInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFromInt32)\n#define uprv_decNumberFromString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFromString)\n#define uprv_decNumberFromUInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberFromUInt32)\n#define uprv_decNumberGetBCD U_ICU_ENTRY_POINT_RENAME(uprv_decNumberGetBCD)\n#define uprv_decNumberInvert U_ICU_ENTRY_POINT_RENAME(uprv_decNumberInvert)\n#define uprv_decNumberIsNormal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberIsNormal)\n#define uprv_decNumberIsSubnormal U_ICU_ENTRY_POINT_RENAME(uprv_decNumberIsSubnormal)\n#define uprv_decNumberLn U_ICU_ENTRY_POINT_RENAME(uprv_decNumberLn)\n#define uprv_decNumberLog10 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberLog10)\n#define uprv_decNumberLogB U_ICU_ENTRY_POINT_RENAME(uprv_decNumberLogB)\n#define uprv_decNumberMax U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMax)\n#define uprv_decNumberMaxMag U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMaxMag)\n#define uprv_decNumberMin U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMin)\n#define uprv_decNumberMinMag U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMinMag)\n#define uprv_decNumberMinus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMinus)\n#define uprv_decNumberMultiply U_ICU_ENTRY_POINT_RENAME(uprv_decNumberMultiply)\n#define uprv_decNumberNextMinus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNextMinus)\n#define uprv_decNumberNextPlus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNextPlus)\n#define uprv_decNumberNextToward U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNextToward)\n#define uprv_decNumberNormalize U_ICU_ENTRY_POINT_RENAME(uprv_decNumberNormalize)\n#define uprv_decNumberOr U_ICU_ENTRY_POINT_RENAME(uprv_decNumberOr)\n#define uprv_decNumberPlus U_ICU_ENTRY_POINT_RENAME(uprv_decNumberPlus)\n#define uprv_decNumberPower U_ICU_ENTRY_POINT_RENAME(uprv_decNumberPower)\n#define uprv_decNumberQuantize U_ICU_ENTRY_POINT_RENAME(uprv_decNumberQuantize)\n#define uprv_decNumberReduce U_ICU_ENTRY_POINT_RENAME(uprv_decNumberReduce)\n#define uprv_decNumberRemainder U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRemainder)\n#define uprv_decNumberRemainderNear U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRemainderNear)\n#define uprv_decNumberRescale U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRescale)\n#define uprv_decNumberRotate U_ICU_ENTRY_POINT_RENAME(uprv_decNumberRotate)\n#define uprv_decNumberSameQuantum U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSameQuantum)\n#define uprv_decNumberScaleB U_ICU_ENTRY_POINT_RENAME(uprv_decNumberScaleB)\n#define uprv_decNumberSetBCD U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSetBCD)\n#define uprv_decNumberShift U_ICU_ENTRY_POINT_RENAME(uprv_decNumberShift)\n#define uprv_decNumberSquareRoot U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSquareRoot)\n#define uprv_decNumberSubtract U_ICU_ENTRY_POINT_RENAME(uprv_decNumberSubtract)\n#define uprv_decNumberToEngString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToEngString)\n#define uprv_decNumberToInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToInt32)\n#define uprv_decNumberToIntegralExact U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToIntegralExact)\n#define uprv_decNumberToIntegralValue U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToIntegralValue)\n#define uprv_decNumberToString U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToString)\n#define uprv_decNumberToUInt32 U_ICU_ENTRY_POINT_RENAME(uprv_decNumberToUInt32)\n#define uprv_decNumberTrim U_ICU_ENTRY_POINT_RENAME(uprv_decNumberTrim)\n#define uprv_decNumberVersion U_ICU_ENTRY_POINT_RENAME(uprv_decNumberVersion)\n#define uprv_decNumberXor U_ICU_ENTRY_POINT_RENAME(uprv_decNumberXor)\n#define uprv_decNumberZero U_ICU_ENTRY_POINT_RENAME(uprv_decNumberZero)\n#define uprv_deleteConditionalCE32 U_ICU_ENTRY_POINT_RENAME(uprv_deleteConditionalCE32)\n#define uprv_deleteUObject U_ICU_ENTRY_POINT_RENAME(uprv_deleteUObject)\n#define uprv_dl_close U_ICU_ENTRY_POINT_RENAME(uprv_dl_close)\n#define uprv_dl_open U_ICU_ENTRY_POINT_RENAME(uprv_dl_open)\n#define uprv_dlsym_func U_ICU_ENTRY_POINT_RENAME(uprv_dlsym_func)\n#define uprv_eastrncpy U_ICU_ENTRY_POINT_RENAME(uprv_eastrncpy)\n#define uprv_ebcdicFromAscii U_ICU_ENTRY_POINT_RENAME(uprv_ebcdicFromAscii)\n#define uprv_ebcdicToLowercaseAscii U_ICU_ENTRY_POINT_RENAME(uprv_ebcdicToLowercaseAscii)\n#define uprv_ebcdictolower U_ICU_ENTRY_POINT_RENAME(uprv_ebcdictolower)\n#define uprv_fabs U_ICU_ENTRY_POINT_RENAME(uprv_fabs)\n#define uprv_floor U_ICU_ENTRY_POINT_RENAME(uprv_floor)\n#define uprv_fmax U_ICU_ENTRY_POINT_RENAME(uprv_fmax)\n#define uprv_fmin U_ICU_ENTRY_POINT_RENAME(uprv_fmin)\n#define uprv_fmod U_ICU_ENTRY_POINT_RENAME(uprv_fmod)\n#define uprv_free U_ICU_ENTRY_POINT_RENAME(uprv_free)\n#define uprv_getCharNameCharacters U_ICU_ENTRY_POINT_RENAME(uprv_getCharNameCharacters)\n#define uprv_getDefaultCodepage U_ICU_ENTRY_POINT_RENAME(uprv_getDefaultCodepage)\n#define uprv_getDefaultLocaleID U_ICU_ENTRY_POINT_RENAME(uprv_getDefaultLocaleID)\n#define uprv_getInfinity U_ICU_ENTRY_POINT_RENAME(uprv_getInfinity)\n#define uprv_getMaxCharNameLength U_ICU_ENTRY_POINT_RENAME(uprv_getMaxCharNameLength)\n#define uprv_getMaxValues U_ICU_ENTRY_POINT_RENAME(uprv_getMaxValues)\n#define uprv_getNaN U_ICU_ENTRY_POINT_RENAME(uprv_getNaN)\n#define uprv_getRawUTCtime U_ICU_ENTRY_POINT_RENAME(uprv_getRawUTCtime)\n#define uprv_getStaticCurrencyName U_ICU_ENTRY_POINT_RENAME(uprv_getStaticCurrencyName)\n#define uprv_getUTCtime U_ICU_ENTRY_POINT_RENAME(uprv_getUTCtime)\n#define uprv_haveProperties U_ICU_ENTRY_POINT_RENAME(uprv_haveProperties)\n#define uprv_int32Comparator U_ICU_ENTRY_POINT_RENAME(uprv_int32Comparator)\n#define uprv_isASCIILetter U_ICU_ENTRY_POINT_RENAME(uprv_isASCIILetter)\n#define uprv_isInfinite U_ICU_ENTRY_POINT_RENAME(uprv_isInfinite)\n#define uprv_isInvariantString U_ICU_ENTRY_POINT_RENAME(uprv_isInvariantString)\n#define uprv_isInvariantUString U_ICU_ENTRY_POINT_RENAME(uprv_isInvariantUString)\n#define uprv_isNaN U_ICU_ENTRY_POINT_RENAME(uprv_isNaN)\n#define uprv_isNegativeInfinity U_ICU_ENTRY_POINT_RENAME(uprv_isNegativeInfinity)\n#define uprv_isPositiveInfinity U_ICU_ENTRY_POINT_RENAME(uprv_isPositiveInfinity)\n#define uprv_itou U_ICU_ENTRY_POINT_RENAME(uprv_itou)\n#define uprv_log U_ICU_ENTRY_POINT_RENAME(uprv_log)\n#define uprv_malloc U_ICU_ENTRY_POINT_RENAME(uprv_malloc)\n#define uprv_mapFile U_ICU_ENTRY_POINT_RENAME(uprv_mapFile)\n#define uprv_max U_ICU_ENTRY_POINT_RENAME(uprv_max)\n#define uprv_maxMantissa U_ICU_ENTRY_POINT_RENAME(uprv_maxMantissa)\n#define uprv_maximumPtr U_ICU_ENTRY_POINT_RENAME(uprv_maximumPtr)\n#define uprv_min U_ICU_ENTRY_POINT_RENAME(uprv_min)\n#define uprv_modf U_ICU_ENTRY_POINT_RENAME(uprv_modf)\n#define uprv_parseCurrency U_ICU_ENTRY_POINT_RENAME(uprv_parseCurrency)\n#define uprv_pathIsAbsolute U_ICU_ENTRY_POINT_RENAME(uprv_pathIsAbsolute)\n#define uprv_pow U_ICU_ENTRY_POINT_RENAME(uprv_pow)\n#define uprv_pow10 U_ICU_ENTRY_POINT_RENAME(uprv_pow10)\n#define uprv_realloc U_ICU_ENTRY_POINT_RENAME(uprv_realloc)\n#define uprv_round U_ICU_ENTRY_POINT_RENAME(uprv_round)\n#define uprv_sortArray U_ICU_ENTRY_POINT_RENAME(uprv_sortArray)\n#define uprv_stableBinarySearch U_ICU_ENTRY_POINT_RENAME(uprv_stableBinarySearch)\n#define uprv_strCompare U_ICU_ENTRY_POINT_RENAME(uprv_strCompare)\n#define uprv_strdup U_ICU_ENTRY_POINT_RENAME(uprv_strdup)\n#define uprv_stricmp U_ICU_ENTRY_POINT_RENAME(uprv_stricmp)\n#define uprv_strndup U_ICU_ENTRY_POINT_RENAME(uprv_strndup)\n#define uprv_strnicmp U_ICU_ENTRY_POINT_RENAME(uprv_strnicmp)\n#define uprv_syntaxError U_ICU_ENTRY_POINT_RENAME(uprv_syntaxError)\n#define uprv_timezone U_ICU_ENTRY_POINT_RENAME(uprv_timezone)\n#define uprv_toupper U_ICU_ENTRY_POINT_RENAME(uprv_toupper)\n#define uprv_trunc U_ICU_ENTRY_POINT_RENAME(uprv_trunc)\n#define uprv_tzname U_ICU_ENTRY_POINT_RENAME(uprv_tzname)\n#define uprv_tzname_clear_cache U_ICU_ENTRY_POINT_RENAME(uprv_tzname_clear_cache)\n#define uprv_tzset U_ICU_ENTRY_POINT_RENAME(uprv_tzset)\n#define uprv_uint16Comparator U_ICU_ENTRY_POINT_RENAME(uprv_uint16Comparator)\n#define uprv_uint32Comparator U_ICU_ENTRY_POINT_RENAME(uprv_uint32Comparator)\n#define uprv_unmapFile U_ICU_ENTRY_POINT_RENAME(uprv_unmapFile)\n#define upvec_cloneArray U_ICU_ENTRY_POINT_RENAME(upvec_cloneArray)\n#define upvec_close U_ICU_ENTRY_POINT_RENAME(upvec_close)\n#define upvec_compact U_ICU_ENTRY_POINT_RENAME(upvec_compact)\n#define upvec_compactToUTrie2Handler U_ICU_ENTRY_POINT_RENAME(upvec_compactToUTrie2Handler)\n#define upvec_compactToUTrie2WithRowIndexes U_ICU_ENTRY_POINT_RENAME(upvec_compactToUTrie2WithRowIndexes)\n#define upvec_getArray U_ICU_ENTRY_POINT_RENAME(upvec_getArray)\n#define upvec_getRow U_ICU_ENTRY_POINT_RENAME(upvec_getRow)\n#define upvec_getValue U_ICU_ENTRY_POINT_RENAME(upvec_getValue)\n#define upvec_open U_ICU_ENTRY_POINT_RENAME(upvec_open)\n#define upvec_setValue U_ICU_ENTRY_POINT_RENAME(upvec_setValue)\n#define uregex_appendReplacement U_ICU_ENTRY_POINT_RENAME(uregex_appendReplacement)\n#define uregex_appendReplacementUText U_ICU_ENTRY_POINT_RENAME(uregex_appendReplacementUText)\n#define uregex_appendTail U_ICU_ENTRY_POINT_RENAME(uregex_appendTail)\n#define uregex_appendTailUText U_ICU_ENTRY_POINT_RENAME(uregex_appendTailUText)\n#define uregex_clone U_ICU_ENTRY_POINT_RENAME(uregex_clone)\n#define uregex_close U_ICU_ENTRY_POINT_RENAME(uregex_close)\n#define uregex_end U_ICU_ENTRY_POINT_RENAME(uregex_end)\n#define uregex_end64 U_ICU_ENTRY_POINT_RENAME(uregex_end64)\n#define uregex_find U_ICU_ENTRY_POINT_RENAME(uregex_find)\n#define uregex_find64 U_ICU_ENTRY_POINT_RENAME(uregex_find64)\n#define uregex_findNext U_ICU_ENTRY_POINT_RENAME(uregex_findNext)\n#define uregex_flags U_ICU_ENTRY_POINT_RENAME(uregex_flags)\n#define uregex_getFindProgressCallback U_ICU_ENTRY_POINT_RENAME(uregex_getFindProgressCallback)\n#define uregex_getMatchCallback U_ICU_ENTRY_POINT_RENAME(uregex_getMatchCallback)\n#define uregex_getStackLimit U_ICU_ENTRY_POINT_RENAME(uregex_getStackLimit)\n#define uregex_getText U_ICU_ENTRY_POINT_RENAME(uregex_getText)\n#define uregex_getTimeLimit U_ICU_ENTRY_POINT_RENAME(uregex_getTimeLimit)\n#define uregex_getUText U_ICU_ENTRY_POINT_RENAME(uregex_getUText)\n#define uregex_group U_ICU_ENTRY_POINT_RENAME(uregex_group)\n#define uregex_groupCount U_ICU_ENTRY_POINT_RENAME(uregex_groupCount)\n#define uregex_groupNumberFromCName U_ICU_ENTRY_POINT_RENAME(uregex_groupNumberFromCName)\n#define uregex_groupNumberFromName U_ICU_ENTRY_POINT_RENAME(uregex_groupNumberFromName)\n#define uregex_groupUText U_ICU_ENTRY_POINT_RENAME(uregex_groupUText)\n#define uregex_hasAnchoringBounds U_ICU_ENTRY_POINT_RENAME(uregex_hasAnchoringBounds)\n#define uregex_hasTransparentBounds U_ICU_ENTRY_POINT_RENAME(uregex_hasTransparentBounds)\n#define uregex_hitEnd U_ICU_ENTRY_POINT_RENAME(uregex_hitEnd)\n#define uregex_lookingAt U_ICU_ENTRY_POINT_RENAME(uregex_lookingAt)\n#define uregex_lookingAt64 U_ICU_ENTRY_POINT_RENAME(uregex_lookingAt64)\n#define uregex_matches U_ICU_ENTRY_POINT_RENAME(uregex_matches)\n#define uregex_matches64 U_ICU_ENTRY_POINT_RENAME(uregex_matches64)\n#define uregex_open U_ICU_ENTRY_POINT_RENAME(uregex_open)\n#define uregex_openC U_ICU_ENTRY_POINT_RENAME(uregex_openC)\n#define uregex_openUText U_ICU_ENTRY_POINT_RENAME(uregex_openUText)\n#define uregex_pattern U_ICU_ENTRY_POINT_RENAME(uregex_pattern)\n#define uregex_patternUText U_ICU_ENTRY_POINT_RENAME(uregex_patternUText)\n#define uregex_refreshUText U_ICU_ENTRY_POINT_RENAME(uregex_refreshUText)\n#define uregex_regionEnd U_ICU_ENTRY_POINT_RENAME(uregex_regionEnd)\n#define uregex_regionEnd64 U_ICU_ENTRY_POINT_RENAME(uregex_regionEnd64)\n#define uregex_regionStart U_ICU_ENTRY_POINT_RENAME(uregex_regionStart)\n#define uregex_regionStart64 U_ICU_ENTRY_POINT_RENAME(uregex_regionStart64)\n#define uregex_replaceAll U_ICU_ENTRY_POINT_RENAME(uregex_replaceAll)\n#define uregex_replaceAllUText U_ICU_ENTRY_POINT_RENAME(uregex_replaceAllUText)\n#define uregex_replaceFirst U_ICU_ENTRY_POINT_RENAME(uregex_replaceFirst)\n#define uregex_replaceFirstUText U_ICU_ENTRY_POINT_RENAME(uregex_replaceFirstUText)\n#define uregex_requireEnd U_ICU_ENTRY_POINT_RENAME(uregex_requireEnd)\n#define uregex_reset U_ICU_ENTRY_POINT_RENAME(uregex_reset)\n#define uregex_reset64 U_ICU_ENTRY_POINT_RENAME(uregex_reset64)\n#define uregex_setFindProgressCallback U_ICU_ENTRY_POINT_RENAME(uregex_setFindProgressCallback)\n#define uregex_setMatchCallback U_ICU_ENTRY_POINT_RENAME(uregex_setMatchCallback)\n#define uregex_setRegion U_ICU_ENTRY_POINT_RENAME(uregex_setRegion)\n#define uregex_setRegion64 U_ICU_ENTRY_POINT_RENAME(uregex_setRegion64)\n#define uregex_setRegionAndStart U_ICU_ENTRY_POINT_RENAME(uregex_setRegionAndStart)\n#define uregex_setStackLimit U_ICU_ENTRY_POINT_RENAME(uregex_setStackLimit)\n#define uregex_setText U_ICU_ENTRY_POINT_RENAME(uregex_setText)\n#define uregex_setTimeLimit U_ICU_ENTRY_POINT_RENAME(uregex_setTimeLimit)\n#define uregex_setUText U_ICU_ENTRY_POINT_RENAME(uregex_setUText)\n#define uregex_split U_ICU_ENTRY_POINT_RENAME(uregex_split)\n#define uregex_splitUText U_ICU_ENTRY_POINT_RENAME(uregex_splitUText)\n#define uregex_start U_ICU_ENTRY_POINT_RENAME(uregex_start)\n#define uregex_start64 U_ICU_ENTRY_POINT_RENAME(uregex_start64)\n#define uregex_ucstr_unescape_charAt U_ICU_ENTRY_POINT_RENAME(uregex_ucstr_unescape_charAt)\n#define uregex_useAnchoringBounds U_ICU_ENTRY_POINT_RENAME(uregex_useAnchoringBounds)\n#define uregex_useTransparentBounds U_ICU_ENTRY_POINT_RENAME(uregex_useTransparentBounds)\n#define uregex_utext_unescape_charAt U_ICU_ENTRY_POINT_RENAME(uregex_utext_unescape_charAt)\n#define uregion_areEqual U_ICU_ENTRY_POINT_RENAME(uregion_areEqual)\n#define uregion_contains U_ICU_ENTRY_POINT_RENAME(uregion_contains)\n#define uregion_getAvailable U_ICU_ENTRY_POINT_RENAME(uregion_getAvailable)\n#define uregion_getContainedRegions U_ICU_ENTRY_POINT_RENAME(uregion_getContainedRegions)\n#define uregion_getContainedRegionsOfType U_ICU_ENTRY_POINT_RENAME(uregion_getContainedRegionsOfType)\n#define uregion_getContainingRegion U_ICU_ENTRY_POINT_RENAME(uregion_getContainingRegion)\n#define uregion_getContainingRegionOfType U_ICU_ENTRY_POINT_RENAME(uregion_getContainingRegionOfType)\n#define uregion_getNumericCode U_ICU_ENTRY_POINT_RENAME(uregion_getNumericCode)\n#define uregion_getPreferredValues U_ICU_ENTRY_POINT_RENAME(uregion_getPreferredValues)\n#define uregion_getRegionCode U_ICU_ENTRY_POINT_RENAME(uregion_getRegionCode)\n#define uregion_getRegionFromCode U_ICU_ENTRY_POINT_RENAME(uregion_getRegionFromCode)\n#define uregion_getRegionFromNumericCode U_ICU_ENTRY_POINT_RENAME(uregion_getRegionFromNumericCode)\n#define uregion_getType U_ICU_ENTRY_POINT_RENAME(uregion_getType)\n#define ureldatefmt_close U_ICU_ENTRY_POINT_RENAME(ureldatefmt_close)\n#define ureldatefmt_combineDateAndTime U_ICU_ENTRY_POINT_RENAME(ureldatefmt_combineDateAndTime)\n#define ureldatefmt_format U_ICU_ENTRY_POINT_RENAME(ureldatefmt_format)\n#define ureldatefmt_formatNumeric U_ICU_ENTRY_POINT_RENAME(ureldatefmt_formatNumeric)\n#define ureldatefmt_open U_ICU_ENTRY_POINT_RENAME(ureldatefmt_open)\n#define ures_close U_ICU_ENTRY_POINT_RENAME(ures_close)\n#define ures_copyResb U_ICU_ENTRY_POINT_RENAME(ures_copyResb)\n#define ures_countArrayItems U_ICU_ENTRY_POINT_RENAME(ures_countArrayItems)\n#define ures_findResource U_ICU_ENTRY_POINT_RENAME(ures_findResource)\n#define ures_findSubResource U_ICU_ENTRY_POINT_RENAME(ures_findSubResource)\n#define ures_getAllItemsWithFallback U_ICU_ENTRY_POINT_RENAME(ures_getAllItemsWithFallback)\n#define ures_getBinary U_ICU_ENTRY_POINT_RENAME(ures_getBinary)\n#define ures_getByIndex U_ICU_ENTRY_POINT_RENAME(ures_getByIndex)\n#define ures_getByKey U_ICU_ENTRY_POINT_RENAME(ures_getByKey)\n#define ures_getByKeyWithFallback U_ICU_ENTRY_POINT_RENAME(ures_getByKeyWithFallback)\n#define ures_getFunctionalEquivalent U_ICU_ENTRY_POINT_RENAME(ures_getFunctionalEquivalent)\n#define ures_getInt U_ICU_ENTRY_POINT_RENAME(ures_getInt)\n#define ures_getIntVector U_ICU_ENTRY_POINT_RENAME(ures_getIntVector)\n#define ures_getKey U_ICU_ENTRY_POINT_RENAME(ures_getKey)\n#define ures_getKeywordValues U_ICU_ENTRY_POINT_RENAME(ures_getKeywordValues)\n#define ures_getLocale U_ICU_ENTRY_POINT_RENAME(ures_getLocale)\n#define ures_getLocaleByType U_ICU_ENTRY_POINT_RENAME(ures_getLocaleByType)\n#define ures_getLocaleInternal U_ICU_ENTRY_POINT_RENAME(ures_getLocaleInternal)\n#define ures_getName U_ICU_ENTRY_POINT_RENAME(ures_getName)\n#define ures_getNextResource U_ICU_ENTRY_POINT_RENAME(ures_getNextResource)\n#define ures_getNextString U_ICU_ENTRY_POINT_RENAME(ures_getNextString)\n#define ures_getSize U_ICU_ENTRY_POINT_RENAME(ures_getSize)\n#define ures_getString U_ICU_ENTRY_POINT_RENAME(ures_getString)\n#define ures_getStringByIndex U_ICU_ENTRY_POINT_RENAME(ures_getStringByIndex)\n#define ures_getStringByKey U_ICU_ENTRY_POINT_RENAME(ures_getStringByKey)\n#define ures_getStringByKeyWithFallback U_ICU_ENTRY_POINT_RENAME(ures_getStringByKeyWithFallback)\n#define ures_getType U_ICU_ENTRY_POINT_RENAME(ures_getType)\n#define ures_getUInt U_ICU_ENTRY_POINT_RENAME(ures_getUInt)\n#define ures_getUTF8String U_ICU_ENTRY_POINT_RENAME(ures_getUTF8String)\n#define ures_getUTF8StringByIndex U_ICU_ENTRY_POINT_RENAME(ures_getUTF8StringByIndex)\n#define ures_getUTF8StringByKey U_ICU_ENTRY_POINT_RENAME(ures_getUTF8StringByKey)\n#define ures_getVersion U_ICU_ENTRY_POINT_RENAME(ures_getVersion)\n#define ures_getVersionByKey U_ICU_ENTRY_POINT_RENAME(ures_getVersionByKey)\n#define ures_getVersionNumber U_ICU_ENTRY_POINT_RENAME(ures_getVersionNumber)\n#define ures_getVersionNumberInternal U_ICU_ENTRY_POINT_RENAME(ures_getVersionNumberInternal)\n#define ures_hasNext U_ICU_ENTRY_POINT_RENAME(ures_hasNext)\n#define ures_initStackObject U_ICU_ENTRY_POINT_RENAME(ures_initStackObject)\n#define ures_open U_ICU_ENTRY_POINT_RENAME(ures_open)\n#define ures_openAvailableLocales U_ICU_ENTRY_POINT_RENAME(ures_openAvailableLocales)\n#define ures_openDirect U_ICU_ENTRY_POINT_RENAME(ures_openDirect)\n#define ures_openFillIn U_ICU_ENTRY_POINT_RENAME(ures_openFillIn)\n#define ures_openNoDefault U_ICU_ENTRY_POINT_RENAME(ures_openNoDefault)\n#define ures_openU U_ICU_ENTRY_POINT_RENAME(ures_openU)\n#define ures_resetIterator U_ICU_ENTRY_POINT_RENAME(ures_resetIterator)\n#define ures_swap U_ICU_ENTRY_POINT_RENAME(ures_swap)\n#define uscript_breaksBetweenLetters U_ICU_ENTRY_POINT_RENAME(uscript_breaksBetweenLetters)\n#define uscript_closeRun U_ICU_ENTRY_POINT_RENAME(uscript_closeRun)\n#define uscript_getCode U_ICU_ENTRY_POINT_RENAME(uscript_getCode)\n#define uscript_getName U_ICU_ENTRY_POINT_RENAME(uscript_getName)\n#define uscript_getSampleString U_ICU_ENTRY_POINT_RENAME(uscript_getSampleString)\n#define uscript_getSampleUnicodeString U_ICU_ENTRY_POINT_RENAME(uscript_getSampleUnicodeString)\n#define uscript_getScript U_ICU_ENTRY_POINT_RENAME(uscript_getScript)\n#define uscript_getScriptExtensions U_ICU_ENTRY_POINT_RENAME(uscript_getScriptExtensions)\n#define uscript_getShortName U_ICU_ENTRY_POINT_RENAME(uscript_getShortName)\n#define uscript_getUsage U_ICU_ENTRY_POINT_RENAME(uscript_getUsage)\n#define uscript_hasScript U_ICU_ENTRY_POINT_RENAME(uscript_hasScript)\n#define uscript_isCased U_ICU_ENTRY_POINT_RENAME(uscript_isCased)\n#define uscript_isRightToLeft U_ICU_ENTRY_POINT_RENAME(uscript_isRightToLeft)\n#define uscript_nextRun U_ICU_ENTRY_POINT_RENAME(uscript_nextRun)\n#define uscript_openRun U_ICU_ENTRY_POINT_RENAME(uscript_openRun)\n#define uscript_resetRun U_ICU_ENTRY_POINT_RENAME(uscript_resetRun)\n#define uscript_setRunText U_ICU_ENTRY_POINT_RENAME(uscript_setRunText)\n#define usearch_close U_ICU_ENTRY_POINT_RENAME(usearch_close)\n#define usearch_first U_ICU_ENTRY_POINT_RENAME(usearch_first)\n#define usearch_following U_ICU_ENTRY_POINT_RENAME(usearch_following)\n#define usearch_getAttribute U_ICU_ENTRY_POINT_RENAME(usearch_getAttribute)\n#define usearch_getBreakIterator U_ICU_ENTRY_POINT_RENAME(usearch_getBreakIterator)\n#define usearch_getCollator U_ICU_ENTRY_POINT_RENAME(usearch_getCollator)\n#define usearch_getMatchedLength U_ICU_ENTRY_POINT_RENAME(usearch_getMatchedLength)\n#define usearch_getMatchedStart U_ICU_ENTRY_POINT_RENAME(usearch_getMatchedStart)\n#define usearch_getMatchedText U_ICU_ENTRY_POINT_RENAME(usearch_getMatchedText)\n#define usearch_getOffset U_ICU_ENTRY_POINT_RENAME(usearch_getOffset)\n#define usearch_getPattern U_ICU_ENTRY_POINT_RENAME(usearch_getPattern)\n#define usearch_getText U_ICU_ENTRY_POINT_RENAME(usearch_getText)\n#define usearch_handleNextCanonical U_ICU_ENTRY_POINT_RENAME(usearch_handleNextCanonical)\n#define usearch_handleNextExact U_ICU_ENTRY_POINT_RENAME(usearch_handleNextExact)\n#define usearch_handlePreviousCanonical U_ICU_ENTRY_POINT_RENAME(usearch_handlePreviousCanonical)\n#define usearch_handlePreviousExact U_ICU_ENTRY_POINT_RENAME(usearch_handlePreviousExact)\n#define usearch_last U_ICU_ENTRY_POINT_RENAME(usearch_last)\n#define usearch_next U_ICU_ENTRY_POINT_RENAME(usearch_next)\n#define usearch_open U_ICU_ENTRY_POINT_RENAME(usearch_open)\n#define usearch_openFromCollator U_ICU_ENTRY_POINT_RENAME(usearch_openFromCollator)\n#define usearch_preceding U_ICU_ENTRY_POINT_RENAME(usearch_preceding)\n#define usearch_previous U_ICU_ENTRY_POINT_RENAME(usearch_previous)\n#define usearch_reset U_ICU_ENTRY_POINT_RENAME(usearch_reset)\n#define usearch_search U_ICU_ENTRY_POINT_RENAME(usearch_search)\n#define usearch_searchBackwards U_ICU_ENTRY_POINT_RENAME(usearch_searchBackwards)\n#define usearch_setAttribute U_ICU_ENTRY_POINT_RENAME(usearch_setAttribute)\n#define usearch_setBreakIterator U_ICU_ENTRY_POINT_RENAME(usearch_setBreakIterator)\n#define usearch_setCollator U_ICU_ENTRY_POINT_RENAME(usearch_setCollator)\n#define usearch_setOffset U_ICU_ENTRY_POINT_RENAME(usearch_setOffset)\n#define usearch_setPattern U_ICU_ENTRY_POINT_RENAME(usearch_setPattern)\n#define usearch_setText U_ICU_ENTRY_POINT_RENAME(usearch_setText)\n#define uset_add U_ICU_ENTRY_POINT_RENAME(uset_add)\n#define uset_addAll U_ICU_ENTRY_POINT_RENAME(uset_addAll)\n#define uset_addAllCodePoints U_ICU_ENTRY_POINT_RENAME(uset_addAllCodePoints)\n#define uset_addRange U_ICU_ENTRY_POINT_RENAME(uset_addRange)\n#define uset_addString U_ICU_ENTRY_POINT_RENAME(uset_addString)\n#define uset_applyIntPropertyValue U_ICU_ENTRY_POINT_RENAME(uset_applyIntPropertyValue)\n#define uset_applyPattern U_ICU_ENTRY_POINT_RENAME(uset_applyPattern)\n#define uset_applyPropertyAlias U_ICU_ENTRY_POINT_RENAME(uset_applyPropertyAlias)\n#define uset_charAt U_ICU_ENTRY_POINT_RENAME(uset_charAt)\n#define uset_clear U_ICU_ENTRY_POINT_RENAME(uset_clear)\n#define uset_clone U_ICU_ENTRY_POINT_RENAME(uset_clone)\n#define uset_cloneAsThawed U_ICU_ENTRY_POINT_RENAME(uset_cloneAsThawed)\n#define uset_close U_ICU_ENTRY_POINT_RENAME(uset_close)\n#define uset_closeOver U_ICU_ENTRY_POINT_RENAME(uset_closeOver)\n#define uset_compact U_ICU_ENTRY_POINT_RENAME(uset_compact)\n#define uset_complement U_ICU_ENTRY_POINT_RENAME(uset_complement)\n#define uset_complementAll U_ICU_ENTRY_POINT_RENAME(uset_complementAll)\n#define uset_contains U_ICU_ENTRY_POINT_RENAME(uset_contains)\n#define uset_containsAll U_ICU_ENTRY_POINT_RENAME(uset_containsAll)\n#define uset_containsAllCodePoints U_ICU_ENTRY_POINT_RENAME(uset_containsAllCodePoints)\n#define uset_containsNone U_ICU_ENTRY_POINT_RENAME(uset_containsNone)\n#define uset_containsRange U_ICU_ENTRY_POINT_RENAME(uset_containsRange)\n#define uset_containsSome U_ICU_ENTRY_POINT_RENAME(uset_containsSome)\n#define uset_containsString U_ICU_ENTRY_POINT_RENAME(uset_containsString)\n#define uset_equals U_ICU_ENTRY_POINT_RENAME(uset_equals)\n#define uset_freeze U_ICU_ENTRY_POINT_RENAME(uset_freeze)\n#define uset_getItem U_ICU_ENTRY_POINT_RENAME(uset_getItem)\n#define uset_getItemCount U_ICU_ENTRY_POINT_RENAME(uset_getItemCount)\n#define uset_getSerializedRange U_ICU_ENTRY_POINT_RENAME(uset_getSerializedRange)\n#define uset_getSerializedRangeCount U_ICU_ENTRY_POINT_RENAME(uset_getSerializedRangeCount)\n#define uset_getSerializedSet U_ICU_ENTRY_POINT_RENAME(uset_getSerializedSet)\n#define uset_indexOf U_ICU_ENTRY_POINT_RENAME(uset_indexOf)\n#define uset_isEmpty U_ICU_ENTRY_POINT_RENAME(uset_isEmpty)\n#define uset_isFrozen U_ICU_ENTRY_POINT_RENAME(uset_isFrozen)\n#define uset_open U_ICU_ENTRY_POINT_RENAME(uset_open)\n#define uset_openEmpty U_ICU_ENTRY_POINT_RENAME(uset_openEmpty)\n#define uset_openPattern U_ICU_ENTRY_POINT_RENAME(uset_openPattern)\n#define uset_openPatternOptions U_ICU_ENTRY_POINT_RENAME(uset_openPatternOptions)\n#define uset_remove U_ICU_ENTRY_POINT_RENAME(uset_remove)\n#define uset_removeAll U_ICU_ENTRY_POINT_RENAME(uset_removeAll)\n#define uset_removeAllStrings U_ICU_ENTRY_POINT_RENAME(uset_removeAllStrings)\n#define uset_removeRange U_ICU_ENTRY_POINT_RENAME(uset_removeRange)\n#define uset_removeString U_ICU_ENTRY_POINT_RENAME(uset_removeString)\n#define uset_resemblesPattern U_ICU_ENTRY_POINT_RENAME(uset_resemblesPattern)\n#define uset_retain U_ICU_ENTRY_POINT_RENAME(uset_retain)\n#define uset_retainAll U_ICU_ENTRY_POINT_RENAME(uset_retainAll)\n#define uset_serialize U_ICU_ENTRY_POINT_RENAME(uset_serialize)\n#define uset_serializedContains U_ICU_ENTRY_POINT_RENAME(uset_serializedContains)\n#define uset_set U_ICU_ENTRY_POINT_RENAME(uset_set)\n#define uset_setSerializedToOne U_ICU_ENTRY_POINT_RENAME(uset_setSerializedToOne)\n#define uset_size U_ICU_ENTRY_POINT_RENAME(uset_size)\n#define uset_span U_ICU_ENTRY_POINT_RENAME(uset_span)\n#define uset_spanBack U_ICU_ENTRY_POINT_RENAME(uset_spanBack)\n#define uset_spanBackUTF8 U_ICU_ENTRY_POINT_RENAME(uset_spanBackUTF8)\n#define uset_spanUTF8 U_ICU_ENTRY_POINT_RENAME(uset_spanUTF8)\n#define uset_toPattern U_ICU_ENTRY_POINT_RENAME(uset_toPattern)\n#define uspoof_areConfusable U_ICU_ENTRY_POINT_RENAME(uspoof_areConfusable)\n#define uspoof_areConfusableUTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_areConfusableUTF8)\n#define uspoof_areConfusableUnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_areConfusableUnicodeString)\n#define uspoof_check U_ICU_ENTRY_POINT_RENAME(uspoof_check)\n#define uspoof_check2 U_ICU_ENTRY_POINT_RENAME(uspoof_check2)\n#define uspoof_check2UTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_check2UTF8)\n#define uspoof_check2UnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_check2UnicodeString)\n#define uspoof_checkUTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_checkUTF8)\n#define uspoof_checkUnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_checkUnicodeString)\n#define uspoof_clone U_ICU_ENTRY_POINT_RENAME(uspoof_clone)\n#define uspoof_close U_ICU_ENTRY_POINT_RENAME(uspoof_close)\n#define uspoof_closeCheckResult U_ICU_ENTRY_POINT_RENAME(uspoof_closeCheckResult)\n#define uspoof_getAllowedChars U_ICU_ENTRY_POINT_RENAME(uspoof_getAllowedChars)\n#define uspoof_getAllowedLocales U_ICU_ENTRY_POINT_RENAME(uspoof_getAllowedLocales)\n#define uspoof_getAllowedUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_getAllowedUnicodeSet)\n#define uspoof_getCheckResultChecks U_ICU_ENTRY_POINT_RENAME(uspoof_getCheckResultChecks)\n#define uspoof_getCheckResultNumerics U_ICU_ENTRY_POINT_RENAME(uspoof_getCheckResultNumerics)\n#define uspoof_getCheckResultRestrictionLevel U_ICU_ENTRY_POINT_RENAME(uspoof_getCheckResultRestrictionLevel)\n#define uspoof_getChecks U_ICU_ENTRY_POINT_RENAME(uspoof_getChecks)\n#define uspoof_getInclusionSet U_ICU_ENTRY_POINT_RENAME(uspoof_getInclusionSet)\n#define uspoof_getInclusionUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_getInclusionUnicodeSet)\n#define uspoof_getRecommendedSet U_ICU_ENTRY_POINT_RENAME(uspoof_getRecommendedSet)\n#define uspoof_getRecommendedUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_getRecommendedUnicodeSet)\n#define uspoof_getRestrictionLevel U_ICU_ENTRY_POINT_RENAME(uspoof_getRestrictionLevel)\n#define uspoof_getSkeleton U_ICU_ENTRY_POINT_RENAME(uspoof_getSkeleton)\n#define uspoof_getSkeletonUTF8 U_ICU_ENTRY_POINT_RENAME(uspoof_getSkeletonUTF8)\n#define uspoof_getSkeletonUnicodeString U_ICU_ENTRY_POINT_RENAME(uspoof_getSkeletonUnicodeString)\n#define uspoof_internalInitStatics U_ICU_ENTRY_POINT_RENAME(uspoof_internalInitStatics)\n#define uspoof_open U_ICU_ENTRY_POINT_RENAME(uspoof_open)\n#define uspoof_openCheckResult U_ICU_ENTRY_POINT_RENAME(uspoof_openCheckResult)\n#define uspoof_openFromSerialized U_ICU_ENTRY_POINT_RENAME(uspoof_openFromSerialized)\n#define uspoof_openFromSource U_ICU_ENTRY_POINT_RENAME(uspoof_openFromSource)\n#define uspoof_serialize U_ICU_ENTRY_POINT_RENAME(uspoof_serialize)\n#define uspoof_setAllowedChars U_ICU_ENTRY_POINT_RENAME(uspoof_setAllowedChars)\n#define uspoof_setAllowedLocales U_ICU_ENTRY_POINT_RENAME(uspoof_setAllowedLocales)\n#define uspoof_setAllowedUnicodeSet U_ICU_ENTRY_POINT_RENAME(uspoof_setAllowedUnicodeSet)\n#define uspoof_setChecks U_ICU_ENTRY_POINT_RENAME(uspoof_setChecks)\n#define uspoof_setRestrictionLevel U_ICU_ENTRY_POINT_RENAME(uspoof_setRestrictionLevel)\n#define uspoof_swap U_ICU_ENTRY_POINT_RENAME(uspoof_swap)\n#define usprep_close U_ICU_ENTRY_POINT_RENAME(usprep_close)\n#define usprep_open U_ICU_ENTRY_POINT_RENAME(usprep_open)\n#define usprep_openByType U_ICU_ENTRY_POINT_RENAME(usprep_openByType)\n#define usprep_prepare U_ICU_ENTRY_POINT_RENAME(usprep_prepare)\n#define usprep_swap U_ICU_ENTRY_POINT_RENAME(usprep_swap)\n#define ustr_hashCharsN U_ICU_ENTRY_POINT_RENAME(ustr_hashCharsN)\n#define ustr_hashICharsN U_ICU_ENTRY_POINT_RENAME(ustr_hashICharsN)\n#define ustr_hashUCharsN U_ICU_ENTRY_POINT_RENAME(ustr_hashUCharsN)\n#define ustrcase_getCaseLocale U_ICU_ENTRY_POINT_RENAME(ustrcase_getCaseLocale)\n#define ustrcase_internalFold U_ICU_ENTRY_POINT_RENAME(ustrcase_internalFold)\n#define ustrcase_internalToLower U_ICU_ENTRY_POINT_RENAME(ustrcase_internalToLower)\n#define ustrcase_internalToTitle U_ICU_ENTRY_POINT_RENAME(ustrcase_internalToTitle)\n#define ustrcase_internalToUpper U_ICU_ENTRY_POINT_RENAME(ustrcase_internalToUpper)\n#define ustrcase_map U_ICU_ENTRY_POINT_RENAME(ustrcase_map)\n#define ustrcase_mapWithOverlap U_ICU_ENTRY_POINT_RENAME(ustrcase_mapWithOverlap)\n#define utext_char32At U_ICU_ENTRY_POINT_RENAME(utext_char32At)\n#define utext_clone U_ICU_ENTRY_POINT_RENAME(utext_clone)\n#define utext_close U_ICU_ENTRY_POINT_RENAME(utext_close)\n#define utext_copy U_ICU_ENTRY_POINT_RENAME(utext_copy)\n#define utext_current32 U_ICU_ENTRY_POINT_RENAME(utext_current32)\n#define utext_equals U_ICU_ENTRY_POINT_RENAME(utext_equals)\n#define utext_extract U_ICU_ENTRY_POINT_RENAME(utext_extract)\n#define utext_freeze U_ICU_ENTRY_POINT_RENAME(utext_freeze)\n#define utext_getNativeIndex U_ICU_ENTRY_POINT_RENAME(utext_getNativeIndex)\n#define utext_getPreviousNativeIndex U_ICU_ENTRY_POINT_RENAME(utext_getPreviousNativeIndex)\n#define utext_hasMetaData U_ICU_ENTRY_POINT_RENAME(utext_hasMetaData)\n#define utext_isLengthExpensive U_ICU_ENTRY_POINT_RENAME(utext_isLengthExpensive)\n#define utext_isWritable U_ICU_ENTRY_POINT_RENAME(utext_isWritable)\n#define utext_moveIndex32 U_ICU_ENTRY_POINT_RENAME(utext_moveIndex32)\n#define utext_nativeLength U_ICU_ENTRY_POINT_RENAME(utext_nativeLength)\n#define utext_next32 U_ICU_ENTRY_POINT_RENAME(utext_next32)\n#define utext_next32From U_ICU_ENTRY_POINT_RENAME(utext_next32From)\n#define utext_openCharacterIterator U_ICU_ENTRY_POINT_RENAME(utext_openCharacterIterator)\n#define utext_openConstUnicodeString U_ICU_ENTRY_POINT_RENAME(utext_openConstUnicodeString)\n#define utext_openReplaceable U_ICU_ENTRY_POINT_RENAME(utext_openReplaceable)\n#define utext_openUChars U_ICU_ENTRY_POINT_RENAME(utext_openUChars)\n#define utext_openUTF8 U_ICU_ENTRY_POINT_RENAME(utext_openUTF8)\n#define utext_openUnicodeString U_ICU_ENTRY_POINT_RENAME(utext_openUnicodeString)\n#define utext_previous32 U_ICU_ENTRY_POINT_RENAME(utext_previous32)\n#define utext_previous32From U_ICU_ENTRY_POINT_RENAME(utext_previous32From)\n#define utext_replace U_ICU_ENTRY_POINT_RENAME(utext_replace)\n#define utext_setNativeIndex U_ICU_ENTRY_POINT_RENAME(utext_setNativeIndex)\n#define utext_setup U_ICU_ENTRY_POINT_RENAME(utext_setup)\n#define utf8_appendCharSafeBody U_ICU_ENTRY_POINT_RENAME(utf8_appendCharSafeBody)\n#define utf8_back1SafeBody U_ICU_ENTRY_POINT_RENAME(utf8_back1SafeBody)\n#define utf8_countTrailBytes U_ICU_ENTRY_POINT_RENAME(utf8_countTrailBytes)\n#define utf8_nextCharSafeBody U_ICU_ENTRY_POINT_RENAME(utf8_nextCharSafeBody)\n#define utf8_prevCharSafeBody U_ICU_ENTRY_POINT_RENAME(utf8_prevCharSafeBody)\n#define utmscale_fromInt64 U_ICU_ENTRY_POINT_RENAME(utmscale_fromInt64)\n#define utmscale_getTimeScaleValue U_ICU_ENTRY_POINT_RENAME(utmscale_getTimeScaleValue)\n#define utmscale_toInt64 U_ICU_ENTRY_POINT_RENAME(utmscale_toInt64)\n#define utrace_cleanup U_ICU_ENTRY_POINT_RENAME(utrace_cleanup)\n#define utrace_data U_ICU_ENTRY_POINT_RENAME(utrace_data)\n#define utrace_entry U_ICU_ENTRY_POINT_RENAME(utrace_entry)\n#define utrace_exit U_ICU_ENTRY_POINT_RENAME(utrace_exit)\n#define utrace_format U_ICU_ENTRY_POINT_RENAME(utrace_format)\n#define utrace_functionName U_ICU_ENTRY_POINT_RENAME(utrace_functionName)\n#define utrace_getFunctions U_ICU_ENTRY_POINT_RENAME(utrace_getFunctions)\n#define utrace_getLevel U_ICU_ENTRY_POINT_RENAME(utrace_getLevel)\n#define utrace_setFunctions U_ICU_ENTRY_POINT_RENAME(utrace_setFunctions)\n#define utrace_setLevel U_ICU_ENTRY_POINT_RENAME(utrace_setLevel)\n#define utrace_vformat U_ICU_ENTRY_POINT_RENAME(utrace_vformat)\n#define utrans_clone U_ICU_ENTRY_POINT_RENAME(utrans_clone)\n#define utrans_close U_ICU_ENTRY_POINT_RENAME(utrans_close)\n#define utrans_countAvailableIDs U_ICU_ENTRY_POINT_RENAME(utrans_countAvailableIDs)\n#define utrans_getAvailableID U_ICU_ENTRY_POINT_RENAME(utrans_getAvailableID)\n#define utrans_getID U_ICU_ENTRY_POINT_RENAME(utrans_getID)\n#define utrans_getSourceSet U_ICU_ENTRY_POINT_RENAME(utrans_getSourceSet)\n#define utrans_getUnicodeID U_ICU_ENTRY_POINT_RENAME(utrans_getUnicodeID)\n#define utrans_open U_ICU_ENTRY_POINT_RENAME(utrans_open)\n#define utrans_openIDs U_ICU_ENTRY_POINT_RENAME(utrans_openIDs)\n#define utrans_openInverse U_ICU_ENTRY_POINT_RENAME(utrans_openInverse)\n#define utrans_openU U_ICU_ENTRY_POINT_RENAME(utrans_openU)\n#define utrans_register U_ICU_ENTRY_POINT_RENAME(utrans_register)\n#define utrans_rep_caseContextIterator U_ICU_ENTRY_POINT_RENAME(utrans_rep_caseContextIterator)\n#define utrans_setFilter U_ICU_ENTRY_POINT_RENAME(utrans_setFilter)\n#define utrans_stripRules U_ICU_ENTRY_POINT_RENAME(utrans_stripRules)\n#define utrans_toRules U_ICU_ENTRY_POINT_RENAME(utrans_toRules)\n#define utrans_trans U_ICU_ENTRY_POINT_RENAME(utrans_trans)\n#define utrans_transIncremental U_ICU_ENTRY_POINT_RENAME(utrans_transIncremental)\n#define utrans_transIncrementalUChars U_ICU_ENTRY_POINT_RENAME(utrans_transIncrementalUChars)\n#define utrans_transUChars U_ICU_ENTRY_POINT_RENAME(utrans_transUChars)\n#define utrans_transliterator_cleanup U_ICU_ENTRY_POINT_RENAME(utrans_transliterator_cleanup)\n#define utrans_unregister U_ICU_ENTRY_POINT_RENAME(utrans_unregister)\n#define utrans_unregisterID U_ICU_ENTRY_POINT_RENAME(utrans_unregisterID)\n#define utrie2_clone U_ICU_ENTRY_POINT_RENAME(utrie2_clone)\n#define utrie2_cloneAsThawed U_ICU_ENTRY_POINT_RENAME(utrie2_cloneAsThawed)\n#define utrie2_close U_ICU_ENTRY_POINT_RENAME(utrie2_close)\n#define utrie2_enum U_ICU_ENTRY_POINT_RENAME(utrie2_enum)\n#define utrie2_enumForLeadSurrogate U_ICU_ENTRY_POINT_RENAME(utrie2_enumForLeadSurrogate)\n#define utrie2_freeze U_ICU_ENTRY_POINT_RENAME(utrie2_freeze)\n#define utrie2_fromUTrie U_ICU_ENTRY_POINT_RENAME(utrie2_fromUTrie)\n#define utrie2_get32 U_ICU_ENTRY_POINT_RENAME(utrie2_get32)\n#define utrie2_get32FromLeadSurrogateCodeUnit U_ICU_ENTRY_POINT_RENAME(utrie2_get32FromLeadSurrogateCodeUnit)\n#define utrie2_getVersion U_ICU_ENTRY_POINT_RENAME(utrie2_getVersion)\n#define utrie2_internalU8NextIndex U_ICU_ENTRY_POINT_RENAME(utrie2_internalU8NextIndex)\n#define utrie2_internalU8PrevIndex U_ICU_ENTRY_POINT_RENAME(utrie2_internalU8PrevIndex)\n#define utrie2_isFrozen U_ICU_ENTRY_POINT_RENAME(utrie2_isFrozen)\n#define utrie2_open U_ICU_ENTRY_POINT_RENAME(utrie2_open)\n#define utrie2_openDummy U_ICU_ENTRY_POINT_RENAME(utrie2_openDummy)\n#define utrie2_openFromSerialized U_ICU_ENTRY_POINT_RENAME(utrie2_openFromSerialized)\n#define utrie2_serialize U_ICU_ENTRY_POINT_RENAME(utrie2_serialize)\n#define utrie2_set32 U_ICU_ENTRY_POINT_RENAME(utrie2_set32)\n#define utrie2_set32ForLeadSurrogateCodeUnit U_ICU_ENTRY_POINT_RENAME(utrie2_set32ForLeadSurrogateCodeUnit)\n#define utrie2_setRange32 U_ICU_ENTRY_POINT_RENAME(utrie2_setRange32)\n#define utrie2_swap U_ICU_ENTRY_POINT_RENAME(utrie2_swap)\n#define utrie2_swapAnyVersion U_ICU_ENTRY_POINT_RENAME(utrie2_swapAnyVersion)\n#define utrie_clone U_ICU_ENTRY_POINT_RENAME(utrie_clone)\n#define utrie_close U_ICU_ENTRY_POINT_RENAME(utrie_close)\n#define utrie_defaultGetFoldingOffset U_ICU_ENTRY_POINT_RENAME(utrie_defaultGetFoldingOffset)\n#define utrie_enum U_ICU_ENTRY_POINT_RENAME(utrie_enum)\n#define utrie_get32 U_ICU_ENTRY_POINT_RENAME(utrie_get32)\n#define utrie_getData U_ICU_ENTRY_POINT_RENAME(utrie_getData)\n#define utrie_open U_ICU_ENTRY_POINT_RENAME(utrie_open)\n#define utrie_serialize U_ICU_ENTRY_POINT_RENAME(utrie_serialize)\n#define utrie_set32 U_ICU_ENTRY_POINT_RENAME(utrie_set32)\n#define utrie_setRange32 U_ICU_ENTRY_POINT_RENAME(utrie_setRange32)\n#define utrie_swap U_ICU_ENTRY_POINT_RENAME(utrie_swap)\n#define utrie_unserialize U_ICU_ENTRY_POINT_RENAME(utrie_unserialize)\n#define utrie_unserializeDummy U_ICU_ENTRY_POINT_RENAME(utrie_unserializeDummy)\n#define vzone_clone U_ICU_ENTRY_POINT_RENAME(vzone_clone)\n#define vzone_close U_ICU_ENTRY_POINT_RENAME(vzone_close)\n#define vzone_countTransitionRules U_ICU_ENTRY_POINT_RENAME(vzone_countTransitionRules)\n#define vzone_equals U_ICU_ENTRY_POINT_RENAME(vzone_equals)\n#define vzone_getDynamicClassID U_ICU_ENTRY_POINT_RENAME(vzone_getDynamicClassID)\n#define vzone_getLastModified U_ICU_ENTRY_POINT_RENAME(vzone_getLastModified)\n#define vzone_getNextTransition U_ICU_ENTRY_POINT_RENAME(vzone_getNextTransition)\n#define vzone_getOffset U_ICU_ENTRY_POINT_RENAME(vzone_getOffset)\n#define vzone_getOffset2 U_ICU_ENTRY_POINT_RENAME(vzone_getOffset2)\n#define vzone_getOffset3 U_ICU_ENTRY_POINT_RENAME(vzone_getOffset3)\n#define vzone_getPreviousTransition U_ICU_ENTRY_POINT_RENAME(vzone_getPreviousTransition)\n#define vzone_getRawOffset U_ICU_ENTRY_POINT_RENAME(vzone_getRawOffset)\n#define vzone_getStaticClassID U_ICU_ENTRY_POINT_RENAME(vzone_getStaticClassID)\n#define vzone_getTZURL U_ICU_ENTRY_POINT_RENAME(vzone_getTZURL)\n#define vzone_hasSameRules U_ICU_ENTRY_POINT_RENAME(vzone_hasSameRules)\n#define vzone_inDaylightTime U_ICU_ENTRY_POINT_RENAME(vzone_inDaylightTime)\n#define vzone_openData U_ICU_ENTRY_POINT_RENAME(vzone_openData)\n#define vzone_openID U_ICU_ENTRY_POINT_RENAME(vzone_openID)\n#define vzone_setLastModified U_ICU_ENTRY_POINT_RENAME(vzone_setLastModified)\n#define vzone_setRawOffset U_ICU_ENTRY_POINT_RENAME(vzone_setRawOffset)\n#define vzone_setTZURL U_ICU_ENTRY_POINT_RENAME(vzone_setTZURL)\n#define vzone_useDaylightTime U_ICU_ENTRY_POINT_RENAME(vzone_useDaylightTime)\n#define vzone_write U_ICU_ENTRY_POINT_RENAME(vzone_write)\n#define vzone_writeFromStart U_ICU_ENTRY_POINT_RENAME(vzone_writeFromStart)\n#define vzone_writeSimple U_ICU_ENTRY_POINT_RENAME(vzone_writeSimple)\n#define zrule_close U_ICU_ENTRY_POINT_RENAME(zrule_close)\n#define zrule_equals U_ICU_ENTRY_POINT_RENAME(zrule_equals)\n#define zrule_getDSTSavings U_ICU_ENTRY_POINT_RENAME(zrule_getDSTSavings)\n#define zrule_getName U_ICU_ENTRY_POINT_RENAME(zrule_getName)\n#define zrule_getRawOffset U_ICU_ENTRY_POINT_RENAME(zrule_getRawOffset)\n#define zrule_isEquivalentTo U_ICU_ENTRY_POINT_RENAME(zrule_isEquivalentTo)\n#define ztrans_adoptFrom U_ICU_ENTRY_POINT_RENAME(ztrans_adoptFrom)\n#define ztrans_adoptTo U_ICU_ENTRY_POINT_RENAME(ztrans_adoptTo)\n#define ztrans_clone U_ICU_ENTRY_POINT_RENAME(ztrans_clone)\n#define ztrans_close U_ICU_ENTRY_POINT_RENAME(ztrans_close)\n#define ztrans_equals U_ICU_ENTRY_POINT_RENAME(ztrans_equals)\n#define ztrans_getDynamicClassID U_ICU_ENTRY_POINT_RENAME(ztrans_getDynamicClassID)\n#define ztrans_getFrom U_ICU_ENTRY_POINT_RENAME(ztrans_getFrom)\n#define ztrans_getStaticClassID U_ICU_ENTRY_POINT_RENAME(ztrans_getStaticClassID)\n#define ztrans_getTime U_ICU_ENTRY_POINT_RENAME(ztrans_getTime)\n#define ztrans_getTo U_ICU_ENTRY_POINT_RENAME(ztrans_getTo)\n#define ztrans_open U_ICU_ENTRY_POINT_RENAME(ztrans_open)\n#define ztrans_openEmpty U_ICU_ENTRY_POINT_RENAME(ztrans_openEmpty)\n#define ztrans_setFrom U_ICU_ENTRY_POINT_RENAME(ztrans_setFrom)\n#define ztrans_setTime U_ICU_ENTRY_POINT_RENAME(ztrans_setTime)\n#define ztrans_setTo U_ICU_ENTRY_POINT_RENAME(ztrans_setTo)\n\n#endif\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/sql-common/client_plugin.cc": "/* Copyright (c) 2010, 2019, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License, version 2.0,\n   as published by the Free Software Foundation.\n\n   This program is also distributed with certain software (including\n   but not limited to OpenSSL) that is licensed under separate terms,\n   as designated in a particular file or component or in included license\n   documentation.  The authors of MySQL hereby grant you an additional\n   permission to link the program and your derivative works with the\n   separately licensed software that they have included with MySQL.\n\n   Without limiting anything contained in the foregoing, this file,\n   which is part of C Driver for MySQL (Connector/C), is also subject to the\n   Universal FOSS Exception, version 1.0, a copy of which can be found at\n   http://oss.oracle.com/licenses/universal-foss-exception.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License, version 2.0, for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/**\n  @file\n\n  Support code for the client side (libmysql) plugins\n\n  Client plugins are somewhat different from server plugins, they are simpler.\n\n  They do not need to be installed or in any way explicitly loaded on the\n  client, they are loaded automatically on demand.\n  One client plugin per shared object, soname *must* match the plugin name.\n\n  There is no reference counting and no unloading either.\n*/\n\n#include \"my_config.h\"\n\n#include <mysql/client_plugin.h>\n#include <stdarg.h>\n#include <stdlib.h>\n#include <sys/types.h>\n\n#include \"errmsg.h\"\n#include \"m_ctype.h\"\n#include \"m_string.h\"\n#include \"my_alloc.h\"\n#include \"my_dbug.h\"\n#include \"my_inttypes.h\"\n#include \"my_io.h\"\n#include \"my_macros.h\"\n#include \"my_psi_config.h\"\n#include \"my_sys.h\"\n#include \"my_thread.h\"\n#include \"mysql.h\"\n#include \"mysql/psi/mysql_memory.h\"\n#include \"mysql/psi/mysql_mutex.h\"\n#include \"mysql/service_mysql_alloc.h\"\n#include \"sql_common.h\"\n#include \"template_utils.h\"\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#if defined(CLIENT_PROTOCOL_TRACING)\n#include <mysql/plugin_trace.h>\n#endif\n\nPSI_memory_key key_memory_root;\nPSI_memory_key key_memory_load_env_plugins;\n\nPSI_mutex_key key_mutex_LOCK_load_client_plugin;\n\n#ifdef HAVE_PSI_INTERFACE\nstatic PSI_mutex_info all_client_plugin_mutexes[] = {\n    {&key_mutex_LOCK_load_client_plugin, \"LOCK_load_client_plugin\",\n     PSI_FLAG_SINGLETON, 0, PSI_DOCUMENT_ME}};\n\nstatic PSI_memory_info all_client_plugin_memory[] = {\n    {&key_memory_root, \"root\", PSI_FLAG_ONLY_GLOBAL_STAT, 0, PSI_DOCUMENT_ME},\n    {&key_memory_load_env_plugins, \"load_env_plugins\",\n     PSI_FLAG_ONLY_GLOBAL_STAT, 0, PSI_DOCUMENT_ME}};\n\nstatic void init_client_plugin_psi_keys() {\n  const char *category = \"sql\";\n  int count;\n\n  count = array_elements(all_client_plugin_mutexes);\n  mysql_mutex_register(category, all_client_plugin_mutexes, count);\n\n  count = array_elements(all_client_plugin_memory);\n  mysql_memory_register(category, all_client_plugin_memory, count);\n}\n#endif /* HAVE_PSI_INTERFACE */\n\nstruct st_client_plugin_int {\n  struct st_client_plugin_int *next;\n  void *dlhandle;\n  struct st_mysql_client_plugin *plugin;\n};\n\nstatic bool initialized = false;\nstatic MEM_ROOT mem_root;\n\nstatic const char *plugin_declarations_sym =\n    \"_mysql_client_plugin_declaration_\";\nstatic uint plugin_version[MYSQL_CLIENT_MAX_PLUGINS] = {\n    0, /* these two are taken by Connector/C */\n    0, /* these two are taken by Connector/C */\n    MYSQL_CLIENT_AUTHENTICATION_PLUGIN_INTERFACE_VERSION,\n    MYSQL_CLIENT_TRACE_PLUGIN_INTERFACE_VERSION,\n};\n\n/*\n  Loaded plugins are stored in a linked list.\n  The list is append-only, the elements are added to the head (like in a stack).\n  The elements are added under a mutex, but the list can be read and traversed\n  without any mutex because once an element is added to the list, it stays\n  there. The main purpose of a mutex is to prevent two threads from\n  loading the same plugin twice in parallel.\n*/\nstruct st_client_plugin_int *plugin_list[MYSQL_CLIENT_MAX_PLUGINS];\nstatic mysql_mutex_t LOCK_load_client_plugin;\n\nstatic int is_not_initialized(MYSQL *mysql, const char *name) {\n  if (initialized) return 0;\n\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                           ER_CLIENT(CR_AUTH_PLUGIN_CANNOT_LOAD), name,\n                           \"not initialized\");\n  return 1;\n}\n\n/**\n  finds a plugin in the list\n\n  @param name   plugin name to search for\n  @param type   plugin type\n\n  @note this does NOT necessarily need a mutex, take care!\n\n  @retval a pointer to a found plugin or 0\n*/\nstatic struct st_mysql_client_plugin *find_plugin(const char *name, int type) {\n  struct st_client_plugin_int *p;\n\n  DBUG_ASSERT(initialized);\n  DBUG_ASSERT(type >= 0 && type < MYSQL_CLIENT_MAX_PLUGINS);\n  if (type < 0 || type >= MYSQL_CLIENT_MAX_PLUGINS) return nullptr;\n\n  for (p = plugin_list[type]; p; p = p->next) {\n    if (strcmp(p->plugin->name, name) == 0) return p->plugin;\n  }\n  return nullptr;\n}\n\n/**\n  verifies the plugin and adds it to the list\n\n  @param mysql          MYSQL structure (for error reporting)\n  @param plugin         plugin to install\n  @param dlhandle       a handle to the shared object (returned by dlopen)\n                        or 0 if the plugin was not dynamically loaded\n  @param argc           number of arguments in the 'va_list args'\n  @param args           arguments passed to the plugin initialization function\n\n  @retval a pointer to an installed plugin or 0\n*/\nstatic struct st_mysql_client_plugin *do_add_plugin(\n    MYSQL *mysql, struct st_mysql_client_plugin *plugin, void *dlhandle,\n    int argc, va_list args) {\n  const char *errmsg;\n  struct st_client_plugin_int plugin_int, *p;\n  char errbuf[1024];\n\n  DBUG_ASSERT(initialized);\n\n  plugin_int.plugin = plugin;\n  plugin_int.dlhandle = dlhandle;\n\n  if (plugin->type >= MYSQL_CLIENT_MAX_PLUGINS) {\n    errmsg = \"Unknown client plugin type\";\n    goto err1;\n  }\n\n  if (plugin->interface_version < plugin_version[plugin->type] ||\n      (plugin->interface_version >> 8) > (plugin_version[plugin->type] >> 8)) {\n    errmsg = \"Incompatible client plugin interface\";\n    goto err1;\n  }\n\n#if defined(CLIENT_PROTOCOL_TRACING) && !defined(MYSQL_SERVER)\n  /*\n    If we try to load a protocol trace plugin but one is already\n    loaded (global trace_plugin pointer is not NULL) then we ignore\n    the new trace plugin and give error. This is done before the\n    new plugin gets initialized.\n  */\n  if (plugin->type == MYSQL_CLIENT_TRACE_PLUGIN && nullptr != trace_plugin) {\n    errmsg = \"Can not load another trace plugin while one is already loaded\";\n    goto err1;\n  }\n#endif\n\n  /* Call the plugin initialization function, if any */\n  if (plugin->init && plugin->init(errbuf, sizeof(errbuf), argc, args)) {\n    errmsg = errbuf;\n    goto err1;\n  }\n\n  p = (struct st_client_plugin_int *)memdup_root(&mem_root, &plugin_int,\n                                                 sizeof(plugin_int));\n\n  if (!p) {\n    errmsg = \"Out of memory\";\n    goto err2;\n  }\n\n  mysql_mutex_assert_owner(&LOCK_load_client_plugin);\n\n  p->next = plugin_list[plugin->type];\n  plugin_list[plugin->type] = p;\n  net_clear_error(&mysql->net);\n\n#if defined(CLIENT_PROTOCOL_TRACING) && !defined(MYSQL_SERVER)\n  /*\n    If loaded plugin is a protocol trace one, then set the global\n    trace_plugin pointer to point at it. When trace_plugin is not NULL,\n    each new connection will be traced using the plugin pointed by it\n    (see MYSQL_TRACE_STAGE() macro in libmysql/mysql_trace.h).\n  */\n  if (plugin->type == MYSQL_CLIENT_TRACE_PLUGIN) {\n    trace_plugin = (struct st_mysql_client_plugin_TRACE *)plugin;\n  }\n#endif\n\n  return plugin;\n\nerr2:\n  if (plugin->deinit) plugin->deinit();\nerr1:\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                           ER_CLIENT(CR_AUTH_PLUGIN_CANNOT_LOAD), plugin->name,\n                           errmsg);\n  if (dlhandle) dlclose(dlhandle);\n  return nullptr;\n}\n\nstatic struct st_mysql_client_plugin *add_plugin_noargs(\n    MYSQL *mysql, struct st_mysql_client_plugin *plugin, void *dlhandle,\n    int argc, ...) {\n  struct st_mysql_client_plugin *retval = nullptr;\n  va_list ap;\n  va_start(ap, argc);\n  retval = do_add_plugin(mysql, plugin, dlhandle, argc, ap);\n  va_end(ap);\n  return retval;\n}\n\nstatic struct st_mysql_client_plugin *add_plugin_withargs(\n    MYSQL *mysql, struct st_mysql_client_plugin *plugin, void *dlhandle,\n    int argc, va_list args) {\n  return do_add_plugin(mysql, plugin, dlhandle, argc, args);\n}\n\n/**\n  Loads plugins which are specified in the environment variable\n  LIBMYSQL_PLUGINS.\n\n  Multiple plugins must be separated by semicolon. This function doesn't\n  return or log an error.\n\n  The function is be called by mysql_client_plugin_init\n\n  @todo\n  Support extended syntax, passing parameters to plugins, for example\n  LIBMYSQL_PLUGINS=\"plugin1(param1,param2);plugin2;...\"\n  or\n  LIBMYSQL_PLUGINS=\"plugin1=int:param1,str:param2;plugin2;...\"\n*/\nstatic void load_env_plugins(MYSQL *mysql) {\n  char *plugs, *free_env, *s = getenv(\"LIBMYSQL_PLUGINS\");\n  char *enable_cleartext_plugin = getenv(\"LIBMYSQL_ENABLE_CLEARTEXT_PLUGIN\");\n\n  if (enable_cleartext_plugin && strchr(\"1Yy\", enable_cleartext_plugin[0]))\n    libmysql_cleartext_plugin_enabled = true;\n\n  /* no plugins to load */\n  if (!s) return;\n\n  free_env = plugs = my_strdup(key_memory_load_env_plugins, s, MYF(MY_WME));\n\n  do {\n    if ((s = strchr(plugs, ';'))) *s = '\\0';\n    mysql_load_plugin(mysql, plugs, -1, 0);\n    plugs = s + 1;\n  } while (s);\n\n  my_free(free_env);\n}\n\n/********** extern functions to be used by libmysql *********************/\n\n/**\n  Initializes the client plugin layer.\n\n  This function must be called before any other client plugin function.\n\n  @retval 0    successful\n  @retval != 0 error occurred\n*/\nint mysql_client_plugin_init() {\n  MYSQL mysql;\n  struct st_mysql_client_plugin **builtin;\n\n  if (initialized) return 0;\n\n#ifdef HAVE_PSI_INTERFACE\n  init_client_plugin_psi_keys();\n#endif /* HAVE_PSI_INTERFACE */\n\n  memset(&mysql, 0,\n         sizeof(mysql)); /* dummy mysql for set_mysql_extended_error */\n\n  mysql_mutex_init(key_mutex_LOCK_load_client_plugin, &LOCK_load_client_plugin,\n                   MY_MUTEX_INIT_SLOW);\n  init_alloc_root(key_memory_root, &mem_root, 128, 128);\n\n  memset(&plugin_list, 0, sizeof(plugin_list));\n\n  initialized = true;\n\n  mysql_mutex_lock(&LOCK_load_client_plugin);\n\n  for (builtin = mysql_client_builtins; *builtin; builtin++)\n    add_plugin_noargs(&mysql, *builtin, nullptr, 0);\n\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n\n  load_env_plugins(&mysql);\n\n  mysql_close_free(&mysql);\n\n  return 0;\n}\n\n/**\n  Deinitializes the client plugin layer.\n\n  Unloades all client plugins and frees any associated resources.\n*/\nvoid mysql_client_plugin_deinit() {\n  int i;\n  struct st_client_plugin_int *p;\n\n  if (!initialized) return;\n\n  for (i = 0; i < MYSQL_CLIENT_MAX_PLUGINS; i++)\n    for (p = plugin_list[i]; p; p = p->next) {\n      if (p->plugin->deinit) p->plugin->deinit();\n      if (p->dlhandle) dlclose(p->dlhandle);\n    }\n\n  memset(&plugin_list, 0, sizeof(plugin_list));\n  initialized = false;\n  free_root(&mem_root, MYF(0));\n  mysql_mutex_destroy(&LOCK_load_client_plugin);\n}\n\n/************* public facing functions, for client consumption *********/\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *mysql_client_register_plugin(\n    MYSQL *mysql, struct st_mysql_client_plugin *plugin) {\n  if (is_not_initialized(mysql, plugin->name)) return nullptr;\n\n  mysql_mutex_lock(&LOCK_load_client_plugin);\n\n  /* make sure the plugin wasn't loaded meanwhile */\n  if (find_plugin(plugin->name, plugin->type)) {\n    set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD,\n                             unknown_sqlstate,\n                             ER_CLIENT(CR_AUTH_PLUGIN_CANNOT_LOAD),\n                             plugin->name, \"it is already loaded\");\n    plugin = nullptr;\n  } else\n    plugin = add_plugin_noargs(mysql, plugin, nullptr, 0);\n\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n  return plugin;\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *mysql_load_plugin_v(MYSQL *mysql,\n                                                   const char *name, int type,\n                                                   int argc, va_list args) {\n  const char *errmsg;\n  char dlpath[FN_REFLEN + 1];\n  void *sym, *dlhandle;\n  struct st_mysql_client_plugin *plugin;\n  const char *plugindir;\n  const CHARSET_INFO *cs = nullptr;\n  size_t len = (name ? strlen(name) : 0);\n  int well_formed_error;\n  size_t res = 0;\n#ifdef _WIN32\n  char win_errormsg[2048];\n#endif\n\n  DBUG_TRACE;\n  DBUG_PRINT(\"entry\", (\"name=%s type=%d int argc=%d\", name, type, argc));\n  if (is_not_initialized(mysql, name)) {\n    DBUG_PRINT(\"leave\", (\"mysql not initialized\"));\n    return nullptr;\n  }\n\n  mysql_mutex_lock(&LOCK_load_client_plugin);\n\n  /* make sure the plugin wasn't loaded meanwhile */\n  if (type >= 0 && find_plugin(name, type)) {\n    errmsg = \"it is already loaded\";\n    goto err;\n  }\n\n  if (mysql->options.extension && mysql->options.extension->plugin_dir) {\n    plugindir = mysql->options.extension->plugin_dir;\n  } else {\n    plugindir = getenv(\"LIBMYSQL_PLUGIN_DIR\");\n    if (!plugindir) {\n      plugindir = PLUGINDIR;\n    }\n  }\n  if (mysql && mysql->charset)\n    cs = mysql->charset;\n  else\n    cs = &my_charset_utf8mb4_bin;\n  /* check if plugin name does not have any directory separator character */\n  if ((my_strcspn(cs, name, name + len, FN_DIRSEP, strlen(FN_DIRSEP))) < len) {\n    errmsg = \"No paths allowed for shared library\";\n    goto err;\n  }\n  /* check if plugin name does not exceed its maximum length */\n  res = cs->cset->well_formed_len(cs, name, name + len, NAME_CHAR_LEN,\n                                  &well_formed_error);\n\n  if (well_formed_error || len != res) {\n    errmsg = \"Invalid plugin name\";\n    goto err;\n  }\n  /*\n    check if length of(plugin_dir + plugin name) does not exceed its maximum\n    length\n  */\n  if ((strlen(plugindir) + len + 1) >= FN_REFLEN) {\n    errmsg = \"Invalid path\";\n    goto err;\n  }\n\n  /* Compile dll path */\n  strxnmov(dlpath, sizeof(dlpath) - 1, plugindir, \"/\", name, SO_EXT, NullS);\n\n  DBUG_PRINT(\"info\", (\"dlopeninig %s\", dlpath));\n  /* Open new dll handle */\n  if (!(dlhandle = dlopen(dlpath, RTLD_NOW))) {\n#if defined(__APPLE__)\n    /* Apple supports plugins with .so also, so try this as well */\n    strxnmov(dlpath, sizeof(dlpath) - 1, plugindir, \"/\", name, \".so\", NullS);\n    if ((dlhandle = dlopen(dlpath, RTLD_NOW))) goto have_plugin;\n#endif\n\n#ifdef _WIN32\n    /* There should be no win32 calls between failed dlopen() and GetLastError()\n     */\n    if (FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, GetLastError(), 0,\n                      win_errormsg, 2048, NULL))\n      errmsg = win_errormsg;\n    else\n      errmsg = \"\";\n#else\n    errmsg = dlerror();\n#endif\n    DBUG_PRINT(\"info\", (\"failed to dlopen\"));\n    goto err;\n  }\n\n#if defined(__APPLE__)\nhave_plugin:\n#endif\n  if (!(sym = dlsym(dlhandle, plugin_declarations_sym))) {\n    errmsg = \"not a plugin\";\n    dlclose(dlhandle);\n    goto err;\n  }\n\n  plugin = (struct st_mysql_client_plugin *)sym;\n\n  if (type >= 0 && type != plugin->type) {\n    errmsg = \"type mismatch\";\n    goto err;\n  }\n\n  if (strcmp(name, plugin->name)) {\n    errmsg = \"name mismatch\";\n    goto err;\n  }\n\n  if (type < 0 && find_plugin(name, plugin->type)) {\n    errmsg = \"it is already loaded\";\n    goto err;\n  }\n\n  plugin = add_plugin_withargs(mysql, plugin, dlhandle, argc, args);\n\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n\n  DBUG_PRINT(\"leave\", (\"plugin loaded ok\"));\n  return plugin;\n\nerr:\n  mysql_mutex_unlock(&LOCK_load_client_plugin);\n  DBUG_PRINT(\"leave\", (\"plugin load error : %s\", errmsg));\n  set_mysql_extended_error(mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n                           ER_CLIENT(CR_AUTH_PLUGIN_CANNOT_LOAD), name, errmsg);\n  return nullptr;\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *mysql_load_plugin(MYSQL *mysql, const char *name,\n                                                 int type, int argc, ...) {\n  struct st_mysql_client_plugin *p;\n  va_list args;\n  va_start(args, argc);\n  p = mysql_load_plugin_v(mysql, name, type, argc, args);\n  va_end(args);\n  return p;\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nstruct st_mysql_client_plugin *mysql_client_find_plugin(MYSQL *mysql,\n                                                        const char *name,\n                                                        int type) {\n  struct st_mysql_client_plugin *p;\n\n  DBUG_TRACE;\n  DBUG_PRINT(\"entry\", (\"name=%s, type=%d\", name, type));\n  if (is_not_initialized(mysql, name)) return nullptr;\n\n  if (type < 0 || type >= MYSQL_CLIENT_MAX_PLUGINS) {\n    set_mysql_extended_error(\n        mysql, CR_AUTH_PLUGIN_CANNOT_LOAD, unknown_sqlstate,\n        ER_CLIENT(CR_AUTH_PLUGIN_CANNOT_LOAD), name, \"invalid type\");\n  }\n\n  if ((p = find_plugin(name, type))) {\n    DBUG_PRINT(\"leave\", (\"found %p\", p));\n    return p;\n  }\n\n  /* not found, load it */\n  p = mysql_load_plugin(mysql, name, type, 0);\n  DBUG_PRINT(\"leave\", (\"loaded %p\", p));\n  return p;\n}\n\n/* see <mysql/client_plugin.h> for a full description */\nint mysql_plugin_options(struct st_mysql_client_plugin *plugin,\n                         const char *option, const void *value) {\n  DBUG_TRACE;\n  /* does the plugin support options call? */\n  if (!plugin || !plugin->options) return 1;\n  return plugin->options(option, value);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/valgrind.supp": "# Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License, version 2.0,\n# as published by the Free Software Foundation.\n#\n# This program is also distributed with certain software (including\n# but not limited to OpenSSL) that is licensed under separate terms,\n# as designated in a particular file or component or in included license\n# documentation.  The authors of MySQL hereby grant you an additional\n# permission to link the program and your derivative works with the\n# separately licensed software that they have included with MySQL.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License, version 2.0, for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA\n\n#\n# Suppress some common (not fatal) errors in system libraries found by valgrind\n#\n\n#\n# Pthread doesn't free all thread specific memory before program exists\n#\n{\n   pthread allocate_tls memory loss\n   Memcheck:Leak\n   fun:calloc\n   ...\n   fun:_dl_allocate_tls\n   fun:allocate_stack\n   fun:pthread_create*\n}\n\n{\n   pthread allocate_tls memory loss\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_allocate_tls\n   fun:pthread_create*\n\n}\n\n{\n   semi_sync_master_plugin_init\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:tls_get_addr_tail\n}\n\n{\n   GCC never cleans up its TLS block\n   Memcheck:Leak\n   fun:memalign\n   ...\n   fun:tls_get_addr_tail\n}\n\n{\n   pthead_exit memory loss 1\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n}\n\n{\n   pthread_exit memory loss 2\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 3\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 4\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n}\n\n{\n   pthread_exit memory loss 5\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n}\n\n{\n   pthread allocate_dtv memory loss\n   Memcheck:Leak\n   fun:calloc\n   fun:allocate_dtv\n   fun:_dl_allocate_tls_storage\n   fun:__GI__dl_allocate_tls\n   fun:pthread_create\n}\n\n{\n   pthread allocate_dtv memory loss second\n   Memcheck:Leak\n   fun:calloc\n   fun:allocate_dtv\n   fun:_dl_allocate_tls\n   fun:pthread_create*\n}\n\n{\n   pthread memalign memory loss\n   Memcheck:Leak\n   fun:memalign\n   fun:_dl_allocate_tls_storage\n   fun:__GI__dl_allocate_tls\n   fun:pthread_create\n}\n\n{\n   pthread pthread_key_create\n   Memcheck:Leak\n   fun:malloc\n   fun:*\n   fun:*\n   fun:pthread_key_create\n   fun:my_thread_global_init\n}\n\n{\n   pthread strstr uninit\n   Memcheck:Cond\n   fun:strstr\n   obj:/lib/tls/libpthread.so.*\n   obj:/lib/tls/libpthread.so.*\n   fun:call_init\n   fun:_dl_init\n   obj:/lib/ld-*.so\n}\n\n{\n   pthread strstr uninit\n   Memcheck:Cond\n   fun:strstr\n   obj:/lib/tls/libpthread.so.*\n   obj:/lib/tls/libpthread.so.*\n   fun:call_init\n   fun:_dl_init\n   obj:/lib/ld-*.so\n}\n\n{\n   strlen/_dl_init_paths/dl_main/_dl_sysdep_start(Cond)\n   Memcheck:Cond\n   fun:strlen\n   fun:_dl_init_paths\n   fun:dl_main\n   fun:_dl_sysdep_start\n}\n\n{\n   pthread errno\n   Memcheck:Leak\n   fun:calloc\n   fun:_dlerror_run\n}\n\n{\n   pthread errno\n   Memcheck:Leak\n   fun:calloc\n   fun:_dlerror_run\n   fun:dlclose\n}\n\n\n#\n# Warnings in libz becasue it works with aligned memory(?)\n#\n\n{\n   libz tr_flush_block\n   Memcheck:Cond\n   fun:_tr_flush_block\n   fun:deflate_slow\n   fun:deflate\n   fun:do_flush\n   fun:gzclose\n}\n\n{\n   libz tr_flush_block2\n   Memcheck:Cond\n   fun:_tr_flush_block\n   fun:deflate_slow\n   fun:deflate\n   fun:compress2\n}\n\n{\n   libz longest_match\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n}\n\n{\n   libz deflate\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   fun:compress2\n}\n\n{\n   libz deflate2\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   obj:*/libz.so.*\n   fun:gzflush\n}\n\n{\n   libz deflate3\n   Memcheck:Cond\n   obj:*/libz.so.*\n   obj:*/libz.so.*\n   fun:deflate\n   fun:do_flush\n}\n\n{\n  libz deflate4\n  Memcheck:Param\n  write(buf)\n  fun:*\n  fun:my_write\n  fun:do_flush\n  fun:azclose\n}\n\n# Warning from zlib, cf. http://www.zlib.net/zlib_faq.html#faq36\n\n{\n   libz deflate5\n   Memcheck:Cond\n   fun:slide_hash\n   fun:fill_window\n   fun:deflate_fast\n   fun:deflate\n}\n\n#\n# Warning from my_thread_init becasue mysqld dies before kill thread exists\n#\n\n{\n   my_thread_init kill thread memory loss second\n   Memcheck:Leak\n   fun:calloc\n   fun:my_thread_init\n   fun:kill_server_thread\n}\n\n\n# Red Hat AS 4 32 bit\n{\n   dl_relocate_object\n   Memcheck:Cond\n   fun:_dl_relocate_object\n}\n\n#\n# Warning from my_thread_init becasue mysqld dies before kill thread exists\n#\n\n{\n   my_thread_init kill thread memory loss second\n   Memcheck:Leak\n   fun:calloc\n   fun:my_thread_init\n   fun:kill_server_thread\n}\n\n#\n# Leaks reported in _dl_* internal functions on Linux amd64 / glibc2.3.2.\n#\n\n{\n   _dl_start invalid write8\n   Memcheck:Addr8\n   fun:_dl_start\n}\n\n{\n   _dl_start invalid write4\n   Memcheck:Addr4\n   fun:_dl_start\n}\n\n{\n   _dl_start/_dl_setup_hash invalid read8\n   Memcheck:Addr8\n   fun:_dl_setup_hash\n   fun:_dl_start\n}\n\n{\n   _dl_sysdep_start invalid write8\n   Memcheck:Addr8\n   fun:_dl_sysdep_start\n}\n\n{\n   _dl_init invalid write8\n   Memcheck:Addr8\n   fun:_dl_init\n}\n\n{\n   _dl_init invalid write4\n   Memcheck:Addr4\n   fun:_dl_init\n}\n\n{\n   _dl_init/_dl_init invalid read8\n   Memcheck:Addr8\n   fun:_dl_debug_initialize\n   fun:_dl_init\n}\n\n{\n   _dl_init/_dl_debug_state invalid read8\n   Memcheck:Addr8\n   fun:_dl_debug_state\n   fun:_dl_init\n}\n\n{\n   init invalid write8\n   Memcheck:Addr8\n   fun:init\n}\n\n{\n   fixup invalid write8\n   Memcheck:Addr8\n   fun:fixup\n}\n\n{\n   fixup/_dl_lookup_versioned_symbol invalid read8\n   Memcheck:Addr8\n   fun:_dl_lookup_versioned_symbol\n   fun:fixup\n}\n\n{\n   _dl_runtime_resolve invalid read8\n   Memcheck:Addr8\n   fun:_dl_runtime_resolve\n}\n\n{\n   __libc_start_main invalid write8\n   Memcheck:Addr8\n   fun:__libc_start_main\n}\n\n{\n   __libc_start_main/__sigjmp_save invalid write4\n   Memcheck:Addr4\n   fun:__sigjmp_save\n   fun:__libc_start_main\n}\n\n#\n# These seem to be libc threading stuff, not related to MySQL code (allocations\n# during pthread_exit()). Googling shows other projects also using these\n# suppressions.\n#\n# Note that these all stem from pthread_exit() deeper in the call stack, but\n# Valgrind only allows the top four calls in the suppressions.\n#\n\n{\n   libc pthread_exit 1\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n}\n\n{\n   libc pthread_exit 2\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 3\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object_deps\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 4\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_check_map_versions\n   fun:dl_open_worker\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 5\n   Memcheck:Leak\n   fun:calloc\n   fun:_dl_new_object\n   fun:_dl_map_object_from_fd\n   fun:_dl_map_object\n}\n\n{\n   libc pthread_exit 6\n   Memcheck:Leak\n   fun:malloc\n   fun:_dl_map_object\n   fun:openaux\n   fun:_dl_catch_error\n}\n\n{\n   libc pthread_exit 7\n   Memcheck:Leak\n   fun:malloc\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n}\n\n{\n   libc pthread_exit 8\n   Memcheck:Leak\n   fun:malloc\n   fun:local_strdup\n   fun:_dl_map_object\n   fun:dl_open_worker\n}\n\n# strdup can be inlined\n{\n   libc pthread_exit 9\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:expand_dynamic_string_token\n   fun:_dl_map_object\n   fun:dl_open_worker\n}\n\n#\n# This is seen internally in the system libraries on 64-bit RHAS3.\n#\n\n{\n   __lll_mutex_unlock_wake uninitialized\n   Memcheck:Param\n   futex(utime)\n   fun:__lll_mutex_unlock_wake\n}\n\n#\n# BUG#19940: NDB sends uninitialized parts of field buffers across the wire.\n# This is \"works as designed\"; the uninitialized part is not used at the\n# other end (but Valgrind cannot see this).\n#\n{\n   bug19940\n   Memcheck:Param\n   socketcall.sendto(msg)\n   fun:send\n   fun:_ZN15TCP_Transporter6doSendEv\n   fun:_ZN19TransporterRegistry11performSendEv\n   fun:_ZN19TransporterRegistry14forceSendCheckEi\n}\n# Warning when printing stack trace (to suppress some not needed warnings)\n#\n\n{\n   vprintf on stacktrace\n   Memcheck:Cond\n   fun:vfprintf\n   fun:uffered_vfprintf\n   fun:vfprintf\n   fun:fprintf\n   fun:print_stacktrace\n}\n\n#\n# Safe warnings, that may happen because of thread scheduling\n#\n\n{\n   dbug initialization by kill_server\n   Memcheck:Leak\n   fun:malloc\n   fun:DbugMalloc\n   fun:code_state\n   fun:_db_enter_\n   fun:kill_server\n}\n\n#\n# Warning caused by small memory leak in threaded dlopen\n#\n\n{\n   dlopen threaded memory leak\n   Memcheck:Leak\n   fun:calloc\n   obj:*/libdl-*.so\n   fun:dlopen*\n}\n\n{\n   dlopen memory leak\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:_dlerror_run\n   fun:dlsym\n}\n#\n# Pthread doesn't free all thread specific memory before program exists\n#\n{\n   pthread allocate_tls memory loss in 2.6.1.\n   Memcheck:Leak\n   fun:calloc\n   obj:*/ld-*.so\n   fun:_dl_allocate_tls\n   fun:pthread_create*\n}\n\n{\n   buf_buddy_relocate peeking (space,page) in potentially free blocks\n   Memcheck:Addr1\n   fun:buf_buddy_relocate\n}\n\n{\n   Bug 59874 Valgrind warning in InnoDB compression code\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:btr_store_big_rec_extern_fields_func\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:page_zip_compress\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   fun:*\n   fun:*\n   fun:deflate\n   fun:page_zip_compress_deflate\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_zip_reorganize\n   fun:page_cur_insert_rec_zip_reorg\n   fun:page_cur_insert_rec_zip\n   fun:page_cur_tuple_insert\n   fun:btr_cur_optimistic_insert\n   fun:btr_cur_pessimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_zip_reorganize\n   fun:page_cur_insert_rec_zip_reorg\n   fun:page_cur_insert_rec_zip\n   fun:page_cur_tuple_insert\n   fun:btr_cur_optimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_copy_rec_list_end\n   fun:page_move_rec_list_end\n   fun:btr_page_split_and_insert\n   fun:btr_root_raise_and_insert\n   fun:btr_cur_pessimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   In page0zip.c we have already checked that the memory is initialized before calling deflate()\n   Memcheck:Cond\n   obj:*/libz.so*\n   obj:*/libz.so*\n   fun:deflate\n   fun:page_zip_compress\n   fun:page_cur_insert_rec_zip_reorg\n   fun:page_cur_insert_rec_zip\n   fun:page_cur_tuple_insert\n   fun:btr_cur_optimistic_insert\n   fun:btr_cur_pessimistic_insert\n   fun:row_ins_index_entry_low\n   fun:row_ins_index_entry\n   fun:row_ins_index_entry_step\n   fun:row_ins\n   fun:row_ins_step\n   fun:row_insert_for_mysql\n}\n\n{\n   Bug 59875 Valgrind warning in buf0buddy.c\n   Memcheck:Addr1\n   fun:mach_read_from_4\n   fun:buf_buddy_relocate\n   fun:buf_buddy_free_low\n   fun:buf_buddy_free\n}\n{\n   zlib longest_match false positive\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:compress\n   fun:my_compress_alloc\n}\n\n#\n# NDB packfrm vs deflate\n#\n{\n   NDB packfrm case 1\n   Memcheck:Cond\n   fun:deflate_slow\n   fun:deflate\n   fun:compress\n   fun:my_compress_alloc\n   fun:my_compress\n   fun:packfrm\n}\n\n{\n   NDB packfrm case 2\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:compress\n   fun:my_compress_alloc\n   fun:my_compress\n   fun:packfrm\n}\n\n#\n# pfs vs compress\n#\n{\n   pfs vs. compress case 1\n   Memcheck:Cond\n   fun:longest_match\n   fun:deflate_slow\n   fun:deflate\n   fun:compress\n   fun:my_compress_alloc\n   fun:my_compress\n}\n\n{\n   pfs vs. compress case 2\n   Memcheck:Cond\n   fun:deflate_slow\n   fun:deflate\n   fun:compress\n   fun:my_compress_alloc\n   fun:my_compress\n}\n\n# Note the wildcard in the (mangled) function signatures of\n# write_keys() and find_all_keys().\n# They both return ha_rows, which is platform dependent.\n#\n# The '...' wildcards are for 'fun:inline_mysql_file_write' which *may*\n# be inlined.\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / one\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:_Z19my_b_flush_io_cacheP8IO_CACHEi\n   fun:_Z11_my_b_writeP8IO_CACHEPKhm\n   ...\n   fun:_Z*10write_keysP10Sort_paramP13Filesort_infojP8IO_CACHES4_\n   ...\n   fun:_Z8filesortP3THDP8Filesort*\n}\n\n{\n   Bug#12856915 VALGRIND FAILURE IN FILESORT/CREATE_SORT_INDEX / three\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:_Z19my_b_flush_io_cacheP8IO_CACHEi\n   fun:_Z8filesortP3THDP8Filesort*\n}\n\n# http://www.openldap.org/its/index.cgi/Software%20Bugs?id=9081;page=23\n# Memory leak in ldap_initialize/ldap_unbind\n# Version: 2.4.48\n# Fixed in RE24 (2.4.49)\n{\n   OpenLDAP bug 9081\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:calloc\n   fun:ber_memcalloc_x\n   fun:ber_memcalloc\n   fun:ber_sockbuf_alloc\n   fun:ldap_create\n   fun:ldap_initialize\n}\n\n# sasl_client_init will load all available plugins with _sasl_load_plugins().\n# It seems some of the SASL plugin have leaks.\n# We *do* call sasl_client_done, which calls _sasl_done_with_plugins\n# Both LSAN and Valgrind report leaks.\n{\n   Loading SASL plugins 1\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   ...\n   fun:sasl_client_add_plugin\n}\n\n{\n   Loading SASL plugins 2\n   Memcheck:Leak\n   match-leak-kinds: indirect\n   fun:malloc\n   ...\n   fun:sasl_client_add_plugin\n}\n\n{\n   Unloading SASL plugins\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:dlclose\n   fun:_sasl_done_with_plugins\n}\n\n{\n   cyrus libsasl2 still reachable one\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:sasl_client_init\n}\n\n{\n   cyrus libsasl2 still reachable two\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   ...\n   fun:sasl_client_init\n}\n\n{\n   cyrus libsasl2 still reachable three\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:sasl_set_path\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:CRYPTO_malloc\n   fun:sk_new\n   ...\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:engine_cleanup_add_last\n   fun:ENGINE_add\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   fun:engine_cleanup_add_last\n   fun:ENGINE_add\n}\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:ENGINE_new\n}\n\n{\n  OpenSSL still reachable.\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  ...\n  fun:ERR_peek_error\n  fun:vio_ssl_read\n  ...\n}\n\n{\n  OpenSSL still reachable.\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  ...\n  fun:ERR_peek_error\n  ...\n  fun:sslaccept\n  ...\n  fun:server_mpvio_read_packet\n  ...\n}\n\n{\n   Bug#16039908 \"BYTES STILL REACHABLE\" IN VALGRIND TEST ON 5.6/TRUNK\n   Memcheck:Leak\n   fun:calloc\n   fun:_dlerror_run\n   fun:dlclose\n   fun:_ZL15free_plugin_memP12st_plugin_dl\n   fun:_ZL13plugin_dl_delPK16MYSQL_LEX_STRING\n   fun:_ZL10plugin_delP13st_plugin_int\n   fun:_ZL12reap_pluginsv\n   fun:_Z15plugin_shutdownv\n   fun:_Z*8clean_upb*\n}\n\n{\n   main.udf gives similar warning as Bug#16039908\n   Memcheck:Leak\n   fun:calloc\n   fun:_dlerror_run\n   fun:dlclose\n   fun:_Z*udf_deinitv\n   fun:_Z*8clean_upb*\n}\n\n#Suppress warnings from glibc implementation of 'malloc_info'\n{\n   Malloc_info uninitialised value of size 8\n   Memcheck:Value8\n   fun:_itoa_word\n   fun:vfprintf\n   fun:fprintf\n   fun:mi_arena.*\n   fun:malloc_info\n}\n\n{\n   Malloc_info conditional jump depends on uninitialised values\n   Memcheck:Cond\n   ...\n   fun:mi_arena.*\n   fun:malloc_info\n}\n\n# TokuDB suppressions\n{\n   tls_variables_1\n   Memcheck:Leak\n   fun:memalign\n   fun:__tls_get_addr\n}\n\n{\n   tls_variables_2\n   Memcheck:Leak\n   fun:memalign\n   fun:tls_get_addr_tail\n}\n\n{\n   lzma encoder prepare bug\n   Memcheck:Cond\n   fun:lz_encoder_prepare\n   fun:lzma_lz_encoder_init\n}\n\n#supress warnings from openssl random generator\n\n{\n   OpenSSL conditional jump in ssl3_ctx_ctrl\n   Memcheck:Cond\n   ...\n   fun:ssl3_ctx_ctrl\n   fun:new_VioSSLFd\n}\n\n{\n   OpenSSL conditional jump in RAND_DRBG_generate\n   Memcheck:Cond\n   ...\n   fun:RAND_DRBG_generate\n}\n\n{\n   OpenSSL uninitialised value of size 8 in new_VioSSLFd\n   Memcheck:Value8\n   fun:BN_num_bits_word\n   fun:BN_num_bits\n   ...\n   fun:new_VioSSLFd\n}\n\n{\n   OpenSSL uninitialised value of size 8 in new_VioSSLFd\n   Memcheck:Value8\n   fun:BN_mod_exp_mont_consttime\n   ...\n   fun:new_VioSSLFd\n}\n\n{\n   OpenSSL PB2 / 1\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n   fun:ssl_start\n   fun:_Z8init_sslv\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n{\n   OpenSSL PB2 / 2\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n   fun:ssl_start\n   fun:_ZL8init_sslv\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n\n{\n   OpenSSL libstdc++ version 5 / one\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   obj:/lib/x86_64-linux-gnu/libssl.so.1.0.0\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n   fun:ssl_start\n   fun:_ZL8init_sslv\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n{\n   OpenSSL libstdc++ version 5 / two\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:sk_new\n   obj:/lib/x86_64-linux-gnu/libssl.so.1.0.0\n   fun:SSL_COMP_get_compression_methods\n   fun:SSL_library_init\n   fun:ssl_start\n   fun:_ZL8init_sslv\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n{\n   OpenSSL libstdc++ version 5 / three\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:call_init.part.0\n   fun:call_init\n   fun:_dl_init\n}\n\n# supress uninitialized because some SSL libraries do random like that\n{\n   OpenSSL conditional jump in generate_user_salt due to randomness 1\n   Memcheck:Cond\n   fun:generate_user_salt\n   fun:native_password_authenticate\n}\n\n{\n   OpenSSL conditional jump in generate_user_salt due to randomness 2\n   Memcheck:Cond\n   fun:_Z18generate_user_saltPci\n   fun:_ZL34caching_sha2_password_authenticateP16MYSQL_PLUGIN_VIOP22MYSQL_SERVER_AUTH_INFO\n}\n\n# Remove the NUMA ones below when https://github.com/numactl/numactl/issues/3\n# is resolved.\n\n{\n   libnuma fails to free its internally allocated memory 1\n   Memcheck:Leak\n   fun:malloc\n   fun:numa_bitmask_alloc\n}\n\n{\n   libnuma fails to free its internally allocated memory 2\n   Memcheck:Leak\n   fun:calloc\n   fun:numa_bitmask_alloc\n}\n\n{\n   libnuma fails to free its internally allocated memory 3\n   Memcheck:Leak\n   fun:calloc\n   ...\n   fun:numa_node_*_cpu*\n}\n\n{\n   General protobuf globals\n   Memcheck:Leak\n   fun:_Znwm\n   ...\n   fun:_GLOBAL__sub_I_mysqlx*.pb.cc\n   ...\n}\n\n{\n   General protobuf globals\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:_Znwm\n   ...\n   fun:_Z41__static_initialization_and_destruction_0ii\n}\n\n{\n   General protobuf globals\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:_Znwm\n   ...\n   fun:_ZN6Mysqlx23protobuf_mysqlx_2eproto27StaticDescriptorInitializerC1Ev\n}\n\n{\n   mysqlx plugin install\n   Memcheck:Leak\n   fun:*alloc\n   ...\n   fun:_dl_catch_error\n   ...\n   fun:dlopen*\n   ...\n   fun:_ZL13plugin_dl_addPK16MYSQL_LEX_STRINGi*\n   ...\n}\n\n# supress inability to cleanup OpenSSL error contexts in GR\n{\n   OpenSSL GR suppress leak 1\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:ERR_get_state\n   fun:ERR_clear_error\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   fun:_ZN14Trans_delegate13before_commitEP3THDbP8IO_CACHES3_y\n   fun:_ZN13MYSQL_BIN_LOG6commitEP3THDb\n   fun:_Z17trans_commit_stmtP3THD\n}\n\n{\n   OpenSSL GR suppress leak 2\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:CRYPTO_malloc\n   fun:ERR_get_state\n   fun:ERR_clear_error\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   fun:_ZN14Trans_delegate13before_commitEP3THDbP8IO_CACHES3_y\n   fun:_ZN13MYSQL_BIN_LOG6commitEP3THDb\n   fun:_Z15ha_commit_transP3THDbb\n}\n\n{\n   OpenSSL GR suppress leak 3\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:CRYPTO_malloc\n   fun:lh_insert\n   fun:int_thread_set_item\n   fun:ERR_get_state\n   fun:ERR_clear_error\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   fun:_ZN14Trans_delegate13before_commitEP3THDbP8IO_CACHES3_y\n}\n\n{\n   OpenSSL GR suppress leak 4\n   Memcheck:Leak\n   match-leak-kinds: all\n   fun:malloc\n   ...\n   fun:CRYPTO_malloc\n   fun:lh_new\n   obj:*\n   obj:*\n   fun:ERR_get_state\n   fun:ERR_put_error\n   fun:PEM_read_bio\n   fun:PEM_X509_INFO_read_bio\n   fun:X509_load_cert_crl_file\n   obj:*\n   fun:X509_STORE_load_locations\n   ...\n}\n\n{\n   Spurious dlerror_run errors on main.udf\n   Memcheck:Leak\n   ...\n   fun:dlerror_run\n}\n\n{\n  OpenSSL still reachable.\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  ...\n  fun:ERR_peek_error\n  fun:vio_ssl_read\n  ...\n}\n\n{\n  OpenSSL still reachable.\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  ...\n  fun:ERR_peek_error\n  ...\n  fun:sslaccept\n  ...\n  fun:server_mpvio_read_packet\n  ...\n}\n\n#\n# Rules to suppress leaks from plugin dependencies\n#\n\n{\n  TPL leak 1\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:BUF_strndup\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 2\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:BUF_strndup\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 3\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  ...\n  fun:CRYPTO_malloc\n  fun:lh_insert\n  fun:int_thread_set_item\n  fun:ERR_get_state\n  fun:ERR_clear_error\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 4\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:sk_new\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 5\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:sk_new\n  fun:SSL_COMP_get_compression_methods\n  fun:SSL_library_init\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 6\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 7\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 8\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  ...\n  fun:CRYPTO_malloc\n  fun:lh_new\n  fun:int_thread_get\n  fun:int_thread_set_item\n  fun:ERR_get_state\n  fun:ERR_clear_error\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 9\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:ERR_get_state\n  fun:ERR_clear_error\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 10\n  Memcheck:Leak\n  match-leak-kinds: definite\n  fun:malloc\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 11\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  ...\n  fun:CRYPTO_malloc\n  fun:ERR_get_state\n  fun:ERR_put_error\n  fun:PEM_read_bio\n  fun:PEM_X509_INFO_read_bio\n  fun:X509_load_cert_crl_file\n  fun:by_file_ctrl\n  fun:X509_STORE_load_locations\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n}\n\n{\n  TPL leak 12\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:BUF_strndup\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n}\n\n{\n  TPL leak 13\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n}\n\n{\n  TPL leak 14\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:sk_new\n  fun:SSL_COMP_get_compression_methods\n  fun:SSL_library_init\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 15\n  Memcheck:Leak\n  match-leak-kinds: all\n  fun:malloc\n  ...\n  fun:CRYPTO_malloc\n  fun:lh_insert\n  obj:*\n  fun:ERR_get_state\n  fun:ERR_put_error\n  fun:PEM_read_bio\n  fun:PEM_X509_INFO_read_bio\n  fun:X509_load_cert_crl_file\n  obj:*\n  fun:X509_STORE_load_locations\n  ...\n}\n\n{\n  TPL leak 16\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:realloc\n  fun:CRYPTO_realloc\n  fun:sk_insert\n  fun:CONF_module_add\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 17\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  ...\n  fun:CRYPTO_malloc\n  fun:lh_insert\n  fun:int_thread_set_item\n  fun:ERR_get_state\n  fun:ERR_clear_error\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n}\n\n{\n  TPL leak 18\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  ...\n  fun:CRYPTO_malloc\n  fun:lh_insert\n  fun:int_thread_set_item\n  fun:ERR_get_state\n  fun:ERR_clear_error\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n}\n\n{\n  TPL leak 19\n  Memcheck:Leak\n  match-leak-kinds: reachable\n  fun:malloc\n  fun:CRYPTO_malloc\n  fun:ERR_get_state\n  fun:ERR_clear_error\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n}\n\n{\n  TPL leak 20\n  Memcheck:Leak\n  match-leak-kinds: definite\n  fun:malloc\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 21\n  Memcheck:Leak\n  match-leak-kinds: possible\n  fun:malloc\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  fun:_ZL17plugin_initializeP13st_plugin_int\n  ...\n}\n\n{\n  TPL leak 22\n  Memcheck:Leak\n  match-leak-kinds: possible\n  fun:malloc\n  ...\n  fun:CRYPTO_malloc\n  fun:lh_new\n  fun:int_thread_get\n  fun:int_thread_set_item\n  fun:ERR_get_state\n  fun:ERR_clear_error\n  fun:ENGINE_load_builtin_engines\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n  obj:*\n}\n\n{\n   TPL leak 23\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   fun:_ZL13my_raw_mallocmi\n   fun:_Z9my_mallocjmi\n   fun:_ZL17my_openssl_mallocm\n   fun:CRYPTO_malloc\n   ...\n}\n\n# Workarounds for\n#\n# Bug#26116237 SYSCALL PARAM PPOLL(SIGMASK) POINTS TO UNADDRESSABLE BYTE\n{\n   RPL workaround 1\n   Memcheck:Param\n   ppoll(sigmask)\n   fun:ppoll\n   fun:vio_io_wait\n}\n\n{\n   RPL workaround 2\n   Memcheck:Param\n   ppoll(sigmask)\n   fun:ppoll\n   fun:_Z11vio_io_waitP3Vio17enum_vio_io_eventi\n}\n\n# Workarounds for\n#\n# Bug#22833138 KEYRING_OKV : MEMORY LEAKS FROM OKV CLIENT LIB\n{\n   Keyring_OKV_workaround_addtoTagObj\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:addtoTagObj\n}\n{\n   Keyring_OKV_workaround_OKIGetKey\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKIGetKey\n}\n{\n   Keyring_OKV_workaround_OKICreateKey\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKICreateKey\n}\n{\n   Keyring_OKV_workaround_okiconn_ssl_send_recv\n   Memcheck:Leak\n   fun:calloc\n   ...\n   fun:OKIConnSendRecvBytes\n   fun:OKIOpsExecuteOp\n}\n{\n   Keyring_OKV_workaround_OKIGetAttributes\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKIGetAttributes\n}\n{\n   Keyring_OKV_workaround_OKIGetAttributes2\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIPostGetUIDTTLV\n   fun:OKIAPIPostProcessing\n   fun:OKIGetAttributes\n}\n{\n   Keyring_OKV_workaround_OKIAddAttribute\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKIAddAttribute\n}\n{\n   Keyring_OKV_workaround_OKIAddAttribute2\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIOpsCreate\n   fun:OKIAddAttribute\n}\n{\n   Keyring_OKV_workaround_OKILocate\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKILocate\n}\n{\n   Keyring_OKV_workaround_OKIActivate\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKIActivate\n}\n{\n   Keyring_OKV_workaround_OKIRegKey\n   Memcheck:Leak\n   match-leak-kinds: definite\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKIRegKey\n}\n{\n   Keyring_OKV_workaround_OKIRevoke\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIAPIResultAlloc\n   fun:OKIRevoke\n}\n{\n   Keyring_OKV_workaround_OKIEnvCreate\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIEnvCreate\n}\n{\n   Keyring_OKV_workaround_OKITTLVMoveChildWithTag\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKITTLVMoveChildWithTag\n}\n{\n   Keyring_OKV_workaround_OKIParseUnpackTTLVFromBuffer\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKIParseUnpackTTLVFromBuffer\n}\n{\n   Keyring_OKV_workaround_OKITTLVAddChildObject\n   Memcheck:Leak\n   fun:malloc\n   fun:okimem_nat_malloc\n   fun:OKIMemAlloc\n   fun:OKITTLVAddChildObject\n}\n\n# Bug#27209265 Suppress all issues relating to communication with AWS KMS server.\n\n{\n   OpenSSL still reachable.\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   ...\n   fun:CRYPTO_malloc\n   fun:ERR_get_state\n   fun:ERR_put_error\n   fun:PEM_read_bio\n   fun:PEM_X509_INFO_read_bio\n   fun:X509_load_cert_crl_file\n   fun:by_file_ctrl\n   fun:X509_STORE_load_locations\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n   obj:*\n}\n\n# Bug #25964438  LDAP: ASAN AND VALGRIND ISSUES\n\n{\n   LDAP_TLS_workaround1\n   Memcheck:Leak\n   fun:calloc\n   ...\n   ...\n   ...\n   ...\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   fun:*establish_tls*\n   fun:*create*\n}\n{\n   LDAP_TLS_workaround2\n   Memcheck:Leak\n   fun:malloc\n   ...\n   ...\n   ...\n   ...\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   fun:*establish_tls*\n   fun:*create*\n}\n{\n   LDAP_TLS_workaround3\n   Memcheck:Leak\n   fun:calloc\n   fun:PR_LoadLibraryWithFlags\n   ...\n   ...\n   ...\n   fun:PR_CallOnce\n   ...\n   ...\n   fun:_dl_init\n}\n{\n   LDAP_TLS_workaround4\n   Memcheck:Leak\n   fun:malloc\n   fun:PR_ErrorInstallTable\n   fun:PR_CallOnce\n   ...\n   ...\n   fun:PR_CallOnceWithArg\n   ...\n   fun:NSS_SetDomesticPolicy\n   ...\n   fun:PR_CallOnceWithArg\n   ...\n   ...\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   fun:*establish_tls*\n}\n{\n   LDAP_TLS_workaround5\n   Memcheck:Leak\n   fun:malloc\n   ...\n   fun:PR_LoadLibraryWithFlags\n   ...\n   ...\n   ...\n   fun:PR_CallOnce\n   ...\n   ...\n   ...\n   ...\n   fun:_dl_catch_error\n   fun:_dl_open\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n}\n{\n   LDAP_TLS_workaround6\n   Memcheck:Leak\n   fun:malloc\n   fun:ber_memalloc_x\n   fun:ber_strdup_x\n   ...\n   fun:ldap_int_initialize\n   fun:ldap_create\n   fun:ldap_initialize\n   fun:*create*\n}\n{\n   LDAP_TLS_workaround7\n   Memcheck:Leak\n   fun:malloc\n   fun:*dl_close_worker*\n   fun:*dl_close*\n   fun:*dl_catch_error*\n   ...\n   fun:*free_mem*\n   fun:*libc_freeres*\n   fun:*vgnU_freeres*\n   fun:*run_exit_handlers*\n   fun:exit*\n   fun:*mysqld_exit*\n   fun:*mysqld_main*\n   fun:*main*\n}\n{\n   LDAP_TLS_workaround8\n   Memcheck:Leak\n   fun:malloc\n   fun:ber_memalloc_x\n   fun:ber_strdup_x\n   ...\n   fun:ldap_int_initialize\n   fun:ldap_set_option\n   fun:*configure_tls*\n}\n{\n   LDAP_TLS_workaround9\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PR_ErrorInstallTable\n   ...\n   ...\n   ...\n   ...\n   ...\n   ...  \n   ...\n   ...\n   ...\n   ...\n   ...\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n}\n# The issue with GNU libc version 2.17 when linux hosts doesn't have IPv6 configured.\n# This is because libc points the cache (that is freed on exit) to a static variable\n# if there is no ipv6 address, which later results in freeing an invalid pointer.\n{\n   libc_217_ipv6_issue\n   Memcheck:Free\n   fun:free\n   fun:__libc_freeres\n   fun:_vgnU_freeres\n   fun:__run_exit_handlers\n   fun:exit\n   fun:*mysqld_exit*\n   fun:*mysqld_main*\n   fun:*main*\n}\n{\n   SIGSTOP_and_SIGCONT in gr tests\n   Memcheck:Cond\n   fun:signal_hand\n   fun:pfs_spawn_thread\n   fun:start_thread\n   fun:clone\n}\n{\n   Mysqlx: OpenSSL cert file still possible.\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   ...\n   fun:CRYPTO_malloc\n   fun:ERR_get_state\n   fun:ERR_put_error\n   fun:PEM_read_bio\n   fun:PEM_X509_INFO_read_bio\n   fun:X509_load_cert_crl_file\n   fun:*\n   fun:X509_STORE_load_locations\n   fun:*\n   fun:*\n   fun:*\n   fun:*\n}\n\n{\n   LDAP_1\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PORT_Alloc_Util\n   obj:/usr/lib64/libnss3.so\n   obj:/usr/lib64/libnss3.so\n   fun:SECMOD_LoadModule\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   ...\n}\n\n\n{\n   LDAP_2\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:NSSRWLock_New_Util\n   fun:SECOID_Init\n   obj:/usr/lib64/libsoftokn3.so\n   ...\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   ...\n}\n\n\n{\n   LDAP_3\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:strdup\n   fun:PR_LoadLibraryWithFlags\n   ...\n   fun:tlsmc_open_nssdb\n   fun:tlsmc_convert\n   fun:tlsmc_intercept_initialization\n   obj:/usr/lib64/libldap-2.4.so.2.10.7\n   ...\n}\n\n{\n   LDAP_4\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:strdup\n   fun:_dl_load_cache_lookup\n   fun:_dl_map_object\n   fun:openaux\n   ...\n   fun:PR_LoadLibraryWithFlags\n   obj:/usr/lib64/libnssutil3.so\n}\n\n{\n   LDAP_5\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:PR_LoadLibraryWithFlags\n   ...\n   obj:/usr/lib64/libnss3.so\n   ...\n   fun:tlsmc_open_nssdb\n   fun:tlsmc_convert\n   fun:tlsmc_intercept_initialization\n   obj:/usr/lib64/libldap-2.4.so.2.10.7\n   ...\n}\n\n{\n   LDAP_6\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PL_NewHashTable\n   fun:SECOID_Init\n   obj:/usr/lib64/libsoftokn3.so\n   ...\n   fun:PR_LoadLibraryWithFlags\n   obj:/usr/lib64/libnssutil3.so\n   fun:PORT_LoadLibraryFromOrigin\n   ...\n}\n\n{\n   LDAP_7\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PL_HashTableRawAdd\n   fun:SECOID_Init\n   ...\n   fun:PR_LoadLibraryWithFlags\n   obj:/usr/lib64/libnssutil3.so\n   fun:PORT_LoadLibraryFromOrigin\n   ...\n}\n\n{\n   LDAP_8\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:_dl_close_worker\n   fun:_dl_close\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   ...\n   obj:*\n   fun:_ZL35authsm_run_second_authenticate_userP16mysql_async_auth\n   fun:run_plugin_auth\n   ...\n}\n\n{\n   LDAP_9\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:NSSRWLock_New_Util\n   fun:SECOID_Init\n   ...\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   ...\n   fun:PR_LoadLibraryWithFlags\n   obj:/usr/lib64/libnssutil3.so\n   ...\n}\n\n{\n   LDAP_10\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PR_NewCondVar\n   ...\n   fun:SECMOD_LoadModule\n   obj:/usr/lib64/libnss3.so\n   ...\n   obj:/usr/lib64/libldap-2.4.so.2.10.7\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   fun:_ZN23Ldap_connection_creator13establish_tlsER9Ldap_info\n}\n\n{\n   LDAP_11\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:PORT_ZAlloc_Util\n   obj:/usr/lib64/libfreeblpriv3.so\n   ...\n   fun:_dlerror_run\n   fun:dlopen@@GLIBC_2.2.5\n   fun:PR_LoadLibraryWithFlags\n   ...\n}\n\n{\n   LDAP_12\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:PR_NewLock\n   fun:NSSRWLock_New_Util\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   ...\n}\n\n{\n   LDAP_13\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PORT_Alloc_Util\n   fun:SECITEM_CopyItem_Util\n   obj:/usr/lib64/libfreeblpriv3.so\n   ...\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   ...\n}\n\n{\n   LDAP_14\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   obj:/usr/lib64/libfreeblpriv3.so\n   ...\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   fun:dlopen@@GLIBC_2.2.5\n   fun:PR_LoadLibraryWithFlags\n   ...\n}\n\n{\n   LDAP_15\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   fun:PL_ArenaAllocate\n   fun:PORT_ArenaAlloc_Util\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   ...\n}\n\n{\n   LDAP_16\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:calloc\n   fun:PORT_ZAlloc_Util\n   ...\n   fun:SECOID_Init\n   obj:/usr/lib64/libsoftokn3.so\n   fun:_dl_init\n   fun:dl_open_worker\n   ...\n   fun:PR_LoadLibraryWithFlags\n   obj:/usr/lib64/libnssutil3.so\n   ...\n}\n\n{\n   LDAP_17\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:calloc\n   fun:PR_NewLock\n   ...\n   fun:SECMOD_LoadModule\n   obj:/usr/lib64/libnss3.so\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   ...\n}\n\n{\n   LDAP_18\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PR_NewCondVar\n   fun:NSSRWLock_New_Util\n   ...\n   fun:dl_open_worker\n   fun:_dl_catch_error\n   fun:_dl_open\n   ...\n   fun:PR_LoadLibraryWithFlags\n   obj:/usr/lib64/libnssutil3.so\n   fun:PORT_LoadLibraryFromOrigin\n}\n\n{\n   LDAP_19\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:PR_NewCondVar\n   ...\n   fun:PR_CallOnce\n   ...\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   fun:dlopen@@GLIBC_2.2.5\n   fun:PR_LoadLibraryWithFlags\n}\n\n{\n   LDAP_20\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:calloc\n   fun:PORT_ZAlloc_Util\n   ...\n   fun:SECMOD_CreateModuleEx\n   fun:SECMOD_LoadModule\n   ...\n   fun:ldap_int_tls_start\n   fun:ldap_start_tls_s\n   ...\n}\n\n{\n   LDAP_21\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:PR_NewLock\n   ...\n   fun:SECOID_Init\n   ...\n   fun:PR_LoadLibraryWithFlags\n   obj:/usr/lib64/libnssutil3.so\n   fun:PORT_LoadLibraryFromOrigin\n   ...\n}\n\n{\n   LDAP_22\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:PR_NewLock\n   obj:/usr/lib64/libfreeblpriv3.so\n   fun:PR_CallOnce\n   ...\n   fun:_dlerror_run\n   fun:dlopen@@GLIBC_2.2.5\n   fun:PR_LoadLibraryWithFlags\n   ...\n}\n\n{\n   LDAP_23\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:PR_NewLock\n   obj:/usr/lib64/libnssdbm3.so\n   ...\n   fun:legacy_Open\n   ...\n   fun:SECMOD_LoadModule\n   fun:SECMOD_LoadModule\n   ...\n}\n\n{\n   LDAP_24\n   Memcheck:Leak\n   match-leak-kinds: possible\n   fun:malloc\n   fun:PL_ArenaAllocate\n   fun:PORT_ArenaAlloc_Util\n   ...\n   fun:tlsmc_convert\n   fun:tlsmc_intercept_initialization\n   obj:/usr/lib64/libldap-2.4.so.2.10.7\n   ...\n}\n\n{\n   LDAP_25\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:malloc\n   fun:_dl_close_worker\n   fun:_dl_close\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   fun:dlclose\n   fun:mysql_client_plugin_deinit\n   fun:_ZL8clean_upb\n   fun:_Z11mysqld_mainiPPc\n   fun:main\n}\n\n{\n   LDAP_26\n   Memcheck:Leak\n   match-leak-kinds: reachable\n   fun:calloc\n   fun:PORT_ZAlloc_Util\n   fun:PORT_NewArena_Util\n   fun:SECOID_Init\n   ...\n   fun:dlopen_doit\n   fun:_dl_catch_error\n   fun:_dlerror_run\n   ...\n   obj:/usr/lib64/libnssutil3.so\n   fun:PORT_LoadLibraryFromOrigin\n   ...\n}\n\n# Suppress all issues related to libcrypto library\n{\n   Conditional jump or move in BN_bin2bn\n   Memcheck:Cond\n   fun:BN_bin2bn\n   ...\n}\n{\n   Conditional jump or move in BN_ucmp\n   Memcheck:Cond\n   fun:BN_ucmp\n   ...\n}\n{\n   Conditional jump or move in libcrypto\n   Memcheck:Cond\n   obj:/usr/lib64/libcrypto.so.*\n   fun:*\n   ...\n}\n{\n   Conditional jump or move in BN_mod_exp_mont\n   Memcheck:Cond\n   fun:BN_mod_exp_mont\n   ...\n}\n{\n   Use of uninitialised value of size 8 in libcrypto\n   Memcheck:Value8\n   obj:/usr/lib64/libcrypto.so.*\n   ...\n}\n{\n   Conditional jump or move in BN_mod_mul_montgomery\n   Memcheck:Cond\n   fun:BN_mod_mul_montgomery\n   fun:BN_mod_exp_mont\n   ...\n}\n{\n   Conditional jump or move in bn_bn2binpad\n   Memcheck:Cond\n   fun:bn_bn2binpad\n   ...\n}\n{\n   Conditional jump or move in BN_from_montgomery\n   Memcheck:Cond\n   fun:BN_from_montgomery\n   ...\n}\n{\n   Use of uninitialised value of size 8 in libcrypto\n   Memcheck:Value8\n   obj:/usr/lib64/libcrypto.so.*\n   fun:BN_from_montgomery\n   fun:BN_mod_exp_mont\n   obj:*\n   ...\n}\n{\n   Use of uninitialised value of size 8 in BN_from_montgomery/BN_mod_exp_mont\n   Memcheck:Value8\n   fun:BN_from_montgomery\n   fun:BN_mod_exp_mont\n   obj:*\n   ...\n}\n{\n   Conditional jump or move in BN_num_bits_word\n   Memcheck:Cond\n   fun:BN_num_bits_word\n   fun:BN_num_bits\n   ...\n}\n{\n   Use of uninitialised value of size 8 in BN_num_bits_word\n   Memcheck:Value8\n   fun:BN_num_bits_word\n   fun:BN_num_bits\n   fun:BN_bn2bin\n   ...\n}\n{\n   Syscall param socketcall.sendto(msg) points to uninitialised byte(s)\n   Memcheck:Param\n   socketcall.sendto(msg)\n   ...\n   fun:send\n   fun:*\n   ...\n}\n{\n   Conditional jump or move in RSA_eay_public_encrypt\n   Memcheck:Cond\n   fun:RSA_eay_public_encrypt\n   fun:*\n   ...\n}\n\n# Sporadic error in GR tests\n\n{\n   Syscall param socketcall.sendto(msg) points to uninitialised byte(s)\n   Memcheck:Param\n   socketcall.sendto(msg)\n   obj:*\n   fun:__netlink_request\n   fun:getifaddrs_internal\n   fun:getifaddrs\n}\n\n# We might end up writing uninitialised NULL flags out to chunk files during\n# hash join. These flags are never used, so suppress the warnings.\n\n{\n   Syscall param write(buf) points to uninitialised byte(s)\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:_Z19my_b_flush_io_cacheP8IO_CACHEi\n   fun:_ZN13HashJoinChunk6RewindEv\n}\n\n{\n   Syscall param write(buf) points to uninitialised byte(s)\n   Memcheck:Param\n   write(buf)\n   ...\n   fun:_Z19my_b_flush_io_cacheP8IO_CACHEi\n   ...\n   fun:_ZN16HashJoinIterator4InitEv\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/components/libminchassis/dynamic_loader_scheme_file_imp.h": "/* Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License, version 2.0,\nas published by the Free Software Foundation.\n\nThis program is also distributed with certain software (including\nbut not limited to OpenSSL) that is licensed under separate terms,\nas designated in a particular file or component or in included license\ndocumentation.  The authors of MySQL hereby grant you an additional\npermission to link the program and your derivative works with the\nseparately licensed software that they have included with MySQL.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License, version 2.0, for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n#ifndef MYSQL_SERVER_DYNAMIC_LOADER_SCHEMA_FILE_H\n#define MYSQL_SERVER_DYNAMIC_LOADER_SCHEMA_FILE_H\n\n#include <mysql/components/component_implementation.h>\n#include <mysql/components/service_implementation.h>\n#include <mysql/components/services/dynamic_loader.h>\n#include <mysql/components/services/dynamic_loader_scheme_file.h>\n#include <mysql/components/services/mysql_rwlock_service.h>\n#include <map>\n#include <unordered_set>\n\n#if defined(_WIN32)\n#define dlsym(lib, name) (void *)GetProcAddress((HMODULE)lib, name)\n#define dlopen(libname, unused) LoadLibraryEx(libname, NULL, 0)\n#define dlclose(lib) FreeLibrary((HMODULE)lib)\n#define RTLD_NOW 0x00002\n#define DLERROR_GENERATE(errmsg, error_number)                          \\\n  char win_errormsg[2048];                                              \\\n  if (FormatMessage(FORMAT_MESSAGE_FROM_SYSTEM, 0, error_number, 0,     \\\n                    win_errormsg, 2048, NULL)) {                        \\\n    char *ptr;                                                          \\\n    for (ptr = &win_errormsg[0] + strlen(win_errormsg) - 1;             \\\n         ptr >= &win_errormsg[0] && strchr(\"\\r\\n\\t\\0x20\", *ptr); ptr--) \\\n      *ptr = 0;                                                         \\\n    errmsg = win_errormsg;                                              \\\n  } else                                                                \\\n    errmsg = \"\"\n#define dlerror() \"\"\n#define dlopen_errno GetLastError()\n\n#else /* _WIN32 */\n\n#ifndef MYSQL_ABI_CHECK\n#include <dlfcn.h>\n#include <errno.h>\n#endif\n\n#define DLERROR_GENERATE(errmsg, error_number) errmsg = dlerror()\n#define dlopen_errno errno\n#endif\n\nclass mysql_dynamic_loader_scheme_file_imp {\n  typedef std::map<std::string, void *> my_registry;\n  typedef mysql_component_t *(*list_components_func)();\n\n  static my_registry object_files_list;\n  static std::unordered_set<list_components_func> library_entry_set;\n  static mysql_rwlock_t LOCK_dynamic_loader_scheme_file;\n\n public:\n  /**\n    Initializes file:// scheme for dynamic loader for usage. Initializes\n    RW lock, all other structures should be empty. Shouldn't be called multiple\n    times.\n  */\n  static void init();\n  /**\n    De-initializes RW lock, all other structures doesn't require any action.\n  */\n  static void deinit();\n\n public:\n  /**\n    Loads components that are located in executable file specified by URN.\n    We assume that URN starts with file://, but accept any. Will not success\n    when called multiple times on the same file.\n\n    @param urn URN to file to load components from.\n    @param [out] out_data Pointer to pointer to MySQL component data structures\n      to set result components data retrieved from specified file.\n    @return Status of performed operation\n    @retval false success\n    @retval true Failure, may be caused when name does not contain ://, cannot\n      be located, is not proper executable file or does not contain proper\n      initialization function.\n  */\n  static DEFINE_BOOL_METHOD(load,\n                            (const char *urn, mysql_component_t **out_data));\n\n  /**\n    Unloads file that was previously loaded. The URN string must be exactly\n    the same as one used during call to load. Although you can call load() on\n    specified URN multiple times, subsequent calls unload() will always fail,\n    and all components from specified file will be invalid after first call to\n    unload().\n\n    @param urn URN to file to unload all components from.\n    @return Status of performed operation\n    @retval false success\n    @retval true failure\n  */\n  static DEFINE_BOOL_METHOD(unload, (const char *urn));\n};\n\n#endif /* MYSQL_SERVER_DYNAMIC_LOADER_SCHEMA_FILE_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/components/libminchassis/dynamic_loader_scheme_file.cc": "/* Copyright (c) 2016, 2020, Oracle and/or its affiliates. All rights reserved.\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License, version 2.0,\nas published by the Free Software Foundation.\n\nThis program is also distributed with certain software (including\nbut not limited to OpenSSL) that is licensed under separate terms,\nas designated in a particular file or component or in included license\ndocumentation.  The authors of MySQL hereby grant you an additional\npermission to link the program and your derivative works with the\nseparately licensed software that they have included with MySQL.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License, version 2.0, for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program; if not, write to the Free Software\nFoundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n#include <mysql/components/component_implementation.h>\n#include <mysql/components/service_implementation.h>\n#include <mysql/components/services/dynamic_loader.h>\n#include <mysql/components/services/dynamic_loader_scheme_file.h>\n#include <mysql/components/services/mysql_psi_system.h>\n#include <mysql/components/services/mysql_runtime_error_service.h>\n#include <mysql/components/services/mysql_rwlock.h>\n#include <mysqld_error.h>\n\n#ifndef _WIN32\n#include <dlfcn.h>\n#endif\n#include <string.h>\n#include <map>\n#include <string>\n#include <unordered_set>\n\n#include \"component_common.h\"\n#include \"dynamic_loader_scheme_file_imp.h\"\n#include \"rwlock_scoped_lock.h\"  // rwlock_scoped_lock\n#include \"scope_guard.h\"         // create_scope_guard\n\nstatic PSI_rwlock_key key_rwlock_LOCK_dynamic_loader_scheme_file;\n\nstatic PSI_rwlock_info all_dynamic_loader_scheme_file_rwlocks[] = {\n    {&key_rwlock_LOCK_dynamic_loader_scheme_file,\n     \"LOCK_dynamic_loader_scheme_file\", PSI_FLAG_SINGLETON, 0,\n     PSI_DOCUMENT_ME}};\n\nstatic void init_dynamic_loader_scheme_file_psi_keys(void) {\n  const char *category = \"components\";\n  int count;\n\n  count =\n      static_cast<int>(array_elements(all_dynamic_loader_scheme_file_rwlocks));\n  mysql_rwlock_register(category, all_dynamic_loader_scheme_file_rwlocks,\n                        count);\n}\n\n/**\n  Initializes file:// scheme for dynamic loader for usage. Initializes\n  RW lock, all other structures should be empty. Shouldn't be called multiple\n  times.\n*/\nvoid mysql_dynamic_loader_scheme_file_imp::init() {\n  init_dynamic_loader_scheme_file_psi_keys();\n  mysql_rwlock_init(\n      key_rwlock_LOCK_dynamic_loader_scheme_file,\n      &mysql_dynamic_loader_scheme_file_imp::LOCK_dynamic_loader_scheme_file);\n}\n/**\n  De-initializes RW lock, all other structures doesn't require any action.\n*/\nvoid mysql_dynamic_loader_scheme_file_imp::deinit() {\n  mysql_rwlock_destroy(\n      &mysql_dynamic_loader_scheme_file_imp::LOCK_dynamic_loader_scheme_file);\n}\n\n/**\n  Loads components that are located in executable file specified by URN.\n  We assume that URN starts with file://, but accept any. Will not success\n  when called multiple times on the same file.\n\n  @param urn URN to file to load components from.\n  @param [out] out_data Pointer to pointer to MySQL component data structures\n    to set result components data retrieved from specified file.\n  @return Status of performed operation\n  @retval false success\n  @retval true Failure, may be caused when name does not contain ://, cannot\n    be located, is not proper executable file or does not contain proper\n    initialization function.\n*/\nDEFINE_BOOL_METHOD(mysql_dynamic_loader_scheme_file_imp::load,\n                   (const char *urn, mysql_component_t **out_data)) {\n  try {\n    if (urn == nullptr) {\n      return true;\n    }\n\n    std::string urn_string = urn;\n\n    /* Check if library is not already loaded, by comparing URNs. */\n    minimal_chassis::rwlock_scoped_lock lock(\n        &mysql_dynamic_loader_scheme_file_imp::LOCK_dynamic_loader_scheme_file,\n        true, __FILE__, __LINE__);\n\n    if (object_files_list.find(urn_string) != object_files_list.end()) {\n      return true;\n    }\n\n    /* Omit scheme prefix to get filename. */\n    const char *file = strstr(urn, \"://\");\n    if (file == nullptr) {\n      return true;\n    }\n    /* Offset by \"://\" */\n    file += 3;\n    std::string file_name = std::string(file);\n#ifdef _WIN32\n    file_name += \".dll\";\n#else\n    file_name += \".so\";\n#endif\n\n    /* Open library. */\n    void *handle = dlopen(file_name.c_str(), RTLD_NOW);\n    if (handle == NULL) {\n      const char *errmsg;\n      int error_number = dlopen_errno;\n      DLERROR_GENERATE(errmsg, error_number);\n      mysql_error_service_printf(ER_CANT_OPEN_LIBRARY, MYF(0),\n                                 file_name.c_str(), error_number, errmsg);\n      return true;\n    }\n    auto guard_library = create_scope_guard([&handle]() {\n      /* In case we need to rollback we close the opened library. */\n      dlclose(handle);\n    });\n\n    /* Look for \"list_components\" function. */\n    list_components_func list_func = reinterpret_cast<list_components_func>(\n        dlsym(handle, COMPONENT_ENTRY_FUNC));\n    if (list_func == NULL) {\n      return true;\n    }\n\n    /* Check if library is not already loaded, by comparing \"list_components\"\n      function address. */\n    if (library_entry_set.insert(list_func).second == false) {\n      return true;\n    }\n\n    auto guard_library_set = create_scope_guard([&list_func]() {\n      /* In case we need to rollback we remove library handle from set. */\n      library_entry_set.erase(list_func);\n    });\n\n    /* Get components data from library.\n       It is ok for not copying the data even the mutex is released at the\n       function exit, since it is used under the registry\n       services (as they take another mutex) */\n    *out_data = list_func();\n\n    /* Add library and it's handle to list of loaded libraries. */\n\n    if (object_files_list.emplace(urn_string, handle).second == false) {\n      return true;\n    }\n\n    guard_library.commit();\n    guard_library_set.commit();\n\n    return false;\n  } catch (...) {\n  }\n  return true;\n}\n\n/**\n  Unloads file that was previously loaded. The URN string must be exactly\n  the same as one used during call to load. Although you can call load() on\n  specified URN multiple times, subsequent calls unload() will always fail,\n  and all components from specified file will be invalid after first call to\n  unload().\n\n  @param urn URN to file to unload all components from.\n  @return Status of performed operation\n  @retval false success\n  @retval true failure\n*/\nDEFINE_BOOL_METHOD(mysql_dynamic_loader_scheme_file_imp::unload,\n                   (const char *urn)) {\n  try {\n    /* Find library matching URN specified. */\n    minimal_chassis::rwlock_scoped_lock lock(\n        &mysql_dynamic_loader_scheme_file_imp::LOCK_dynamic_loader_scheme_file,\n        true, __FILE__, __LINE__);\n\n    /* This will happen when load() is not called for a component */\n    if (object_files_list.size() == 0) return false;\n\n    my_registry::iterator it = object_files_list.find(std::string(urn));\n    if (it == object_files_list.end()) {\n      return true;\n    }\n\n    /* Delete entry from library entry points list. */\n    list_components_func list_func = reinterpret_cast<list_components_func>(\n        dlsym(it->second, \"list_components\"));\n    library_entry_set.erase(list_func);\n\n    /* Calling psi system unload plugin event */\n    mysql_unload_plugin(it->first.c_str());\n\n    /* Close library and delete entry from libraries list. */\n    dlclose(it->second);\n    object_files_list.erase(it);\n    return false;\n  } catch (...) {\n  }\n  return true;\n}\n\n/* static members for mysql_dynamic_loader_scheme_file_imp */\nmysql_dynamic_loader_scheme_file_imp::my_registry\n    mysql_dynamic_loader_scheme_file_imp::object_files_list;\nstd::unordered_set<mysql_dynamic_loader_scheme_file_imp::list_components_func>\n    mysql_dynamic_loader_scheme_file_imp::library_entry_set;\nmysql_rwlock_t\n    mysql_dynamic_loader_scheme_file_imp::LOCK_dynamic_loader_scheme_file;\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/sql/sql_udf.cc": "/* Copyright (c) 2000, 2019, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License, version 2.0,\n   as published by the Free Software Foundation.\n\n   This program is also distributed with certain software (including\n   but not limited to OpenSSL) that is licensed under separate terms,\n   as designated in a particular file or component or in included license\n   documentation.  The authors of MySQL hereby grant you an additional\n   permission to link the program and your derivative works with the\n   separately licensed software that they have included with MySQL.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License, version 2.0, for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n/* This implements 'user defined functions' */\n\n#include \"sql/sql_udf.h\"\n\n#include \"my_config.h\"\n\n#include <stdio.h>\n#include <string.h>\n#include <iterator>\n#include <memory>\n#include <new>\n#include <string>\n#include <unordered_map>\n#include <utility>\n\n#include \"m_ctype.h\"\n#include \"m_string.h\"  // my_stpcpy\n#include \"map_helpers.h\"\n#include \"my_alloc.h\"\n#include \"my_base.h\"\n#include \"my_dbug.h\"\n#include \"my_inttypes.h\"\n#include \"my_io.h\"\n#include \"my_loglevel.h\"\n#include \"my_macros.h\"\n#include \"my_psi_config.h\"\n#include \"my_sharedlib.h\"\n#include \"my_sys.h\"\n#include \"my_thread_local.h\"\n#include \"mysql/components/service_implementation.h\"\n#include \"mysql/components/services/log_builtins.h\"\n#include \"mysql/components/services/log_shared.h\"\n#include \"mysql/components/services/mysql_rwlock_bits.h\"\n#include \"mysql/components/services/psi_memory_bits.h\"\n#include \"mysql/components/services/psi_rwlock_bits.h\"\n#include \"mysql/psi/mysql_memory.h\"\n#include \"mysql/psi/mysql_rwlock.h\"\n#include \"mysql/psi/psi_base.h\"\n#include \"mysql_com.h\"\n#include \"mysqld_error.h\"  // ER_*\n#include \"sql/field.h\"\n#include \"sql/handler.h\"\n#include \"sql/mdl.h\"\n#include \"sql/mysqld.h\"   // opt_allow_suspicious_udfs\n#include \"sql/records.h\"  // unique_ptr_destroy_only<RowIterator>\n#include \"sql/row_iterator.h\"\n#include \"sql/sql_base.h\"   // close_mysql_tables\n#include \"sql/sql_class.h\"  // THD\n#include \"sql/sql_const.h\"\n#include \"sql/sql_parse.h\"   // check_string_char_length\n#include \"sql/sql_plugin.h\"  // check_valid_path\n#include \"sql/sql_table.h\"   // write_bin_log\n#include \"sql/table.h\"       // TABLE_LIST\n#include \"sql/thd_raii.h\"\n#include \"sql/thr_malloc.h\"\n#include \"sql/transaction.h\"  // trans_*\n#include \"thr_lock.h\"\n#include \"udf_registration_imp.h\"\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n/**\n  @page page_ext_udf User Defined Functions\n\n  @todo Document me\n\n  @sa add_udf, udf_hash_delete.\n*/\n\n/**\n  A local flag indicating whether SQL based UDF operations are allowed.\n  Now the UDF structures are always allocated/deallocated due to\n  the component service.\n\n  So this variable does not cover initialization/deinitialization of these.\n  \\ref mem and \\ref THR_LOCK_udf are always initialized, even in\n  --skip-grant-tables mode.\n*/\nstatic bool initialized = false;\nstatic MEM_ROOT mem;\nstatic collation_unordered_map<std::string, udf_func *> *udf_hash;\nstatic mysql_rwlock_t THR_LOCK_udf;\n\nstatic udf_func *add_udf(LEX_STRING *name, Item_result ret, char *dl,\n                         Item_udftype typ);\nstatic void udf_hash_delete(udf_func *udf);\nstatic void *find_udf_dl(const char *dl);\n\nstatic char *init_syms(udf_func *tmp, char *nm) {\n  char *end;\n\n  if (!((tmp->func = (Udf_func_any)dlsym(tmp->dlhandle, tmp->name.str))))\n    return tmp->name.str;\n\n  end = my_stpcpy(nm, tmp->name.str);\n\n  if (tmp->type == UDFTYPE_AGGREGATE) {\n    (void)my_stpcpy(end, \"_clear\");\n    if (!((tmp->func_clear = (Udf_func_clear)dlsym(tmp->dlhandle, nm))))\n      return nm;\n    (void)my_stpcpy(end, \"_add\");\n    if (!((tmp->func_add = (Udf_func_add)dlsym(tmp->dlhandle, nm)))) return nm;\n  }\n\n  (void)my_stpcpy(end, \"_deinit\");\n  tmp->func_deinit = (Udf_func_deinit)dlsym(tmp->dlhandle, nm);\n\n  (void)my_stpcpy(end, \"_init\");\n  tmp->func_init = (Udf_func_init)dlsym(tmp->dlhandle, nm);\n\n  /*\n    to prevent loading \"udf\" from, e.g. libc.so\n    let's ensure that at least one auxiliary symbol is defined\n  */\n  if (!tmp->func_init && !tmp->func_deinit && tmp->type != UDFTYPE_AGGREGATE) {\n    if (!opt_allow_suspicious_udfs) return nm;\n    LogErr(WARNING_LEVEL, ER_FAILED_TO_FIND_DL_ENTRY, nm);\n  }\n  return nullptr;\n}\n\nstatic PSI_memory_key key_memory_udf_mem;\n\n#ifdef HAVE_PSI_INTERFACE\nstatic PSI_rwlock_key key_rwlock_THR_LOCK_udf;\n\nstatic PSI_rwlock_info all_udf_rwlocks[] = {{&key_rwlock_THR_LOCK_udf,\n                                             \"THR_LOCK_udf\", PSI_FLAG_SINGLETON,\n                                             0, PSI_DOCUMENT_ME}};\n\nstatic PSI_memory_info all_udf_memory[] = {{&key_memory_udf_mem, \"udf_mem\",\n                                            PSI_FLAG_ONLY_GLOBAL_STAT, 0,\n                                            PSI_DOCUMENT_ME}};\n\nstatic void init_udf_psi_keys(void) {\n  const char *category = \"sql\";\n  int count;\n\n  count = static_cast<int>(array_elements(all_udf_rwlocks));\n  mysql_rwlock_register(category, all_udf_rwlocks, count);\n\n  count = static_cast<int>(array_elements(all_udf_memory));\n  mysql_memory_register(category, all_udf_memory, count);\n}\n#endif\n\n/**\n  Initialize the UDF global structures.\n  This is done as a separate step so that the UDF registration\n  service can work when initalizing plugins, which happens\n  before reading the UDF table.\n*/\nvoid udf_init_globals() {\n  DBUG_TRACE;\n  if (initialized) return;\n\n#ifdef HAVE_PSI_INTERFACE\n  init_udf_psi_keys();\n#endif\n\n  mysql_rwlock_init(key_rwlock_THR_LOCK_udf, &THR_LOCK_udf);\n  init_sql_alloc(key_memory_udf_mem, &mem, UDF_ALLOC_BLOCK_SIZE, 0);\n\n  udf_hash = new collation_unordered_map<std::string, udf_func *>(\n      system_charset_info, key_memory_udf_mem);\n}\n\n/*\n  Read all predeclared functions from mysql.func and accept all that\n  can be used.\n  The global structures must be initialized first.\n*/\nvoid udf_read_functions_table() {\n  udf_func *tmp;\n  TABLE *table;\n  unique_ptr_destroy_only<RowIterator> iterator;\n  int error;\n  DBUG_TRACE;\n  char db[] = \"mysql\"; /* A subject to casednstr, can't be constant */\n\n  if (initialized) {\n    DBUG_ASSERT(\"wrong init order: reading UDFs from the table twice\");\n    return;\n  }\n\n  initialized = true;\n\n  THD *new_thd = new (std::nothrow) THD;\n  if (new_thd == nullptr) {\n    LogErr(ERROR_LEVEL, ER_UDF_CANT_ALLOC_FOR_STRUCTURES);\n    free_root(&mem, MYF(0));\n    delete new_thd;\n    return;\n  }\n  new_thd->thread_stack = (char *)&new_thd;\n  new_thd->store_globals();\n  {\n    LEX_CSTRING db_lex_cstr = {STRING_WITH_LEN(db)};\n    new_thd->set_db(db_lex_cstr);\n  }\n\n  TABLE_LIST tables(db, \"func\", TL_READ, MDL_SHARED_READ_ONLY);\n\n  if (open_trans_system_tables_for_read(new_thd, &tables)) {\n    DBUG_PRINT(\"error\", (\"Can't open udf table\"));\n    LogErr(ERROR_LEVEL, ER_UDF_CANT_OPEN_FUNCTION_TABLE);\n    goto end;\n  }\n\n  table = tables.table;\n  iterator = init_table_iterator(new_thd, table, nullptr, false,\n                                 /*ignore_not_found_rows=*/false);\n  if (iterator == nullptr) goto end;\n  while (!(error = iterator->Read())) {\n    DBUG_PRINT(\"info\", (\"init udf record\"));\n    LEX_STRING name;\n    name.str = get_field(&mem, table->field[0]);\n    name.length = strlen(name.str);\n    char *dl_name = get_field(&mem, table->field[2]);\n    bool new_dl = false;\n    Item_udftype udftype = UDFTYPE_FUNCTION;\n    if (table->s->fields >= 4)  // New func table\n      udftype = (Item_udftype)table->field[3]->val_int();\n\n    /*\n      Ensure that the .dll doesn't have a path\n      This is done to ensure that only approved dll from the system\n      directories are used (to make this even remotely secure).\n\n      On windows we must check both FN_LIBCHAR and '/'.\n    */\n\n    LEX_CSTRING name_cstr = {name.str, name.length};\n    if (check_valid_path(dl_name, strlen(dl_name)) ||\n        check_string_char_length(name_cstr, \"\", NAME_CHAR_LEN,\n                                 system_charset_info, true)) {\n      LogErr(ERROR_LEVEL, ER_UDF_INVALID_ROW_IN_FUNCTION_TABLE, name.str);\n      continue;\n    }\n\n    if (!(tmp = add_udf(&name, (Item_result)table->field[1]->val_int(), dl_name,\n                        udftype))) {\n      LogErr(ERROR_LEVEL, ER_UDF_CANT_ALLOC_FOR_FUNCTION, name.str);\n      continue;\n    }\n\n    void *dl = find_udf_dl(tmp->dl);\n    if (dl == nullptr) {\n      char dlpath[FN_REFLEN];\n      strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", tmp->dl, NullS);\n      (void)unpack_filename(dlpath, dlpath);\n      if (!(dl = dlopen(dlpath, RTLD_NOW))) {\n        const char *errmsg;\n        int error_number = dlopen_errno;\n        DLERROR_GENERATE(errmsg, error_number);\n\n        // Print warning to log\n        LogErr(ERROR_LEVEL, ER_FAILED_TO_OPEN_SHARED_LIBRARY, tmp->dl,\n               error_number, errmsg);\n        // Keep the udf in the hash so that we can remove it later\n        continue;\n      }\n      new_dl = true;\n    }\n    tmp->dlhandle = dl;\n    {\n      char buf[NAME_LEN + 16], *missing;\n      if ((missing = init_syms(tmp, buf))) {\n        LogErr(ERROR_LEVEL, ER_FAILED_TO_FIND_DL_ENTRY, missing);\n        udf_hash_delete(tmp);\n        if (new_dl) dlclose(dl);\n      }\n    }\n  }\n  if (error > 0) LogErr(ERROR_LEVEL, ER_UNKNOWN_ERROR_NUMBER, my_errno());\n  iterator.reset();\n  table->m_needs_reopen = true;  // Force close to free memory\n\nend:\n  close_trans_system_tables(new_thd);\n  delete new_thd;\n}\n\n/**\n   Deintialize the UDF subsystem.\n\n   This function closes the shared libaries.\n*/\nvoid udf_unload_udfs() {\n  DBUG_TRACE;\n  if (udf_hash != nullptr) {\n    for (auto it1 = udf_hash->begin(); it1 != udf_hash->end(); ++it1) {\n      udf_func *udf = it1->second;\n      if (udf->dlhandle)  // Not closed before\n      {\n        /* Mark all versions using the same handler as closed */\n        for (auto it2 = std::next(it1); it2 != udf_hash->end(); ++it2) {\n          udf_func *tmp = it2->second;\n          if (udf->dlhandle == tmp->dlhandle)\n            tmp->dlhandle = nullptr;  // Already closed\n        }\n        dlclose(udf->dlhandle);\n      }\n    }\n  }\n}\n\n/**\n   Deintialize the UDF subsystem.\n\n   This function does the following:\n   1. Free the UDF hash.\n   2. Free the memroot allocated.\n   3. Destroy the RW mutex object.\n*/\nvoid udf_deinit_globals() {\n  DBUG_TRACE;\n  if (udf_hash != nullptr) {\n    delete udf_hash;\n    udf_hash = nullptr;\n  }\n  free_root(&mem, MYF(0));\n  initialized = false;\n\n  mysql_rwlock_destroy(&THR_LOCK_udf);\n}\n\n/**\n   Delete the UDF function from the UDF hash.\n\n   @param udf  Pointer to the UDF function.\n\n   @note The function remove the udf function from the udf\n         hash if it is not in use. If the function is in use,\n         the function name is renamed so that it is not used.\n         The function shall be removed when no threads use it.\n*/\nstatic void udf_hash_delete(udf_func *udf) {\n  DBUG_TRACE;\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n\n  const auto it = udf_hash->find(to_string(udf->name));\n  if (it == udf_hash->end()) {\n    DBUG_ASSERT(false);\n    return;\n  }\n\n  if (!--udf->usage_count) {\n    udf_hash->erase(it);\n    using_udf_functions = !udf_hash->empty();\n  } else {\n    /*\n      The functions is in use ; Rename the functions instead of removing it.\n      The functions will be automaticly removed when the least threads\n      doesn't use it anymore\n    */\n    udf_hash->erase(it);\n    char new_name[32];\n    snprintf(new_name, sizeof(new_name), \"*<%p>\", udf);\n    udf_hash->emplace(new_name, udf);\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n}\n\nvoid free_udf(udf_func *udf) {\n  DBUG_TRACE;\n\n  if (!initialized) return;\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  if (!--udf->usage_count) {\n    /*\n      We come here when someone has deleted the udf function\n      while another thread still was using the udf\n    */\n    const auto it = udf_hash->find(to_string(udf->name));\n    if (it == udf_hash->end()) {\n      DBUG_ASSERT(false);\n      return;\n    }\n    udf_hash->erase(it);\n    using_udf_functions = !udf_hash->empty();\n    if (udf->dlhandle && !find_udf_dl(udf->dl)) dlclose(udf->dlhandle);\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n}\n\n/* This is only called if using_udf_functions != 0 */\n\nudf_func *find_udf(const char *name, size_t length, bool mark_used) {\n  udf_func *udf = nullptr;\n  DBUG_TRACE;\n\n  if (!initialized) return nullptr;\n\n  /* TODO: This should be changed to reader locks someday! */\n  if (mark_used)\n    mysql_rwlock_wrlock(&THR_LOCK_udf); /* Called during fix_fields */\n  else\n    mysql_rwlock_rdlock(&THR_LOCK_udf); /* Called during parsing */\n\n  std::string key = length ? std::string(name, length) : std::string(name);\n  const auto it = udf_hash->find(key);\n\n  if (it != udf_hash->end()) {\n    udf = it->second;\n    if (mark_used) udf->usage_count++;\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  return udf;\n}\n\nstatic void *find_udf_dl(const char *dl) {\n  DBUG_TRACE;\n\n  if (!dl) return nullptr;\n  /*\n    Because only the function name is hashed, we have to search trough\n    all rows to find the dl.\n  */\n  for (const auto &key_and_value : *udf_hash) {\n    udf_func *udf = key_and_value.second;\n    if (udf->dl && !strcmp(dl, udf->dl) && udf->dlhandle != nullptr)\n      return udf->dlhandle;\n  }\n  return nullptr;\n}\n\n/* Assume that name && dl is already allocated */\n\nstatic udf_func *add_udf(LEX_STRING *name, Item_result ret, char *dl,\n                         Item_udftype type) {\n  if (!name || !dl || !(uint)type || (uint)type > (uint)UDFTYPE_AGGREGATE)\n    return nullptr;\n\n  udf_func *tmp = (udf_func *)mem.Alloc(sizeof(udf_func));\n  if (!tmp) return nullptr;\n  memset(tmp, 0, sizeof(*tmp));\n  tmp->name = *name;  // dup !!\n  tmp->dl = dl;\n  tmp->returns = ret;\n  tmp->type = type;\n  tmp->usage_count = 1;\n\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n\n  udf_hash->emplace(to_string(tmp->name), tmp);\n  using_udf_functions = true;\n\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  return tmp;\n}\n\n/**\n   Commit or rollback a transaction. Also close tables\n   which it has opened and release metadata locks.\n   Add/Remove from the in-memory hash depending on transaction\n   commit or rollback and the bool flag passed to this function.\n\n   @param thd                 THD context.\n   @param rollback            Rollback transaction if true.\n   @param udf                 Pointer to UDF function.\n   @param insert_udf          Insert UDF in hash if true.\n\n   @retval False - Success.\n   @retval True  - Error.\n*/\n\nstatic bool udf_end_transaction(THD *thd, bool rollback, udf_func *udf,\n                                bool insert_udf) {\n  bool result;\n  bool rollback_transaction = thd->transaction_rollback_request || rollback;\n  udf_func *u_f = nullptr;\n\n  DBUG_ASSERT(stmt_causes_implicit_commit(thd, CF_IMPLICIT_COMMIT_END));\n\n  if (!rollback_transaction && insert_udf) {\n    udf->name.str = strdup_root(&mem, udf->name.str);\n    udf->dl = strdup_root(&mem, udf->dl);\n    // create entry in mysql.func table\n    u_f = add_udf(&udf->name, udf->returns, udf->dl, udf->type);\n    if (u_f != nullptr) {\n      u_f->dlhandle = udf->dlhandle;\n      u_f->func = udf->func;\n      u_f->func_init = udf->func_init;\n      u_f->func_deinit = udf->func_deinit;\n      u_f->func_clear = udf->func_clear;\n      u_f->func_add = udf->func_add;\n    }\n  }\n\n  rollback_transaction = rollback_transaction || (insert_udf && u_f == nullptr);\n\n  /*\n    CREATE/DROP UDF operations must acquire IX Backup Lock in order\n    to be mutually exclusive with LOCK INSTANCE FOR BACKUP.\n  */\n  DBUG_ASSERT(thd->mdl_context.owns_equal_or_stronger_lock(\n      MDL_key::BACKUP_LOCK, \"\", \"\", MDL_INTENTION_EXCLUSIVE));\n\n  /*\n    Rollback the transaction if there is an error or there is a request by the\n    SE (which is unlikely).\n  */\n  if (rollback_transaction) {\n    result = trans_rollback_stmt(thd);\n    result = result || trans_rollback_implicit(thd);\n  } else {\n    result = trans_commit_stmt(thd);\n    result = result || trans_commit_implicit(thd);\n  }\n\n  /*\n    Delete UDF from the hash if\n      * the transaction commit fails for CREATE UDF operation\n      * OR if the transaction is committed successfully for the DROP UDF\n        operation.\n  */\n  if (!rollback_transaction &&\n      ((insert_udf && result) || (!insert_udf && !result)))\n    udf_hash_delete(udf);\n\n  close_thread_tables(thd);\n  thd->mdl_context.release_transactional_locks();\n\n  return result || rollback || (insert_udf && u_f == nullptr);\n}\n\n/**\n  Create a user defined function.\n\n  Atomicity:\n    The operation to create a user defined function is atomic/crash-safe.\n    Changes to the Data-dictionary and writing event to binlog are\n    part of the same transaction. All the changes are done as part\n    of the same transaction or do not have any side effects on the\n    operation failure. UDF hash is in sync with operation state.\n    UDF hash do not contain any stale/incorrect data in case of failure.\n    In case of crash, there won't be any discrepancy between the\n    data-dictionary table and the binary log.\n\n  @param thd                 THD context.\n  @param udf                 Pointer to UDF function.\n\n  @note Like implementations of other DDL/DML in MySQL, this function\n  relies on the caller to close the thread tables. This is done in the\n  end of dispatch_command().\n*/\n\nbool mysql_create_function(THD *thd, udf_func *udf) {\n  bool error = true;\n  void *dl = nullptr;\n  int new_dl = 0;\n  TABLE *table;\n\n  DBUG_TRACE;\n\n  if (!initialized) {\n    if (opt_noacl)\n      my_error(ER_CANT_INITIALIZE_UDF, MYF(0), udf->name.str,\n               \"UDFs are unavailable with the --skip-grant-tables option\");\n    else\n      my_error(ER_OUT_OF_RESOURCES, MYF(0));\n    return error;\n  }\n\n  /* must not be dynamically registered */\n  DBUG_ASSERT(udf->dl);\n\n  /*\n    Ensure that the .dll doesn't have a path\n    This is done to ensure that only approved dll from the system\n    directories are used (to make this even remotely secure).\n  */\n  if (check_valid_path(udf->dl, strlen(udf->dl))) {\n    my_error(ER_UDF_NO_PATHS, MYF(0));\n    return error;\n  }\n  LEX_CSTRING udf_name_cstr = {udf->name.str, udf->name.length};\n  if (check_string_char_length(udf_name_cstr, \"\", NAME_CHAR_LEN,\n                               system_charset_info, true)) {\n    my_error(ER_TOO_LONG_IDENT, MYF(0), udf->name.str);\n    return error;\n  }\n\n  /*\n    Acquire MDL SNRW for TL_WRITE type so that deadlock and\n    timeout errors are avoided from the Storage Engine.\n  */\n  TABLE_LIST tables(\"mysql\", \"func\", TL_WRITE, MDL_SHARED_NO_READ_WRITE);\n\n  if (open_and_lock_tables(thd, &tables, MYSQL_LOCK_IGNORE_TIMEOUT))\n    return error;\n  table = tables.table;\n  /*\n    Turn off row binlogging of this statement and use statement-based\n    so that all supporting tables are updated for CREATE FUNCTION command.\n  */\n  Save_and_Restore_binlog_format_state binlog_format_state(thd);\n\n  mysql_rwlock_rdlock(&THR_LOCK_udf);\n  if (udf_hash->count(to_string(udf->name)) != 0) {\n    my_error(ER_UDF_EXISTS, MYF(0), udf->name.str);\n    mysql_rwlock_unlock(&THR_LOCK_udf);\n    return error;\n  }\n  dl = find_udf_dl(udf->dl);\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n\n  if (dl == nullptr) {\n    char dlpath[FN_REFLEN];\n    strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", udf->dl, NullS);\n    (void)unpack_filename(dlpath, dlpath);\n\n    if (!(dl = dlopen(dlpath, RTLD_NOW))) {\n      const char *errmsg;\n      int error_number = dlopen_errno;\n      DLERROR_GENERATE(errmsg, error_number);\n\n      DBUG_PRINT(\"error\", (\"dlopen of %s failed, error: %d (%s)\", udf->dl,\n                           error_number, errmsg));\n      my_error(ER_CANT_OPEN_LIBRARY, MYF(0), udf->dl, error_number, errmsg);\n      return error;\n    }\n    new_dl = 1;\n  }\n  udf->dlhandle = dl;\n  {\n    char buf[NAME_LEN + 16], *missing;\n    if ((missing = init_syms(udf, buf))) {\n      my_error(ER_CANT_FIND_DL_ENTRY, MYF(0), missing);\n      if (new_dl) dlclose(dl);\n      return error;\n    }\n  }\n\n  // create entry in mysql.func table\n\n  table->use_all_columns();\n  restore_record(table, s->default_values);  // Default values for fields\n  table->field[0]->store(udf->name.str, udf->name.length, system_charset_info);\n  table->field[1]->store((longlong)udf->returns, true);\n  table->field[2]->store(udf->dl, strlen(udf->dl), system_charset_info);\n  if (table->s->fields >= 4)  // If not old func format\n    table->field[3]->store((longlong)udf->type, true);\n  error = (table->file->ha_write_row(table->record[0]) != 0);\n\n  // Binlog the create function.\n  if (!error)\n    error = (write_bin_log(thd, true, thd->query().str, thd->query().length,\n                           true) != 0);\n\n  error = udf_end_transaction(thd, error, udf, true);\n\n  if (error) {\n    char errbuf[MYSYS_STRERROR_SIZE];\n    my_error(ER_ERROR_ON_WRITE, MYF(0), \"mysql.func\", error,\n             my_strerror(errbuf, sizeof(errbuf), error));\n    if (new_dl) dlclose(dl);\n  }\n  return error;\n}\n\n/**\n  Drop a user defined function.\n\n  Atomicity:\n    The operation to drop a user defined function is atomic/crash-safe.\n    Changes to the Data-dictionary and writing event to binlog are\n    part of the same transaction. All the changes are done as part\n    of the same transaction or do not have any side effects on the\n    operation failure. UDF hash is in sync with operation state.\n    UDF hash do not contain any stale/incorrect data in case of failure.\n    In case of crash, there won't be any discrepancy between the\n    data-dictionary table and the binary log.\n\n  @param thd                 THD context.\n  @param udf_name            Name of the UDF function.\n*/\n\nbool mysql_drop_function(THD *thd, const LEX_STRING *udf_name) {\n  TABLE *table;\n  udf_func *udf;\n  bool error = true;\n\n  DBUG_TRACE;\n\n  if (!initialized) {\n    if (opt_noacl)\n      my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), udf_name->str);\n    else\n      my_error(ER_OUT_OF_RESOURCES, MYF(0));\n    return error;\n  }\n\n  TABLE_LIST tables(\"mysql\", \"func\", TL_WRITE, MDL_SHARED_NO_READ_WRITE);\n\n  if (open_and_lock_tables(thd, &tables, MYSQL_LOCK_IGNORE_TIMEOUT))\n    return error;\n  table = tables.table;\n  /*\n    Turn off row binlogging of this statement and use statement-based\n    so that all supporting tables are updated for DROP FUNCTION command.\n  */\n  Save_and_Restore_binlog_format_state binlog_format_state(thd);\n\n  mysql_rwlock_rdlock(&THR_LOCK_udf);\n  const auto it = udf_hash->find(to_string(*udf_name));\n  if (it == udf_hash->end()) {\n    my_error(ER_FUNCTION_NOT_DEFINED, MYF(0), udf_name->str);\n    mysql_rwlock_unlock(&THR_LOCK_udf);\n    return error;\n  }\n  udf = it->second;\n  if (!udf->dl) {\n    mysql_rwlock_unlock(&THR_LOCK_udf);\n    my_error(ER_UDF_DROP_DYNAMICALLY_REGISTERED, MYF(0));\n    return error;\n  }\n\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n\n  table->use_all_columns();\n  table->field[0]->store(udf->name.str, udf->name.length, &my_charset_bin);\n  if (!table->file->ha_index_read_idx_map(table->record[0], 0,\n                                          table->field[0]->ptr, HA_WHOLE_KEY,\n                                          HA_READ_KEY_EXACT)) {\n    int delete_err;\n    if ((delete_err = table->file->ha_delete_row(table->record[0])))\n      table->file->print_error(delete_err, MYF(0));\n    error = delete_err != 0;\n  }\n\n  /*\n    Binlog the drop function. Keep the table open and locked\n    while binlogging, to avoid binlog inconsistency.\n  */\n  if (!error)\n    error = (write_bin_log(thd, true, thd->query().str, thd->query().length,\n                           true) != 0);\n\n  error = udf_end_transaction(thd, error, udf, false);\n\n  /*\n    Close the handle if this was function that was found during boot or\n    CREATE FUNCTION and it's not in use by any other udf function\n  */\n  if (udf->dlhandle && !find_udf_dl(udf->dl)) dlclose(udf->dlhandle);\n\n  return error;\n}\n\nbool mysql_udf_registration_imp::udf_register_inner(udf_func *ufunc) {\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n\n  DBUG_ASSERT(ufunc->dl == nullptr);\n  DBUG_ASSERT(ufunc->dlhandle == nullptr);\n\n  auto res = udf_hash->emplace(to_string(ufunc->name), ufunc);\n  if (!res.second)\n    ufunc = nullptr;\n  else\n    using_udf_functions = true;\n\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  return ufunc == nullptr;\n}\n\nudf_func *mysql_udf_registration_imp::alloc_udf(const char *name,\n                                                Item_result return_type,\n                                                Udf_func_any func,\n                                                Udf_func_init init_func,\n                                                Udf_func_deinit deinit_func) {\n  udf_func *ufunc;\n\n  ufunc = (udf_func *)mem.Alloc(sizeof(udf_func));\n  if (!ufunc) return nullptr;\n  memset(ufunc, 0, sizeof(udf_func));\n  ufunc->name.str = strdup_root(&mem, name);\n  ufunc->name.length = strlen(name);\n  ufunc->func = func;\n  ufunc->func_init = init_func;\n  ufunc->func_deinit = deinit_func;\n  ufunc->returns = return_type;\n  ufunc->usage_count = 1;\n\n  return ufunc;\n}\n\nDEFINE_BOOL_METHOD(mysql_udf_registration_imp::udf_register,\n                   (const char *name, Item_result return_type,\n                    Udf_func_any func, Udf_func_init init_func,\n                    Udf_func_deinit deinit_func)) {\n  udf_func *ufunc;\n\n  if (!func && !init_func && !deinit_func) return true;\n\n  ufunc = alloc_udf(name, return_type, func, init_func, deinit_func);\n  if (!ufunc) return true;\n  ufunc->type = Item_udftype::UDFTYPE_FUNCTION;\n\n  return udf_register_inner(ufunc);\n}\n\nDEFINE_BOOL_METHOD(mysql_udf_registration_imp::udf_register_aggregate,\n                   (const char *name, enum Item_result return_type,\n                    Udf_func_any func, Udf_func_init init_func,\n                    Udf_func_deinit deinit_func, Udf_func_add add_func,\n                    Udf_func_clear clear_func)) {\n  udf_func *ufunc;\n\n  if (!func && !add_func && !clear_func && !init_func && !deinit_func)\n    return true;\n\n  ufunc = alloc_udf(name, return_type, func, init_func, deinit_func);\n  if (!ufunc) return true;\n  ufunc->type = Item_udftype::UDFTYPE_AGGREGATE;\n  ufunc->func_add = add_func;\n  ufunc->func_clear = clear_func;\n\n  return udf_register_inner(ufunc);\n}\n\nDEFINE_BOOL_METHOD(mysql_udf_registration_imp::udf_unregister,\n                   (const char *name, int *was_present)) {\n  udf_func *udf = nullptr;\n\n  if (was_present) *was_present = 0;\n  mysql_rwlock_wrlock(&THR_LOCK_udf);\n  const auto it = udf_hash->find(name);\n  if (it != udf_hash->end()) {\n    if (was_present) *was_present = 1;\n\n    udf = it->second;\n\n    if (!udf->dl && !udf->dlhandle &&  // Not registered via CREATE FUNCTION\n        !--udf->usage_count)           // Not used\n    {\n      udf_hash->erase(it);\n      using_udf_functions = !udf_hash->empty();\n    } else  // error\n      udf = nullptr;\n  }\n  mysql_rwlock_unlock(&THR_LOCK_udf);\n  return udf != nullptr ? false : true;\n}\n\nvoid udf_hash_rlock(void) { mysql_rwlock_rdlock(&THR_LOCK_udf); }\n\nvoid udf_hash_unlock(void) { mysql_rwlock_unlock(&THR_LOCK_udf); }\n\nulong udf_hash_size(void) { return udf_hash->size(); }\n\nvoid udf_hash_for_each(udf_hash_for_each_func_t *func, void *arg) {\n  for (auto it : *udf_hash) func(it.second, arg);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/sql/sql_plugin.cc": "/* Copyright (c) 2005, 2020, Oracle and/or its affiliates. All rights reserved.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License, version 2.0,\n   as published by the Free Software Foundation.\n\n   This program is also distributed with certain software (including\n   but not limited to OpenSSL) that is licensed under separate terms,\n   as designated in a particular file or component or in included license\n   documentation.  The authors of MySQL hereby grant you an additional\n   permission to link the program and your derivative works with the\n   separately licensed software that they have included with MySQL.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License, version 2.0, for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301  USA */\n\n#include \"sql/sql_plugin.h\"\n\n#include \"my_config.h\"\n\n#include <stdarg.h>\n#include <stdio.h>\n#include <string.h>\n\n#include \"m_ctype.h\"\n#include \"m_string.h\"\n#include \"map_helpers.h\"\n#include \"mutex_lock.h\"  // MUTEX_LOCK\n#include \"my_alloc.h\"\n#include \"my_base.h\"\n#include \"my_compiler.h\"\n#include \"my_dbug.h\"\n#include \"my_default.h\"  // free_defaults\n#include \"my_getopt.h\"\n#include \"my_inttypes.h\"\n#include \"my_list.h\"\n#include \"my_loglevel.h\"\n#include \"my_macros.h\"\n#include \"my_psi_config.h\"\n#include \"my_sharedlib.h\"\n#include \"my_sys.h\"\n#include \"my_thread_local.h\"\n#include \"mysql/components/services/log_builtins.h\"\n#include \"mysql/components/services/log_shared.h\"\n#include \"mysql/components/services/psi_memory_bits.h\"\n#include \"mysql/components/services/psi_mutex_bits.h\"\n#include \"mysql/components/services/system_variable_source_type.h\"\n#include \"mysql/plugin_audit.h\"\n#include \"mysql/plugin_auth.h\"\n#include \"mysql/plugin_clone.h\"\n#include \"mysql/plugin_group_replication.h\"\n#include \"mysql/plugin_keyring.h\"\n#include \"mysql/plugin_validate_password.h\"\n#include \"mysql/psi/mysql_memory.h\"\n#include \"mysql/psi/mysql_mutex.h\"\n#include \"mysql/psi/mysql_rwlock.h\"\n#include \"mysql/psi/mysql_system.h\"\n#include \"mysql/psi/mysql_thread.h\"\n#include \"mysql/psi/psi_base.h\"\n#include \"mysql/service_mysql_alloc.h\"\n#include \"mysql_com.h\"\n#include \"mysql_version.h\"\n#include \"mysqld_error.h\"\n#include \"prealloced_array.h\"\n#include \"sql/auth/auth_acls.h\"\n#include \"sql/auth/auth_common.h\"  // check_table_access\n#include \"sql/auto_thd.h\"          // Auto_THD\n#include \"sql/current_thd.h\"\n#include \"sql/dd/cache/dictionary_client.h\"  // dd::cache::Dictionary_client\n#include \"sql/dd/dd_schema.h\"                // dd::Schema_MDL_locker\n#include \"sql/dd/info_schema/metadata.h\"  // dd::info_schema::store_dynamic_p...\n#include \"sql/dd/string_type.h\"           // dd::String_type\n#include \"sql/dd_sql_view.h\"              // update_referencing_views_metadata\n#include \"sql/debug_sync.h\"               // DEBUG_SYNC\n#include \"sql/derror.h\"                   // ER_THD\n#include \"sql/field.h\"\n#include \"sql/handler.h\"  // ha_initalize_handlerton\n#include \"sql/key.h\"      // key_copy\n#include \"sql/lock.h\"     // acquire_shared_global...\n#include \"sql/log.h\"\n#include \"sql/mdl.h\"\n#include \"sql/mysqld.h\"              // files_charset_info\n#include \"sql/persisted_variable.h\"  // Persisted_variables_cache\n#include \"sql/protocol_classic.h\"\n#include \"sql/psi_memory_key.h\"\n#include \"sql/records.h\"  // unique_ptr_destroy_only<RowIterator>\n#include \"sql/row_iterator.h\"\n#include \"sql/set_var.h\"\n#include \"sql/sql_audit.h\"        // mysql_audit_acquire_plugins\n#include \"sql/sql_backup_lock.h\"  // acquire_shared_backup_lock\n#include \"sql/sql_base.h\"         // close_mysql_tables\n#include \"sql/sql_class.h\"        // THD\n#include \"sql/sql_const.h\"\n#include \"sql/sql_error.h\"\n#include \"sql/sql_lex.h\"\n#include \"sql/sql_list.h\"\n#include \"sql/sql_parse.h\"  // check_string_char_length\n#include \"sql/sql_plugin_var.h\"\n#include \"sql/sql_show.h\"  // add_status_vars\n#include \"sql/sql_table.h\"\n#include \"sql/sys_vars_resource_mgr.h\"\n#include \"sql/sys_vars_shared.h\"  // intern_find_sys_var\n#include \"sql/system_variables.h\"\n#include \"sql/table.h\"\n#include \"sql/thd_raii.h\"\n#include \"sql/thr_malloc.h\"\n#include \"sql/transaction.h\"  // trans_rollback_stmt\n#include \"sql_string.h\"\n#include \"template_utils.h\"  // pointer_cast\n#include \"thr_lock.h\"\n#include \"thr_mutex.h\"\n#include \"typelib.h\"\n\n/* clang-format off */\n/**\n  @page page_ext_plugins Plugins\n\n  The Big Picture\n  ----------------\n\n  @startuml\n  actor \"SQL client\" as client\n  box \"MySQL Server\" #LightBlue\n    participant \"Server Code\" as server\n    participant \"Plugin\" as plugin\n  endbox\n\n  == INSTALL PLUGIN ==\n  server -> plugin : initialize\n  activate plugin\n  plugin --> server : initialization done\n\n  == CLIENT SESSION ==\n  loop many\n    client -> server : SQL command\n    server -> server : Add reference for Plugin if absent\n    loop one or many\n      server -> plugin : plugin API call\n      plugin --> server : plugin API call result\n    end\n    server -> server : Optionally release reference for Plugin\n    server --> client : SQL command reply\n  end\n\n  == UNINSTALL PLUGIN ==\n  server -> plugin : deinitialize\n  plugin --> server : deinitialization done\n  deactivate plugin\n  @enduml\n\n  @sa Sql_cmd_install_plugin, Sql_cmd_uninstall_plugin.\n*/\n\n/**\n  @page page_ext_plugin_services Plugin Services\n\n  Adding Plugin Services Into The Big Picture\n  ------------------------------------\n\n  You probably remember the big picture for @ref page_ext_plugins.\n  Below is an extended version of it with plugin services added.\n\n  @startuml\n\n  actor \"SQL client\" as client\n  box \"MySQL Server\" #LightBlue\n    participant \"Server Code\" as server\n    participant \"Plugin\" as plugin\n  endbox\n\n  == INSTALL PLUGIN ==\n  server -> plugin : initialize\n  activate plugin\n\n  loop zero or many\n    plugin -> server : service API call\n    server --> plugin : service API result\n  end\n  plugin --> server : initialization done\n\n  == CLIENT SESSION ==\n  loop many\n    client -> server : SQL command\n    server -> server : Add reference for Plugin if absent\n    loop one or many\n      server -> plugin : plugin API call\n      loop zero or many\n        plugin -> server : service API call\n        server --> plugin : service API result\n      end\n      plugin --> server : plugin API call result\n    end\n    server -> server : Optionally release reference for Plugin\n    server --> client : SQL command reply\n  end\n\n  == UNINSTALL PLUGIN ==\n  server -> plugin : deinitialize\n  loop zero or many\n    plugin -> server : service API call\n    server --> plugin : service API result\n  end\n  plugin --> server : deinitialization done\n  deactivate plugin\n  @enduml\n\n  Understanding and creating plugin services\n  -----------------------------\n\n  - @subpage page_ext_plugin_svc_anathomy\n  - @subpage page_ext_plugin_svc_new_service_howto\n  - @subpage page_ext_plugin_api_goodservices\n\n  @section sect_ext_plugin_svc_reference Plugin Services Reference\n\n   See @ref group_ext_plugin_services\n*/\n\n/**\n  @page page_ext_plugin_svc_anathomy Plugin Service Anathomy\n\n  A \"service\" is a struct of C function pointers.\n\n  It is a tool to expose a pre-exitsing set of server functions to plugins.\n  You need the actual server functions as a starting point.\n\n  The server has all service structs defined and initialized so\n  that the the function pointers point to the actual service implementation\n  functions.\n\n  The server also keeps a global list of the plugin service reference\n  structures called ::list_of_services.\n\n  See ::st_service_ref for details of what a service reference is.\n\n  The server copies of all plugin structures are filled in at compile time\n  with the function pointers of the actual server functions that implement\n  the service functions. References to them are stored into the relevant\n  element of ::list_of_services.\n\n  Each plugin must export pointer symbols for every plugin service that\n  the server knows about.\n\n  The plugin service pointers are initialized with the version of the plugin\n  service that the plugin expects.\n\n  When a dynamic plugin shared object is loaded by ::plugin_dl_add it will\n  iterate over ::list_of_services, find the plugin symbol by name,\n  check the service version stored in that symbol against the one stored into\n  ::st_service_ref and then will replace the version stored in plugin's struct\n  pointer with the actual pointer of the server's copy of the same structure.\n\n  When that is filled in the plugin can use the newly set server structure\n  through its local pointer to call into the service method pointers that point\n  to the server implementaiton functions.\n\n  Once set to the server's structure, the plugin's service pointer value is\n  never reset back to service version.\n\n  The plugin service header also defines a set of convenience macros\n  that replace top level plugin service calls with the corresponding function\n  pointer call, i.e. for service foo:\n\n  ~~~~\n  struct foo_service_st {\n     int (*foo_mtd_1)(int a);\n  }\n\n  struct foo_service_st *foo_service;\n  ~~~~\n\n  a convenience macro is defined for `foo_mtd_1` as follows:\n\n  ~~~~\n  #define foo_mtd_1(a)  foo_service->foo_mtd_1(a)\n  ~~~~\n\n  This trick allows plugin service functions to look as top level function\n  calls inside the plugin code.\n\n  @sa plugin_add, plugin_del, plugin_dl_add, plugin_dl_del, list_of_services,\n    st_service_ref\n*/\n/* clang-format on */\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <algorithm>\n#include <memory>\n#include <new>\n#include <unordered_map>\n#include <utility>\n\n#include \"sql/srv_session.h\"  // Srv_session::check_for_stale_threads()\n\nusing std::max;\nusing std::min;\n\n#define REPORT_TO_LOG 1\n#define REPORT_TO_USER 2\n\n#ifndef DBUG_OFF\nstatic PSI_memory_key key_memory_plugin_ref;\n#endif\n\nstatic PSI_memory_key key_memory_plugin_mem_root;\nstatic PSI_memory_key key_memory_plugin_init_tmp;\nstatic PSI_memory_key key_memory_plugin_int_mem_root;\nstatic PSI_memory_key key_memory_mysql_plugin;\nstatic PSI_memory_key key_memory_mysql_plugin_dl;\nstatic PSI_memory_key key_memory_plugin_bookmark;\n\nextern st_mysql_plugin *mysql_optional_plugins[];\nextern st_mysql_plugin *mysql_mandatory_plugins[];\n\n/**\n  @note The order of the enumeration is critical.\n  @see construct_options\n*/\nconst char *global_plugin_typelib_names[] = {\"OFF\", \"ON\", \"FORCE\",\n                                             \"FORCE_PLUS_PERMANENT\", nullptr};\nstatic TYPELIB global_plugin_typelib = {\n    array_elements(global_plugin_typelib_names) - 1, \"\",\n    global_plugin_typelib_names, nullptr};\n\nstatic I_List<i_string> opt_plugin_load_list;\nI_List<i_string> *opt_plugin_load_list_ptr = &opt_plugin_load_list;\nstatic I_List<i_string> opt_early_plugin_load_list;\nI_List<i_string> *opt_early_plugin_load_list_ptr = &opt_early_plugin_load_list;\nchar *opt_plugin_dir_ptr;\nchar opt_plugin_dir[FN_REFLEN];\n/*\n  When you ad a new plugin type, add both a string and make sure that the\n  init and deinit array are correctly updated.\n*/\nconst LEX_CSTRING plugin_type_names[MYSQL_MAX_PLUGIN_TYPE_NUM] = {\n    {STRING_WITH_LEN(\"UDF\")},\n    {STRING_WITH_LEN(\"STORAGE ENGINE\")},\n    {STRING_WITH_LEN(\"FTPARSER\")},\n    {STRING_WITH_LEN(\"DAEMON\")},\n    {STRING_WITH_LEN(\"INFORMATION SCHEMA\")},\n    {STRING_WITH_LEN(\"AUDIT\")},\n    {STRING_WITH_LEN(\"REPLICATION\")},\n    {STRING_WITH_LEN(\"AUTHENTICATION\")},\n    {STRING_WITH_LEN(\"VALIDATE PASSWORD\")},\n    {STRING_WITH_LEN(\"GROUP REPLICATION\")},\n    {STRING_WITH_LEN(\"KEYRING\")},\n    {STRING_WITH_LEN(\"CLONE\")}};\n\nextern int initialize_schema_table(st_plugin_int *plugin);\nextern int finalize_schema_table(st_plugin_int *plugin);\n\n/*\n  The number of elements in both plugin_type_initialize and\n  plugin_type_deinitialize should equal to the number of plugins\n  defined.\n*/\nplugin_type_init plugin_type_initialize[MYSQL_MAX_PLUGIN_TYPE_NUM] = {\n    nullptr,\n    ha_initialize_handlerton,\n    nullptr,\n    nullptr,\n    initialize_schema_table,\n    initialize_audit_plugin,\n    nullptr,\n    nullptr,\n    nullptr};\n\nplugin_type_init plugin_type_deinitialize[MYSQL_MAX_PLUGIN_TYPE_NUM] = {\n    nullptr,\n    ha_finalize_handlerton,\n    nullptr,\n    nullptr,\n    finalize_schema_table,\n    finalize_audit_plugin,\n    nullptr,\n    nullptr,\n    nullptr};\n\nstatic const char *plugin_interface_version_sym =\n    \"_mysql_plugin_interface_version_\";\nstatic const char *sizeof_st_plugin_sym = \"_mysql_sizeof_struct_st_plugin_\";\nstatic const char *plugin_declarations_sym = \"_mysql_plugin_declarations_\";\nstatic int min_plugin_interface_version =\n    MYSQL_PLUGIN_INTERFACE_VERSION & ~0xFF;\n\nstatic void *innodb_callback_data;\n\n/* Note that 'int version' must be the first field of every plugin\n   sub-structure (plugin->info).\n*/\nstatic int min_plugin_info_interface_version[MYSQL_MAX_PLUGIN_TYPE_NUM] = {\n    0x0000,\n    MYSQL_HANDLERTON_INTERFACE_VERSION,\n    MYSQL_FTPARSER_INTERFACE_VERSION,\n    MYSQL_DAEMON_INTERFACE_VERSION,\n    MYSQL_INFORMATION_SCHEMA_INTERFACE_VERSION,\n    MYSQL_AUDIT_INTERFACE_VERSION,\n    MYSQL_REPLICATION_INTERFACE_VERSION,\n    MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n    MYSQL_VALIDATE_PASSWORD_INTERFACE_VERSION,\n    MYSQL_GROUP_REPLICATION_INTERFACE_VERSION,\n    MYSQL_KEYRING_INTERFACE_VERSION,\n    MYSQL_CLONE_INTERFACE_VERSION};\nstatic int cur_plugin_info_interface_version[MYSQL_MAX_PLUGIN_TYPE_NUM] = {\n    0x0000, /* UDF: not implemented */\n    MYSQL_HANDLERTON_INTERFACE_VERSION,\n    MYSQL_FTPARSER_INTERFACE_VERSION,\n    MYSQL_DAEMON_INTERFACE_VERSION,\n    MYSQL_INFORMATION_SCHEMA_INTERFACE_VERSION,\n    MYSQL_AUDIT_INTERFACE_VERSION,\n    MYSQL_REPLICATION_INTERFACE_VERSION,\n    MYSQL_AUTHENTICATION_INTERFACE_VERSION,\n    MYSQL_VALIDATE_PASSWORD_INTERFACE_VERSION,\n    MYSQL_GROUP_REPLICATION_INTERFACE_VERSION,\n    MYSQL_KEYRING_INTERFACE_VERSION,\n    MYSQL_CLONE_INTERFACE_VERSION};\n\n/* support for Services */\n\n#include \"sql/sql_plugin_services.h\"\n\n/*\n  A mutex LOCK_plugin_delete must be acquired before calling plugin_del\n  function.\n*/\nmysql_mutex_t LOCK_plugin_delete;\n\n/**\n  Serializes access to the global plugin memory list.\n\n  LOCK_plugin must be acquired before accessing\n  plugin_dl_array, plugin_array and plugin_hash.\n  We are always manipulating ref count, so a rwlock here is unneccessary.\n  If it must be taken together with the LOCK_system_variables_hash then\n  LOCK_plugin must be taken before LOCK_system_variables_hash.\n*/\nmysql_mutex_t LOCK_plugin;\n/**\n  Serializes the INSTALL and UNINSTALL PLUGIN commands.\n  Must be taken before LOCK_plugin.\n*/\nmysql_mutex_t LOCK_plugin_install;\nstatic Prealloced_array<st_plugin_dl *, 16> *plugin_dl_array;\nstatic Prealloced_array<st_plugin_int *, 16> *plugin_array;\nstatic collation_unordered_map<std::string, st_plugin_int *>\n    *plugin_hash[MYSQL_MAX_PLUGIN_TYPE_NUM] = {nullptr};\nstatic bool reap_needed = false;\nstatic int plugin_array_version = 0;\n\nstatic bool initialized = false;\n\nstatic MEM_ROOT plugin_mem_root;\nstatic uint global_variables_dynamic_size = 0;\nstatic malloc_unordered_map<std::string, st_bookmark *> *bookmark_hash;\n/** Hash for system variables of string type with MEMALLOC flag. */\nstatic malloc_unordered_map<std::string, st_bookmark *>\n    *malloced_string_type_sysvars_bookmark_hash;\n\n/* prototypes */\nstatic void plugin_load(MEM_ROOT *tmp_root, int *argc, char **argv);\nstatic bool plugin_load_list(MEM_ROOT *tmp_root, int *argc, char **argv,\n                             const char *list, bool load_early);\nstatic bool check_if_option_is_deprecated(int optid,\n                                          const struct my_option *opt,\n                                          char *argument);\nstatic int test_plugin_options(MEM_ROOT *, st_plugin_int *, int *, char **);\nstatic bool register_builtin(st_mysql_plugin *, st_plugin_int *,\n                             st_plugin_int **);\nstatic void unlock_variables(struct System_variables *vars);\nstatic void cleanup_variables(THD *thd, struct System_variables *vars);\nstatic void plugin_vars_free_values(sys_var *vars);\nstatic void plugin_var_memalloc_free(struct System_variables *vars);\nstatic void restore_pluginvar_names(sys_var *first);\n#define my_intern_plugin_lock(A, B) intern_plugin_lock(A, B)\n#define my_intern_plugin_lock_ci(A, B) intern_plugin_lock(A, B)\nstatic plugin_ref intern_plugin_lock(LEX *lex, plugin_ref plugin);\nstatic void intern_plugin_unlock(LEX *lex, plugin_ref plugin);\nstatic void reap_plugins(void);\n\nmalloc_unordered_map<std::string, st_bookmark *> *get_bookmark_hash(void) {\n  return bookmark_hash;\n}\n\n/**\n @warning Make sure all errors reported to the log here are\n defined in share/messages_to_error_log.txt as well as in\n share/messages_to_clients.txt.\n\n @arg where_to  a combination of @ref REPORT_TO_USER and @ref REPORT_TO_LOG\n @arg error  the code for the mysql_error()\n*/\nstatic void report_error(int where_to, uint error, ...) {\n  va_list args;\n  if (where_to & REPORT_TO_USER) {\n    va_start(args, error);\n    my_printv_error(error, ER_THD_NONCONST(current_thd, error), MYF(0), args);\n    va_end(args);\n  }\n  if (where_to & REPORT_TO_LOG) {\n    longlong ecode = 0;\n    switch (error) {\n      case ER_UDF_NO_PATHS:\n        ecode = ER_NO_PATH_FOR_SHARED_LIBRARY;\n        break;\n      case ER_CANT_OPEN_LIBRARY:\n        ecode = ER_FAILED_TO_OPEN_SHARED_LIBRARY;\n        break;\n      case ER_CANT_FIND_DL_ENTRY:\n        ecode = ER_FAILED_TO_FIND_DL_ENTRY;\n        break;\n      case ER_OUTOFMEMORY:\n        ecode = ER_SERVER_OUTOFMEMORY;\n        break;\n      case ER_UDF_EXISTS:\n        ecode = ER_UDF_ALREADY_EXISTS;\n        break;\n      case ER_PLUGIN_NO_INSTALL:\n        ecode = ER_PLUGIN_NO_INSTALL_DUP;\n        break;\n      case ER_PLUGIN_NOT_EARLY:\n        ecode = ER_PLUGIN_NOT_EARLY_DUP;\n        break;\n      default:\n        DBUG_ASSERT(false);\n        return;\n    }\n    va_start(args, error);\n    LogEvent().type(LOG_TYPE_ERROR).prio(ERROR_LEVEL).lookupv(ecode, args);\n    va_end(args);\n  }\n}\n\n/**\n   Check if the provided path is valid in the sense that it does cause\n   a relative reference outside the directory.\n\n   @note Currently, this function only check if there are any\n   characters in FN_DIRSEP in the string, but it might change in the\n   future.\n\n   @code\n   check_valid_path(\"../foo.so\") -> true\n   check_valid_path(\"foo.so\") -> false\n   @endcode\n */\nbool check_valid_path(const char *path, size_t len) {\n  size_t prefix = my_strcspn(files_charset_info, path, path + len, FN_DIRSEP,\n                             strlen(FN_DIRSEP));\n  return prefix < len;\n}\n\n/****************************************************************************\n  Plugin support code\n****************************************************************************/\n\nstatic st_plugin_dl *plugin_dl_find(const LEX_STRING *dl) {\n  DBUG_TRACE;\n  for (st_plugin_dl **it = plugin_dl_array->begin();\n       it != plugin_dl_array->end(); ++it) {\n    st_plugin_dl *tmp = *it;\n    if (tmp->ref_count &&\n        !my_strnncoll(files_charset_info, pointer_cast<uchar *>(dl->str),\n                      dl->length, pointer_cast<uchar *>(tmp->dl.str),\n                      tmp->dl.length))\n      return tmp;\n  }\n  return nullptr;\n}\n\nstatic st_plugin_dl *plugin_dl_insert_or_reuse(st_plugin_dl *plugin_dl) {\n  DBUG_TRACE;\n  st_plugin_dl *tmp;\n  for (st_plugin_dl **it = plugin_dl_array->begin();\n       it != plugin_dl_array->end(); ++it) {\n    tmp = *it;\n    if (!tmp->ref_count) {\n      memcpy(tmp, plugin_dl, sizeof(st_plugin_dl));\n      return tmp;\n    }\n  }\n  if (plugin_dl_array->push_back(plugin_dl)) return nullptr;\n  tmp = plugin_dl_array->back() = static_cast<st_plugin_dl *>(\n      memdup_root(&plugin_mem_root, plugin_dl, sizeof(st_plugin_dl)));\n  return tmp;\n}\n\nstatic inline void free_plugin_mem(st_plugin_dl *p) {\n  /*\n     The valgrind leak report is done at the end of the program execution.\n     But since the plugins are unloaded from the memory,\n     it is impossible for valgrind to correctly report the leak locations.\n     So leave the shared objects (.DLL/.so) open for the symbols definition.\n   */\n  bool preserve_shared_objects_after_unload = false;\n  DBUG_EXECUTE_IF(\"preserve_shared_objects_after_unload\",\n                  { preserve_shared_objects_after_unload = true; });\n  if (p->handle != nullptr && !preserve_shared_objects_after_unload) {\n#ifdef HAVE_PSI_SYSTEM_INTERFACE\n    PSI_SYSTEM_CALL(unload_plugin)\n    (std::string(p->dl.str, p->dl.length).c_str());\n#endif\n    dlclose(p->handle);\n  }\n  my_free(p->dl.str);\n  if (p->version != MYSQL_PLUGIN_INTERFACE_VERSION) my_free(p->plugins);\n}\n\n/**\n  Loads a dynamic plugin\n\n  Fills in a ::st_plugin_dl structure.\n  Initializes the plugin services pointer inside the plugin.\n  Does not initialize the individual plugins.\n  Must have LOCK_plugin and LOCK_system_variables locked(write).\n  On error releases LOCK_system_variables and LOCK_plugin.\n\n  @arg dl      The path to the plugin binary to load\n  @arg report  a bitmask that's passed down to report_error()\n  @arg load_early true if loading the \"early\" plugins (--early-plugin-load etc)\n\n  @return      A plugin reference.\n  @retval      NULL      failed to load the plugin\n*/\nstatic st_plugin_dl *plugin_dl_add(const LEX_STRING *dl, int report,\n                                   bool load_early) {\n  char dlpath[FN_REFLEN];\n  uint dummy_errors, i;\n  size_t plugin_dir_len, dlpathlen;\n  st_plugin_dl *tmp, plugin_dl;\n  void *sym;\n  DBUG_TRACE;\n  DBUG_PRINT(\"enter\",\n             (\"dl->str: '%s', dl->length: %d\", dl->str, (int)dl->length));\n  plugin_dir_len = strlen(opt_plugin_dir);\n  /*\n    Ensure that the dll doesn't have a path.\n    This is done to ensure that only approved libraries from the\n    plugin directory are used (to make this even remotely secure).\n  */\n  LEX_CSTRING dl_cstr = {dl->str, dl->length};\n  if (check_valid_path(dl->str, dl->length) ||\n      check_string_char_length(dl_cstr, \"\", NAME_CHAR_LEN, system_charset_info,\n                               true) ||\n      plugin_dir_len + dl->length + 1 >= FN_REFLEN) {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    report_error(report, ER_UDF_NO_PATHS);\n    return nullptr;\n  }\n  /* If this dll is already loaded just increase ref_count. */\n  if ((tmp = plugin_dl_find(dl))) {\n    tmp->ref_count++;\n    return tmp;\n  }\n  memset(&plugin_dl, 0, sizeof(plugin_dl));\n  /* Compile dll path */\n  dlpathlen = strxnmov(dlpath, sizeof(dlpath) - 1, opt_plugin_dir, \"/\", dl->str,\n                       NullS) -\n              dlpath;\n  (void)unpack_filename(dlpath, dlpath);\n  plugin_dl.ref_count = 1;\n  /* Open new dll handle */\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  if (!(plugin_dl.handle = dlopen(dlpath, RTLD_NOW))) {\n    const char *errmsg;\n    int error_number = dlopen_errno;\n    /*\n      Conforming applications should use a critical section to retrieve\n      the error pointer and buffer...\n    */\n    DLERROR_GENERATE(errmsg, error_number);\n\n    if (!strncmp(\n            dlpath, errmsg,\n            dlpathlen)) {  // if errmsg starts from dlpath, trim this prefix.\n      errmsg += dlpathlen;\n      if (*errmsg == ':') errmsg++;\n      if (*errmsg == ' ') errmsg++;\n    }\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, error_number, errmsg);\n\n    /*\n      \"The messages returned by dlerror() may reside in a static buffer\n       that is overwritten on each call to dlerror().\"\n\n      Some implementations have a static pointer instead, and the memory it\n      points to may be reported as \"still reachable\" by Valgrind.\n      Calling dlerror() once more will free the memory.\n     */\n#if !defined(_WIN32)\n    errmsg = dlerror();\n    DBUG_ASSERT(errmsg == nullptr);\n#endif\n    return nullptr;\n  }\n  /* Determine interface version */\n  if (!(sym = dlsym(plugin_dl.handle, plugin_interface_version_sym))) {\n    free_plugin_mem(&plugin_dl);\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    report_error(report, ER_CANT_FIND_DL_ENTRY, plugin_interface_version_sym);\n    return nullptr;\n  }\n  plugin_dl.version = *(int *)sym;\n  /* Versioning */\n  if (plugin_dl.version < min_plugin_interface_version ||\n      (plugin_dl.version >> 8) > (MYSQL_PLUGIN_INTERFACE_VERSION >> 8)) {\n    free_plugin_mem(&plugin_dl);\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, 0,\n                 \"plugin interface version mismatch\");\n    return nullptr;\n  }\n\n  /* link the services in */\n  for (i = 0; i < array_elements(list_of_services); i++) {\n    if ((sym = dlsym(plugin_dl.handle, list_of_services[i].name))) {\n      uint ver = (uint)(intptr) * (void **)sym;\n      if ((*(void **)sym) !=\n              list_of_services[i].service && /* already replaced */\n          (ver > list_of_services[i].version ||\n           (ver >> 8) < (list_of_services[i].version >> 8))) {\n        char buf[MYSQL_ERRMSG_SIZE];\n        snprintf(buf, sizeof(buf), \"service '%s' interface version mismatch\",\n                 list_of_services[i].name);\n        mysql_rwlock_unlock(&LOCK_system_variables_hash);\n        mysql_mutex_unlock(&LOCK_plugin);\n        report_error(report, ER_CANT_OPEN_LIBRARY, dlpath, 0, buf);\n        return nullptr;\n      }\n      *(void **)sym = list_of_services[i].service;\n    }\n  }\n\n  /* Find plugin declarations */\n  if (!(sym = dlsym(plugin_dl.handle, plugin_declarations_sym))) {\n    free_plugin_mem(&plugin_dl);\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    report_error(report, ER_CANT_FIND_DL_ENTRY, plugin_declarations_sym);\n    return nullptr;\n  }\n\n  if (plugin_dl.version != MYSQL_PLUGIN_INTERFACE_VERSION) {\n    uint sizeof_st_plugin;\n    st_mysql_plugin *old, *cur;\n    char *ptr = (char *)sym;\n\n    if ((sym = dlsym(plugin_dl.handle, sizeof_st_plugin_sym)))\n      sizeof_st_plugin = *(int *)sym;\n    else {\n      /*\n        When the following assert starts failing, we'll have to call\n        report_error(report, ER_CANT_FIND_DL_ENTRY, sizeof_st_plugin_sym);\n      */\n      DBUG_ASSERT(min_plugin_interface_version == 0);\n      sizeof_st_plugin = (int)offsetof(st_mysql_plugin, version);\n    }\n\n    /*\n      What's the purpose of this loop? If the goal is to catch a\n      missing 0 record at the end of a list, it will fail miserably\n      since the compiler is likely to optimize this away. /Matz\n     */\n    for (i = 0; ((st_mysql_plugin *)(ptr + i * sizeof_st_plugin))->info; i++)\n      /* no op */;\n\n    cur = (st_mysql_plugin *)my_malloc(key_memory_mysql_plugin,\n                                       (i + 1) * sizeof(st_mysql_plugin),\n                                       MYF(MY_ZEROFILL | MY_WME));\n    if (!cur) {\n      free_plugin_mem(&plugin_dl);\n      mysql_rwlock_unlock(&LOCK_system_variables_hash);\n      mysql_mutex_unlock(&LOCK_plugin);\n      report_error(report, ER_OUTOFMEMORY,\n                   static_cast<int>(plugin_dl.dl.length));\n      return nullptr;\n    }\n    /*\n      All st_plugin fields not initialized in the plugin explicitly, are\n      set to 0. It matches C standard behaviour for struct initializers that\n      have less values than the struct definition.\n    */\n    for (i = 0; (old = (st_mysql_plugin *)(ptr + i * sizeof_st_plugin))->info;\n         i++)\n      memcpy(cur + i, old, min<size_t>(sizeof(cur[i]), sizeof_st_plugin));\n\n    sym = cur;\n  }\n  plugin_dl.plugins = (st_mysql_plugin *)sym;\n\n  /*\n    If report is REPORT_TO_USER, we were called from\n    mysql_install_plugin. Otherwise, we are called\n    indirectly from plugin_register_dynamic_and_init_all().\n   */\n  if (report == REPORT_TO_USER) {\n    st_mysql_plugin *plugin = plugin_dl.plugins;\n    for (; plugin->info; ++plugin)\n      if (plugin->flags & PLUGIN_OPT_NO_INSTALL) {\n        mysql_rwlock_unlock(&LOCK_system_variables_hash);\n        mysql_mutex_unlock(&LOCK_plugin);\n        report_error(report, ER_PLUGIN_NO_INSTALL, plugin->name);\n        free_plugin_mem(&plugin_dl);\n        return nullptr;\n      }\n  }\n\n  if (load_early) {\n    st_mysql_plugin *plugin = plugin_dl.plugins;\n    for (; plugin->info; ++plugin)\n      if (!(plugin->flags & PLUGIN_OPT_ALLOW_EARLY)) {\n        mysql_rwlock_unlock(&LOCK_system_variables_hash);\n        mysql_mutex_unlock(&LOCK_plugin);\n        report_error(report, ER_PLUGIN_NOT_EARLY, plugin->name);\n        free_plugin_mem(&plugin_dl);\n        return nullptr;\n      }\n  }\n\n  /* Duplicate and convert dll name */\n  plugin_dl.dl.length = dl->length * files_charset_info->mbmaxlen + 1;\n  if (!(plugin_dl.dl.str = (char *)my_malloc(key_memory_mysql_plugin_dl,\n                                             plugin_dl.dl.length, MYF(0)))) {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_OUTOFMEMORY, static_cast<int>(plugin_dl.dl.length));\n    return nullptr;\n  }\n  plugin_dl.dl.length = copy_and_convert(\n      plugin_dl.dl.str, plugin_dl.dl.length, files_charset_info, dl->str,\n      dl->length, system_charset_info, &dummy_errors);\n  plugin_dl.dl.str[plugin_dl.dl.length] = 0;\n  /* Add this dll to array */\n  if (!(tmp = plugin_dl_insert_or_reuse(&plugin_dl))) {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    free_plugin_mem(&plugin_dl);\n    report_error(report, ER_OUTOFMEMORY,\n                 static_cast<int>(sizeof(st_plugin_dl)));\n    return nullptr;\n  }\n  return tmp;\n}\n\nstatic void plugin_dl_del(const LEX_STRING *dl) {\n  DBUG_TRACE;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  for (st_plugin_dl **it = plugin_dl_array->begin();\n       it != plugin_dl_array->end(); ++it) {\n    st_plugin_dl *tmp = *it;\n    if (tmp->ref_count &&\n        !my_strnncoll(files_charset_info, pointer_cast<uchar *>(dl->str),\n                      dl->length, pointer_cast<uchar *>(tmp->dl.str),\n                      tmp->dl.length)) {\n      /* Do not remove this element, unless no other plugin uses this dll. */\n      if (!--tmp->ref_count) {\n        free_plugin_mem(tmp);\n        memset(tmp, 0, sizeof(st_plugin_dl));\n      }\n      break;\n    }\n  }\n}\n\nstatic st_plugin_int *plugin_find_internal(const LEX_CSTRING &name, int type) {\n  uint i;\n  DBUG_TRACE;\n  if (!initialized) return nullptr;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (type == MYSQL_ANY_PLUGIN) {\n    for (i = 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++) {\n      const auto it = plugin_hash[i]->find(to_string(name));\n      if (it != plugin_hash[i]->end()) return it->second;\n    }\n  } else\n    return find_or_nullptr(*plugin_hash[type], to_string(name));\n  return nullptr;\n}\n\nstatic SHOW_COMP_OPTION plugin_status(const LEX_CSTRING &name, int type) {\n  SHOW_COMP_OPTION rc = SHOW_OPTION_NO;\n  st_plugin_int *plugin;\n  DBUG_TRACE;\n  mysql_mutex_lock(&LOCK_plugin);\n  if ((plugin = plugin_find_internal(name, type))) {\n    rc = SHOW_OPTION_DISABLED;\n    if (plugin->state == PLUGIN_IS_READY) rc = SHOW_OPTION_YES;\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n  return rc;\n}\n\nbool plugin_is_ready(const LEX_CSTRING &name, int type) {\n  bool rc = false;\n  if (plugin_status(name, type) == SHOW_OPTION_YES) rc = true;\n  return rc;\n}\n\nSHOW_COMP_OPTION plugin_status(const char *name, size_t len, int type) {\n  LEX_CSTRING plugin_name = {name, len};\n  return plugin_status(plugin_name, type);\n}\n\nstatic plugin_ref intern_plugin_lock(LEX *lex, plugin_ref rc) {\n  st_plugin_int *pi = plugin_ref_to_int(rc);\n  DBUG_TRACE;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (pi->state & (PLUGIN_IS_READY | PLUGIN_IS_UNINITIALIZED)) {\n    plugin_ref plugin;\n#ifdef DBUG_OFF\n    /* built-in plugins don't need ref counting */\n    if (!pi->plugin_dl) return pi;\n\n    plugin = pi;\n#else\n    /*\n      For debugging, we do an additional malloc which allows the\n      memory manager and/or valgrind to track locked references and\n      double unlocks to aid resolving reference counting problems.\n    */\n    if (!(plugin = (plugin_ref)my_malloc(key_memory_plugin_ref, sizeof(pi),\n                                         MYF(MY_WME))))\n      return nullptr;\n\n    *plugin = pi;\n#endif\n    pi->ref_count++;\n    DBUG_PRINT(\"info\", (\"thd: %p, plugin: \\\"%s\\\", ref_count: %d\", current_thd,\n                        pi->name.str, pi->ref_count));\n    if (lex) lex->plugins.push_back(plugin);\n    return plugin;\n  }\n  return nullptr;\n}\n\nplugin_ref plugin_lock(THD *thd, plugin_ref *ptr) {\n  LEX *lex = thd ? thd->lex : nullptr;\n  plugin_ref rc;\n  DBUG_TRACE;\n  mysql_mutex_lock(&LOCK_plugin);\n  rc = my_intern_plugin_lock_ci(lex, *ptr);\n  mysql_mutex_unlock(&LOCK_plugin);\n  return rc;\n}\n\nplugin_ref plugin_lock_by_name(THD *thd, const LEX_CSTRING &name, int type) {\n  LEX *lex = thd ? thd->lex : nullptr;\n  plugin_ref rc = nullptr;\n  st_plugin_int *plugin;\n  DBUG_TRACE;\n  mysql_mutex_lock(&LOCK_plugin);\n  if ((plugin = plugin_find_internal(name, type)))\n    rc = my_intern_plugin_lock_ci(lex, plugin_int_to_ref(plugin));\n  mysql_mutex_unlock(&LOCK_plugin);\n  return rc;\n}\n\nstatic st_plugin_int *plugin_insert_or_reuse(st_plugin_int *plugin) {\n  DBUG_TRACE;\n  st_plugin_int *tmp;\n  /* During server bootstrap, don't reuse free slot. In case some early plugin\n  load like key_ring fails, an user plugin could occupy that empty slot and\n  get installed before mandatory plugins like PFS. This will cause issue if\n  the plugin has dependency on PFS like creating dynamic PFS table. This issue\n  is observed during clone plugin testing. */\n  const bool reuse_free_slot = (get_server_state() != SERVER_BOOTING);\n\n  if (reuse_free_slot) {\n    for (st_plugin_int **it = plugin_array->begin(); it != plugin_array->end();\n         ++it) {\n      tmp = *it;\n      if (tmp->state == PLUGIN_IS_FREED) {\n        *tmp = std::move(*plugin);\n        return tmp;\n      }\n    }\n  }\n\n  if (plugin_array->push_back(plugin)) return nullptr;\n  tmp = plugin_array->back() =\n      new (&plugin_mem_root) st_plugin_int(std::move(*plugin));\n  return tmp;\n}\n\n/**\n  Adds a plugin to the global plugin list.\n\n  Also installs the plugin variables.\n  In case of error releases ::LOCK_system_variables_hash and ::LOCK_plugin\n  and reports the error.\n  @note Requires that a write-lock is held on ::LOCK_plugin and\n  ::LOCK_system_variables_hash\n*/\nstatic bool plugin_add(MEM_ROOT *tmp_root, LEX_CSTRING name,\n                       const LEX_STRING *dl, int *argc, char **argv, int report,\n                       bool load_early) {\n  st_plugin_int tmp;\n  st_mysql_plugin *plugin;\n  DBUG_TRACE;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  if (plugin_find_internal(name, MYSQL_ANY_PLUGIN)) {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    mysql_mutex_unlock(&LOCK_plugin);\n    report_error(report, ER_UDF_EXISTS, name.str);\n    return true;\n  }\n  if (!(tmp.plugin_dl = plugin_dl_add(dl, report, load_early))) return true;\n  /* Find plugin by name */\n  for (plugin = tmp.plugin_dl->plugins; plugin->info; plugin++) {\n    size_t name_len = strlen(plugin->name);\n    if (plugin->type >= 0 && plugin->type < MYSQL_MAX_PLUGIN_TYPE_NUM &&\n        !my_strnncoll(system_charset_info,\n                      pointer_cast<const uchar *>(name.str), name.length,\n                      pointer_cast<const uchar *>(plugin->name), name_len)) {\n      st_plugin_int *tmp_plugin_ptr;\n      if (*(int *)plugin->info <\n              min_plugin_info_interface_version[plugin->type] ||\n          ((*(int *)plugin->info) >> 8) >\n              (cur_plugin_info_interface_version[plugin->type] >> 8)) {\n        char buf[256], dl_name[FN_REFLEN];\n        strxnmov(buf, sizeof(buf) - 1, \"API version for \",\n                 plugin_type_names[plugin->type].str,\n                 \" plugin is too different\", NullS);\n        /* copy the library name so we can release the mutex */\n        strncpy(dl_name, dl->str, sizeof(dl_name) - 1);\n        dl_name[sizeof(dl_name) - 1] = 0;\n        plugin_dl_del(dl);\n        mysql_rwlock_unlock(&LOCK_system_variables_hash);\n        mysql_mutex_unlock(&LOCK_plugin);\n        report_error(report, ER_CANT_OPEN_LIBRARY, dl_name, 0, buf);\n        return true;\n      }\n      tmp.plugin = plugin;\n      tmp.name.str = plugin->name;\n      tmp.name.length = name_len;\n      tmp.ref_count = 0;\n      tmp.state = PLUGIN_IS_UNINITIALIZED;\n      tmp.load_option = PLUGIN_ON;\n      if (test_plugin_options(tmp_root, &tmp, argc, argv))\n        tmp.state = PLUGIN_IS_DISABLED;\n\n      if ((tmp_plugin_ptr = plugin_insert_or_reuse(&tmp))) {\n        plugin_array_version++;\n        if (plugin_hash[plugin->type]\n                ->emplace(to_string(tmp_plugin_ptr->name), tmp_plugin_ptr)\n                .second) {\n          init_alloc_root(key_memory_plugin_int_mem_root,\n                          &tmp_plugin_ptr->mem_root, 4096, 4096);\n          return false;\n        }\n        tmp_plugin_ptr->state = PLUGIN_IS_FREED;\n      }\n      mysql_del_sys_var_chain(tmp.system_vars);\n      restore_pluginvar_names(tmp.system_vars);\n      plugin_dl_del(dl);\n      mysql_rwlock_unlock(&LOCK_system_variables_hash);\n      mysql_mutex_unlock(&LOCK_plugin);\n      return true;\n    }\n  }\n  plugin_dl_del(dl);\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  mysql_mutex_unlock(&LOCK_plugin);\n  report_error(report, ER_CANT_FIND_DL_ENTRY, name.str);\n  return true;\n}\n\nstatic void plugin_deinitialize(st_plugin_int *plugin, bool ref_check) {\n  /*\n    we don't want to hold the LOCK_plugin mutex as it may cause\n    deinitialization to deadlock if plugins have worker threads\n    with plugin locks\n  */\n  mysql_mutex_assert_not_owner(&LOCK_plugin);\n\n  if (plugin->plugin->status_vars) {\n    remove_status_vars(plugin->plugin->status_vars);\n  }\n\n  if (plugin_type_deinitialize[plugin->plugin->type]) {\n    if ((*plugin_type_deinitialize[plugin->plugin->type])(plugin)) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_FAILED_DEINITIALIZATION, plugin->name.str,\n             plugin_type_names[plugin->plugin->type].str);\n    }\n  } else if (plugin->plugin->deinit) {\n    DBUG_PRINT(\"info\", (\"Deinitializing plugin: '%s'\", plugin->name.str));\n    if (plugin->plugin->deinit(plugin)) {\n      DBUG_PRINT(\"warning\", (\"Plugin '%s' deinit function returned error.\",\n                             plugin->name.str));\n    }\n  }\n  plugin->state = PLUGIN_IS_UNINITIALIZED;\n\n  Srv_session::check_for_stale_threads(plugin);\n  /*\n    We do the check here because NDB has a worker THD which doesn't\n    exit until NDB is shut down.\n  */\n  if (ref_check && plugin->ref_count)\n    LogErr(ERROR_LEVEL, ER_PLUGIN_HAS_NONZERO_REFCOUNT_AFTER_DEINITIALIZATION,\n           plugin->name.str, plugin->ref_count);\n}\n\n/*\n  Unload a plugin.\n  Note: During valgrind testing, the plugin's shared object (.dll/.so)\n        is not unloaded in order to keep the call stack\n        of the leaked objects.\n*/\nstatic void plugin_del(st_plugin_int *plugin) {\n  DBUG_TRACE;\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  mysql_mutex_assert_owner(&LOCK_plugin_delete);\n  /* Free allocated strings before deleting the plugin. */\n  mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n  mysql_del_sys_var_chain(plugin->system_vars);\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  restore_pluginvar_names(plugin->system_vars);\n  plugin_vars_free_values(plugin->system_vars);\n  plugin_hash[plugin->plugin->type]->erase(to_string(plugin->name));\n\n  if (plugin->plugin_dl) plugin_dl_del(&plugin->plugin_dl->dl);\n  plugin->state = PLUGIN_IS_FREED;\n  plugin_array_version++;\n  free_root(&plugin->mem_root, MYF(0));\n}\n\nstatic void reap_plugins(void) {\n  st_plugin_int *plugin, **reap, **list;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (!reap_needed) return;\n\n  reap_needed = false;\n  const size_t count = plugin_array->size();\n  reap = (st_plugin_int **)my_alloca(sizeof(plugin) * (count + 1));\n  *(reap++) = nullptr;\n\n  for (size_t idx = 0; idx < count; idx++) {\n    plugin = plugin_array->at(idx);\n    if (plugin->state == PLUGIN_IS_DELETED && !plugin->ref_count) {\n      /* change the status flag to prevent reaping by another thread */\n      plugin->state = PLUGIN_IS_DYING;\n      *(reap++) = plugin;\n    }\n  }\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  list = reap;\n  while ((plugin = *(--list))) {\n    if (!opt_initialize)\n      LogErr(INFORMATION_LEVEL, ER_PLUGIN_SHUTTING_DOWN_PLUGIN,\n             plugin->name.str);\n    plugin_deinitialize(plugin, true);\n  }\n\n  mysql_mutex_lock(&LOCK_plugin_delete);\n  mysql_mutex_lock(&LOCK_plugin);\n\n  while ((plugin = *(--reap))) plugin_del(plugin);\n\n  mysql_mutex_unlock(&LOCK_plugin_delete);\n}\n\nstatic void intern_plugin_unlock(LEX *lex, plugin_ref plugin) {\n  st_plugin_int *pi;\n  DBUG_TRACE;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n\n  if (!plugin) return;\n\n  pi = plugin_ref_to_int(plugin);\n\n#ifdef DBUG_OFF\n  if (!pi->plugin_dl) return;\n#else\n  my_free(plugin);\n#endif\n\n  DBUG_PRINT(\"info\", (\"unlocking plugin, name= %s, ref_count= %d\", pi->name.str,\n                      pi->ref_count));\n  if (lex) {\n    /*\n      Remove one instance of this plugin from the use list.\n      We are searching backwards so that plugins locked last\n      could be unlocked faster - optimizing for LIFO semantics.\n    */\n    plugin_ref *iter = lex->plugins.end() - 1;\n    bool found_it MY_ATTRIBUTE((unused)) = false;\n    for (; iter >= lex->plugins.begin() - 1; --iter) {\n      if (plugin == *iter) {\n        lex->plugins.erase(iter);\n        found_it = true;\n        break;\n      }\n    }\n    DBUG_ASSERT(found_it);\n  }\n\n  DBUG_ASSERT(pi->ref_count);\n  pi->ref_count--;\n\n  if (pi->state == PLUGIN_IS_DELETED && !pi->ref_count) reap_needed = true;\n}\n\nvoid plugin_unlock(THD *thd, plugin_ref plugin) {\n  LEX *lex = thd ? thd->lex : nullptr;\n  DBUG_TRACE;\n  if (!plugin) return;\n#ifdef DBUG_OFF\n  /* built-in plugins don't need ref counting */\n  if (!plugin_dlib(plugin)) return;\n#endif\n  mysql_mutex_lock(&LOCK_plugin);\n  intern_plugin_unlock(lex, plugin);\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n}\n\nvoid plugin_unlock_list(THD *thd, plugin_ref *list, size_t count) {\n  LEX *lex = thd ? thd->lex : nullptr;\n  DBUG_TRACE;\n  DBUG_ASSERT(list);\n\n  /*\n    In unit tests, LOCK_plugin may be uninitialized, so do not lock it.\n    Besides: there's no point in locking it, if there are no plugins to unlock.\n   */\n  if (count == 0) return;\n\n  mysql_mutex_lock(&LOCK_plugin);\n  while (count--) intern_plugin_unlock(lex, *list++);\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n}\n\nstatic int plugin_initialize(st_plugin_int *plugin) {\n  int ret = 1;\n  DBUG_TRACE;\n\n  mysql_mutex_assert_owner(&LOCK_plugin);\n  uint state = plugin->state;\n  DBUG_ASSERT(state == PLUGIN_IS_UNINITIALIZED);\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  DEBUG_SYNC(current_thd, \"in_plugin_initialize\");\n\n  if (plugin_type_initialize[plugin->plugin->type]) {\n    if ((*plugin_type_initialize[plugin->plugin->type])(plugin)) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_REGISTRATION_FAILED, plugin->name.str,\n             plugin_type_names[plugin->plugin->type].str);\n      goto err;\n    }\n\n    /* FIXME: Need better solution to transfer the callback function\n    array to memcached */\n    if (strcmp(plugin->name.str, \"InnoDB\") == 0) {\n      innodb_callback_data = ((handlerton *)plugin->data)->data;\n    }\n  } else if (plugin->plugin->init) {\n    if (strcmp(plugin->name.str, \"daemon_memcached\") == 0) {\n      plugin->data = innodb_callback_data;\n    }\n\n    if (plugin->plugin->init(plugin)) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_INIT_FAILED, plugin->name.str);\n      goto err;\n    }\n  }\n  state = PLUGIN_IS_READY;  // plugin->init() succeeded\n\n  if (plugin->plugin->status_vars) {\n    if (add_status_vars(plugin->plugin->status_vars)) goto err;\n  }\n\n  /*\n    set the plugin attribute of plugin's sys vars so they are pointing\n    to the active plugin\n  */\n  if (plugin->system_vars) {\n    sys_var_pluginvar *var = plugin->system_vars->cast_pluginvar();\n    for (;;) {\n      var->plugin = plugin;\n      if (!var->next) break;\n      var = var->next->cast_pluginvar();\n    }\n  }\n\n  ret = 0;\n\nerr:\n  mysql_mutex_lock(&LOCK_plugin);\n  plugin->state = state;\n\n  return ret;\n}\n\nstatic inline void convert_dash_to_underscore(char *str, size_t len) {\n  for (char *p = str; p <= str + len; p++)\n    if (*p == '-') *p = '_';\n}\n\n#ifdef HAVE_PSI_INTERFACE\nstatic PSI_mutex_key key_LOCK_plugin;\nstatic PSI_mutex_key key_LOCK_plugin_delete;\nstatic PSI_mutex_key key_LOCK_plugin_install;\n\n/* clang-format off */\nstatic PSI_mutex_info all_plugin_mutexes[]=\n{\n  { &key_LOCK_plugin, \"LOCK_plugin\", PSI_FLAG_SINGLETON, 0, PSI_DOCUMENT_ME},\n  { &key_LOCK_plugin_delete, \"LOCK_plugin_delete\", PSI_FLAG_SINGLETON, 0, PSI_DOCUMENT_ME},\n  { &key_LOCK_plugin_install, \"LOCK_plugin_install\", PSI_FLAG_SINGLETON, 0, PSI_DOCUMENT_ME}\n};\n/* clang-format on */\n\n/* clang-format off */\nstatic PSI_memory_info all_plugin_memory[]=\n{\n#ifndef DBUG_OFF\n  { &key_memory_plugin_ref, \"plugin_ref\", PSI_FLAG_ONLY_GLOBAL_STAT, 0, PSI_DOCUMENT_ME},\n#endif\n  { &key_memory_plugin_mem_root, \"plugin_mem_root\", PSI_FLAG_ONLY_GLOBAL_STAT, 0, PSI_DOCUMENT_ME},\n  { &key_memory_plugin_init_tmp, \"plugin_init_tmp\", 0, 0, PSI_DOCUMENT_ME},\n  { &key_memory_plugin_int_mem_root, \"plugin_int_mem_root\", 0, 0, PSI_DOCUMENT_ME},\n  { &key_memory_mysql_plugin_dl, \"mysql_plugin_dl\", PSI_FLAG_ONLY_GLOBAL_STAT, 0, PSI_DOCUMENT_ME},\n  { &key_memory_mysql_plugin, \"mysql_plugin\", PSI_FLAG_ONLY_GLOBAL_STAT, 0, PSI_DOCUMENT_ME},\n  { &key_memory_plugin_bookmark, \"plugin_bookmark\", PSI_FLAG_ONLY_GLOBAL_STAT, 0, PSI_DOCUMENT_ME}\n};\n/* clang-format on */\n\nstatic void init_plugin_psi_keys(void) {\n  const char *category = \"sql\";\n  int count;\n\n  count = array_elements(all_plugin_mutexes);\n  mysql_mutex_register(category, all_plugin_mutexes, count);\n\n  count = array_elements(all_plugin_memory);\n  mysql_memory_register(category, all_plugin_memory, count);\n}\n#endif /* HAVE_PSI_INTERFACE */\n\n/**\n  Initialize the internals of the plugin system. Allocate required\n  resources, initialize mutex, etc.\n\n  @return Operation outcome, false means no errors\n */\nstatic bool plugin_init_internals() {\n#ifdef HAVE_PSI_INTERFACE\n  init_plugin_psi_keys();\n#endif\n\n  init_alloc_root(key_memory_plugin_mem_root, &plugin_mem_root, 4096, 4096);\n\n  bookmark_hash = new malloc_unordered_map<std::string, st_bookmark *>(\n      key_memory_plugin_bookmark);\n\n  malloced_string_type_sysvars_bookmark_hash =\n      new malloc_unordered_map<std::string, st_bookmark *>(\n          key_memory_plugin_bookmark);\n\n  mysql_mutex_init(key_LOCK_plugin, &LOCK_plugin, MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_plugin_delete, &LOCK_plugin_delete,\n                   MY_MUTEX_INIT_FAST);\n  mysql_mutex_init(key_LOCK_plugin_install, &LOCK_plugin_install,\n                   MY_MUTEX_INIT_FAST);\n\n  plugin_dl_array = new (std::nothrow)\n      Prealloced_array<st_plugin_dl *, 16>(key_memory_mysql_plugin_dl);\n  plugin_array = new (std::nothrow)\n      Prealloced_array<st_plugin_int *, 16>(key_memory_mysql_plugin);\n  if (plugin_dl_array == nullptr || plugin_array == nullptr) goto err;\n\n  for (uint i = 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++) {\n    plugin_hash[i] = new collation_unordered_map<std::string, st_plugin_int *>(\n        system_charset_info, key_memory_plugin_mem_root);\n  }\n  return false;\n\nerr:\n  return true;\n}\n\n/**\n  Initialize the plugins. Reap those that fail to initialize.\n\n  @return Operation outcome, false means no errors\n */\nstatic bool plugin_init_initialize_and_reap() {\n  struct st_plugin_int *plugin_ptr;\n  struct st_plugin_int **reap;\n\n  /* Now we initialize all plugins that are not already initialized */\n  mysql_mutex_lock(&LOCK_plugin);\n  reap =\n      (st_plugin_int **)my_alloca((plugin_array->size() + 1) * sizeof(void *));\n  *(reap++) = nullptr;\n\n  for (st_plugin_int **it = plugin_array->begin(); it != plugin_array->end();\n       ++it) {\n    plugin_ptr = *it;\n    if (plugin_ptr->state == PLUGIN_IS_UNINITIALIZED) {\n      if (plugin_initialize(plugin_ptr)) {\n        plugin_ptr->state = PLUGIN_IS_DYING;\n        *(reap++) = plugin_ptr;\n      }\n    }\n  }\n\n  /* Check if any plugins have to be reaped */\n  bool reaped_mandatory_plugin = false;\n  while ((plugin_ptr = *(--reap))) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    if (plugin_ptr->load_option == PLUGIN_FORCE ||\n        plugin_ptr->load_option == PLUGIN_FORCE_PLUS_PERMANENT)\n      reaped_mandatory_plugin = true;\n    plugin_deinitialize(plugin_ptr, true);\n    mysql_mutex_lock(&LOCK_plugin_delete);\n    mysql_mutex_lock(&LOCK_plugin);\n    plugin_del(plugin_ptr);\n    mysql_mutex_unlock(&LOCK_plugin_delete);\n  }\n\n  mysql_mutex_unlock(&LOCK_plugin);\n  if (reaped_mandatory_plugin) return true;\n\n  return false;\n}\n\n/**\n   Register and initialize early plugins.\n\n   @param argc  Command line argument counter\n   @param argv  Command line arguments\n   @param flags Flags to control whether dynamic loading\n                and plugin initialization should be skipped\n\n   @return Operation outcome, false if no errors\n*/\nbool plugin_register_early_plugins(int *argc, char **argv, int flags) {\n  bool retval = false;\n  DBUG_TRACE;\n\n  /* Don't allow initializing twice */\n  DBUG_ASSERT(!initialized);\n\n  /* Make sure the internals are initialized */\n  if ((retval = plugin_init_internals())) return retval;\n\n  /* Allocate the temporary mem root, will be freed before returning */\n  MEM_ROOT tmp_root;\n  init_alloc_root(key_memory_plugin_init_tmp, &tmp_root, 4096, 4096);\n\n  I_List_iterator<i_string> iter(opt_early_plugin_load_list);\n  i_string *item;\n  while (nullptr != (item = iter++))\n    plugin_load_list(&tmp_root, argc, argv, item->ptr, true);\n\n  /* Temporary mem root not needed anymore, can free it here */\n  free_root(&tmp_root, MYF(0));\n\n  if (!(flags & PLUGIN_INIT_SKIP_INITIALIZATION))\n    retval = plugin_init_initialize_and_reap();\n\n  return retval;\n}\n\n/**\n  Register the builtin plugins. Some of the plugins (MyISAM, CSV and InnoDB)\n  are also initialized.\n\n  @param argc number of arguments, propagated to the plugin\n  @param argv actual arguments, propagated to the plugin\n  @return Operation outcome, false means no errors\n */\nbool plugin_register_builtin_and_init_core_se(int *argc, char **argv) {\n  bool mandatory = true;\n  DBUG_TRACE;\n\n  /* Don't allow initializing twice */\n  DBUG_ASSERT(!initialized);\n\n  /* Allocate the temporary mem root, will be freed before returning */\n  MEM_ROOT tmp_root;\n  init_alloc_root(key_memory_plugin_init_tmp, &tmp_root, 4096, 4096);\n\n  mysql_mutex_lock(&LOCK_plugin);\n  initialized = true;\n\n  /* First we register the builtin mandatory and optional plugins */\n  for (struct st_mysql_plugin **builtins = mysql_mandatory_plugins;\n       *builtins || mandatory; builtins++) {\n    /* Switch to optional plugins when done with the mandatory ones */\n    if (!*builtins) {\n      builtins = mysql_optional_plugins;\n      mandatory = false;\n      if (!*builtins) break;\n    }\n    for (struct st_mysql_plugin *plugin = *builtins; plugin->info; plugin++) {\n      struct st_plugin_int tmp;\n      tmp.plugin = plugin;\n      tmp.name.str = plugin->name;\n      tmp.name.length = strlen(plugin->name);\n      tmp.state = 0;\n      tmp.load_option = mandatory ? PLUGIN_FORCE : PLUGIN_ON;\n\n      /*\n        If the performance schema is compiled in,\n        treat the storage engine plugin as 'mandatory',\n        to suppress any plugin-level options such as '--performance-schema'.\n        This is specific to the performance schema, and is done on purpose:\n        the server-level option '--performance-schema' controls the overall\n        performance schema initialization, which consists of much more that\n        the underlying storage engine initialization.\n        See mysqld.cc, set_vars.cc.\n        Suppressing ways to interfere directly with the storage engine alone\n        prevents awkward situations where:\n        - the user wants the performance schema functionality, by using\n          '--enable-performance-schema' (the server option),\n        - yet disable explicitly a component needed for the functionality\n          to work, by using '--skip-performance-schema' (the plugin)\n      */\n      if (!my_strcasecmp(&my_charset_latin1, plugin->name,\n                         \"PERFORMANCE_SCHEMA\")) {\n        tmp.load_option = PLUGIN_FORCE;\n      }\n\n      free_root(&tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n      if (test_plugin_options(&tmp_root, &tmp, argc, argv))\n        tmp.state = PLUGIN_IS_DISABLED;\n      else\n        tmp.state = PLUGIN_IS_UNINITIALIZED;\n\n      struct st_plugin_int *plugin_ptr;  // Pointer to registered plugin\n      if (register_builtin(plugin, &tmp, &plugin_ptr)) goto err_unlock;\n\n      /*\n        Only initialize MyISAM, InnoDB and CSV at this stage.\n        Note that when the --help option is supplied, InnoDB is not\n        initialized because the plugin table will not be read anyway,\n        as indicated by the flag set when the plugin_init() function\n        is called.\n      */\n      bool is_myisam =\n          !my_strcasecmp(&my_charset_latin1, plugin->name, \"MyISAM\");\n      bool is_innodb =\n          !my_strcasecmp(&my_charset_latin1, plugin->name, \"InnoDB\");\n      if (!is_myisam && (!is_innodb || is_help_or_validate_option()) &&\n          my_strcasecmp(&my_charset_latin1, plugin->name, \"CSV\"))\n        continue;\n\n      if (plugin_ptr->state != PLUGIN_IS_UNINITIALIZED ||\n          plugin_initialize(plugin_ptr))\n        goto err_unlock;\n\n      /*\n        Initialize the global default storage engine so that it may\n        not be null in any child thread.\n      */\n      if (is_myisam) {\n        DBUG_ASSERT(!global_system_variables.table_plugin);\n        DBUG_ASSERT(!global_system_variables.temp_table_plugin);\n        global_system_variables.table_plugin =\n            my_intern_plugin_lock(nullptr, plugin_int_to_ref(plugin_ptr));\n        global_system_variables.temp_table_plugin =\n            my_intern_plugin_lock(nullptr, plugin_int_to_ref(plugin_ptr));\n        DBUG_ASSERT(plugin_ptr->ref_count == 2);\n      }\n    }\n  }\n\n  /* Should now be set to MyISAM storage engine */\n  DBUG_ASSERT(global_system_variables.table_plugin);\n  DBUG_ASSERT(global_system_variables.temp_table_plugin);\n\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  free_root(&tmp_root, MYF(0));\n  return false;\n\nerr_unlock:\n  mysql_mutex_unlock(&LOCK_plugin);\n  free_root(&tmp_root, MYF(0));\n  return true;\n}\n\nbool is_builtin_and_core_se_initialized() { return initialized; }\n\nnamespace dd {\nnamespace upgrade {\n\nconstexpr const char *delayed_plugins[] = {\"audit_log\", \"mysql_firewall\"};\n\n/**\n  Initialize delayed plugins.\n\n  This function is used to initialize plugins that depend on changes in\n  the environment if there has been upgrade of mysql tables used by\n  the plugins.\n\n  @note This function will initialize all plugins that are in state\n        PLUGIN_IS_UNINITIALIZED. Plugins that are not in the submitted\n        list of plugin names will either be in state PLUGIN_IS_READY\n        at this point, or they should have been reaped already.\n\n  @return Operation outcome, false if no errors\n*/\nbool plugin_initialize_delayed_after_upgrade() {\n  /* Make sure the internals are initialized and builtins registered */\n  if (!initialized) return true;\n\n  /*\n    Iterate over named plugins and change state from\n    PLUGIN_IS_WAITING_FOR_UPGRADE to PLUGIN_IS_UNINITIALIZED.\n  */\n  mysql_mutex_lock(&LOCK_plugin);\n  for (auto name : delayed_plugins) {\n    const LEX_CSTRING plugin_name = to_lex_cstring(name);\n    st_plugin_int *plugin_ptr =\n        plugin_find_internal(plugin_name, MYSQL_ANY_PLUGIN);\n    if (plugin_ptr != nullptr &&\n        plugin_ptr->state == PLUGIN_IS_WAITING_FOR_UPGRADE) {\n      plugin_ptr->state = PLUGIN_IS_UNINITIALIZED;\n    }\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  /*\n    Then, initialize all plugins that are in state PLUGIN_UNINITIALIZED,\n    and reap those that fail to initialize. Plugins that failed to initialize\n    the last time we tried will have their state set to PLUGIN_IS_DYING, and\n    be deleted, so the plugins being initialized below should be only those\n    that are in the submitted list of plugin names.\n  */\n  Auto_THD fake_session;\n  Disable_autocommit_guard autocommit_guard(fake_session.thd);\n  dd::cache::Dictionary_client::Auto_releaser releaser(\n      fake_session.thd->dd_client());\n  if (plugin_init_initialize_and_reap())\n    return ::end_transaction(fake_session.thd, true);\n\n  return ::end_transaction(fake_session.thd, false);\n}\n\n/**\n  Reset state of delayed plugins to indicate that they wait for upgrade to\n  complete. This means they will not be initialized yet.\n*/\nvoid delay_initialization_of_dependent_plugins() {\n  mysql_mutex_lock(&LOCK_plugin);\n  for (auto name : delayed_plugins) {\n    const LEX_CSTRING plugin_name = to_lex_cstring(name);\n    st_plugin_int *plugin_ptr =\n        plugin_find_internal(plugin_name, MYSQL_ANY_PLUGIN);\n    if (plugin_ptr != nullptr && plugin_ptr->state == PLUGIN_IS_UNINITIALIZED) {\n      plugin_ptr->state = PLUGIN_IS_WAITING_FOR_UPGRADE;\n    }\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n}\n\n}  // namespace upgrade\n}  // namespace dd\n\n/**\n  Register and initialize the dynamic plugins. Also initialize\n  the remaining builtin plugins that are not initialized\n  already.\n\n  @param argc  Command line argument counter\n  @param argv  Command line arguments\n  @param flags Flags to control whether dynamic loading\n               and plugin initialization should be skipped\n\n  @return Operation outcome, false if no errors\n*/\nbool plugin_register_dynamic_and_init_all(int *argc, char **argv, int flags) {\n  DBUG_TRACE;\n\n  /* Make sure the internals are initialized and builtins registered */\n  if (!initialized) return true;\n\n  /* Register all dynamic plugins */\n  if (!(flags & PLUGIN_INIT_SKIP_DYNAMIC_LOADING)) {\n    /* Allocate the temporary mem root, will be freed before returning */\n    MEM_ROOT tmp_root;\n    init_alloc_root(key_memory_plugin_init_tmp, &tmp_root, 4096, 4096);\n\n    I_List_iterator<i_string> iter(opt_plugin_load_list);\n    i_string *item;\n    while (nullptr != (item = iter++))\n      plugin_load_list(&tmp_root, argc, argv, item->ptr, false);\n\n    if (!(flags & PLUGIN_INIT_SKIP_PLUGIN_TABLE))\n      plugin_load(&tmp_root, argc, argv);\n\n    /* Temporary mem root not needed anymore, can free it here */\n    free_root(&tmp_root, MYF(0));\n  } else if (!opt_plugin_load_list.is_empty()) {\n    /* Table is always empty at initialize */\n    DBUG_ASSERT(opt_initialize);\n    /* Tell the user the plugin-load[-add] is ignored if not empty */\n    LogErr(WARNING_LEVEL, ER_PLUGIN_LOAD_OPTIONS_IGNORED);\n  }\n\n  /*\n    Delay initialization of plugins that depend on the environment.\n  */\n  if ((flags & PLUGIN_INIT_DELAY_UNTIL_AFTER_UPGRADE)) {\n    dd::upgrade::delay_initialization_of_dependent_plugins();\n  }\n\n  /*\n    Initialize plugins that are in state 'PLUGIN_IS_UNINITIALIZED'.\n  */\n  Auto_THD fake_session;\n  Disable_autocommit_guard autocommit_guard(fake_session.thd);\n  dd::cache::Dictionary_client::Auto_releaser releaser(\n      fake_session.thd->dd_client());\n  if (!(flags & PLUGIN_INIT_SKIP_INITIALIZATION))\n    if (plugin_init_initialize_and_reap()) {\n      return ::end_transaction(fake_session.thd, true);\n    }\n\n  return ::end_transaction(fake_session.thd, false);\n}\n\nstatic bool register_builtin(st_mysql_plugin *plugin, st_plugin_int *tmp,\n                             st_plugin_int **ptr) {\n  DBUG_TRACE;\n  tmp->ref_count = 0;\n  tmp->plugin_dl = nullptr;\n\n  if (plugin_array->push_back(tmp)) return true;\n\n  *ptr = plugin_array->back() =\n      new (&plugin_mem_root) st_plugin_int(std::move(*tmp));\n\n  plugin_hash[plugin->type]->emplace(to_string((*ptr)->name), *ptr);\n\n  return false;\n}\n\n/**\n  Reads the plugins from mysql.plugin and loads them\n\n  Called only by plugin_register_dynamic_and_init_all()\n  a.k.a. the bootstrap sequence.\n\n  @arg tmp_root  memory root to use for plugin_add()\n  @arg argc      number of command line arguments to process\n  @arg argv      array of command line argument to read values from\n  @retval true   failure\n  @retval false  success\n*/\nstatic void plugin_load(MEM_ROOT *tmp_root, int *argc, char **argv) {\n  THD thd;\n  TABLE *table;\n  int error;\n  THD *new_thd = &thd;\n  bool result;\n  DBUG_TRACE;\n\n  TABLE_LIST tables(\"mysql\", \"plugin\", TL_READ);\n  new_thd->thread_stack = (char *)&tables;\n  new_thd->store_globals();\n  LEX_CSTRING db_lex_cstr = {STRING_WITH_LEN(\"mysql\")};\n  new_thd->set_db(db_lex_cstr);\n  thd.get_protocol_classic()->wipe_net();\n\n  result = open_trans_system_tables_for_read(new_thd, &tables);\n\n  if (result) {\n    DBUG_PRINT(\"error\", (\"Can't open plugin table\"));\n    LogErr(ERROR_LEVEL, ER_PLUGIN_CANT_OPEN_PLUGIN_TABLE);\n    return;\n  }\n  table = tables.table;\n  unique_ptr_destroy_only<RowIterator> iterator =\n      init_table_iterator(new_thd, table, nullptr, false,\n                          /*ignore_not_found_rows=*/false);\n  if (iterator == nullptr) {\n    close_trans_system_tables(new_thd);\n    return;\n  }\n  table->use_all_columns();\n  /*\n    there're no other threads running yet, so we don't need a mutex.\n    but plugin_add() before is designed to work in multi-threaded\n    environment, and it uses mysql_mutex_assert_owner(), so we lock\n    the mutex here to satisfy the assert\n  */\n  while (!(error = iterator->Read())) {\n    DBUG_PRINT(\"info\", (\"init plugin record\"));\n    String str_name, str_dl;\n    get_field(tmp_root, table->field[0], &str_name);\n    get_field(tmp_root, table->field[1], &str_dl);\n\n    LEX_CSTRING name = str_name.lex_cstring();\n    LEX_STRING dl = str_dl.lex_string();\n\n    /*\n      The whole locking sequence is not strictly speaking needed since this\n      is a function that's executed only during server bootstrap, but we do\n      it properly for uniformity of the environment for plugin_add.\n      Note that it must be done for each iteration since, unlike INSTALL PLUGIN\n      the bootstrap process just reports the error and goes on.\n      So to ensure the right sequence of lock and unlock we need to take and\n      release both the wlock and the mutex.\n    */\n    mysql_mutex_lock(&LOCK_plugin);\n    mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n    if (plugin_add(tmp_root, name, &dl, argc, argv, REPORT_TO_LOG, false)) {\n      LogErr(WARNING_LEVEL, ER_PLUGIN_CANT_LOAD, str_name.c_ptr(),\n             str_dl.c_ptr());\n    } else {\n      mysql_rwlock_unlock(&LOCK_system_variables_hash);\n      mysql_mutex_unlock(&LOCK_plugin);\n    }\n    free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n  }\n  if (error > 0) {\n    char errbuf[MYSQL_ERRMSG_SIZE];\n    LogErr(ERROR_LEVEL, ER_GET_ERRNO_FROM_STORAGE_ENGINE, my_errno(),\n           my_strerror(errbuf, MYSQL_ERRMSG_SIZE, my_errno()));\n  }\n  iterator.reset();\n  table->m_needs_reopen = true;  // Force close to free memory\n\n  close_trans_system_tables(new_thd);\n}\n\n/**\n  Load a list of plugins\n\n  Called by plugin_register_early_plugins() and\n  plugin_register_dynamic_and_init_all(), a.k.a. the bootstrap sequence.\n\n  @arg tmp_root  memory root to use for plugin_add()\n  @arg argc      number of command line arguments to process\n  @arg argv      array of command line argument to read values from\n  @arg list      list of plugins to load. Ends with a NULL pointer\n  @arg load_early true if loading plugins via --early-plugin-load or migration\n  @retval true   failure\n  @retval false  success\n*/\nstatic bool plugin_load_list(MEM_ROOT *tmp_root, int *argc, char **argv,\n                             const char *list, bool load_early) {\n  char buffer[FN_REFLEN];\n  LEX_STRING name = {buffer, 0}, dl = {nullptr, 0}, *str = &name;\n  st_plugin_dl *plugin_dl;\n  st_mysql_plugin *plugin;\n  char *p = buffer;\n  DBUG_TRACE;\n  while (list) {\n    if (p == buffer + sizeof(buffer) - 1) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_LOAD_PARAMETER_TOO_LONG);\n      return true;\n    }\n\n    switch ((*(p++) = *(list++))) {\n      case '\\0':\n        list = nullptr; /* terminate the loop */\n                        /* fall through */\n      case ';':\n#ifndef _WIN32\n      case ':': /* can't use this as delimiter as it may be drive letter */\n#endif\n        str->str[str->length] = '\\0';\n        if (str == &name)  // load all plugins in named module\n        {\n          if (!name.length) {\n            p--; /* reset pointer */\n            continue;\n          }\n\n          dl = name;\n          /*\n            The whole locking sequence is not strictly speaking needed since\n            this is a function that's executed only during server bootstrap, but\n            we do it properly for uniformity of the environment for plugin_add.\n          */\n          mysql_mutex_lock(&LOCK_plugin);\n          mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n          if ((plugin_dl = plugin_dl_add(&dl, REPORT_TO_LOG, load_early))) {\n            for (plugin = plugin_dl->plugins; plugin->info; plugin++) {\n              name.str = const_cast<char *>(plugin->name);\n              name.length = strlen(name.str);\n\n              free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n              if (plugin_add(tmp_root, to_lex_cstring(name), &dl, argc, argv,\n                             REPORT_TO_LOG, load_early))\n                goto error;\n            }\n            plugin_dl_del(&dl);  // reduce ref count\n          } else\n            goto error;\n        } else {\n          free_root(tmp_root, MYF(MY_MARK_BLOCKS_FREE));\n          /*\n            The whole locking sequence is not strictly speaking needed since\n            this is a function that's executed only during server bootstrap, but\n            we do it properly for uniformity of the environment for plugin_add.\n          */\n          mysql_mutex_lock(&LOCK_plugin);\n          mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n          if (plugin_add(tmp_root, to_lex_cstring(name), &dl, argc, argv,\n                         REPORT_TO_LOG, load_early))\n            goto error;\n        }\n        mysql_rwlock_unlock(&LOCK_system_variables_hash);\n        mysql_mutex_unlock(&LOCK_plugin);\n        name.length = dl.length = 0;\n        dl.str = nullptr;\n        name.str = p = buffer;\n        str = &name;\n        continue;\n      case '=':\n      case '#':\n        if (str == &name) {\n          name.str[name.length] = '\\0';\n          str = &dl;\n          str->str = p;\n          continue;\n        }\n        // Fall through.\n      default:\n        str->length++;\n        continue;\n    }\n  }\n  return false;\nerror:\n  LogErr(ERROR_LEVEL, ER_PLUGIN_CANT_LOAD, name.str, dl.str);\n  return true;\n}\n\n/*\n  Shutdown memcached plugin before binlog shuts down\n*/\nvoid memcached_shutdown(void) {\n  if (initialized) {\n    for (st_plugin_int **it = plugin_array->begin(); it != plugin_array->end();\n         ++it) {\n      st_plugin_int *plugin = *it;\n\n      if (plugin->state == PLUGIN_IS_READY &&\n          strcmp(plugin->name.str, \"daemon_memcached\") == 0) {\n        plugin_deinitialize(plugin, true);\n\n        mysql_mutex_lock(&LOCK_plugin_delete);\n        mysql_mutex_lock(&LOCK_plugin);\n        plugin->state = PLUGIN_IS_DYING;\n        plugin_del(plugin);\n        mysql_mutex_unlock(&LOCK_plugin);\n        mysql_mutex_unlock(&LOCK_plugin_delete);\n      }\n    }\n  }\n}\n\n/*\n  Deinitialize and unload all the loaded plugins.\n  Note: During valgrind testing, the shared objects (.dll/.so)\n        are not unloaded in order to keep the call stack\n        of the leaked objects.\n*/\nvoid plugin_shutdown(void) {\n  size_t i;\n  st_plugin_int **plugins, *plugin;\n  st_plugin_dl **dl;\n  bool skip_binlog = true;\n  std::list<st_plugin_int *> keyring_plugins;\n\n  DBUG_TRACE;\n\n  if (initialized) {\n    size_t count = plugin_array->size();\n    mysql_mutex_lock(&LOCK_plugin);\n\n    reap_needed = true;\n\n    /*\n      We want to shut down plugins in a reasonable order, this will\n      become important when we have plugins which depend upon each other.\n      Circular references cannot be reaped so they are forced afterwards.\n      TODO: Have an additional step here to notify all active plugins that\n      shutdown is requested to allow plugins to deinitialize in parallel.\n    */\n    while (reap_needed && (count = plugin_array->size())) {\n      reap_plugins();\n      for (i = 0; i < count; i++) {\n        plugin = plugin_array->at(i);\n\n        if (plugin->state == PLUGIN_IS_READY) {\n          if (strcmp(plugin->name.str, \"binlog\") == 0 && skip_binlog) {\n            skip_binlog = false;\n          } else if (plugin->plugin->type != MYSQL_KEYRING_PLUGIN) {\n            plugin->state = PLUGIN_IS_DELETED;\n            reap_needed = true;\n          } else if (plugin->plugin->type == MYSQL_KEYRING_PLUGIN)\n            keyring_plugins.push_back(plugin);\n        }\n      }\n      if (!reap_needed) {\n        /*\n          release any plugin references held.\n        */\n        unlock_variables(&global_system_variables);\n        unlock_variables(&max_system_variables);\n      }\n    }\n\n    plugins = (st_plugin_int **)my_alloca(sizeof(void *) * (count + 1));\n\n    /*\n      If we have any plugins which did not die cleanly, we force shutdown\n    */\n    for (i = 0; i < count; i++) {\n      plugins[i] = plugin_array->at(i);\n      /* change the state to ensure no reaping races */\n      if (plugins[i]->state == PLUGIN_IS_DELETED)\n        plugins[i]->state = PLUGIN_IS_DYING;\n    }\n    mysql_mutex_unlock(&LOCK_plugin);\n\n    for (std::list<st_plugin_int *>::iterator keyring_iter =\n             keyring_plugins.begin();\n         keyring_iter != keyring_plugins.end(); ++keyring_iter) {\n      if (!((*keyring_iter)->state & PLUGIN_IS_UNINITIALIZED))\n        plugin_deinitialize(*keyring_iter, false);\n    }\n\n    /*\n      We loop through all plugins and call deinit() if they have one.\n    */\n    for (i = 0; i < count; i++)\n      if (!(plugins[i]->state &\n            (PLUGIN_IS_UNINITIALIZED | PLUGIN_IS_FREED | PLUGIN_IS_DISABLED))) {\n        LogErr(WARNING_LEVEL, ER_PLUGIN_FORCING_SHUTDOWN, plugins[i]->name.str);\n        /*\n          We are forcing deinit on plugins so we don't want to do a ref_count\n          check until we have processed all the plugins.\n        */\n        plugin_deinitialize(plugins[i], false);\n      }\n\n    /*\n      It's perfectly safe not to lock LOCK_plugin, LOCK_plugin_delete, as\n      there're no concurrent threads anymore. But some functions called from\n      here use mysql_mutex_assert_owner(), so we lock the mutex to satisfy it\n    */\n    mysql_mutex_lock(&LOCK_plugin_delete);\n    mysql_mutex_lock(&LOCK_plugin);\n\n    /*\n      We defer checking ref_counts until after all plugins are deinitialized\n      as some may have worker threads holding on to plugin references.\n    */\n    for (i = 0; i < count; i++) {\n      if (plugins[i]->ref_count)\n        LogErr(ERROR_LEVEL, ER_PLUGIN_HAS_NONZERO_REFCOUNT_AFTER_SHUTDOWN,\n               plugins[i]->name.str, plugins[i]->ref_count);\n      if (plugins[i]->state & PLUGIN_IS_UNINITIALIZED) plugin_del(plugins[i]);\n    }\n\n    /*\n      Now we can deallocate all memory.\n    */\n\n    cleanup_variables(nullptr, &global_system_variables);\n    cleanup_variables(nullptr, &max_system_variables);\n    mysql_mutex_unlock(&LOCK_plugin);\n    mysql_mutex_unlock(&LOCK_plugin_delete);\n\n    initialized = false;\n    mysql_mutex_destroy(&LOCK_plugin);\n    mysql_mutex_destroy(&LOCK_plugin_delete);\n    mysql_mutex_destroy(&LOCK_plugin_install);\n  }\n\n  /* Dispose of the memory */\n\n  for (i = 0; i < MYSQL_MAX_PLUGIN_TYPE_NUM; i++) {\n    delete plugin_hash[i];\n    plugin_hash[i] = nullptr;\n  }\n  delete plugin_array;\n  plugin_array = nullptr;\n\n  if (plugin_dl_array != nullptr) {\n    size_t count = plugin_dl_array->size();\n    dl = (st_plugin_dl **)my_alloca(sizeof(void *) * count);\n    for (i = 0; i < count; i++) dl[i] = plugin_dl_array->at(i);\n    for (i = 0; i < plugin_dl_array->size(); i++) free_plugin_mem(dl[i]);\n    delete plugin_dl_array;\n    plugin_dl_array = nullptr;\n  }\n\n  delete bookmark_hash;\n  bookmark_hash = nullptr;\n  delete malloced_string_type_sysvars_bookmark_hash;\n  malloced_string_type_sysvars_bookmark_hash = nullptr;\n  free_root(&plugin_mem_root, MYF(0));\n\n  global_variables_dynamic_size = 0;\n}\n\n// Helper function to do rollback or commit, depending on error.\nbool end_transaction(THD *thd, bool error) {\n  if (error) {\n    // Rollback the statement before we can rollback the real transaction.\n    trans_rollback_stmt(thd);\n    trans_rollback(thd);\n  } else if (trans_commit_stmt(thd) || trans_commit(thd)) {\n    error = true;\n    trans_rollback(thd);\n  }\n\n  // Close tables regardless of error.\n  close_thread_tables(thd);\n  return error;\n}\n\n/**\n  Initialize one plugin. This function is used to early load one single\n  plugin. This function is used by key migration tool.\n\n   @param[in]   argc  Command line argument counter\n   @param[in]   argv  Command line arguments\n   @param[in]   plugin library file name\n\n   @return Operation status\n     @retval 0 OK\n     @retval 1 ERROR\n*/\nbool plugin_early_load_one(int *argc, char **argv, const char *plugin) {\n  bool retval = false;\n  DBUG_TRACE;\n\n  /* Make sure the internals are initialized */\n  if (!initialized) {\n    if ((retval = plugin_init_internals()))\n      return retval;\n    else\n      initialized = true;\n  }\n  /* Allocate the temporary mem root, will be freed before returning */\n  MEM_ROOT tmp_root;\n  init_alloc_root(PSI_NOT_INSTRUMENTED, &tmp_root, 4096, 4096);\n\n  plugin_load_list(&tmp_root, argc, argv, plugin, true);\n\n  /* Temporary mem root not needed anymore, can free it here */\n  free_root(&tmp_root, MYF(0));\n\n  retval = plugin_init_initialize_and_reap();\n\n  return retval;\n}\n\nstatic bool mysql_install_plugin(THD *thd, LEX_CSTRING name,\n                                 const LEX_STRING *dl) {\n  TABLE *table;\n  bool error = true;\n  int argc = orig_argc;\n  char **argv = orig_argv;\n  st_plugin_int *tmp = nullptr;\n  bool store_infoschema_metadata = false;\n  dd::Schema_MDL_locker mdl_handler(thd);\n  Persisted_variables_cache *pv = Persisted_variables_cache::get_instance();\n\n  DBUG_TRACE;\n\n  Disable_autocommit_guard autocommit_guard(thd);\n  dd::cache::Dictionary_client::Auto_releaser releaser(thd->dd_client());\n\n  TABLE_LIST tables(\"mysql\", \"plugin\", TL_WRITE);\n\n  if (!opt_noacl &&\n      check_table_access(thd, INSERT_ACL, &tables, false, 1, false))\n    return true;\n\n  if (acquire_shared_global_read_lock(thd, thd->variables.lock_wait_timeout) ||\n      acquire_shared_backup_lock(thd, thd->variables.lock_wait_timeout))\n    return true;\n\n  /* need to open before acquiring LOCK_plugin or it will deadlock */\n  if (!(table = open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT)))\n    return true;\n\n  /*\n    Pre-acquire audit plugins for events that may potentially occur\n    during [UN]INSTALL PLUGIN.\n\n    When audit event is triggered, audit subsystem acquires interested\n    plugins by walking through plugin list. Evidently plugin list\n    iterator protects plugin list by acquiring LOCK_plugin, see\n    plugin_foreach_with_mask().\n\n    On the other hand [UN]INSTALL PLUGIN is acquiring LOCK_plugin\n    rather for a long time.\n\n    When audit event is triggered during [UN]INSTALL PLUGIN, plugin\n    list iterator acquires the same lock (within the same thread)\n    second time.\n\n    This hack should be removed when LOCK_plugin is fixed so it\n    protects only what it supposed to protect.\n    */\n  mysql_audit_acquire_plugins(thd, MYSQL_AUDIT_GENERAL_CLASS,\n                              MYSQL_AUDIT_GENERAL_ALL);\n\n  mysql_mutex_lock(&LOCK_plugin_install);\n  mysql_mutex_lock(&LOCK_plugin);\n  DEBUG_SYNC(thd, \"acquired_LOCK_plugin\");\n  mysql_rwlock_wrlock(&LOCK_system_variables_hash);\n\n  {\n    MEM_ROOT alloc{PSI_NOT_INSTRUMENTED, 512};\n    my_getopt_use_args_separator = true;\n    if (my_load_defaults(MYSQL_CONFIG_NAME, load_default_groups, &argc, &argv,\n                         &alloc, nullptr)) {\n      mysql_rwlock_unlock(&LOCK_system_variables_hash);\n      mysql_mutex_unlock(&LOCK_plugin);\n      report_error(REPORT_TO_USER, ER_PLUGIN_IS_NOT_LOADED, name.str);\n      goto err;\n    }\n    my_getopt_use_args_separator = false;\n    /*\n     Append static variables present in mysqld-auto.cnf file for the\n     newly installed plugin to process those options which are specific\n     to this plugin.\n    */\n    if (pv && pv->append_read_only_variables(&argc, &argv, true)) {\n      mysql_rwlock_unlock(&LOCK_system_variables_hash);\n      mysql_mutex_unlock(&LOCK_plugin);\n      report_error(REPORT_TO_USER, ER_PLUGIN_IS_NOT_LOADED, name.str);\n      goto err;\n    }\n    error =\n        plugin_add(thd->mem_root, name, dl, &argc, argv, REPORT_TO_USER, false);\n  }\n\n  /* LOCK_plugin and LOCK_system_variables_hash already unlocked by plugin_add()\n     if error */\n  if (error) goto err;\n\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  if (!(tmp = plugin_find_internal(name, MYSQL_ANY_PLUGIN))) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    goto err;\n  }\n\n  error = false;\n  if (tmp->state == PLUGIN_IS_DISABLED) {\n    push_warning_printf(thd, Sql_condition::SL_WARNING, ER_CANT_INITIALIZE_UDF,\n                        ER_THD(thd, ER_CANT_INITIALIZE_UDF), name.str,\n                        \"Plugin is disabled\");\n  }\n\n  // Check if we need to store I_S plugin metadata in DD.\n  store_infoschema_metadata =\n      (tmp->plugin->type == MYSQL_INFORMATION_SCHEMA_PLUGIN &&\n       tmp->state != PLUGIN_IS_DISABLED);\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  // Acquire MDL lock if we are storing metadata in DD.\n  if (store_infoschema_metadata) {\n    if (!mdl_handler.ensure_locked(INFORMATION_SCHEMA_NAME.str)) {\n      MDL_request mdl_request;\n      MDL_REQUEST_INIT(&mdl_request, MDL_key::TABLE,\n                       INFORMATION_SCHEMA_NAME.str, tmp->name.str,\n                       MDL_EXCLUSIVE, MDL_TRANSACTION);\n      if (thd->mdl_context.acquire_lock(&mdl_request,\n                                        thd->variables.lock_wait_timeout))\n        error = true;\n    } else\n      error = true;\n\n    if (error) {\n      report_error(REPORT_TO_USER, ER_DA_PLUGIN_INSTALL_ERROR, name.str,\n                   \"error acquiring metadata lock\");\n    }\n  }\n\n  /*\n    We do not replicate the INSTALL PLUGIN statement. Disable binlogging\n    of the insert into the plugin table, so that it is not replicated in\n    row based mode.\n  */\n  if (!error) {\n    Disable_binlog_guard binlog_guard(thd);\n    table->use_all_columns();\n    restore_record(table, s->default_values);\n    table->field[0]->store(name.str, name.length, system_charset_info);\n    table->field[1]->store(dl->str, dl->length, files_charset_info);\n    error = table->file->ha_write_row(table->record[0]);\n    if (error) {\n      const char msg[] = \"got '%s' writing to mysql.plugin\";\n      char buf[MYSQL_ERRMSG_SIZE + sizeof(msg) - 2];\n      char errbuf[MYSQL_ERRMSG_SIZE];\n      my_strerror(errbuf, sizeof(errbuf), error);\n      snprintf(buf, sizeof(buf), msg, errbuf);\n      report_error(REPORT_TO_USER, ER_DA_PLUGIN_INSTALL_ERROR, name.str, buf);\n    } else {\n      mysql_mutex_lock(&LOCK_plugin);\n\n      if (tmp->state != PLUGIN_IS_DISABLED && plugin_initialize(tmp)) {\n        my_error(ER_CANT_INITIALIZE_UDF, MYF(0), name.str,\n                 \"Plugin initialization function failed.\");\n        error = true;\n      }\n\n      /*\n        Store plugin I_S table metadata into DD tables. The\n        tables are closed before the function returns.\n       */\n      error = error || thd->transaction_rollback_request;\n      if (!error && store_infoschema_metadata) {\n        error = dd::info_schema::store_dynamic_plugin_I_S_metadata(thd, tmp);\n        if (error) {\n          report_error(REPORT_TO_USER, ER_DA_PLUGIN_INSTALL_ERROR, name.str,\n                       \"error storing metadata\");\n        }\n      }\n      mysql_mutex_unlock(&LOCK_plugin);\n\n      if (!error && store_infoschema_metadata) {\n        Uncommitted_tables_guard uncommitted_tables(thd);\n        error = update_referencing_views_metadata(\n            thd, INFORMATION_SCHEMA_NAME.str, tmp->name.str, false,\n            &uncommitted_tables);\n        if (error) {\n          report_error(REPORT_TO_USER, ER_DA_PLUGIN_INSTALL_ERROR, name.str,\n                       \"error updating metadata\");\n        }\n      }\n    }\n  }\n\n  if (error) {\n    mysql_mutex_lock(&LOCK_plugin);\n    tmp->state = PLUGIN_IS_DELETED;\n    reap_needed = true;\n    reap_plugins();\n    mysql_mutex_unlock(&LOCK_plugin);\n  }\n\nerr:\n  mysql_mutex_unlock(&LOCK_plugin_install);\n  return end_transaction(thd, error);\n}\n\nstatic bool mysql_uninstall_plugin(THD *thd, LEX_CSTRING name) {\n  TABLE *table;\n  st_plugin_int *plugin;\n  bool error = true;\n  int rc = 0;\n  bool remove_IS_metadata_from_dd = false;\n  dd::Schema_MDL_locker mdl_handler(thd);\n  dd::String_type orig_plugin_name;\n\n  DBUG_TRACE;\n\n  TABLE_LIST tables(\"mysql\", 5, \"plugin\", 6, \"plugin\", TL_WRITE);\n\n  if (!opt_noacl &&\n      check_table_access(thd, DELETE_ACL, &tables, false, 1, false)) {\n    DBUG_ASSERT(thd->is_error());\n    return true;\n  }\n\n  if (acquire_shared_global_read_lock(thd, thd->variables.lock_wait_timeout) ||\n      acquire_shared_backup_lock(thd, thd->variables.lock_wait_timeout))\n    return true;\n\n  Disable_autocommit_guard autocommit_guard(thd);\n  dd::cache::Dictionary_client::Auto_releaser releaser(thd->dd_client());\n  /* need to open before acquiring LOCK_plugin or it will deadlock */\n  if (!(table =\n            open_ltable(thd, &tables, TL_WRITE, MYSQL_LOCK_IGNORE_TIMEOUT))) {\n    DBUG_ASSERT(thd->is_error());\n    return true;\n  }\n\n  mysql_mutex_lock(&LOCK_plugin_install);\n  if (!table->key_info) {\n    my_error(ER_MISSING_KEY, MYF(0), table->s->db.str,\n             table->s->table_name.str);\n    goto err;\n  }\n\n  /*\n    Pre-acquire audit plugins for events that may potentially occur\n    during [UN]INSTALL PLUGIN.\n\n    When audit event is triggered, audit subsystem acquires interested\n    plugins by walking through plugin list. Evidently plugin list\n    iterator protects plugin list by acquiring LOCK_plugin, see\n    plugin_foreach_with_mask().\n\n    On the other hand [UN]INSTALL PLUGIN is acquiring LOCK_plugin\n    rather for a long time.\n\n    When audit event is triggered during [UN]INSTALL PLUGIN, plugin\n    list iterator acquires the same lock (within the same thread)\n    second time.\n\n    This hack should be removed when LOCK_plugin is fixed so it\n    protects only what it supposed to protect.\n  */\n  mysql_audit_acquire_plugins(thd, MYSQL_AUDIT_GENERAL_CLASS,\n                              MYSQL_AUDIT_GENERAL_ALL);\n\n  mysql_mutex_lock(&LOCK_plugin);\n  if (!(plugin = plugin_find_internal(name, MYSQL_ANY_PLUGIN)) ||\n      plugin->state & (PLUGIN_IS_UNINITIALIZED | PLUGIN_IS_DYING)) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    my_error(ER_SP_DOES_NOT_EXIST, MYF(0), \"PLUGIN\", name.str);\n    goto err;\n  }\n  if (!plugin->plugin_dl) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    my_error(ER_PLUGIN_DELETE_BUILTIN, MYF(0));\n    goto err;\n  }\n  if (plugin->load_option == PLUGIN_FORCE_PLUS_PERMANENT) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    my_error(ER_PLUGIN_IS_PERMANENT, MYF(0), name.str);\n    goto err;\n  }\n  /*\n    Error message for ER_PLUGIN_IS_PERMANENT is not suitable for\n    plugins marked as not dynamically uninstallable, so we have a\n    separate one instead of changing the old one.\n   */\n  if (plugin->plugin->flags & PLUGIN_OPT_NO_UNINSTALL) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    my_error(ER_PLUGIN_NO_UNINSTALL, MYF(0), plugin->plugin->name);\n    goto err;\n  }\n\n  /*\n    FIXME: plugin rpl_semi_sync_master, check_uninstall() function.\n  */\n\n  /* Block Uninstallation of semi_sync plugins (Master/Slave)\n     when they are busy\n   */\n  char buff[20];\n  size_t buff_length;\n  /*\n    Master: If there are active semi sync slaves for this Master,\n    then that means it is busy and rpl_semi_sync_master plugin\n    cannot be uninstalled. To check whether the master\n    has any semi sync slaves or not, check Rpl_semi_sync_master_cliens\n    status variable value, if it is not 0, that means it is busy.\n  */\n  if (!strcmp(name.str, \"rpl_semi_sync_master\") &&\n      get_status_var(thd, plugin->plugin->status_vars,\n                     \"Rpl_semi_sync_master_clients\", buff, OPT_DEFAULT,\n                     &buff_length) &&\n      strcmp(buff, \"0\")) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    my_error(ER_PLUGIN_CANNOT_BE_UNINSTALLED, MYF(0), name.str,\n             \"Stop any active semisynchronous slaves of this master first.\");\n    goto err;\n  }\n\n  /*\n    FIXME: plugin rpl_semi_sync_slave, check_uninstall() function.\n  */\n\n  /* Slave: If there is semi sync enabled IO thread active on this Slave,\n    then that means plugin is busy and rpl_semi_sync_slave plugin\n    cannot be uninstalled. To check whether semi sync\n    IO thread is active or not, check Rpl_semi_sync_slave_status status\n    variable value, if it is ON, that means it is busy.\n  */\n  if (!strcmp(name.str, \"rpl_semi_sync_slave\") &&\n      get_status_var(thd, plugin->plugin->status_vars,\n                     \"Rpl_semi_sync_slave_status\", buff, OPT_DEFAULT,\n                     &buff_length) &&\n      !strcmp(buff, \"ON\")) {\n    mysql_mutex_unlock(&LOCK_plugin);\n    my_error(\n        ER_PLUGIN_CANNOT_BE_UNINSTALLED, MYF(0), name.str,\n        \"Stop any active semisynchronous I/O threads on this slave first.\");\n    goto err;\n  }\n\n  if ((plugin->plugin->check_uninstall) && (plugin->state == PLUGIN_IS_READY)) {\n    int check;\n    /*\n      Prevent other threads to uninstall concurrently this plugin.\n    */\n    plugin->state = PLUGIN_IS_DYING;\n    mysql_mutex_unlock(&LOCK_plugin);\n\n    DEBUG_SYNC(current_thd, \"in_plugin_check_uninstall\");\n\n    /*\n      Check uninstall may perform complex operations,\n      including acquiring MDL locks, which in turn may need LOCK_plugin.\n    */\n    DBUG_PRINT(\"info\", (\"check uninstall plugin: '%s'\", plugin->name.str));\n    check = plugin->plugin->check_uninstall(plugin);\n\n    mysql_mutex_lock(&LOCK_plugin);\n    DBUG_ASSERT(plugin->state == PLUGIN_IS_DYING);\n\n    if (check) {\n      DBUG_PRINT(\"warning\",\n                 (\"Plugin '%s' blocked uninstall.\", plugin->name.str));\n      plugin->state = PLUGIN_IS_READY;\n      mysql_mutex_unlock(&LOCK_plugin);\n      my_error(ER_PLUGIN_CANNOT_BE_UNINSTALLED, MYF(0), name.str,\n               \"Plugin is still in use.\");\n      goto err;\n    }\n  }\n\n  if (plugin->ref_count && plugin->plugin->type == MYSQL_KEYRING_PLUGIN) {\n    mysql_mutex_unlock(&LOCK_plugin);\n\n    my_error(ER_PLUGIN_CANNOT_BE_UNINSTALLED, MYF(0), name.str,\n             \"Plugin is busy, it cannot be uninstalled. \");\n    goto err;\n  }\n\n  plugin->state = PLUGIN_IS_DELETED;\n  if (plugin->ref_count)\n    push_warning(thd, Sql_condition::SL_WARNING, WARN_PLUGIN_BUSY,\n                 ER_THD(thd, WARN_PLUGIN_BUSY));\n  else\n    reap_needed = true;\n\n  // Check if we need to remove I_S plugin metadata from DD.\n  remove_IS_metadata_from_dd =\n      (plugin->plugin->type == MYSQL_INFORMATION_SCHEMA_PLUGIN &&\n       plugin->load_option != PLUGIN_OFF);\n\n  orig_plugin_name = dd::String_type(plugin->name.str, plugin->name.length);\n  reap_plugins();\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  uchar user_key[MAX_KEY_LENGTH];\n  table->use_all_columns();\n  table->field[0]->store(name.str, name.length, system_charset_info);\n  key_copy(user_key, table->record[0], table->key_info,\n           table->key_info->key_length);\n\n  if ((rc = table->file->ha_index_read_idx_map(\n           table->record[0], 0, user_key, HA_WHOLE_KEY, HA_READ_KEY_EXACT)) ==\n      0) {\n    /*\n      We do not replicate the UNINSTALL PLUGIN statement. Disable binlogging\n      of the delete from the plugin table, so that it is not replicated in\n      row based mode.\n    */\n    DBUG_ASSERT(!thd->is_error());\n    Disable_binlog_guard binlog_guard(thd);\n    rc = table->file->ha_delete_row(table->record[0]);\n    if (rc) {\n      DBUG_ASSERT(thd->is_error());\n    } else\n      error = false;\n  } else if (rc != HA_ERR_KEY_NOT_FOUND && rc != HA_ERR_END_OF_FILE) {\n    DBUG_ASSERT(thd->is_error());\n  } else\n    error = false;\n\n  if (error) {\n    const char msg[] = \"got '%s' deleting from mysql.plugin\";\n    char buf[MYSQL_ERRMSG_SIZE + sizeof(msg) - 2];\n    char errbuf[MYSQL_ERRMSG_SIZE];\n    my_strerror(errbuf, sizeof(errbuf), error);\n    snprintf(buf, sizeof(buf), msg, errbuf);\n    report_error(REPORT_TO_USER, ER_PLUGIN_UNINSTALL_ERROR, name.str, buf);\n  }\n\n  if (!error && !thd->transaction_rollback_request &&\n      remove_IS_metadata_from_dd) {\n    error = dd::info_schema::remove_I_S_view_metadata(\n        thd,\n        dd::String_type(orig_plugin_name.c_str(), orig_plugin_name.length()));\n    DBUG_ASSERT(!error || thd->is_error());\n\n    if (!error) {\n      Uncommitted_tables_guard uncommitted_tables(thd);\n      error = update_referencing_views_metadata(\n          thd, INFORMATION_SCHEMA_NAME.str, orig_plugin_name.c_str(), false,\n          &uncommitted_tables);\n    }\n\n    if (error) {\n      report_error(REPORT_TO_USER, ER_PLUGIN_UNINSTALL_ERROR, name.str,\n                   \"error updating metadata\");\n    }\n  }\n\nerr:\n  mysql_mutex_unlock(&LOCK_plugin_install);\n  return end_transaction(thd, error || thd->transaction_rollback_request);\n}\n\nbool plugin_foreach_with_mask(THD *thd, plugin_foreach_func **funcs, int type,\n                              uint state_mask, void *arg) {\n  size_t idx, total;\n  st_plugin_int *plugin, **plugins;\n  int version = plugin_array_version;\n  DBUG_TRACE;\n\n  if (!initialized) return false;\n\n  state_mask = ~state_mask;  // do it only once\n\n  mysql_mutex_lock(&LOCK_plugin);\n  total = type == MYSQL_ANY_PLUGIN ? plugin_array->size()\n                                   : plugin_hash[type]->size();\n  /*\n    Do the alloca out here in case we do have a working alloca:\n        leaving the nested stack frame invalidates alloca allocation.\n  */\n  plugins = (st_plugin_int **)my_alloca(total * sizeof(plugin));\n  if (type == MYSQL_ANY_PLUGIN) {\n    for (idx = 0; idx < total; idx++) {\n      plugin = plugin_array->at(idx);\n      plugins[idx] = !(plugin->state & state_mask) ? plugin : nullptr;\n    }\n  } else {\n    collation_unordered_map<std::string, st_plugin_int *> *hash =\n        plugin_hash[type];\n    idx = 0;\n    for (const auto &key_and_value : *hash) {\n      plugin = key_and_value.second;\n      plugins[idx++] = !(plugin->state & state_mask) ? plugin : nullptr;\n    }\n  }\n  mysql_mutex_unlock(&LOCK_plugin);\n\n  size_t binlog_index = 0;\n  bool found_binlog = false;\n  /* Identify binary log SE which we need to invoke first. */\n  if (type == MYSQL_STORAGE_ENGINE_PLUGIN) {\n    for (idx = 0; idx < total; idx++) {\n      /* Note index of binlog */\n      plugin = plugins[idx];\n      if (plugin && (0 == std::strcmp(plugin->name.str, \"binlog\"))) {\n        binlog_index = idx;\n        found_binlog = true;\n        break;\n      }\n    }\n  }\n\n  for (; *funcs != nullptr; ++funcs) {\n    /* Call binlog engine function first. This is required as GTID is generated\n    by binlog to be used by othe SE. */\n    if (found_binlog) {\n      DBUG_ASSERT(type == MYSQL_STORAGE_ENGINE_PLUGIN);\n      plugin = plugins[binlog_index];\n      if (plugin && (*funcs)(thd, plugin_int_to_ref(plugin), arg)) goto err;\n      plugins[binlog_index] = nullptr;\n    }\n    for (idx = 0; idx < total; idx++) {\n      if (unlikely(version != plugin_array_version)) {\n        mysql_mutex_lock(&LOCK_plugin);\n        for (size_t i = idx; i < total; i++)\n          if (plugins[i] && plugins[i]->state & state_mask)\n            plugins[i] = nullptr;\n        mysql_mutex_unlock(&LOCK_plugin);\n      }\n      plugin = plugins[idx];\n      /* It will stop iterating on first engine error when \"func\" returns true\n       */\n      if (plugin && (*funcs)(thd, plugin_int_to_ref(plugin), arg)) goto err;\n    }\n  }\n\n  return false;\nerr:\n  return true;\n}\n\nbool plugin_foreach_with_mask(THD *thd, plugin_foreach_func *func, int type,\n                              uint state_mask, void *arg) {\n  plugin_foreach_func *funcs[] = {func, nullptr};\n\n  return plugin_foreach_with_mask(thd, funcs, type, state_mask, arg);\n}\n\n/****************************************************************************\n  System Variables support\n****************************************************************************/\n/*\n  This function is not thread safe as the pointer returned at the end of\n  the function is outside mutex.\n*/\n\nvoid lock_plugin_mutex() { mysql_mutex_lock(&LOCK_plugin); }\n\nvoid unlock_plugin_mutex() { mysql_mutex_unlock(&LOCK_plugin); }\n\nsys_var *find_sys_var_ex(THD *thd, const char *str, size_t length,\n                         bool throw_error, bool locked) {\n  sys_var *var;\n  sys_var_pluginvar *pi = nullptr;\n  plugin_ref plugin;\n  DBUG_TRACE;\n\n  if (!locked) mysql_mutex_lock(&LOCK_plugin);\n  mysql_rwlock_rdlock(&LOCK_system_variables_hash);\n  if ((var = intern_find_sys_var(str, length)) &&\n      (pi = var->cast_pluginvar()) && pi->is_plugin) {\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n    LEX *lex = thd ? thd->lex : nullptr;\n    if (!(plugin = my_intern_plugin_lock(lex, plugin_int_to_ref(pi->plugin))))\n      var = nullptr; /* failed to lock it, it must be uninstalling */\n    else if (!(plugin_state(plugin) & PLUGIN_IS_READY)) {\n      /* initialization not completed */\n      var = nullptr;\n      intern_plugin_unlock(lex, plugin);\n    }\n  } else\n    mysql_rwlock_unlock(&LOCK_system_variables_hash);\n  if (!locked) mysql_mutex_unlock(&LOCK_plugin);\n\n  if (!throw_error && !var) my_error(ER_UNKNOWN_SYSTEM_VARIABLE, MYF(0), str);\n  return var;\n}\n\nsys_var *find_sys_var(THD *thd, const char *str, size_t length) {\n  return find_sys_var_ex(thd, str, length, false, false);\n}\n\n/*\n  returns a bookmark for thd-local variables, creating if neccessary.\n  returns null for non thd-local variables.\n  Requires that a write lock is obtained on LOCK_system_variables_hash\n*/\nstatic st_bookmark *register_var(const char *plugin, const char *name,\n                                 int flags) {\n  size_t length = strlen(plugin) + strlen(name) + 3, size = 0, offset, new_size;\n  st_bookmark *result;\n  char *varname, *p;\n\n  if (!(flags & PLUGIN_VAR_THDLOCAL)) return nullptr;\n\n  switch (flags & PLUGIN_VAR_TYPEMASK) {\n    case PLUGIN_VAR_BOOL:\n      size = sizeof(bool);\n      break;\n    case PLUGIN_VAR_INT:\n      size = sizeof(int);\n      break;\n    case PLUGIN_VAR_LONG:\n    case PLUGIN_VAR_ENUM:\n      size = sizeof(long);\n      break;\n    case PLUGIN_VAR_LONGLONG:\n    case PLUGIN_VAR_SET:\n      size = sizeof(ulonglong);\n      break;\n    case PLUGIN_VAR_STR:\n      size = sizeof(char *);\n      break;\n    case PLUGIN_VAR_DOUBLE:\n      size = sizeof(double);\n      break;\n    default:\n      DBUG_ASSERT(0);\n      return nullptr;\n  };\n\n  varname = ((char *)my_alloca(length));\n  strxmov(varname + 1, plugin, \"_\", name, NullS);\n  for (p = varname + 1; *p; p++)\n    if (*p == '-') *p = '_';\n\n  if (!(result = find_bookmark(nullptr, varname + 1, flags))) {\n    result =\n        (st_bookmark *)plugin_mem_root.Alloc(sizeof(st_bookmark) + length - 1);\n    varname[0] = flags & PLUGIN_VAR_TYPEMASK;\n    memcpy(result->key, varname, length);\n    result->name_len = length - 2;\n    result->offset = -1;\n\n    DBUG_ASSERT(size && !(size & (size - 1))); /* must be power of 2 */\n\n    offset = global_system_variables.dynamic_variables_size;\n    offset = (offset + size - 1) & ~(size - 1);\n    result->offset = (int)offset;\n\n    new_size = (offset + size + 63) & ~63;\n\n    if (new_size > global_variables_dynamic_size) {\n      global_system_variables.dynamic_variables_ptr = (char *)my_realloc(\n          key_memory_global_system_variables,\n          global_system_variables.dynamic_variables_ptr, new_size,\n          MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n      max_system_variables.dynamic_variables_ptr = (char *)my_realloc(\n          key_memory_global_system_variables,\n          max_system_variables.dynamic_variables_ptr, new_size,\n          MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n      /*\n        Clear the new variable value space. This is required for string\n        variables. If their value is non-NULL, it must point to a valid\n        string.\n      */\n      memset(global_system_variables.dynamic_variables_ptr +\n                 global_variables_dynamic_size,\n             0, new_size - global_variables_dynamic_size);\n      memset(max_system_variables.dynamic_variables_ptr +\n                 global_variables_dynamic_size,\n             0, new_size - global_variables_dynamic_size);\n      global_variables_dynamic_size = new_size;\n    }\n\n    global_system_variables.dynamic_variables_head = offset;\n    max_system_variables.dynamic_variables_head = offset;\n    global_system_variables.dynamic_variables_size = offset + size;\n    max_system_variables.dynamic_variables_size = offset + size;\n    global_system_variables.dynamic_variables_version++;\n    max_system_variables.dynamic_variables_version++;\n\n    result->version = global_system_variables.dynamic_variables_version;\n\n    /* this should succeed because we have already checked if a dup exists */\n    std::string key(result->key, result->name_len + 1);\n    bookmark_hash->emplace(key, result);\n\n    /*\n      Hashing vars of string type with MEMALLOC flag.\n    */\n    if (((flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR) &&\n        (flags & PLUGIN_VAR_MEMALLOC) &&\n        !malloced_string_type_sysvars_bookmark_hash->emplace(key, result)\n             .second) {\n      fprintf(stderr,\n              \"failed to add placeholder to\"\n              \" hash of malloced string type sysvars\");\n      DBUG_ASSERT(0);\n    }\n  }\n  return result;\n}\n\nstatic void restore_pluginvar_names(sys_var *first) {\n  for (sys_var *var = first; var; var = var->next) {\n    sys_var_pluginvar *pv = var->cast_pluginvar();\n    pv->plugin_var->name = pv->orig_pluginvar_name;\n  }\n}\n\n/**\n  Allocate memory and copy dynamic variables from global system variables\n  to per-thread system variables copy.\n\n  @param thd              thread context\n  @param global_lock      If true LOCK_global_system_variables should be\n                          acquired while copying variables from global\n                          variables copy.\n*/\nvoid alloc_and_copy_thd_dynamic_variables(THD *thd, bool global_lock) {\n  mysql_rwlock_rdlock(&LOCK_system_variables_hash);\n\n  if (global_lock) mysql_mutex_lock(&LOCK_global_system_variables);\n\n  mysql_mutex_assert_owner(&LOCK_global_system_variables);\n\n  /*\n    MAINTAINER:\n    The following assert is wrong on purpose, useful to debug\n    when thd dynamic variables are expanded:\n    DBUG_ASSERT(thd->variables.dynamic_variables_ptr == NULL);\n  */\n\n  thd->variables.dynamic_variables_ptr = (char *)my_realloc(\n      key_memory_THD_variables, thd->variables.dynamic_variables_ptr,\n      global_variables_dynamic_size, MYF(MY_WME | MY_FAE | MY_ALLOW_ZERO_PTR));\n\n  /*\n    Debug hook which allows tests to check that this code is not\n    called for InnoDB after connection was created.\n  */\n  DBUG_EXECUTE_IF(\"verify_innodb_thdvars\", DBUG_ASSERT(0););\n\n  memcpy(thd->variables.dynamic_variables_ptr +\n             thd->variables.dynamic_variables_size,\n         global_system_variables.dynamic_variables_ptr +\n             thd->variables.dynamic_variables_size,\n         global_system_variables.dynamic_variables_size -\n             thd->variables.dynamic_variables_size);\n\n  /*\n    Iterate through newly copied vars of string type with MEMALLOC\n    flag and strdup value.\n  */\n  for (const auto &key_and_value :\n       *malloced_string_type_sysvars_bookmark_hash) {\n    sys_var_pluginvar *pi;\n    sys_var *var;\n    int varoff;\n    char **thdvar, **sysvar;\n    st_bookmark *v = key_and_value.second;\n\n    if (v->version <= thd->variables.dynamic_variables_version ||\n        !(var = intern_find_sys_var(v->key + 1, v->name_len)) ||\n        !(pi = var->cast_pluginvar()) ||\n        v->key[0] != (pi->plugin_var->flags & PLUGIN_VAR_TYPEMASK))\n      continue;\n\n    varoff = *(int *)(pi->plugin_var + 1);\n    thdvar = (char **)(thd->variables.dynamic_variables_ptr + varoff);\n    sysvar = (char **)(global_system_variables.dynamic_variables_ptr + varoff);\n    *thdvar = nullptr;\n    plugin_var_memalloc_session_update(thd, nullptr, thdvar, *sysvar);\n  }\n\n  if (global_lock) mysql_mutex_unlock(&LOCK_global_system_variables);\n\n  thd->variables.dynamic_variables_version =\n      global_system_variables.dynamic_variables_version;\n  thd->variables.dynamic_variables_head =\n      global_system_variables.dynamic_variables_head;\n  thd->variables.dynamic_variables_size =\n      global_system_variables.dynamic_variables_size;\n\n  mysql_rwlock_unlock(&LOCK_system_variables_hash);\n}\n\n/**\n  For correctness and simplicity's sake, a pointer to a function\n  must be compatible with pointed-to type, that is, the return and\n  parameters types must be the same. Thus, a callback function is\n  defined for each scalar type. The functions are assigned in\n  construct_options to their respective types.\n*/\n\nstatic bool *mysql_sys_var_bool(THD *thd, int offset) {\n  return (bool *)intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic int *mysql_sys_var_int(THD *thd, int offset) {\n  return (int *)intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic unsigned int *mysql_sys_var_uint(THD *thd, int offset) {\n  return (unsigned int *)intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic unsigned long *mysql_sys_var_ulong(THD *thd, int offset) {\n  return (unsigned long *)intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic unsigned long long *mysql_sys_var_ulonglong(THD *thd, int offset) {\n  return (unsigned long long *)intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic char **mysql_sys_var_str(THD *thd, int offset) {\n  return (char **)intern_sys_var_ptr(thd, offset, true);\n}\n\nstatic double *mysql_sys_var_double(THD *thd, int offset) {\n  return (double *)intern_sys_var_ptr(thd, offset, true);\n}\n\nvoid plugin_thdvar_init(THD *thd, bool enable_plugins) {\n  plugin_ref old_table_plugin = thd->variables.table_plugin;\n  plugin_ref old_temp_table_plugin = thd->variables.temp_table_plugin;\n  DBUG_TRACE;\n\n  thd->variables.table_plugin = nullptr;\n  thd->variables.temp_table_plugin = nullptr;\n  cleanup_variables(thd, &thd->variables);\n\n  mysql_mutex_lock(&LOCK_global_system_variables);\n  thd->variables = global_system_variables;\n  thd->variables.table_plugin = nullptr;\n  thd->variables.temp_table_plugin = nullptr;\n\n  thd->variables.dynamic_variables_version = 0;\n  thd->variables.dynamic_variables_size = 0;\n  thd->variables.dynamic_variables_ptr = nullptr;\n\n  if (enable_plugins) {\n    mysql_mutex_lock(&LOCK_plugin);\n    thd->variables.table_plugin =\n        my_intern_plugin_lock(nullptr, global_system_variables.table_plugin);\n    intern_plugin_unlock(nullptr, old_table_plugin);\n    thd->variables.temp_table_plugin = my_intern_plugin_lock(\n        nullptr, global_system_variables.temp_table_plugin);\n    intern_plugin_unlock(nullptr, old_temp_table_plugin);\n    mysql_mutex_unlock(&LOCK_plugin);\n  }\n  mysql_mutex_unlock(&LOCK_global_system_variables);\n\n  /* Initialize all Sys_var_charptr variables here. */\n\n  // @@session.session_track_system_variables\n  thd->session_sysvar_res_mgr.init(&thd->variables.track_sysvars_ptr);\n}\n\n/*\n  Unlocks all system variables which hold a reference\n*/\nstatic void unlock_variables(struct System_variables *vars) {\n  intern_plugin_unlock(nullptr, vars->table_plugin);\n  intern_plugin_unlock(nullptr, vars->temp_table_plugin);\n  vars->table_plugin = nullptr;\n  vars->temp_table_plugin = nullptr;\n}\n\n/*\n  Frees memory used by system variables\n\n  Unlike plugin_vars_free_values() it frees all variables of all plugins,\n  it's used on shutdown.\n*/\nstatic void cleanup_variables(THD *thd, struct System_variables *vars) {\n  if (thd) {\n    /* Block the Performance Schema from accessing THD::variables. */\n    mysql_mutex_lock(&thd->LOCK_thd_data);\n\n    plugin_var_memalloc_free(&thd->variables);\n    /* Remove references to session_sysvar_res_mgr memory before freeing it. */\n    thd->variables.track_sysvars_ptr = nullptr;\n    thd->session_sysvar_res_mgr.deinit();\n  }\n  DBUG_ASSERT(vars->table_plugin == nullptr);\n  DBUG_ASSERT(vars->temp_table_plugin == nullptr);\n\n  my_free(vars->dynamic_variables_ptr);\n  vars->dynamic_variables_ptr = nullptr;\n  vars->dynamic_variables_size = 0;\n  vars->dynamic_variables_version = 0;\n\n  if (thd) mysql_mutex_unlock(&thd->LOCK_thd_data);\n}\n\nvoid plugin_thdvar_cleanup(THD *thd, bool enable_plugins) {\n  DBUG_TRACE;\n\n  if (enable_plugins) {\n    MUTEX_LOCK(plugin_lock, &LOCK_plugin);\n    unlock_variables(&thd->variables);\n    size_t idx;\n    if ((idx = thd->lex->plugins.size())) {\n      plugin_ref *list = thd->lex->plugins.end() - 1;\n      DBUG_PRINT(\"info\", (\"unlocking %u plugins\", static_cast<uint>(idx)));\n      while (list >= thd->lex->plugins.begin())\n        intern_plugin_unlock(thd->lex, *list--);\n    }\n\n    reap_plugins();\n    thd->lex->plugins.clear();\n  }\n  cleanup_variables(thd, &thd->variables);\n}\n\n/**\n  @brief Free values of thread variables of a plugin.\n\n  This must be called before a plugin is deleted. Otherwise its\n  variables are no longer accessible and the value space is lost. Note\n  that only string values with PLUGIN_VAR_MEMALLOC are allocated and\n  must be freed.\n\n  @param[in]        vars        Chain of system variables of a plugin\n*/\n\nstatic void plugin_vars_free_values(sys_var *vars) {\n  DBUG_TRACE;\n\n  for (sys_var *var = vars; var; var = var->next) {\n    sys_var_pluginvar *piv = var->cast_pluginvar();\n    if (piv &&\n        ((piv->plugin_var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR) &&\n        (piv->plugin_var->flags & PLUGIN_VAR_MEMALLOC)) {\n      /* Free the string from global_system_variables. */\n      char **valptr = (char **)piv->real_value_ptr(nullptr, OPT_GLOBAL);\n      DBUG_PRINT(\"plugin\",\n                 (\"freeing value for: '%s'  addr: %p\", var->name.str, valptr));\n      my_free(*valptr);\n      *valptr = nullptr;\n    }\n  }\n}\n\n/**\n  Set value for a thread local variable.\n\n  @param[in]     thd   Thread context.\n  @param[in]     var   Plugin variable.\n  @param[in,out] dest  Destination memory pointer.\n  @param[in]     value New value.\n\n  Note: new value should be '\\0'-terminated for string variables.\n\n  Used in plugin.h:THDVAR_SET(thd, name, value) macro.\n*/\n\nvoid plugin_thdvar_safe_update(THD *thd, SYS_VAR *var, char **dest,\n                               const char *value) {\n  DBUG_ASSERT(thd == current_thd);\n\n  if (var->flags & PLUGIN_VAR_THDLOCAL) {\n    if ((var->flags & PLUGIN_VAR_TYPEMASK) == PLUGIN_VAR_STR &&\n        var->flags & PLUGIN_VAR_MEMALLOC)\n      plugin_var_memalloc_session_update(thd, var, dest, value);\n    else\n      var->update(thd, var, dest, value);\n  }\n}\n\n/**\n  Free all elements allocated by plugin_var_memalloc_session_update().\n\n  @param[in]     vars  system variables structure\n\n  @see plugin_var_memalloc_session_update\n*/\n\nstatic void plugin_var_memalloc_free(struct System_variables *vars) {\n  LIST *next, *root;\n  DBUG_TRACE;\n  for (root = vars->dynamic_variables_allocs; root; root = next) {\n    next = root->next;\n    my_free(root);\n  }\n  vars->dynamic_variables_allocs = nullptr;\n}\n\nextern \"C\" bool get_one_plugin_option(int, const struct my_option *, char *);\n\nbool get_one_plugin_option(int, const struct my_option *, char *) {\n  return false;\n}\n\n/**\n  Creates a set of my_option objects associated with a specified plugin-\n  handle.\n\n  @param mem_root Memory allocator to be used.\n  @param tmp A pointer to a plugin handle\n  @param[out] options A pointer to a pre-allocated static array\n\n  The set is stored in the pre-allocated static array supplied to the function.\n  The size of the array is calculated as (number_of_plugin_varaibles*2+3). The\n  reason is that each option can have a prefix '--plugin-' in addtion to the\n  shorter form '--&lt;plugin-name&gt;'. There is also space allocated for\n  terminating NULL pointers.\n\n  @retval -1 An error occurred\n  @retval 0 Success\n*/\n\nstatic int construct_options(MEM_ROOT *mem_root, st_plugin_int *tmp,\n                             my_option *options) {\n  const char *plugin_name = tmp->plugin->name;\n  const LEX_CSTRING plugin_dash = {STRING_WITH_LEN(\"plugin-\")};\n  size_t plugin_name_len = strlen(plugin_name);\n  size_t optnamelen;\n  const int max_comment_len = 180;\n  char *comment = (char *)mem_root->Alloc(max_comment_len + 1);\n  char *optname;\n\n  int index = 0, offset = 0;\n  SYS_VAR *opt, **plugin_option;\n  st_bookmark *v;\n\n  /** Used to circumvent the const attribute on my_option::name */\n  char *plugin_name_ptr, *plugin_name_with_prefix_ptr;\n\n  DBUG_TRACE;\n\n  plugin_name_ptr = (char *)mem_root->Alloc(plugin_name_len + 1);\n  strcpy(plugin_name_ptr, plugin_name);\n  my_casedn_str(&my_charset_latin1, plugin_name_ptr);\n  convert_underscore_to_dash(plugin_name_ptr, plugin_name_len);\n  plugin_name_with_prefix_ptr =\n      (char *)mem_root->Alloc(plugin_name_len + plugin_dash.length + 1);\n  strxmov(plugin_name_with_prefix_ptr, plugin_dash.str, plugin_name_ptr, NullS);\n\n  if (tmp->load_option != PLUGIN_FORCE &&\n      tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT) {\n    /* support --skip-plugin-foo syntax */\n    options[0].name = plugin_name_ptr;\n    options[1].name = plugin_name_with_prefix_ptr;\n    options[0].id = 0;\n    options[1].id = -1;\n    options[0].var_type = options[1].var_type = GET_ENUM;\n    options[0].arg_type = options[1].arg_type = OPT_ARG;\n    options[0].def_value = options[1].def_value = 1; /* ON */\n    options[0].typelib = options[1].typelib = &global_plugin_typelib;\n\n    strxnmov(comment, max_comment_len, \"Enable or disable \", plugin_name,\n             \" plugin. Possible values are ON, OFF, FORCE (don't start \"\n             \"if the plugin fails to load).\",\n             NullS);\n    options[0].comment = comment;\n    /*\n      Allocate temporary space for the value of the tristate.\n      This option will have a limited lifetime and is not used beyond\n      server initialization.\n      GET_ENUM value is an unsigned long integer.\n    */\n    options[0].value = options[1].value =\n        (uchar **)mem_root->Alloc(sizeof(ulong));\n    *((ulong *)options[0].value) = (ulong)options[0].def_value;\n\n    options[0].arg_source = options[1].arg_source =\n        (get_opt_arg_source *)mem_root->Alloc(sizeof(get_opt_arg_source));\n    memset(options[0].arg_source, 0, sizeof(get_opt_arg_source));\n    options[0].arg_source->m_path_name[0] = 0;\n    options[1].arg_source->m_path_name[0] = 0;\n    options[0].arg_source->m_source = options[1].arg_source->m_source =\n        enum_variable_source::COMPILED;\n\n    options += 2;\n  }\n\n  if (!my_strcasecmp(&my_charset_latin1, plugin_name_ptr, \"NDBCLUSTER\")) {\n    plugin_name_ptr = const_cast<char *>(\"ndb\");  // Use legacy \"ndb\" prefix\n    plugin_name_len = 3;\n  }\n\n  /*\n    Two passes as the 2nd pass will take pointer addresses for use\n    by my_getopt and register_var() in the first pass uses realloc\n  */\n\n  for (plugin_option = tmp->plugin->system_vars;\n       plugin_option && *plugin_option; plugin_option++, index++) {\n    opt = *plugin_option;\n    if (!(opt->flags & PLUGIN_VAR_THDLOCAL)) continue;\n    if (!(register_var(plugin_name_ptr, opt->name, opt->flags))) continue;\n    switch (opt->flags & PLUGIN_VAR_TYPEMASK) {\n      case PLUGIN_VAR_BOOL:\n        ((thdvar_bool_t *)opt)->resolve = mysql_sys_var_bool;\n        break;\n      case PLUGIN_VAR_INT:\n        // All PLUGIN_VAR_INT variables are actually uint,\n        // see struct System_variables\n        // Except: plugin variables declared with MYSQL_THDVAR_INT,\n        // which may actually be signed.\n        if (((thdvar_int_t *)opt)->offset == -1 &&\n            !(opt->flags & PLUGIN_VAR_UNSIGNED))\n          ((thdvar_int_t *)opt)->resolve = mysql_sys_var_int;\n        else\n          ((thdvar_uint_t *)opt)->resolve = mysql_sys_var_uint;\n        break;\n      case PLUGIN_VAR_LONG:\n        // All PLUGIN_VAR_LONG variables are actually ulong,\n        // see struct System_variables\n        ((thdvar_ulong_t *)opt)->resolve = mysql_sys_var_ulong;\n        break;\n      case PLUGIN_VAR_LONGLONG:\n        // All PLUGIN_VAR_LONGLONG variables are actually ulonglong,\n        // see struct System_variables\n        ((thdvar_ulonglong_t *)opt)->resolve = mysql_sys_var_ulonglong;\n        break;\n      case PLUGIN_VAR_STR:\n        ((thdvar_str_t *)opt)->resolve = mysql_sys_var_str;\n        break;\n      case PLUGIN_VAR_ENUM:\n        ((thdvar_enum_t *)opt)->resolve = mysql_sys_var_ulong;\n        break;\n      case PLUGIN_VAR_SET:\n        ((thdvar_set_t *)opt)->resolve = mysql_sys_var_ulonglong;\n        break;\n      case PLUGIN_VAR_DOUBLE:\n        ((thdvar_double_t *)opt)->resolve = mysql_sys_var_double;\n        break;\n      default:\n        LogErr(ERROR_LEVEL, ER_PLUGIN_UNKNOWN_VARIABLE_TYPE, opt->flags,\n               plugin_name);\n        return -1;\n    };\n  }\n\n  for (plugin_option = tmp->plugin->system_vars;\n       plugin_option && *plugin_option; plugin_option++, index++) {\n    switch ((opt = *plugin_option)->flags & PLUGIN_VAR_TYPEMASK) {\n      case PLUGIN_VAR_BOOL:\n        if (!opt->check) opt->check = check_func_bool;\n        if (!opt->update) opt->update = update_func_bool;\n        break;\n      case PLUGIN_VAR_INT:\n        if (!opt->check) opt->check = check_func_int;\n        if (!opt->update) opt->update = update_func_int;\n        break;\n      case PLUGIN_VAR_LONG:\n        if (!opt->check) opt->check = check_func_long;\n        if (!opt->update) opt->update = update_func_long;\n        break;\n      case PLUGIN_VAR_LONGLONG:\n        if (!opt->check) opt->check = check_func_longlong;\n        if (!opt->update) opt->update = update_func_longlong;\n        break;\n      case PLUGIN_VAR_STR:\n        if (!opt->check) opt->check = check_func_str;\n        if (!opt->update) {\n          opt->update = update_func_str;\n          if (!(opt->flags & (PLUGIN_VAR_MEMALLOC | PLUGIN_VAR_READONLY))) {\n            opt->flags |= PLUGIN_VAR_READONLY;\n            LogErr(WARNING_LEVEL, ER_PLUGIN_VARIABLE_SET_READ_ONLY, opt->name,\n                   plugin_name);\n          }\n        }\n        break;\n      case PLUGIN_VAR_ENUM:\n        if (!opt->check) opt->check = check_func_enum;\n        if (!opt->update) opt->update = update_func_long;\n        break;\n      case PLUGIN_VAR_SET:\n        if (!opt->check) opt->check = check_func_set;\n        if (!opt->update) opt->update = update_func_longlong;\n        break;\n      case PLUGIN_VAR_DOUBLE:\n        if (!opt->check) opt->check = check_func_double;\n        if (!opt->update) opt->update = update_func_double;\n        break;\n      default:\n        LogErr(ERROR_LEVEL, ER_PLUGIN_UNKNOWN_VARIABLE_TYPE, opt->flags,\n               plugin_name);\n        return -1;\n    }\n\n    if ((opt->flags & (PLUGIN_VAR_NOCMDOPT | PLUGIN_VAR_THDLOCAL)) ==\n        PLUGIN_VAR_NOCMDOPT)\n      continue;\n\n    if (!opt->name) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_VARIABLE_MISSING_NAME, plugin_name);\n      return -1;\n    }\n\n    if (!(opt->flags & PLUGIN_VAR_THDLOCAL)) {\n      optnamelen = strlen(opt->name);\n      optname = (char *)mem_root->Alloc(plugin_name_len + optnamelen + 2);\n      strxmov(optname, plugin_name_ptr, \"-\", opt->name, NullS);\n      optnamelen = plugin_name_len + optnamelen + 1;\n    } else {\n      /* this should not fail because register_var should create entry */\n      if (!(v = find_bookmark(plugin_name_ptr, opt->name, opt->flags))) {\n        LogErr(ERROR_LEVEL, ER_PLUGIN_VARIABLE_NOT_ALLOCATED_THREAD_LOCAL,\n               opt->name, plugin_name);\n        return -1;\n      }\n\n      *(int *)(opt + 1) = offset = v->offset;\n\n      if (opt->flags & PLUGIN_VAR_NOCMDOPT) continue;\n\n      optname = (char *)memdup_root(mem_root, v->key + 1,\n                                    (optnamelen = v->name_len) + 1);\n    }\n\n    convert_underscore_to_dash(optname, optnamelen);\n\n    options->name = optname;\n    options->comment = opt->comment;\n    options->app_type = opt;\n    options->id = 0;\n\n    plugin_opt_set_limits(options, opt);\n\n    if (opt->flags & PLUGIN_VAR_THDLOCAL)\n      options->value = options->u_max_value =\n          (uchar **)(global_system_variables.dynamic_variables_ptr + offset);\n    else\n      options->value = options->u_max_value = *(uchar ***)(opt + 1);\n\n    char *option_name_ptr;\n    options[1] = options[0];\n    options[1].id = -1;\n    options[1].name = option_name_ptr =\n        (char *)mem_root->Alloc(plugin_dash.length + optnamelen + 1);\n    options[1].comment = nullptr; /* Hidden from the help text */\n    strxmov(option_name_ptr, plugin_dash.str, optname, NullS);\n\n    options[0].arg_source = options[1].arg_source =\n        (get_opt_arg_source *)mem_root->Alloc(sizeof(get_opt_arg_source));\n    memset(options[0].arg_source, 0, sizeof(get_opt_arg_source));\n    options[0].arg_source->m_path_name[0] = 0;\n    options[1].arg_source->m_path_name[0] = 0;\n    options[0].arg_source->m_source = options[1].arg_source->m_source =\n        enum_variable_source::COMPILED;\n\n    options += 2;\n  }\n\n  return 0;\n}\n\nstatic my_option *construct_help_options(MEM_ROOT *mem_root, st_plugin_int *p) {\n  SYS_VAR **opt;\n  my_option *opts;\n  uint count = EXTRA_OPTIONS;\n  DBUG_TRACE;\n\n  for (opt = p->plugin->system_vars; opt && *opt; opt++, count += 2)\n    ;\n\n  if (!(opts = (my_option *)mem_root->Alloc(sizeof(my_option) * count)))\n    return nullptr;\n\n  memset(opts, 0, sizeof(my_option) * count);\n\n  /**\n    some plugin variables (those that don't have PLUGIN_VAR_EXPERIMENTAL flag)\n    have their names prefixed with the plugin name. Restore the names here\n    to get the correct (not double-prefixed) help text.\n    We won't need @@sysvars anymore and don't care about their proper names.\n  */\n  restore_pluginvar_names(p->system_vars);\n\n  if (construct_options(mem_root, p, opts)) return nullptr;\n\n  return opts;\n}\n\n/**\n  Check option being used and raise deprecation warning if required.\n\n  @param optid ID of the option that was passed through command line\n  @param opt List of options\n  @param argument unused\n\n  A deprecation warning will be raised if --plugin-xxx type of option\n  is used.\n\n  @return Always returns success as purpose of the function is to raise\n  warning only.\n  @retval 0 Success\n*/\n\nstatic bool check_if_option_is_deprecated(\n    int optid, const struct my_option *opt,\n    char *argument MY_ATTRIBUTE((unused))) {\n  if (optid == -1) {\n    push_deprecated_warn(nullptr, opt->name, (opt->name + strlen(\"plugin-\")));\n  }\n  return false;\n}\n\n/**\n  Create and register system variables supplied from the plugin and\n  assigns initial values from corresponding command line arguments.\n\n  @param tmp_root Temporary scratch space\n  @param[out] tmp Internal plugin structure\n  @param argc Number of command line arguments\n  @param argv Command line argument vector\n\n  The plugin will be updated with a policy on how to handle errors during\n  initialization.\n\n  @note Requires that a write-lock is held on LOCK_system_variables_hash\n\n  @return How initialization of the plugin should be handled.\n    @retval  0 Initialization should proceed.\n    @retval  1 Plugin is disabled.\n    @retval -1 An error has occurred.\n*/\n\nstatic int test_plugin_options(MEM_ROOT *tmp_root, st_plugin_int *tmp,\n                               int *argc, char **argv) {\n  struct sys_var_chain chain = {nullptr, nullptr};\n  bool disable_plugin;\n  enum_plugin_load_option plugin_load_option = tmp->load_option;\n\n  /*\n    We should use tmp->mem_root here instead of the global plugin_mem_root,\n    but tmp->root is not always properly freed, so it will cause leaks in\n    Valgrind (e.g. the main.validate_password_plugin test).\n  */\n  MEM_ROOT *mem_root = &plugin_mem_root;\n  SYS_VAR **opt;\n  my_option *opts = nullptr;\n  LEX_CSTRING plugin_name;\n  char *varname;\n  int error;\n  sys_var *v MY_ATTRIBUTE((unused));\n  st_bookmark *var;\n  size_t len;\n  uint count = EXTRA_OPTIONS;\n  DBUG_TRACE;\n  DBUG_ASSERT(tmp->plugin && tmp->name.str);\n\n  /*\n    The 'federated' and 'ndbcluster' storage engines are always disabled by\n    default.\n  */\n  if (!(my_strcasecmp(&my_charset_latin1, tmp->name.str, \"federated\") &&\n        my_strcasecmp(&my_charset_latin1, tmp->name.str, \"ndbcluster\")))\n    plugin_load_option = PLUGIN_OFF;\n\n  for (opt = tmp->plugin->system_vars; opt && *opt; opt++)\n    count += 2; /* --{plugin}-{optname} and --plugin-{plugin}-{optname} */\n\n  if (count > EXTRA_OPTIONS || (*argc > 1)) {\n    if (!(opts = (my_option *)tmp_root->Alloc(sizeof(my_option) * count))) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_OOM, tmp->name.str);\n      return -1;\n    }\n    memset(opts, 0, sizeof(my_option) * count);\n\n    if (construct_options(tmp_root, tmp, opts)) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_BAD_OPTIONS, tmp->name.str);\n      return -1;\n    }\n\n    /*\n      We adjust the default value to account for the hardcoded exceptions\n      we have set for the federated and ndbcluster storage engines.\n    */\n    if (tmp->load_option != PLUGIN_FORCE &&\n        tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n      opts[0].def_value = opts[1].def_value = plugin_load_option;\n\n    error = handle_options(argc, &argv, opts, check_if_option_is_deprecated);\n    (*argc)++; /* add back one for the program name */\n\n    if (error) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_PARSING_OPTIONS_FAILED, tmp->name.str);\n      goto err;\n    }\n    /*\n     Set plugin loading policy from option value. First element in the option\n     list is always the <plugin name> option value.\n    */\n    if (tmp->load_option != PLUGIN_FORCE &&\n        tmp->load_option != PLUGIN_FORCE_PLUS_PERMANENT)\n      plugin_load_option = (enum_plugin_load_option) * (ulong *)opts[0].value;\n  }\n\n  disable_plugin = (plugin_load_option == PLUGIN_OFF);\n  tmp->load_option = plugin_load_option;\n\n  /*\n    If the plugin is disabled it should not be initialized.\n  */\n  if (disable_plugin) {\n    LogErr(INFORMATION_LEVEL, ER_PLUGIN_DISABLED, tmp->name.str);\n    if (opts) my_cleanup_options(opts);\n    return 1;\n  }\n\n  if (!my_strcasecmp(&my_charset_latin1, tmp->name.str, \"NDBCLUSTER\")) {\n    plugin_name.str = const_cast<char *>(\"ndb\");  // Use legacy \"ndb\" prefix\n    plugin_name.length = 3;\n  } else\n    plugin_name = tmp->name;\n\n  error = 1;\n  for (opt = tmp->plugin->system_vars; opt && *opt; opt++) {\n    SYS_VAR *o;\n    if (((o = *opt)->flags & PLUGIN_VAR_NOSYSVAR)) continue;\n    if ((var = find_bookmark(plugin_name.str, o->name, o->flags)))\n      v = new (mem_root) sys_var_pluginvar(&chain, var->key + 1, o);\n    else {\n      len = plugin_name.length + strlen(o->name) + 2;\n      varname = (char *)mem_root->Alloc(len);\n      strxmov(varname, plugin_name.str, \"-\", o->name, NullS);\n      my_casedn_str(&my_charset_latin1, varname);\n      convert_dash_to_underscore(varname, len - 1);\n      v = new (mem_root) sys_var_pluginvar(&chain, varname, o);\n    }\n    DBUG_ASSERT(v); /* check that an object was actually constructed */\n\n    const my_option *optp = opts;\n    if (findopt(o->name, strlen(o->name), &optp))\n      v->set_arg_source(optp->arg_source);\n  } /* end for */\n  if (chain.first) {\n    chain.last->next = nullptr;\n    if (mysql_add_sys_var_chain(chain.first)) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_HAS_CONFLICTING_SYSTEM_VARIABLES,\n             tmp->name.str);\n      goto err;\n    }\n    tmp->system_vars = chain.first;\n  }\n\n  /*\n    Once server is started and if there are few persisted plugin variables\n    which needs to be handled, we do it here.\n  */\n  if (mysqld_server_started) {\n    Persisted_variables_cache *pv = Persisted_variables_cache::get_instance();\n    if (pv && pv->set_persist_options(true)) {\n      LogErr(ERROR_LEVEL, ER_PLUGIN_CANT_SET_PERSISTENT_OPTIONS, tmp->name.str);\n      goto err;\n    }\n  }\n  return 0;\n\nerr:\n  if (opts) my_cleanup_options(opts);\n  return error;\n}\n\n/****************************************************************************\n  Help Verbose text with Plugin System Variables\n****************************************************************************/\n\nvoid add_plugin_options(std::vector<my_option> *options, MEM_ROOT *mem_root) {\n  my_option *opt;\n\n  if (!initialized) return;\n\n  for (st_plugin_int **it = plugin_array->begin(); it != plugin_array->end();\n       ++it) {\n    st_plugin_int *p = *it;\n\n    if (!(opt = construct_help_options(mem_root, p))) continue;\n\n    /* Only options with a non-NULL comment are displayed in help text */\n    for (; opt->name; opt++)\n      if (opt->comment) options->push_back(*opt);\n  }\n}\n\n/**\n  Searches for a correctly loaded plugin of a particular type by name\n\n  @param plugin   the name of the plugin we're looking for\n  @param type     type of the plugin (0-MYSQL_MAX_PLUGIN_TYPE_NUM)\n  @return plugin, or NULL if not found\n*/\nst_plugin_int *plugin_find_by_type(const LEX_CSTRING &plugin, int type) {\n  st_plugin_int *ret;\n  DBUG_TRACE;\n\n  ret = plugin_find_internal(plugin, type);\n  return ret && ret->state == PLUGIN_IS_READY ? ret : nullptr;\n}\n\n/**\n  Locks the plugin strucutres so calls to plugin_find_inner can be issued.\n\n  Must be followed by unlock_plugin_data.\n*/\nint lock_plugin_data() {\n  DBUG_TRACE;\n  return mysql_mutex_lock(&LOCK_plugin);\n}\n\n/**\n  Unlocks the plugin strucutres as locked by lock_plugin_data()\n*/\nint unlock_plugin_data() {\n  DBUG_TRACE;\n  return mysql_mutex_unlock(&LOCK_plugin);\n}\n\nbool Sql_cmd_install_plugin::execute(THD *thd) {\n  bool st = mysql_install_plugin(thd, m_comment, &m_ident);\n  if (!st) my_ok(thd);\n  mysql_audit_release(thd);\n  return st;\n}\n\nbool Sql_cmd_uninstall_plugin::execute(THD *thd) {\n  bool st = mysql_uninstall_plugin(thd, m_comment);\n  if (!st) my_ok(thd);\n  return st;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/src/common/logger/MSG00001.bin",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/src/ndbapi/NdbUtil.cpp",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/src/ndbapi/NdbUtil.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/src/kernel/blocks/new-block.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/src/kernel/blocks/dbdict/Slave_AddTable.sfl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-header-dropdown-btn.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-panel-main-left.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/oracle_logo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/settings.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/box-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icon-gauge.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-panel-main-left-top.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-header-history.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/start.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icon-network.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/welcome-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/welcome-title.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-header-search-btn.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icons8-view-50.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-panel-main-right.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/tab-separator.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/left.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-panel-main-right-bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-panel-main-right-top.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icons.odg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/pwdshow_button.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/greenlight.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-title-o-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icon_continue_cluster.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/link-item.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icon_continue_cluster_disabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/last.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/deploy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-panel-main-left-bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-header-enterprise.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/welcome-mysql-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-title.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/redlight.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/pwdshow_btn_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/vertical-separator.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icon-stopwatch.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/yellowlight.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/content-panel-main-bottom.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/stop.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/anyhost.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/flag.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icon_new_cluster.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/img/icon-cluster.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/storage/storage_dialog.swf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/storage/Storage.swf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/storage/storage_dialog.fla",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/grip_bg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/resizeRtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/pixel.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/splitterToggleH.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/gridcontainer_grip.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/rotator.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/resize.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/layout/resources/icons/splitterToggleV.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/compatGrid.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/enhanced/resources/images/sprite_icons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/tabEnabled_rotated.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/header.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/header_shadow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/tabHover_rotated.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/row_back.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/grid_sort_up.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/grid_sort_down.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/td_button_down.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/grid/resources/images/grid_dx_gradient.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/embed/resources/version.mov",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowTL.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowT.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowTR.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowR.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowBR.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowL.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowB.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/fx/resources/shadowBL.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/rheader.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/zoomouttime.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/parentnode_filled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/save.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/projProgressFilled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/resourceBg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/parentnode_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/collapse.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/zoomin.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/taskProgressFilled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/taskBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/expand.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/rowHighlight.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/resourceHeader.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/taskArrow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/load.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/zoomintime.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/ownerBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/arrow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/zoomout.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/taskProgressBg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/minus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/progress_filled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/plus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/rbg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/menuHighlight.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/pm.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/am.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/progress_bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/gantt/resources/images/projProgressBg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/dojox-image-flickerbase.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/right.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/close.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/left.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/close.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/buttons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/buttons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/left.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/right.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/image/resources/images/close_dark.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/drawing/resources/CrazyTruck.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/drawing/resources/images/tool_icons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/drawing/resources/images/tool_sprites.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/smiley.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/previewDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/anchor.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/anchorDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/smileyDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/preview.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/pasteFromWordDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/editorIconsFindReplaceEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/save.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/showBlockNodesDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/editorIconsFindReplaceDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/breadcrumbDown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/insertEntity.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/saveDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/pageBreak.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/blockquoteDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/blockquote.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/showBlockNodes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/spellcheck.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/pageBreakDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/pasteFromWord.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/insertEntityDisabled.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/autoSave.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/soria/close.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/tundra/close.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/nihilo/close.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/icons/claro/close.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/tableIcons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/anchor.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/cellspace.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/uploadImageIcon.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/tableIcons_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/cellpad.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/busy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/checking.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/h4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/fieldset.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/address.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/ul.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/dd.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/dt.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/noscript.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/iframe.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/h6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/h1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/center.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/h5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/div.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/ol.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/h2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/map.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/h3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/blockquote.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/button.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/script.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/p.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/form.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/li.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/hr.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/ins.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/del.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/object.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/table.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/blockelems/pre.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/soria/collapse.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/soria/sidebar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/soria/expand.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/tundra/collapse.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/tundra/sidebar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/tundra/expand.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/nihilo/collapse.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/nihilo/sidebar.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/nihilo/expand.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/claro/collapse.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/images/claro/expand.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonHalf.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonCool.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonAngel.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonAngry.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonGrin.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonTongue.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonShy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonNo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonHappy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonLaughing.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonCrying.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonIdea.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonFrown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonSmile.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonOops.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonGoofy.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonWink.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonYes.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/editor/plugins/resources/emoticons/emoticonEyebrow.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/sketch/resources/images/icons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/compat/spinwheel-bar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/compat/spinwheel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonDarkBlueMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlueCircleArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlackRightArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGreenCirclePlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlackDownArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteDownArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteRightArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlueCirclePlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonDarkBlueCheck.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteUpArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonRedCirclePlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteLeftArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonRedMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGrayPlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonCheckboxOff.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteUpArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGrayKnob.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonSilverCircleRedCross.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlackCircleCross.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonRedCross.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteSearch.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGrayMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGreenCircleArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonSilverCircleGreenPlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteCheck.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonYellowStar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonRedCircleMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhitePlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlueMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGrayStar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGreenBall.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBluePlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlueCircleMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonSilverCircleGreenButton.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonSilverCircleDownArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonDarkBluePlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGreenCircleMinus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonRedBall.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlueBall.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonOrangeBall.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonRedCircleArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlackUpArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonBlackLeftArrow16.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGrayArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteCross.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonCheck.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonRedPlus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonCheckboxOn.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonSilverCircleGrayButton.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonWhiteDownArrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonGrayCross.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/common/domButtons/compat/mblDomButtonSilverCircleOrangeButton.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/button-arrow-head-bg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/togglebutton-chk-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/arrow-button-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/button-unsel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/red-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/blue-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/arrow-button-right-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-round1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/slider-h-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-square-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-arc2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/tab-orange-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-arc1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/tab-tall-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/tab-seg-sel-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/arrow-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-round2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-round1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/icon-content-heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/button-chk-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/tab-sel-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/tab-slim-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/tab-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-arc2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/slider-h-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-square-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/valuepicker-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-round1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/tab-seg-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-arc2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-round2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-arc1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/blue-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/togglebutton-chk-mark-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/arrow-button-bg-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/slider-handle-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-round2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/gray-arrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/red-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-square-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/arrow-button-right-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/switch-arc1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/compat/arrow-button-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/images/thumb-overlay.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/images/thumb-overlay-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/images/thumb-overlay-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/dijit/compat/calendar-datelabel-act-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/dijit/compat/calendar-datelabel-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/dijit/compat/calendar-month-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/android/dijit/compat/calendar-year-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/button-arrow-head-bg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/arrow-button-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/button-unsel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/red-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/blue-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/arrow-button-right-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-round1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/slider-h-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-square-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-arc2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-arc1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/tab-tall-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/tab-seg-sel-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/arrow-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-round2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-round1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/icon-content-heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/button-chk-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/tab-slim-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-arc2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/slider-h-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-square-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/valuepicker-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-round1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/tab-seg-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-arc2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-round2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-arc1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/blue-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/togglebutton-chk-mark-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/arrow-button-bg-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/slider-handle-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-round2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/red-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-square-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/arrow-button-right-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/switch-arc1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/compat/arrow-button-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/images/thumb-overlay.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/images/thumb-overlay-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/images/thumb-overlay-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/dijit/compat/calendar-datelabel-act-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/dijit/compat/calendar-datelabel-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/dijit/compat/calendar-month-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/custom/dijit/compat/calendar-year-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/button-arrow-head-bg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/arrow-button-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/button-unsel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/red-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/blue-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/arrow-button-right-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-round1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/slider-h-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-square-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-arc2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/tab-orange-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-arc1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/tab-tall-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/tab-seg-sel-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/arrow-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-round2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-round1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/icon-content-heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/button-chk-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/tab-sel-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/tab-slim-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/tab-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-arc2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/slider-h-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-square-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/valuepicker-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-round1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/tab-seg-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-arc2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-round2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-arc1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/blue-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/togglebutton-chk-mark-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/arrow-button-bg-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/slider-handle-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-round2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/gray-arrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/red-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-square-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/arrow-button-right-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/arrow-button-head.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/switch-arc1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/compat/arrow-button-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/images/thumb-overlay.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/images/thumb-overlay-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/images/thumb-overlay-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/dijit/compat/calendar-datelabel-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/dijit/compat/calendar-month-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/blackberry/dijit/compat/calendar-year-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/button-arrow-head-bg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/arrow-button-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/button-unsel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/red-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/blue-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/arrow-button-right-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/slider-h-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-square-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/ipad-arrow-button-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/ipad-arrow-button-right-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tab-tall-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tab-seg-sel-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-default-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/arrow-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/icon-content-heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/ipad-arrow-button-right-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/button-chk-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tab-sel-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tab-slim-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tab-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc2-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/slider-h-bar-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-square-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/valuepicker-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/ipad-arrow-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round1-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tab-seg-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round2-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc1-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-default-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-default-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/blue-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/togglebutton-chk-mark-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/arrow-button-bg-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tooltip-heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/slider-handle-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round2-k.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/tooltip-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/ipad-arrow-button-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/ipad-heading-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/gray-arrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/red-button-sel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-round-r.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-square-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/arrow-button-right-head.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/ipad-arrow-button-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/edge-categ-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/white-arrow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/switch-arc1-l.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/compat/arrow-button-head-sel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/images/thumb-overlay.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/images/thumb-overlay-large.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/images/thumb-overlay-small.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/dijit/compat/calendar-daylabel-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/dijit/compat/calendar-month-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/mobile/themes/iphone/dijit/compat/calendar-year-bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/uploader.swf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/fileuploader.swf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/images/soriaFolderSprite.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/images/nihiloFolderSprite.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/images/rating_full.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/images/tundraFolderSprite.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/images/loading_wheel.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/images/rating_empty.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/form/resources/images/tristatecheckboxStates.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/geo/charting/resources/img/zoomin.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/geo/charting/resources/img/zoomin.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/geo/charting/resources/img/zoomout.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/geo/charting/resources/img/zoomout.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/resources/audio.swf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/resources/video.swf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/resources/version.mov",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/widget/resources/images/progressPositionBk.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/widget/resources/images/progressLoadedBk.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/widget/resources/images/player_sprite.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/widget/resources/images/sliderHandleSprite.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/widget/resources/images/sliderHandleNorm.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/widget/resources/images/sliderHandleOver.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/av/widget/resources/images/dojoPlayerIcons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/FilePicker/images/soriaFileIcons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/FilePicker/images/nihiloFileIcons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/FilePicker/images/tundraFileIcons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Dialog/images/dialogCloseButton.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Dialog/images/dialogCloseButton.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Pager/images/pageInactive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Pager/images/hPrevious.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Pager/images/hNext.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Pager/images/pageActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Pager/images/vNext.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Pager/images/vPrevious.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Standby/images/loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Portlet/images/icons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Portlet/images/icons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/ColorPicker/images/hue.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/ColorPicker/images/hueHandleA11y.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/ColorPicker/images/pickerPointer.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/ColorPicker/images/underlay.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/ColorPicker/images/hueHandle.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/widget/Loader/icons/loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/calendar/themes/soria/images/accordionItemActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/calendar/themes/soria/images/titleBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/calendar/themes/tundra/images/accordionItemHover.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/calendar/themes/tundra/images/titleBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/calendar/themes/nihilo/images/accordionItemActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/calendar/themes/nihilo/images/titleBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojox/calendar/themes/claro/images/titlebar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/editorIconsDisabled_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/loadingAnimation_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/commonIconsObjActDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/commonIconsObjActEnabled_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/commonIconsObjActEnabled8bit.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/commonIconsObjActDisabled_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/editorIconsDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/editorIconsEnabled_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/editorIconsEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/commonIconsObjActEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/icons/images/commonIconsObjActEnabled8bit_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/a11y/colors7x10.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/a11y/indeterminate_progress.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/a11y/colors3x4.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/buttonDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/treeI_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteRoundedIconsSmallBl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tabLeftChecked.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteDivIcons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderEmptyVertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/progressBarAnim.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/buttonHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorDown.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteCheckbox.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorRight.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tabBottomHoverC.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/treeI.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/buttonEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteTree_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteRoundedIconsSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderEmpty.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/splitContainerSizerV-thumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/treeExpand_loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/titleBarActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/preciseSliderThumbFocus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorUp.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/treeI_half_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/accordionItemActive.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderFullVerticalFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteTree.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorUp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorLeft.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/dndMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderThumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteRadio.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteRoundedIconsSmallBl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/accordionItemActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderFull.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/splitContainerSizerH-thumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tabRightChecked.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderThumbFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/treeI_half.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderThumbFocus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/titleBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/validationInputBg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tabBottomEnabledC.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorDown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tabBottomEnabledSpriteLR.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/preciseSliderThumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tabBottomActiveC.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteArrows.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/splitContainerSizerH.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorLeft.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteTree.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/preciseSliderThumb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteRadio.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/buttonActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderThumb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/treeHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/splitContainerSizerV.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/dndNoCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/dndCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteCheckbox.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/progressBarEmpty.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteDivIcons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/validationInputBg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderFullFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteTree_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tabContainerSprite.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteRoundedIconsSmall.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/dndNoMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/progressBarFull.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/tooltipConnectorRight.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/sliderFullVertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/preciseSliderThumbFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/soria/images/spriteArrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim.psd",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/buttonDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/i.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderEmptyVertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/buttonHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dijitProgressBarAnim.psd",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorDown.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorRight.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dojoTundraGradientBg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/buttonEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabClose.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/comboArrowDown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/folderOpened.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dojoTundraGradientBg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/spriteRoundedIconsSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderEmpty.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabCloseHover.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/leaf.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/smallArrowDown.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/splitContainerSizerV-thumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/i_half_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/radioButtonActiveHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_minus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/preciseSliderThumbFocus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorUp.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/accordionItemActive.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderFullVerticalFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/plusButton.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/menu.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorUp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorLeft.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/noX.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_mius.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dndMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/checkmark.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_leaf.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/calendarYearLabel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/accordionItemHover.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderThumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_minus_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/radioButtonDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-4.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabHover.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabClose.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_plus_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-9.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-6.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-5.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_plus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderFull.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/titleBarBg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/splitContainerSizerH-thumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/circleIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/i_half.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/doubleArrowDown.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderThumbFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderThumbFocus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/titleBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-8.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/validationInputBg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabCloseHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorDown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tabDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/checkmarkNoBorder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/preciseSliderThumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/popupMenuBg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/radioButtonEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/folderClosed.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/spriteArrows.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dijitProgressBarAnim.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/splitContainerSizerH.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorLeft.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/smallArrowUp.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/radioButtonActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/preciseSliderThumb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/buttonActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/checkmark.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/minusButton.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/splitContainerSizerV.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dndNoCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/checkmarkNoBorder.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dndCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/i_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/no.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarEmpty.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/radioButtonActiveDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/validationInputBg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-3.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderFullFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/circleIcon.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/spriteRoundedIconsSmall.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-7.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/treeExpand_leaf_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/dndNoMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarFull.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/tooltipConnectorRight.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/progressBarAnim-1.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/calendarDayLabel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/doubleArrowUp.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/calendarMonthLabel.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/sliderFullVertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/radioButtonHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/preciseSliderThumbFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/tundra/images/spriteArrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/buttonDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/treeI_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteDivIcons.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderEmptyVertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/progressBarAnim.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/buttonHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorDown.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteCheckbox.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorRight.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tabBottomHoverC.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/treeI.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/buttonEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteTree_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteRoundedIconsSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderEmpty.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/splitContainerSizerV-thumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/treeExpand_loading.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/titleBarActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/preciseSliderThumbFocus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorUp.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/treeI_half_rtl.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderFullVerticalFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteTree.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorUp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorLeft.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/dndMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderThumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteRadio.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/accordionItemActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderFull.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/splitContainerSizerH-thumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderThumbFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/treeI_half.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderThumbFocus.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/titleBar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/validationInputBg.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tabBottomEnabledC.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorDown.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/preciseSliderThumb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tabBottomActiveC.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteArrows.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/splitContainerSizerH.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorLeft.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteTree.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/preciseSliderThumb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteRadio.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/buttonActive.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderThumb.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/treeHover.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/splitContainerSizerV.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/dndNoCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/dndCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/no.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteCheckbox.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/progressBarEmpty.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteDivIcons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/validationInputBg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderFullFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteTree_rtl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tabContainerSprite.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteRoundedIconsSmall.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/dndNoMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/progressBarFull.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/tooltipConnectorRight.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/sliderFullVertical.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/preciseSliderThumbFocus.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/nihilo/images/spriteArrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabBottomUnselected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabTopSelected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabLeftSelected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabClose.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabBottomSelected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabRightSelected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabRightUnselected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabLeftUnselected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabTopUnselected.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/layout/images/tabNested.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/dnd.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/progressBarAnim.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/standardGradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/tooltip8bit.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/activeGradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/treeExpandImages8bit.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/treeExpandImages.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/dialogCloseIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/calendar.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/calendarArrows8bit.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/checkmarkNoBorder.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/tooltip.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/calendarArrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/loadingAnimation.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/checkmarkNoBorder.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/progressBarFull.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/spriteArrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/images/dialogCloseIcon8bit.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/buttonDisabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/commonFormArrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/error.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/buttonEnabled.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/checkboxRadioButtonStates.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/buttonArrows.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/sliderThumbs.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dijit/themes/claro/form/images/checkboxAndRadioButtons_IE6.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojo/resources/blank.gif",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojo/resources/images/dndMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojo/resources/images/dndNoCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojo/resources/images/dndCopy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/dojo/dojo/resources/images/dndNoMove.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/deploy.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/ClusterToolsMenu.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_cluster-pwdreminder.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/clusterdefpageextssh.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/breadcrumb_trail.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/cluster-not-deployed.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/shadow-buttons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/edit_selected_hosts.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_parameters.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/hosts-pwd-reminder.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/changed-no-of-repl.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/hostgrid-collapsed.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/hostgrid-expanded.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_cluster.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/welcome.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/add_process.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_parameters-paramchg-view-shadow.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/cookies.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/help_menu.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/page_buttons.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/unknown-progress.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/starting_cluster.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_hosts.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/IEsecset.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/12hostsclusterstarted.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_processes.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/invalid-config.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_processes-warning.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/define_parameters-paramchg.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/deploypageinstallconfirm.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/mcc/frontend/hlp/img/add_host.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/include/ndbapi/NdbScanFilter.hpp",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/test/include/getarg.h",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/storage/ndb/test/run-test/atrt-example.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/build-ps/debian/.percona-server-server-8.0.postinst.swp",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/router/src/harness/src/logging/eventlog_rc/MSG00001.bin",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/packaging/WiX/AdminBackground.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/packaging/WiX/AdminHeader.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/packaging/WiX/MySQLServer.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/packaging/WiX/mysqlcommandlineshell.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/packaging/WiX/router/AdminBackground.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/packaging/WiX/router/MySQLRouter.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/packaging/WiX/router/AdminHeader.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/percona-pam-for-mysql/doc/source/percona-pam-plugin-logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/percona-pam-for-mysql/doc/source/percona_favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/percona-pam-for-mysql/doc/source/_static/percona-pam-plugin-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/plugin/percona-pam-for-mysql/doc/source/_static/percona_favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/extra/zlib/zlib.3.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/initial_v@1o.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/8.0.15_cfg.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug37631.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/corrupt-relay-bin.000624",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8017_crypt_v1_keyring_encrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/crc32_endianness.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_no_fd_event.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_56_gtid_reserved_word.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/table_encrypted_32.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/t_set.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/old_table-323.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_drop_fts.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8016_crypt_v1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_enum.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/14897.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/loaddata6.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_truncated_event.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/loaddata7.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_redo_log_keyring_v1_encrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_zip_dict.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_prev_ver_part_tokudb.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/tablespace_portable_linux.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/57import.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_57_crypt_v1_encryption_n.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_prev_ver_part_rocksdb.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug16266.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/t_gcol_dep.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8017_crypt_v1_half_rotated.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_sys.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/tablespace_portable_win.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug47205.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/keys2.txt",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data80011_upgrade_groupby_desc_ci_win.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/leak172_t2.data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug21542698.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_encrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/mylogin-bad-cipher.cnf",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/master-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_upgrade_groupby_desc.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_57_crypt_v1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/rpl_cross_version_default_utf8mb4_collation.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8017_crypt_v1_encryption_n.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/keys3.txt",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data80011_upgrade_groupby_desc_ci_mac.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_upgrade_trigger_order.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/rpl_atomic_ddl_rollback_view.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_prev_ver_row_format_tokudb.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8017_crypt_v1_sys_half_encrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_upgrade_innodb_4k.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data76.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/loaddata_incomplete_mb.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/wl12261_dump.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/rpl_atomic_ddl_rollback_table.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/rpl_nogtid_encryption_master-bin.000002",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/initial_t@1o.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_fts_lctn.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug20444737.sql",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_fts_nolctn.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/corrupt_t1#P#p1.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8017_crypt_v1_sys_encrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/rpl_atomic_ddl_rollback_full.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8017_crypt_v1_decrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_partition_prefix_key.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug33029-slave-relay-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_savepoint.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/undo57_encrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug27213339-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8017_crypt_v1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_transaction.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/rpl_unfiltered_hidden_gcol.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_transaction_with_GTID.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_fts_aux.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug37631.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/corrupt_t1.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/fw_data_57.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/table_encrypted_64.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug40482-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/41_decimal.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_truncated_prev_gtid_event.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data80011_upgrade_groupby_desc_cs.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/slave-relay-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data8013_57.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/binlog_transaction_with_anonymous_GTID.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data_8015_dd_encrypted.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_upgrade_default_timezone_bug.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/fw_data_80016.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/8.0.17_cfg.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_partition.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/data57_index_stats.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/bug46565.ARZ",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6_2.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6_3.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1TIMESTAMP.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p1_first_1024.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p2.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_blackhole.frm",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p3.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p6.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p2.MYD",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/parts/t1_will_crash#P#p4.MYI",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/lob/earth215kb.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/57_binlog_encryption/ps_encrypted_master-bin.000002",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/57_binlog_encryption/ps_encrypted_slave-relay-bin.000002",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/57_binlog_encryption/ps_encrypted_truncated_master-bin.000002",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/57_binlog_encryption/ps_encrypted_slave-relay-bin.000001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption3.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption0.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption4c.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption5.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption6.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption4a.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption6b.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption4b.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption4d.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption4.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/log_corruption/log_corruption7.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/rocksdb/data_rocks_5730_bloomfilter.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/dd/sdi/innodb_sdi/t18_#p#p1#sp#p11.json",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8019_win_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57_lctn2_ci_win.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80011.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_5727_lin_lctn_0.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8019_win_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_5727_mac_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80013_sql_modes.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8015.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/wl12261_upgrade_80013.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8015.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/wl12261_upgrade_80012.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8019_mac_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_5727_lin_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/bug29791350_upgrade_57022.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80018.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57022.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57_lctn1_ci_win.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8015.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80014.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8019_win_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57_lctn0_cs_lin.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8019_win_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8019_lin_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80013.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8019_win_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8019_lin_lctn_0.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80016_lctn1_lin_nopart.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8019_mac_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8017.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80016.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57_clone_lin.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_encrypted_80016.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80017.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8019_mac_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80016_lctn0_lin_nopart.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8019_win_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80011_ci_mac.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80012.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/80016_subpart.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8019_mac_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57_lctn1_cs_lin.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_5727_mac_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8013.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8017.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8019_lin_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8019_lin_lctn_0.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80012_part.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8019_lin_lctn_0.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_5727_win_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_8013.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_wl13352_5727_win_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/wl12261_upgrade_57025.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8019_mac_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/extn_wl13352_8019_lin_lctn_1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80016_lctn0_lin_part.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/bug29996434_upgrade_57022.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80015.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8013.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8019_mac_lctn_2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/bugdata_80011.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57_lctn2_ci_mac.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80016_lctn1_lin_part.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_57_lctn1_ci_mac.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80011_fts.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/export_wl13352_8017.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/std_data/upgrade/data_80011_ci_win.zip",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/include/ctype_utf8mb4.inc",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/include/subquery_sj.inc",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_le/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-2-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-2-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-2-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-2-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-2-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-2-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-1-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-1-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-1-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-1-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-1-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-1-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-3-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-3-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-3-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-3-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-3-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-3-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-4-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-4-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-4-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-4-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-4-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor_fk/BACKUP-1-PART-4-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/bug54613/BACKUP-2.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_disk_data_backup/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_disk_data_backup/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_disk_data_backup/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_disk_data_backup/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_disk_data_backup/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_disk_data_backup/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/76_inplace_upgrade_backup/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/76_inplace_upgrade_backup/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/76_inplace_upgrade_backup/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/76_inplace_upgrade_backup/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/76_inplace_upgrade_backup/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/76_inplace_upgrade_backup/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/before_native_default/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/packed/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/packed/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/packed/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_be/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_basic_backup/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_basic_backup/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_basic_backup/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_basic_backup/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_basic_backup/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_basic_backup/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_fk_backup/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_fk_backup/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_fk_backup/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_fk_backup/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_fk_backup/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_fk_backup/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_dd/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_data_le/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_large_backup/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_large_backup/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_large_backup/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_large_backup/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_large_backup/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_large_backup/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51_d2_be/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/pre_75_partitioning_variants/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-2-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-2-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-2-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-2-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-2-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-2-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-1-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-1-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-1-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-1-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-1-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-1-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-3-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-3-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-3-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-3-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-3-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-3-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-4-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-4-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-4-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-4-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-4-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/undo_backup/BACKUP-1-PART-4-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/50/BACKUP-2.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/51/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-1-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-1-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-1-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-1-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-1-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-1-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-3-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-3-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-3-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-3-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-3-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-3-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-4-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-4-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-4-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-4-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-4-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/missing_part/BACKUP-1-PART-4-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/hashmap/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/wl946_pre/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/wl946_pre/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/wl946_pre/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/wl946_pre/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/wl946_pre/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/wl946_pre/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_advanced_backup/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_advanced_backup/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_advanced_backup/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_advanced_backup/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_advanced_backup/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_advanced_backup/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/bug17275798/BACKUP-1.21.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/bug17275798/BACKUP-1-0.21.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/bug17275798/BACKUP-1.21.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-2-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-2-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-2-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-2-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-2-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-2-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-1-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-1-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-1-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-1-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-1-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-1-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-3-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-3-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-3-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-3-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-3-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-3-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-4-OF-4/BACKUP-1.2.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-4-OF-4/BACKUP-1-0.2.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-4-OF-4/BACKUP-1.1.log",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-4-OF-4/BACKUP-1.1.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-4-OF-4/BACKUP-1-0.1.Data",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/backups/metadata_upgrade_80_minor/BACKUP-1-PART-4-OF-4/BACKUP-1.2.ctl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/r/ndb_grant.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/ndb/t/ndb_grant.later",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/perfschema/r/misc.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/perfschema/r/statement_digest_charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/perfschema/t/statement_digest_charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/innodb_fts/r/fulltext.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/innodb_fts/t/fulltext.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/innodb_fts/t/fulltext_left_join.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/gcol/r/gcol_bugfixes_latin1.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/gcol/t/gcol_bugfixes_latin1.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl_nogtid/t/rpl_row_mysqlbinlog.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl/r/rpl_row_jsondiff_error.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl/r/rpl_charset_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl/r/rpl_charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl/r/rpl_secondary_engine_load.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl/r/rpl_set_charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl/t/rpl_set_charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/rpl/t/rpl_charset_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/update-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/write-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/bug32407.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/write-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/ver_trunk_row_v2.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/bug11747887-bin.000003",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/ver_5_1_23.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-wl2325_r.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/update-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/std_data/ver_5_1-wl2325_s.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/r/binlog_table_map_optional_metadata.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog/t/binlog_mysqlbinlog-cp932.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/test_services/include/test_udf_extension_services.inc",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/funcs_1/lib/DataGen_local.pl",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/opt_trace/r/charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/opt_trace/t/charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0208_ucs2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0212_ucs2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0201_sjis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0208_ujis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0208_sjis3.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0201_ujis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0212_ujis.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/std_data/jisx0201_ucs2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/include/trim_sjis.inc",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_rtrim_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_join_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_create_tbl_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_alter_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_join_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_create_db_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_trim_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_join_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_charset_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_create_tbl_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_ps_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_reverse_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_substring_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_insert_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_replace_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_replace_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_trim_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_substring_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_charlength_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_subquery_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_reverse_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_select_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_length_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_where_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_subquery_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_create_db_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_convert_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_insert_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_like_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_union_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_convert_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_right_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_trim_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_reverse_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_substring_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_subquery_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_update_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_alter_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_enum_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_like_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_replace_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_left_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_update_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_instr_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_alter_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_convert_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_length_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_ps_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_like_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_locate_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_charlength_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_rtrim_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_enum_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_right_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_create_db_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_enum_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_lpad_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_charlength_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_left_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_charset_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_rpad_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_left_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_locate_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_charset_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_lpad_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_ltrim_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_select_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_rtrim_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_select_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_where_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_lpad_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_create_tbl_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_update_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_locate_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_instr_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_where_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_rpad_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_instr_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_insert_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_ltrim_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_rpad_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_length_ucs2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_right_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/r/jp_ltrim_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_rpad_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_ps_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_left_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_alter_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_create_tbl_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_ps_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_charset_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_create_db_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_insert_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_join_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_enum_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_charlength_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_instr_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_update_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_substring_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_subquery_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_reverse_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_locate_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_create_tbl_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_locate_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_create_tbl_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_where_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_insert_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_join_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_union_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_instr_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_substring_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_subquery_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_convert_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_replace_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_like_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_left_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_select_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_enum_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_enum_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_join_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_length_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_insert_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_select_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_length_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_right_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_reverse_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_instr_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_alter_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_convert_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_subquery_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_charlength_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_rtrim_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_charset_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_convert_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_ltrim_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_like_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_where_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_lpad_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_create_db_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_lpad_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_rpad_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_like_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_right_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_locate_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_length_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_right_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_select_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_reverse_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_update_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_left_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_rtrim_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_charset_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_ltrim_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_rpad_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_rtrim_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_ltrim_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_trim_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_where_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_trim_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_replace_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_create_db_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_substring_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_lpad_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_charlength_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_replace_ucs2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_alter_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/jp/t/jp_update_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/tokudb/r/ctype_collate.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/tokudb/r/ctype_cp1250_ch.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/tokudb/t/ctype_collate.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/tokudb/t/ctype_cp1250_ch.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/update-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/write-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/bug32407.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/write-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/ver_trunk_row_v2.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/bug11747887-bin.000003",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/ver_5_1_23.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/ver_5_1-wl2325_r.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/update-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/std_data/ver_5_1-wl2325_s.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/r/binlog_stm_ctype_cp932.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/r/binlog_row_ctype_cp932.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/r/binlog_mysqlbinlog_row_innodb.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/r/binlog_mysqlbinlog_row_myisam.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_nogtid/r/binlog_mysqlbinlog_row.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_index.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_column.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_table.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/r/jp_comment_older_compatibility1.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_column.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_older_compatibility1.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_index.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/funcs/t/jp_comment_table.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/engines/iuds/r/type_bit_iuds.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/r/collation_database_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/r/character_set_results_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/r/collation_server_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/r/collation_connection_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/r/character_set_connection_basic.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/r/character_set_client_func.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/t/character_set_results_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/t/character_set_client_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/t/character_set_connection_basic.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/t/collation_database_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/t/collation_server_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/sys_vars/t/collation_connection_func.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/innodb/r/innodb_bug11789106.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/update-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/write-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/bug32407.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/write-partial-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/ver_trunk_row_v2.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/bug11747887-bin.000003",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/ver_5_1_23.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/ver_5_1-wl2325_r.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/update-full-row.binlog",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/std_data/ver_5_1-wl2325_s.001",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/r/binlog_gtid_mysqlbinlog_row_myisam.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/r/binlog_gtid_mysqlbinlog_row.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/suite/binlog_gtid/r/binlog_gtid_mysqlbinlog_row_innodb.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/extra/binlog_tests/ctype_cp932.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/extra/rpl_tests/rpl_charset.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_big5.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_ucs.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/partition_hash.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_utf8mb4_innodb.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/opt_hints.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_utf8mb4_heap.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/mysql_cp932.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/type_set.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/errors.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_collate.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/fulltext.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_utf8mb4.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/component_string_service_charset.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/type_datetime.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/mysqldump.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/comment_column2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/sp.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_sjis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/cast.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_latin1_de.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/csv.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_gb18030_binlog.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/lead_lag.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_ujis.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/date_formats.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ddl_i18n_koi8r.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/binary.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/mysqltest.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ps.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_many.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/func_like.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_latin2.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_tis620_myisam.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/type_decimal.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_latin1.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_utf8mb4_myisam.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/log_tables.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_utf8.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_gb18030_encoding_cn.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/union.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_recoding.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/explain.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/parser.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/outfile_loaddata.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ctype_cp1250_ch.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/events_bugs.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/ddl_i18n_utf8.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/alter_table.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/func_uuid.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/type_enum.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/show_check_cs.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/show_check_ci.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/events_1.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/varbinary.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/func_digest.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/r/grant.result",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/type_set.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_big5.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_latin1.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_utf8.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/sp.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/union.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_ucs.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/show_check_cs.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/cast.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/comment_column2.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/parser.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/func_like.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_gb18030_binlog.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_ujis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_gb18030_encoding_cn.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/errors.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/events_bugs.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/binary.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/mysql_cp932.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_recoding.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/fulltext.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_tis620_myisam.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/temptable_dump.sql.gz",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_latin1_de.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/events_1.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/explain.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/opt_hints.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ps.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_collate.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_sjis.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_utf8mb4.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/fulltext_left_join.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ddl_i18n_koi8r.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/mysqltest.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/alter_table.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_many.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_cp1250_ch.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/type_decimal.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/log_tables.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/grant.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ctype_filesystem-master.opt",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/ddl_i18n_utf8.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/mysql-test/t/type_enum.test",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/sql/MSG00001.bin",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/doxygen_resources/logo-mysql-110x55.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/doc/source/percona-xtrabackup-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/doc/source/percona-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/doc/source/percona_favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/doc/source/percona-xtradb.png",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/doc/source/percona-server-logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-percona-server-8.0.20-11-fj5u46a7lpaj3qlyhtc4sz6lcgvskjiq/spack-src/libmysql/authentication_ldap/auth_ldap_kerberos.h"
    ],
    "total_files": 44426
}