{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/bcftools-1.1/vcfplugin.c": "/*  vcfannotate.c -- Annotate and edit VCF/BCF files.\n\n    Copyright (C) 2013-2014 Genome Research Ltd.\n\n    Author: Petr Danecek <pd3@sanger.ac.uk>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.  */\n\n#include <stdio.h>\n#include <unistd.h>\n#include <getopt.h>\n#include <ctype.h>\n#include <string.h>\n#include <errno.h>\n#include <sys/stat.h>\n#include <sys/types.h>\n#include <dirent.h>\n#include <math.h>\n#include <htslib/vcf.h>\n#include <htslib/synced_bcf_reader.h>\n#include <htslib/kseq.h>\n#include <htslib/khash_str2int.h>\n#include <dlfcn.h>\n#include \"bcftools.h\"\n#include \"vcmp.h\"\n#include \"filter.h\"\n\ntypedef struct _plugin_t plugin_t;\n\n/**\n *   Plugin API:\n *   ----------\n *   const char *about(void)\n *      - short description used by 'bcftools plugin -l'\n *\n *   const char *usage(void)\n *      - longer description used by 'bcftools +name -h'\n *\n *   int init(int argc, char **argv, bcf_hdr_t *in_hdr, bcf_hdr_t *out_hdr)\n *      - called once at startup, allows to initialize local variables.\n *      Return 1 to suppress normal VCF/BCF header output, -1 on critical\n *      errors, 0 otherwise.\n *\n *   bcf1_t *process(bcf1_t *rec)\n *      - called for each VCF record, return NULL for no output\n *\n *   void destroy(void)\n *      - called after all lines have been processed to clean up\n */\ntypedef void (*dl_version_f) (const char **, const char **);\ntypedef int (*dl_init_f) (int, char **, bcf_hdr_t *, bcf_hdr_t *);\ntypedef char* (*dl_about_f) (void);\ntypedef char* (*dl_usage_f) (void);\ntypedef bcf1_t* (*dl_process_f) (bcf1_t *);\ntypedef void (*dl_destroy_f) (void);\n\nstruct _plugin_t\n{\n    int argc;\n    char *name, **argv;\n    dl_version_f version;\n    dl_init_f init;\n    dl_about_f about;\n    dl_usage_f usage;\n    dl_process_f process;\n    dl_destroy_f destroy;\n    void *handle;\n};\n\n\nstruct _args_t;\n\ntypedef struct _rm_tag_t\n{\n    char *key;\n    int hdr_id;\n    void (*handler)(struct _args_t *, bcf1_t *, struct _rm_tag_t *);\n}\nrm_tag_t;\n\ntypedef struct\n{\n    char **cols;\n    int ncols, mcols;\n    char **als;\n    int nals, mals;\n    kstring_t line;\n    int rid, start, end;\n}\nannot_line_t;\n\ntypedef struct _annot_col_t\n{\n    int icol, replace;\n    char *hdr_key;\n    int (*setter)(struct _args_t *, bcf1_t *, struct _annot_col_t *, void*);\n}\nannot_col_t;\n\n// Logic of the filters: include or exclude sites which match the filters?\n#define FLT_INCLUDE 1\n#define FLT_EXCLUDE 2\n\ntypedef struct _args_t\n{\n    bcf_srs_t *files;\n    bcf_hdr_t *hdr, *hdr_out;\n    htsFile *out_fh;\n    int output_type;\n\n    filter_t *filter;\n    char *filter_str;\n    int filter_logic;   // include or exclude sites which match the filters? One of FLT_INCLUDE/FLT_EXCLUDE\n\n    plugin_t plugin;\n    int nplugin_paths;\n    char **plugin_paths;\n\n    char **argv, *output_fname, *regions_list, *targets_list;\n    int argc, drop_header, verbose;\n}\nargs_t;\n\nchar *msprintf(const char *fmt, ...);\n\nstatic void init_plugin_paths(args_t *args)\n{\n    if ( args->nplugin_paths!=-1 ) return;\n\n    char *path = getenv(\"BCFTOOLS_PLUGINS\");\n    if ( path )\n    {\n        args->nplugin_paths = 1;\n        args->plugin_paths  = (char**) malloc(sizeof(char*));\n        char *ss = args->plugin_paths[0] = strdup(path);\n        while ( *ss )\n        {\n            if ( *ss==':' )\n            {\n                *ss = 0;\n                args->plugin_paths = (char**) realloc(args->plugin_paths,sizeof(char*)*(args->nplugin_paths+1));\n                args->plugin_paths[args->nplugin_paths] = ss+1;\n                args->nplugin_paths++;\n            }\n            ss++;\n        }\n    }\n    else\n        args->nplugin_paths = 0;\n}\n\nstatic void *dlopen_plugin(args_t *args, const char *fname)\n{\n    init_plugin_paths(args);\n\n    void *handle;\n    char *tmp;\n    if ( fname[0]!='/' )    // not an absolute path\n    {\n        int i;\n        for (i=0; i<args->nplugin_paths; i++)\n        {\n            tmp = msprintf(\"%s/%s.so\", args->plugin_paths[i],fname);\n            handle = dlopen(tmp, RTLD_NOW); // valgrind complains about unfreed memory, not our problem though\n            if ( args->verbose )\n            {\n                if ( !handle ) fprintf(stderr,\"%s:\\n\\t%s\\n\", tmp,dlerror());\n                else fprintf(stderr,\"%s: ok\\n\", tmp);\n            }\n            free(tmp);\n            if ( handle ) return handle;\n        }\n    }\n\n    handle = dlopen(fname, RTLD_NOW);\n    if ( args->verbose )\n    {\n        if ( !handle ) fprintf(stderr,\"%s:\\n\\t%s\\n\", fname,dlerror());\n        else fprintf(stderr,\"%s: ok\\n\", fname);\n    }\n\n    return handle;\n}\n\nstatic void print_plugin_usage_hint(void)\n{\n    fprintf(stderr, \"\\nNo functional bcftools plugins were found\");\n    if ( !getenv(\"BCFTOOLS_PLUGINS\") )\n        fprintf(stderr,\". The environment variable BCFTOOLS_PLUGINS is not set.\\n\\n\");\n    else\n        fprintf(stderr,\n                \" in BCFTOOLS_PLUGINS=\\\"%s\\\".\\n\\n\"\n                \"- Is the plugin path correct?\\n\\n\"\n                \"- Are all shared libraries, namely libhts.so, accessible? Verify with\\n\"\n                \"   on Mac OS X: `otool -L your/plugin.so` and set DYLD_LIBRARY_PATH if they are not\\n\"\n                \"   on Linux:    `ldd your/plugin.so` and set LD_LIBRARY_PATH if they are not\\n\"\n                \"\\n\"\n                \"- If not installed systemwide, set the environment variable LD_LIBRARY_PATH (linux) or\\n\"\n                \"DYLD_LIBRARY_PATH (mac) to include directory where *libhts.so* is located.\\n\"\n                \"\\n\",\n                getenv(\"BCFTOOLS_PLUGINS\")\n               );\n}\n\nstatic int load_plugin(args_t *args, const char *fname, int exit_on_error, plugin_t *plugin)\n{\n    plugin->name = strdup(fname);\n\n    plugin->handle = dlopen_plugin(args, fname);\n    if ( !plugin->handle )\n    {\n        if ( exit_on_error )\n        {\n            print_plugin_usage_hint();\n            error(\"Could not load \\\"%s\\\".\\n\\n\", fname);\n        }\n        return -1;\n    }\n\n    dlerror();\n    plugin->init = (dl_init_f) dlsym(plugin->handle, \"init\");\n    char *ret = dlerror();\n    if ( ret )\n    {\n        if ( exit_on_error ) error(\"Could not initialize %s: %s\\n\", plugin->name, ret);\n        return -1;\n    }\n\n    plugin->version = (dl_version_f) dlsym(plugin->handle, \"version\");\n    ret = dlerror();\n    if ( ret )\n    {\n        if ( exit_on_error ) error(\"Could not initialize %s: %s\\n\", plugin->name, ret);\n        return -1;\n    }\n\n    plugin->about = (dl_about_f) dlsym(plugin->handle, \"about\");\n    ret = dlerror();\n    if ( ret )\n    {\n        if ( exit_on_error ) error(\"Could not initialize %s: %s\\n\", plugin->name, ret);\n        return -1;\n    }\n\n    plugin->usage = (dl_about_f) dlsym(plugin->handle, \"usage\");\n    ret = dlerror();\n    if ( ret )\n        plugin->usage = plugin->about;\n\n    plugin->process = (dl_process_f) dlsym(plugin->handle, \"process\");\n    ret = dlerror();\n    if ( ret )\n    {\n        if ( exit_on_error ) error(\"Could not initialize %s: %s\\n\", plugin->name, ret);\n        return -1;\n    }\n\n    plugin->destroy = (dl_destroy_f) dlsym(plugin->handle, \"destroy\");\n    ret = dlerror();\n    if ( ret )\n    {\n        if ( exit_on_error ) error(\"Could not initialize %s: %s\\n\", plugin->name, ret);\n        return -1;\n    }\n\n    return 0;\n}\n\nstatic void init_plugin(args_t *args)\n{\n    static int warned_bcftools = 0, warned_htslib = 0;\n\n    int ret = args->plugin.init(args->plugin.argc,args->plugin.argv,args->hdr,args->hdr_out);\n    if ( ret<0 ) error(\"The plugin exited with an error: %s\\n\", args->plugin.name);\n    const char *bver, *hver;\n    args->plugin.version(&bver, &hver);\n    if ( strcmp(bver,bcftools_version()) && !warned_bcftools )\n    {\n        fprintf(stderr,\"WARNING: bcftools version mismatch .. bcftools at %s, the plugin \\\"%s\\\" at %s\\n\", bcftools_version(),args->plugin.name,bver);\n        warned_bcftools = 1;\n    }\n    if ( strcmp(hver,hts_version()) && !warned_htslib )\n    {\n        fprintf(stderr,\"WARNING: htslib version mismatch .. bcftools at %s, the plugin \\\"%s\\\" at %s\\n\", hts_version(),args->plugin.name,hver);\n        warned_htslib = 1;\n    }\n    args->drop_header += ret;\n}\n\nstatic int cmp_plugin_name(const void *p1, const void *p2)\n{\n    plugin_t *a = (plugin_t*) p1;\n    plugin_t *b = (plugin_t*) p2;\n    return strcmp(a->name,b->name);\n}\n\nstatic int list_plugins(args_t *args)\n{\n    plugin_t *plugins = NULL;\n    int nplugins = 0, mplugins = 0;\n\n    init_plugin_paths(args);\n\n    kstring_t str = {0,0,0};\n    int i;\n    for (i=0; i<args->nplugin_paths; i++)\n    {\n        DIR *dp = opendir(args->plugin_paths[i]);\n        if ( dp==NULL ) continue;\n\n        struct dirent *ep;\n        while ( (ep=readdir(dp)) )\n        {\n            int len = strlen(ep->d_name);\n            if ( strcasecmp(\".so\",ep->d_name+len-3) ) continue;\n            str.l = 0;\n            ksprintf(&str,\"%s/%s\", args->plugin_paths[i],ep->d_name);\n            hts_expand(plugin_t, nplugins+1, mplugins, plugins);\n            if ( load_plugin(args, str.s, 0, &plugins[nplugins]) < 0 ) continue;\n            nplugins++;\n            str.l = 0;\n            kputs(ep->d_name, &str);\n            int l = str.l - 1;\n            while ( l>=0 && str.s[l]!='.' ) l--;\n            if ( l>=0 ) str.s[l] = 0;\n            free(plugins[nplugins-1].name);\n            plugins[nplugins-1].name = strdup(str.s);  // use a short name\n        }\n        closedir(dp);\n    }\n    if ( nplugins )\n    {\n        qsort(plugins, nplugins, sizeof(plugins[0]), cmp_plugin_name);\n\n        for (i=0; i<nplugins; i++)\n            printf(\"\\n-- %s --\\n%s\", plugins[i].name, plugins[i].about());\n        printf(\"\\n\");\n    }\n    else\n        print_plugin_usage_hint();\n    free(str.s);\n    return nplugins ? 0 : 1;\n}\n\nstatic void init_data(args_t *args)\n{\n    args->hdr = args->files->readers[0].header;\n    args->hdr_out = bcf_hdr_dup(args->hdr);\n\n    init_plugin(args);\n\n    if ( args->filter_str )\n        args->filter = filter_init(args->hdr, args->filter_str);\n\n    bcf_hdr_append_version(args->hdr_out, args->argc, args->argv, \"bcftools_plugin\");\n    if ( !args->drop_header )\n    {\n        args->out_fh = hts_open(args->output_fname,hts_bcf_wmode(args->output_type));\n        if ( args->out_fh == NULL ) error(\"Can't write to \\\"%s\\\": %s\\n\", args->output_fname, strerror(errno));\n        bcf_hdr_write(args->out_fh, args->hdr_out);\n    }\n}\n\nstatic void destroy_data(args_t *args)\n{\n    free(args->plugin.name);\n    args->plugin.destroy();\n    dlclose(args->plugin.handle);\n    if ( args->hdr_out ) bcf_hdr_destroy(args->hdr_out);\n    if ( args->nplugin_paths>0 )\n    {\n        free(args->plugin_paths[0]);\n        free(args->plugin_paths);\n    }\n    if ( args->filter )\n        filter_destroy(args->filter);\n    if (args->out_fh) hts_close(args->out_fh);\n}\n\nstatic void usage(args_t *args)\n{\n    fprintf(stderr, \"\\n\");\n    fprintf(stderr, \"About:   Run user defined plugin\\n\");\n    fprintf(stderr, \"Usage:   bcftools plugin <name> [OPTIONS] <file>\\n\");\n    fprintf(stderr, \"         bcftools +name [OPTIONS] <file>\\n\");\n    fprintf(stderr, \"\\n\");\n    fprintf(stderr, \"VCF input options:\\n\");\n    fprintf(stderr, \"   -e, --exclude <expr>        exclude sites for which the expression is true\\n\");\n    fprintf(stderr, \"   -i, --include <expr>        select sites for which the expression is true\\n\");\n    fprintf(stderr, \"   -r, --regions <region>      restrict to comma-separated list of regions\\n\");\n    fprintf(stderr, \"   -R, --regions-file <file>   restrict to regions listed in a file\\n\");\n    fprintf(stderr, \"   -t, --targets <region>      similar to -r but streams rather than index-jumps\\n\");\n    fprintf(stderr, \"   -T, --targets-file <file>   similar to -R but streams rather than index-jumps\\n\");\n    fprintf(stderr, \"VCF output options:\\n\");\n    fprintf(stderr, \"   -o, --output <file>         write output to a file [standard output]\\n\");\n    fprintf(stderr, \"   -O, --output-type <type>    'b' compressed BCF; 'u' uncompressed BCF; 'z' compressed VCF; 'v' uncompressed VCF [v]\\n\");\n    fprintf(stderr, \"Plugin options:\\n\");\n    fprintf(stderr, \"   -h, --help                  list plugin's options\\n\");\n    fprintf(stderr, \"   -l, --list-plugins          list available plugins. See BCFTOOLS_PLUGINS environment variable and man page for details\\n\");\n    fprintf(stderr, \"   -v, --verbose               print debugging information on plugin failure\\n\");\n    fprintf(stderr, \"\\n\");\n    exit(1);\n}\n\nint main_plugin(int argc, char *argv[])\n{\n    int c;\n    args_t *args  = (args_t*) calloc(1,sizeof(args_t));\n    args->argc    = argc; args->argv = argv;\n    args->files   = bcf_sr_init();\n    args->output_fname = \"-\";\n    args->output_type = FT_VCF;\n    args->nplugin_paths = -1;\n    int regions_is_file = 0, targets_is_file = 0, plist_only = 0;\n\n    if ( argc==1 ) usage(args);\n    char *plugin_name = NULL;\n    if ( argv[1][0]!='-' ) { plugin_name = argv[1]; argc--; argv++; }\n\n    static struct option loptions[] =\n    {\n        {\"verbose\",0,0,'v'},\n        {\"help\",0,0,'h'},\n        {\"list-plugins\",0,0,'l'},\n        {\"output\",1,0,'o'},\n        {\"output-type\",1,0,'O'},\n        {\"include\",1,0,'i'},\n        {\"exclude\",1,0,'e'},\n        {\"regions\",1,0,'r'},\n        {\"regions-file\",1,0,'R'},\n        {\"targets\",1,0,'t'},\n        {\"targets-file\",1,0,'T'},\n        {0,0,0,0}\n    };\n    while ((c = getopt_long(argc, argv, \"h?o:O:r:R:li:e:v\",loptions,NULL)) >= 0)\n    {\n        switch (c) {\n            case 'v': args->verbose = 1; break;\n            case 'o': args->output_fname = optarg; break;\n            case 'O':\n                switch (optarg[0]) {\n                    case 'b': args->output_type = FT_BCF_GZ; break;\n                    case 'u': args->output_type = FT_BCF; break;\n                    case 'z': args->output_type = FT_VCF_GZ; break;\n                    case 'v': args->output_type = FT_VCF; break;\n                    default: error(\"The output type \\\"%s\\\" not recognised\\n\", optarg);\n                };\n                break;\n            case 'e': args->filter_str = optarg; args->filter_logic |= FLT_EXCLUDE; break;\n            case 'i': args->filter_str = optarg; args->filter_logic |= FLT_INCLUDE; break;\n            case 'r': args->regions_list = optarg; break;\n            case 'R': args->regions_list = optarg; regions_is_file = 1; break;\n            case 't': args->targets_list = optarg; break;\n            case 'T': args->targets_list = optarg; targets_is_file = 1; break;\n            case 'l': plist_only = 1; break;\n            case '?':\n            case 'h': load_plugin(args, plugin_name, 1, &args->plugin); fprintf(stderr,\"%s\",args->plugin.usage()); return 0; break;\n            default: error(\"Unknown argument: %s\\n\", optarg);\n        }\n    }\n    if ( plist_only )  return list_plugins(args);\n\n    char *fname = NULL;\n    if ( optind>=argc || argv[optind][0]=='-' )\n    {\n        if ( !isatty(fileno((FILE *)stdin)) ) fname = \"-\";  // reading from stdin\n        else usage(args);\n        args->plugin.argc = argc - optind + 1;\n        args->plugin.argv = argv + optind - 1;\n    }\n    else\n    {\n        fname = argv[optind];\n        args->plugin.argc = argc - optind;\n        args->plugin.argv = argv + optind;\n    }\n    optind = 0;\n    args->plugin.argv[0] = plugin_name;\n    load_plugin(args, plugin_name, 1, &args->plugin);\n\n    if ( args->regions_list )\n    {\n        if ( bcf_sr_set_regions(args->files, args->regions_list, regions_is_file)<0 )\n            error(\"Failed to read the regions: %s\\n\", args->regions_list);\n    }\n    if ( args->targets_list )\n    {\n        if ( bcf_sr_set_targets(args->files, args->targets_list, targets_is_file, 0)<0 )\n            error(\"Failed to read the targets: %s\\n\", args->targets_list);\n        args->files->collapse |= COLLAPSE_SOME;\n    }\n    if ( !bcf_sr_add_reader(args->files, fname) ) error(\"Failed to open or the file not indexed: %s\\n\", fname);\n\n    init_data(args);\n    while ( bcf_sr_next_line(args->files) )\n    {\n        bcf1_t *line = bcf_sr_get_line(args->files,0);\n        if ( args->filter )\n        {\n            int pass = filter_test(args->filter, line, NULL);\n            if ( args->filter_logic & FLT_EXCLUDE ) pass = pass ? 0 : 1;\n            if ( !pass ) continue;\n        }\n        line = args->plugin.process(line);\n        if ( line ) bcf_write1(args->out_fh, args->hdr_out, line);\n    }\n    destroy_data(args);\n    bcf_sr_destroy(args->files);\n    free(args);\n    return 0;\n}\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/protocol_bundle-0.5.3.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/dat/test_input_1_b.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/dat/test_input_1_c.bam.bai",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/dat/test_input_1_b.bam.bai",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/dat/test_input_1_a.bam.bai",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/dat/test_input_1_a.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/dat/test_input_1_c.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/mpileup.1.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#unmap2.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/xx#minimal.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#5b.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/1read.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#5b.cram.crai",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/c1#ID2.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/mpileup.1.bam.bai",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#unmap.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/xx#triplet.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/mpileup.2.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/mpileup.3.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/c1#ID.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#5b.cram",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/c1#pad1.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#5b.bam.bai",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/overlapIllumina.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#unmap1.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/ce#large_seq.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/c1#pad3.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/c1#pad2.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/mpileup-E.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/c1#clip.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/mpileup/expected/1.out.xz",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/merge/3.merge.expected.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/test/merge/2.merge.expected.bam",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/examples/ex1.sam.gz",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/win32/libz.a",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/samtools-1.1/win32/libcurses.a",
        "/tmp/vanessa/spack-stage/spack-stage-scalpel-0.5.3-dhgqfiu3qlsdvkmwtm7pvprhfeff4zmc/spack-src/bcftools-1.1/test/ex1.gtf.gz"
    ],
    "total_files": 1005
}