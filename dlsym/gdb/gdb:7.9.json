{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 56 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# `#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest $lt_write_fail = 0 && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2009 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest \"$silent\" = yes &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '/^# Generated shell functions inserted here/q' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_XSI_SHELLFNS\n\n  sed -n '/^# Generated shell functions inserted here/,$p' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\tif test -f libconftest.dylib && test ! -s conftest.err && test $_lt_result = 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -f conftest && test ! -s conftest.err && test $_lt_result = 0 && $GREP forced_load conftest 2>&1 >/dev/null; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]][[,.]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\" && test \"$lt_cv_ld_force_load\" = \"no\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES\n# --------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test \"$lt_cv_ld_force_load\" = \"yes\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience ${wl}-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX\n# -----------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nAC_LINK_IFELSE(AC_LANG_PROGRAM,[\nlt_aix_libpath_sed='\n    /Import File Strings/,/^$/ {\n\t/^0/ {\n\t    s/^0  *\\(.*\\)$/\\1/\n\t    p\n\t}\n    }'\naix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n# Check for a 64-bit object if we didn't find anything.\nif test -z \"$aix_libpath\"; then\n  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\nfi],[])\nif test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script which will find a shell with a builtin\n# printf (which we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`print -r -- -n 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\" \n}\n\ncase \"$ECHO\" in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*linux*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*linux*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\nsparc*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*) LD=\"${LD-ld} -m elf64_sparc\" ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[AC_CHECK_TOOL(AR, ar, false)\ntest -z \"$AR\" && AR=ar\ntest -z \"$AR_FLAGS\" && AR_FLAGS=cru\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1])\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`func_fallback_echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line __oline__ \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nvoid fnord () __attribute__((visibility(\"default\")));\n#endif\n\nvoid fnord () { int i=42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq=\"s,=\\([[A-Za-z]]:\\),\\1,g\" ;;\n    *) lt_sed_strip_eq=\"s,=/,/,g\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's,/\\([[A-Za-z]]:\\),\\1,g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$host_os in\n  yes,cygwin* | yes,mingw* | yes,pw32* | yes,cegcc*)\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    ;;\n\n  *)\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    ;;\n  esac\n  dynamic_linker='Win32 ld.exe'\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  ;;\n\nhaiku*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/beos/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  # func_win32_libid assumes BSD nm, so disallow it if using MS dumpbin.\n  if ( test \"$lt_cv_nm_interface\" = \"BSD nm\" && file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method == \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nconst struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_save_LIBS=\"$LIBS\"\n\t  lt_save_CFLAGS=\"$CFLAGS\"\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=\"$lt_save_LIBS\"\n\t  CFLAGS=\"$lt_save_CFLAGS\"\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nAC_MSG_CHECKING([for $compiler option to produce PIC])\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-Xcompiler -fPIC'\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\nAC_MSG_RESULT([$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    # Also, AIX nm treats weak defined symbols like other global defined\n    # symbols, whereas GNU nm marks them as \"W\".\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n  ;;\n  cygwin* | mingw* | cegcc*)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;/^.*[[ ]]__nm__/s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  esac\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test \"$with_gnu_ld\" = yes; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test \"$lt_use_gnu_ld_interface\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='-rpath $libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $compiler_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $compiler_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  if test \"$with_gnu_ld\" = yes; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Tell ltmain to make .lib files, not .a files.\n      libext=lib\n      # Tell ltmain to make .dll files, not .so files.\n      shrext_cmds=\".dll\"\n      # FIXME: Setting linknames here is a bad hack.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n      # The linker will automatically build a .lib file if we build a DLL.\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n      # FIXME: Should let the user specify the lib program.\n      _LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n      _LT_TAGVAR(fix_srcfile_path, $1)='`cygpath -w \"$srcfile\"`'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n        save_LDFLAGS=\"$LDFLAGS\"\n        LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n        AC_LINK_IFELSE(int foo(void) {},\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n        )\n        LDFLAGS=\"$save_LDFLAGS\"\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec_ld], [1],\n    [[If ld is used when linking, flag to hardcode $libdir into a binary\n    during linking.  This must work even if $libdir does not exist]])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [fix_srcfile_path], [1],\n    [Fix the shell variable $srcfile for the compiler])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    if test \"$with_gnu_ld\" = yes; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n        # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n        # as there is no search path for DLLs.\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n        _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n        _LT_TAGVAR(always_export_symbols, $1)=no\n        _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n        if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n          # If the export-symbols file already is a .def file (1st line\n          # is EXPORTS), use it as is; otherwise, prepend...\n          _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    cp $export_symbols $output_objdir/$soname.def;\n          else\n\t    echo EXPORTS > $output_objdir/$soname.def;\n\t    cat $export_symbols >> $output_objdir/$soname.def;\n          fi~\n          $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n        else\n          _LT_TAGVAR(ld_shlibs, $1)=no\n        fi\n        ;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n\t      '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n\t      '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n])\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       else\n\t prev=\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case $p in\n\t -L* | -R*)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       ;;\n\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${F77-\"f77\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${FC-\"f95\"}\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=\"$lt_save_CC\"\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_XSI_SHELLFNS\n# ---------------------\n# Bourne and XSI compatible variants of some useful shell functions.\nm4_defun([_LT_PROG_XSI_SHELLFNS],\n[case $xsi_shell in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nfunc_stripname ()\n{\n  # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n  # positional parameters, so assign one to ordinary parameter first.\n  func_stripname_result=${3}\n  func_stripname_result=${func_stripname_result#\"${1}\"}\n  func_stripname_result=${func_stripname_result%\"${2}\"}\n}\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=${1%%=*}\n  func_opt_split_arg=${1#*=}\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  case ${1} in\n    *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n    *)    func_lo2o_result=${1} ;;\n  esac\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=${1%.*}.lo\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=$(( $[*] ))\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=${#1}\n}\n\n_LT_EOF\n    ;;\n  *) # Bourne compatible functions.\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"${1}\" | $SED \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=`$ECHO \"${1}\" | $SED \"$basename\"`\n}\n\ndnl func_dirname_and_basename\ndnl A portable version of this function is already defined in general.m4sh\ndnl so there is no need for it here.\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n  case ${2} in\n    .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n    *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n  esac\n}\n\n# sed scripts:\nmy_sed_long_opt='1s/^\\(-[[^=]]*\\)=.*/\\1/;q'\nmy_sed_long_arg='1s/^-[[^=]]*=//'\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=`$ECHO \"${1}\" | $SED \"$my_sed_long_opt\"`\n  func_opt_split_arg=`$ECHO \"${1}\" | $SED \"$my_sed_long_arg\"`\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  func_lo2o_result=`$ECHO \"${1}\" | $SED \"$lo2o\"`\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=`$ECHO \"${1}\" | $SED 's/\\.[[^.]]*$/.lo/'`\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=`expr \"$[@]\"`\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=`expr \"$[1]\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n}\n\n_LT_EOF\nesac\n\ncase $lt_shell_append in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]+=\\$[2]\"\n}\n_LT_EOF\n    ;;\n  *)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]=\\$$[1]\\$[2]\"\n}\n\n_LT_EOF\n    ;;\n  esac\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/ltmain.sh": "# Generated from ltmain.m4sh.\n\n# libtool (GNU libtool 1.3134 2009-11-29) 2.2.7a\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n# 2007, 2008, 2009 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#       --config             show all configuration variables\n#       --debug              enable verbose shell tracing\n#   -n, --dry-run            display commands without modifying any files\n#       --features           display basic configuration information and exit\n#       --mode=MODE          use operation mode MODE\n#       --no-finish          let install mode avoid finish commands\n#       --preserve-dup-deps  don't remove duplicate dependency libraries\n#       --quiet, --silent    don't print informational messages\n#       --no-quiet, --no-silent\n#                            print informational messages (default)\n#       --tag=TAG            use configuration variables from tag TAG\n#   -v, --verbose            print more informational messages than default\n#       --no-verbose         don't print the extra informational messages\n#       --version            print version information\n#   -h, --help, --help-all   print short, long, or detailed help message\n#\n# MODE must be one of the following:\n#\n#         clean              remove files from the build directory\n#         compile            compile a source file into a libtool object\n#         execute            automatically set library path, then run a program\n#         finish             complete the installation of libtool libraries\n#         install            install libraries or executables\n#         link               create a library or an executable\n#         uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.  When passed as first option,\n# `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#         host-triplet:\t$host\n#         shell:\t\t$SHELL\n#         compiler:\t\t$LTCC\n#         compiler flags:\t\t$LTCFLAGS\n#         linker:\t\t$LD (gnu? $with_gnu_ld)\n#         $progname:\t(GNU libtool 1.3134 2009-11-29) 2.2.7a\n#         automake:\t$automake_version\n#         autoconf:\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.2.7a\nTIMESTAMP=\" 1.3134 2009-11-29\"\npackage_revision=1.3134\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# NLS nuisances: We save the old values to restore during execute mode.\n# Only set LANG and LC_ALL to C if already set.\n# These must not be set unconditionally because not all systems understand\n# e.g. LANG=C (notably SCO).\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\n\n$lt_unset CDPATH\n\n\n\n\n\n\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n\n\n: ${CP=\"cp -f\"}\n: ${ECHO=$as_echo}\n: ${EGREP=\"/bin/grep -E\"}\n: ${FGREP=\"/bin/grep -F\"}\n: ${GREP=\"/bin/grep\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SED=\"/mount/endor/wildenhu/local-x86_64/bin/sed\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"${1}\" | $SED -e \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n  func_basename_result=`$ECHO \"${1}\" | $SED -e \"$basename\"`\n}\n\n# Generated shell functions inserted here.\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar='s,^/\\([^/]*\\).*$,\\1,'\npathcdr='s,^/[^/]*,,'\nremovedotparts=':dotsl\n\t\ts@/\\./@/@g\n\t\tt dotsl\n\t\ts,/\\.$,/,'\ncollapseslashes='s@/\\{1,\\}@/@g'\nfinalslash='s,/*$,/,'\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# The name of this program:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=:\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname${mode+: }$mode: $*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname${mode+: }$mode: \"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname${mode+: }$mode: warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"$my_directory_path\" | $SED -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"$my_dir_list\" | $SED 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"$my_tmpdir\"\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"$1\" | $SED \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $SED -n '/(C)/!b go\n\t:more\n\t/\\./!{\n\t  N\n\t  s/\\n# //\n\t  b more\n\t}\n\t:go\n\t/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $SED -n '/^# Usage:/,/^#  *-h/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    echo\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help [NOEXIT]\n# Echo long help message to standard output and exit,\n# unless 'noexit' is passed as argument.\nfunc_help ()\n{\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(automake --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(autoconf --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n     }' < \"$progpath\"\n    ret=$?\n    if test -z \"$1\"; then\n      exit $ret\n    fi\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    func_error \"missing argument for $1\"\n    exit_cmd=exit\n}\n\nexit_cmd=:\n\n\n\n\n\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\n# $mode is unset\nnonopt=\nexecute_dlfiles=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\nopt_dry_run=false\nopt_finish=:\nopt_duplicate_deps=false\nopt_silent=false\nopt_debug=:\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# Parse options once, thoroughly.  This comes as soon as possible in\n# the script to make things like `libtool --version' happen quickly.\n{\n\n  # Shorthand for --mode=foo, only valid as the first argument\n  case $1 in\n  clean|clea|cle|cl)\n    shift; set dummy --mode clean ${1+\"$@\"}; shift\n    ;;\n  compile|compil|compi|comp|com|co|c)\n    shift; set dummy --mode compile ${1+\"$@\"}; shift\n    ;;\n  execute|execut|execu|exec|exe|ex|e)\n    shift; set dummy --mode execute ${1+\"$@\"}; shift\n    ;;\n  finish|finis|fini|fin|fi|f)\n    shift; set dummy --mode finish ${1+\"$@\"}; shift\n    ;;\n  install|instal|insta|inst|ins|in|i)\n    shift; set dummy --mode install ${1+\"$@\"}; shift\n    ;;\n  link|lin|li|l)\n    shift; set dummy --mode link ${1+\"$@\"}; shift\n    ;;\n  uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n    shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n    ;;\n  esac\n\n  # Parse non-mode specific arguments:\n  while test \"$#\" -gt 0; do\n    opt=\"$1\"\n    shift\n\n    case $opt in\n      --config)\t\tfunc_config\t\t\t\t\t;;\n\n      --debug)\t\tpreserve_args=\"$preserve_args $opt\"\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\topt_debug='set -x'\n\t\t\t$opt_debug\n\t\t\t;;\n\n      -dlopen)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\texecute_dlfiles=\"$execute_dlfiles $1\"\n\t\t\tshift\n\t\t\t;;\n\n      --dry-run | -n)\topt_dry_run=:\t\t\t\t\t;;\n      --features)       func_features\t\t\t\t\t;;\n      --finish)\t\tmode=\"finish\"\t\t\t\t\t;;\n      --no-finish)\topt_finish=false\t\t\t\t;;\n\n      --mode)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tcase $1 in\n\t\t\t  # Valid mode arguments:\n\t\t\t  clean)\t;;\n\t\t\t  compile)\t;;\n\t\t\t  execute)\t;;\n\t\t\t  finish)\t;;\n\t\t\t  install)\t;;\n\t\t\t  link)\t\t;;\n\t\t\t  relink)\t;;\n\t\t\t  uninstall)\t;;\n\n\t\t\t  # Catch anything else as an error\n\t\t\t  *) func_error \"invalid argument for $opt\"\n\t\t\t     exit_cmd=exit\n\t\t\t     break\n\t\t\t     ;;\n\t\t        esac\n\n\t\t\tmode=\"$1\"\n\t\t\tshift\n\t\t\t;;\n\n      --preserve-dup-deps)\n\t\t\topt_duplicate_deps=:\t\t\t\t;;\n\n      --quiet|--silent)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=:\n\t\t\topt_verbose=false\n\t\t\t;;\n\n      --no-quiet|--no-silent)\n\t\t\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=false\n\t\t\t;;\n\n      --verbose| -v)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=false\n\t\t\topt_verbose=:\n\t\t\t;;\n\n      --no-verbose)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_verbose=false\n\t\t\t;;\n\n      --tag)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tpreserve_args=\"$preserve_args $opt $1\"\n\t\t\tfunc_enable_tag \"$1\"\t# tagname is set here\n\t\t\tshift\n\t\t\t;;\n\n      # Separate optargs to long options:\n      -dlopen=*|--mode=*|--tag=*)\n\t\t\tfunc_opt_split \"$opt\"\n\t\t\tset dummy \"$func_opt_split_opt\" \"$func_opt_split_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t\t;;\n      --help)\t\topt_help=:\t\t\t\t\t;;\n      --help-all)\topt_help=': help-all'\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t\t;;\n\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\"\t;;\n\n      *)\t\tnonopt=\"$opt\"\n\t\t\tbreak\n\t\t\t;;\n    esac\n  done\n\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc* | *solaris2* )\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_duplicate_deps\n      ;;\n  esac\n\n  # Having warned about all mis-specified options, bail out if\n  # anything was wrong.\n  $exit_cmd $EXIT_FAILURE\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n$opt_help || {\n  # Sanity checks first:\n  func_check_version_match\n\n  if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n    func_fatal_configuration \"not configured to build any kind of library\"\n  fi\n\n  test -z \"$mode\" && func_fatal_error \"error: you must specify a MODE.\"\n\n\n  # Darwin sucks\n  eval \"std_shrext=\\\"$shrext_cmds\\\"\"\n\n\n  # Only execute mode is allowed to have -dlopen flags.\n  if test -n \"$execute_dlfiles\" && test \"$mode\" != execute; then\n    func_error \"unrecognized option \\`-dlopen'\"\n    $ECHO \"$help\" 1>&2\n    exit $EXIT_FAILURE\n  fi\n\n  # Change the help message to a mode-specific one.\n  generic_help=\"$help\"\n  help=\"Try \\`$progname --help --mode=$mode' for more information.\"\n}\n\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_ltwrapper_scriptname_result=\"\"\n    if func_ltwrapper_executable_p \"$1\"; then\n\tfunc_dirname_and_basename \"$1\" \"\" \".\"\n\tfunc_stripname '' '.exe' \"$func_basename_result\"\n\tfunc_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n    fi\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval \"cmd=\\\"$cmd\\\"\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n        func_quote_for_eval \"$arg\"\n\tCC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_quote_for_eval \"$arg\"\n\t      CC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          pie_flag=\"$pie_flag $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  later=\"$later $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_quote_for_eval \"$arg\"\n\t    lastarg=\"$lastarg $func_quote_for_eval_result\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  base_compile=\"$base_compile $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_quote_for_eval \"$lastarg\"\n      base_compile=\"$base_compile $func_quote_for_eval_result\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      removelist=\"$removelist $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    removelist=\"$removelist $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    if test -n \"$fix_srcfile_path\"; then\n      eval \"srcfile=\\\"$fix_srcfile_path\\\"\"\n    fi\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tcommand=\"$command -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tcommand=\"$command -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      command=\"$command$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test \"$mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to building PIC objects only\n  -prefer-non-pic   try to building non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test \"$opt_help\" = :; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $execute_dlfiles; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  dir=\"$dir/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval test -z \\\"\\$$shlibpath_var\\\"; then\n\teval $shlibpath_var=\\$dir\n      else\n\teval $shlibpath_var=\\$dir:\\$$shlibpath_var\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_quote_for_eval \"$file\"\n      args=\"$args $func_quote_for_eval_result\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libdirs=\"$nonopt\"\n    admincmds=\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for dir\n      do\n\tlibdirs=\"$libdirs $dir\"\n      done\n\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || admincmds=\"$admincmds\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    echo \"----------------------------------------------------------------------\"\n    echo \"Libraries have been installed in:\"\n    for libdir in $libdirs; do\n      $ECHO \"   $libdir\"\n    done\n    echo\n    echo \"If you ever happen to want to link against installed libraries\"\n    echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n    echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n    echo \"flag during linking and do at least one of the following:\"\n    if test -n \"$shlibpath_var\"; then\n      echo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n      echo \"     during execution\"\n    fi\n    if test -n \"$runpath_var\"; then\n      echo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n      echo \"     during linking\"\n    fi\n    if test -n \"$hardcode_libdir_flag_spec\"; then\n      libdir=LIBDIR\n      eval \"flag=\\\"$hardcode_libdir_flag_spec\\\"\"\n\n      $ECHO \"   - use the \\`$flag' linker flag\"\n    fi\n    if test -n \"$admincmds\"; then\n      $ECHO \"   - have your system administrator run these commands:$admincmds\"\n    fi\n    if test -f /etc/ld.so.conf; then\n      echo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n    fi\n    echo\n\n    echo \"See any operating system documentation about shared libraries for\"\n    case $host in\n      solaris2.[6789]|solaris2.1[0-9])\n        echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\techo \"pages.\"\n\t;;\n      *)\n        echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n        ;;\n    esac\n    echo \"----------------------------------------------------------------------\"\n    exit $EXIT_SUCCESS\n}\n\ntest \"$mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    install_prog=\"$install_prog$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfiles=\"$files $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test \"x$prev\" = x-m && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      install_prog=\"$install_prog $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      install_shared_prog=\"$install_shared_prog $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tinstall_shared_prog=\"$install_shared_prog -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tstaticlibs=\"$staticlibs $file\"\n\t;;\n\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) current_libdirs=\"$current_libdirs $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) future_libdirs=\"$future_libdirs $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tdir=\"$dir$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && staticlibs=\"$staticlibs $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"$lib\" | $SED 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\" && $opt_finish; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined(__GNUC__) && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_verbose \"extracting global C symbols from \\`$progfile'\"\n\t    $opt_dry_run || eval \"$NM $progfile | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t      $MV \"$nlist\"T \"$nlist\"\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      $EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T\n\t      $MV \"$nlist\"T \"$nlist\"\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      ${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' < \"$nlist\" > \"$export_symbols\"\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                echo EXPORTS > \"$output_objdir/$outputname.def\"\n                cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      ${SED} -e 's/\\([].[*^$]\\)/\\\\\\1/g' -e 's/^/ /' -e 's/$/$/' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"\n\t      $GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T\n\t      $MV \"$nlist\"T \"$nlist\"\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          echo EXPORTS > \"$output_objdir/$outputname.def\"\n\t          cat \"$nlist\" >> \"$output_objdir/$outputname.def\"\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n\t  $opt_dry_run || {\n\t    $ECHO \": $name \" >> \"$nlist\"\n\t    eval \"$NM $dlprefile 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t  }\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\n\"\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* )\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n/* DATA imports from DLLs on WIN32 con't be const, because\n   runtime relocations are performed -- see ld's documentation\n   on pseudo-relocs.  */\"\n\t    lt_dlsym_const= ;;\n\t  *osf5*)\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n/* This system does not cope well with relocations in const data */\"\n\t    lt_dlsym_const= ;;\n\t  *)\n\t    lt_dlsym_const=const ;;\n\t  esac\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\nextern $lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\n$lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) symtab_cflags=\"$symtab_cflags $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    if $OBJDUMP -f \"$1\" | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pe-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      win32_nmres=`$NM -f posix -A \"$1\" |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    if test \"$lock_old_archive_extraction\" = yes; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test \"$lock_old_archive_extraction\" = yes; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\\\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\\"\\$relink_command\\\" 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t# fixup the dll searchpath if we need to.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n\"\n\tcase $host in\n\t# Backslashes separate directories on plain windows\n\t*-*-mingw | *-*-os2* | *-cegcc*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\n\t*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\tesac\n\t$ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_to_host_path arg\n#\n# Convert paths to host format when used with build tools.\n# Intended for use with \"native\" mingw (where libtool itself\n# is running under the msys shell), or in the following cross-\n# build environments:\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n# where wine is equipped with the `winepath' executable.\n# In the native mingw case, the (msys) shell automatically\n# converts paths for any non-msys applications it launches,\n# but that facility isn't available from inside the cwrapper.\n# Similar accommodations are necessary for $host mingw and\n# $build cygwin.  Calling this function does no harm for other\n# $host/$build combinations not listed above.\n#\n# ARG is the path (on $build) that should be converted to\n# the proper representation for $host. The result is stored\n# in $func_to_host_path_result.\nfunc_to_host_path ()\n{\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        case $build in\n          *mingw* ) # actually, msys\n            # awkward: cmd appends spaces to result\n            func_to_host_path_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n              $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_path_result=`cygpath -w \"$1\" |\n\t      $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # Unfortunately, winepath does not exit with a non-zero\n            # error code, so we are forced to check the contents of\n            # stdout. On the other hand, if the command is not\n            # found, the shell will set an exit code of 127 and print\n            # *an error message* to stdout. So we must check for both\n            # error code of zero AND non-empty stdout, which explains\n            # the odd construction:\n            func_to_host_path_tmp1=`winepath -w \"$1\" 2>/dev/null`\n            if test \"$?\" -eq 0 && test -n \"${func_to_host_path_tmp1}\"; then\n              func_to_host_path_result=`$ECHO \"$func_to_host_path_tmp1\" |\n                $SED -e \"$lt_sed_naive_backslashify\"`\n            else\n              # Allow warning below.\n              func_to_host_path_result=\n            fi\n            ;;\n        esac\n        if test -z \"$func_to_host_path_result\" ; then\n          func_error \"Could not determine host path corresponding to\"\n          func_error \"  \\`$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback:\n          func_to_host_path_result=\"$1\"\n        fi\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_path\n\n# func_to_host_pathlist arg\n#\n# Convert pathlists to host format when used with build tools.\n# See func_to_host_path(), above. This function supports the\n# following $build/$host combinations (but does no harm for\n# combinations not listed here):\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n#\n# Path separators are also converted from $build format to\n# $host format. If ARG begins or ends with a path separator\n# character, it is preserved (but converted to $host format)\n# on output.\n#\n# ARG is a pathlist (on $build) that should be converted to\n# the proper representation on $host. The result is stored\n# in $func_to_host_pathlist_result.\nfunc_to_host_pathlist ()\n{\n  func_to_host_pathlist_result=\"$1\"\n  if test -n \"$1\"; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        # Remove leading and trailing path separator characters from\n        # ARG. msys behavior is inconsistent here, cygpath turns them\n        # into '.;' and ';.', and winepath ignores them completely.\n\tfunc_stripname : : \"$1\"\n        func_to_host_pathlist_tmp1=$func_stripname_result\n        case $build in\n          *mingw* ) # Actually, msys.\n            # Awkward: cmd appends spaces to result.\n            func_to_host_pathlist_result=`\n\t      ( cmd //c echo \"$func_to_host_pathlist_tmp1\" ) 2>/dev/null |\n\t      $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_pathlist_result=`cygpath -w -p \"$func_to_host_pathlist_tmp1\" |\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # unfortunately, winepath doesn't convert pathlists\n            func_to_host_pathlist_result=\"\"\n            func_to_host_pathlist_oldIFS=$IFS\n            IFS=:\n            for func_to_host_pathlist_f in $func_to_host_pathlist_tmp1 ; do\n              IFS=$func_to_host_pathlist_oldIFS\n              if test -n \"$func_to_host_pathlist_f\" ; then\n                func_to_host_path \"$func_to_host_pathlist_f\"\n                if test -n \"$func_to_host_path_result\" ; then\n                  if test -z \"$func_to_host_pathlist_result\" ; then\n                    func_to_host_pathlist_result=\"$func_to_host_path_result\"\n                  else\n                    func_append func_to_host_pathlist_result \";$func_to_host_path_result\"\n                  fi\n                fi\n              fi\n            done\n            IFS=$func_to_host_pathlist_oldIFS\n            ;;\n        esac\n        if test -z \"$func_to_host_pathlist_result\"; then\n          func_error \"Could not determine the host path(s) corresponding to\"\n          func_error \"  \\`$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback. This may break if $1 contains DOS-style drive\n          # specifications. The fix is not to complicate the expression\n          # below, but for the user to provide a working wine installation\n          # with winepath so that path translation in the cross-to-mingw\n          # case works properly.\n          lt_replace_pathsep_nix_to_dos=\"s|:|;|g\"\n          func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp1\" |\\\n            $SED -e \"$lt_replace_pathsep_nix_to_dos\"`\n        fi\n        # Now, add the leading and trailing path separators back\n        case \"$1\" in\n          :* ) func_to_host_pathlist_result=\";$func_to_host_pathlist_result\"\n            ;;\n        esac\n        case \"$1\" in\n          *: ) func_append func_to_host_pathlist_result \";\"\n            ;;\n        esac\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_pathlist\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n\n   Currently, it simply execs the wrapper *script* \"$SHELL $output\",\n   but could eventually absorb all of the scripts functionality and\n   exec $objdir/$outputname directly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* declarations of non-ANSI functions */\n#if defined(__MINGW32__)\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined(__CYGWIN__)\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined (other platforms) ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined(_MSC_VER)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n# ifndef _INTPTR_T_DEFINED\n#  define _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#elif defined(__MINGW32__)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined(__CYGWIN__)\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined (other platforms) ... */\n#endif\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#undef LTWRAPPER_DEBUGPRINTF\n#if defined LT_DEBUGWRAPPER\n# define LTWRAPPER_DEBUGPRINTF(args) ltwrapper_debugprintf args\nstatic void\nltwrapper_debugprintf (const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    (void) vfprintf (stderr, fmt, args);\n    va_end (args);\n}\n#else\n# define LTWRAPPER_DEBUGPRINTF(args)\n#endif\n\nconst char *program_name = NULL;\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_fatal (const char *message, ...);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nconst char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_pathlist \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_pathlist \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n#define LTWRAPPER_OPTION_PREFIX_LENGTH  5\n\nstatic const size_t opt_prefix_len         = LTWRAPPER_OPTION_PREFIX_LENGTH;\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\n\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) argv[0]      : %s\\n\", argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) program_name : %s\\n\", program_name));\n\n  /* very simple arg parsing; don't want to rely on getopt */\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n    }\n\n  newargz = XMALLOC (char *, argc + 1);\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (\"Couldn't find %s\", argv[0]);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (before symlink chase) at : %s\\n\",\n\t\t\t  tmp_pathspec));\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (after symlink chase) at : %s\\n\",\n\t\t\t  actual_cwrapper_path));\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup( base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(main) libtool target name: %s\\n\",\n\t\t\t  target_name));\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strncmp (argv[i], ltwrapper_option_prefix, opt_prefix_len) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (\"Unrecognized option in %s namespace: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\n  LTWRAPPER_DEBUGPRINTF     ((\"(main) lt_argv_zero : %s\\n\", (lt_argv_zero ? lt_argv_zero : \"<NULL>\")));\n  for (i = 0; i < newargc; i++)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"(main) newargz[%d]   : %s\\n\", i, (newargz[i] ? newargz[i] : \"<NULL>\")));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      LTWRAPPER_DEBUGPRINTF ((\"(main) failed to launch target \\\"%s\\\": errno = %d\\n\", lt_argv_zero, errno));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (\"Memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(check_executable)  : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(make_executable)   : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(find_executable)   : %s\\n\",\n\t\t\t  wrapper ? (*wrapper ? wrapper : \"EMPTY!\") : \"NULL!\"));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (\"getcwd failed\");\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (\"getcwd failed\");\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"checking path component for symlinks: %s\\n\",\n\t\t\t      tmp_pathspec));\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  char *errstr = strerror (errno);\n\t  lt_fatal (\"Error accessing file %s (%s)\", tmp_pathspec, errstr);\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (\"Could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nstatic void\nlt_error_core (int exit_status, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s: %s: \", program_name, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_setenv) setting '%s' to '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n              $SED -e 's/\\([\\\\\"]\\)/\\\\\\1/g' \\\n\t           -e 's/^/  fputs (\"/' -e 's/$/\\\\n\", f);/'\n\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $opt_debug\n    case `eval \"$file_magic_cmd \\\"\\$1\\\" 2>/dev/null\" | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      dlfiles=\"$dlfiles $arg\"\n\t    else\n\t      dlprefiles=\"$dlprefiles $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) deplibs=\"$deplibs $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      moreargs=\"$moreargs $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      dlfiles=\"$dlfiles $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    dlprefiles=\"$dlprefiles $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) rpath=\"$rpath $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) xrpath=\"$xrpath $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  weak_libs=\"$weak_libs $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname '-L' '' \"$arg\"\n\tdir=$func_stripname_result\n\tif test -z \"$dir\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"*) ;;\n\t*)\n\t  deplibs=\"$deplibs -L$dir\"\n\t  lib_search_path=\"$lib_search_path $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-linux*)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tdeplibs=\"$deplibs $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) xrpath=\"$xrpath $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $wl$func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $wl$func_quote_for_eval_result\"\n\t  linker_flags=\"$linker_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # -64, -mips[0-9] enable 64-bit mode on the SGI compiler\n      # -r[0-9][0-9]* specifies the processor on the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler\n      # +DA*, +DD* enable 64-bit mode on the HP compiler\n      # -q* pass through compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* pass through architecture-specific\n      # compiler args for GCC\n      # -F/path gives path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-* pass through profiling flag for GCC\n      # @file GCC response files\n      # -tp=* Portland pgcc target processor selection\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        compiler_flags=\"$compiler_flags $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tobjs=\"$objs $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tdlfiles=\"$dlfiles $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      dlprefiles=\"$dlprefiles $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tdeplibs=\"$deplibs $arg\"\n\told_deplibs=\"$old_deplibs $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  dlfiles=\"$dlfiles $arg\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  dlprefiles=\"$dlprefiles $arg\"\n\t  prev=\n\telse\n\t  deplibs=\"$deplibs $arg\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval \"arg=\\\"$export_dynamic_flag_spec\\\"\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\${$shlibpath_var}\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval \"sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\"\n    eval \"sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_duplicate_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\tesac\n      fi\n      libs=\"$libs $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) specialdeplibs=\"$specialdeplibs $pre_post_deps\" ;;\n\t  esac\n\t  pre_post_deps=\"$pre_post_deps $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  case $lib in\n\t  *.la)\tfunc_source \"$lib\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) deplibs=\"$deplibs $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    compiler_flags=\"$compiler_flags $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    dir=$func_stripname_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) xrpath=\"$xrpath $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la) lib=\"$deplib\" ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      newdlprefiles=\"$newdlprefiles $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      newdlfiles=\"$newdlfiles $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) new_inherited_linker_flags=\"$new_inherited_linker_flags $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && dlfiles=\"$dlfiles $dlopen\"\n\t  test -n \"$dlpreopen\" && dlprefiles=\"$dlprefiles $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    convenience=\"$convenience $ladir/$objdir/$old_library\"\n\t    old_convenience=\"$old_convenience $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tfor l in $old_library $library_names; do\n\t  linklib=\"$l\"\n\tdone\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    dlprefiles=\"$dlprefiles $lib $dependency_libs\"\n\t  else\n\t    newdlfiles=\"$newdlfiles $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$libdir\"\n\t    absdir=\"$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t  # are required to link).\n\t  if test -n \"$old_library\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$old_library\"\n\t    # Keep a list of preopened convenience libraries to check\n\t    # that they are being used correctly in the link pass.\n\t    test -z \"$libdir\" && \\\n\t\tdlpreconveniencelibs=\"$dlpreconveniencelibs $dir/$old_library\"\n\t  # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t  elif test -n \"$dlname\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$dlname\"\n\t  else\n\t    newdlprefiles=\"$newdlprefiles $dir/$linklib\"\n\t  fi\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  newlib_search_path=\"$newlib_search_path $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) temp_rpath=\"$temp_rpath$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    echo\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    eval \"libname=\\\"$libname_spec\\\"\"\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval \"soname=\\\"$soname_spec\\\"\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$absdir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) compile_shlibpath=\"$compile_shlibpath$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) xrpath=\"$xrpath $temp_xrpath\";;\n\t\t   esac;;\n\t      *) temp_deplibs=\"$temp_deplibs $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  newlib_search_path=\"$newlib_search_path $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=\"$func_dirname_result\"\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      compiler_flags=\"$compiler_flags ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      linker_flags=\"$linker_flags -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) lib_search_path=\"$lib_search_path $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\$$var\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\$tmp_libs\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  tmp_libs=\"$tmp_libs $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      objs=\"$objs$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval \"shared_ext=\\\"$shrext_cmds\\\"\"\n\teval \"libname=\\\"$libname_spec\\\"\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval \"shared_ext=\\\"$shrext_cmds\\\"\"\n\t  eval \"libname=\\\"$libname_spec\\\"\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  libobjs=\"$libobjs $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  verstring=\"$verstring:${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      libobjs=\"$libobjs $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       removelist=\"$removelist $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\toldlibs=\"$oldlibs $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  temp_xrpath=\"$temp_xrpath -R$libdir\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlfiles=\"$dlfiles $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlprefiles=\"$dlprefiles $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      deplibs=\"$deplibs -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  eval \"libname=\\\"$libname_spec\\\"\"\n\t\t  eval \"deplib_matches=\\\"$library_names_spec\\\"\"\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    eval \"libname=\\\"$libname_spec\\\"\"\n\t\t    eval \"deplib_matches=\\\"$library_names_spec\\\"\"\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\teval \"libname=\\\"$libname_spec\\\"\"\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval \"$file_magic_cmd \\\"\\$potlib\\\"\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tnewdeplibs=\"$newdeplibs $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\teval \"libname=\\\"$libname_spec\\\"\"\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s,$i,,\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    hardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval \"flag=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t\tdep_rpath=\"$dep_rpath $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    if test -n \"$hardcode_libdir_flag_spec_ld\"; then\n\t      eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec_ld\\\"\"\n\t    else\n\t      eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t    fi\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      rpath=\"$rpath$dir:\"\n\t    done\n\t    eval $runpath_var=\\$rpath\\$$runpath_var\n\t    export $runpath_var\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval $shlibpath_var=\\$shlibpath\\$$shlibpath_var\n\t  export $shlibpath_var\n\tfi\n\n\t# Get the real and link names of the library.\n\teval \"shared_ext=\\\"$shrext_cmds\\\"\"\n\teval \"library_names=\\\"$library_names_spec\\\"\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval \"soname=\\\"$soname_spec\\\"\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  linknames=\"$linknames $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  delfiles=\"$delfiles $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      eval \"cmd=\\\"$cmd\\\"\"\n\t      func_len \" $cmd\"\n\t      len=$func_len_result\n\t      if test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || $ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    tmp_deplibs=\"$tmp_deplibs $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval \"libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    generated=\"$generated $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    libobjs=\"$libobjs $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval \"flag=\\\"$thread_safe_flag_spec\\\"\"\n\t  linker_flags=\"$linker_flags $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || (cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U) || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval \"test_cmds=\\\"$module_expsym_cmds\\\"\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval \"test_cmds=\\\"$module_cmds\\\"\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval \"test_cmds=\\\"$archive_expsym_cmds\\\"\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval \"test_cmds=\\\"$archive_cmds\\\"\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    delfiles=\"$delfiles $output\"\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    delfiles=\"$delfiles $output\"\n\t    output=$firstobj\\\"$file_list_spec$output\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval \"test_cmds=\\\"$reload_cmds\\\"\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval \"concat_cmds=\\\"$reload_cmds\\\"\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval \"concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval \"concat_cmds=\\\"\\${concat_cmds}$reload_cmds\\\"\"\n\t      if test -n \"$last_robj\"; then\n\t        eval \"concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\"\n\t      fi\n\t      delfiles=\"$delfiles $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval \"concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\"\n\t      if test -n \"$last_robj\"; then\n\t\teval \"concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || $ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval \"libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval \"cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  libobjs=\"$libobjs $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval \"cmd=\\\"$cmd\\\"\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || (cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname) || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval \"tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; /\\.lib$/d; $lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || echo timestamp > $libobj || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      compile_command=\"$compile_command ${wl}-bind_at_load\"\n\t      finalize_command=\"$finalize_command ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      compile_command=\"$compile_command $compile_deplibs\"\n      finalize_command=\"$finalize_command $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval \"flag=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval \"rpath=\\\" $hardcode_libdir_flag_spec\\\"\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval \"flag=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_perm_rpath=\"$finalize_perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval \"rpath=\\\" $hardcode_libdir_flag_spec\\\"\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    oldobjs=\"$oldobjs $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tgenerated=\"$generated $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\toldobjs=\"$oldobjs $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  oldobjs=\"$oldobjs $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      oldobjs=\"$oldobjs $gentop/$newobj\"\n\t      ;;\n\t    *) oldobjs=\"$oldobjs $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\teval \"cmds=\\\"$old_archive_cmds\\\"\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval \"test_cmds=\\\"$old_archive_cmds\\\"\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval \"concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval \"cmds=\\\"\\$concat_cmds\\\"\"\n\t  else\n\t    eval \"cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\tlibdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tnewdependency_libs=\"$newdependency_libs $libdir/$name\"\n\t\t;;\n\t      *) newdependency_libs=\"$newdependency_libs $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\tlibdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlfiles=\"$newdlfiles $libdir/$name\"\n\t\t;;\n\t      *) newdlfiles=\"$newdlfiles $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\tlibdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlprefiles=\"$newdlprefiles $libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlfiles=\"$newdlfiles $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlprefiles=\"$newdlprefiles $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$mode\" = link || test \"$mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) RM=\"$RM $arg\"; rmforce=yes ;;\n      -*) RM=\"$RM $arg\" ;;\n      *) files=\"$files $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    origobjdir=\"$objdir\"\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\tobjdir=\"$origobjdir\"\n      else\n\tobjdir=\"$dir/$origobjdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$mode\" = uninstall && objdir=\"$dir\"\n\n      # Remember objdir for removal later, being careful to avoid duplicates\n      if test \"$mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $objdir \"*) ;;\n\t  *) rmdirs=\"$rmdirs $objdir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    rmfiles=\"$rmfiles $objdir/$n\"\n\t  done\n\t  test -n \"$old_library\" && rmfiles=\"$rmfiles $objdir/$old_library\"\n\n\t  case \"$mode\" in\n\t  clean)\n\t    case \"  $library_names \" in\n\t    # \"  \" in the beginning catches empty $dlname\n\t    *\" $dlname \"*) ;;\n\t    *) rmfiles=\"$rmfiles $objdir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && rmfiles=\"$rmfiles $objdir/$name $objdir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    rmfiles=\"$rmfiles $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      rmfiles=\"$rmfiles $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    rmfiles=\"$rmfiles $objdir/$name $objdir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      rmfiles=\"$rmfiles $objdir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      rmfiles=\"$rmfiles $objdir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n    objdir=\"$origobjdir\"\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$mode\" = uninstall || test \"$mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/sim/bfin/gui.c": "/* Blackfin GUI (SDL) helper code\n\n   Copyright (C) 2010-2015 Free Software Foundation, Inc.\n   Contributed by Analog Devices, Inc.\n\n   This file is part of simulators.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"config.h\"\n\n#ifdef HAVE_SDL\n# include <SDL.h>\n#endif\n#ifdef HAVE_DLFCN_H\n# include <dlfcn.h>\n#endif\n\n#include \"libiberty.h\"\n#include \"gui.h\"\n\n#ifdef HAVE_SDL\n\nstatic struct {\n  void *handle;\n  int (*Init) (Uint32 flags);\n  void (*Quit) (void);\n  SDL_Surface *(*SetVideoMode) (int width, int height, int bpp, Uint32 flags);\n  void (*WM_SetCaption) (const char *title, const char *icon);\n  int (*ShowCursor) (int toggle);\n  int (*LockSurface) (SDL_Surface *surface);\n  void (*UnlockSurface) (SDL_Surface *surface);\n  void (*GetRGB) (Uint32 pixel, const SDL_PixelFormat * const fmt, Uint8 *r, Uint8 *g, Uint8 *b);\n  Uint32 (*MapRGB) (const SDL_PixelFormat * const format, const Uint8 r, const Uint8 g, const Uint8 b);\n  void (*UpdateRect) (SDL_Surface *screen, Sint32 x, Sint32 y, Uint32 w, Uint32 h);\n} sdl;\n\nstatic const char * const sdl_syms[] =\n{\n  \"SDL_Init\",\n  \"SDL_Quit\",\n  \"SDL_SetVideoMode\",\n  \"SDL_WM_SetCaption\",\n  \"SDL_ShowCursor\",\n  \"SDL_LockSurface\",\n  \"SDL_UnlockSurface\",\n  \"SDL_GetRGB\",\n  \"SDL_MapRGB\",\n  \"SDL_UpdateRect\",\n};\n\nstruct gui_state {\n  SDL_Surface *screen;\n  const SDL_PixelFormat *format;\n  int throttle, throttle_limit;\n  enum gui_color color;\n  int curr_line;\n};\n\n/* Load the SDL lib on the fly to avoid hard linking against it.  */\nstatic int\nbfin_gui_sdl_setup (void)\n{\n  int i;\n  uintptr_t **funcs;\n\n  if (sdl.handle)\n    return 0;\n\n  sdl.handle = dlopen (\"libSDL-1.2.so.0\", RTLD_LAZY);\n  if (sdl.handle == NULL)\n    return -1;\n\n  funcs = (void *) &sdl.Init;\n  for (i = 0; i < ARRAY_SIZE (sdl_syms); ++i)\n    {\n      funcs[i] = dlsym (sdl.handle, sdl_syms[i]);\n      if (funcs[i] == NULL)\n\t{\n\t  dlclose (sdl.handle);\n\t  sdl.handle = NULL;\n\t  return -1;\n\t}\n    }\n\n  return 0;\n}\n\nstatic const SDL_PixelFormat *bfin_gui_color_format (enum gui_color color);\n\nvoid *\nbfin_gui_setup (void *state, int enabled, int width, int height,\n\t\tenum gui_color color)\n{\n  if (bfin_gui_sdl_setup ())\n    return NULL;\n\n  /* Create an SDL window if enabled and we don't have one yet.  */\n  if (enabled && !state)\n    {\n      struct gui_state *gui = xmalloc (sizeof (*gui));\n      if (!gui)\n\treturn NULL;\n\n      if (sdl.Init (SDL_INIT_VIDEO))\n\tgoto error;\n\n      gui->color = color;\n      gui->format = bfin_gui_color_format (gui->color);\n      gui->screen = sdl.SetVideoMode (width, height, 32,\n\t\t\t\t      SDL_ANYFORMAT|SDL_HWSURFACE);\n      if (!gui->screen)\n\t{\n\t  sdl.Quit();\n\t  goto error;\n\t}\n\n      sdl.WM_SetCaption (\"GDB Blackfin Simulator\", NULL);\n      sdl.ShowCursor (0);\n      gui->curr_line = 0;\n      gui->throttle = 0;\n      gui->throttle_limit = 0xf; /* XXX: let people control this ?  */\n      return gui;\n\n error:\n      free (gui);\n      return NULL;\n    }\n\n  /* Else break down a window if disabled and we had one.  */\n  else if (!enabled && state)\n    {\n      sdl.Quit();\n      free (state);\n      return NULL;\n    }\n\n  /* Retain existing state, whatever that may be.  */\n  return state;\n}\n\nstatic int\nSDL_ConvertBlitLineFrom (const Uint8 *src, const SDL_PixelFormat * const format,\n\t\t\t SDL_Surface *dst, int dsty)\n{\n  Uint8 r, g, b;\n  Uint32 *pixels;\n  unsigned i, j;\n\n  if (SDL_MUSTLOCK (dst))\n    if (sdl.LockSurface (dst))\n      return 1;\n\n  pixels = dst->pixels;\n  pixels += (dsty * dst->pitch / 4);\n\n  for (i = 0; i < dst->w; ++i)\n    {\n      /* Exract the packed source pixel; RGB or BGR.  */\n      Uint32 pix = 0;\n      for (j = 0; j < format->BytesPerPixel; ++j)\n\tif (format->Rshift)\n\t  pix = (pix << 8) | src[j];\n\telse\n\t  pix = pix | ((Uint32)src[j] << (j * 8));\n\n      /* Unpack the source pixel into its components.  */\n      sdl.GetRGB (pix, format, &r, &g, &b);\n      /* Translate into the screen pixel format.  */\n      *pixels++ = sdl.MapRGB (dst->format, r, g, b);\n\n      src += format->BytesPerPixel;\n    }\n\n  if (SDL_MUSTLOCK (dst))\n    sdl.UnlockSurface (dst);\n\n  sdl.UpdateRect (dst, 0, dsty, dst->w, 1);\n\n  return 0;\n}\n\nunsigned\nbfin_gui_update (void *state, const void *source, unsigned nr_bytes)\n{\n  struct gui_state *gui = state;\n  int ret;\n\n  if (!gui)\n    return 0;\n\n  /* XXX: Make this an option ?  */\n  gui->throttle = (gui->throttle + 1) & gui->throttle_limit;\n  if (gui->throttle)\n    return 0;\n\n  ret = SDL_ConvertBlitLineFrom (source, gui->format, gui->screen,\n\t\t\t\t gui->curr_line);\n  if (ret)\n    return 0;\n\n  gui->curr_line = (gui->curr_line + 1) % gui->screen->h;\n\n  return nr_bytes;\n}\n\n#define FMASK(cnt, shift) (((1 << (cnt)) - 1) << (shift))\n#define _FORMAT(bpp, rcnt, gcnt, bcnt, acnt, rsh, gsh, bsh, ash) \\\n  NULL, bpp, (bpp)/8, 8-(rcnt), 8-(gcnt), 8-(bcnt), 8-(acnt), rsh, gsh, bsh, ash, \\\n  FMASK (rcnt, rsh), FMASK (gcnt, gsh), FMASK (bcnt, bsh), FMASK (acnt, ash),\n#define FORMAT(rcnt, gcnt, bcnt, acnt, rsh, gsh, bsh, ash) \\\n  _FORMAT(((((rcnt) + (gcnt) + (bcnt) + (acnt)) + 7) / 8) * 8, \\\n\t  rcnt, gcnt, bcnt, acnt, rsh, gsh, bsh, ash)\n\nstatic const SDL_PixelFormat sdl_rgb_565 =\n{\n  FORMAT (5, 6, 5, 0, 11, 5, 0, 0)\n};\nstatic const SDL_PixelFormat sdl_bgr_565 =\n{\n  FORMAT (5, 6, 5, 0, 0, 5, 11, 0)\n};\nstatic const SDL_PixelFormat sdl_rgb_888 =\n{\n  FORMAT (8, 8, 8, 0, 16, 8, 0, 0)\n};\nstatic const SDL_PixelFormat sdl_bgr_888 =\n{\n  FORMAT (8, 8, 8, 0, 0, 8, 16, 0)\n};\nstatic const SDL_PixelFormat sdl_rgba_8888 =\n{\n  FORMAT (8, 8, 8, 8, 24, 16, 8, 0)\n};\n\nstatic const struct {\n  const char *name;\n  const SDL_PixelFormat *format;\n  enum gui_color color;\n} color_spaces[] = {\n  { \"rgb565\",   &sdl_rgb_565,   GUI_COLOR_RGB_565,   },\n  { \"bgr565\",   &sdl_bgr_565,   GUI_COLOR_BGR_565,   },\n  { \"rgb888\",   &sdl_rgb_888,   GUI_COLOR_RGB_888,   },\n  { \"bgr888\",   &sdl_bgr_888,   GUI_COLOR_BGR_888,   },\n  { \"rgba8888\", &sdl_rgba_8888, GUI_COLOR_RGBA_8888, },\n};\n\nenum gui_color bfin_gui_color (const char *color)\n{\n  int i;\n\n  if (!color)\n    goto def;\n\n  for (i = 0; i < ARRAY_SIZE (color_spaces); ++i)\n    if (!strcmp (color, color_spaces[i].name))\n      return color_spaces[i].color;\n\n  /* Pick a random default.  */\n def:\n  return GUI_COLOR_RGB_888;\n}\n\nstatic const SDL_PixelFormat *bfin_gui_color_format (enum gui_color color)\n{\n  int i;\n\n  for (i = 0; i < ARRAY_SIZE (color_spaces); ++i)\n    if (color == color_spaces[i].color)\n      return color_spaces[i].format;\n\n  return NULL;\n}\n\nint bfin_gui_color_depth (enum gui_color color)\n{\n  const SDL_PixelFormat *format = bfin_gui_color_format (color);\n  return format ? format->BitsPerPixel : 0;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/plugin.c": "/* Plugin support for BFD.\n   Copyright (C) 2009-2015 Free Software Foundation, Inc.\n\n   This file is part of BFD, the Binary File Descriptor library.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program; if not, write to the Free Software\n   Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,\n   MA 02110-1301, USA.  */\n\n#include \"sysdep.h\"\n#include \"bfd.h\"\n\n#if BFD_SUPPORTS_PLUGINS\n\n#include <assert.h>\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#elif defined (HAVE_WINDOWS_H)\n#include <windows.h>\n#else\n#error Unknown how to handle dynamic-load-libraries.\n#endif\n#include <stdarg.h>\n#include \"plugin-api.h\"\n#include \"plugin.h\"\n#include \"libbfd.h\"\n#include \"libiberty.h\"\n#include <dirent.h>\n\n#if !defined (HAVE_DLFCN_H) && defined (HAVE_WINDOWS_H)\n\n#define RTLD_NOW 0      /* Dummy value.  */\n\nstatic void *\ndlopen (const char *file, int mode ATTRIBUTE_UNUSED)\n{\n  return LoadLibrary (file);\n}\n\nstatic void *\ndlsym (void *handle, const char *name)\n{\n  return GetProcAddress (handle, name);\n}\n\nstatic int ATTRIBUTE_UNUSED\ndlclose (void *handle)\n{\n  FreeLibrary (handle);\n  return 0;\n}\n\nstatic const char *\ndlerror (void)\n{\n  return \"Unable to load DLL.\";\n}\n\n#endif /* !defined (HAVE_DLFCN_H) && defined (HAVE_WINDOWS_H)  */\n\n#define bfd_plugin_close_and_cleanup                  _bfd_generic_close_and_cleanup\n#define bfd_plugin_bfd_free_cached_info               _bfd_generic_bfd_free_cached_info\n#define bfd_plugin_new_section_hook                   _bfd_generic_new_section_hook\n#define bfd_plugin_get_section_contents               _bfd_generic_get_section_contents\n#define bfd_plugin_get_section_contents_in_window     _bfd_generic_get_section_contents_in_window\n#define bfd_plugin_bfd_copy_private_header_data       _bfd_generic_bfd_copy_private_header_data\n#define bfd_plugin_bfd_merge_private_bfd_data         _bfd_generic_bfd_merge_private_bfd_data\n#define bfd_plugin_bfd_copy_private_header_data       _bfd_generic_bfd_copy_private_header_data\n#define bfd_plugin_bfd_set_private_flags              _bfd_generic_bfd_set_private_flags\n#define bfd_plugin_core_file_matches_executable_p     generic_core_file_matches_executable_p\n#define bfd_plugin_bfd_is_local_label_name            _bfd_nosymbols_bfd_is_local_label_name\n#define bfd_plugin_bfd_is_target_special_symbol       ((bfd_boolean (*) (bfd *, asymbol *)) bfd_false)\n#define bfd_plugin_get_lineno                         _bfd_nosymbols_get_lineno\n#define bfd_plugin_find_nearest_line                  _bfd_nosymbols_find_nearest_line\n#define bfd_plugin_find_line                          _bfd_nosymbols_find_line\n#define bfd_plugin_find_inliner_info                  _bfd_nosymbols_find_inliner_info\n#define bfd_plugin_get_symbol_version_string\t      _bfd_nosymbols_get_symbol_version_string\n#define bfd_plugin_bfd_make_debug_symbol              _bfd_nosymbols_bfd_make_debug_symbol\n#define bfd_plugin_read_minisymbols                   _bfd_generic_read_minisymbols\n#define bfd_plugin_minisymbol_to_symbol               _bfd_generic_minisymbol_to_symbol\n#define bfd_plugin_set_arch_mach                      bfd_default_set_arch_mach\n#define bfd_plugin_set_section_contents               _bfd_generic_set_section_contents\n#define bfd_plugin_bfd_get_relocated_section_contents bfd_generic_get_relocated_section_contents\n#define bfd_plugin_bfd_relax_section                  bfd_generic_relax_section\n#define bfd_plugin_bfd_link_hash_table_create         _bfd_generic_link_hash_table_create\n#define bfd_plugin_bfd_link_add_symbols               _bfd_generic_link_add_symbols\n#define bfd_plugin_bfd_link_just_syms                 _bfd_generic_link_just_syms\n#define bfd_plugin_bfd_final_link                     _bfd_generic_final_link\n#define bfd_plugin_bfd_link_split_section             _bfd_generic_link_split_section\n#define bfd_plugin_bfd_gc_sections                    bfd_generic_gc_sections\n#define bfd_plugin_bfd_lookup_section_flags           bfd_generic_lookup_section_flags\n#define bfd_plugin_bfd_merge_sections                 bfd_generic_merge_sections\n#define bfd_plugin_bfd_is_group_section               bfd_generic_is_group_section\n#define bfd_plugin_bfd_discard_group                  bfd_generic_discard_group\n#define bfd_plugin_section_already_linked             _bfd_generic_section_already_linked\n#define bfd_plugin_bfd_define_common_symbol           bfd_generic_define_common_symbol\n#define bfd_plugin_bfd_copy_link_hash_symbol_type     _bfd_generic_copy_link_hash_symbol_type\n\nstatic enum ld_plugin_status\nmessage (int level ATTRIBUTE_UNUSED,\n\t const char * format, ...)\n{\n  va_list args;\n  va_start (args, format);\n  printf (\"bfd plugin: \");\n  vprintf (format, args);\n  putchar ('\\n');\n  va_end (args);\n  return LDPS_OK;\n}\n\n/* Register a claim-file handler. */\nstatic ld_plugin_claim_file_handler claim_file;\n\nstatic enum ld_plugin_status\nregister_claim_file (ld_plugin_claim_file_handler handler)\n{\n  claim_file = handler;\n  return LDPS_OK;\n}\n\nstatic enum ld_plugin_status\nadd_symbols (void * handle,\n\t     int nsyms,\n\t     const struct ld_plugin_symbol * syms)\n{\n  bfd *abfd = handle;\n  struct plugin_data_struct *plugin_data =\n    bfd_alloc (abfd, sizeof (plugin_data_struct));\n\n  plugin_data->nsyms = nsyms;\n  plugin_data->syms = syms;\n\n  if (nsyms != 0)\n    abfd->flags |= HAS_SYMS;\n\n  abfd->tdata.plugin_data = plugin_data;\n  return LDPS_OK;\n}\n\nstatic const char *plugin_program_name;\n\nvoid\nbfd_plugin_set_program_name (const char *program_name)\n{\n  plugin_program_name = program_name;\n}\n\nstatic int\ntry_claim (bfd *abfd)\n{\n  int claimed = 0;\n  struct ld_plugin_input_file file;\n  bfd *iobfd;\n\n  file.name = abfd->filename;\n\n  if (abfd->my_archive)\n    {\n      iobfd = abfd->my_archive;\n      file.offset = abfd->origin;\n      file.filesize = arelt_size (abfd);\n    }\n  else\n    {\n      iobfd = abfd;\n      file.offset = 0;\n      file.filesize = 0;\n    }\n\n  if (!iobfd->iostream && !bfd_open_file (iobfd))\n    return 0;\n\n  file.fd = fileno ((FILE *) iobfd->iostream);\n\n  if (!abfd->my_archive)\n    {\n      struct stat stat_buf;\n      if (fstat (file.fd, &stat_buf))\n        return 0;\n      file.filesize = stat_buf.st_size;\n    }\n\n  file.handle = abfd;\n  off_t cur_offset = lseek(file.fd, 0, SEEK_CUR);\n  claim_file (&file, &claimed);\n  lseek(file.fd, cur_offset, SEEK_SET);\n  if (!claimed)\n    return 0;\n\n  return 1;\n}\n\nstatic int\ntry_load_plugin (const char *pname, bfd *abfd)\n{\n  void *plugin_handle;\n  int tv_size = 4;\n  struct ld_plugin_tv tv[tv_size];\n  int i;\n  ld_plugin_onload onload;\n  enum ld_plugin_status status;\n\n  plugin_handle = dlopen (pname, RTLD_NOW);\n  if (!plugin_handle)\n    {\n      (*_bfd_error_handler)(\"%s\\n\", dlerror ());\n      return 0;\n    }\n\n  onload = dlsym (plugin_handle, \"onload\");\n  if (!onload)\n    goto err;\n\n  i = 0;\n  tv[i].tv_tag = LDPT_MESSAGE;\n  tv[i].tv_u.tv_message = message;\n\n  ++i;\n  tv[i].tv_tag = LDPT_REGISTER_CLAIM_FILE_HOOK;\n  tv[i].tv_u.tv_register_claim_file = register_claim_file;\n\n  ++i;\n  tv[i].tv_tag = LDPT_ADD_SYMBOLS;\n  tv[i].tv_u.tv_add_symbols = add_symbols;\n\n  ++i;\n  tv[i].tv_tag = LDPT_NULL;\n  tv[i].tv_u.tv_val = 0;\n\n  status = (*onload)(tv);\n\n  if (status != LDPS_OK)\n    goto err;\n\n  if (!claim_file)\n    goto err;\n\n  if (!try_claim (abfd))\n    goto err;\n\n  return 1;\n\n err:\n  plugin_handle = NULL;\n  return 0;\n}\n\nstatic const char *plugin_name;\n\nvoid\nbfd_plugin_set_plugin (const char *p)\n{\n  plugin_name = p;\n}\n\nstatic int\nload_plugin (bfd *abfd)\n{\n  char *plugin_dir;\n  char *p;\n  DIR *d;\n  struct dirent *ent;\n  int found = 0;\n\n  if (plugin_name)\n    return try_load_plugin (plugin_name, abfd);\n\n  if (plugin_program_name == NULL)\n    return 0;\n\n  plugin_dir = concat (BINDIR, \"/../lib/bfd-plugins\", NULL);\n  p = make_relative_prefix (plugin_program_name,\n\t\t\t    BINDIR,\n\t\t\t    plugin_dir);\n  free (plugin_dir);\n  plugin_dir = NULL;\n\n  d = opendir (p);\n  if (!d)\n    goto out;\n\n  while ((ent = readdir (d)))\n    {\n      char *full_name;\n      struct stat s;\n\n      full_name = concat (p, \"/\", ent->d_name, NULL);\n      if (stat(full_name, &s) == 0 && S_ISREG (s.st_mode))\n\tfound = try_load_plugin (full_name, abfd);\n      free (full_name);\n      if (found)\n\tbreak;\n    }\n\n out:\n  free (p);\n  if (d)\n    closedir (d);\n\n  return found;\n}\n\n\nstatic const bfd_target *\nbfd_plugin_object_p (bfd *abfd)\n{\n  if (!load_plugin (abfd))\n    return NULL;\n\n  return abfd->xvec;\n}\n\n/* Copy any private info we understand from the input bfd\n   to the output bfd.  */\n\nstatic bfd_boolean\nbfd_plugin_bfd_copy_private_bfd_data (bfd *ibfd ATTRIBUTE_UNUSED,\n\t\t\t\t      bfd *obfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\n/* Copy any private info we understand from the input section\n   to the output section.  */\n\nstatic bfd_boolean\nbfd_plugin_bfd_copy_private_section_data (bfd *ibfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t  asection *isection ATTRIBUTE_UNUSED,\n\t\t\t\t\t  bfd *obfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t  asection *osection ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\n/* Copy any private info we understand from the input symbol\n   to the output symbol.  */\n\nstatic bfd_boolean\nbfd_plugin_bfd_copy_private_symbol_data (bfd *ibfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t asymbol *isymbol ATTRIBUTE_UNUSED,\n\t\t\t\t\t bfd *obfd ATTRIBUTE_UNUSED,\n\t\t\t\t\t asymbol *osymbol ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\nstatic bfd_boolean\nbfd_plugin_bfd_print_private_bfd_data (bfd *abfd ATTRIBUTE_UNUSED, PTR ptr ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return TRUE;\n}\n\nstatic char *\nbfd_plugin_core_file_failing_command (bfd *abfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return NULL;\n}\n\nstatic int\nbfd_plugin_core_file_failing_signal (bfd *abfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return 0;\n}\n\nstatic int\nbfd_plugin_core_file_pid (bfd *abfd ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return 0;\n}\n\nstatic long\nbfd_plugin_get_symtab_upper_bound (bfd *abfd)\n{\n  struct plugin_data_struct *plugin_data = abfd->tdata.plugin_data;\n  long nsyms = plugin_data->nsyms;\n\n  BFD_ASSERT (nsyms >= 0);\n\n  return ((nsyms + 1) * sizeof (asymbol *));\n}\n\nstatic flagword\nconvert_flags (const struct ld_plugin_symbol *sym)\n{\n switch (sym->def)\n   {\n   case LDPK_DEF:\n   case LDPK_COMMON:\n   case LDPK_UNDEF:\n     return BSF_GLOBAL;\n\n   case LDPK_WEAKUNDEF:\n   case LDPK_WEAKDEF:\n     return BSF_GLOBAL | BSF_WEAK;\n\n   default:\n     BFD_ASSERT (0);\n     return 0;\n   }\n}\n\nstatic long\nbfd_plugin_canonicalize_symtab (bfd *abfd,\n\t\t\t\tasymbol **alocation)\n{\n  struct plugin_data_struct *plugin_data = abfd->tdata.plugin_data;\n  long nsyms = plugin_data->nsyms;\n  const struct ld_plugin_symbol *syms = plugin_data->syms;\n  static asection fake_section;\n  static asection fake_common_section;\n  int i;\n\n  fake_section.name = \".text\";\n  fake_common_section.flags = SEC_IS_COMMON;\n\n  for (i = 0; i < nsyms; i++)\n    {\n      asymbol *s = bfd_alloc (abfd, sizeof (asymbol));\n\n      BFD_ASSERT (s);\n      alocation[i] = s;\n\n      s->the_bfd = abfd;\n      s->name = syms[i].name;\n      s->value = 0;\n      s->flags = convert_flags (&syms[i]);\n      switch (syms[i].def)\n\t{\n\tcase LDPK_COMMON:\n\t  s->section = &fake_common_section;\n\t  break;\n\tcase LDPK_UNDEF:\n\tcase LDPK_WEAKUNDEF:\n\t  s->section = bfd_und_section_ptr;\n\t  break;\n\tcase LDPK_DEF:\n\tcase LDPK_WEAKDEF:\n\t  s->section = &fake_section;\n\t  break;\n\tdefault:\n\t  BFD_ASSERT (0);\n\t}\n\n      s->udata.p = (void *) &syms[i];\n    }\n\n  return nsyms;\n}\n\nstatic void\nbfd_plugin_print_symbol (bfd *abfd ATTRIBUTE_UNUSED,\n\t\t\t PTR afile ATTRIBUTE_UNUSED,\n\t\t\t asymbol *symbol ATTRIBUTE_UNUSED,\n\t\t\t bfd_print_symbol_type how ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n}\n\nstatic void\nbfd_plugin_get_symbol_info (bfd *abfd ATTRIBUTE_UNUSED,\n\t\t\t    asymbol *symbol,\n\t\t\t    symbol_info *ret)\n{\n  bfd_symbol_info (symbol, ret);\n}\n\n/* Make an empty symbol. */\n\nstatic asymbol *\nbfd_plugin_make_empty_symbol (bfd *abfd)\n{\n  asymbol *new_symbol = bfd_zalloc (abfd, sizeof (asymbol));\n  if (new_symbol == NULL)\n    return new_symbol;\n  new_symbol->the_bfd = abfd;\n  return new_symbol;\n}\n\nstatic int\nbfd_plugin_sizeof_headers (bfd *a ATTRIBUTE_UNUSED,\n\t\t\t   struct bfd_link_info *info ATTRIBUTE_UNUSED)\n{\n  BFD_ASSERT (0);\n  return 0;\n}\n\nconst bfd_target plugin_vec =\n{\n  \"plugin\",\t\t\t/* Name.  */\n  bfd_target_unknown_flavour,\n  BFD_ENDIAN_LITTLE,\t\t/* Target byte order.  */\n  BFD_ENDIAN_LITTLE,\t\t/* Target headers byte order.  */\n  (HAS_RELOC | EXEC_P |\t\t/* Object flags.  */\n   HAS_LINENO | HAS_DEBUG |\n   HAS_SYMS | HAS_LOCALS | DYNAMIC | WP_TEXT | D_PAGED),\n  (SEC_CODE | SEC_DATA | SEC_ROM | SEC_HAS_CONTENTS\n   | SEC_ALLOC | SEC_LOAD | SEC_RELOC),\t/* Section flags.  */\n  0,\t\t\t\t/* symbol_leading_char.  */\n  '/',\t\t\t\t/* ar_pad_char.  */\n  15,\t\t\t\t/* ar_max_namelen.  */\n  0,\t\t\t\t/* match priority.  */\n\n  bfd_getl64, bfd_getl_signed_64, bfd_putl64,\n  bfd_getl32, bfd_getl_signed_32, bfd_putl32,\n  bfd_getl16, bfd_getl_signed_16, bfd_putl16,\t/* data */\n  bfd_getl64, bfd_getl_signed_64, bfd_putl64,\n  bfd_getl32, bfd_getl_signed_32, bfd_putl32,\n  bfd_getl16, bfd_getl_signed_16, bfd_putl16,\t/* hdrs */\n\n  {\t\t\t\t/* bfd_check_format.  */\n    _bfd_dummy_target,\n    bfd_plugin_object_p,\n    bfd_generic_archive_p,\n    _bfd_dummy_target\n  },\n  {\t\t\t\t/* bfd_set_format.  */\n    bfd_false,\n    bfd_false,\n    _bfd_generic_mkarchive,\n    bfd_false,\n  },\n  {\t\t\t\t/* bfd_write_contents.  */\n    bfd_false,\n    bfd_false,\n    _bfd_write_archive_contents,\n    bfd_false,\n  },\n\n  BFD_JUMP_TABLE_GENERIC (bfd_plugin),\n  BFD_JUMP_TABLE_COPY (bfd_plugin),\n  BFD_JUMP_TABLE_CORE (bfd_plugin),\n  BFD_JUMP_TABLE_ARCHIVE (_bfd_archive_coff),\n  BFD_JUMP_TABLE_SYMBOLS (bfd_plugin),\n  BFD_JUMP_TABLE_RELOCS (_bfd_norelocs),\n  BFD_JUMP_TABLE_WRITE (bfd_plugin),\n  BFD_JUMP_TABLE_LINK (bfd_plugin),\n  BFD_JUMP_TABLE_DYNAMIC (_bfd_nodynamic),\n\n  NULL,\n\n  NULL  \t\t\t/* backend_data.  */\n};\n#endif /* BFD_SUPPORTS_PLUGIN */\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/gdb-dlfcn.h": "/* Platform independent shared object routines for GDB.\n\n   Copyright (C) 2011-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#ifndef GDB_DLFCN_H\n#define GDB_DLFCN_H\n\n/* Load the dynamic library file named FILENAME, and return a handle\n   for that dynamic library.  Return NULL if the loading fails for any\n   reason.  */\n\nvoid *gdb_dlopen (const char *filename);\n\n/* Return the address of the symbol named SYMBOL inside the shared\n   library whose handle is HANDLE.  Return NULL when the symbol could\n   not be found.  */\n\nvoid *gdb_dlsym (void *handle, const char *symbol);\n\n/* Install a cleanup routine which closes the handle HANDLE.  */\n\nstruct cleanup *make_cleanup_dlclose (void *handle);\n\n/* Cleanup the shared object pointed to by HANDLE. Return 0 on success\n   and nonzero on failure.  */\n\nint gdb_dlclose (void *handle);\n\n/* Return non-zero if the dynamic library functions are available on\n   this platform.  */\n\nint is_dl_available(void);\n\n#endif /* GDB_DLFCN_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/linux-thread-db.c": "/* libthread_db assisted debugging support, generic parts.\n\n   Copyright (C) 1999-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"defs.h\"\n#include <dlfcn.h>\n#include \"gdb_proc_service.h\"\n#include \"nat/gdb_thread_db.h\"\n#include \"gdb_vecs.h\"\n#include \"bfd.h\"\n#include \"command.h\"\n#include \"gdbcmd.h\"\n#include \"gdbthread.h\"\n#include \"inferior.h\"\n#include \"infrun.h\"\n#include \"symfile.h\"\n#include \"objfiles.h\"\n#include \"target.h\"\n#include \"regcache.h\"\n#include \"solib.h\"\n#include \"solib-svr4.h\"\n#include \"gdbcore.h\"\n#include \"observer.h\"\n#include \"linux-nat.h\"\n#include \"nat/linux-procfs.h\"\n#include \"nat/linux-ptrace.h\"\n#include \"nat/linux-osdata.h\"\n#include \"auto-load.h\"\n#include \"cli/cli-utils.h\"\n\n#include <signal.h>\n#include <ctype.h>\n\n/* GNU/Linux libthread_db support.\n\n   libthread_db is a library, provided along with libpthread.so, which\n   exposes the internals of the thread library to a debugger.  It\n   allows GDB to find existing threads, new threads as they are\n   created, thread IDs (usually, the result of pthread_self), and\n   thread-local variables.\n\n   The libthread_db interface originates on Solaris, where it is\n   both more powerful and more complicated.  This implementation\n   only works for LinuxThreads and NPTL, the two glibc threading\n   libraries.  It assumes that each thread is permanently assigned\n   to a single light-weight process (LWP).\n\n   libthread_db-specific information is stored in the \"private\" field\n   of struct thread_info.  When the field is NULL we do not yet have\n   information about the new thread; this could be temporary (created,\n   but the thread library's data structures do not reflect it yet)\n   or permanent (created using clone instead of pthread_create).\n\n   Process IDs managed by linux-thread-db.c match those used by\n   linux-nat.c: a common PID for all processes, an LWP ID for each\n   thread, and no TID.  We save the TID in private.  Keeping it out\n   of the ptid_t prevents thread IDs changing when libpthread is\n   loaded or unloaded.  */\n\nstatic char *libthread_db_search_path;\n\n/* Set to non-zero if thread_db auto-loading is enabled\n   by the \"set auto-load libthread-db\" command.  */\nstatic int auto_load_thread_db = 1;\n\n/* Returns true if we need to use thread_db thread create/death event\n   breakpoints to learn about threads.  */\n\nstatic int\nthread_db_use_events (void)\n{\n  /* Not necessary if the kernel supports clone events.  */\n  return !linux_supports_traceclone ();\n}\n\n/* \"show\" command for the auto_load_thread_db configuration variable.  */\n\nstatic void\nshow_auto_load_thread_db (struct ui_file *file, int from_tty,\n\t\t\t  struct cmd_list_element *c, const char *value)\n{\n  fprintf_filtered (file, _(\"Auto-loading of inferior specific libthread_db \"\n\t\t\t    \"is %s.\\n\"),\n\t\t    value);\n}\n\nstatic void\nset_libthread_db_search_path (char *ignored, int from_tty,\n\t\t\t      struct cmd_list_element *c)\n{\n  if (*libthread_db_search_path == '\\0')\n    {\n      xfree (libthread_db_search_path);\n      libthread_db_search_path = xstrdup (LIBTHREAD_DB_SEARCH_PATH);\n    }\n}\n\n/* If non-zero, print details of libthread_db processing.  */\n\nstatic unsigned int libthread_db_debug;\n\nstatic void\nshow_libthread_db_debug (struct ui_file *file, int from_tty,\n\t\t\t struct cmd_list_element *c, const char *value)\n{\n  fprintf_filtered (file, _(\"libthread-db debugging is %s.\\n\"), value);\n}\n\n/* If we're running on GNU/Linux, we must explicitly attach to any new\n   threads.  */\n\n/* This module's target vector.  */\nstatic struct target_ops thread_db_ops;\n\n/* Non-zero if we have determined the signals used by the threads\n   library.  */\nstatic int thread_signals;\nstatic sigset_t thread_stop_set;\nstatic sigset_t thread_print_set;\n\nstruct thread_db_info\n{\n  struct thread_db_info *next;\n\n  /* Process id this object refers to.  */\n  int pid;\n\n  /* Handle from dlopen for libthread_db.so.  */\n  void *handle;\n\n  /* Absolute pathname from gdb_realpath to disk file used for dlopen-ing\n     HANDLE.  It may be NULL for system library.  */\n  char *filename;\n\n  /* Structure that identifies the child process for the\n     <proc_service.h> interface.  */\n  struct ps_prochandle proc_handle;\n\n  /* Connection to the libthread_db library.  */\n  td_thragent_t *thread_agent;\n\n  /* True if we need to apply the workaround for glibc/BZ5983.  When\n     we catch a PTRACE_O_TRACEFORK, and go query the child's thread\n     list, nptl_db returns the parent's threads in addition to the new\n     (single) child thread.  If this flag is set, we do extra work to\n     be able to ignore such stale entries.  */\n  int need_stale_parent_threads_check;\n\n  /* Location of the thread creation event breakpoint.  The code at\n     this location in the child process will be called by the pthread\n     library whenever a new thread is created.  By setting a special\n     breakpoint at this location, GDB can detect when a new thread is\n     created.  We obtain this location via the td_ta_event_addr\n     call.  */\n  CORE_ADDR td_create_bp_addr;\n\n  /* Location of the thread death event breakpoint.  */\n  CORE_ADDR td_death_bp_addr;\n\n  /* Pointers to the libthread_db functions.  */\n\n  td_err_e (*td_init_p) (void);\n\n  td_err_e (*td_ta_new_p) (struct ps_prochandle * ps,\n\t\t\t\ttd_thragent_t **ta);\n  td_err_e (*td_ta_map_id2thr_p) (const td_thragent_t *ta, thread_t pt,\n\t\t\t\t  td_thrhandle_t *__th);\n  td_err_e (*td_ta_map_lwp2thr_p) (const td_thragent_t *ta,\n\t\t\t\t   lwpid_t lwpid, td_thrhandle_t *th);\n  td_err_e (*td_ta_thr_iter_p) (const td_thragent_t *ta,\n\t\t\t\ttd_thr_iter_f *callback, void *cbdata_p,\n\t\t\t\ttd_thr_state_e state, int ti_pri,\n\t\t\t\tsigset_t *ti_sigmask_p,\n\t\t\t\tunsigned int ti_user_flags);\n  td_err_e (*td_ta_event_addr_p) (const td_thragent_t *ta,\n\t\t\t\t  td_event_e event, td_notify_t *ptr);\n  td_err_e (*td_ta_set_event_p) (const td_thragent_t *ta,\n\t\t\t\t td_thr_events_t *event);\n  td_err_e (*td_ta_clear_event_p) (const td_thragent_t *ta,\n\t\t\t\t   td_thr_events_t *event);\n  td_err_e (*td_ta_event_getmsg_p) (const td_thragent_t *ta,\n\t\t\t\t    td_event_msg_t *msg);\n\n  td_err_e (*td_thr_validate_p) (const td_thrhandle_t *th);\n  td_err_e (*td_thr_get_info_p) (const td_thrhandle_t *th,\n\t\t\t\t td_thrinfo_t *infop);\n  td_err_e (*td_thr_event_enable_p) (const td_thrhandle_t *th,\n\t\t\t\t     int event);\n\n  td_err_e (*td_thr_tls_get_addr_p) (const td_thrhandle_t *th,\n\t\t\t\t     psaddr_t map_address,\n\t\t\t\t     size_t offset, psaddr_t *address);\n  td_err_e (*td_thr_tlsbase_p) (const td_thrhandle_t *th,\n\t\t\t\tunsigned long int modid,\n\t\t\t\tpsaddr_t *base);\n};\n\n/* List of known processes using thread_db, and the required\n   bookkeeping.  */\nstruct thread_db_info *thread_db_list;\n\nstatic void thread_db_find_new_threads_1 (ptid_t ptid);\nstatic void thread_db_find_new_threads_2 (ptid_t ptid, int until_no_new);\n\n/* Add the current inferior to the list of processes using libpthread.\n   Return a pointer to the newly allocated object that was added to\n   THREAD_DB_LIST.  HANDLE is the handle returned by dlopen'ing\n   LIBTHREAD_DB_SO.  */\n\nstatic struct thread_db_info *\nadd_thread_db_info (void *handle)\n{\n  struct thread_db_info *info;\n\n  info = xcalloc (1, sizeof (*info));\n  info->pid = ptid_get_pid (inferior_ptid);\n  info->handle = handle;\n\n  /* The workaround works by reading from /proc/pid/status, so it is\n     disabled for core files.  */\n  if (target_has_execution)\n    info->need_stale_parent_threads_check = 1;\n\n  info->next = thread_db_list;\n  thread_db_list = info;\n\n  return info;\n}\n\n/* Return the thread_db_info object representing the bookkeeping\n   related to process PID, if any; NULL otherwise.  */\n\nstatic struct thread_db_info *\nget_thread_db_info (int pid)\n{\n  struct thread_db_info *info;\n\n  for (info = thread_db_list; info; info = info->next)\n    if (pid == info->pid)\n      return info;\n\n  return NULL;\n}\n\n/* When PID has exited or has been detached, we no longer want to keep\n   track of it as using libpthread.  Call this function to discard\n   thread_db related info related to PID.  Note that this closes\n   LIBTHREAD_DB_SO's dlopen'ed handle.  */\n\nstatic void\ndelete_thread_db_info (int pid)\n{\n  struct thread_db_info *info, *info_prev;\n\n  info_prev = NULL;\n\n  for (info = thread_db_list; info; info_prev = info, info = info->next)\n    if (pid == info->pid)\n      break;\n\n  if (info == NULL)\n    return;\n\n  if (info->handle != NULL)\n    dlclose (info->handle);\n\n  xfree (info->filename);\n\n  if (info_prev)\n    info_prev->next = info->next;\n  else\n    thread_db_list = info->next;\n\n  xfree (info);\n}\n\n/* Prototypes for local functions.  */\nstatic int attach_thread (ptid_t ptid, const td_thrhandle_t *th_p,\n\t\t\t  const td_thrinfo_t *ti_p);\nstatic void detach_thread (ptid_t ptid);\n\f\n\n/* Use \"struct private_thread_info\" to cache thread state.  This is\n   a substantial optimization.  */\n\nstruct private_thread_info\n{\n  /* Flag set when we see a TD_DEATH event for this thread.  */\n  unsigned int dying:1;\n\n  /* Cached thread state.  */\n  td_thrhandle_t th;\n  thread_t tid;\n};\n\f\n\nstatic char *\nthread_db_err_str (td_err_e err)\n{\n  static char buf[64];\n\n  switch (err)\n    {\n    case TD_OK:\n      return \"generic 'call succeeded'\";\n    case TD_ERR:\n      return \"generic error\";\n    case TD_NOTHR:\n      return \"no thread to satisfy query\";\n    case TD_NOSV:\n      return \"no sync handle to satisfy query\";\n    case TD_NOLWP:\n      return \"no LWP to satisfy query\";\n    case TD_BADPH:\n      return \"invalid process handle\";\n    case TD_BADTH:\n      return \"invalid thread handle\";\n    case TD_BADSH:\n      return \"invalid synchronization handle\";\n    case TD_BADTA:\n      return \"invalid thread agent\";\n    case TD_BADKEY:\n      return \"invalid key\";\n    case TD_NOMSG:\n      return \"no event message for getmsg\";\n    case TD_NOFPREGS:\n      return \"FPU register set not available\";\n    case TD_NOLIBTHREAD:\n      return \"application not linked with libthread\";\n    case TD_NOEVENT:\n      return \"requested event is not supported\";\n    case TD_NOCAPAB:\n      return \"capability not available\";\n    case TD_DBERR:\n      return \"debugger service failed\";\n    case TD_NOAPLIC:\n      return \"operation not applicable to\";\n    case TD_NOTSD:\n      return \"no thread-specific data for this thread\";\n    case TD_MALLOC:\n      return \"malloc failed\";\n    case TD_PARTIALREG:\n      return \"only part of register set was written/read\";\n    case TD_NOXREGS:\n      return \"X register set not available for this thread\";\n#ifdef THREAD_DB_HAS_TD_NOTALLOC\n    case TD_NOTALLOC:\n      return \"thread has not yet allocated TLS for given module\";\n#endif\n#ifdef THREAD_DB_HAS_TD_VERSION\n    case TD_VERSION:\n      return \"versions of libpthread and libthread_db do not match\";\n#endif\n#ifdef THREAD_DB_HAS_TD_NOTLS\n    case TD_NOTLS:\n      return \"there is no TLS segment in the given module\";\n#endif\n    default:\n      snprintf (buf, sizeof (buf), \"unknown thread_db error '%d'\", err);\n      return buf;\n    }\n}\n\f\n/* Return 1 if any threads have been registered.  There may be none if\n   the threading library is not fully initialized yet.  */\n\nstatic int\nhave_threads_callback (struct thread_info *thread, void *args)\n{\n  int pid = * (int *) args;\n\n  if (ptid_get_pid (thread->ptid) != pid)\n    return 0;\n\n  return thread->private != NULL;\n}\n\nstatic int\nhave_threads (ptid_t ptid)\n{\n  int pid = ptid_get_pid (ptid);\n\n  return iterate_over_threads (have_threads_callback, &pid) != NULL;\n}\n\nstruct thread_get_info_inout\n{\n  struct thread_info *thread_info;\n  struct thread_db_info *thread_db_info;\n};\n\n/* A callback function for td_ta_thr_iter, which we use to map all\n   threads to LWPs.\n\n   THP is a handle to the current thread; if INFOP is not NULL, the\n   struct thread_info associated with this thread is returned in\n   *INFOP.\n\n   If the thread is a zombie, TD_THR_ZOMBIE is returned.  Otherwise,\n   zero is returned to indicate success.  */\n\nstatic int\nthread_get_info_callback (const td_thrhandle_t *thp, void *argp)\n{\n  td_thrinfo_t ti;\n  td_err_e err;\n  ptid_t thread_ptid;\n  struct thread_get_info_inout *inout;\n  struct thread_db_info *info;\n\n  inout = argp;\n  info = inout->thread_db_info;\n\n  err = info->td_thr_get_info_p (thp, &ti);\n  if (err != TD_OK)\n    error (_(\"thread_get_info_callback: cannot get thread info: %s\"),\n\t   thread_db_err_str (err));\n\n  /* Fill the cache.  */\n  thread_ptid = ptid_build (info->pid, ti.ti_lid, 0);\n  inout->thread_info = find_thread_ptid (thread_ptid);\n\n  if (inout->thread_info == NULL)\n    {\n      /* New thread.  Attach to it now (why wait?).  */\n      if (!have_threads (thread_ptid))\n \tthread_db_find_new_threads_1 (thread_ptid);\n      else\n\tattach_thread (thread_ptid, thp, &ti);\n      inout->thread_info = find_thread_ptid (thread_ptid);\n      gdb_assert (inout->thread_info != NULL);\n    }\n\n  return 0;\n}\n\f\n/* Fetch the user-level thread id of PTID.  */\n\nstatic void\nthread_from_lwp (ptid_t ptid)\n{\n  td_thrhandle_t th;\n  td_err_e err;\n  struct thread_db_info *info;\n  struct thread_get_info_inout io = {0};\n\n  /* Just in case td_ta_map_lwp2thr doesn't initialize it completely.  */\n  th.th_unique = 0;\n\n  /* This ptid comes from linux-nat.c, which should always fill in the\n     LWP.  */\n  gdb_assert (ptid_get_lwp (ptid) != 0);\n\n  info = get_thread_db_info (ptid_get_pid (ptid));\n\n  /* Access an lwp we know is stopped.  */\n  info->proc_handle.ptid = ptid;\n  err = info->td_ta_map_lwp2thr_p (info->thread_agent, ptid_get_lwp (ptid),\n\t\t\t\t   &th);\n  if (err != TD_OK)\n    error (_(\"Cannot find user-level thread for LWP %ld: %s\"),\n\t   ptid_get_lwp (ptid), thread_db_err_str (err));\n\n  /* Long-winded way of fetching the thread info.  */\n  io.thread_db_info = info;\n  io.thread_info = NULL;\n  thread_get_info_callback (&th, &io);\n}\n\f\n\n/* Attach to lwp PTID, doing whatever else is required to have this\n   LWP under the debugger's control --- e.g., enabling event\n   reporting.  Returns true on success.  */\nint\nthread_db_attach_lwp (ptid_t ptid)\n{\n  td_thrhandle_t th;\n  td_thrinfo_t ti;\n  td_err_e err;\n  struct thread_db_info *info;\n\n  info = get_thread_db_info (ptid_get_pid (ptid));\n\n  if (info == NULL)\n    return 0;\n\n  /* This ptid comes from linux-nat.c, which should always fill in the\n     LWP.  */\n  gdb_assert (ptid_get_lwp (ptid) != 0);\n\n  /* Access an lwp we know is stopped.  */\n  info->proc_handle.ptid = ptid;\n\n  /* If we have only looked at the first thread before libpthread was\n     initialized, we may not know its thread ID yet.  Make sure we do\n     before we add another thread to the list.  */\n  if (!have_threads (ptid))\n    thread_db_find_new_threads_1 (ptid);\n\n  err = info->td_ta_map_lwp2thr_p (info->thread_agent, ptid_get_lwp (ptid),\n\t\t\t\t   &th);\n  if (err != TD_OK)\n    /* Cannot find user-level thread.  */\n    return 0;\n\n  err = info->td_thr_get_info_p (&th, &ti);\n  if (err != TD_OK)\n    {\n      warning (_(\"Cannot get thread info: %s\"), thread_db_err_str (err));\n      return 0;\n    }\n\n  attach_thread (ptid, &th, &ti);\n  return 1;\n}\n\nstatic void *\nverbose_dlsym (void *handle, const char *name)\n{\n  void *sym = dlsym (handle, name);\n  if (sym == NULL)\n    warning (_(\"Symbol \\\"%s\\\" not found in libthread_db: %s\"),\n\t     name, dlerror ());\n  return sym;\n}\n\nstatic td_err_e\nenable_thread_event (int event, CORE_ADDR *bp)\n{\n  td_notify_t notify;\n  td_err_e err;\n  struct thread_db_info *info;\n\n  info = get_thread_db_info (ptid_get_pid (inferior_ptid));\n\n  /* Access an lwp we know is stopped.  */\n  info->proc_handle.ptid = inferior_ptid;\n\n  /* Get the breakpoint address for thread EVENT.  */\n  err = info->td_ta_event_addr_p (info->thread_agent, event, &notify);\n  if (err != TD_OK)\n    return err;\n\n  /* Set up the breakpoint.  */\n  gdb_assert (exec_bfd);\n  (*bp) = (gdbarch_convert_from_func_ptr_addr\n\t   (target_gdbarch (),\n\t    /* Do proper sign extension for the target.  */\n\t    (bfd_get_sign_extend_vma (exec_bfd) > 0\n\t     ? (CORE_ADDR) (intptr_t) notify.u.bptaddr\n\t     : (CORE_ADDR) (uintptr_t) notify.u.bptaddr),\n\t    &current_target));\n  create_thread_event_breakpoint (target_gdbarch (), *bp);\n\n  return TD_OK;\n}\n\n/* Verify inferior's '\\0'-terminated symbol VER_SYMBOL starts with \"%d.%d\" and\n   return 1 if this version is lower (and not equal) to\n   VER_MAJOR_MIN.VER_MINOR_MIN.  Return 0 in all other cases.  */\n\nstatic int\ninferior_has_bug (const char *ver_symbol, int ver_major_min, int ver_minor_min)\n{\n  struct bound_minimal_symbol version_msym;\n  CORE_ADDR version_addr;\n  char *version;\n  int err, got, retval = 0;\n\n  version_msym = lookup_minimal_symbol (ver_symbol, NULL, NULL);\n  if (version_msym.minsym == NULL)\n    return 0;\n\n  version_addr = BMSYMBOL_VALUE_ADDRESS (version_msym);\n  got = target_read_string (version_addr, &version, 32, &err);\n  if (err == 0 && memchr (version, 0, got) == &version[got -1])\n    {\n      int major, minor;\n\n      retval = (sscanf (version, \"%d.%d\", &major, &minor) == 2\n\t\t&& (major < ver_major_min\n\t\t    || (major == ver_major_min && minor < ver_minor_min)));\n    }\n  xfree (version);\n\n  return retval;\n}\n\nstatic void\nenable_thread_event_reporting (void)\n{\n  td_thr_events_t events;\n  td_err_e err;\n  struct thread_db_info *info;\n\n  info = get_thread_db_info (ptid_get_pid (inferior_ptid));\n\n  /* We cannot use the thread event reporting facility if these\n     functions aren't available.  */\n  if (info->td_ta_event_addr_p == NULL\n      || info->td_ta_set_event_p == NULL\n      || info->td_ta_event_getmsg_p == NULL\n      || info->td_thr_event_enable_p == NULL)\n    return;\n\n  /* Set the process wide mask saying which events we're interested in.  */\n  td_event_emptyset (&events);\n  td_event_addset (&events, TD_CREATE);\n\n  /* There is a bug fixed between linuxthreads 2.1.3 and 2.2 by\n       commit 2e4581e4fba917f1779cd0a010a45698586c190a\n       * manager.c (pthread_exited): Correctly report event as TD_REAP\n       instead of TD_DEATH.  Fix comments.\n     where event reporting facility is broken for TD_DEATH events,\n     so don't enable it if we have glibc but a lower version.  */\n  if (!inferior_has_bug (\"__linuxthreads_version\", 2, 2))\n    td_event_addset (&events, TD_DEATH);\n\n  err = info->td_ta_set_event_p (info->thread_agent, &events);\n  if (err != TD_OK)\n    {\n      warning (_(\"Unable to set global thread event mask: %s\"),\n\t       thread_db_err_str (err));\n      return;\n    }\n\n  /* Delete previous thread event breakpoints, if any.  */\n  remove_thread_event_breakpoints ();\n  info->td_create_bp_addr = 0;\n  info->td_death_bp_addr = 0;\n\n  /* Set up the thread creation event.  */\n  err = enable_thread_event (TD_CREATE, &info->td_create_bp_addr);\n  if (err != TD_OK)\n    {\n      warning (_(\"Unable to get location for thread creation breakpoint: %s\"),\n\t       thread_db_err_str (err));\n      return;\n    }\n\n  /* Set up the thread death event.  */\n  err = enable_thread_event (TD_DEATH, &info->td_death_bp_addr);\n  if (err != TD_OK)\n    {\n      warning (_(\"Unable to get location for thread death breakpoint: %s\"),\n\t       thread_db_err_str (err));\n      return;\n    }\n}\n\n/* Similar as thread_db_find_new_threads_1, but try to silently ignore errors\n   if appropriate.\n\n   Return 1 if the caller should abort libthread_db initialization.  Return 0\n   otherwise.  */\n\nstatic int\nthread_db_find_new_threads_silently (ptid_t ptid)\n{\n  volatile struct gdb_exception except;\n\n  TRY_CATCH (except, RETURN_MASK_ERROR)\n    {\n      thread_db_find_new_threads_2 (ptid, 1);\n    }\n\n  if (except.reason < 0)\n    {\n      if (libthread_db_debug)\n\texception_fprintf (gdb_stdlog, except,\n\t\t\t   \"Warning: thread_db_find_new_threads_silently: \");\n\n      /* There is a bug fixed between nptl 2.6.1 and 2.7 by\n\t   commit 7d9d8bd18906fdd17364f372b160d7ab896ce909\n\t where calls to td_thr_get_info fail with TD_ERR for statically linked\n\t executables if td_thr_get_info is called before glibc has initialized\n\t itself.\n\t \n\t If the nptl bug is NOT present in the inferior and still thread_db\n\t reports an error return 1.  It means the inferior has corrupted thread\n\t list and GDB should fall back only to LWPs.\n\n\t If the nptl bug is present in the inferior return 0 to silently ignore\n\t such errors, and let gdb enumerate threads again later.  In such case\n\t GDB cannot properly display LWPs if the inferior thread list is\n\t corrupted.  For core files it does not apply, no 'later enumeration'\n\t is possible.  */\n\n      if (!target_has_execution || !inferior_has_bug (\"nptl_version\", 2, 7))\n\t{\n\t  exception_fprintf (gdb_stderr, except,\n\t\t\t     _(\"Warning: couldn't activate thread debugging \"\n\t\t\t       \"using libthread_db: \"));\n\t  return 1;\n\t}\n    }\n  return 0;\n}\n\n/* Lookup a library in which given symbol resides.\n   Note: this is looking in GDB process, not in the inferior.\n   Returns library name, or NULL.  */\n\nstatic const char *\ndladdr_to_soname (const void *addr)\n{\n  Dl_info info;\n\n  if (dladdr (addr, &info) != 0)\n    return info.dli_fname;\n  return NULL;\n}\n\n/* Attempt to initialize dlopen()ed libthread_db, described by INFO.\n   Return 1 on success.\n   Failure could happen if libthread_db does not have symbols we expect,\n   or when it refuses to work with the current inferior (e.g. due to\n   version mismatch between libthread_db and libpthread).  */\n\nstatic int\ntry_thread_db_load_1 (struct thread_db_info *info)\n{\n  td_err_e err;\n\n  /* Initialize pointers to the dynamic library functions we will use.\n     Essential functions first.  */\n\n  info->td_init_p = verbose_dlsym (info->handle, \"td_init\");\n  if (info->td_init_p == NULL)\n    return 0;\n\n  err = info->td_init_p ();\n  if (err != TD_OK)\n    {\n      warning (_(\"Cannot initialize libthread_db: %s\"),\n\t       thread_db_err_str (err));\n      return 0;\n    }\n\n  info->td_ta_new_p = verbose_dlsym (info->handle, \"td_ta_new\");\n  if (info->td_ta_new_p == NULL)\n    return 0;\n\n  /* Initialize the structure that identifies the child process.  */\n  info->proc_handle.ptid = inferior_ptid;\n\n  /* Now attempt to open a connection to the thread library.  */\n  err = info->td_ta_new_p (&info->proc_handle, &info->thread_agent);\n  if (err != TD_OK)\n    {\n      if (libthread_db_debug)\n\tfprintf_unfiltered (gdb_stdlog, _(\"td_ta_new failed: %s\\n\"),\n\t\t\t    thread_db_err_str (err));\n      else\n        switch (err)\n          {\n            case TD_NOLIBTHREAD:\n#ifdef THREAD_DB_HAS_TD_VERSION\n            case TD_VERSION:\n#endif\n              /* The errors above are not unexpected and silently ignored:\n                 they just mean we haven't found correct version of\n                 libthread_db yet.  */\n              break;\n            default:\n              warning (_(\"td_ta_new failed: %s\"), thread_db_err_str (err));\n          }\n      return 0;\n    }\n\n  info->td_ta_map_id2thr_p = verbose_dlsym (info->handle, \"td_ta_map_id2thr\");\n  if (info->td_ta_map_id2thr_p == NULL)\n    return 0;\n\n  info->td_ta_map_lwp2thr_p = verbose_dlsym (info->handle,\n\t\t\t\t\t     \"td_ta_map_lwp2thr\");\n  if (info->td_ta_map_lwp2thr_p == NULL)\n    return 0;\n\n  info->td_ta_thr_iter_p = verbose_dlsym (info->handle, \"td_ta_thr_iter\");\n  if (info->td_ta_thr_iter_p == NULL)\n    return 0;\n\n  info->td_thr_validate_p = verbose_dlsym (info->handle, \"td_thr_validate\");\n  if (info->td_thr_validate_p == NULL)\n    return 0;\n\n  info->td_thr_get_info_p = verbose_dlsym (info->handle, \"td_thr_get_info\");\n  if (info->td_thr_get_info_p == NULL)\n    return 0;\n\n  /* These are not essential.  */\n  info->td_ta_event_addr_p = dlsym (info->handle, \"td_ta_event_addr\");\n  info->td_ta_set_event_p = dlsym (info->handle, \"td_ta_set_event\");\n  info->td_ta_clear_event_p = dlsym (info->handle, \"td_ta_clear_event\");\n  info->td_ta_event_getmsg_p = dlsym (info->handle, \"td_ta_event_getmsg\");\n  info->td_thr_event_enable_p = dlsym (info->handle, \"td_thr_event_enable\");\n  info->td_thr_tls_get_addr_p = dlsym (info->handle, \"td_thr_tls_get_addr\");\n  info->td_thr_tlsbase_p = dlsym (info->handle, \"td_thr_tlsbase\");\n\n  if (thread_db_find_new_threads_silently (inferior_ptid) != 0)\n    {\n      /* Even if libthread_db initializes, if the thread list is\n         corrupted, we'd not manage to list any threads.  Better reject this\n         thread_db, and fall back to at least listing LWPs.  */\n      return 0;\n    }\n\n  printf_unfiltered (_(\"[Thread debugging using libthread_db enabled]\\n\"));\n\n  if (*libthread_db_search_path || libthread_db_debug)\n    {\n      struct ui_file *file;\n      const char *library;\n\n      library = dladdr_to_soname (*info->td_ta_new_p);\n      if (library == NULL)\n\tlibrary = LIBTHREAD_DB_SO;\n\n      /* If we'd print this to gdb_stdout when debug output is\n\t disabled, still print it to gdb_stdout if debug output is\n\t enabled.  User visible output should not depend on debug\n\t settings.  */\n      file = *libthread_db_search_path != '\\0' ? gdb_stdout : gdb_stdlog;\n      fprintf_unfiltered (file, _(\"Using host libthread_db library \\\"%s\\\".\\n\"),\n\t\t\t  library);\n    }\n\n  /* The thread library was detected.  Activate the thread_db target\n     if this is the first process using it.  */\n  if (thread_db_list->next == NULL)\n    push_target (&thread_db_ops);\n\n  /* Enable event reporting, but not when debugging a core file.  */\n  if (target_has_execution && thread_db_use_events ())\n    enable_thread_event_reporting ();\n\n  return 1;\n}\n\n/* Attempt to use LIBRARY as libthread_db.  LIBRARY could be absolute,\n   relative, or just LIBTHREAD_DB.  */\n\nstatic int\ntry_thread_db_load (const char *library, int check_auto_load_safe)\n{\n  void *handle;\n  struct thread_db_info *info;\n\n  if (libthread_db_debug)\n    fprintf_unfiltered (gdb_stdlog,\n\t\t\t_(\"Trying host libthread_db library: %s.\\n\"),\n\t\t\tlibrary);\n\n  if (check_auto_load_safe)\n    {\n      if (access (library, R_OK) != 0)\n\t{\n\t  /* Do not print warnings by file_is_auto_load_safe if the library does\n\t     not exist at this place.  */\n\t  if (libthread_db_debug)\n\t    fprintf_unfiltered (gdb_stdlog, _(\"open failed: %s.\\n\"),\n\t\t\t\tsafe_strerror (errno));\n\t  return 0;\n\t}\n\n      if (!file_is_auto_load_safe (library, _(\"auto-load: Loading libthread-db \"\n\t\t\t\t\t      \"library \\\"%s\\\" from explicit \"\n\t\t\t\t\t      \"directory.\\n\"),\n\t\t\t\t   library))\n\treturn 0;\n    }\n\n  handle = dlopen (library, RTLD_NOW);\n  if (handle == NULL)\n    {\n      if (libthread_db_debug)\n\tfprintf_unfiltered (gdb_stdlog, _(\"dlopen failed: %s.\\n\"), dlerror ());\n      return 0;\n    }\n\n  if (libthread_db_debug && strchr (library, '/') == NULL)\n    {\n      void *td_init;\n\n      td_init = dlsym (handle, \"td_init\");\n      if (td_init != NULL)\n        {\n          const char *const libpath = dladdr_to_soname (td_init);\n\n          if (libpath != NULL)\n            fprintf_unfiltered (gdb_stdlog, _(\"Host %s resolved to: %s.\\n\"),\n                               library, libpath);\n        }\n    }\n\n  info = add_thread_db_info (handle);\n\n  /* Do not save system library name, that one is always trusted.  */\n  if (strchr (library, '/') != NULL)\n    info->filename = gdb_realpath (library);\n\n  if (try_thread_db_load_1 (info))\n    return 1;\n\n  /* This library \"refused\" to work on current inferior.  */\n  delete_thread_db_info (ptid_get_pid (inferior_ptid));\n  return 0;\n}\n\n/* Subroutine of try_thread_db_load_from_pdir to simplify it.\n   Try loading libthread_db in directory(OBJ)/SUBDIR.\n   SUBDIR may be NULL.  It may also be something like \"../lib64\".\n   The result is true for success.  */\n\nstatic int\ntry_thread_db_load_from_pdir_1 (struct objfile *obj, const char *subdir)\n{\n  struct cleanup *cleanup;\n  char *path, *cp;\n  int result;\n  const char *obj_name = objfile_name (obj);\n\n  if (obj_name[0] != '/')\n    {\n      warning (_(\"Expected absolute pathname for libpthread in the\"\n\t\t \" inferior, but got %s.\"), obj_name);\n      return 0;\n    }\n\n  path = xmalloc (strlen (obj_name) + (subdir ? strlen (subdir) + 1 : 0)\n\t\t  + 1 + strlen (LIBTHREAD_DB_SO) + 1);\n  cleanup = make_cleanup (xfree, path);\n\n  strcpy (path, obj_name);\n  cp = strrchr (path, '/');\n  /* This should at minimum hit the first character.  */\n  gdb_assert (cp != NULL);\n  cp[1] = '\\0';\n  if (subdir != NULL)\n    {\n      strcat (cp, subdir);\n      strcat (cp, \"/\");\n    }\n  strcat (cp, LIBTHREAD_DB_SO);\n\n  result = try_thread_db_load (path, 1);\n\n  do_cleanups (cleanup);\n  return result;\n}\n\n/* Handle $pdir in libthread-db-search-path.\n   Look for libthread_db in directory(libpthread)/SUBDIR.\n   SUBDIR may be NULL.  It may also be something like \"../lib64\".\n   The result is true for success.  */\n\nstatic int\ntry_thread_db_load_from_pdir (const char *subdir)\n{\n  struct objfile *obj;\n\n  if (!auto_load_thread_db)\n    return 0;\n\n  ALL_OBJFILES (obj)\n    if (libpthread_name_p (objfile_name (obj)))\n      {\n\tif (try_thread_db_load_from_pdir_1 (obj, subdir))\n\t  return 1;\n\n\t/* We may have found the separate-debug-info version of\n\t   libpthread, and it may live in a directory without a matching\n\t   libthread_db.  */\n\tif (obj->separate_debug_objfile_backlink != NULL)\n\t  return try_thread_db_load_from_pdir_1 (obj->separate_debug_objfile_backlink,\n\t\t\t\t\t\t subdir);\n\n\treturn 0;\n      }\n\n  return 0;\n}\n\n/* Handle $sdir in libthread-db-search-path.\n   Look for libthread_db in the system dirs, or wherever a plain\n   dlopen(file_without_path) will look.\n   The result is true for success.  */\n\nstatic int\ntry_thread_db_load_from_sdir (void)\n{\n  return try_thread_db_load (LIBTHREAD_DB_SO, 0);\n}\n\n/* Try to load libthread_db from directory DIR of length DIR_LEN.\n   The result is true for success.  */\n\nstatic int\ntry_thread_db_load_from_dir (const char *dir, size_t dir_len)\n{\n  struct cleanup *cleanup;\n  char *path;\n  int result;\n\n  if (!auto_load_thread_db)\n    return 0;\n\n  path = xmalloc (dir_len + 1 + strlen (LIBTHREAD_DB_SO) + 1);\n  cleanup = make_cleanup (xfree, path);\n\n  memcpy (path, dir, dir_len);\n  path[dir_len] = '/';\n  strcpy (path + dir_len + 1, LIBTHREAD_DB_SO);\n\n  result = try_thread_db_load (path, 1);\n\n  do_cleanups (cleanup);\n  return result;\n}\n\n/* Search libthread_db_search_path for libthread_db which \"agrees\"\n   to work on current inferior.\n   The result is true for success.  */\n\nstatic int\nthread_db_load_search (void)\n{\n  VEC (char_ptr) *dir_vec;\n  struct cleanup *cleanups;\n  char *this_dir;\n  int i, rc = 0;\n\n  dir_vec = dirnames_to_char_ptr_vec (libthread_db_search_path);\n  cleanups = make_cleanup_free_char_ptr_vec (dir_vec);\n\n  for (i = 0; VEC_iterate (char_ptr, dir_vec, i, this_dir); ++i)\n    {\n      const int pdir_len = sizeof (\"$pdir\") - 1;\n      size_t this_dir_len;\n\n      this_dir_len = strlen (this_dir);\n\n      if (strncmp (this_dir, \"$pdir\", pdir_len) == 0\n\t  && (this_dir[pdir_len] == '\\0'\n\t      || this_dir[pdir_len] == '/'))\n\t{\n\t  char *subdir = NULL;\n\t  struct cleanup *free_subdir_cleanup\n\t    = make_cleanup (null_cleanup, NULL);\n\n\t  if (this_dir[pdir_len] == '/')\n\t    {\n\t      subdir = xmalloc (strlen (this_dir));\n\t      make_cleanup (xfree, subdir);\n\t      strcpy (subdir, this_dir + pdir_len + 1);\n\t    }\n\t  rc = try_thread_db_load_from_pdir (subdir);\n\t  do_cleanups (free_subdir_cleanup);\n\t  if (rc)\n\t    break;\n\t}\n      else if (strcmp (this_dir, \"$sdir\") == 0)\n\t{\n\t  if (try_thread_db_load_from_sdir ())\n\t    {\n\t      rc = 1;\n\t      break;\n\t    }\n\t}\n      else\n\t{\n\t  if (try_thread_db_load_from_dir (this_dir, this_dir_len))\n\t    {\n\t      rc = 1;\n\t      break;\n\t    }\n\t}\n    }\n\n  do_cleanups (cleanups);\n  if (libthread_db_debug)\n    fprintf_unfiltered (gdb_stdlog,\n\t\t\t_(\"thread_db_load_search returning %d\\n\"), rc);\n  return rc;\n}\n\n/* Return non-zero if the inferior has a libpthread.  */\n\nstatic int\nhas_libpthread (void)\n{\n  struct objfile *obj;\n\n  ALL_OBJFILES (obj)\n    if (libpthread_name_p (objfile_name (obj)))\n      return 1;\n\n  return 0;\n}\n\n/* Attempt to load and initialize libthread_db.\n   Return 1 on success.  */\n\nstatic int\nthread_db_load (void)\n{\n  struct thread_db_info *info;\n\n  info = get_thread_db_info (ptid_get_pid (inferior_ptid));\n\n  if (info != NULL)\n    return 1;\n\n  /* Don't attempt to use thread_db on executables not running\n     yet.  */\n  if (!target_has_registers)\n    return 0;\n\n  /* Don't attempt to use thread_db for remote targets.  */\n  if (!(target_can_run (&current_target) || core_bfd))\n    return 0;\n\n  if (thread_db_load_search ())\n    return 1;\n\n  /* We couldn't find a libthread_db.\n     If the inferior has a libpthread warn the user.  */\n  if (has_libpthread ())\n    {\n      warning (_(\"Unable to find libthread_db matching inferior's thread\"\n\t\t \" library, thread debugging will not be available.\"));\n      return 0;\n    }\n\n  /* Either this executable isn't using libpthread at all, or it is\n     statically linked.  Since we can't easily distinguish these two cases,\n     no warning is issued.  */\n  return 0;\n}\n\nstatic void\ndisable_thread_event_reporting (struct thread_db_info *info)\n{\n  if (info->td_ta_clear_event_p != NULL)\n    {\n      td_thr_events_t events;\n\n      /* Set the process wide mask saying we aren't interested in any\n\t events anymore.  */\n      td_event_fillset (&events);\n      info->td_ta_clear_event_p (info->thread_agent, &events);\n    }\n\n  info->td_create_bp_addr = 0;\n  info->td_death_bp_addr = 0;\n}\n\nstatic void\ncheck_thread_signals (void)\n{\n  if (!thread_signals)\n    {\n      sigset_t mask;\n      int i;\n\n      lin_thread_get_thread_signals (&mask);\n      sigemptyset (&thread_stop_set);\n      sigemptyset (&thread_print_set);\n\n      for (i = 1; i < NSIG; i++)\n\t{\n\t  if (sigismember (&mask, i))\n\t    {\n\t      if (signal_stop_update (gdb_signal_from_host (i), 0))\n\t\tsigaddset (&thread_stop_set, i);\n\t      if (signal_print_update (gdb_signal_from_host (i), 0))\n\t\tsigaddset (&thread_print_set, i);\n\t      thread_signals = 1;\n\t    }\n\t}\n    }\n}\n\n/* Check whether thread_db is usable.  This function is called when\n   an inferior is created (or otherwise acquired, e.g. attached to)\n   and when new shared libraries are loaded into a running process.  */\n\nvoid\ncheck_for_thread_db (void)\n{\n  /* Do nothing if we couldn't load libthread_db.so.1.  */\n  if (!thread_db_load ())\n    return;\n}\n\n/* This function is called via the new_objfile observer.  */\n\nstatic void\nthread_db_new_objfile (struct objfile *objfile)\n{\n  /* This observer must always be called with inferior_ptid set\n     correctly.  */\n\n  if (objfile != NULL\n      /* libpthread with separate debug info has its debug info file already\n\t loaded (and notified without successful thread_db initialization)\n\t the time observer_notify_new_objfile is called for the library itself.\n\t Static executables have their separate debug info loaded already\n\t before the inferior has started.  */\n      && objfile->separate_debug_objfile_backlink == NULL\n      /* Only check for thread_db if we loaded libpthread,\n\t or if this is the main symbol file.\n\t We need to check OBJF_MAINLINE to handle the case of debugging\n\t a statically linked executable AND the symbol file is specified AFTER\n\t the exec file is loaded (e.g., gdb -c core ; file foo).\n\t For dynamically linked executables, libpthread can be near the end\n\t of the list of shared libraries to load, and in an app of several\n\t thousand shared libraries, this can otherwise be painful.  */\n      && ((objfile->flags & OBJF_MAINLINE) != 0\n\t  || libpthread_name_p (objfile_name (objfile))))\n    check_for_thread_db ();\n}\n\nstatic void\ncheck_pid_namespace_match (void)\n{\n  /* Check is only relevant for local targets targets.  */\n  if (target_can_run (&current_target))\n    {\n      /* If the child is in a different PID namespace, its idea of its\n\t PID will differ from our idea of its PID.  When we scan the\n\t child's thread list, we'll mistakenly think it has no threads\n\t since the thread PID fields won't match the PID we give to\n\t libthread_db.  */\n      char *our_pid_ns = linux_proc_pid_get_ns (getpid (), \"pid\");\n      char *inferior_pid_ns = linux_proc_pid_get_ns (\n\tptid_get_pid (inferior_ptid), \"pid\");\n\n      if (our_pid_ns != NULL && inferior_pid_ns != NULL\n\t  && strcmp (our_pid_ns, inferior_pid_ns) != 0)\n\t{\n\t  warning (_ (\"Target and debugger are in different PID \"\n\t\t      \"namespaces; thread lists and other data are \"\n\t\t      \"likely unreliable\"));\n\t}\n\n      xfree (our_pid_ns);\n      xfree (inferior_pid_ns);\n    }\n}\n\n/* This function is called via the inferior_created observer.\n   This handles the case of debugging statically linked executables.  */\n\nstatic void\nthread_db_inferior_created (struct target_ops *target, int from_tty)\n{\n  check_pid_namespace_match ();\n  check_for_thread_db ();\n}\n\n/* Update the thread's state (what's displayed in \"info threads\"),\n   from libthread_db thread state information.  */\n\nstatic void\nupdate_thread_state (struct private_thread_info *private,\n\t\t     const td_thrinfo_t *ti_p)\n{\n  private->dying = (ti_p->ti_state == TD_THR_UNKNOWN\n\t\t    || ti_p->ti_state == TD_THR_ZOMBIE);\n}\n\n/* Attach to a new thread.  This function is called when we receive a\n   TD_CREATE event or when we iterate over all threads and find one\n   that wasn't already in our list.  Returns true on success.  */\n\nstatic int\nattach_thread (ptid_t ptid, const td_thrhandle_t *th_p,\n\t       const td_thrinfo_t *ti_p)\n{\n  struct private_thread_info *private;\n  struct thread_info *tp;\n  td_err_e err;\n  struct thread_db_info *info;\n\n  /* If we're being called after a TD_CREATE event, we may already\n     know about this thread.  There are two ways this can happen.  We\n     may have iterated over all threads between the thread creation\n     and the TD_CREATE event, for instance when the user has issued\n     the `info threads' command before the SIGTRAP for hitting the\n     thread creation breakpoint was reported.  Alternatively, the\n     thread may have exited and a new one been created with the same\n     thread ID.  In the first case we don't need to do anything; in\n     the second case we should discard information about the dead\n     thread and attach to the new one.  */\n  tp = find_thread_ptid (ptid);\n  if (tp != NULL)\n    {\n      /* If tp->private is NULL, then GDB is already attached to this\n\t thread, but we do not know anything about it.  We can learn\n\t about it here.  This can only happen if we have some other\n\t way besides libthread_db to notice new threads (i.e.\n\t PTRACE_EVENT_CLONE); assume the same mechanism notices thread\n\t exit, so this can not be a stale thread recreated with the\n\t same ID.  */\n      if (tp->private != NULL)\n\t{\n\t  if (!tp->private->dying)\n\t    return 0;\n\n\t  delete_thread (ptid);\n\t  tp = NULL;\n\t}\n    }\n\n  if (target_has_execution)\n    check_thread_signals ();\n\n  /* Under GNU/Linux, we have to attach to each and every thread.  */\n  if (target_has_execution\n      && tp == NULL)\n    {\n      int res;\n\n      res = lin_lwp_attach_lwp (ptid_build (ptid_get_pid (ptid),\n\t\t\t\t\t    ti_p->ti_lid, 0));\n      if (res < 0)\n\t{\n\t  /* Error, stop iterating.  */\n\t  return 0;\n\t}\n      else if (res > 0)\n\t{\n\t  /* Pretend this thread doesn't exist yet, and keep\n\t     iterating.  */\n\t  return 1;\n\t}\n\n      /* Otherwise, we sucessfully attached to the thread.  */\n    }\n\n  /* Construct the thread's private data.  */\n  private = xmalloc (sizeof (struct private_thread_info));\n  memset (private, 0, sizeof (struct private_thread_info));\n\n  /* A thread ID of zero may mean the thread library has not initialized\n     yet.  But we shouldn't even get here if that's the case.  FIXME:\n     if we change GDB to always have at least one thread in the thread\n     list this will have to go somewhere else; maybe private == NULL\n     until the thread_db target claims it.  */\n  gdb_assert (ti_p->ti_tid != 0);\n  private->th = *th_p;\n  private->tid = ti_p->ti_tid;\n  update_thread_state (private, ti_p);\n\n  /* Add the thread to GDB's thread list.  */\n  if (tp == NULL)\n    add_thread_with_info (ptid, private);\n  else\n    tp->private = private;\n\n  info = get_thread_db_info (ptid_get_pid (ptid));\n\n  /* Enable thread event reporting for this thread, except when\n     debugging a core file.  */\n  if (target_has_execution && thread_db_use_events ())\n    {\n      err = info->td_thr_event_enable_p (th_p, 1);\n      if (err != TD_OK)\n\terror (_(\"Cannot enable thread event reporting for %s: %s\"),\n\t       target_pid_to_str (ptid), thread_db_err_str (err));\n    }\n\n  return 1;\n}\n\nstatic void\ndetach_thread (ptid_t ptid)\n{\n  struct thread_info *thread_info;\n\n  /* Don't delete the thread now, because it still reports as active\n     until it has executed a few instructions after the event\n     breakpoint - if we deleted it now, \"info threads\" would cause us\n     to re-attach to it.  Just mark it as having had a TD_DEATH\n     event.  This means that we won't delete it from our thread list\n     until we notice that it's dead (via prune_threads), or until\n     something re-uses its thread ID.  We'll report the thread exit\n     when the underlying LWP dies.  */\n  thread_info = find_thread_ptid (ptid);\n  gdb_assert (thread_info != NULL && thread_info->private != NULL);\n  thread_info->private->dying = 1;\n}\n\nstatic void\nthread_db_detach (struct target_ops *ops, const char *args, int from_tty)\n{\n  struct target_ops *target_beneath = find_target_beneath (ops);\n  struct thread_db_info *info;\n\n  info = get_thread_db_info (ptid_get_pid (inferior_ptid));\n\n  if (info)\n    {\n      if (target_has_execution && thread_db_use_events ())\n\t{\n\t  disable_thread_event_reporting (info);\n\n\t  /* Delete the old thread event breakpoints.  Note that\n\t     unlike when mourning, we can remove them here because\n\t     there's still a live inferior to poke at.  In any case,\n\t     GDB will not try to insert anything in the inferior when\n\t     removing a breakpoint.  */\n\t  remove_thread_event_breakpoints ();\n\t}\n\n      delete_thread_db_info (ptid_get_pid (inferior_ptid));\n    }\n\n  target_beneath->to_detach (target_beneath, args, from_tty);\n\n  /* NOTE: From this point on, inferior_ptid is null_ptid.  */\n\n  /* If there are no more processes using libpthread, detach the\n     thread_db target ops.  */\n  if (!thread_db_list)\n    unpush_target (&thread_db_ops);\n}\n\n/* Check if PID is currently stopped at the location of a thread event\n   breakpoint location.  If it is, read the event message and act upon\n   the event.  */\n\nstatic void\ncheck_event (ptid_t ptid)\n{\n  struct regcache *regcache = get_thread_regcache (ptid);\n  struct gdbarch *gdbarch = get_regcache_arch (regcache);\n  td_event_msg_t msg;\n  td_thrinfo_t ti;\n  td_err_e err;\n  CORE_ADDR stop_pc;\n  int loop = 0;\n  struct thread_db_info *info;\n\n  info = get_thread_db_info (ptid_get_pid (ptid));\n\n  /* Bail out early if we're not at a thread event breakpoint.  */\n  stop_pc = regcache_read_pc (regcache)\n\t    - target_decr_pc_after_break (gdbarch);\n  if (stop_pc != info->td_create_bp_addr\n      && stop_pc != info->td_death_bp_addr)\n    return;\n\n  /* Access an lwp we know is stopped.  */\n  info->proc_handle.ptid = ptid;\n\n  /* If we have only looked at the first thread before libpthread was\n     initialized, we may not know its thread ID yet.  Make sure we do\n     before we add another thread to the list.  */\n  if (!have_threads (ptid))\n    thread_db_find_new_threads_1 (ptid);\n\n  /* If we are at a create breakpoint, we do not know what new lwp\n     was created and cannot specifically locate the event message for it.\n     We have to call td_ta_event_getmsg() to get\n     the latest message.  Since we have no way of correlating whether\n     the event message we get back corresponds to our breakpoint, we must\n     loop and read all event messages, processing them appropriately.\n     This guarantees we will process the correct message before continuing\n     from the breakpoint.\n\n     Currently, death events are not enabled.  If they are enabled,\n     the death event can use the td_thr_event_getmsg() interface to\n     get the message specifically for that lwp and avoid looping\n     below.  */\n\n  loop = 1;\n\n  do\n    {\n      err = info->td_ta_event_getmsg_p (info->thread_agent, &msg);\n      if (err != TD_OK)\n\t{\n\t  if (err == TD_NOMSG)\n\t    return;\n\n\t  error (_(\"Cannot get thread event message: %s\"),\n\t\t thread_db_err_str (err));\n\t}\n\n      err = info->td_thr_get_info_p (msg.th_p, &ti);\n      if (err != TD_OK)\n\terror (_(\"Cannot get thread info: %s\"), thread_db_err_str (err));\n\n      ptid = ptid_build (ptid_get_pid (ptid), ti.ti_lid, 0);\n\n      switch (msg.event)\n\t{\n\tcase TD_CREATE:\n\t  /* Call attach_thread whether or not we already know about a\n\t     thread with this thread ID.  */\n\t  attach_thread (ptid, msg.th_p, &ti);\n\n\t  break;\n\n\tcase TD_DEATH:\n\n\t  if (!in_thread_list (ptid))\n\t    error (_(\"Spurious thread death event.\"));\n\n\t  detach_thread (ptid);\n\n\t  break;\n\n\tdefault:\n\t  error (_(\"Spurious thread event.\"));\n\t}\n    }\n  while (loop);\n}\n\nstatic ptid_t\nthread_db_wait (struct target_ops *ops,\n\t\tptid_t ptid, struct target_waitstatus *ourstatus,\n\t\tint options)\n{\n  struct thread_db_info *info;\n  struct target_ops *beneath = find_target_beneath (ops);\n\n  ptid = beneath->to_wait (beneath, ptid, ourstatus, options);\n\n  if (ourstatus->kind == TARGET_WAITKIND_IGNORE)\n    return ptid;\n\n  if (ourstatus->kind == TARGET_WAITKIND_EXITED\n      || ourstatus->kind == TARGET_WAITKIND_SIGNALLED)\n    return ptid;\n\n  info = get_thread_db_info (ptid_get_pid (ptid));\n\n  /* If this process isn't using thread_db, we're done.  */\n  if (info == NULL)\n    return ptid;\n\n  if (ourstatus->kind == TARGET_WAITKIND_EXECD)\n    {\n      /* New image, it may or may not end up using thread_db.  Assume\n\t not unless we find otherwise.  */\n      delete_thread_db_info (ptid_get_pid (ptid));\n      if (!thread_db_list)\n \tunpush_target (&thread_db_ops);\n\n      /* Thread event breakpoints are deleted by\n\t update_breakpoints_after_exec.  */\n\n      return ptid;\n    }\n\n  /* If we do not know about the main thread yet, this would be a good time to\n     find it.  */\n  if (ourstatus->kind == TARGET_WAITKIND_STOPPED && !have_threads (ptid))\n    thread_db_find_new_threads_1 (ptid);\n\n  if (ourstatus->kind == TARGET_WAITKIND_STOPPED\n      && ourstatus->value.sig == GDB_SIGNAL_TRAP)\n    /* Check for a thread event.  */\n    check_event (ptid);\n\n  if (have_threads (ptid))\n    {\n      /* Fill in the thread's user-level thread id.  */\n      thread_from_lwp (ptid);\n    }\n\n  return ptid;\n}\n\nstatic void\nthread_db_mourn_inferior (struct target_ops *ops)\n{\n  struct target_ops *target_beneath = find_target_beneath (ops);\n\n  delete_thread_db_info (ptid_get_pid (inferior_ptid));\n\n  target_beneath->to_mourn_inferior (target_beneath);\n\n  /* Delete the old thread event breakpoints.  Do this after mourning\n     the inferior, so that we don't try to uninsert them.  */\n  remove_thread_event_breakpoints ();\n\n  /* Detach thread_db target ops.  */\n  if (!thread_db_list)\n    unpush_target (ops);\n}\n\nstruct callback_data\n{\n  struct thread_db_info *info;\n  int new_threads;\n};\n\nstatic int\nfind_new_threads_callback (const td_thrhandle_t *th_p, void *data)\n{\n  td_thrinfo_t ti;\n  td_err_e err;\n  ptid_t ptid;\n  struct thread_info *tp;\n  struct callback_data *cb_data = data;\n  struct thread_db_info *info = cb_data->info;\n\n  err = info->td_thr_get_info_p (th_p, &ti);\n  if (err != TD_OK)\n    error (_(\"find_new_threads_callback: cannot get thread info: %s\"),\n\t   thread_db_err_str (err));\n\n  if (ti.ti_lid == -1)\n    {\n      /* A thread with kernel thread ID -1 is either a thread that\n\t exited and was joined, or a thread that is being created but\n\t hasn't started yet, and that is reusing the tcb/stack of a\n\t thread that previously exited and was joined.  (glibc marks\n\t terminated and joined threads with kernel thread ID -1.  See\n\t glibc PR17707.  */\n      return 0;\n    }\n\n  if (ti.ti_tid == 0)\n    {\n      /* A thread ID of zero means that this is the main thread, but\n\t glibc has not yet initialized thread-local storage and the\n\t pthread library.  We do not know what the thread's TID will\n\t be yet.  Just enable event reporting and otherwise ignore\n\t it.  */\n\n      /* In that case, we're not stopped in a fork syscall and don't\n\t need this glibc bug workaround.  */\n      info->need_stale_parent_threads_check = 0;\n\n      if (target_has_execution && thread_db_use_events ())\n\t{\n\t  err = info->td_thr_event_enable_p (th_p, 1);\n\t  if (err != TD_OK)\n\t    error (_(\"Cannot enable thread event reporting for LWP %d: %s\"),\n\t\t   (int) ti.ti_lid, thread_db_err_str (err));\n\t}\n\n      return 0;\n    }\n\n  /* Ignore stale parent threads, caused by glibc/BZ5983.  This is a\n     bit expensive, as it needs to open /proc/pid/status, so try to\n     avoid doing the work if we know we don't have to.  */\n  if (info->need_stale_parent_threads_check)\n    {\n      int tgid = linux_proc_get_tgid (ti.ti_lid);\n\n      if (tgid != -1 && tgid != info->pid)\n\treturn 0;\n    }\n\n  ptid = ptid_build (info->pid, ti.ti_lid, 0);\n  tp = find_thread_ptid (ptid);\n  if (tp == NULL || tp->private == NULL)\n    {\n      if (attach_thread (ptid, th_p, &ti))\n\tcb_data->new_threads += 1;\n      else\n\t/* Problem attaching this thread; perhaps it exited before we\n\t   could attach it?\n\t   This could mean that the thread list inside glibc itself is in\n\t   inconsistent state, and libthread_db could go on looping forever\n\t   (observed with glibc-2.3.6).  To prevent that, terminate\n\t   iteration: thread_db_find_new_threads_2 will retry.  */\n\treturn 1;\n    }\n  else if (target_has_execution && !thread_db_use_events ())\n    {\n      /* Need to update this if not using the libthread_db events\n\t (particularly, the TD_DEATH event).  */\n      update_thread_state (tp->private, &ti);\n    }\n\n  return 0;\n}\n\n/* Helper for thread_db_find_new_threads_2.\n   Returns number of new threads found.  */\n\nstatic int\nfind_new_threads_once (struct thread_db_info *info, int iteration,\n\t\t       td_err_e *errp)\n{\n  volatile struct gdb_exception except;\n  struct callback_data data;\n  td_err_e err = TD_ERR;\n\n  data.info = info;\n  data.new_threads = 0;\n\n  TRY_CATCH (except, RETURN_MASK_ERROR)\n    {\n      /* Iterate over all user-space threads to discover new threads.  */\n      err = info->td_ta_thr_iter_p (info->thread_agent,\n\t\t\t\t    find_new_threads_callback,\n\t\t\t\t    &data,\n\t\t\t\t    TD_THR_ANY_STATE,\n\t\t\t\t    TD_THR_LOWEST_PRIORITY,\n\t\t\t\t    TD_SIGNO_MASK,\n\t\t\t\t    TD_THR_ANY_USER_FLAGS);\n    }\n\n  if (libthread_db_debug)\n    {\n      if (except.reason < 0)\n\texception_fprintf (gdb_stdlog, except,\n\t\t\t   \"Warning: find_new_threads_once: \");\n\n      fprintf_unfiltered (gdb_stdlog,\n\t\t\t  _(\"Found %d new threads in iteration %d.\\n\"),\n\t\t\t  data.new_threads, iteration);\n    }\n\n  if (errp != NULL)\n    *errp = err;\n\n  return data.new_threads;\n}\n\n/* Search for new threads, accessing memory through stopped thread\n   PTID.  If UNTIL_NO_NEW is true, repeat searching until several\n   searches in a row do not discover any new threads.  */\n\nstatic void\nthread_db_find_new_threads_2 (ptid_t ptid, int until_no_new)\n{\n  td_err_e err = TD_OK;\n  struct thread_db_info *info;\n  int i, loop;\n\n  info = get_thread_db_info (ptid_get_pid (ptid));\n\n  /* Access an lwp we know is stopped.  */\n  info->proc_handle.ptid = ptid;\n\n  if (until_no_new)\n    {\n      /* Require 4 successive iterations which do not find any new threads.\n\t The 4 is a heuristic: there is an inherent race here, and I have\n\t seen that 2 iterations in a row are not always sufficient to\n\t \"capture\" all threads.  */\n      for (i = 0, loop = 0; loop < 4 && err == TD_OK; ++i, ++loop)\n\tif (find_new_threads_once (info, i, &err) != 0)\n\t  {\n\t    /* Found some new threads.  Restart the loop from beginning.  */\n\t    loop = -1;\n\t  }\n    }\n  else\n    find_new_threads_once (info, 0, &err);\n\n  if (err != TD_OK)\n    error (_(\"Cannot find new threads: %s\"), thread_db_err_str (err));\n}\n\nstatic void\nthread_db_find_new_threads_1 (ptid_t ptid)\n{\n  thread_db_find_new_threads_2 (ptid, 0);\n}\n\nstatic int\nupdate_thread_core (struct lwp_info *info, void *closure)\n{\n  info->core = linux_common_core_of_thread (info->ptid);\n  return 0;\n}\n\nstatic void\nthread_db_update_thread_list (struct target_ops *ops)\n{\n  struct thread_db_info *info;\n  struct inferior *inf;\n\n  prune_threads ();\n\n  ALL_INFERIORS (inf)\n    {\n      struct thread_info *thread;\n\n      if (inf->pid == 0)\n\tcontinue;\n\n      info = get_thread_db_info (inf->pid);\n      if (info == NULL)\n\tcontinue;\n\n      thread = any_live_thread_of_process (inf->pid);\n      if (thread == NULL || thread->executing)\n\tcontinue;\n\n      thread_db_find_new_threads_1 (thread->ptid);\n    }\n\n  if (target_has_execution)\n    iterate_over_lwps (minus_one_ptid /* iterate over all */,\n\t\t       update_thread_core, NULL);\n}\n\nstatic char *\nthread_db_pid_to_str (struct target_ops *ops, ptid_t ptid)\n{\n  struct thread_info *thread_info = find_thread_ptid (ptid);\n  struct target_ops *beneath;\n\n  if (thread_info != NULL && thread_info->private != NULL)\n    {\n      static char buf[64];\n      thread_t tid;\n\n      tid = thread_info->private->tid;\n      snprintf (buf, sizeof (buf), \"Thread 0x%lx (LWP %ld)\",\n\t\ttid, ptid_get_lwp (ptid));\n\n      return buf;\n    }\n\n  beneath = find_target_beneath (ops);\n  return beneath->to_pid_to_str (beneath, ptid);\n}\n\n/* Return a string describing the state of the thread specified by\n   INFO.  */\n\nstatic char *\nthread_db_extra_thread_info (struct target_ops *self,\n\t\t\t     struct thread_info *info)\n{\n  if (info->private == NULL)\n    return NULL;\n\n  if (info->private->dying)\n    return \"Exiting\";\n\n  return NULL;\n}\n\n/* Get the address of the thread local variable in load module LM which\n   is stored at OFFSET within the thread local storage for thread PTID.  */\n\nstatic CORE_ADDR\nthread_db_get_thread_local_address (struct target_ops *ops,\n\t\t\t\t    ptid_t ptid,\n\t\t\t\t    CORE_ADDR lm,\n\t\t\t\t    CORE_ADDR offset)\n{\n  struct thread_info *thread_info;\n  struct target_ops *beneath;\n\n  /* If we have not discovered any threads yet, check now.  */\n  if (!have_threads (ptid))\n    thread_db_find_new_threads_1 (ptid);\n\n  /* Find the matching thread.  */\n  thread_info = find_thread_ptid (ptid);\n\n  if (thread_info != NULL && thread_info->private != NULL)\n    {\n      td_err_e err;\n      psaddr_t address;\n      struct thread_db_info *info;\n\n      info = get_thread_db_info (ptid_get_pid (ptid));\n\n      /* Finally, get the address of the variable.  */\n      if (lm != 0)\n\t{\n\t  /* glibc doesn't provide the needed interface.  */\n\t  if (!info->td_thr_tls_get_addr_p)\n\t    throw_error (TLS_NO_LIBRARY_SUPPORT_ERROR,\n\t\t\t _(\"No TLS library support\"));\n\n\t  /* Note the cast through uintptr_t: this interface only works if\n\t     a target address fits in a psaddr_t, which is a host pointer.\n\t     So a 32-bit debugger can not access 64-bit TLS through this.  */\n\t  err = info->td_thr_tls_get_addr_p (&thread_info->private->th,\n\t\t\t\t\t     (psaddr_t)(uintptr_t) lm,\n\t\t\t\t\t     offset, &address);\n\t}\n      else\n\t{\n\t  /* If glibc doesn't provide the needed interface throw an error\n\t     that LM is zero - normally cases it should not be.  */\n\t  if (!info->td_thr_tlsbase_p)\n\t    throw_error (TLS_LOAD_MODULE_NOT_FOUND_ERROR,\n\t\t\t _(\"TLS load module not found\"));\n\n\t  /* This code path handles the case of -static -pthread executables:\n\t     https://sourceware.org/ml/libc-help/2014-03/msg00024.html\n\t     For older GNU libc r_debug.r_map is NULL.  For GNU libc after\n\t     PR libc/16831 due to GDB PR threads/16954 LOAD_MODULE is also NULL.\n\t     The constant number 1 depends on GNU __libc_setup_tls\n\t     initialization of l_tls_modid to 1.  */\n\t  err = info->td_thr_tlsbase_p (&thread_info->private->th,\n\t\t\t\t\t1, &address);\n\t  address = (char *) address + offset;\n\t}\n\n#ifdef THREAD_DB_HAS_TD_NOTALLOC\n      /* The memory hasn't been allocated, yet.  */\n      if (err == TD_NOTALLOC)\n\t  /* Now, if libthread_db provided the initialization image's\n\t     address, we *could* try to build a non-lvalue value from\n\t     the initialization image.  */\n        throw_error (TLS_NOT_ALLOCATED_YET_ERROR,\n                     _(\"TLS not allocated yet\"));\n#endif\n\n      /* Something else went wrong.  */\n      if (err != TD_OK)\n        throw_error (TLS_GENERIC_ERROR,\n                     ((\"%s\")), thread_db_err_str (err));\n\n      /* Cast assuming host == target.  Joy.  */\n      /* Do proper sign extension for the target.  */\n      gdb_assert (exec_bfd);\n      return (bfd_get_sign_extend_vma (exec_bfd) > 0\n\t      ? (CORE_ADDR) (intptr_t) address\n\t      : (CORE_ADDR) (uintptr_t) address);\n    }\n\n  beneath = find_target_beneath (ops);\n  return beneath->to_get_thread_local_address (beneath, ptid, lm, offset);\n}\n\n/* Callback routine used to find a thread based on the TID part of\n   its PTID.  */\n\nstatic int\nthread_db_find_thread_from_tid (struct thread_info *thread, void *data)\n{\n  long *tid = (long *) data;\n\n  if (thread->private->tid == *tid)\n    return 1;\n\n  return 0;\n}\n\n/* Implement the to_get_ada_task_ptid target method for this target.  */\n\nstatic ptid_t\nthread_db_get_ada_task_ptid (struct target_ops *self, long lwp, long thread)\n{\n  struct thread_info *thread_info;\n\n  thread_db_find_new_threads_1 (inferior_ptid);\n  thread_info = iterate_over_threads (thread_db_find_thread_from_tid, &thread);\n\n  gdb_assert (thread_info != NULL);\n\n  return (thread_info->ptid);\n}\n\nstatic void\nthread_db_resume (struct target_ops *ops,\n\t\t  ptid_t ptid, int step, enum gdb_signal signo)\n{\n  struct target_ops *beneath = find_target_beneath (ops);\n  struct thread_db_info *info;\n\n  if (ptid_equal (ptid, minus_one_ptid))\n    info = get_thread_db_info (ptid_get_pid (inferior_ptid));\n  else\n    info = get_thread_db_info (ptid_get_pid (ptid));\n\n  /* This workaround is only needed for child fork lwps stopped in a\n     PTRACE_O_TRACEFORK event.  When the inferior is resumed, the\n     workaround can be disabled.  */\n  if (info)\n    info->need_stale_parent_threads_check = 0;\n\n  beneath->to_resume (beneath, ptid, step, signo);\n}\n\n/* qsort helper function for info_auto_load_libthread_db, sort the\n   thread_db_info pointers primarily by their FILENAME and secondarily by their\n   PID, both in ascending order.  */\n\nstatic int\ninfo_auto_load_libthread_db_compare (const void *ap, const void *bp)\n{\n  struct thread_db_info *a = *(struct thread_db_info **) ap;\n  struct thread_db_info *b = *(struct thread_db_info **) bp;\n  int retval;\n\n  retval = strcmp (a->filename, b->filename);\n  if (retval)\n    return retval;\n\n  return (a->pid > b->pid) - (a->pid - b->pid);\n}\n\n/* Implement 'info auto-load libthread-db'.  */\n\nstatic void\ninfo_auto_load_libthread_db (char *args, int from_tty)\n{\n  struct ui_out *uiout = current_uiout;\n  const char *cs = args ? args : \"\";\n  struct thread_db_info *info, **array;\n  unsigned info_count, unique_filenames;\n  size_t max_filename_len, max_pids_len, pids_len;\n  struct cleanup *back_to;\n  char *pids;\n  int i;\n\n  cs = skip_spaces_const (cs);\n  if (*cs)\n    error (_(\"'info auto-load libthread-db' does not accept any parameters\"));\n\n  info_count = 0;\n  for (info = thread_db_list; info; info = info->next)\n    if (info->filename != NULL)\n      info_count++;\n\n  array = xmalloc (sizeof (*array) * info_count);\n  back_to = make_cleanup (xfree, array);\n\n  info_count = 0;\n  for (info = thread_db_list; info; info = info->next)\n    if (info->filename != NULL)\n      array[info_count++] = info;\n\n  /* Sort ARRAY by filenames and PIDs.  */\n\n  qsort (array, info_count, sizeof (*array),\n\t info_auto_load_libthread_db_compare);\n\n  /* Calculate the number of unique filenames (rows) and the maximum string\n     length of PIDs list for the unique filenames (columns).  */\n\n  unique_filenames = 0;\n  max_filename_len = 0;\n  max_pids_len = 0;\n  pids_len = 0;\n  for (i = 0; i < info_count; i++)\n    {\n      int pid = array[i]->pid;\n      size_t this_pid_len;\n\n      for (this_pid_len = 0; pid != 0; pid /= 10)\n\tthis_pid_len++;\n\n      if (i == 0 || strcmp (array[i - 1]->filename, array[i]->filename) != 0)\n\t{\n\t  unique_filenames++;\n\t  max_filename_len = max (max_filename_len,\n\t\t\t\t  strlen (array[i]->filename));\n\n\t  if (i > 0)\n\t    {\n\t      pids_len -= strlen (\", \");\n\t      max_pids_len = max (max_pids_len, pids_len);\n\t    }\n\t  pids_len = 0;\n\t}\n      pids_len += this_pid_len + strlen (\", \");\n    }\n  if (i)\n    {\n      pids_len -= strlen (\", \");\n      max_pids_len = max (max_pids_len, pids_len);\n    }\n\n  /* Table header shifted right by preceding \"libthread-db:  \" would not match\n     its columns.  */\n  if (info_count > 0 && args == auto_load_info_scripts_pattern_nl)\n    ui_out_text (uiout, \"\\n\");\n\n  make_cleanup_ui_out_table_begin_end (uiout, 2, unique_filenames,\n\t\t\t\t       \"LinuxThreadDbTable\");\n\n  ui_out_table_header (uiout, max_filename_len, ui_left, \"filename\",\n\t\t       \"Filename\");\n  ui_out_table_header (uiout, pids_len, ui_left, \"PIDs\", \"Pids\");\n  ui_out_table_body (uiout);\n\n  pids = xmalloc (max_pids_len + 1);\n  make_cleanup (xfree, pids);\n\n  /* Note I is incremented inside the cycle, not at its end.  */\n  for (i = 0; i < info_count;)\n    {\n      struct cleanup *chain = make_cleanup_ui_out_tuple_begin_end (uiout, NULL);\n      char *pids_end;\n\n      info = array[i];\n      ui_out_field_string (uiout, \"filename\", info->filename);\n      pids_end = pids;\n\n      while (i < info_count && strcmp (info->filename, array[i]->filename) == 0)\n\t{\n\t  if (pids_end != pids)\n\t    {\n\t      *pids_end++ = ',';\n\t      *pids_end++ = ' ';\n\t    }\n\t  pids_end += xsnprintf (pids_end, &pids[max_pids_len + 1] - pids_end,\n\t\t\t\t \"%u\", array[i]->pid);\n\t  gdb_assert (pids_end < &pids[max_pids_len + 1]);\n\n\t  i++;\n\t}\n      *pids_end = '\\0';\n\n      ui_out_field_string (uiout, \"pids\", pids);\n\n      ui_out_text (uiout, \"\\n\");\n      do_cleanups (chain);\n    }\n\n  do_cleanups (back_to);\n\n  if (info_count == 0)\n    ui_out_message (uiout, 0, _(\"No auto-loaded libthread-db.\\n\"));\n}\n\nstatic void\ninit_thread_db_ops (void)\n{\n  thread_db_ops.to_shortname = \"multi-thread\";\n  thread_db_ops.to_longname = \"multi-threaded child process.\";\n  thread_db_ops.to_doc = \"Threads and pthreads support.\";\n  thread_db_ops.to_detach = thread_db_detach;\n  thread_db_ops.to_wait = thread_db_wait;\n  thread_db_ops.to_resume = thread_db_resume;\n  thread_db_ops.to_mourn_inferior = thread_db_mourn_inferior;\n  thread_db_ops.to_update_thread_list = thread_db_update_thread_list;\n  thread_db_ops.to_pid_to_str = thread_db_pid_to_str;\n  thread_db_ops.to_stratum = thread_stratum;\n  thread_db_ops.to_has_thread_control = tc_schedlock;\n  thread_db_ops.to_get_thread_local_address\n    = thread_db_get_thread_local_address;\n  thread_db_ops.to_extra_thread_info = thread_db_extra_thread_info;\n  thread_db_ops.to_get_ada_task_ptid = thread_db_get_ada_task_ptid;\n  thread_db_ops.to_magic = OPS_MAGIC;\n\n  complete_target_initialization (&thread_db_ops);\n}\n\n/* Provide a prototype to silence -Wmissing-prototypes.  */\nextern initialize_file_ftype _initialize_thread_db;\n\nvoid\n_initialize_thread_db (void)\n{\n  init_thread_db_ops ();\n\n  /* Defer loading of libthread_db.so until inferior is running.\n     This allows gdb to load correct libthread_db for a given\n     executable -- there could be mutiple versions of glibc,\n     compiled with LinuxThreads or NPTL, and until there is\n     a running inferior, we can't tell which libthread_db is\n     the correct one to load.  */\n\n  libthread_db_search_path = xstrdup (LIBTHREAD_DB_SEARCH_PATH);\n\n  add_setshow_optional_filename_cmd (\"libthread-db-search-path\",\n\t\t\t\t     class_support,\n\t\t\t\t     &libthread_db_search_path, _(\"\\\nSet search path for libthread_db.\"), _(\"\\\nShow the current search path or libthread_db.\"), _(\"\\\nThis path is used to search for libthread_db to be loaded into \\\ngdb itself.\\n\\\nIts value is a colon (':') separate list of directories to search.\\n\\\nSetting the search path to an empty list resets it to its default value.\"),\n\t\t\t    set_libthread_db_search_path,\n\t\t\t    NULL,\n\t\t\t    &setlist, &showlist);\n\n  add_setshow_zuinteger_cmd (\"libthread-db\", class_maintenance,\n\t\t\t     &libthread_db_debug, _(\"\\\nSet libthread-db debugging.\"), _(\"\\\nShow libthread-db debugging.\"), _(\"\\\nWhen non-zero, libthread-db debugging is enabled.\"),\n\t\t\t     NULL,\n\t\t\t     show_libthread_db_debug,\n\t\t\t     &setdebuglist, &showdebuglist);\n\n  add_setshow_boolean_cmd (\"libthread-db\", class_support,\n\t\t\t   &auto_load_thread_db, _(\"\\\nEnable or disable auto-loading of inferior specific libthread_db.\"), _(\"\\\nShow whether auto-loading inferior specific libthread_db is enabled.\"), _(\"\\\nIf enabled, libthread_db will be searched in 'set libthread-db-search-path'\\n\\\nlocations to load libthread_db compatible with the inferior.\\n\\\nStandard system libthread_db still gets loaded even with this option off.\\n\\\nThis options has security implications for untrusted inferiors.\"),\n\t\t\t   NULL, show_auto_load_thread_db,\n\t\t\t   auto_load_set_cmdlist_get (),\n\t\t\t   auto_load_show_cmdlist_get ());\n\n  add_cmd (\"libthread-db\", class_info, info_auto_load_libthread_db,\n\t   _(\"Print the list of loaded inferior specific libthread_db.\\n\\\nUsage: info auto-load libthread-db\"),\n\t   auto_load_info_cmdlist_get ());\n\n  /* Add ourselves to objfile event chain.  */\n  observer_attach_new_objfile (thread_db_new_objfile);\n\n  /* Add ourselves to inferior_created event chain.\n     This is needed to handle debugging statically linked programs where\n     the new_objfile observer won't get called for libpthread.  */\n  observer_attach_inferior_created (thread_db_inferior_created);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/jit.c": "/* Handle JIT code generation in the inferior for GDB, the GNU Debugger.\n\n   Copyright (C) 2009-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"defs.h\"\n\n#include \"jit.h\"\n#include \"jit-reader.h\"\n#include \"block.h\"\n#include \"breakpoint.h\"\n#include \"command.h\"\n#include \"dictionary.h\"\n#include \"filenames.h\"\n#include \"frame-unwind.h\"\n#include \"gdbcmd.h\"\n#include \"gdbcore.h\"\n#include \"inferior.h\"\n#include \"observer.h\"\n#include \"objfiles.h\"\n#include \"regcache.h\"\n#include \"symfile.h\"\n#include \"symtab.h\"\n#include \"target.h\"\n#include \"gdb-dlfcn.h\"\n#include <sys/stat.h>\n#include \"gdb_bfd.h\"\n\nstatic const char *jit_reader_dir = NULL;\n\nstatic const struct objfile_data *jit_objfile_data;\n\nstatic const char *const jit_break_name = \"__jit_debug_register_code\";\n\nstatic const char *const jit_descriptor_name = \"__jit_debug_descriptor\";\n\nstatic const struct program_space_data *jit_program_space_data = NULL;\n\nstatic void jit_inferior_init (struct gdbarch *gdbarch);\n\n/* An unwinder is registered for every gdbarch.  This key is used to\n   remember if the unwinder has been registered for a particular\n   gdbarch.  */\n\nstatic struct gdbarch_data *jit_gdbarch_data;\n\n/* Non-zero if we want to see trace of jit level stuff.  */\n\nstatic unsigned int jit_debug = 0;\n\nstatic void\nshow_jit_debug (struct ui_file *file, int from_tty,\n\t\tstruct cmd_list_element *c, const char *value)\n{\n  fprintf_filtered (file, _(\"JIT debugging is %s.\\n\"), value);\n}\n\nstruct target_buffer\n{\n  CORE_ADDR base;\n  ULONGEST size;\n};\n\n/* Openning the file is a no-op.  */\n\nstatic void *\nmem_bfd_iovec_open (struct bfd *abfd, void *open_closure)\n{\n  return open_closure;\n}\n\n/* Closing the file is just freeing the base/size pair on our side.  */\n\nstatic int\nmem_bfd_iovec_close (struct bfd *abfd, void *stream)\n{\n  xfree (stream);\n\n  /* Zero means success.  */\n  return 0;\n}\n\n/* For reading the file, we just need to pass through to target_read_memory and\n   fix up the arguments and return values.  */\n\nstatic file_ptr\nmem_bfd_iovec_pread (struct bfd *abfd, void *stream, void *buf,\n                     file_ptr nbytes, file_ptr offset)\n{\n  int err;\n  struct target_buffer *buffer = (struct target_buffer *) stream;\n\n  /* If this read will read all of the file, limit it to just the rest.  */\n  if (offset + nbytes > buffer->size)\n    nbytes = buffer->size - offset;\n\n  /* If there are no more bytes left, we've reached EOF.  */\n  if (nbytes == 0)\n    return 0;\n\n  err = target_read_memory (buffer->base + offset, (gdb_byte *) buf, nbytes);\n  if (err)\n    return -1;\n\n  return nbytes;\n}\n\n/* For statting the file, we only support the st_size attribute.  */\n\nstatic int\nmem_bfd_iovec_stat (struct bfd *abfd, void *stream, struct stat *sb)\n{\n  struct target_buffer *buffer = (struct target_buffer*) stream;\n\n  sb->st_size = buffer->size;\n  return 0;\n}\n\n/* Open a BFD from the target's memory.  */\n\nstatic struct bfd *\nbfd_open_from_target_memory (CORE_ADDR addr, ULONGEST size, char *target)\n{\n  struct target_buffer *buffer = xmalloc (sizeof (struct target_buffer));\n\n  buffer->base = addr;\n  buffer->size = size;\n  return gdb_bfd_openr_iovec (\"<in-memory>\", target,\n\t\t\t      mem_bfd_iovec_open,\n\t\t\t      buffer,\n\t\t\t      mem_bfd_iovec_pread,\n\t\t\t      mem_bfd_iovec_close,\n\t\t\t      mem_bfd_iovec_stat);\n}\n\n/* One reader that has been loaded successfully, and can potentially be used to\n   parse debug info.  */\n\nstatic struct jit_reader\n{\n  struct gdb_reader_funcs *functions;\n  void *handle;\n} *loaded_jit_reader = NULL;\n\ntypedef struct gdb_reader_funcs * (reader_init_fn_type) (void);\nstatic const char *reader_init_fn_sym = \"gdb_init_reader\";\n\n/* Try to load FILE_NAME as a JIT debug info reader.  */\n\nstatic struct jit_reader *\njit_reader_load (const char *file_name)\n{\n  void *so;\n  reader_init_fn_type *init_fn;\n  struct jit_reader *new_reader = NULL;\n  struct gdb_reader_funcs *funcs = NULL;\n  struct cleanup *old_cleanups;\n\n  if (jit_debug)\n    fprintf_unfiltered (gdb_stdlog, _(\"Opening shared object %s.\\n\"),\n                        file_name);\n  so = gdb_dlopen (file_name);\n  old_cleanups = make_cleanup_dlclose (so);\n\n  init_fn = gdb_dlsym (so, reader_init_fn_sym);\n  if (!init_fn)\n    error (_(\"Could not locate initialization function: %s.\"),\n          reader_init_fn_sym);\n\n  if (gdb_dlsym (so, \"plugin_is_GPL_compatible\") == NULL)\n    error (_(\"Reader not GPL compatible.\"));\n\n  funcs = init_fn ();\n  if (funcs->reader_version != GDB_READER_INTERFACE_VERSION)\n    error (_(\"Reader version does not match GDB version.\"));\n\n  new_reader = XCNEW (struct jit_reader);\n  new_reader->functions = funcs;\n  new_reader->handle = so;\n\n  discard_cleanups (old_cleanups);\n  return new_reader;\n}\n\n/* Provides the jit-reader-load command.  */\n\nstatic void\njit_reader_load_command (char *args, int from_tty)\n{\n  char *so_name;\n  struct cleanup *prev_cleanup;\n\n  if (args == NULL)\n    error (_(\"No reader name provided.\"));\n\n  if (loaded_jit_reader != NULL)\n    error (_(\"JIT reader already loaded.  Run jit-reader-unload first.\"));\n\n  if (IS_ABSOLUTE_PATH (args))\n    so_name = xstrdup (args);\n  else\n    so_name = xstrprintf (\"%s%s%s\", jit_reader_dir, SLASH_STRING, args);\n  prev_cleanup = make_cleanup (xfree, so_name);\n\n  loaded_jit_reader = jit_reader_load (so_name);\n  do_cleanups (prev_cleanup);\n}\n\n/* Provides the jit-reader-unload command.  */\n\nstatic void\njit_reader_unload_command (char *args, int from_tty)\n{\n  if (!loaded_jit_reader)\n    error (_(\"No JIT reader loaded.\"));\n\n  loaded_jit_reader->functions->destroy (loaded_jit_reader->functions);\n\n  gdb_dlclose (loaded_jit_reader->handle);\n  xfree (loaded_jit_reader);\n  loaded_jit_reader = NULL;\n}\n\n/* Per-program space structure recording which objfile has the JIT\n   symbols.  */\n\nstruct jit_program_space_data\n{\n  /* The objfile.  This is NULL if no objfile holds the JIT\n     symbols.  */\n\n  struct objfile *objfile;\n\n  /* If this program space has __jit_debug_register_code, this is the\n     cached address from the minimal symbol.  This is used to detect\n     relocations requiring the breakpoint to be re-created.  */\n\n  CORE_ADDR cached_code_address;\n\n  /* This is the JIT event breakpoint, or NULL if it has not been\n     set.  */\n\n  struct breakpoint *jit_breakpoint;\n};\n\n/* Per-objfile structure recording the addresses in the program space.\n   This object serves two purposes: for ordinary objfiles, it may\n   cache some symbols related to the JIT interface; and for\n   JIT-created objfiles, it holds some information about the\n   jit_code_entry.  */\n\nstruct jit_objfile_data\n{\n  /* Symbol for __jit_debug_register_code.  */\n  struct minimal_symbol *register_code;\n\n  /* Symbol for __jit_debug_descriptor.  */\n  struct minimal_symbol *descriptor;\n\n  /* Address of struct jit_code_entry in this objfile.  This is only\n     non-zero for objfiles that represent code created by the JIT.  */\n  CORE_ADDR addr;\n};\n\n/* Fetch the jit_objfile_data associated with OBJF.  If no data exists\n   yet, make a new structure and attach it.  */\n\nstatic struct jit_objfile_data *\nget_jit_objfile_data (struct objfile *objf)\n{\n  struct jit_objfile_data *objf_data;\n\n  objf_data = objfile_data (objf, jit_objfile_data);\n  if (objf_data == NULL)\n    {\n      objf_data = XCNEW (struct jit_objfile_data);\n      set_objfile_data (objf, jit_objfile_data, objf_data);\n    }\n\n  return objf_data;\n}\n\n/* Remember OBJFILE has been created for struct jit_code_entry located\n   at inferior address ENTRY.  */\n\nstatic void\nadd_objfile_entry (struct objfile *objfile, CORE_ADDR entry)\n{\n  struct jit_objfile_data *objf_data;\n\n  objf_data = get_jit_objfile_data (objfile);\n  objf_data->addr = entry;\n}\n\n/* Return jit_program_space_data for current program space.  Allocate\n   if not already present.  */\n\nstatic struct jit_program_space_data *\nget_jit_program_space_data (void)\n{\n  struct jit_program_space_data *ps_data;\n\n  ps_data = program_space_data (current_program_space, jit_program_space_data);\n  if (ps_data == NULL)\n    {\n      ps_data = XCNEW (struct jit_program_space_data);\n      set_program_space_data (current_program_space, jit_program_space_data,\n\t\t\t      ps_data);\n    }\n\n  return ps_data;\n}\n\nstatic void\njit_program_space_data_cleanup (struct program_space *ps, void *arg)\n{\n  xfree (arg);\n}\n\n/* Helper function for reading the global JIT descriptor from remote\n   memory.  Returns 1 if all went well, 0 otherwise.  */\n\nstatic int\njit_read_descriptor (struct gdbarch *gdbarch,\n\t\t     struct jit_descriptor *descriptor,\n\t\t     struct jit_program_space_data *ps_data)\n{\n  int err;\n  struct type *ptr_type;\n  int ptr_size;\n  int desc_size;\n  gdb_byte *desc_buf;\n  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n  struct jit_objfile_data *objf_data;\n\n  if (ps_data->objfile == NULL)\n    return 0;\n  objf_data = get_jit_objfile_data (ps_data->objfile);\n  if (objf_data->descriptor == NULL)\n    return 0;\n\n  if (jit_debug)\n    fprintf_unfiltered (gdb_stdlog,\n\t\t\t\"jit_read_descriptor, descriptor_addr = %s\\n\",\n\t\t\tpaddress (gdbarch, MSYMBOL_VALUE_ADDRESS (ps_data->objfile,\n\t\t\t\t\t\t\t\t  objf_data->descriptor)));\n\n  /* Figure out how big the descriptor is on the remote and how to read it.  */\n  ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n  ptr_size = TYPE_LENGTH (ptr_type);\n  desc_size = 8 + 2 * ptr_size;  /* Two 32-bit ints and two pointers.  */\n  desc_buf = alloca (desc_size);\n\n  /* Read the descriptor.  */\n  err = target_read_memory (MSYMBOL_VALUE_ADDRESS (ps_data->objfile,\n\t\t\t\t\t\t   objf_data->descriptor),\n\t\t\t    desc_buf, desc_size);\n  if (err)\n    {\n      printf_unfiltered (_(\"Unable to read JIT descriptor from \"\n\t\t\t   \"remote memory\\n\"));\n      return 0;\n    }\n\n  /* Fix the endianness to match the host.  */\n  descriptor->version = extract_unsigned_integer (&desc_buf[0], 4, byte_order);\n  descriptor->action_flag =\n      extract_unsigned_integer (&desc_buf[4], 4, byte_order);\n  descriptor->relevant_entry = extract_typed_address (&desc_buf[8], ptr_type);\n  descriptor->first_entry =\n      extract_typed_address (&desc_buf[8 + ptr_size], ptr_type);\n\n  return 1;\n}\n\n/* Helper function for reading a JITed code entry from remote memory.  */\n\nstatic void\njit_read_code_entry (struct gdbarch *gdbarch,\n\t\t     CORE_ADDR code_addr, struct jit_code_entry *code_entry)\n{\n  int err, off;\n  struct type *ptr_type;\n  int ptr_size;\n  int entry_size;\n  int align_bytes;\n  gdb_byte *entry_buf;\n  enum bfd_endian byte_order = gdbarch_byte_order (gdbarch);\n\n  /* Figure out how big the entry is on the remote and how to read it.  */\n  ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n  ptr_size = TYPE_LENGTH (ptr_type);\n\n  /* Figure out where the longlong value will be.  */\n  align_bytes = gdbarch_long_long_align_bit (gdbarch) / 8;\n  off = 3 * ptr_size;\n  off = (off + (align_bytes - 1)) & ~(align_bytes - 1);\n\n  entry_size = off + 8;  /* Three pointers and one 64-bit int.  */\n  entry_buf = alloca (entry_size);\n\n  /* Read the entry.  */\n  err = target_read_memory (code_addr, entry_buf, entry_size);\n  if (err)\n    error (_(\"Unable to read JIT code entry from remote memory!\"));\n\n  /* Fix the endianness to match the host.  */\n  ptr_type = builtin_type (gdbarch)->builtin_data_ptr;\n  code_entry->next_entry = extract_typed_address (&entry_buf[0], ptr_type);\n  code_entry->prev_entry =\n      extract_typed_address (&entry_buf[ptr_size], ptr_type);\n  code_entry->symfile_addr =\n      extract_typed_address (&entry_buf[2 * ptr_size], ptr_type);\n  code_entry->symfile_size =\n      extract_unsigned_integer (&entry_buf[off], 8, byte_order);\n}\n\n/* Proxy object for building a block.  */\n\nstruct gdb_block\n{\n  /* gdb_blocks are linked into a tree structure.  Next points to the\n     next node at the same depth as this block and parent to the\n     parent gdb_block.  */\n  struct gdb_block *next, *parent;\n\n  /* Points to the \"real\" block that is being built out of this\n     instance.  This block will be added to a blockvector, which will\n     then be added to a symtab.  */\n  struct block *real_block;\n\n  /* The first and last code address corresponding to this block.  */\n  CORE_ADDR begin, end;\n\n  /* The name of this block (if any).  If this is non-NULL, the\n     FUNCTION symbol symbol is set to this value.  */\n  const char *name;\n};\n\n/* Proxy object for building a symtab.  */\n\nstruct gdb_symtab\n{\n  /* The list of blocks in this symtab.  These will eventually be\n     converted to real blocks.  */\n  struct gdb_block *blocks;\n\n  /* The number of blocks inserted.  */\n  int nblocks;\n\n  /* A mapping between line numbers to PC.  */\n  struct linetable *linetable;\n\n  /* The source file for this symtab.  */\n  const char *file_name;\n  struct gdb_symtab *next;\n};\n\n/* Proxy object for building an object.  */\n\nstruct gdb_object\n{\n  struct gdb_symtab *symtabs;\n};\n\n/* The type of the `private' data passed around by the callback\n   functions.  */\n\ntypedef CORE_ADDR jit_dbg_reader_data;\n\n/* The reader calls into this function to read data off the targets\n   address space.  */\n\nstatic enum gdb_status\njit_target_read_impl (GDB_CORE_ADDR target_mem, void *gdb_buf, int len)\n{\n  int result = target_read_memory ((CORE_ADDR) target_mem, gdb_buf, len);\n  if (result == 0)\n    return GDB_SUCCESS;\n  else\n    return GDB_FAIL;\n}\n\n/* The reader calls into this function to create a new gdb_object\n   which it can then pass around to the other callbacks.  Right now,\n   all that is required is allocating the memory.  */\n\nstatic struct gdb_object *\njit_object_open_impl (struct gdb_symbol_callbacks *cb)\n{\n  /* CB is not required right now, but sometime in the future we might\n     need a handle to it, and we'd like to do that without breaking\n     the ABI.  */\n  return XCNEW (struct gdb_object);\n}\n\n/* Readers call into this function to open a new gdb_symtab, which,\n   again, is passed around to other callbacks.  */\n\nstatic struct gdb_symtab *\njit_symtab_open_impl (struct gdb_symbol_callbacks *cb,\n                      struct gdb_object *object,\n                      const char *file_name)\n{\n  struct gdb_symtab *ret;\n\n  /* CB stays unused.  See comment in jit_object_open_impl.  */\n\n  ret = XCNEW (struct gdb_symtab);\n  ret->file_name = file_name ? xstrdup (file_name) : xstrdup (\"\");\n  ret->next = object->symtabs;\n  object->symtabs = ret;\n  return ret;\n}\n\n/* Returns true if the block corresponding to old should be placed\n   before the block corresponding to new in the final blockvector.  */\n\nstatic int\ncompare_block (const struct gdb_block *const old,\n               const struct gdb_block *const new)\n{\n  if (old == NULL)\n    return 1;\n  if (old->begin < new->begin)\n    return 1;\n  else if (old->begin == new->begin)\n    {\n      if (old->end > new->end)\n        return 1;\n      else\n        return 0;\n    }\n  else\n    return 0;\n}\n\n/* Called by readers to open a new gdb_block.  This function also\n   inserts the new gdb_block in the correct place in the corresponding\n   gdb_symtab.  */\n\nstatic struct gdb_block *\njit_block_open_impl (struct gdb_symbol_callbacks *cb,\n                     struct gdb_symtab *symtab, struct gdb_block *parent,\n                     GDB_CORE_ADDR begin, GDB_CORE_ADDR end, const char *name)\n{\n  struct gdb_block *block = XCNEW (struct gdb_block);\n\n  block->next = symtab->blocks;\n  block->begin = (CORE_ADDR) begin;\n  block->end = (CORE_ADDR) end;\n  block->name = name ? xstrdup (name) : NULL;\n  block->parent = parent;\n\n  /* Ensure that the blocks are inserted in the correct (reverse of\n     the order expected by blockvector).  */\n  if (compare_block (symtab->blocks, block))\n    {\n      symtab->blocks = block;\n    }\n  else\n    {\n      struct gdb_block *i = symtab->blocks;\n\n      for (;; i = i->next)\n        {\n          /* Guaranteed to terminate, since compare_block (NULL, _)\n             returns 1.  */\n          if (compare_block (i->next, block))\n            {\n              block->next = i->next;\n              i->next = block;\n              break;\n            }\n        }\n    }\n  symtab->nblocks++;\n\n  return block;\n}\n\n/* Readers call this to add a line mapping (from PC to line number) to\n   a gdb_symtab.  */\n\nstatic void\njit_symtab_line_mapping_add_impl (struct gdb_symbol_callbacks *cb,\n                                  struct gdb_symtab *stab, int nlines,\n                                  struct gdb_line_mapping *map)\n{\n  int i;\n\n  if (nlines < 1)\n    return;\n\n  stab->linetable = xmalloc (sizeof (struct linetable)\n                             + (nlines - 1) * sizeof (struct linetable_entry));\n  stab->linetable->nitems = nlines;\n  for (i = 0; i < nlines; i++)\n    {\n      stab->linetable->item[i].pc = (CORE_ADDR) map[i].pc;\n      stab->linetable->item[i].line = map[i].line;\n    }\n}\n\n/* Called by readers to close a gdb_symtab.  Does not need to do\n   anything as of now.  */\n\nstatic void\njit_symtab_close_impl (struct gdb_symbol_callbacks *cb,\n                       struct gdb_symtab *stab)\n{\n  /* Right now nothing needs to be done here.  We may need to do some\n     cleanup here in the future (again, without breaking the plugin\n     ABI).  */\n}\n\n/* Transform STAB to a proper symtab, and add it it OBJFILE.  */\n\nstatic void\nfinalize_symtab (struct gdb_symtab *stab, struct objfile *objfile)\n{\n  struct compunit_symtab *cust;\n  struct gdb_block *gdb_block_iter, *gdb_block_iter_tmp;\n  struct block *block_iter;\n  int actual_nblocks, i;\n  size_t blockvector_size;\n  CORE_ADDR begin, end;\n  struct blockvector *bv;\n\n  actual_nblocks = FIRST_LOCAL_BLOCK + stab->nblocks;\n\n  cust = allocate_compunit_symtab (objfile, stab->file_name);\n  allocate_symtab (cust, stab->file_name);\n  add_compunit_symtab_to_objfile (cust);\n\n  /* JIT compilers compile in memory.  */\n  COMPUNIT_DIRNAME (cust) = NULL;\n\n  /* Copy over the linetable entry if one was provided.  */\n  if (stab->linetable)\n    {\n      size_t size = ((stab->linetable->nitems - 1)\n\t\t     * sizeof (struct linetable_entry)\n\t\t     + sizeof (struct linetable));\n      SYMTAB_LINETABLE (COMPUNIT_FILETABS (cust))\n\t= obstack_alloc (&objfile->objfile_obstack, size);\n      memcpy (SYMTAB_LINETABLE (COMPUNIT_FILETABS (cust)), stab->linetable,\n\t      size);\n    }\n\n  blockvector_size = (sizeof (struct blockvector)\n                      + (actual_nblocks - 1) * sizeof (struct block *));\n  bv = obstack_alloc (&objfile->objfile_obstack, blockvector_size);\n  COMPUNIT_BLOCKVECTOR (cust) = bv;\n\n  /* (begin, end) will contain the PC range this entire blockvector\n     spans.  */\n  BLOCKVECTOR_MAP (bv) = NULL;\n  begin = stab->blocks->begin;\n  end = stab->blocks->end;\n  BLOCKVECTOR_NBLOCKS (bv) = actual_nblocks;\n\n  /* First run over all the gdb_block objects, creating a real block\n     object for each.  Simultaneously, keep setting the real_block\n     fields.  */\n  for (i = (actual_nblocks - 1), gdb_block_iter = stab->blocks;\n       i >= FIRST_LOCAL_BLOCK;\n       i--, gdb_block_iter = gdb_block_iter->next)\n    {\n      struct block *new_block = allocate_block (&objfile->objfile_obstack);\n      struct symbol *block_name = allocate_symbol (objfile);\n      struct type *block_type = arch_type (get_objfile_arch (objfile),\n\t\t\t\t\t   TYPE_CODE_VOID,\n\t\t\t\t\t   1,\n\t\t\t\t\t   \"void\");\n\n      BLOCK_DICT (new_block) = dict_create_linear (&objfile->objfile_obstack,\n                                                   NULL);\n      /* The address range.  */\n      BLOCK_START (new_block) = (CORE_ADDR) gdb_block_iter->begin;\n      BLOCK_END (new_block) = (CORE_ADDR) gdb_block_iter->end;\n\n      /* The name.  */\n      SYMBOL_DOMAIN (block_name) = VAR_DOMAIN;\n      SYMBOL_ACLASS_INDEX (block_name) = LOC_BLOCK;\n      symbol_set_symtab (block_name, COMPUNIT_FILETABS (cust));\n      SYMBOL_TYPE (block_name) = lookup_function_type (block_type);\n      SYMBOL_BLOCK_VALUE (block_name) = new_block;\n\n      block_name->ginfo.name = obstack_copy0 (&objfile->objfile_obstack,\n\t\t\t\t\t      gdb_block_iter->name,\n\t\t\t\t\t      strlen (gdb_block_iter->name));\n\n      BLOCK_FUNCTION (new_block) = block_name;\n\n      BLOCKVECTOR_BLOCK (bv, i) = new_block;\n      if (begin > BLOCK_START (new_block))\n        begin = BLOCK_START (new_block);\n      if (end < BLOCK_END (new_block))\n        end = BLOCK_END (new_block);\n\n      gdb_block_iter->real_block = new_block;\n    }\n\n  /* Now add the special blocks.  */\n  block_iter = NULL;\n  for (i = 0; i < FIRST_LOCAL_BLOCK; i++)\n    {\n      struct block *new_block;\n\n      new_block = (i == GLOBAL_BLOCK\n\t\t   ? allocate_global_block (&objfile->objfile_obstack)\n\t\t   : allocate_block (&objfile->objfile_obstack));\n      BLOCK_DICT (new_block) = dict_create_linear (&objfile->objfile_obstack,\n                                                   NULL);\n      BLOCK_SUPERBLOCK (new_block) = block_iter;\n      block_iter = new_block;\n\n      BLOCK_START (new_block) = (CORE_ADDR) begin;\n      BLOCK_END (new_block) = (CORE_ADDR) end;\n\n      BLOCKVECTOR_BLOCK (bv, i) = new_block;\n\n      if (i == GLOBAL_BLOCK)\n\tset_block_compunit_symtab (new_block, cust);\n    }\n\n  /* Fill up the superblock fields for the real blocks, using the\n     real_block fields populated earlier.  */\n  for (gdb_block_iter = stab->blocks;\n       gdb_block_iter;\n       gdb_block_iter = gdb_block_iter->next)\n    {\n      if (gdb_block_iter->parent != NULL)\n\t{\n\t  /* If the plugin specifically mentioned a parent block, we\n\t     use that.  */\n\t  BLOCK_SUPERBLOCK (gdb_block_iter->real_block) =\n\t    gdb_block_iter->parent->real_block;\n\t}\n      else\n\t{\n\t  /* And if not, we set a default parent block.  */\n\t  BLOCK_SUPERBLOCK (gdb_block_iter->real_block) =\n\t    BLOCKVECTOR_BLOCK (bv, STATIC_BLOCK);\n\t}\n    }\n\n  /* Free memory.  */\n  gdb_block_iter = stab->blocks;\n\n  for (gdb_block_iter = stab->blocks, gdb_block_iter_tmp = gdb_block_iter->next;\n       gdb_block_iter;\n       gdb_block_iter = gdb_block_iter_tmp)\n    {\n      xfree ((void *) gdb_block_iter->name);\n      xfree (gdb_block_iter);\n    }\n  xfree (stab->linetable);\n  xfree ((char *) stab->file_name);\n  xfree (stab);\n}\n\n/* Called when closing a gdb_objfile.  Converts OBJ to a proper\n   objfile.  */\n\nstatic void\njit_object_close_impl (struct gdb_symbol_callbacks *cb,\n                       struct gdb_object *obj)\n{\n  struct gdb_symtab *i, *j;\n  struct objfile *objfile;\n  jit_dbg_reader_data *priv_data;\n\n  priv_data = cb->priv_data;\n\n  objfile = allocate_objfile (NULL, \"<< JIT compiled code >>\",\n\t\t\t      OBJF_NOT_FILENAME);\n  objfile->per_bfd->gdbarch = target_gdbarch ();\n\n  terminate_minimal_symbol_table (objfile);\n\n  j = NULL;\n  for (i = obj->symtabs; i; i = j)\n    {\n      j = i->next;\n      finalize_symtab (i, objfile);\n    }\n  add_objfile_entry (objfile, *priv_data);\n  xfree (obj);\n}\n\n/* Try to read CODE_ENTRY using the loaded jit reader (if any).\n   ENTRY_ADDR is the address of the struct jit_code_entry in the\n   inferior address space.  */\n\nstatic int\njit_reader_try_read_symtab (struct jit_code_entry *code_entry,\n                            CORE_ADDR entry_addr)\n{\n  void *gdb_mem;\n  int status;\n  jit_dbg_reader_data priv_data;\n  struct gdb_reader_funcs *funcs;\n  volatile struct gdb_exception e;\n  struct gdb_symbol_callbacks callbacks =\n    {\n      jit_object_open_impl,\n      jit_symtab_open_impl,\n      jit_block_open_impl,\n      jit_symtab_close_impl,\n      jit_object_close_impl,\n\n      jit_symtab_line_mapping_add_impl,\n      jit_target_read_impl,\n\n      &priv_data\n    };\n\n  priv_data = entry_addr;\n\n  if (!loaded_jit_reader)\n    return 0;\n\n  gdb_mem = xmalloc (code_entry->symfile_size);\n\n  status = 1;\n  TRY_CATCH (e, RETURN_MASK_ALL)\n    if (target_read_memory (code_entry->symfile_addr, gdb_mem,\n                            code_entry->symfile_size))\n      status = 0;\n  if (e.reason < 0)\n    status = 0;\n\n  if (status)\n    {\n      funcs = loaded_jit_reader->functions;\n      if (funcs->read (funcs, &callbacks, gdb_mem, code_entry->symfile_size)\n          != GDB_SUCCESS)\n        status = 0;\n    }\n\n  xfree (gdb_mem);\n  if (jit_debug && status == 0)\n    fprintf_unfiltered (gdb_stdlog,\n                        \"Could not read symtab using the loaded JIT reader.\\n\");\n  return status;\n}\n\n/* Try to read CODE_ENTRY using BFD.  ENTRY_ADDR is the address of the\n   struct jit_code_entry in the inferior address space.  */\n\nstatic void\njit_bfd_try_read_symtab (struct jit_code_entry *code_entry,\n                         CORE_ADDR entry_addr,\n                         struct gdbarch *gdbarch)\n{\n  bfd *nbfd;\n  struct section_addr_info *sai;\n  struct bfd_section *sec;\n  struct objfile *objfile;\n  struct cleanup *old_cleanups;\n  int i;\n  const struct bfd_arch_info *b;\n\n  if (jit_debug)\n    fprintf_unfiltered (gdb_stdlog,\n\t\t\t\"jit_register_code, symfile_addr = %s, \"\n\t\t\t\"symfile_size = %s\\n\",\n\t\t\tpaddress (gdbarch, code_entry->symfile_addr),\n\t\t\tpulongest (code_entry->symfile_size));\n\n  nbfd = bfd_open_from_target_memory (code_entry->symfile_addr,\n                                      code_entry->symfile_size, gnutarget);\n  if (nbfd == NULL)\n    {\n      puts_unfiltered (_(\"Error opening JITed symbol file, ignoring it.\\n\"));\n      return;\n    }\n\n  /* Check the format.  NOTE: This initializes important data that GDB uses!\n     We would segfault later without this line.  */\n  if (!bfd_check_format (nbfd, bfd_object))\n    {\n      printf_unfiltered (_(\"\\\nJITed symbol file is not an object file, ignoring it.\\n\"));\n      gdb_bfd_unref (nbfd);\n      return;\n    }\n\n  /* Check bfd arch.  */\n  b = gdbarch_bfd_arch_info (gdbarch);\n  if (b->compatible (b, bfd_get_arch_info (nbfd)) != b)\n    warning (_(\"JITed object file architecture %s is not compatible \"\n               \"with target architecture %s.\"), bfd_get_arch_info\n             (nbfd)->printable_name, b->printable_name);\n\n  /* Read the section address information out of the symbol file.  Since the\n     file is generated by the JIT at runtime, it should all of the absolute\n     addresses that we care about.  */\n  sai = alloc_section_addr_info (bfd_count_sections (nbfd));\n  old_cleanups = make_cleanup_free_section_addr_info (sai);\n  i = 0;\n  for (sec = nbfd->sections; sec != NULL; sec = sec->next)\n    if ((bfd_get_section_flags (nbfd, sec) & (SEC_ALLOC|SEC_LOAD)) != 0)\n      {\n        /* We assume that these virtual addresses are absolute, and do not\n           treat them as offsets.  */\n        sai->other[i].addr = bfd_get_section_vma (nbfd, sec);\n        sai->other[i].name = xstrdup (bfd_get_section_name (nbfd, sec));\n        sai->other[i].sectindex = sec->index;\n        ++i;\n      }\n  sai->num_sections = i;\n\n  /* This call does not take ownership of SAI.  */\n  make_cleanup_bfd_unref (nbfd);\n  objfile = symbol_file_add_from_bfd (nbfd, bfd_get_filename (nbfd), 0, sai,\n\t\t\t\t      OBJF_SHARED | OBJF_NOT_FILENAME, NULL);\n\n  do_cleanups (old_cleanups);\n  add_objfile_entry (objfile, entry_addr);\n}\n\n/* This function registers code associated with a JIT code entry.  It uses the\n   pointer and size pair in the entry to read the symbol file from the remote\n   and then calls symbol_file_add_from_local_memory to add it as though it were\n   a symbol file added by the user.  */\n\nstatic void\njit_register_code (struct gdbarch *gdbarch,\n                   CORE_ADDR entry_addr, struct jit_code_entry *code_entry)\n{\n  int success;\n\n  if (jit_debug)\n    fprintf_unfiltered (gdb_stdlog,\n                        \"jit_register_code, symfile_addr = %s, \"\n                        \"symfile_size = %s\\n\",\n                        paddress (gdbarch, code_entry->symfile_addr),\n                        pulongest (code_entry->symfile_size));\n\n  success = jit_reader_try_read_symtab (code_entry, entry_addr);\n\n  if (!success)\n    jit_bfd_try_read_symtab (code_entry, entry_addr, gdbarch);\n}\n\n/* This function unregisters JITed code and frees the corresponding\n   objfile.  */\n\nstatic void\njit_unregister_code (struct objfile *objfile)\n{\n  free_objfile (objfile);\n}\n\n/* Look up the objfile with this code entry address.  */\n\nstatic struct objfile *\njit_find_objf_with_entry_addr (CORE_ADDR entry_addr)\n{\n  struct objfile *objf;\n\n  ALL_OBJFILES (objf)\n    {\n      struct jit_objfile_data *objf_data;\n\n      objf_data = objfile_data (objf, jit_objfile_data);\n      if (objf_data != NULL && objf_data->addr == entry_addr)\n        return objf;\n    }\n  return NULL;\n}\n\n/* This is called when a breakpoint is deleted.  It updates the\n   inferior's cache, if needed.  */\n\nstatic void\njit_breakpoint_deleted (struct breakpoint *b)\n{\n  struct bp_location *iter;\n\n  if (b->type != bp_jit_event)\n    return;\n\n  for (iter = b->loc; iter != NULL; iter = iter->next)\n    {\n      struct jit_program_space_data *ps_data;\n\n      ps_data = program_space_data (iter->pspace, jit_program_space_data);\n      if (ps_data != NULL && ps_data->jit_breakpoint == iter->owner)\n\t{\n\t  ps_data->cached_code_address = 0;\n\t  ps_data->jit_breakpoint = NULL;\n\t}\n    }\n}\n\n/* (Re-)Initialize the jit breakpoint if necessary.\n   Return 0 on success.  */\n\nstatic int\njit_breakpoint_re_set_internal (struct gdbarch *gdbarch,\n\t\t\t\tstruct jit_program_space_data *ps_data)\n{\n  struct bound_minimal_symbol reg_symbol;\n  struct bound_minimal_symbol desc_symbol;\n  struct jit_objfile_data *objf_data;\n  CORE_ADDR addr;\n\n  if (ps_data->objfile == NULL)\n    {\n      /* Lookup the registration symbol.  If it is missing, then we\n\t assume we are not attached to a JIT.  */\n      reg_symbol = lookup_minimal_symbol_and_objfile (jit_break_name);\n      if (reg_symbol.minsym == NULL\n\t  || BMSYMBOL_VALUE_ADDRESS (reg_symbol) == 0)\n\treturn 1;\n\n      desc_symbol = lookup_minimal_symbol (jit_descriptor_name, NULL,\n\t\t\t\t\t   reg_symbol.objfile);\n      if (desc_symbol.minsym == NULL\n\t  || BMSYMBOL_VALUE_ADDRESS (desc_symbol) == 0)\n\treturn 1;\n\n      objf_data = get_jit_objfile_data (reg_symbol.objfile);\n      objf_data->register_code = reg_symbol.minsym;\n      objf_data->descriptor = desc_symbol.minsym;\n\n      ps_data->objfile = reg_symbol.objfile;\n    }\n  else\n    objf_data = get_jit_objfile_data (ps_data->objfile);\n\n  addr = MSYMBOL_VALUE_ADDRESS (ps_data->objfile, objf_data->register_code);\n\n  if (jit_debug)\n    fprintf_unfiltered (gdb_stdlog,\n\t\t\t\"jit_breakpoint_re_set_internal, \"\n\t\t\t\"breakpoint_addr = %s\\n\",\n\t\t\tpaddress (gdbarch, addr));\n\n  if (ps_data->cached_code_address == addr)\n    return 1;\n\n  /* Delete the old breakpoint.  */\n  if (ps_data->jit_breakpoint != NULL)\n    delete_breakpoint (ps_data->jit_breakpoint);\n\n  /* Put a breakpoint in the registration symbol.  */\n  ps_data->cached_code_address = addr;\n  ps_data->jit_breakpoint = create_jit_event_breakpoint (gdbarch, addr);\n\n  return 0;\n}\n\n/* The private data passed around in the frame unwind callback\n   functions.  */\n\nstruct jit_unwind_private\n{\n  /* Cached register values.  See jit_frame_sniffer to see how this\n     works.  */\n  struct gdb_reg_value **registers;\n\n  /* The frame being unwound.  */\n  struct frame_info *this_frame;\n};\n\n/* Sets the value of a particular register in this frame.  */\n\nstatic void\njit_unwind_reg_set_impl (struct gdb_unwind_callbacks *cb, int dwarf_regnum,\n                         struct gdb_reg_value *value)\n{\n  struct jit_unwind_private *priv;\n  int gdb_reg;\n\n  priv = cb->priv_data;\n\n  gdb_reg = gdbarch_dwarf2_reg_to_regnum (get_frame_arch (priv->this_frame),\n                                          dwarf_regnum);\n  if (gdb_reg == -1)\n    {\n      if (jit_debug)\n        fprintf_unfiltered (gdb_stdlog,\n                            _(\"Could not recognize DWARF regnum %d\"),\n                            dwarf_regnum);\n      return;\n    }\n\n  gdb_assert (priv->registers);\n  priv->registers[gdb_reg] = value;\n}\n\nstatic void\nreg_value_free_impl (struct gdb_reg_value *value)\n{\n  xfree (value);\n}\n\n/* Get the value of register REGNUM in the previous frame.  */\n\nstatic struct gdb_reg_value *\njit_unwind_reg_get_impl (struct gdb_unwind_callbacks *cb, int regnum)\n{\n  struct jit_unwind_private *priv;\n  struct gdb_reg_value *value;\n  int gdb_reg, size;\n  struct gdbarch *frame_arch;\n\n  priv = cb->priv_data;\n  frame_arch = get_frame_arch (priv->this_frame);\n\n  gdb_reg = gdbarch_dwarf2_reg_to_regnum (frame_arch, regnum);\n  size = register_size (frame_arch, gdb_reg);\n  value = xmalloc (sizeof (struct gdb_reg_value) + size - 1);\n  value->defined = deprecated_frame_register_read (priv->this_frame, gdb_reg,\n\t\t\t\t\t\t   value->value);\n  value->size = size;\n  value->free = reg_value_free_impl;\n  return value;\n}\n\n/* gdb_reg_value has a free function, which must be called on each\n   saved register value.  */\n\nstatic void\njit_dealloc_cache (struct frame_info *this_frame, void *cache)\n{\n  struct jit_unwind_private *priv_data = cache;\n  struct gdbarch *frame_arch;\n  int i;\n\n  gdb_assert (priv_data->registers);\n  frame_arch = get_frame_arch (priv_data->this_frame);\n\n  for (i = 0; i < gdbarch_num_regs (frame_arch); i++)\n    if (priv_data->registers[i] && priv_data->registers[i]->free)\n      priv_data->registers[i]->free (priv_data->registers[i]);\n\n  xfree (priv_data->registers);\n  xfree (priv_data);\n}\n\n/* The frame sniffer for the pseudo unwinder.\n\n   While this is nominally a frame sniffer, in the case where the JIT\n   reader actually recognizes the frame, it does a lot more work -- it\n   unwinds the frame and saves the corresponding register values in\n   the cache.  jit_frame_prev_register simply returns the saved\n   register values.  */\n\nstatic int\njit_frame_sniffer (const struct frame_unwind *self,\n                   struct frame_info *this_frame, void **cache)\n{\n  struct jit_unwind_private *priv_data;\n  struct gdb_unwind_callbacks callbacks;\n  struct gdb_reader_funcs *funcs;\n\n  callbacks.reg_get = jit_unwind_reg_get_impl;\n  callbacks.reg_set = jit_unwind_reg_set_impl;\n  callbacks.target_read = jit_target_read_impl;\n\n  if (loaded_jit_reader == NULL)\n    return 0;\n\n  funcs = loaded_jit_reader->functions;\n\n  gdb_assert (!*cache);\n\n  *cache = XCNEW (struct jit_unwind_private);\n  priv_data = *cache;\n  priv_data->registers =\n    XCNEWVEC (struct gdb_reg_value *,\t      \n\t      gdbarch_num_regs (get_frame_arch (this_frame)));\n  priv_data->this_frame = this_frame;\n\n  callbacks.priv_data = priv_data;\n\n  /* Try to coax the provided unwinder to unwind the stack */\n  if (funcs->unwind (funcs, &callbacks) == GDB_SUCCESS)\n    {\n      if (jit_debug)\n        fprintf_unfiltered (gdb_stdlog, _(\"Successfully unwound frame using \"\n                                          \"JIT reader.\\n\"));\n      return 1;\n    }\n  if (jit_debug)\n    fprintf_unfiltered (gdb_stdlog, _(\"Could not unwind frame using \"\n                                      \"JIT reader.\\n\"));\n\n  jit_dealloc_cache (this_frame, *cache);\n  *cache = NULL;\n\n  return 0;\n}\n\n\n/* The frame_id function for the pseudo unwinder.  Relays the call to\n   the loaded plugin.  */\n\nstatic void\njit_frame_this_id (struct frame_info *this_frame, void **cache,\n                   struct frame_id *this_id)\n{\n  struct jit_unwind_private private;\n  struct gdb_frame_id frame_id;\n  struct gdb_reader_funcs *funcs;\n  struct gdb_unwind_callbacks callbacks;\n\n  private.registers = NULL;\n  private.this_frame = this_frame;\n\n  /* We don't expect the frame_id function to set any registers, so we\n     set reg_set to NULL.  */\n  callbacks.reg_get = jit_unwind_reg_get_impl;\n  callbacks.reg_set = NULL;\n  callbacks.target_read = jit_target_read_impl;\n  callbacks.priv_data = &private;\n\n  gdb_assert (loaded_jit_reader);\n  funcs = loaded_jit_reader->functions;\n\n  frame_id = funcs->get_frame_id (funcs, &callbacks);\n  *this_id = frame_id_build (frame_id.stack_address, frame_id.code_address);\n}\n\n/* Pseudo unwinder function.  Reads the previously fetched value for\n   the register from the cache.  */\n\nstatic struct value *\njit_frame_prev_register (struct frame_info *this_frame, void **cache, int reg)\n{\n  struct jit_unwind_private *priv = *cache;\n  struct gdb_reg_value *value;\n\n  if (priv == NULL)\n    return frame_unwind_got_optimized (this_frame, reg);\n\n  gdb_assert (priv->registers);\n  value = priv->registers[reg];\n  if (value && value->defined)\n    return frame_unwind_got_bytes (this_frame, reg, value->value);\n  else\n    return frame_unwind_got_optimized (this_frame, reg);\n}\n\n/* Relay everything back to the unwinder registered by the JIT debug\n   info reader.*/\n\nstatic const struct frame_unwind jit_frame_unwind =\n{\n  NORMAL_FRAME,\n  default_frame_unwind_stop_reason,\n  jit_frame_this_id,\n  jit_frame_prev_register,\n  NULL,\n  jit_frame_sniffer,\n  jit_dealloc_cache\n};\n\n\n/* This is the information that is stored at jit_gdbarch_data for each\n   architecture.  */\n\nstruct jit_gdbarch_data_type\n{\n  /* Has the (pseudo) unwinder been prepended? */\n  int unwinder_registered;\n};\n\n/* Check GDBARCH and prepend the pseudo JIT unwinder if needed.  */\n\nstatic void\njit_prepend_unwinder (struct gdbarch *gdbarch)\n{\n  struct jit_gdbarch_data_type *data;\n\n  data = gdbarch_data (gdbarch, jit_gdbarch_data);\n  if (!data->unwinder_registered)\n    {\n      frame_unwind_prepend_unwinder (gdbarch, &jit_frame_unwind);\n      data->unwinder_registered = 1;\n    }\n}\n\n/* Register any already created translations.  */\n\nstatic void\njit_inferior_init (struct gdbarch *gdbarch)\n{\n  struct jit_descriptor descriptor;\n  struct jit_code_entry cur_entry;\n  struct jit_program_space_data *ps_data;\n  CORE_ADDR cur_entry_addr;\n\n  if (jit_debug)\n    fprintf_unfiltered (gdb_stdlog, \"jit_inferior_init\\n\");\n\n  jit_prepend_unwinder (gdbarch);\n\n  ps_data = get_jit_program_space_data ();\n  if (jit_breakpoint_re_set_internal (gdbarch, ps_data) != 0)\n    return;\n\n  /* Read the descriptor so we can check the version number and load\n     any already JITed functions.  */\n  if (!jit_read_descriptor (gdbarch, &descriptor, ps_data))\n    return;\n\n  /* Check that the version number agrees with that we support.  */\n  if (descriptor.version != 1)\n    {\n      printf_unfiltered (_(\"Unsupported JIT protocol version %ld \"\n\t\t\t   \"in descriptor (expected 1)\\n\"),\n\t\t\t (long) descriptor.version);\n      return;\n    }\n\n  /* If we've attached to a running program, we need to check the descriptor\n     to register any functions that were already generated.  */\n  for (cur_entry_addr = descriptor.first_entry;\n       cur_entry_addr != 0;\n       cur_entry_addr = cur_entry.next_entry)\n    {\n      jit_read_code_entry (gdbarch, cur_entry_addr, &cur_entry);\n\n      /* This hook may be called many times during setup, so make sure we don't\n         add the same symbol file twice.  */\n      if (jit_find_objf_with_entry_addr (cur_entry_addr) != NULL)\n        continue;\n\n      jit_register_code (gdbarch, cur_entry_addr, &cur_entry);\n    }\n}\n\n/* Exported routine to call when an inferior has been created.  */\n\nvoid\njit_inferior_created_hook (void)\n{\n  jit_inferior_init (target_gdbarch ());\n}\n\n/* Exported routine to call to re-set the jit breakpoints,\n   e.g. when a program is rerun.  */\n\nvoid\njit_breakpoint_re_set (void)\n{\n  jit_breakpoint_re_set_internal (target_gdbarch (),\n\t\t\t\t  get_jit_program_space_data ());\n}\n\n/* This function cleans up any code entries left over when the\n   inferior exits.  We get left over code when the inferior exits\n   without unregistering its code, for example when it crashes.  */\n\nstatic void\njit_inferior_exit_hook (struct inferior *inf)\n{\n  struct objfile *objf;\n  struct objfile *temp;\n\n  ALL_OBJFILES_SAFE (objf, temp)\n    {\n      struct jit_objfile_data *objf_data = objfile_data (objf,\n\t\t\t\t\t\t\t jit_objfile_data);\n\n      if (objf_data != NULL && objf_data->addr != 0)\n\tjit_unregister_code (objf);\n    }\n}\n\nvoid\njit_event_handler (struct gdbarch *gdbarch)\n{\n  struct jit_descriptor descriptor;\n  struct jit_code_entry code_entry;\n  CORE_ADDR entry_addr;\n  struct objfile *objf;\n\n  /* Read the descriptor from remote memory.  */\n  if (!jit_read_descriptor (gdbarch, &descriptor,\n\t\t\t    get_jit_program_space_data ()))\n    return;\n  entry_addr = descriptor.relevant_entry;\n\n  /* Do the corresponding action.  */\n  switch (descriptor.action_flag)\n    {\n    case JIT_NOACTION:\n      break;\n    case JIT_REGISTER:\n      jit_read_code_entry (gdbarch, entry_addr, &code_entry);\n      jit_register_code (gdbarch, entry_addr, &code_entry);\n      break;\n    case JIT_UNREGISTER:\n      objf = jit_find_objf_with_entry_addr (entry_addr);\n      if (objf == NULL)\n\tprintf_unfiltered (_(\"Unable to find JITed code \"\n\t\t\t     \"entry at address: %s\\n\"),\n\t\t\t   paddress (gdbarch, entry_addr));\n      else\n        jit_unregister_code (objf);\n\n      break;\n    default:\n      error (_(\"Unknown action_flag value in JIT descriptor!\"));\n      break;\n    }\n}\n\n/* Called to free the data allocated to the jit_program_space_data slot.  */\n\nstatic void\nfree_objfile_data (struct objfile *objfile, void *data)\n{\n  struct jit_objfile_data *objf_data = data;\n\n  if (objf_data->register_code != NULL)\n    {\n      struct jit_program_space_data *ps_data;\n\n      ps_data = program_space_data (objfile->pspace, jit_program_space_data);\n      if (ps_data != NULL && ps_data->objfile == objfile)\n\tps_data->objfile = NULL;\n    }\n\n  xfree (data);\n}\n\n/* Initialize the jit_gdbarch_data slot with an instance of struct\n   jit_gdbarch_data_type */\n\nstatic void *\njit_gdbarch_data_init (struct obstack *obstack)\n{\n  struct jit_gdbarch_data_type *data;\n\n  data = obstack_alloc (obstack, sizeof (struct jit_gdbarch_data_type));\n  data->unwinder_registered = 0;\n  return data;\n}\n\n/* Provide a prototype to silence -Wmissing-prototypes.  */\n\nextern void _initialize_jit (void);\n\nvoid\n_initialize_jit (void)\n{\n  jit_reader_dir = relocate_gdb_directory (JIT_READER_DIR,\n                                           JIT_READER_DIR_RELOCATABLE);\n  add_setshow_zuinteger_cmd (\"jit\", class_maintenance, &jit_debug,\n\t\t\t     _(\"Set JIT debugging.\"),\n\t\t\t     _(\"Show JIT debugging.\"),\n\t\t\t     _(\"When non-zero, JIT debugging is enabled.\"),\n\t\t\t     NULL,\n\t\t\t     show_jit_debug,\n\t\t\t     &setdebuglist, &showdebuglist);\n\n  observer_attach_inferior_exit (jit_inferior_exit_hook);\n  observer_attach_breakpoint_deleted (jit_breakpoint_deleted);\n\n  jit_objfile_data =\n    register_objfile_data_with_cleanup (NULL, free_objfile_data);\n  jit_program_space_data =\n    register_program_space_data_with_cleanup (NULL,\n\t\t\t\t\t      jit_program_space_data_cleanup);\n  jit_gdbarch_data = gdbarch_data_register_pre_init (jit_gdbarch_data_init);\n  if (is_dl_available ())\n    {\n      add_com (\"jit-reader-load\", no_class, jit_reader_load_command, _(\"\\\nLoad FILE as debug info reader and unwinder for JIT compiled code.\\n\\\nUsage: jit-reader-load FILE\\n\\\nTry to load file FILE as a debug info reader (and unwinder) for\\n\\\nJIT compiled code.  The file is loaded from \" JIT_READER_DIR \",\\n\\\nrelocated relative to the GDB executable if required.\"));\n      add_com (\"jit-reader-unload\", no_class, jit_reader_unload_command, _(\"\\\nUnload the currently loaded JIT debug info reader.\\n\\\nUsage: jit-reader-unload FILE\\n\\n\\\nDo \\\"help jit-reader-load\\\" for info on loading debug info readers.\"));\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/sol-thread.c": "/* Solaris threads debugging interface.\n\n   Copyright (C) 1996-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* This module implements a sort of half target that sits between the\n   machine-independent parts of GDB and the /proc interface (procfs.c)\n   to provide access to the Solaris user-mode thread implementation.\n\n   Solaris threads are true user-mode threads, which are invoked via\n   the thr_* and pthread_* (native and POSIX respectivly) interfaces.\n   These are mostly implemented in user-space, with all thread context\n   kept in various structures that live in the user's heap.  These\n   should not be confused with lightweight processes (LWPs), which are\n   implemented by the kernel, and scheduled without explicit\n   intervention by the process.\n\n   Just to confuse things a little, Solaris threads (both native and\n   POSIX) are actually implemented using LWPs.  In general, there are\n   going to be more threads than LWPs.  There is no fixed\n   correspondence between a thread and an LWP.  When a thread wants to\n   run, it gets scheduled onto the first available LWP and can\n   therefore migrate from one LWP to another as time goes on.  A\n   sleeping thread may not be associated with an LWP at all!\n\n   To make it possible to mess with threads, Sun provides a library\n   called libthread_db.so.1 (not to be confused with\n   libthread_db.so.0, which doesn't have a published interface).  This\n   interface has an upper part, which it provides, and a lower part\n   which we provide.  The upper part consists of the td_* routines,\n   which allow us to find all the threads, query their state, etc...\n   The lower part consists of all of the ps_*, which are used by the\n   td_* routines to read/write memory, manipulate LWPs, lookup\n   symbols, etc...  The ps_* routines actually do most of their work\n   by calling functions in procfs.c.  */\n\n#include \"defs.h\"\n#include <thread.h>\n#include <proc_service.h>\n#include <thread_db.h>\n#include \"gdbthread.h\"\n#include \"target.h\"\n#include \"inferior.h\"\n#include <fcntl.h>\n#include <sys/stat.h>\n#include <dlfcn.h>\n#include \"gdbcmd.h\"\n#include \"gdbcore.h\"\n#include \"regcache.h\"\n#include \"solib.h\"\n#include \"symfile.h\"\n#include \"observer.h\"\n#include \"procfs.h\"\n#include \"symtab.h\"\n#include \"minsyms.h\"\n#include \"objfiles.h\"\n\nstruct target_ops sol_thread_ops;\n\n/* Prototypes for supply_gregset etc.  */\n#include \"gregset.h\"\n\n/* This struct is defined by us, but mainly used for the proc_service\n   interface.  We don't have much use for it, except as a handy place\n   to get a real PID for memory accesses.  */\n\nstruct ps_prochandle\n{\n  ptid_t ptid;\n};\n\nstruct string_map\n{\n  int num;\n  char *str;\n};\n\nstatic struct ps_prochandle main_ph;\nstatic td_thragent_t *main_ta;\nstatic int sol_thread_active = 0;\n\nstatic void init_sol_thread_ops (void);\n\n/* Default definitions: These must be defined in tm.h if they are to\n   be shared with a process module such as procfs.  */\n\n/* Pointers to routines from libthread_db resolved by dlopen().  */\n\nstatic void (*p_td_log)(const int on_off);\nstatic td_err_e (*p_td_ta_new)(const struct ps_prochandle *ph_p,\n\t\t\t       td_thragent_t **ta_pp);\nstatic td_err_e (*p_td_ta_delete)(td_thragent_t *ta_p);\nstatic td_err_e (*p_td_init)(void);\nstatic td_err_e (*p_td_ta_get_ph)(const td_thragent_t *ta_p,\n\t\t\t\t  struct ps_prochandle **ph_pp);\nstatic td_err_e (*p_td_ta_get_nthreads)(const td_thragent_t *ta_p,\n\t\t\t\t\tint *nthread_p);\nstatic td_err_e (*p_td_ta_tsd_iter)(const td_thragent_t *ta_p,\n\t\t\t\t    td_key_iter_f *cb, void *cbdata_p);\nstatic td_err_e (*p_td_ta_thr_iter)(const td_thragent_t *ta_p,\n\t\t\t\t    td_thr_iter_f *cb, void *cbdata_p,\n\t\t\t\t    td_thr_state_e state, int ti_pri,\n\t\t\t\t    sigset_t *ti_sigmask_p,\n\t\t\t\t    unsigned ti_user_flags);\nstatic td_err_e (*p_td_thr_validate)(const td_thrhandle_t *th_p);\nstatic td_err_e (*p_td_thr_tsd)(const td_thrhandle_t * th_p,\n\t\t\t\tconst thread_key_t key, void **data_pp);\nstatic td_err_e (*p_td_thr_get_info)(const td_thrhandle_t *th_p,\n\t\t\t\t     td_thrinfo_t *ti_p);\nstatic td_err_e (*p_td_thr_getfpregs)(const td_thrhandle_t *th_p,\n\t\t\t\t      prfpregset_t *fpregset);\nstatic td_err_e (*p_td_thr_getxregsize)(const td_thrhandle_t *th_p,\n\t\t\t\t\tint *xregsize);\nstatic td_err_e (*p_td_thr_getxregs)(const td_thrhandle_t *th_p,\n\t\t\t\t     const caddr_t xregset);\nstatic td_err_e (*p_td_thr_sigsetmask)(const td_thrhandle_t *th_p,\n\t\t\t\t       const sigset_t ti_sigmask);\nstatic td_err_e (*p_td_thr_setprio)(const td_thrhandle_t *th_p,\n\t\t\t\t    const int ti_pri);\nstatic td_err_e (*p_td_thr_setsigpending)(const td_thrhandle_t *th_p,\n\t\t\t\t\t  const uchar_t ti_pending_flag,\n\t\t\t\t\t  const sigset_t ti_pending);\nstatic td_err_e (*p_td_thr_setfpregs)(const td_thrhandle_t *th_p,\n\t\t\t\t      const prfpregset_t *fpregset);\nstatic td_err_e (*p_td_thr_setxregs)(const td_thrhandle_t *th_p,\n\t\t\t\t     const caddr_t xregset);\nstatic td_err_e (*p_td_ta_map_id2thr)(const td_thragent_t *ta_p,\n\t\t\t\t      thread_t tid,\n\t\t\t\t      td_thrhandle_t *th_p);\nstatic td_err_e (*p_td_ta_map_lwp2thr)(const td_thragent_t *ta_p,\n\t\t\t\t       lwpid_t lwpid,\n\t\t\t\t       td_thrhandle_t *th_p);\nstatic td_err_e (*p_td_thr_getgregs)(const td_thrhandle_t *th_p,\n\t\t\t\t     prgregset_t regset);\nstatic td_err_e (*p_td_thr_setgregs)(const td_thrhandle_t *th_p,\n\t\t\t\t     const prgregset_t regset);\n\f\n\n/* Return the libthread_db error string associated with ERRCODE.  If\n   ERRCODE is unknown, return an appropriate message.  */\n\nstatic char *\ntd_err_string (td_err_e errcode)\n{\n  static struct string_map td_err_table[] =\n  {\n    { TD_OK, \"generic \\\"call succeeded\\\"\" },\n    { TD_ERR, \"generic error.\" },\n    { TD_NOTHR, \"no thread can be found to satisfy query\" },\n    { TD_NOSV, \"no synch. variable can be found to satisfy query\" },\n    { TD_NOLWP, \"no lwp can be found to satisfy query\" },\n    { TD_BADPH, \"invalid process handle\" },\n    { TD_BADTH, \"invalid thread handle\" },\n    { TD_BADSH, \"invalid synchronization handle\" },\n    { TD_BADTA, \"invalid thread agent\" },\n    { TD_BADKEY, \"invalid key\" },\n    { TD_NOMSG, \"td_thr_event_getmsg() called when there was no message\" },\n    { TD_NOFPREGS, \"FPU register set not available for given thread\" },\n    { TD_NOLIBTHREAD, \"application not linked with libthread\" },\n    { TD_NOEVENT, \"requested event is not supported\" },\n    { TD_NOCAPAB, \"capability not available\" },\n    { TD_DBERR, \"Debugger service failed\" },\n    { TD_NOAPLIC, \"Operation not applicable to\" },\n    { TD_NOTSD, \"No thread specific data for this thread\" },\n    { TD_MALLOC, \"Malloc failed\" },\n    { TD_PARTIALREG, \"Only part of register set was written/read\" },\n    { TD_NOXREGS, \"X register set not available for given thread\" }\n  };\n  const int td_err_size = sizeof td_err_table / sizeof (struct string_map);\n  int i;\n  static char buf[50];\n\n  for (i = 0; i < td_err_size; i++)\n    if (td_err_table[i].num == errcode)\n      return td_err_table[i].str;\n\n  xsnprintf (buf, sizeof (buf), \"Unknown libthread_db error code: %d\",\n\t     errcode);\n\n  return buf;\n}\n\n/* Return the libthread_db state string assicoated with STATECODE.\n   If STATECODE is unknown, return an appropriate message.  */\n\nstatic char *\ntd_state_string (td_thr_state_e statecode)\n{\n  static struct string_map td_thr_state_table[] =\n  {\n    { TD_THR_ANY_STATE, \"any state\" },\n    { TD_THR_UNKNOWN, \"unknown\" },\n    { TD_THR_STOPPED, \"stopped\" },\n    { TD_THR_RUN, \"run\" },\n    { TD_THR_ACTIVE, \"active\" },\n    { TD_THR_ZOMBIE, \"zombie\" },\n    { TD_THR_SLEEP, \"sleep\" },\n    { TD_THR_STOPPED_ASLEEP, \"stopped asleep\" }\n  };\n  const int td_thr_state_table_size =\n    sizeof td_thr_state_table / sizeof (struct string_map);\n  int i;\n  static char buf[50];\n\n  for (i = 0; i < td_thr_state_table_size; i++)\n    if (td_thr_state_table[i].num == statecode)\n      return td_thr_state_table[i].str;\n\n  xsnprintf (buf, sizeof (buf), \"Unknown libthread_db state code: %d\",\n\t     statecode);\n\n  return buf;\n}\n\f\n\n/* Convert a POSIX or Solaris thread ID into a LWP ID.  If THREAD_ID\n   doesn't exist, that's an error.  If it's an inactive thread, return\n   DEFAULT_LWP.\n\n   NOTE: This function probably shouldn't call error().  */\n\nstatic ptid_t\nthread_to_lwp (ptid_t thread_id, int default_lwp)\n{\n  td_thrinfo_t ti;\n  td_thrhandle_t th;\n  td_err_e val;\n\n  if (ptid_lwp_p (thread_id))\n    return thread_id;\t\t/* It's already an LWP ID.  */\n\n  /* It's a thread.  Convert to LWP.  */\n\n  val = p_td_ta_map_id2thr (main_ta, ptid_get_tid (thread_id), &th);\n  if (val == TD_NOTHR)\n    return pid_to_ptid (-1);\t/* Thread must have terminated.  */\n  else if (val != TD_OK)\n    error (_(\"thread_to_lwp: td_ta_map_id2thr %s\"), td_err_string (val));\n\n  val = p_td_thr_get_info (&th, &ti);\n  if (val == TD_NOTHR)\n    return pid_to_ptid (-1);\t/* Thread must have terminated.  */\n  else if (val != TD_OK)\n    error (_(\"thread_to_lwp: td_thr_get_info: %s\"), td_err_string (val));\n\n  if (ti.ti_state != TD_THR_ACTIVE)\n    {\n      if (default_lwp != -1)\n\treturn pid_to_ptid (default_lwp);\n      error (_(\"thread_to_lwp: thread state not active: %s\"),\n\t     td_state_string (ti.ti_state));\n    }\n\n  return ptid_build (ptid_get_pid (thread_id), ti.ti_lid, 0);\n}\n\n/* Convert an LWP ID into a POSIX or Solaris thread ID.  If LWP_ID\n   doesn't exists, that's an error.\n\n   NOTE: This function probably shouldn't call error().  */\n\nstatic ptid_t\nlwp_to_thread (ptid_t lwp)\n{\n  td_thrinfo_t ti;\n  td_thrhandle_t th;\n  td_err_e val;\n\n  if (ptid_tid_p (lwp))\n    return lwp;\t\t\t/* It's already a thread ID.  */\n\n  /* It's an LWP.  Convert it to a thread ID.  */\n\n  if (!target_thread_alive (lwp))\n    return pid_to_ptid (-1);\t/* Must be a defunct LPW.  */\n\n  val = p_td_ta_map_lwp2thr (main_ta, ptid_get_lwp (lwp), &th);\n  if (val == TD_NOTHR)\n    return pid_to_ptid (-1);\t/* Thread must have terminated.  */\n  else if (val != TD_OK)\n    error (_(\"lwp_to_thread: td_ta_map_lwp2thr: %s.\"), td_err_string (val));\n\n  val = p_td_thr_validate (&th);\n  if (val == TD_NOTHR)\n    return lwp;\t\t\t/* Unknown to libthread; just return LPW,  */\n  else if (val != TD_OK)\n    error (_(\"lwp_to_thread: td_thr_validate: %s.\"), td_err_string (val));\n\n  val = p_td_thr_get_info (&th, &ti);\n  if (val == TD_NOTHR)\n    return pid_to_ptid (-1);\t/* Thread must have terminated.  */\n  else if (val != TD_OK)\n    error (_(\"lwp_to_thread: td_thr_get_info: %s.\"), td_err_string (val));\n\n  return ptid_build (ptid_get_pid (lwp), 0 , ti.ti_tid);\n}\n\f\n\n/* Most target vector functions from here on actually just pass\n   through to the layer beneath, as they don't need to do anything\n   specific for threads.  */\n\n/* Take a program previously attached to and detaches it.  The program\n   resumes execution and will no longer stop on signals, etc.  We'd\n   better not have left any breakpoints in the program or it'll die\n   when it hits one.  For this to work, it may be necessary for the\n   process to have been previously attached.  It *might* work if the\n   program was started via the normal ptrace (PTRACE_TRACEME).  */\n\nstatic void\nsol_thread_detach (struct target_ops *ops, const char *args, int from_tty)\n{\n  struct target_ops *beneath = find_target_beneath (ops);\n\n  sol_thread_active = 0;\n  inferior_ptid = pid_to_ptid (ptid_get_pid (main_ph.ptid));\n  unpush_target (ops);\n  beneath->to_detach (beneath, args, from_tty);\n}\n\n/* Resume execution of process PTID.  If STEP is nozero, then just\n   single step it.  If SIGNAL is nonzero, restart it with that signal\n   activated.  We may have to convert PTID from a thread ID to an LWP\n   ID for procfs.  */\n\nstatic void\nsol_thread_resume (struct target_ops *ops,\n\t\t   ptid_t ptid, int step, enum gdb_signal signo)\n{\n  struct cleanup *old_chain;\n  struct target_ops *beneath = find_target_beneath (ops);\n\n  old_chain = save_inferior_ptid ();\n\n  inferior_ptid = thread_to_lwp (inferior_ptid, ptid_get_pid (main_ph.ptid));\n  if (ptid_get_pid (inferior_ptid) == -1)\n    inferior_ptid = procfs_first_available ();\n\n  if (ptid_get_pid (ptid) != -1)\n    {\n      ptid_t save_ptid = ptid;\n\n      ptid = thread_to_lwp (ptid, -2);\n      if (ptid_get_pid (ptid) == -2)\t\t/* Inactive thread.  */\n\terror (_(\"This version of Solaris can't start inactive threads.\"));\n      if (info_verbose && ptid_get_pid (ptid) == -1)\n\twarning (_(\"Specified thread %ld seems to have terminated\"),\n\t\t ptid_get_tid (save_ptid));\n    }\n\n  beneath->to_resume (beneath, ptid, step, signo);\n\n  do_cleanups (old_chain);\n}\n\n/* Wait for any threads to stop.  We may have to convert PTID from a\n   thread ID to an LWP ID, and vice versa on the way out.  */\n\nstatic ptid_t\nsol_thread_wait (struct target_ops *ops,\n\t\t ptid_t ptid, struct target_waitstatus *ourstatus, int options)\n{\n  ptid_t rtnval;\n  ptid_t save_ptid;\n  struct target_ops *beneath = find_target_beneath (ops);\n  struct cleanup *old_chain;\n\n  save_ptid = inferior_ptid;\n  old_chain = save_inferior_ptid ();\n\n  inferior_ptid = thread_to_lwp (inferior_ptid, ptid_get_pid (main_ph.ptid));\n  if (ptid_get_pid (inferior_ptid) == -1)\n    inferior_ptid = procfs_first_available ();\n\n  if (ptid_get_pid (ptid) != -1)\n    {\n      ptid_t save_ptid = ptid;\n\n      ptid = thread_to_lwp (ptid, -2);\n      if (ptid_get_pid (ptid) == -2)\t\t/* Inactive thread.  */\n\terror (_(\"This version of Solaris can't start inactive threads.\"));\n      if (info_verbose && ptid_get_pid (ptid) == -1)\n\twarning (_(\"Specified thread %ld seems to have terminated\"),\n\t\t ptid_get_tid (save_ptid));\n    }\n\n  rtnval = beneath->to_wait (beneath, ptid, ourstatus, options);\n\n  if (ourstatus->kind != TARGET_WAITKIND_EXITED)\n    {\n      /* Map the LWP of interest back to the appropriate thread ID.  */\n      rtnval = lwp_to_thread (rtnval);\n      if (ptid_get_pid (rtnval) == -1)\n\trtnval = save_ptid;\n\n      /* See if we have a new thread.  */\n      if (ptid_tid_p (rtnval)\n\t  && !ptid_equal (rtnval, save_ptid)\n\t  && (!in_thread_list (rtnval)\n\t      || is_exited (rtnval)))\n\tadd_thread (rtnval);\n    }\n\n  /* During process initialization, we may get here without the thread\n     package being initialized, since that can only happen after we've\n     found the shared libs.  */\n\n  do_cleanups (old_chain);\n\n  return rtnval;\n}\n\nstatic void\nsol_thread_fetch_registers (struct target_ops *ops,\n\t\t\t    struct regcache *regcache, int regnum)\n{\n  thread_t thread;\n  td_thrhandle_t thandle;\n  td_err_e val;\n  prgregset_t gregset;\n  prfpregset_t fpregset;\n  gdb_gregset_t *gregset_p = &gregset;\n  gdb_fpregset_t *fpregset_p = &fpregset;\n  struct target_ops *beneath = find_target_beneath (ops);\n\n  if (!ptid_tid_p (inferior_ptid))\n    {\n      /* It's an LWP; pass the request on to the layer beneath.  */\n      beneath->to_fetch_registers (beneath, regcache, regnum);\n      return;\n    }\n\n  /* Solaris thread: convert INFERIOR_PTID into a td_thrhandle_t.  */\n  thread = ptid_get_tid (inferior_ptid);\n  if (thread == 0)\n    error (_(\"sol_thread_fetch_registers: thread == 0\"));\n\n  val = p_td_ta_map_id2thr (main_ta, thread, &thandle);\n  if (val != TD_OK)\n    error (_(\"sol_thread_fetch_registers: td_ta_map_id2thr: %s\"),\n\t   td_err_string (val));\n\n  /* Get the general-purpose registers.  */\n\n  val = p_td_thr_getgregs (&thandle, gregset);\n  if (val != TD_OK && val != TD_PARTIALREG)\n    error (_(\"sol_thread_fetch_registers: td_thr_getgregs %s\"),\n\t   td_err_string (val));\n\n  /* For SPARC, TD_PARTIALREG means that only %i0...%i7, %l0..%l7, %pc\n     and %sp are saved (by a thread context switch).  */\n\n  /* And, now the floating-point registers.  */\n\n  val = p_td_thr_getfpregs (&thandle, &fpregset);\n  if (val != TD_OK && val != TD_NOFPREGS)\n    error (_(\"sol_thread_fetch_registers: td_thr_getfpregs %s\"),\n\t   td_err_string (val));\n\n  /* Note that we must call supply_gregset and supply_fpregset *after*\n     calling the td routines because the td routines call ps_lget*\n     which affect the values stored in the registers array.  */\n\n  supply_gregset (regcache, (const gdb_gregset_t *) gregset_p);\n  supply_fpregset (regcache, (const gdb_fpregset_t *) fpregset_p);\n}\n\nstatic void\nsol_thread_store_registers (struct target_ops *ops,\n\t\t\t    struct regcache *regcache, int regnum)\n{\n  thread_t thread;\n  td_thrhandle_t thandle;\n  td_err_e val;\n  prgregset_t gregset;\n  prfpregset_t fpregset;\n\n  if (!ptid_tid_p (inferior_ptid))\n    {\n      struct target_ops *beneath = find_target_beneath (ops);\n\n      /* It's an LWP; pass the request on to the layer beneath.  */\n      beneath->to_store_registers (beneath, regcache, regnum);\n      return;\n    }\n\n  /* Solaris thread: convert INFERIOR_PTID into a td_thrhandle_t.  */\n  thread = ptid_get_tid (inferior_ptid);\n\n  val = p_td_ta_map_id2thr (main_ta, thread, &thandle);\n  if (val != TD_OK)\n    error (_(\"sol_thread_store_registers: td_ta_map_id2thr %s\"),\n\t   td_err_string (val));\n\n  if (regnum != -1)\n    {\n      /* Not writing all the registers.  */\n      char old_value[MAX_REGISTER_SIZE];\n\n      /* Save new register value.  */\n      regcache_raw_collect (regcache, regnum, old_value);\n\n      val = p_td_thr_getgregs (&thandle, gregset);\n      if (val != TD_OK)\n\terror (_(\"sol_thread_store_registers: td_thr_getgregs %s\"),\n\t       td_err_string (val));\n      val = p_td_thr_getfpregs (&thandle, &fpregset);\n      if (val != TD_OK)\n\terror (_(\"sol_thread_store_registers: td_thr_getfpregs %s\"),\n\t       td_err_string (val));\n\n      /* Restore new register value.  */\n      regcache_raw_supply (regcache, regnum, old_value);\n    }\n\n  fill_gregset (regcache, (gdb_gregset_t *) &gregset, regnum);\n  fill_fpregset (regcache, (gdb_fpregset_t *) &fpregset, regnum);\n\n  val = p_td_thr_setgregs (&thandle, gregset);\n  if (val != TD_OK)\n    error (_(\"sol_thread_store_registers: td_thr_setgregs %s\"),\n\t   td_err_string (val));\n  val = p_td_thr_setfpregs (&thandle, &fpregset);\n  if (val != TD_OK)\n    error (_(\"sol_thread_store_registers: td_thr_setfpregs %s\"),\n\t   td_err_string (val));\n}\n\n/* Perform partial transfers on OBJECT.  See target_read_partial and\n   target_write_partial for details of each variant.  One, and only\n   one, of readbuf or writebuf must be non-NULL.  */\n\nstatic enum target_xfer_status\nsol_thread_xfer_partial (struct target_ops *ops, enum target_object object,\n\t\t\t  const char *annex, gdb_byte *readbuf,\n\t\t\t  const gdb_byte *writebuf,\n\t\t\t ULONGEST offset, ULONGEST len, ULONGEST *xfered_len)\n{\n  enum target_xfer_status retval;\n  struct cleanup *old_chain;\n  struct target_ops *beneath = find_target_beneath (ops);\n\n  old_chain = save_inferior_ptid ();\n\n  if (ptid_tid_p (inferior_ptid) || !target_thread_alive (inferior_ptid))\n    {\n      /* It's either a thread or an LWP that isn't alive.  Any live\n         LWP will do so use the first available.\n\n\t NOTE: We don't need to call switch_to_thread; we're just\n\t reading memory.  */\n      inferior_ptid = procfs_first_available ();\n    }\n\n  retval = beneath->to_xfer_partial (beneath, object, annex, readbuf,\n\t\t\t\t     writebuf, offset, len, xfered_len);\n\n  do_cleanups (old_chain);\n\n  return retval;\n}\n\nstatic void\ncheck_for_thread_db (void)\n{\n  td_err_e err;\n  ptid_t ptid;\n\n  /* Don't attempt to use thread_db for remote targets.  */\n  if (!(target_can_run (&current_target) || core_bfd))\n    return;\n\n  /* Do nothing if we couldn't load libthread_db.so.1.  */\n  if (p_td_ta_new == NULL)\n    return;\n\n  if (sol_thread_active)\n    /* Nothing to do.  The thread library was already detected and the\n       target vector was already activated.  */\n    return;\n\n  /* Now, initialize libthread_db.  This needs to be done after the\n     shared libraries are located because it needs information from\n     the user's thread library.  */\n\n  err = p_td_init ();\n  if (err != TD_OK)\n    {\n      warning (_(\"sol_thread_new_objfile: td_init: %s\"), td_err_string (err));\n      return;\n    }\n\n  /* Now attempt to open a connection to the thread library.  */\n  err = p_td_ta_new (&main_ph, &main_ta);\n  switch (err)\n    {\n    case TD_NOLIBTHREAD:\n      /* No thread library was detected.  */\n      break;\n\n    case TD_OK:\n      printf_unfiltered (_(\"[Thread debugging using libthread_db enabled]\\n\"));\n\n      /* The thread library was detected.  Activate the sol_thread target.  */\n      push_target (&sol_thread_ops);\n      sol_thread_active = 1;\n\n      main_ph.ptid = inferior_ptid; /* Save for xfer_memory.  */\n      ptid = lwp_to_thread (inferior_ptid);\n      if (ptid_get_pid (ptid) != -1)\n\tinferior_ptid = ptid;\n\n      target_update_thread_list ();\n      break;\n\n    default:\n      warning (_(\"Cannot initialize thread debugging library: %s\"),\n\t       td_err_string (err));\n      break;\n    }\n}\n\n/* This routine is called whenever a new symbol table is read in, or\n   when all symbol tables are removed.  libthread_db can only be\n   initialized when it finds the right variables in libthread.so.\n   Since it's a shared library, those variables don't show up until\n   the library gets mapped and the symbol table is read in.  */\n\nstatic void\nsol_thread_new_objfile (struct objfile *objfile)\n{\n  if (objfile != NULL)\n    check_for_thread_db ();\n}\n\n/* Clean up after the inferior dies.  */\n\nstatic void\nsol_thread_mourn_inferior (struct target_ops *ops)\n{\n  struct target_ops *beneath = find_target_beneath (ops);\n\n  sol_thread_active = 0;\n\n  unpush_target (ops);\n\n  beneath->to_mourn_inferior (beneath);\n}\n\n/* Return true if PTID is still active in the inferior.  */\n\nstatic int\nsol_thread_alive (struct target_ops *ops, ptid_t ptid)\n{\n  if (ptid_tid_p (ptid))\n    {\n      /* It's a (user-level) thread.  */\n      td_err_e val;\n      td_thrhandle_t th;\n      int pid;\n\n      pid = ptid_get_tid (ptid);\n      if ((val = p_td_ta_map_id2thr (main_ta, pid, &th)) != TD_OK)\n\treturn 0;\t\t/* Thread not found.  */\n      if ((val = p_td_thr_validate (&th)) != TD_OK)\n\treturn 0;\t\t/* Thread not valid.  */\n      return 1;\t\t\t/* Known thread.  */\n    }\n  else\n    {\n      struct target_ops *beneath = find_target_beneath (ops);\n\n      /* It's an LPW; pass the request on to the layer below.  */\n      return beneath->to_thread_alive (beneath, ptid);\n    }\n}\n\n\f\n/* These routines implement the lower half of the thread_db interface,\n   i.e. the ps_* routines.  */\n\n/* Various versions of <proc_service.h> have slightly different\n   function prototypes.  In particular, we have\n\n   NEWER                        OLDER\n   struct ps_prochandle *       const struct ps_prochandle *\n   void*                        char*\n   const void*          \tchar*\n   int                  \tsize_t\n\n   Which one you have depends on the Solaris version and what patches\n   you've applied.  On the theory that there are only two major\n   variants, we have configure check the prototype of ps_pdwrite (),\n   and use that info to make appropriate typedefs here.  */\n\n#ifdef PROC_SERVICE_IS_OLD\ntypedef const struct ps_prochandle *gdb_ps_prochandle_t;\ntypedef char *gdb_ps_read_buf_t;\ntypedef char *gdb_ps_write_buf_t;\ntypedef int gdb_ps_size_t;\ntypedef psaddr_t gdb_ps_addr_t;\n#else\ntypedef struct ps_prochandle *gdb_ps_prochandle_t;\ntypedef void *gdb_ps_read_buf_t;\ntypedef const void *gdb_ps_write_buf_t;\ntypedef size_t gdb_ps_size_t;\ntypedef psaddr_t gdb_ps_addr_t;\n#endif\n\n/* The next four routines are called by libthread_db to tell us to\n   stop and stop a particular process or lwp.  Since GDB ensures that\n   these are all stopped by the time we call anything in thread_db,\n   these routines need to do nothing.  */\n\n/* Process stop.  */\n\nps_err_e\nps_pstop (gdb_ps_prochandle_t ph)\n{\n  return PS_OK;\n}\n\n/* Process continue.  */\n\nps_err_e\nps_pcontinue (gdb_ps_prochandle_t ph)\n{\n  return PS_OK;\n}\n\n/* LWP stop.  */\n\nps_err_e\nps_lstop (gdb_ps_prochandle_t ph, lwpid_t lwpid)\n{\n  return PS_OK;\n}\n\n/* LWP continue.  */\n\nps_err_e\nps_lcontinue (gdb_ps_prochandle_t ph, lwpid_t lwpid)\n{\n  return PS_OK;\n}\n\n/* Looks up the symbol LD_SYMBOL_NAME in the debugger's symbol table.  */\n\nps_err_e\nps_pglobal_lookup (gdb_ps_prochandle_t ph, const char *ld_object_name,\n\t\t   const char *ld_symbol_name, gdb_ps_addr_t *ld_symbol_addr)\n{\n  struct bound_minimal_symbol ms;\n\n  ms = lookup_minimal_symbol (ld_symbol_name, NULL, NULL);\n  if (!ms.minsym)\n    return PS_NOSYM;\n\n  *ld_symbol_addr = BMSYMBOL_VALUE_ADDRESS (ms);\n  return PS_OK;\n}\n\n/* Common routine for reading and writing memory.  */\n\nstatic ps_err_e\nrw_common (int dowrite, const struct ps_prochandle *ph, gdb_ps_addr_t addr,\n\t   gdb_byte *buf, int size)\n{\n  int ret;\n  struct cleanup *old_chain;\n\n  old_chain = save_inferior_ptid ();\n\n  if (ptid_tid_p (inferior_ptid) || !target_thread_alive (inferior_ptid))\n    {\n      /* It's either a thread or an LWP that isn't alive.  Any live\n         LWP will do so use the first available.\n\n\t NOTE: We don't need to call switch_to_thread; we're just\n\t reading memory.  */\n      inferior_ptid = procfs_first_available ();\n    }\n\n#if defined (__sparcv9)\n  /* For Sparc64 cross Sparc32, make sure the address has not been\n     accidentally sign-extended (or whatever) to beyond 32 bits.  */\n  if (bfd_get_arch_size (exec_bfd) == 32)\n    addr &= 0xffffffff;\n#endif\n\n  if (dowrite)\n    ret = target_write_memory (addr, (gdb_byte *) buf, size);\n  else\n    ret = target_read_memory (addr, (gdb_byte *) buf, size);\n\n  do_cleanups (old_chain);\n\n  return (ret == 0 ? PS_OK : PS_ERR);\n}\n\n/* Copies SIZE bytes from target process .data segment to debugger memory.  */\n\nps_err_e\nps_pdread (gdb_ps_prochandle_t ph, gdb_ps_addr_t addr,\n\t   gdb_ps_read_buf_t buf, gdb_ps_size_t size)\n{\n  return rw_common (0, ph, addr, buf, size);\n}\n\n/* Copies SIZE bytes from debugger memory .data segment to target process.  */\n\nps_err_e\nps_pdwrite (gdb_ps_prochandle_t ph, gdb_ps_addr_t addr,\n\t    gdb_ps_write_buf_t buf, gdb_ps_size_t size)\n{\n  return rw_common (1, ph, addr, (gdb_byte *) buf, size);\n}\n\n/* Copies SIZE bytes from target process .text segment to debugger memory.  */\n\nps_err_e\nps_ptread (gdb_ps_prochandle_t ph, gdb_ps_addr_t addr,\n\t   gdb_ps_read_buf_t buf, gdb_ps_size_t size)\n{\n  return rw_common (0, ph, addr, buf, size);\n}\n\n/* Copies SIZE bytes from debugger memory .text segment to target process.  */\n\nps_err_e\nps_ptwrite (gdb_ps_prochandle_t ph, gdb_ps_addr_t addr,\n\t    gdb_ps_write_buf_t buf, gdb_ps_size_t size)\n{\n  return rw_common (1, ph, addr, (gdb_byte *) buf, size);\n}\n\n/* Get general-purpose registers for LWP.  */\n\nps_err_e\nps_lgetregs (gdb_ps_prochandle_t ph, lwpid_t lwpid, prgregset_t gregset)\n{\n  struct cleanup *old_chain;\n  struct regcache *regcache;\n\n  old_chain = save_inferior_ptid ();\n\n  inferior_ptid = ptid_build (ptid_get_pid (inferior_ptid), lwpid, 0);\n  regcache = get_thread_arch_regcache (inferior_ptid, target_gdbarch ());\n\n  target_fetch_registers (regcache, -1);\n  fill_gregset (regcache, (gdb_gregset_t *) gregset, -1);\n\n  do_cleanups (old_chain);\n\n  return PS_OK;\n}\n\n/* Set general-purpose registers for LWP.  */\n\nps_err_e\nps_lsetregs (gdb_ps_prochandle_t ph, lwpid_t lwpid,\n\t     const prgregset_t gregset)\n{\n  struct cleanup *old_chain;\n  struct regcache *regcache;\n\n  old_chain = save_inferior_ptid ();\n\n  inferior_ptid = ptid_build (ptid_get_pid (inferior_ptid), lwpid, 0);\n  regcache = get_thread_arch_regcache (inferior_ptid, target_gdbarch ());\n\n  supply_gregset (regcache, (const gdb_gregset_t *) gregset);\n  target_store_registers (regcache, -1);\n\n  do_cleanups (old_chain);\n\n  return PS_OK;\n}\n\n/* Log a message (sends to gdb_stderr).  */\n\nvoid\nps_plog (const char *fmt, ...)\n{\n  va_list args;\n\n  va_start (args, fmt);\n\n  vfprintf_filtered (gdb_stderr, fmt, args);\n}\n\n/* Get size of extra register set.  Currently a noop.  */\n\nps_err_e\nps_lgetxregsize (gdb_ps_prochandle_t ph, lwpid_t lwpid, int *xregsize)\n{\n  return PS_OK;\n}\n\n/* Get extra register set.  Currently a noop.  */\n\nps_err_e\nps_lgetxregs (gdb_ps_prochandle_t ph, lwpid_t lwpid, caddr_t xregset)\n{\n  return PS_OK;\n}\n\n/* Set extra register set.  Currently a noop.  */\n\nps_err_e\nps_lsetxregs (gdb_ps_prochandle_t ph, lwpid_t lwpid, caddr_t xregset)\n{\n  return PS_OK;\n}\n\n/* Get floating-point registers for LWP.  */\n\nps_err_e\nps_lgetfpregs (gdb_ps_prochandle_t ph, lwpid_t lwpid,\n\t       prfpregset_t *fpregset)\n{\n  struct cleanup *old_chain;\n  struct regcache *regcache;\n\n  old_chain = save_inferior_ptid ();\n\n  inferior_ptid = ptid_build (ptid_get_pid (inferior_ptid), lwpid, 0);\n  regcache = get_thread_arch_regcache (inferior_ptid, target_gdbarch ());\n\n  target_fetch_registers (regcache, -1);\n  fill_fpregset (regcache, (gdb_fpregset_t *) fpregset, -1);\n\n  do_cleanups (old_chain);\n\n  return PS_OK;\n}\n\n/* Set floating-point regs for LWP.  */\n\nps_err_e\nps_lsetfpregs (gdb_ps_prochandle_t ph, lwpid_t lwpid,\n\t       const prfpregset_t * fpregset)\n{\n  struct cleanup *old_chain;\n  struct regcache *regcache;\n\n  old_chain = save_inferior_ptid ();\n\n  inferior_ptid = ptid_build (ptid_get_pid (inferior_ptid), lwpid, 0);\n  regcache = get_thread_arch_regcache (inferior_ptid, target_gdbarch ());\n\n  supply_fpregset (regcache, (const gdb_fpregset_t *) fpregset);\n  target_store_registers (regcache, -1);\n\n  do_cleanups (old_chain);\n\n  return PS_OK;\n}\n\n#ifdef PR_MODEL_LP64\n/* Identify process as 32-bit or 64-bit.  At the moment we're using\n   BFD to do this.  There might be a more Solaris-specific\n   (e.g. procfs) method, but this ought to work.  */\n\nps_err_e\nps_pdmodel (gdb_ps_prochandle_t ph, int *data_model)\n{\n  if (exec_bfd == 0)\n    *data_model = PR_MODEL_UNKNOWN;\n  else if (bfd_get_arch_size (exec_bfd) == 32)\n    *data_model = PR_MODEL_ILP32;\n  else\n    *data_model = PR_MODEL_LP64;\n\n  return PS_OK;\n}\n#endif /* PR_MODEL_LP64 */\n\n#if (defined(__i386__) || defined(__x86_64__)) && defined (sun)\n\n/* Reads the local descriptor table of a LWP.\n\n   This function is necessary on x86-solaris only.  Without it, the loading\n   of libthread_db would fail because of ps_lgetLDT being undefined.  */\n\nps_err_e\nps_lgetLDT (gdb_ps_prochandle_t ph, lwpid_t lwpid,\n\t    struct ssd *pldt)\n{\n  /* NOTE: only used on Solaris, therefore OK to refer to procfs.c.  */\n  struct ssd *ret;\n\n  /* FIXME: can't I get the process ID from the prochandle or\n     something?  */\n\n  if (ptid_get_pid (inferior_ptid) <= 0 || lwpid <= 0)\n    return PS_BADLID;\n\n  ret = procfs_find_LDT_entry (ptid_build (ptid_get_pid (inferior_ptid),\n\t\t\t       lwpid, 0));\n  if (ret)\n    {\n      memcpy (pldt, ret, sizeof (struct ssd));\n      return PS_OK;\n    }\n  else\n    /* LDT not found.  */\n    return PS_ERR;\n}\n#endif\n\f\n\n/* Convert PTID to printable form.  */\n\nstatic char *\nsolaris_pid_to_str (struct target_ops *ops, ptid_t ptid)\n{\n  static char buf[100];\n\n  if (ptid_tid_p (ptid))\n    {\n      ptid_t lwp;\n\n      lwp = thread_to_lwp (ptid, -2);\n\n      if (ptid_get_pid (lwp) == -1)\n\txsnprintf (buf, sizeof (buf), \"Thread %ld (defunct)\",\n\t\t   ptid_get_tid (ptid));\n      else if (ptid_get_pid (lwp) != -2)\n\txsnprintf (buf, sizeof (buf), \"Thread %ld (LWP %ld)\",\n\t\t ptid_get_tid (ptid), ptid_get_lwp (lwp));\n      else\n\txsnprintf (buf, sizeof (buf), \"Thread %ld        \",\n\t\t   ptid_get_tid (ptid));\n    }\n  else if (ptid_get_lwp (ptid) != 0)\n    xsnprintf (buf, sizeof (buf), \"LWP    %ld        \", ptid_get_lwp (ptid));\n  else\n    xsnprintf (buf, sizeof (buf), \"process %d    \", ptid_get_pid (ptid));\n\n  return buf;\n}\n\f\n\n/* Worker bee for update_thread_list.  Callback function that gets\n   called once per user-level thread (i.e. not for LWP's).  */\n\nstatic int\nsol_update_thread_list_callback (const td_thrhandle_t *th, void *ignored)\n{\n  td_err_e retval;\n  td_thrinfo_t ti;\n  ptid_t ptid;\n\n  retval = p_td_thr_get_info (th, &ti);\n  if (retval != TD_OK)\n    return -1;\n\n  ptid = ptid_build (ptid_get_pid (inferior_ptid), 0, ti.ti_tid);\n  if (!in_thread_list (ptid) || is_exited (ptid))\n    add_thread (ptid);\n\n  return 0;\n}\n\nstatic void\nsol_update_thread_list (struct target_ops *ops)\n{\n  struct target_ops *beneath = find_target_beneath (ops);\n\n  /* Delete dead threads.  */\n  prune_threads ();\n\n  /* Find any new LWP's.  */\n  beneath->to_update_thread_list (beneath);\n\n  /* Then find any new user-level threads.  */\n  p_td_ta_thr_iter (main_ta, sol_update_thread_list_callback, (void *) 0,\n\t\t    TD_THR_ANY_STATE, TD_THR_LOWEST_PRIORITY,\n\t\t    TD_SIGNO_MASK, TD_THR_ANY_USER_FLAGS);\n}\n\n/* Worker bee for the \"info sol-thread\" command.  This is a callback\n   function that gets called once for each Solaris user-level thread\n   (i.e. not for LWPs) in the inferior.  Print anything interesting\n   that we can think of.  */\n\nstatic int\ninfo_cb (const td_thrhandle_t *th, void *s)\n{\n  td_err_e ret;\n  td_thrinfo_t ti;\n\n  ret = p_td_thr_get_info (th, &ti);\n  if (ret == TD_OK)\n    {\n      printf_filtered (\"%s thread #%d, lwp %d, \",\n\t\t       ti.ti_type == TD_THR_SYSTEM ? \"system\" : \"user  \",\n\t\t       ti.ti_tid, ti.ti_lid);\n      switch (ti.ti_state)\n\t{\n\tdefault:\n\tcase TD_THR_UNKNOWN:\n\t  printf_filtered (\"<unknown state>\");\n\t  break;\n\tcase TD_THR_STOPPED:\n\t  printf_filtered (\"(stopped)\");\n\t  break;\n\tcase TD_THR_RUN:\n\t  printf_filtered (\"(run)    \");\n\t  break;\n\tcase TD_THR_ACTIVE:\n\t  printf_filtered (\"(active) \");\n\t  break;\n\tcase TD_THR_ZOMBIE:\n\t  printf_filtered (\"(zombie) \");\n\t  break;\n\tcase TD_THR_SLEEP:\n\t  printf_filtered (\"(asleep) \");\n\t  break;\n\tcase TD_THR_STOPPED_ASLEEP:\n\t  printf_filtered (\"(stopped asleep)\");\n\t  break;\n\t}\n      /* Print thr_create start function.  */\n      if (ti.ti_startfunc != 0)\n\t{\n\t  const struct bound_minimal_symbol msym\n\t    = lookup_minimal_symbol_by_pc (ti.ti_startfunc);\n\n\t  printf_filtered (\"   startfunc=%s\",\n\t\t\t   msym.minsym\n\t\t\t   ? MSYMBOL_PRINT_NAME (msym.minsym)\n\t\t\t   : paddress (target_gdbarch (), ti.ti_startfunc));\n\t}\n\n      /* If thread is asleep, print function that went to sleep.  */\n      if (ti.ti_state == TD_THR_SLEEP)\n\t{\n\t  const struct bound_minimal_symbol msym\n\t    = lookup_minimal_symbol_by_pc (ti.ti_pc);\n\n\t  printf_filtered (\"   sleepfunc=%s\",\n\t\t\t   msym.minsym\n\t\t\t   ? MSYMBOL_PRINT_NAME (msym.minsym)\n\t\t\t   : paddress (target_gdbarch (), ti.ti_pc));\n\t}\n\n      printf_filtered (\"\\n\");\n    }\n  else\n    warning (_(\"info sol-thread: failed to get info for thread.\"));\n\n  return 0;\n}\n\n/* List some state about each Solaris user-level thread in the\n   inferior.  */\n\nstatic void\ninfo_solthreads (char *args, int from_tty)\n{\n  p_td_ta_thr_iter (main_ta, info_cb, args,\n\t\t    TD_THR_ANY_STATE, TD_THR_LOWEST_PRIORITY,\n\t\t    TD_SIGNO_MASK, TD_THR_ANY_USER_FLAGS);\n}\n\n/* Callback routine used to find a thread based on the TID part of\n   its PTID.  */\n\nstatic int\nthread_db_find_thread_from_tid (struct thread_info *thread, void *data)\n{\n  long *tid = (long *) data;\n\n  if (ptid_get_tid (thread->ptid) == *tid)\n    return 1;\n\n  return 0;\n}\n\nstatic ptid_t\nsol_get_ada_task_ptid (struct target_ops *self, long lwp, long thread)\n{\n  struct thread_info *thread_info =\n    iterate_over_threads (thread_db_find_thread_from_tid, &thread);\n\n  if (thread_info == NULL)\n    {\n      /* The list of threads is probably not up to date.  Find any\n         thread that is missing from the list, and try again.  */\n      sol_update_thread_list (&current_target);\n      thread_info = iterate_over_threads (thread_db_find_thread_from_tid,\n                                          &thread);\n    }\n\n  gdb_assert (thread_info != NULL);\n\n  return (thread_info->ptid);\n}\n\nstatic void\ninit_sol_thread_ops (void)\n{\n  sol_thread_ops.to_shortname = \"solaris-threads\";\n  sol_thread_ops.to_longname = \"Solaris threads and pthread.\";\n  sol_thread_ops.to_doc = \"Solaris threads and pthread support.\";\n  sol_thread_ops.to_detach = sol_thread_detach;\n  sol_thread_ops.to_resume = sol_thread_resume;\n  sol_thread_ops.to_wait = sol_thread_wait;\n  sol_thread_ops.to_fetch_registers = sol_thread_fetch_registers;\n  sol_thread_ops.to_store_registers = sol_thread_store_registers;\n  sol_thread_ops.to_xfer_partial = sol_thread_xfer_partial;\n  sol_thread_ops.to_mourn_inferior = sol_thread_mourn_inferior;\n  sol_thread_ops.to_thread_alive = sol_thread_alive;\n  sol_thread_ops.to_pid_to_str = solaris_pid_to_str;\n  sol_thread_ops.to_update_thread_list = sol_update_thread_list;\n  sol_thread_ops.to_stratum = thread_stratum;\n  sol_thread_ops.to_get_ada_task_ptid = sol_get_ada_task_ptid;\n  sol_thread_ops.to_magic = OPS_MAGIC;\n}\n\n/* Silence -Wmissing-prototypes.  */\nextern void _initialize_sol_thread (void);\n\nvoid\n_initialize_sol_thread (void)\n{\n  void *dlhandle;\n\n  init_sol_thread_ops ();\n\n  dlhandle = dlopen (\"libthread_db.so.1\", RTLD_NOW);\n  if (!dlhandle)\n    goto die;\n\n#define resolve(X) \\\n  if (!(p_##X = dlsym (dlhandle, #X))) \\\n    goto die;\n\n  resolve (td_log);\n  resolve (td_ta_new);\n  resolve (td_ta_delete);\n  resolve (td_init);\n  resolve (td_ta_get_ph);\n  resolve (td_ta_get_nthreads);\n  resolve (td_ta_tsd_iter);\n  resolve (td_ta_thr_iter);\n  resolve (td_thr_validate);\n  resolve (td_thr_tsd);\n  resolve (td_thr_get_info);\n  resolve (td_thr_getfpregs);\n  resolve (td_thr_getxregsize);\n  resolve (td_thr_getxregs);\n  resolve (td_thr_sigsetmask);\n  resolve (td_thr_setprio);\n  resolve (td_thr_setsigpending);\n  resolve (td_thr_setfpregs);\n  resolve (td_thr_setxregs);\n  resolve (td_ta_map_id2thr);\n  resolve (td_ta_map_lwp2thr);\n  resolve (td_thr_getgregs);\n  resolve (td_thr_setgregs);\n\n  complete_target_initialization (&sol_thread_ops);\n\n  add_cmd (\"sol-threads\", class_maintenance, info_solthreads,\n\t   _(\"Show info on Solaris user threads.\"), &maintenanceinfolist);\n\n  /* Hook into new_objfile notification.  */\n  observer_attach_new_objfile (sol_thread_new_objfile);\n  return;\n\n die:\n  fprintf_unfiltered (gdb_stderr, \"\\\n[GDB will not be able to debug user-mode threads: %s]\\n\", dlerror ());\n\n  if (dlhandle)\n    dlclose (dlhandle);\n\n  return;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/gdb-dlfcn.c": "/* Platform independent shared object routines for GDB.\n\n   Copyright (C) 2011-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"defs.h\"\n#include \"gdb-dlfcn.h\"\n\n#ifdef HAVE_DLFCN_H\n#include <dlfcn.h>\n#elif __MINGW32__\n#include <windows.h>\n#else\n/* Unsupported configuration. */\n#define NO_SHARED_LIB\n#endif\n\n#ifdef NO_SHARED_LIB\n\nvoid *\ngdb_dlopen (const char *filename)\n{\n  gdb_assert_not_reached (\"gdb_dlopen should not be called on this platform.\");\n}\n\nvoid *\ngdb_dlsym (void *handle, const char *symbol)\n{\n  gdb_assert_not_reached (\"gdb_dlsym should not be called on this platform.\");\n}\n\nstruct cleanup *\nmake_cleanup_dlclose (void *handle)\n{\n  gdb_assert_not_reached (\"make_cleanup_dlclose should not be called on this \"\n                          \"platform.\");\n}\n\nint\ngdb_dlclose (void *handle)\n{\n  gdb_assert_not_reached (\"gdb_dlclose should not be called on this platform.\");\n}\n\nint\nis_dl_available (void)\n{\n  return 0;\n}\n\n#else /* NO_SHARED_LIB */\n\nvoid *\ngdb_dlopen (const char *filename)\n{\n  void *result;\n#ifdef HAVE_DLFCN_H\n  result = dlopen (filename, RTLD_NOW);\n#elif __MINGW32__\n  result = (void *) LoadLibrary (filename);\n#endif\n  if (result != NULL)\n    return result;\n\n#ifdef HAVE_DLFCN_H\n  error (_(\"Could not load %s: %s\"), filename, dlerror());\n#else\n  {\n    LPVOID buffer;\n    DWORD dw;\n\n    dw = GetLastError();\n\n    FormatMessage (FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM |\n                   FORMAT_MESSAGE_IGNORE_INSERTS,\n                   NULL, dw, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n                   (LPTSTR) &buffer,\n                   0, NULL);\n\n    error (_(\"Could not load %s: %s\"), filename, (char *) buffer);\n  }\n#endif\n}\n\nvoid *\ngdb_dlsym (void *handle, const char *symbol)\n{\n#ifdef HAVE_DLFCN_H\n  return dlsym (handle, symbol);\n#elif __MINGW32__\n  return (void *) GetProcAddress (handle, symbol);\n#endif\n}\n\nint\ngdb_dlclose (void *handle)\n{\n#ifdef HAVE_DLFCN_H\n  return dlclose (handle);\n#elif __MINGW32__\n  return !((int) FreeLibrary (handle));\n#endif\n}\n\nstatic void\ndo_dlclose_cleanup (void *handle)\n{\n  gdb_dlclose (handle);\n}\n\nstruct cleanup *\nmake_cleanup_dlclose (void *handle)\n{\n  return make_cleanup (do_dlclose_cleanup, handle);\n}\n\nint\nis_dl_available (void)\n{\n  return 1;\n}\n\n#endif /* NO_SHARED_LIB */\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/ia64-libunwind-tdep.c": "/* Frame unwinder for ia64 frames using the libunwind library.\n\n   Copyright (C) 2003-2015 Free Software Foundation, Inc.\n\n   Written by Jeff Johnston, contributed by Red Hat Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"defs.h\"\n\n#include \"inferior.h\"\n#include \"frame.h\"\n#include \"frame-base.h\"\n#include \"frame-unwind.h\"\n#include \"gdbcore.h\"\n#include \"gdbtypes.h\"\n#include \"symtab.h\"\n#include \"objfiles.h\"\n#include \"regcache.h\"\n\n#include <dlfcn.h>\n\n#include \"ia64-libunwind-tdep.h\"\n\n#include \"complaints.h\"\n\n/* IA-64 is the only target that currently uses ia64-libunwind-tdep.\n   Note how UNW_TARGET, UNW_OBJ, etc. are compile time constants below.\n   Those come from libunwind's headers, and are target dependent.\n   Also, some of libunwind's typedefs are target dependent, as e.g.,\n   unw_word_t.  If some other target wants to use this, we will need\n   to do some abstracting in order to make it possible to select which\n   libunwind we're talking to at runtime (and have one per arch).  */\n\n/* The following two macros are normally defined in <endian.h>.\n   But systems such as ia64-hpux do not provide such header, so\n   we just define them here if not already defined.  */\n#ifndef __LITTLE_ENDIAN\n#define __LITTLE_ENDIAN 1234\n#endif\n#ifndef __BIG_ENDIAN\n#define __BIG_ENDIAN    4321\n#endif\n\nstatic int libunwind_initialized;\nstatic struct gdbarch_data *libunwind_descr_handle;\n\n/* Required function pointers from libunwind.  */\nstatic int (*unw_get_reg_p) (unw_cursor_t *, unw_regnum_t, unw_word_t *);\nstatic int (*unw_get_fpreg_p) (unw_cursor_t *, unw_regnum_t, unw_fpreg_t *);\nstatic int (*unw_get_saveloc_p) (unw_cursor_t *, unw_regnum_t,\n\t\t\t\t unw_save_loc_t *);\nstatic int (*unw_is_signal_frame_p) (unw_cursor_t *);\nstatic int (*unw_step_p) (unw_cursor_t *);\nstatic int (*unw_init_remote_p) (unw_cursor_t *, unw_addr_space_t, void *);\nstatic unw_addr_space_t (*unw_create_addr_space_p) (unw_accessors_t *, int);\nstatic void (*unw_destroy_addr_space_p) (unw_addr_space_t);\nstatic int (*unw_search_unwind_table_p) (unw_addr_space_t, unw_word_t,\n\t\t\t\t\t unw_dyn_info_t *,\n\t\t\t\t\t unw_proc_info_t *, int, void *);\nstatic unw_word_t (*unw_find_dyn_list_p) (unw_addr_space_t, unw_dyn_info_t *,\n\t\t\t\t\t  void *);\n\n\nstruct libunwind_frame_cache\n{\n  CORE_ADDR base;\n  CORE_ADDR func_addr;\n  unw_cursor_t cursor;\n  unw_addr_space_t as;\n};\n\n/* We need to qualify the function names with a platform-specific prefix\n   to match the names used by the libunwind library.  The UNW_OBJ macro is\n   provided by the libunwind.h header file.  */\n#define STRINGIFY2(name)\t#name\n#define STRINGIFY(name)\t\tSTRINGIFY2(name)\n\n#ifndef LIBUNWIND_SO\n/* Use the stable ABI major version number.  `libunwind-ia64.so' is a link time\n   only library, not a runtime one.  */\n#define LIBUNWIND_SO \"libunwind-\" STRINGIFY(UNW_TARGET) \".so.8\"\n\n/* Provide also compatibility with older .so.  The two APIs are compatible, .8\n   is only extended a bit, GDB does not use the extended API at all.  */\n#define LIBUNWIND_SO_7 \"libunwind-\" STRINGIFY(UNW_TARGET) \".so.7\"\n#endif\n\nstatic char *get_reg_name = STRINGIFY(UNW_OBJ(get_reg));\nstatic char *get_fpreg_name = STRINGIFY(UNW_OBJ(get_fpreg));\nstatic char *get_saveloc_name = STRINGIFY(UNW_OBJ(get_save_loc));\nstatic char *is_signal_frame_name = STRINGIFY(UNW_OBJ(is_signal_frame));\nstatic char *step_name = STRINGIFY(UNW_OBJ(step));\nstatic char *init_remote_name = STRINGIFY(UNW_OBJ(init_remote));\nstatic char *create_addr_space_name = STRINGIFY(UNW_OBJ(create_addr_space));\nstatic char *destroy_addr_space_name = STRINGIFY(UNW_OBJ(destroy_addr_space));\nstatic char *search_unwind_table_name\n  = STRINGIFY(UNW_OBJ(search_unwind_table));\nstatic char *find_dyn_list_name = STRINGIFY(UNW_OBJ(find_dyn_list));\n\nstatic struct libunwind_descr *\nlibunwind_descr (struct gdbarch *gdbarch)\n{\n  return gdbarch_data (gdbarch, libunwind_descr_handle);\n}\n\nstatic void *\nlibunwind_descr_init (struct gdbarch *gdbarch)\n{\n  struct libunwind_descr *descr\n    = GDBARCH_OBSTACK_ZALLOC (gdbarch, struct libunwind_descr);\n\n  return descr;\n}\n\nvoid\nlibunwind_frame_set_descr (struct gdbarch *gdbarch,\n\t\t\t   struct libunwind_descr *descr)\n{\n  struct libunwind_descr *arch_descr;\n\n  gdb_assert (gdbarch != NULL);\n\n  arch_descr = gdbarch_data (gdbarch, libunwind_descr_handle);\n\n  if (arch_descr == NULL)\n    {\n      /* First time here.  Must initialize data area.  */\n      arch_descr = libunwind_descr_init (gdbarch);\n      deprecated_set_gdbarch_data (gdbarch,\n\t\t\t\t   libunwind_descr_handle, arch_descr);\n    }\n\n  /* Copy new descriptor info into arch descriptor.  */\n  arch_descr->gdb2uw = descr->gdb2uw;\n  arch_descr->uw2gdb = descr->uw2gdb;\n  arch_descr->is_fpreg = descr->is_fpreg;\n  arch_descr->accessors = descr->accessors;\n  arch_descr->special_accessors = descr->special_accessors;\n}\n\nstatic struct libunwind_frame_cache *\nlibunwind_frame_cache (struct frame_info *this_frame, void **this_cache)\n{\n  unw_accessors_t *acc;\n  unw_addr_space_t as;\n  unw_word_t fp;\n  unw_regnum_t uw_sp_regnum;\n  struct libunwind_frame_cache *cache;\n  struct libunwind_descr *descr;\n  struct gdbarch *gdbarch = get_frame_arch (this_frame);\n  int i, ret;\n\n  if (*this_cache)\n    return *this_cache;\n\n  /* Allocate a new cache.  */\n  cache = FRAME_OBSTACK_ZALLOC (struct libunwind_frame_cache);\n\n  cache->func_addr = get_frame_func (this_frame);\n  if (cache->func_addr == 0)\n    /* This can happen when the frame corresponds to a function for which\n       there is no debugging information nor any entry in the symbol table.\n       This is probably a static function for which an entry in the symbol\n       table was not created when the objfile got linked (observed in\n       libpthread.so on ia64-hpux).\n\n       The best we can do, in that case, is use the frame PC as the function\n       address.  We don't need to give up since we still have the unwind\n       record to help us perform the unwinding.  There is also another\n       compelling to continue, because abandonning now means stopping\n       the backtrace, which can never be helpful for the user.  */\n    cache->func_addr = get_frame_pc (this_frame);\n\n  /* Get a libunwind cursor to the previous frame.\n  \n     We do this by initializing a cursor.  Libunwind treats a new cursor\n     as the top of stack and will get the current register set via the\n     libunwind register accessor.  Now, we provide the platform-specific\n     accessors and we set up the register accessor to use the frame\n     register unwinding interfaces so that we properly get the registers\n     for the current frame rather than the top.  We then use the unw_step\n     function to move the libunwind cursor back one frame.  We can later\n     use this cursor to find previous registers via the unw_get_reg\n     interface which will invoke libunwind's special logic.  */\n  descr = libunwind_descr (gdbarch);\n  acc = descr->accessors;\n  as =  unw_create_addr_space_p (acc,\n\t\t\t\t gdbarch_byte_order (gdbarch)\n\t\t\t\t == BFD_ENDIAN_BIG\n\t\t\t\t ? __BIG_ENDIAN\n\t\t\t\t : __LITTLE_ENDIAN);\n\n  unw_init_remote_p (&cache->cursor, as, this_frame);\n  if (unw_step_p (&cache->cursor) < 0)\n    {\n      unw_destroy_addr_space_p (as);\n      return NULL;\n    }\n\n  /* To get base address, get sp from previous frame.  */\n  uw_sp_regnum = descr->gdb2uw (gdbarch_sp_regnum (gdbarch));\n  ret = unw_get_reg_p (&cache->cursor, uw_sp_regnum, &fp);\n  if (ret < 0)\n    {\n      unw_destroy_addr_space_p (as);\n      error (_(\"Can't get libunwind sp register.\"));\n    }\n\n  cache->base = (CORE_ADDR)fp;\n  cache->as = as;\n\n  *this_cache = cache;\n  return cache;\n}\n\nvoid\nlibunwind_frame_dealloc_cache (struct frame_info *self, void *this_cache)\n{\n  struct libunwind_frame_cache *cache = this_cache;\n\n  if (cache->as)\n    unw_destroy_addr_space_p (cache->as);\n}\n\nunw_word_t\nlibunwind_find_dyn_list (unw_addr_space_t as, unw_dyn_info_t *di, void *arg)\n{\n  return unw_find_dyn_list_p (as, di, arg);\n}\n\n/* Verify if there is sufficient libunwind information for the frame to use\n   libunwind frame unwinding.  */\nint\nlibunwind_frame_sniffer (const struct frame_unwind *self,\n                         struct frame_info *this_frame, void **this_cache)\n{\n  unw_cursor_t cursor;\n  unw_accessors_t *acc;\n  unw_addr_space_t as;\n  struct libunwind_descr *descr;\n  struct gdbarch *gdbarch = get_frame_arch (this_frame);\n  int i, ret;\n\n  /* To test for libunwind unwind support, initialize a cursor to\n     the current frame and try to back up.  We use this same method\n     when setting up the frame cache (see libunwind_frame_cache()).\n     If libunwind returns success for this operation, it means that\n     it has found sufficient libunwind unwinding information to do so.  */\n\n  descr = libunwind_descr (gdbarch);\n  acc = descr->accessors;\n  as =  unw_create_addr_space_p (acc,\n\t\t\t\t gdbarch_byte_order (gdbarch)\n\t\t\t\t == BFD_ENDIAN_BIG\n\t\t\t\t ? __BIG_ENDIAN\n\t\t\t\t : __LITTLE_ENDIAN);\n\n  ret = unw_init_remote_p (&cursor, as, this_frame);\n\n  if (ret < 0)\n    {\n      unw_destroy_addr_space_p (as);\n      return 0;\n    }\n\n \n  /* Check to see if we have libunwind info by checking if we are in a \n     signal frame.  If it doesn't return an error, we have libunwind info\n     and can use libunwind.  */\n  ret = unw_is_signal_frame_p (&cursor);\n  unw_destroy_addr_space_p (as);\n\n  if (ret < 0)\n    return 0;\n\n  return 1;\n}\n\nvoid\nlibunwind_frame_this_id (struct frame_info *this_frame, void **this_cache,\n\t\t         struct frame_id *this_id)\n{\n  struct libunwind_frame_cache *cache =\n    libunwind_frame_cache (this_frame, this_cache);\n\n  if (cache != NULL)\n    (*this_id) = frame_id_build (cache->base, cache->func_addr);\n}\n\nstruct value *\nlibunwind_frame_prev_register (struct frame_info *this_frame,\n                               void **this_cache, int regnum)\n{\n  struct libunwind_frame_cache *cache =\n    libunwind_frame_cache (this_frame, this_cache);\n  struct gdbarch *gdbarch = get_frame_arch (this_frame);\n\n  void *ptr;\n  unw_cursor_t *c;\n  unw_save_loc_t sl;\n  int i, ret;\n  unw_word_t intval;\n  unw_fpreg_t fpval;\n  unw_regnum_t uw_regnum;\n  struct libunwind_descr *descr;\n  struct value *val = NULL;\n\n  if (cache == NULL)\n    return frame_unwind_got_constant (this_frame, regnum, 0);\n  \n  /* Convert from gdb register number to libunwind register number.  */\n  descr = libunwind_descr (get_frame_arch (this_frame));\n  uw_regnum = descr->gdb2uw (regnum);\n\n  gdb_assert (regnum >= 0);\n\n  if (!target_has_registers)\n    error (_(\"No registers.\"));\n\n  if (uw_regnum < 0)\n    return frame_unwind_got_constant (this_frame, regnum, 0);\n\n  if (unw_get_saveloc_p (&cache->cursor, uw_regnum, &sl) < 0)\n    return frame_unwind_got_constant (this_frame, regnum, 0);\n\n  switch (sl.type)\n    {\n    case UNW_SLT_MEMORY:\n      val = frame_unwind_got_memory (this_frame, regnum, sl.u.addr);\n      break;\n\n    case UNW_SLT_REG:\n      val = frame_unwind_got_register (this_frame, regnum,\n                                       descr->uw2gdb (sl.u.regnum));\n      break;\n    case UNW_SLT_NONE:\n      {\n        /* The register is not stored at a specific memory address nor\n           inside another register.  So use libunwind to fetch the register\n           value for us, and create a constant value with the result.  */\n        if (descr->is_fpreg (uw_regnum))\n          {\n            ret = unw_get_fpreg_p (&cache->cursor, uw_regnum, &fpval);\n            if (ret < 0)\n              return frame_unwind_got_constant (this_frame, regnum, 0);\n            val = frame_unwind_got_bytes (this_frame, regnum,\n                                          (gdb_byte *) &fpval);\n          }\n        else\n          {\n            ret = unw_get_reg_p (&cache->cursor, uw_regnum, &intval);\n            if (ret < 0)\n              return frame_unwind_got_constant (this_frame, regnum, 0);\n            val = frame_unwind_got_constant (this_frame, regnum, intval);\n          }\n        break;\n      }\n    }\n\n  return val;\n} \n\n/* The following is a glue routine to call the libunwind unwind table\n   search function to get unwind information for a specified ip address.  */ \nint\nlibunwind_search_unwind_table (void *as, long ip, void *di,\n\t\t\t       void *pi, int need_unwind_info, void *args)\n{\n  return unw_search_unwind_table_p (*(unw_addr_space_t *)as, (unw_word_t )ip, \n\t\t\t\t    di, pi, need_unwind_info, args);\n}\n\n/* Verify if we are in a sigtramp frame and we can use libunwind to unwind.  */\nint\nlibunwind_sigtramp_frame_sniffer (const struct frame_unwind *self,\n                                  struct frame_info *this_frame,\n                                  void **this_cache)\n{\n  unw_cursor_t cursor;\n  unw_accessors_t *acc;\n  unw_addr_space_t as;\n  struct libunwind_descr *descr;\n  struct gdbarch *gdbarch = get_frame_arch (this_frame);\n  int i, ret;\n\n  /* To test for libunwind unwind support, initialize a cursor to the\n     current frame and try to back up.  We use this same method when\n     setting up the frame cache (see libunwind_frame_cache()).  If\n     libunwind returns success for this operation, it means that it\n     has found sufficient libunwind unwinding information to do\n     so.  */\n\n  descr = libunwind_descr (gdbarch);\n  acc = descr->accessors;\n  as =  unw_create_addr_space_p (acc,\n\t\t\t\t gdbarch_byte_order (gdbarch)\n\t\t\t\t == BFD_ENDIAN_BIG\n\t\t\t\t ? __BIG_ENDIAN\n\t\t\t\t : __LITTLE_ENDIAN);\n\n  ret = unw_init_remote_p (&cursor, as, this_frame);\n\n  if (ret < 0)\n    {\n      unw_destroy_addr_space_p (as);\n      return 0;\n    }\n\n  /* Check to see if we are in a signal frame.  */\n  ret = unw_is_signal_frame_p (&cursor);\n  unw_destroy_addr_space_p (as);\n  if (ret > 0)\n    return 1;\n\n  return 0;\n}\n\n/* The following routine is for accessing special registers of the top frame.\n   A special set of accessors must be given that work without frame info.\n   This is used by ia64 to access the rse registers r32-r127.  While they\n   are usually located at BOF, this is not always true and only the libunwind\n   info can decipher where they actually are.  */\nint\nlibunwind_get_reg_special (struct gdbarch *gdbarch, struct regcache *regcache,\n\t\t\t   int regnum, void *buf)\n{\n  unw_cursor_t cursor;\n  unw_accessors_t *acc;\n  unw_addr_space_t as;\n  struct libunwind_descr *descr;\n  int ret;\n  unw_regnum_t uw_regnum;\n  unw_word_t intval;\n  unw_fpreg_t fpval;\n  void *ptr;\n\n\n  descr = libunwind_descr (gdbarch);\n  acc = descr->special_accessors;\n  as =  unw_create_addr_space_p (acc,\n\t\t\t\t gdbarch_byte_order (gdbarch)\n\t\t\t\t == BFD_ENDIAN_BIG\n\t\t\t\t ? __BIG_ENDIAN\n\t\t\t\t : __LITTLE_ENDIAN);\n\n  ret = unw_init_remote_p (&cursor, as, regcache);\n  if (ret < 0)\n    {\n      unw_destroy_addr_space_p (as);\n      return -1;\n    }\n\n  uw_regnum = descr->gdb2uw (regnum);\n\n  if (descr->is_fpreg (uw_regnum))\n    {\n      ret = unw_get_fpreg_p (&cursor, uw_regnum, &fpval);\n      ptr = &fpval;\n    }\n  else\n    {\n      ret = unw_get_reg_p (&cursor, uw_regnum, &intval);\n      ptr = &intval;\n    }\n\n  unw_destroy_addr_space_p (as);\n\n  if (ret < 0)\n    return -1;\n\n  if (buf)\n    memcpy (buf, ptr, register_size (gdbarch, regnum));\n\n  return 0;\n}\n  \nstatic int\nlibunwind_load (void)\n{\n  void *handle;\n  char *so_error = NULL;\n\n  handle = dlopen (LIBUNWIND_SO, RTLD_NOW);\n  if (handle == NULL)\n    {\n      so_error = xstrdup (dlerror ());\n#ifdef LIBUNWIND_SO_7\n      handle = dlopen (LIBUNWIND_SO_7, RTLD_NOW);\n#endif /* LIBUNWIND_SO_7 */\n    }\n  if (handle == NULL)\n    {\n      fprintf_unfiltered (gdb_stderr, _(\"[GDB failed to load %s: %s]\\n\"),\n\t\t\t  LIBUNWIND_SO, so_error);\n#ifdef LIBUNWIND_SO_7\n      fprintf_unfiltered (gdb_stderr, _(\"[GDB failed to load %s: %s]\\n\"),\n\t\t\t  LIBUNWIND_SO_7, dlerror ());\n#endif /* LIBUNWIND_SO_7 */\n    }\n  xfree (so_error);\n  if (handle == NULL)\n    return 0;\n\n  /* Initialize pointers to the dynamic library functions we will use.  */\n\n  unw_get_reg_p = dlsym (handle, get_reg_name);\n  if (unw_get_reg_p == NULL)\n    return 0;\n\n  unw_get_fpreg_p = dlsym (handle, get_fpreg_name);\n  if (unw_get_fpreg_p == NULL)\n    return 0;\n\n  unw_get_saveloc_p = dlsym (handle, get_saveloc_name);\n  if (unw_get_saveloc_p == NULL)\n    return 0;\n\n  unw_is_signal_frame_p = dlsym (handle, is_signal_frame_name);\n  if (unw_is_signal_frame_p == NULL)\n    return 0;\n\n  unw_step_p = dlsym (handle, step_name);\n  if (unw_step_p == NULL)\n    return 0;\n\n  unw_init_remote_p = dlsym (handle, init_remote_name);\n  if (unw_init_remote_p == NULL)\n    return 0;\n\n  unw_create_addr_space_p = dlsym (handle, create_addr_space_name);\n  if (unw_create_addr_space_p == NULL)\n    return 0;\n\n  unw_destroy_addr_space_p = dlsym (handle, destroy_addr_space_name);\n  if (unw_destroy_addr_space_p == NULL)\n    return 0;\n\n  unw_search_unwind_table_p = dlsym (handle, search_unwind_table_name);\n  if (unw_search_unwind_table_p == NULL)\n    return 0;\n\n  unw_find_dyn_list_p = dlsym (handle, find_dyn_list_name);\n  if (unw_find_dyn_list_p == NULL)\n    return 0;\n   \n  return 1;\n}\n\nint\nlibunwind_is_initialized (void)\n{\n  return libunwind_initialized;\n}\n\n/* Provide a prototype to silence -Wmissing-prototypes.  */\nvoid _initialize_libunwind_frame (void);\n\nvoid\n_initialize_libunwind_frame (void)\n{\n  libunwind_descr_handle\n    = gdbarch_data_register_post_init (libunwind_descr_init);\n\n  libunwind_initialized = libunwind_load ();\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/compile/compile-c-support.c": "/* C language support for compilation.\n\n   Copyright (C) 2014-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"defs.h\"\n#include \"compile-internal.h\"\n#include \"compile.h\"\n#include \"gdb-dlfcn.h\"\n#include \"c-lang.h\"\n#include \"macrotab.h\"\n#include \"macroscope.h\"\n#include \"regcache.h\"\n\n/* See compile-internal.h.  */\n\nconst char *\nc_get_mode_for_size (int size)\n{\n  const char *mode = NULL;\n\n  switch (size)\n    {\n    case 1:\n      mode = \"QI\";\n      break;\n    case 2:\n      mode = \"HI\";\n      break;\n    case 4:\n      mode = \"SI\";\n      break;\n    case 8:\n      mode = \"DI\";\n      break;\n    default:\n      internal_error (__FILE__, __LINE__, _(\"Invalid GCC mode size %d.\"), size);\n    }\n\n  return mode;\n}\n\n/* See compile-internal.h.  */\n\nchar *\nc_get_range_decl_name (const struct dynamic_prop *prop)\n{\n  return xstrprintf (\"__gdb_prop_%s\", host_address_to_string (prop));\n}\n\n\f\n\n#define STR(x) #x\n#define STRINGIFY(x) STR(x)\n\n/* Helper function for c_get_compile_context.  Open the GCC front-end\n   shared library and return the symbol specified by the current\n   GCC_C_FE_CONTEXT.  */\n\nstatic gcc_c_fe_context_function *\nload_libcc (void)\n{\n  void *handle;\n  gcc_c_fe_context_function *func;\n\n   /* gdb_dlopen will call error () on an error, so no need to check\n      value.  */\n  handle = gdb_dlopen (STRINGIFY (GCC_C_FE_LIBCC));\n  func = (gcc_c_fe_context_function *) gdb_dlsym (handle,\n\t\t\t\t\t\t  STRINGIFY (GCC_C_FE_CONTEXT));\n\n  if (func == NULL)\n    error (_(\"could not find symbol %s in library %s\"),\n\t   STRINGIFY (GCC_C_FE_CONTEXT),\n\t   STRINGIFY (GCC_C_FE_LIBCC));\n  return func;\n}\n\n/* Return the compile instance associated with the current context.\n   This function calls the symbol returned from the load_libcc\n   function.  This will provide the gcc_c_context.  */\n\nstruct compile_instance *\nc_get_compile_context (void)\n{\n  static gcc_c_fe_context_function *func;\n\n  struct gcc_c_context *context;\n\n  if (func == NULL)\n    {\n      func = load_libcc ();\n      gdb_assert (func != NULL);\n    }\n\n  context = (*func) (GCC_FE_VERSION_0, GCC_C_FE_VERSION_0);\n  if (context == NULL)\n    error (_(\"The loaded version of GCC does not support the required version \"\n\t     \"of the API.\"));\n\n  return new_compile_instance (context);\n}\n\n\f\n\n/* Write one macro definition.  */\n\nstatic void\nprint_one_macro (const char *name, const struct macro_definition *macro,\n\t\t struct macro_source_file *source, int line,\n\t\t void *user_data)\n{\n  struct ui_file *file = user_data;\n\n  /* Don't print command-line defines.  They will be supplied another\n     way.  */\n  if (line == 0)\n    return;\n\n  fprintf_filtered (file, \"#define %s\", name);\n\n  if (macro->kind == macro_function_like)\n    {\n      int i;\n\n      fputs_filtered (\"(\", file);\n      for (i = 0; i < macro->argc; i++)\n\t{\n\t  fputs_filtered (macro->argv[i], file);\n\t  if (i + 1 < macro->argc)\n\t    fputs_filtered (\", \", file);\n\t}\n      fputs_filtered (\")\", file);\n    }\n\n  fprintf_filtered (file, \" %s\\n\", macro->replacement);\n}\n\n/* Write macro definitions at PC to FILE.  */\n\nstatic void\nwrite_macro_definitions (const struct block *block, CORE_ADDR pc,\n\t\t\t struct ui_file *file)\n{\n  struct macro_scope *scope;\n\n  if (block != NULL)\n    scope = sal_macro_scope (find_pc_line (pc, 0));\n  else\n    scope = default_macro_scope ();\n  if (scope == NULL)\n    scope = user_macro_scope ();\n\n  if (scope != NULL && scope->file != NULL && scope->file->table != NULL)\n    macro_for_each_in_scope (scope->file, scope->line, print_one_macro, file);\n}\n\n/* Helper function to construct a header scope for a block of code.\n   Takes a scope argument which selects the correct header to\n   insert into BUF.  */\n\nstatic void\nadd_code_header (enum compile_i_scope_types type, struct ui_file *buf)\n{\n  switch (type)\n    {\n    case COMPILE_I_SIMPLE_SCOPE:\n      fputs_unfiltered (\"void \"\n\t\t\tGCC_FE_WRAPPER_FUNCTION\n\t\t\t\" (struct \"\n\t\t\tCOMPILE_I_SIMPLE_REGISTER_STRUCT_TAG\n\t\t\t\" *\"\n\t\t\tCOMPILE_I_SIMPLE_REGISTER_ARG_NAME\n\t\t\t\") {\\n\",\n\t\t\tbuf);\n      break;\n    case COMPILE_I_RAW_SCOPE:\n      break;\n    default:\n      gdb_assert_not_reached (_(\"Unknown compiler scope reached.\"));\n    }\n}\n\n/* Helper function to construct a footer scope for a block of code.\n   Takes a scope argument which selects the correct footer to\n   insert into BUF.  */\n\nstatic void\nadd_code_footer (enum compile_i_scope_types type, struct ui_file *buf)\n{\n  switch (type)\n    {\n    case COMPILE_I_SIMPLE_SCOPE:\n      fputs_unfiltered (\"}\\n\", buf);\n      break;\n    case COMPILE_I_RAW_SCOPE:\n      break;\n    default:\n      gdb_assert_not_reached (_(\"Unknown compiler scope reached.\"));\n    }\n}\n\n/* Generate a structure holding all the registers used by the function\n   we're generating.  */\n\nstatic void\ngenerate_register_struct (struct ui_file *stream, struct gdbarch *gdbarch,\n\t\t\t  const unsigned char *registers_used)\n{\n  int i;\n  int seen = 0;\n\n  fputs_unfiltered (\"struct \" COMPILE_I_SIMPLE_REGISTER_STRUCT_TAG \" {\\n\",\n\t\t    stream);\n\n  if (registers_used != NULL)\n    for (i = 0; i < gdbarch_num_regs (gdbarch); ++i)\n      {\n\tif (registers_used[i])\n\t  {\n\t    struct type *regtype = check_typedef (register_type (gdbarch, i));\n\t    char *regname = compile_register_name_mangled (gdbarch, i);\n\t    struct cleanup *cleanups = make_cleanup (xfree, regname);\n\n\t    seen = 1;\n\n\t    /* You might think we could use type_print here.  However,\n\t       target descriptions often use types with names like\n\t       \"int64_t\", which may not be defined in the inferior\n\t       (and in any case would not be looked up due to the\n\t       #pragma business).  So, we take a much simpler\n\t       approach: for pointer- or integer-typed registers, emit\n\t       the field in the most direct way; and for other\n\t       register types (typically flags or vectors), emit a\n\t       maximally-aligned array of the correct size.  */\n\n\t    fputs_unfiltered (\"  \", stream);\n\t    switch (TYPE_CODE (regtype))\n\t      {\n\t      case TYPE_CODE_PTR:\n\t\tfprintf_filtered (stream, \"void *%s\", regname);\n\t\tbreak;\n\n\t      case TYPE_CODE_INT:\n\t\t{\n\t\t  const char *mode\n\t\t    = c_get_mode_for_size (TYPE_LENGTH (regtype));\n\n\t\t  if (mode != NULL)\n\t\t    {\n\t\t      if (TYPE_UNSIGNED (regtype))\n\t\t\tfputs_unfiltered (\"unsigned \", stream);\n\t\t      fprintf_unfiltered (stream,\n\t\t\t\t\t  \"int %s\"\n\t\t\t\t\t  \" __attribute__ ((__mode__(__%s__)))\",\n\t\t\t\t\t  regname,\n\t\t\t\t\t  mode);\n\t\t      break;\n\t\t    }\n\t\t}\n\n\t\t/* Fall through.  */\n\n\t      default:\n\t\tfprintf_unfiltered (stream,\n\t\t\t\t    \"  unsigned char %s[%d]\"\n\t\t\t\t    \" __attribute__((__aligned__(\"\n\t\t\t\t    \"__BIGGEST_ALIGNMENT__)))\",\n\t\t\t\t    regname,\n\t\t\t\t    TYPE_LENGTH (regtype));\n\t      }\n\t    fputs_unfiltered (\";\\n\", stream);\n\n\t    do_cleanups (cleanups);\n\t  }\n      }\n\n  if (!seen)\n    fputs_unfiltered (\"  char \" COMPILE_I_SIMPLE_REGISTER_DUMMY \";\\n\",\n\t\t      stream);\n\n  fputs_unfiltered (\"};\\n\\n\", stream);\n}\n\n/* Take the source code provided by the user with the 'compile'\n   command, and compute the additional wrapping, macro, variable and\n   register operations needed.  INPUT is the source code derived from\n   the 'compile' command, GDBARCH is the architecture to use when\n   computing above, EXPR_BLOCK denotes the block relevant contextually\n   to the inferior when the expression was created, and EXPR_PC\n   indicates the value of $PC.  */\n\nchar *\nc_compute_program (struct compile_instance *inst,\n\t\t   const char *input,\n\t\t   struct gdbarch *gdbarch,\n\t\t   const struct block *expr_block,\n\t\t   CORE_ADDR expr_pc)\n{\n  struct ui_file *buf, *var_stream = NULL;\n  char *code;\n  struct cleanup *cleanup;\n  struct compile_c_instance *context = (struct compile_c_instance *) inst;\n\n  buf = mem_fileopen ();\n  cleanup = make_cleanup_ui_file_delete (buf);\n\n  write_macro_definitions (expr_block, expr_pc, buf);\n\n  /* Do not generate local variable information for \"raw\"\n     compilations.  In this case we aren't emitting our own function\n     and the user's code may only refer to globals.  */\n  if (inst->scope != COMPILE_I_RAW_SCOPE)\n    {\n      unsigned char *registers_used;\n      int i;\n\n      /* Generate the code to compute variable locations, but do it\n\t before generating the function header, so we can define the\n\t register struct before the function body.  This requires a\n\t temporary stream.  */\n      var_stream = mem_fileopen ();\n      make_cleanup_ui_file_delete (var_stream);\n      registers_used = generate_c_for_variable_locations (context,\n\t\t\t\t\t\t\t  var_stream, gdbarch,\n\t\t\t\t\t\t\t  expr_block, expr_pc);\n      make_cleanup (xfree, registers_used);\n\n      generate_register_struct (buf, gdbarch, registers_used);\n\n      fputs_unfiltered (\"typedef unsigned int\"\n\t\t\t\" __attribute__ ((__mode__(__pointer__)))\"\n\t\t\t\" __gdb_uintptr;\\n\",\n\t\t\tbuf);\n      fputs_unfiltered (\"typedef int\"\n\t\t\t\" __attribute__ ((__mode__(__pointer__)))\"\n\t\t\t\" __gdb_intptr;\\n\",\n\t\t\tbuf);\n\n      // Iterate all log2 sizes in bytes supported by c_get_mode_for_size.\n      for (i = 0; i < 4; ++i)\n\t{\n\t  const char *mode = c_get_mode_for_size (1 << i);\n\n\t  gdb_assert (mode != NULL);\n\t  fprintf_unfiltered (buf,\n\t\t\t      \"typedef int\"\n\t\t\t      \" __attribute__ ((__mode__(__%s__)))\"\n\t\t\t      \" __gdb_int_%s;\\n\",\n\t\t\t      mode, mode);\n\t}\n    }\n\n  add_code_header (inst->scope, buf);\n\n  if (inst->scope == COMPILE_I_SIMPLE_SCOPE)\n    {\n      ui_file_put (var_stream, ui_file_write_for_put, buf);\n      fputs_unfiltered (\"#pragma GCC user_expression\\n\", buf);\n    }\n\n  /* The user expression has to be in its own scope, so that \"extern\"\n     works properly.  Otherwise gcc thinks that the \"extern\"\n     declaration is in the same scope as the declaration provided by\n     gdb.  */\n  if (inst->scope != COMPILE_I_RAW_SCOPE)\n    fputs_unfiltered (\"{\\n\", buf);\n\n  fputs_unfiltered (\"#line 1 \\\"gdb command line\\\"\\n\", buf);\n  fputs_unfiltered (input, buf);\n  fputs_unfiltered (\"\\n\", buf);\n\n  /* For larger user expressions the automatic semicolons may be\n     confusing.  */\n  if (strchr (input, '\\n') == NULL)\n    fputs_unfiltered (\";\\n\", buf);\n\n  if (inst->scope != COMPILE_I_RAW_SCOPE)\n    fputs_unfiltered (\"}\\n\", buf);\n\n  add_code_footer (inst->scope, buf);\n  code = ui_file_xstrdup (buf, NULL);\n  do_cleanups (cleanup);\n  return code;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/gdbserver/thread-db.c": "/* Thread management interface, for the remote server for GDB.\n   Copyright (C) 2002-2015 Free Software Foundation, Inc.\n\n   Contributed by MontaVista Software.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"server.h\"\n\n#include \"linux-low.h\"\n\nextern int debug_threads;\n\nstatic int thread_db_use_events;\n\n#include \"gdb_proc_service.h\"\n#include \"nat/gdb_thread_db.h\"\n#include \"gdb_vecs.h\"\n\n#ifndef USE_LIBTHREAD_DB_DIRECTLY\n#include <dlfcn.h>\n#endif\n\n#include <stdint.h>\n#include <limits.h>\n#include <ctype.h>\n\nstruct thread_db\n{\n  /* Structure that identifies the child process for the\n     <proc_service.h> interface.  */\n  struct ps_prochandle proc_handle;\n\n  /* Connection to the libthread_db library.  */\n  td_thragent_t *thread_agent;\n\n  /* If this flag has been set, we've already asked GDB for all\n     symbols we might need; assume symbol cache misses are\n     failures.  */\n  int all_symbols_looked_up;\n\n#ifndef USE_LIBTHREAD_DB_DIRECTLY\n  /* Handle of the libthread_db from dlopen.  */\n  void *handle;\n#endif\n\n  /* Thread creation event breakpoint.  The code at this location in\n     the child process will be called by the pthread library whenever\n     a new thread is created.  By setting a special breakpoint at this\n     location, GDB can detect when a new thread is created.  We obtain\n     this location via the td_ta_event_addr call.  Note that if the\n     running kernel supports tracing clones, then we don't need to use\n     (and in fact don't use) this magic thread event breakpoint to\n     learn about threads.  */\n  struct breakpoint *td_create_bp;\n\n  /* Addresses of libthread_db functions.  */\n  td_err_e (*td_ta_new_p) (struct ps_prochandle * ps, td_thragent_t **ta);\n  td_err_e (*td_ta_event_getmsg_p) (const td_thragent_t *ta,\n\t\t\t\t    td_event_msg_t *msg);\n  td_err_e (*td_ta_set_event_p) (const td_thragent_t *ta,\n\t\t\t\t td_thr_events_t *event);\n  td_err_e (*td_ta_event_addr_p) (const td_thragent_t *ta,\n\t\t\t\t  td_event_e event, td_notify_t *ptr);\n  td_err_e (*td_ta_map_lwp2thr_p) (const td_thragent_t *ta, lwpid_t lwpid,\n\t\t\t\t   td_thrhandle_t *th);\n  td_err_e (*td_thr_get_info_p) (const td_thrhandle_t *th,\n\t\t\t\t td_thrinfo_t *infop);\n  td_err_e (*td_thr_event_enable_p) (const td_thrhandle_t *th, int event);\n  td_err_e (*td_ta_thr_iter_p) (const td_thragent_t *ta,\n\t\t\t\ttd_thr_iter_f *callback, void *cbdata_p,\n\t\t\t\ttd_thr_state_e state, int ti_pri,\n\t\t\t\tsigset_t *ti_sigmask_p,\n\t\t\t\tunsigned int ti_user_flags);\n  td_err_e (*td_thr_tls_get_addr_p) (const td_thrhandle_t *th,\n\t\t\t\t     psaddr_t map_address,\n\t\t\t\t     size_t offset, psaddr_t *address);\n  td_err_e (*td_thr_tlsbase_p) (const td_thrhandle_t *th,\n\t\t\t\tunsigned long int modid,\n\t\t\t\tpsaddr_t *base);\n  const char ** (*td_symbol_list_p) (void);\n};\n\nstatic char *libthread_db_search_path;\n\nstatic int find_one_thread (ptid_t);\nstatic int find_new_threads_callback (const td_thrhandle_t *th_p, void *data);\n\nstatic const char *\nthread_db_err_str (td_err_e err)\n{\n  static char buf[64];\n\n  switch (err)\n    {\n    case TD_OK:\n      return \"generic 'call succeeded'\";\n    case TD_ERR:\n      return \"generic error\";\n    case TD_NOTHR:\n      return \"no thread to satisfy query\";\n    case TD_NOSV:\n      return \"no sync handle to satisfy query\";\n    case TD_NOLWP:\n      return \"no LWP to satisfy query\";\n    case TD_BADPH:\n      return \"invalid process handle\";\n    case TD_BADTH:\n      return \"invalid thread handle\";\n    case TD_BADSH:\n      return \"invalid synchronization handle\";\n    case TD_BADTA:\n      return \"invalid thread agent\";\n    case TD_BADKEY:\n      return \"invalid key\";\n    case TD_NOMSG:\n      return \"no event message for getmsg\";\n    case TD_NOFPREGS:\n      return \"FPU register set not available\";\n    case TD_NOLIBTHREAD:\n      return \"application not linked with libthread\";\n    case TD_NOEVENT:\n      return \"requested event is not supported\";\n    case TD_NOCAPAB:\n      return \"capability not available\";\n    case TD_DBERR:\n      return \"debugger service failed\";\n    case TD_NOAPLIC:\n      return \"operation not applicable to\";\n    case TD_NOTSD:\n      return \"no thread-specific data for this thread\";\n    case TD_MALLOC:\n      return \"malloc failed\";\n    case TD_PARTIALREG:\n      return \"only part of register set was written/read\";\n    case TD_NOXREGS:\n      return \"X register set not available for this thread\";\n#ifdef HAVE_TD_VERSION\n    case TD_VERSION:\n      return \"version mismatch between libthread_db and libpthread\";\n#endif\n    default:\n      xsnprintf (buf, sizeof (buf), \"unknown thread_db error '%d'\", err);\n      return buf;\n    }\n}\n\n#if 0\nstatic char *\nthread_db_state_str (td_thr_state_e state)\n{\n  static char buf[64];\n\n  switch (state)\n    {\n    case TD_THR_STOPPED:\n      return \"stopped by debugger\";\n    case TD_THR_RUN:\n      return \"runnable\";\n    case TD_THR_ACTIVE:\n      return \"active\";\n    case TD_THR_ZOMBIE:\n      return \"zombie\";\n    case TD_THR_SLEEP:\n      return \"sleeping\";\n    case TD_THR_STOPPED_ASLEEP:\n      return \"stopped by debugger AND blocked\";\n    default:\n      xsnprintf (buf, sizeof (buf), \"unknown thread_db state %d\", state);\n      return buf;\n    }\n}\n#endif\n\nstatic int\nthread_db_create_event (CORE_ADDR where)\n{\n  td_event_msg_t msg;\n  td_err_e err;\n  struct lwp_info *lwp;\n  struct thread_db *thread_db = current_process ()->private->thread_db;\n\n  gdb_assert (thread_db->td_ta_event_getmsg_p != NULL);\n\n  if (debug_threads)\n    debug_printf (\"Thread creation event.\\n\");\n\n  /* FIXME: This assumes we don't get another event.\n     In the LinuxThreads implementation, this is safe,\n     because all events come from the manager thread\n     (except for its own creation, of course).  */\n  err = thread_db->td_ta_event_getmsg_p (thread_db->thread_agent, &msg);\n  if (err != TD_OK)\n    fprintf (stderr, \"thread getmsg err: %s\\n\",\n\t     thread_db_err_str (err));\n\n  /* If we do not know about the main thread yet, this would be a good time to\n     find it.  We need to do this to pick up the main thread before any newly\n     created threads.  */\n  lwp = get_thread_lwp (current_thread);\n  if (lwp->thread_known == 0)\n    find_one_thread (current_thread->entry.id);\n\n  /* msg.event == TD_EVENT_CREATE */\n\n  find_new_threads_callback (msg.th_p, NULL);\n\n  return 0;\n}\n\nstatic int\nthread_db_enable_reporting (void)\n{\n  td_thr_events_t events;\n  td_notify_t notify;\n  td_err_e err;\n  struct thread_db *thread_db = current_process ()->private->thread_db;\n\n  if (thread_db->td_ta_set_event_p == NULL\n      || thread_db->td_ta_event_addr_p == NULL\n      || thread_db->td_ta_event_getmsg_p == NULL)\n    /* This libthread_db is missing required support.  */\n    return 0;\n\n  /* Set the process wide mask saying which events we're interested in.  */\n  td_event_emptyset (&events);\n  td_event_addset (&events, TD_CREATE);\n\n  err = thread_db->td_ta_set_event_p (thread_db->thread_agent, &events);\n  if (err != TD_OK)\n    {\n      warning (\"Unable to set global thread event mask: %s\",\n\t       thread_db_err_str (err));\n      return 0;\n    }\n\n  /* Get address for thread creation breakpoint.  */\n  err = thread_db->td_ta_event_addr_p (thread_db->thread_agent, TD_CREATE,\n\t\t\t\t       &notify);\n  if (err != TD_OK)\n    {\n      warning (\"Unable to get location for thread creation breakpoint: %s\",\n\t       thread_db_err_str (err));\n      return 0;\n    }\n  thread_db->td_create_bp\n    = set_breakpoint_at ((CORE_ADDR) (unsigned long) notify.u.bptaddr,\n\t\t\t thread_db_create_event);\n\n  return 1;\n}\n\nstatic int\nfind_one_thread (ptid_t ptid)\n{\n  td_thrhandle_t th;\n  td_thrinfo_t ti;\n  td_err_e err;\n  struct thread_info *inferior;\n  struct lwp_info *lwp;\n  struct thread_db *thread_db = current_process ()->private->thread_db;\n  int lwpid = ptid_get_lwp (ptid);\n\n  inferior = (struct thread_info *) find_inferior_id (&all_threads, ptid);\n  lwp = get_thread_lwp (inferior);\n  if (lwp->thread_known)\n    return 1;\n\n  /* Get information about this thread.  */\n  err = thread_db->td_ta_map_lwp2thr_p (thread_db->thread_agent, lwpid, &th);\n  if (err != TD_OK)\n    error (\"Cannot get thread handle for LWP %d: %s\",\n\t   lwpid, thread_db_err_str (err));\n\n  err = thread_db->td_thr_get_info_p (&th, &ti);\n  if (err != TD_OK)\n    error (\"Cannot get thread info for LWP %d: %s\",\n\t   lwpid, thread_db_err_str (err));\n\n  if (debug_threads)\n    debug_printf (\"Found thread %ld (LWP %d)\\n\",\n\t\t  ti.ti_tid, ti.ti_lid);\n\n  if (lwpid != ti.ti_lid)\n    {\n      warning (\"PID mismatch!  Expected %ld, got %ld\",\n\t       (long) lwpid, (long) ti.ti_lid);\n      return 0;\n    }\n\n  if (thread_db_use_events)\n    {\n      err = thread_db->td_thr_event_enable_p (&th, 1);\n      if (err != TD_OK)\n\terror (\"Cannot enable thread event reporting for %d: %s\",\n\t       ti.ti_lid, thread_db_err_str (err));\n    }\n\n  /* If the new thread ID is zero, a final thread ID will be available\n     later.  Do not enable thread debugging yet.  */\n  if (ti.ti_tid == 0)\n    return 0;\n\n  lwp->thread_known = 1;\n  lwp->th = th;\n\n  return 1;\n}\n\n/* Attach a thread.  Return true on success.  */\n\nstatic int\nattach_thread (const td_thrhandle_t *th_p, td_thrinfo_t *ti_p)\n{\n  struct process_info *proc = current_process ();\n  int pid = pid_of (proc);\n  ptid_t ptid = ptid_build (pid, ti_p->ti_lid, 0);\n  struct lwp_info *lwp;\n  int err;\n\n  if (debug_threads)\n    debug_printf (\"Attaching to thread %ld (LWP %d)\\n\",\n\t\t  ti_p->ti_tid, ti_p->ti_lid);\n  err = linux_attach_lwp (ptid);\n  if (err != 0)\n    {\n      warning (\"Could not attach to thread %ld (LWP %d): %s\\n\",\n\t       ti_p->ti_tid, ti_p->ti_lid,\n\t       linux_ptrace_attach_fail_reason_string (ptid, err));\n      return 0;\n    }\n\n  lwp = find_lwp_pid (ptid);\n  gdb_assert (lwp != NULL);\n  lwp->thread_known = 1;\n  lwp->th = *th_p;\n\n  if (thread_db_use_events)\n    {\n      td_err_e err;\n      struct thread_db *thread_db = proc->private->thread_db;\n\n      err = thread_db->td_thr_event_enable_p (th_p, 1);\n      if (err != TD_OK)\n\terror (\"Cannot enable thread event reporting for %d: %s\",\n\t       ti_p->ti_lid, thread_db_err_str (err));\n    }\n\n  return 1;\n}\n\n/* Attach thread if we haven't seen it yet.\n   Increment *COUNTER if we have attached a new thread.\n   Return false on failure.  */\n\nstatic int\nmaybe_attach_thread (const td_thrhandle_t *th_p, td_thrinfo_t *ti_p,\n\t\t     int *counter)\n{\n  struct lwp_info *lwp;\n\n  lwp = find_lwp_pid (pid_to_ptid (ti_p->ti_lid));\n  if (lwp != NULL)\n    return 1;\n\n  if (!attach_thread (th_p, ti_p))\n    return 0;\n\n  if (counter != NULL)\n    *counter += 1;\n\n  return 1;\n}\n\nstatic int\nfind_new_threads_callback (const td_thrhandle_t *th_p, void *data)\n{\n  td_thrinfo_t ti;\n  td_err_e err;\n  struct thread_db *thread_db = current_process ()->private->thread_db;\n\n  err = thread_db->td_thr_get_info_p (th_p, &ti);\n  if (err != TD_OK)\n    error (\"Cannot get thread info: %s\", thread_db_err_str (err));\n\n  if (ti.ti_lid == -1)\n    {\n      /* A thread with kernel thread ID -1 is either a thread that\n\t exited and was joined, or a thread that is being created but\n\t hasn't started yet, and that is reusing the tcb/stack of a\n\t thread that previously exited and was joined.  (glibc marks\n\t terminated and joined threads with kernel thread ID -1.  See\n\t glibc PR17707.  */\n      return 0;\n    }\n\n  /* Check for zombies.  */\n  if (ti.ti_state == TD_THR_UNKNOWN || ti.ti_state == TD_THR_ZOMBIE)\n    return 0;\n\n  if (!maybe_attach_thread (th_p, &ti, (int *) data))\n    {\n      /* Terminate iteration early: we might be looking at stale data in\n\t the inferior.  The thread_db_find_new_threads will retry.  */\n      return 1;\n    }\n\n  return 0;\n}\n\nstatic void\nthread_db_find_new_threads (void)\n{\n  td_err_e err;\n  ptid_t ptid = current_ptid;\n  struct thread_db *thread_db = current_process ()->private->thread_db;\n  int loop, iteration;\n\n  /* This function is only called when we first initialize thread_db.\n     First locate the initial thread.  If it is not ready for\n     debugging yet, then stop.  */\n  if (find_one_thread (ptid) == 0)\n    return;\n\n  /* Require 4 successive iterations which do not find any new threads.\n     The 4 is a heuristic: there is an inherent race here, and I have\n     seen that 2 iterations in a row are not always sufficient to\n     \"capture\" all threads.  */\n  for (loop = 0, iteration = 0; loop < 4; ++loop, ++iteration)\n    {\n      int new_thread_count = 0;\n\n      /* Iterate over all user-space threads to discover new threads.  */\n      err = thread_db->td_ta_thr_iter_p (thread_db->thread_agent,\n\t\t\t\t\t find_new_threads_callback,\n\t\t\t\t\t &new_thread_count,\n\t\t\t\t\t TD_THR_ANY_STATE,\n\t\t\t\t\t TD_THR_LOWEST_PRIORITY,\n\t\t\t\t\t TD_SIGNO_MASK, TD_THR_ANY_USER_FLAGS);\n      if (debug_threads)\n\tdebug_printf (\"Found %d threads in iteration %d.\\n\",\n\t\t      new_thread_count, iteration);\n\n      if (new_thread_count != 0)\n\t{\n\t  /* Found new threads.  Restart iteration from beginning.  */\n\t  loop = -1;\n\t}\n    }\n  if (err != TD_OK)\n    error (\"Cannot find new threads: %s\", thread_db_err_str (err));\n}\n\n/* Cache all future symbols that thread_db might request.  We can not\n   request symbols at arbitrary states in the remote protocol, only\n   when the client tells us that new symbols are available.  So when\n   we load the thread library, make sure to check the entire list.  */\n\nstatic void\nthread_db_look_up_symbols (void)\n{\n  struct thread_db *thread_db = current_process ()->private->thread_db;\n  const char **sym_list;\n  CORE_ADDR unused;\n\n  for (sym_list = thread_db->td_symbol_list_p (); *sym_list; sym_list++)\n    look_up_one_symbol (*sym_list, &unused, 1);\n\n  /* We're not interested in any other libraries loaded after this\n     point, only in symbols in libpthread.so.  */\n  thread_db->all_symbols_looked_up = 1;\n}\n\nint\nthread_db_look_up_one_symbol (const char *name, CORE_ADDR *addrp)\n{\n  struct thread_db *thread_db = current_process ()->private->thread_db;\n  int may_ask_gdb = !thread_db->all_symbols_looked_up;\n\n  /* If we've passed the call to thread_db_look_up_symbols, then\n     anything not in the cache must not exist; we're not interested\n     in any libraries loaded after that point, only in symbols in\n     libpthread.so.  It might not be an appropriate time to look\n     up a symbol, e.g. while we're trying to fetch registers.  */\n  return look_up_one_symbol (name, addrp, may_ask_gdb);\n}\n\nint\nthread_db_get_tls_address (struct thread_info *thread, CORE_ADDR offset,\n\t\t\t   CORE_ADDR load_module, CORE_ADDR *address)\n{\n  psaddr_t addr;\n  td_err_e err;\n  struct lwp_info *lwp;\n  struct thread_info *saved_thread;\n  struct process_info *proc;\n  struct thread_db *thread_db;\n\n  proc = get_thread_process (thread);\n  thread_db = proc->private->thread_db;\n\n  /* If the thread layer is not (yet) initialized, fail.  */\n  if (thread_db == NULL || !thread_db->all_symbols_looked_up)\n    return TD_ERR;\n\n  /* If td_thr_tls_get_addr is missing rather do not expect td_thr_tlsbase\n     could work.  */\n  if (thread_db->td_thr_tls_get_addr_p == NULL\n      || (load_module == 0 && thread_db->td_thr_tlsbase_p == NULL))\n    return -1;\n\n  lwp = get_thread_lwp (thread);\n  if (!lwp->thread_known)\n    find_one_thread (thread->entry.id);\n  if (!lwp->thread_known)\n    return TD_NOTHR;\n\n  saved_thread = current_thread;\n  current_thread = thread;\n\n  if (load_module != 0)\n    {\n      /* Note the cast through uintptr_t: this interface only works if\n\t a target address fits in a psaddr_t, which is a host pointer.\n\t So a 32-bit debugger can not access 64-bit TLS through this.  */\n      err = thread_db->td_thr_tls_get_addr_p (&lwp->th,\n\t\t\t\t\t     (psaddr_t) (uintptr_t) load_module,\n\t\t\t\t\t      offset, &addr);\n    }\n  else\n    {\n      /* This code path handles the case of -static -pthread executables:\n\t https://sourceware.org/ml/libc-help/2014-03/msg00024.html\n\t For older GNU libc r_debug.r_map is NULL.  For GNU libc after\n\t PR libc/16831 due to GDB PR threads/16954 LOAD_MODULE is also NULL.\n\t The constant number 1 depends on GNU __libc_setup_tls\n\t initialization of l_tls_modid to 1.  */\n      err = thread_db->td_thr_tlsbase_p (&lwp->th, 1, &addr);\n      addr = (char *) addr + offset;\n    }\n\n  current_thread = saved_thread;\n  if (err == TD_OK)\n    {\n      *address = (CORE_ADDR) (uintptr_t) addr;\n      return 0;\n    }\n  else\n    return err;\n}\n\n#ifdef USE_LIBTHREAD_DB_DIRECTLY\n\nstatic int\nthread_db_load_search (void)\n{\n  td_err_e err;\n  struct thread_db *tdb;\n  struct process_info *proc = current_process ();\n\n  gdb_assert (proc->private->thread_db == NULL);\n\n  tdb = xcalloc (1, sizeof (*tdb));\n  proc->private->thread_db = tdb;\n\n  tdb->td_ta_new_p = &td_ta_new;\n\n  /* Attempt to open a connection to the thread library.  */\n  err = tdb->td_ta_new_p (&tdb->proc_handle, &tdb->thread_agent);\n  if (err != TD_OK)\n    {\n      if (debug_threads)\n\tdebug_printf (\"td_ta_new(): %s\\n\", thread_db_err_str (err));\n      free (tdb);\n      proc->private->thread_db = NULL;\n      return 0;\n    }\n\n  tdb->td_ta_map_lwp2thr_p = &td_ta_map_lwp2thr;\n  tdb->td_thr_get_info_p = &td_thr_get_info;\n  tdb->td_ta_thr_iter_p = &td_ta_thr_iter;\n  tdb->td_symbol_list_p = &td_symbol_list;\n\n  /* This is required only when thread_db_use_events is on.  */\n  tdb->td_thr_event_enable_p = &td_thr_event_enable;\n\n  /* These are not essential.  */\n  tdb->td_ta_event_addr_p = &td_ta_event_addr;\n  tdb->td_ta_set_event_p = &td_ta_set_event;\n  tdb->td_ta_event_getmsg_p = &td_ta_event_getmsg;\n  tdb->td_thr_tls_get_addr_p = &td_thr_tls_get_addr;\n  tdb->td_thr_tlsbase_p = &td_thr_tlsbase;\n\n  return 1;\n}\n\n#else\n\nstatic int\ntry_thread_db_load_1 (void *handle)\n{\n  td_err_e err;\n  struct thread_db *tdb;\n  struct process_info *proc = current_process ();\n\n  gdb_assert (proc->private->thread_db == NULL);\n\n  tdb = xcalloc (1, sizeof (*tdb));\n  proc->private->thread_db = tdb;\n\n  tdb->handle = handle;\n\n  /* Initialize pointers to the dynamic library functions we will use.\n     Essential functions first.  */\n\n#define CHK(required, a)\t\t\t\t\t\\\n  do\t\t\t\t\t\t\t\t\\\n    {\t\t\t\t\t\t\t\t\\\n      if ((a) == NULL)\t\t\t\t\t\t\\\n\t{\t\t\t\t\t\t\t\\\n\t  if (debug_threads)\t\t\t\t\t\\\n\t    debug_printf (\"dlsym: %s\\n\", dlerror ());\t\t\\\n\t  if (required)\t\t\t\t\t\t\\\n\t    {\t\t\t\t\t\t\t\\\n\t      free (tdb);\t\t\t\t\t\\\n\t      proc->private->thread_db = NULL;\t\t\t\\\n\t      return 0;\t\t\t\t\t\t\\\n\t    }\t\t\t\t\t\t\t\\\n\t}\t\t\t\t\t\t\t\\\n    }\t\t\t\t\t\t\t\t\\\n  while (0)\n\n  CHK (1, tdb->td_ta_new_p = dlsym (handle, \"td_ta_new\"));\n\n  /* Attempt to open a connection to the thread library.  */\n  err = tdb->td_ta_new_p (&tdb->proc_handle, &tdb->thread_agent);\n  if (err != TD_OK)\n    {\n      if (debug_threads)\n\tdebug_printf (\"td_ta_new(): %s\\n\", thread_db_err_str (err));\n      free (tdb);\n      proc->private->thread_db = NULL;\n      return 0;\n    }\n\n  CHK (1, tdb->td_ta_map_lwp2thr_p = dlsym (handle, \"td_ta_map_lwp2thr\"));\n  CHK (1, tdb->td_thr_get_info_p = dlsym (handle, \"td_thr_get_info\"));\n  CHK (1, tdb->td_ta_thr_iter_p = dlsym (handle, \"td_ta_thr_iter\"));\n  CHK (1, tdb->td_symbol_list_p = dlsym (handle, \"td_symbol_list\"));\n\n  /* This is required only when thread_db_use_events is on.  */\n  CHK (thread_db_use_events,\n       tdb->td_thr_event_enable_p = dlsym (handle, \"td_thr_event_enable\"));\n\n  /* These are not essential.  */\n  CHK (0, tdb->td_ta_event_addr_p = dlsym (handle, \"td_ta_event_addr\"));\n  CHK (0, tdb->td_ta_set_event_p = dlsym (handle, \"td_ta_set_event\"));\n  CHK (0, tdb->td_ta_event_getmsg_p = dlsym (handle, \"td_ta_event_getmsg\"));\n  CHK (0, tdb->td_thr_tls_get_addr_p = dlsym (handle, \"td_thr_tls_get_addr\"));\n  CHK (0, tdb->td_thr_tlsbase_p = dlsym (handle, \"td_thr_tlsbase\"));\n\n#undef CHK\n\n  return 1;\n}\n\n#ifdef HAVE_DLADDR\n\n/* Lookup a library in which given symbol resides.\n   Note: this is looking in the GDBSERVER process, not in the inferior.\n   Returns library name, or NULL.  */\n\nstatic const char *\ndladdr_to_soname (const void *addr)\n{\n  Dl_info info;\n\n  if (dladdr (addr, &info) != 0)\n    return info.dli_fname;\n  return NULL;\n}\n\n#endif\n\nstatic int\ntry_thread_db_load (const char *library)\n{\n  void *handle;\n\n  if (debug_threads)\n    debug_printf (\"Trying host libthread_db library: %s.\\n\",\n\t\t  library);\n  handle = dlopen (library, RTLD_NOW);\n  if (handle == NULL)\n    {\n      if (debug_threads)\n\tdebug_printf (\"dlopen failed: %s.\\n\", dlerror ());\n      return 0;\n    }\n\n#ifdef HAVE_DLADDR\n  if (debug_threads && strchr (library, '/') == NULL)\n    {\n      void *td_init;\n\n      td_init = dlsym (handle, \"td_init\");\n      if (td_init != NULL)\n\t{\n\t  const char *const libpath = dladdr_to_soname (td_init);\n\n\t  if (libpath != NULL)\n\t    fprintf (stderr, \"Host %s resolved to: %s.\\n\",\n\t\t     library, libpath);\n\t}\n    }\n#endif\n\n  if (try_thread_db_load_1 (handle))\n    return 1;\n\n  /* This library \"refused\" to work on current inferior.  */\n  dlclose (handle);\n  return 0;\n}\n\n/* Handle $sdir in libthread-db-search-path.\n   Look for libthread_db in the system dirs, or wherever a plain\n   dlopen(file_without_path) will look.\n   The result is true for success.  */\n\nstatic int\ntry_thread_db_load_from_sdir (void)\n{\n  return try_thread_db_load (LIBTHREAD_DB_SO);\n}\n\n/* Try to load libthread_db from directory DIR of length DIR_LEN.\n   The result is true for success.  */\n\nstatic int\ntry_thread_db_load_from_dir (const char *dir, size_t dir_len)\n{\n  char path[PATH_MAX];\n\n  if (dir_len + 1 + strlen (LIBTHREAD_DB_SO) + 1 > sizeof (path))\n    {\n      char *cp = xmalloc (dir_len + 1);\n\n      memcpy (cp, dir, dir_len);\n      cp[dir_len] = '\\0';\n      warning (_(\"libthread-db-search-path component too long,\"\n\t\t \" ignored: %s.\"), cp);\n      free (cp);\n      return 0;\n    }\n\n  memcpy (path, dir, dir_len);\n  path[dir_len] = '/';\n  strcpy (path + dir_len + 1, LIBTHREAD_DB_SO);\n  return try_thread_db_load (path);\n}\n\n/* Search libthread_db_search_path for libthread_db which \"agrees\"\n   to work on current inferior.\n   The result is true for success.  */\n\nstatic int\nthread_db_load_search (void)\n{\n  VEC (char_ptr) *dir_vec;\n  char *this_dir;\n  int i, rc = 0;\n\n  if (libthread_db_search_path == NULL)\n    libthread_db_search_path = xstrdup (LIBTHREAD_DB_SEARCH_PATH);\n\n  dir_vec = dirnames_to_char_ptr_vec (libthread_db_search_path);\n\n  for (i = 0; VEC_iterate (char_ptr, dir_vec, i, this_dir); ++i)\n    {\n      const int pdir_len = sizeof (\"$pdir\") - 1;\n      size_t this_dir_len;\n\n      this_dir_len = strlen (this_dir);\n\n      if (strncmp (this_dir, \"$pdir\", pdir_len) == 0\n\t  && (this_dir[pdir_len] == '\\0'\n\t      || this_dir[pdir_len] == '/'))\n\t{\n\t  /* We don't maintain a list of loaded libraries so we don't know\n\t     where libpthread lives.  We *could* fetch the info, but we don't\n\t     do that yet.  Ignore it.  */\n\t}\n      else if (strcmp (this_dir, \"$sdir\") == 0)\n\t{\n\t  if (try_thread_db_load_from_sdir ())\n\t    {\n\t      rc = 1;\n\t      break;\n\t    }\n\t}\n      else\n\t{\n\t  if (try_thread_db_load_from_dir (this_dir, this_dir_len))\n\t    {\n\t      rc = 1;\n\t      break;\n\t    }\n\t}\n    }\n\n  free_char_ptr_vec (dir_vec);\n  if (debug_threads)\n    debug_printf (\"thread_db_load_search returning %d\\n\", rc);\n  return rc;\n}\n\n#endif  /* USE_LIBTHREAD_DB_DIRECTLY */\n\nint\nthread_db_init (int use_events)\n{\n  struct process_info *proc = current_process ();\n\n  /* FIXME drow/2004-10-16: This is the \"overall process ID\", which\n     GNU/Linux calls tgid, \"thread group ID\".  When we support\n     attaching to threads, the original thread may not be the correct\n     thread.  We would have to get the process ID from /proc for NPTL.\n     For LinuxThreads we could do something similar: follow the chain\n     of parent processes until we find the highest one we're attached\n     to, and use its tgid.\n\n     This isn't the only place in gdbserver that assumes that the first\n     process in the list is the thread group leader.  */\n\n  thread_db_use_events = use_events;\n\n  if (thread_db_load_search ())\n    {\n      if (use_events && thread_db_enable_reporting () == 0)\n\t{\n\t  /* Keep trying; maybe event reporting will work later.  */\n\t  thread_db_mourn (proc);\n\t  return 0;\n\t}\n      thread_db_find_new_threads ();\n      thread_db_look_up_symbols ();\n      return 1;\n    }\n\n  return 0;\n}\n\nstatic int\nany_thread_of (struct inferior_list_entry *entry, void *args)\n{\n  int *pid_p = args;\n\n  if (ptid_get_pid (entry->id) == *pid_p)\n    return 1;\n\n  return 0;\n}\n\nstatic void\nswitch_to_process (struct process_info *proc)\n{\n  int pid = pid_of (proc);\n\n  current_thread =\n    (struct thread_info *) find_inferior (&all_threads,\n\t\t\t\t\t  any_thread_of, &pid);\n}\n\n/* Disconnect from libthread_db and free resources.  */\n\nstatic void\ndisable_thread_event_reporting (struct process_info *proc)\n{\n  struct thread_db *thread_db = proc->private->thread_db;\n  if (thread_db)\n    {\n      td_err_e (*td_ta_clear_event_p) (const td_thragent_t *ta,\n\t\t\t\t       td_thr_events_t *event);\n\n#ifndef USE_LIBTHREAD_DB_DIRECTLY\n      td_ta_clear_event_p = dlsym (thread_db->handle, \"td_ta_clear_event\");\n#else\n      td_ta_clear_event_p = &td_ta_clear_event;\n#endif\n\n      if (td_ta_clear_event_p != NULL)\n\t{\n\t  struct thread_info *saved_thread = current_thread;\n\t  td_thr_events_t events;\n\n\t  switch_to_process (proc);\n\n\t  /* Set the process wide mask saying we aren't interested\n\t     in any events anymore.  */\n\t  td_event_fillset (&events);\n\t  (*td_ta_clear_event_p) (thread_db->thread_agent, &events);\n\n\t  current_thread = saved_thread;\n\t}\n    }\n}\n\nstatic void\nremove_thread_event_breakpoints (struct process_info *proc)\n{\n  struct thread_db *thread_db = proc->private->thread_db;\n\n  if (thread_db->td_create_bp != NULL)\n    {\n      struct thread_info *saved_thread = current_thread;\n\n      switch_to_process (proc);\n\n      delete_breakpoint (thread_db->td_create_bp);\n      thread_db->td_create_bp = NULL;\n\n      current_thread = saved_thread;\n    }\n}\n\nvoid\nthread_db_detach (struct process_info *proc)\n{\n  struct thread_db *thread_db = proc->private->thread_db;\n\n  if (thread_db)\n    {\n      disable_thread_event_reporting (proc);\n      remove_thread_event_breakpoints (proc);\n    }\n}\n\n/* Disconnect from libthread_db and free resources.  */\n\nvoid\nthread_db_mourn (struct process_info *proc)\n{\n  struct thread_db *thread_db = proc->private->thread_db;\n  if (thread_db)\n    {\n      td_err_e (*td_ta_delete_p) (td_thragent_t *);\n\n#ifndef USE_LIBTHREAD_DB_DIRECTLY\n      td_ta_delete_p = dlsym (thread_db->handle, \"td_ta_delete\");\n#else\n      td_ta_delete_p = &td_ta_delete;\n#endif\n\n      if (td_ta_delete_p != NULL)\n\t(*td_ta_delete_p) (thread_db->thread_agent);\n\n#ifndef USE_LIBTHREAD_DB_DIRECTLY\n      dlclose (thread_db->handle);\n#endif  /* USE_LIBTHREAD_DB_DIRECTLY  */\n\n      free (thread_db);\n      proc->private->thread_db = NULL;\n    }\n}\n\n/* Handle \"set libthread-db-search-path\" monitor command and return 1.\n   For any other command, return 0.  */\n\nint\nthread_db_handle_monitor_command (char *mon)\n{\n  const char *cmd = \"set libthread-db-search-path\";\n  size_t cmd_len = strlen (cmd);\n\n  if (strncmp (mon, cmd, cmd_len) == 0\n      && (mon[cmd_len] == '\\0'\n\t  || mon[cmd_len] == ' '))\n    {\n      const char *cp = mon + cmd_len;\n\n      if (libthread_db_search_path != NULL)\n\tfree (libthread_db_search_path);\n\n      /* Skip leading space (if any).  */\n      while (isspace (*cp))\n\t++cp;\n\n      if (*cp == '\\0')\n\tcp = LIBTHREAD_DB_SEARCH_PATH;\n      libthread_db_search_path = xstrdup (cp);\n\n      monitor_output (\"libthread-db-search-path set to `\");\n      monitor_output (libthread_db_search_path);\n      monitor_output (\"'\\n\");\n      return 1;\n    }\n\n  /* Tell server.c to perform default processing.  */\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/gdbserver/tracepoint.c": "/* Tracepoint code for remote server for GDB.\n   Copyright (C) 2009-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include \"server.h\"\n#include \"tracepoint.h\"\n#include \"gdbthread.h\"\n#include \"agent.h\"\n#include \"rsp-low.h\"\n\n#include <ctype.h>\n#include <fcntl.h>\n#include <unistd.h>\n#include <sys/time.h>\n#include <inttypes.h>\n#include <stdint.h>\n\n#include \"ax.h\"\n#include \"tdesc.h\"\n\n#define DEFAULT_TRACE_BUFFER_SIZE 5242880 /* 5*1024*1024 */\n\n/* This file is built for both GDBserver, and the in-process\n   agent (IPA), a shared library that includes a tracing agent that is\n   loaded by the inferior to support fast tracepoints.  Fast\n   tracepoints (or more accurately, jump based tracepoints) are\n   implemented by patching the tracepoint location with a jump into a\n   small trampoline function whose job is to save the register state,\n   call the in-process tracing agent, and then execute the original\n   instruction that was under the tracepoint jump (possibly adjusted,\n   if PC-relative, or some such).\n\n   The current synchronization design is pull based.  That means,\n   GDBserver does most of the work, by peeking/poking at the inferior\n   agent's memory directly for downloading tracepoint and associated\n   objects, and for uploading trace frames.  Whenever the IPA needs\n   something from GDBserver (trace buffer is full, tracing stopped for\n   some reason, etc.) the IPA calls a corresponding hook function\n   where GDBserver has placed a breakpoint.\n\n   Each of the agents has its own trace buffer.  When browsing the\n   trace frames built from slow and fast tracepoints from GDB (tfind\n   mode), there's no guarantee the user is seeing the trace frames in\n   strict chronological creation order, although, GDBserver tries to\n   keep the order relatively reasonable, by syncing the trace buffers\n   at appropriate times.\n\n*/\n\n#ifdef IN_PROCESS_AGENT\n\nstatic void trace_vdebug (const char *, ...) ATTRIBUTE_PRINTF (1, 2);\n\nstatic void\ntrace_vdebug (const char *fmt, ...)\n{\n  char buf[1024];\n  va_list ap;\n\n  va_start (ap, fmt);\n  vsprintf (buf, fmt, ap);\n  fprintf (stderr, PROG \"/tracepoint: %s\\n\", buf);\n  va_end (ap);\n}\n\n#define trace_debug_1(level, fmt, args...)\t\\\n  do {\t\t\t\t\t\t\\\n    if (level <= debug_threads)\t\t\\\n      trace_vdebug ((fmt), ##args);\t\t\\\n  } while (0)\n\n#else\n\n#define trace_debug_1(level, fmt, args...)\t\\\n  do {\t\t\t\t\t\t\\\n    if (level <= debug_threads)\t\t\t\\\n      {\t\t\t\t\t\t\\\n\tdebug_printf ((fmt), ##args);\t\t\\\n\tdebug_printf (\"\\n\");\t\t\t\\\n      }\t\t\t\t\t\t\\\n  } while (0)\n\n#endif\n\n#define trace_debug(FMT, args...)\t\t\\\n  trace_debug_1 (1, FMT, ##args)\n\n#if defined(__GNUC__)\n#  define ATTR_USED __attribute__((used))\n#  define ATTR_NOINLINE __attribute__((noinline))\n#  define ATTR_CONSTRUCTOR __attribute__ ((constructor))\n#else\n#  define ATTR_USED\n#  define ATTR_NOINLINE\n#  define ATTR_CONSTRUCTOR\n#endif\n\n/* Make sure the functions the IPA needs to export (symbols GDBserver\n   needs to query GDB about) are exported.  */\n\n#ifdef IN_PROCESS_AGENT\n# if defined _WIN32 || defined __CYGWIN__\n#   define IP_AGENT_EXPORT __declspec(dllexport) ATTR_USED\n# else\n#   if __GNUC__ >= 4\n#     define IP_AGENT_EXPORT \\\n  __attribute__ ((visibility(\"default\"))) ATTR_USED\n#   else\n#     define IP_AGENT_EXPORT ATTR_USED\n#   endif\n# endif\n#else\n#  define IP_AGENT_EXPORT\n#endif\n\n/* Prefix exported symbols, for good citizenship.  All the symbols\n   that need exporting are defined in this module.  */\n#ifdef IN_PROCESS_AGENT\n# define gdb_tp_heap_buffer gdb_agent_gdb_tp_heap_buffer\n# define gdb_jump_pad_buffer gdb_agent_gdb_jump_pad_buffer\n# define gdb_jump_pad_buffer_end gdb_agent_gdb_jump_pad_buffer_end\n# define gdb_trampoline_buffer gdb_agent_gdb_trampoline_buffer\n# define gdb_trampoline_buffer_end gdb_agent_gdb_trampoline_buffer_end\n# define gdb_trampoline_buffer_error gdb_agent_gdb_trampoline_buffer_error\n# define collecting gdb_agent_collecting\n# define gdb_collect gdb_agent_gdb_collect\n# define stop_tracing gdb_agent_stop_tracing\n# define flush_trace_buffer gdb_agent_flush_trace_buffer\n# define about_to_request_buffer_space gdb_agent_about_to_request_buffer_space\n# define trace_buffer_is_full gdb_agent_trace_buffer_is_full\n# define stopping_tracepoint gdb_agent_stopping_tracepoint\n# define expr_eval_result gdb_agent_expr_eval_result\n# define error_tracepoint gdb_agent_error_tracepoint\n# define tracepoints gdb_agent_tracepoints\n# define tracing gdb_agent_tracing\n# define trace_buffer_ctrl gdb_agent_trace_buffer_ctrl\n# define trace_buffer_ctrl_curr gdb_agent_trace_buffer_ctrl_curr\n# define trace_buffer_lo gdb_agent_trace_buffer_lo\n# define trace_buffer_hi gdb_agent_trace_buffer_hi\n# define traceframe_read_count gdb_agent_traceframe_read_count\n# define traceframe_write_count gdb_agent_traceframe_write_count\n# define traceframes_created gdb_agent_traceframes_created\n# define trace_state_variables gdb_agent_trace_state_variables\n# define get_raw_reg gdb_agent_get_raw_reg\n# define get_trace_state_variable_value \\\n  gdb_agent_get_trace_state_variable_value\n# define set_trace_state_variable_value \\\n  gdb_agent_set_trace_state_variable_value\n# define ust_loaded gdb_agent_ust_loaded\n# define helper_thread_id gdb_agent_helper_thread_id\n# define cmd_buf gdb_agent_cmd_buf\n#endif\n\n#ifndef IN_PROCESS_AGENT\n\n/* Addresses of in-process agent's symbols GDBserver cares about.  */\n\nstruct ipa_sym_addresses\n{\n  CORE_ADDR addr_gdb_tp_heap_buffer;\n  CORE_ADDR addr_gdb_jump_pad_buffer;\n  CORE_ADDR addr_gdb_jump_pad_buffer_end;\n  CORE_ADDR addr_gdb_trampoline_buffer;\n  CORE_ADDR addr_gdb_trampoline_buffer_end;\n  CORE_ADDR addr_gdb_trampoline_buffer_error;\n  CORE_ADDR addr_collecting;\n  CORE_ADDR addr_gdb_collect;\n  CORE_ADDR addr_stop_tracing;\n  CORE_ADDR addr_flush_trace_buffer;\n  CORE_ADDR addr_about_to_request_buffer_space;\n  CORE_ADDR addr_trace_buffer_is_full;\n  CORE_ADDR addr_stopping_tracepoint;\n  CORE_ADDR addr_expr_eval_result;\n  CORE_ADDR addr_error_tracepoint;\n  CORE_ADDR addr_tracepoints;\n  CORE_ADDR addr_tracing;\n  CORE_ADDR addr_trace_buffer_ctrl;\n  CORE_ADDR addr_trace_buffer_ctrl_curr;\n  CORE_ADDR addr_trace_buffer_lo;\n  CORE_ADDR addr_trace_buffer_hi;\n  CORE_ADDR addr_traceframe_read_count;\n  CORE_ADDR addr_traceframe_write_count;\n  CORE_ADDR addr_traceframes_created;\n  CORE_ADDR addr_trace_state_variables;\n  CORE_ADDR addr_get_raw_reg;\n  CORE_ADDR addr_get_trace_state_variable_value;\n  CORE_ADDR addr_set_trace_state_variable_value;\n  CORE_ADDR addr_ust_loaded;\n};\n\nstatic struct\n{\n  const char *name;\n  int offset;\n  int required;\n} symbol_list[] = {\n  IPA_SYM(gdb_tp_heap_buffer),\n  IPA_SYM(gdb_jump_pad_buffer),\n  IPA_SYM(gdb_jump_pad_buffer_end),\n  IPA_SYM(gdb_trampoline_buffer),\n  IPA_SYM(gdb_trampoline_buffer_end),\n  IPA_SYM(gdb_trampoline_buffer_error),\n  IPA_SYM(collecting),\n  IPA_SYM(gdb_collect),\n  IPA_SYM(stop_tracing),\n  IPA_SYM(flush_trace_buffer),\n  IPA_SYM(about_to_request_buffer_space),\n  IPA_SYM(trace_buffer_is_full),\n  IPA_SYM(stopping_tracepoint),\n  IPA_SYM(expr_eval_result),\n  IPA_SYM(error_tracepoint),\n  IPA_SYM(tracepoints),\n  IPA_SYM(tracing),\n  IPA_SYM(trace_buffer_ctrl),\n  IPA_SYM(trace_buffer_ctrl_curr),\n  IPA_SYM(trace_buffer_lo),\n  IPA_SYM(trace_buffer_hi),\n  IPA_SYM(traceframe_read_count),\n  IPA_SYM(traceframe_write_count),\n  IPA_SYM(traceframes_created),\n  IPA_SYM(trace_state_variables),\n  IPA_SYM(get_raw_reg),\n  IPA_SYM(get_trace_state_variable_value),\n  IPA_SYM(set_trace_state_variable_value),\n  IPA_SYM(ust_loaded),\n};\n\nstatic struct ipa_sym_addresses ipa_sym_addrs;\n\nstatic int read_inferior_integer (CORE_ADDR symaddr, int *val);\n\n/* Returns true if both the in-process agent library and the static\n   tracepoints libraries are loaded in the inferior, and agent has\n   capability on static tracepoints.  */\n\nstatic int\nin_process_agent_supports_ust (void)\n{\n  int loaded = 0;\n\n  if (!agent_loaded_p ())\n    {\n      warning (\"In-process agent not loaded\");\n      return 0;\n    }\n\n  if (agent_capability_check (AGENT_CAPA_STATIC_TRACE))\n    {\n      /* Agent understands static tracepoint, then check whether UST is in\n\t fact loaded in the inferior.  */\n      if (read_inferior_integer (ipa_sym_addrs.addr_ust_loaded, &loaded))\n\t{\n\t  warning (\"Error reading ust_loaded in lib\");\n\t  return 0;\n\t}\n\n      return loaded;\n    }\n  else\n    return 0;\n}\n\nstatic void\nwrite_e_ipa_not_loaded (char *buffer)\n{\n  sprintf (buffer,\n\t   \"E.In-process agent library not loaded in process.  \"\n\t   \"Fast and static tracepoints unavailable.\");\n}\n\n/* Write an error to BUFFER indicating that UST isn't loaded in the\n   inferior.  */\n\nstatic void\nwrite_e_ust_not_loaded (char *buffer)\n{\n#ifdef HAVE_UST\n  sprintf (buffer,\n\t   \"E.UST library not loaded in process.  \"\n\t   \"Static tracepoints unavailable.\");\n#else\n  sprintf (buffer, \"E.GDBserver was built without static tracepoints support\");\n#endif\n}\n\n/* If the in-process agent library isn't loaded in the inferior, write\n   an error to BUFFER, and return 1.  Otherwise, return 0.  */\n\nstatic int\nmaybe_write_ipa_not_loaded (char *buffer)\n{\n  if (!agent_loaded_p ())\n    {\n      write_e_ipa_not_loaded (buffer);\n      return 1;\n    }\n  return 0;\n}\n\n/* If the in-process agent library and the ust (static tracepoints)\n   library aren't loaded in the inferior, write an error to BUFFER,\n   and return 1.  Otherwise, return 0.  */\n\nstatic int\nmaybe_write_ipa_ust_not_loaded (char *buffer)\n{\n  if (!agent_loaded_p ())\n    {\n      write_e_ipa_not_loaded (buffer);\n      return 1;\n    }\n  else if (!in_process_agent_supports_ust ())\n    {\n      write_e_ust_not_loaded (buffer);\n      return 1;\n    }\n  return 0;\n}\n\n/* Cache all future symbols that the tracepoints module might request.\n   We can not request symbols at arbitrary states in the remote\n   protocol, only when the client tells us that new symbols are\n   available.  So when we load the in-process library, make sure to\n   check the entire list.  */\n\nvoid\ntracepoint_look_up_symbols (void)\n{\n  int i;\n\n  if (agent_loaded_p ())\n    return;\n\n  for (i = 0; i < sizeof (symbol_list) / sizeof (symbol_list[0]); i++)\n    {\n      CORE_ADDR *addrp =\n\t(CORE_ADDR *) ((char *) &ipa_sym_addrs + symbol_list[i].offset);\n\n      if (look_up_one_symbol (symbol_list[i].name, addrp, 1) == 0)\n\t{\n\t  if (debug_threads)\n\t    debug_printf (\"symbol `%s' not found\\n\", symbol_list[i].name);\n\t  return;\n\t}\n    }\n\n  agent_look_up_symbols (NULL);\n}\n\n#endif\n\n/* GDBserver places a breakpoint on the IPA's version (which is a nop)\n   of the \"stop_tracing\" function.  When this breakpoint is hit,\n   tracing stopped in the IPA for some reason.  E.g., due to\n   tracepoint reaching the pass count, hitting conditional expression\n   evaluation error, etc.\n\n   The IPA's trace buffer is never in circular tracing mode: instead,\n   GDBserver's is, and whenever the in-process buffer fills, it calls\n   \"flush_trace_buffer\", which triggers an internal breakpoint.\n   GDBserver reacts to this breakpoint by pulling the meanwhile\n   collected data.  Old frames discarding is always handled on the\n   GDBserver side.  */\n\n#ifdef IN_PROCESS_AGENT\nint\nread_inferior_memory (CORE_ADDR memaddr, unsigned char *myaddr, int len)\n{\n  memcpy (myaddr, (void *) (uintptr_t) memaddr, len);\n  return 0;\n}\n\n/* Call this in the functions where GDBserver places a breakpoint, so\n   that the compiler doesn't try to be clever and skip calling the\n   function at all.  This is necessary, even if we tell the compiler\n   to not inline said functions.  */\n\n#if defined(__GNUC__)\n#  define UNKNOWN_SIDE_EFFECTS() asm (\"\")\n#else\n#  define UNKNOWN_SIDE_EFFECTS() do {} while (0)\n#endif\n\nIP_AGENT_EXPORT void ATTR_USED ATTR_NOINLINE\nstop_tracing (void)\n{\n  /* GDBserver places breakpoint here.  */\n  UNKNOWN_SIDE_EFFECTS();\n}\n\nIP_AGENT_EXPORT void ATTR_USED ATTR_NOINLINE\nflush_trace_buffer (void)\n{\n  /* GDBserver places breakpoint here.  */\n  UNKNOWN_SIDE_EFFECTS();\n}\n\n#endif\n\n#ifndef IN_PROCESS_AGENT\nstatic int\ntracepoint_handler (CORE_ADDR address)\n{\n  trace_debug (\"tracepoint_handler: tracepoint at 0x%s hit\",\n\t       paddress (address));\n  return 0;\n}\n\n/* Breakpoint at \"stop_tracing\" in the inferior lib.  */\nstruct breakpoint *stop_tracing_bkpt;\nstatic int stop_tracing_handler (CORE_ADDR);\n\n/* Breakpoint at \"flush_trace_buffer\" in the inferior lib.  */\nstruct breakpoint *flush_trace_buffer_bkpt;\nstatic int flush_trace_buffer_handler (CORE_ADDR);\n\nstatic void download_trace_state_variables (void);\nstatic void upload_fast_traceframes (void);\n\nstatic int run_inferior_command (char *cmd, int len);\n\nstatic int\nread_inferior_integer (CORE_ADDR symaddr, int *val)\n{\n  return read_inferior_memory (symaddr, (unsigned char *) val,\n\t\t\t       sizeof (*val));\n}\n\nstruct tracepoint;\nstatic int tracepoint_send_agent (struct tracepoint *tpoint);\n\nstatic int\nread_inferior_uinteger (CORE_ADDR symaddr, unsigned int *val)\n{\n  return read_inferior_memory (symaddr, (unsigned char *) val,\n\t\t\t       sizeof (*val));\n}\n\nstatic int\nread_inferior_data_pointer (CORE_ADDR symaddr, CORE_ADDR *val)\n{\n  void *pval = (void *) (uintptr_t) val;\n  int ret;\n\n  ret = read_inferior_memory (symaddr, (unsigned char *) &pval, sizeof (pval));\n  *val = (uintptr_t) pval;\n  return ret;\n}\n\nstatic int\nwrite_inferior_data_pointer (CORE_ADDR symaddr, CORE_ADDR val)\n{\n  void *pval = (void *) (uintptr_t) val;\n  return write_inferior_memory (symaddr,\n\t\t\t\t(unsigned char *) &pval, sizeof (pval));\n}\n\nstatic int\nwrite_inferior_integer (CORE_ADDR symaddr, int val)\n{\n  return write_inferior_memory (symaddr, (unsigned char *) &val, sizeof (val));\n}\n\nstatic int\nwrite_inferior_uinteger (CORE_ADDR symaddr, unsigned int val)\n{\n  return write_inferior_memory (symaddr, (unsigned char *) &val, sizeof (val));\n}\n\nstatic CORE_ADDR target_malloc (ULONGEST size);\nstatic int write_inferior_data_ptr (CORE_ADDR where, CORE_ADDR ptr);\n\n#define COPY_FIELD_TO_BUF(BUF, OBJ, FIELD)\t\\\n  do {\t\t\t\t\t\t\t\\\n    memcpy (BUF, &(OBJ)->FIELD, sizeof ((OBJ)->FIELD)); \\\n    BUF += sizeof ((OBJ)->FIELD);\t\t\t\\\n  } while (0)\n\n#endif\n\n/* Operations on various types of tracepoint actions.  */\n\nstruct tracepoint_action;\n\nstruct tracepoint_action_ops\n{\n  /* Download tracepoint action ACTION to IPA.  Return the address of action\n     in IPA/inferior.  */\n  CORE_ADDR (*download) (const struct tracepoint_action *action);\n\n  /* Send ACTION to agent via command buffer started from BUFFER.  Return\n     updated head of command buffer.  */\n  char* (*send) (char *buffer, const struct tracepoint_action *action);\n};\n\n/* Base action.  Concrete actions inherit this.  */\n\nstruct tracepoint_action\n{\n#ifndef IN_PROCESS_AGENT\n  const struct tracepoint_action_ops *ops;\n#endif\n  char type;\n};\n\n/* An 'M' (collect memory) action.  */\nstruct collect_memory_action\n{\n  struct tracepoint_action base;\n\n  ULONGEST addr;\n  ULONGEST len;\n  int32_t basereg;\n};\n\n/* An 'R' (collect registers) action.  */\n\nstruct collect_registers_action\n{\n  struct tracepoint_action base;\n};\n\n/* An 'X' (evaluate expression) action.  */\n\nstruct eval_expr_action\n{\n  struct tracepoint_action base;\n\n  struct agent_expr *expr;\n};\n\n/* An 'L' (collect static trace data) action.  */\nstruct collect_static_trace_data_action\n{\n  struct tracepoint_action base;\n};\n\n#ifndef IN_PROCESS_AGENT\nstatic CORE_ADDR\nm_tracepoint_action_download (const struct tracepoint_action *action)\n{\n  int size_in_ipa = (sizeof (struct collect_memory_action)\n\t\t     - offsetof (struct tracepoint_action, type));\n  CORE_ADDR ipa_action = target_malloc (size_in_ipa);\n\n  write_inferior_memory (ipa_action, (unsigned char *) &action->type,\n\t\t\t size_in_ipa);\n\n  return ipa_action;\n}\nstatic char *\nm_tracepoint_action_send (char *buffer, const struct tracepoint_action *action)\n{\n  struct collect_memory_action *maction\n    = (struct collect_memory_action *) action;\n\n  COPY_FIELD_TO_BUF (buffer, maction, addr);\n  COPY_FIELD_TO_BUF (buffer, maction, len);\n  COPY_FIELD_TO_BUF (buffer, maction, basereg);\n\n  return buffer;\n}\n\nstatic const struct tracepoint_action_ops m_tracepoint_action_ops =\n{\n  m_tracepoint_action_download,\n  m_tracepoint_action_send,\n};\n\nstatic CORE_ADDR\nr_tracepoint_action_download (const struct tracepoint_action *action)\n{\n  int size_in_ipa = (sizeof (struct collect_registers_action)\n\t\t     - offsetof (struct tracepoint_action, type));\n  CORE_ADDR ipa_action  = target_malloc (size_in_ipa);\n\n  write_inferior_memory (ipa_action, (unsigned char *) &action->type,\n\t\t\tsize_in_ipa);\n\n  return ipa_action;\n}\n\nstatic char *\nr_tracepoint_action_send (char *buffer, const struct tracepoint_action *action)\n{\n  return buffer;\n}\n\nstatic const struct tracepoint_action_ops r_tracepoint_action_ops =\n{\n  r_tracepoint_action_download,\n  r_tracepoint_action_send,\n};\n\nstatic CORE_ADDR download_agent_expr (struct agent_expr *expr);\n\nstatic CORE_ADDR\nx_tracepoint_action_download (const struct tracepoint_action *action)\n{\n  int size_in_ipa = (sizeof (struct eval_expr_action)\n\t\t     - offsetof (struct tracepoint_action, type));\n  CORE_ADDR ipa_action = target_malloc (size_in_ipa);\n  CORE_ADDR expr;\n\n  write_inferior_memory (ipa_action, (unsigned char *) &action->type,\n\t\t\t size_in_ipa);\n  expr = download_agent_expr (((struct eval_expr_action *)action)->expr);\n  write_inferior_data_ptr (ipa_action + offsetof (struct eval_expr_action, expr)\n\t\t\t   - offsetof (struct tracepoint_action, type),\n\t\t\t   expr);\n\n  return ipa_action;\n}\n\n/* Copy agent expression AEXPR to buffer pointed by P.  If AEXPR is NULL,\n   copy 0 to P.  Return updated header of buffer.  */\n\nstatic char *\nagent_expr_send (char *p, const struct agent_expr *aexpr)\n{\n  /* Copy the length of condition first, and then copy its\n     content.  */\n  if (aexpr == NULL)\n    {\n      memset (p, 0, 4);\n      p += 4;\n    }\n  else\n    {\n      memcpy (p, &aexpr->length, 4);\n      p +=4;\n\n      memcpy (p, aexpr->bytes, aexpr->length);\n      p += aexpr->length;\n    }\n  return p;\n}\n\nstatic char *\nx_tracepoint_action_send ( char *buffer, const struct tracepoint_action *action)\n{\n  struct eval_expr_action *eaction = (struct eval_expr_action *) action;\n\n  return agent_expr_send (buffer, eaction->expr);\n}\n\nstatic const struct tracepoint_action_ops x_tracepoint_action_ops =\n{\n  x_tracepoint_action_download,\n  x_tracepoint_action_send,\n};\n\nstatic CORE_ADDR\nl_tracepoint_action_download (const struct tracepoint_action *action)\n{\n  int size_in_ipa = (sizeof (struct collect_static_trace_data_action)\n\t\t     - offsetof (struct tracepoint_action, type));\n  CORE_ADDR ipa_action = target_malloc (size_in_ipa);\n\n  write_inferior_memory (ipa_action, (unsigned char *) &action->type,\n\t\t\t size_in_ipa);\n\n  return ipa_action;\n}\n\nstatic char *\nl_tracepoint_action_send (char *buffer, const struct tracepoint_action *action)\n{\n  return buffer;\n}\n\nstatic const struct tracepoint_action_ops l_tracepoint_action_ops =\n{\n  l_tracepoint_action_download,\n  l_tracepoint_action_send,\n};\n#endif\n\n/* This structure describes a piece of the source-level definition of\n   the tracepoint.  The contents are not interpreted by the target,\n   but preserved verbatim for uploading upon reconnection.  */\n\nstruct source_string\n{\n  /* The type of string, such as \"cond\" for a conditional.  */\n  char *type;\n\n  /* The source-level string itself.  For the sake of target\n     debugging, we store it in plaintext, even though it is always\n     transmitted in hex.  */\n  char *str;\n\n  /* Link to the next one in the list.  We link them in the order\n     received, in case some make up an ordered list of commands or\n     some such.  */\n  struct source_string *next;\n};\n\nenum tracepoint_type\n{\n  /* Trap based tracepoint.  */\n  trap_tracepoint,\n\n  /* A fast tracepoint implemented with a jump instead of a trap.  */\n  fast_tracepoint,\n\n  /* A static tracepoint, implemented by a program call into a tracing\n     library.  */\n  static_tracepoint\n};\n\nstruct tracepoint_hit_ctx;\n\ntypedef enum eval_result_type (*condfn) (struct tracepoint_hit_ctx *,\n\t\t\t\t\t ULONGEST *);\n\n/* The definition of a tracepoint.  */\n\n/* Tracepoints may have multiple locations, each at a different\n   address.  This can occur with optimizations, template\n   instantiation, etc.  Since the locations may be in different\n   scopes, the conditions and actions may be different for each\n   location.  Our target version of tracepoints is more like GDB's\n   notion of \"breakpoint locations\", but we have almost nothing that\n   is not per-location, so we bother having two kinds of objects.  The\n   key consequence is that numbers are not unique, and that it takes\n   both number and address to identify a tracepoint uniquely.  */\n\nstruct tracepoint\n{\n  /* The number of the tracepoint, as specified by GDB.  Several\n     tracepoint objects here may share a number.  */\n  uint32_t number;\n\n  /* Address at which the tracepoint is supposed to trigger.  Several\n     tracepoints may share an address.  */\n  CORE_ADDR address;\n\n  /* Tracepoint type.  */\n  enum tracepoint_type type;\n\n  /* True if the tracepoint is currently enabled.  */\n  int8_t enabled;\n\n  /* The number of single steps that will be performed after each\n     tracepoint hit.  */\n  uint64_t step_count;\n\n  /* The number of times the tracepoint may be hit before it will\n     terminate the entire tracing run.  */\n  uint64_t pass_count;\n\n  /* Pointer to the agent expression that is the tracepoint's\n     conditional, or NULL if the tracepoint is unconditional.  */\n  struct agent_expr *cond;\n\n  /* The list of actions to take when the tracepoint triggers.  */\n  uint32_t numactions;\n  struct tracepoint_action **actions;\n\n  /* Count of the times we've hit this tracepoint during the run.\n     Note that while-stepping steps are not counted as \"hits\".  */\n  uint64_t hit_count;\n\n  /* Cached sum of the sizes of traceframes created by this point.  */\n  uint64_t traceframe_usage;\n\n  CORE_ADDR compiled_cond;\n\n  /* Link to the next tracepoint in the list.  */\n  struct tracepoint *next;\n\n#ifndef IN_PROCESS_AGENT\n  /* The list of actions to take when the tracepoint triggers, in\n     string/packet form.  */\n  char **actions_str;\n\n  /* The collection of strings that describe the tracepoint as it was\n     entered into GDB.  These are not used by the target, but are\n     reported back to GDB upon reconnection.  */\n  struct source_string *source_strings;\n\n  /* The number of bytes displaced by fast tracepoints. It may subsume\n     multiple instructions, for multi-byte fast tracepoints.  This\n     field is only valid for fast tracepoints.  */\n  uint32_t orig_size;\n\n  /* Only for fast tracepoints.  */\n  CORE_ADDR obj_addr_on_target;\n\n  /* Address range where the original instruction under a fast\n     tracepoint was relocated to.  (_end is actually one byte past\n     the end).  */\n  CORE_ADDR adjusted_insn_addr;\n  CORE_ADDR adjusted_insn_addr_end;\n\n  /* The address range of the piece of the jump pad buffer that was\n     assigned to this fast tracepoint.  (_end is actually one byte\n     past the end).*/\n  CORE_ADDR jump_pad;\n  CORE_ADDR jump_pad_end;\n\n  /* The address range of the piece of the trampoline buffer that was\n     assigned to this fast tracepoint.  (_end is actually one byte\n     past the end).  */\n  CORE_ADDR trampoline;\n  CORE_ADDR trampoline_end;\n\n  /* The list of actions to take while in a stepping loop.  These\n     fields are only valid for patch-based tracepoints.  */\n  int num_step_actions;\n  struct tracepoint_action **step_actions;\n  /* Same, but in string/packet form.  */\n  char **step_actions_str;\n\n  /* Handle returned by the breakpoint or tracepoint module when we\n     inserted the trap or jump, or hooked into a static tracepoint.\n     NULL if we haven't inserted it yet.  */\n  void *handle;\n#endif\n\n};\n\n#ifndef IN_PROCESS_AGENT\n\n/* Given `while-stepping', a thread may be collecting data for more\n   than one tracepoint simultaneously.  On the other hand, the same\n   tracepoint with a while-stepping action may be hit by more than one\n   thread simultaneously (but not quite, each thread could be handling\n   a different step).  Each thread holds a list of these objects,\n   representing the current step of each while-stepping action being\n   collected.  */\n\nstruct wstep_state\n{\n  struct wstep_state *next;\n\n  /* The tracepoint number.  */\n  int tp_number;\n  /* The tracepoint's address.  */\n  CORE_ADDR tp_address;\n\n  /* The number of the current step in this 'while-stepping'\n     action.  */\n  long current_step;\n};\n\n#endif\n\n/* The linked list of all tracepoints.  Marked explicitly as used as\n   the in-process library doesn't use it for the fast tracepoints\n   support.  */\nIP_AGENT_EXPORT struct tracepoint *tracepoints ATTR_USED;\n\n#ifndef IN_PROCESS_AGENT\n\n/* Pointer to the last tracepoint in the list, new tracepoints are\n   linked in at the end.  */\n\nstatic struct tracepoint *last_tracepoint;\n#endif\n\n/* The first tracepoint to exceed its pass count.  */\n\nIP_AGENT_EXPORT struct tracepoint *stopping_tracepoint;\n\n/* True if the trace buffer is full or otherwise no longer usable.  */\n\nIP_AGENT_EXPORT int trace_buffer_is_full;\n\nstatic enum eval_result_type expr_eval_result = expr_eval_no_error;\n\n#ifndef IN_PROCESS_AGENT\n\nstatic const char *eval_result_names[] =\n  {\n    \"terror:in the attic\",  /* this should never be reported */\n    \"terror:empty expression\",\n    \"terror:empty stack\",\n    \"terror:stack overflow\",\n    \"terror:stack underflow\",\n    \"terror:unhandled opcode\",\n    \"terror:unrecognized opcode\",\n    \"terror:divide by zero\"\n  };\n\n#endif\n\n/* The tracepoint in which the error occurred.  */\n\nstatic struct tracepoint *error_tracepoint;\n\nstruct trace_state_variable\n{\n  /* This is the name of the variable as used in GDB.  The target\n     doesn't use the name, but needs to have it for saving and\n     reconnection purposes.  */\n  char *name;\n\n  /* This number identifies the variable uniquely.  Numbers may be\n     assigned either by the target (in the case of builtin variables),\n     or by GDB, and are presumed unique during the course of a trace\n     experiment.  */\n  int number;\n\n  /* The variable's initial value, a 64-bit signed integer always.  */\n  LONGEST initial_value;\n\n  /* The variable's value, a 64-bit signed integer always.  */\n  LONGEST value;\n\n  /* Pointer to a getter function, used to supply computed values.  */\n  LONGEST (*getter) (void);\n\n  /* Link to the next variable.  */\n  struct trace_state_variable *next;\n};\n\n/* Linked list of all trace state variables.  */\n\n#ifdef IN_PROCESS_AGENT\nstruct trace_state_variable *alloced_trace_state_variables;\n#endif\n\nIP_AGENT_EXPORT struct trace_state_variable *trace_state_variables;\n\n/* The results of tracing go into a fixed-size space known as the\n   \"trace buffer\".  Because usage follows a limited number of\n   patterns, we manage it ourselves rather than with malloc.  Basic\n   rules are that we create only one trace frame at a time, each is\n   variable in size, they are never moved once created, and we only\n   discard if we are doing a circular buffer, and then only the oldest\n   ones.  Each trace frame includes its own size, so we don't need to\n   link them together, and the trace frame number is relative to the\n   first one, so we don't need to record numbers.  A trace frame also\n   records the number of the tracepoint that created it.  The data\n   itself is a series of blocks, each introduced by a single character\n   and with a defined format.  Each type of block has enough\n   type/length info to allow scanners to jump quickly from one block\n   to the next without reading each byte in the block.  */\n\n/* Trace buffer management would be simple - advance a free pointer\n   from beginning to end, then stop - were it not for the circular\n   buffer option, which is a useful way to prevent a trace run from\n   stopping prematurely because the buffer filled up.  In the circular\n   case, the location of the first trace frame (trace_buffer_start)\n   moves as old trace frames are discarded.  Also, since we grow trace\n   frames incrementally as actions are performed, we wrap around to\n   the beginning of the trace buffer.  This is per-block, so each\n   block within a trace frame remains contiguous.  Things get messy\n   when the wrapped-around trace frame is the one being discarded; the\n   free space ends up in two parts at opposite ends of the buffer.  */\n\n#ifndef ATTR_PACKED\n#  if defined(__GNUC__)\n#    define ATTR_PACKED __attribute__ ((packed))\n#  else\n#    define ATTR_PACKED /* nothing */\n#  endif\n#endif\n\n/* The data collected at a tracepoint hit.  This object should be as\n   small as possible, since there may be a great many of them.  We do\n   not need to keep a frame number, because they are all sequential\n   and there are no deletions; so the Nth frame in the buffer is\n   always frame number N.  */\n\nstruct traceframe\n{\n  /* Number of the tracepoint that collected this traceframe.  A value\n     of 0 indicates the current end of the trace buffer.  We make this\n     a 16-bit field because it's never going to happen that GDB's\n     numbering of tracepoints reaches 32,000.  */\n  int tpnum : 16;\n\n  /* The size of the data in this trace frame.  We limit this to 32\n     bits, even on a 64-bit target, because it's just implausible that\n     one is validly going to collect 4 gigabytes of data at a single\n     tracepoint hit.  */\n  unsigned int data_size : 32;\n\n  /* The base of the trace data, which is contiguous from this point.  */\n  unsigned char data[0];\n\n} ATTR_PACKED;\n\n/* The size of the EOB marker, in bytes.  A traceframe with zeroed\n   fields (and no data) marks the end of trace data.  */\n#define TRACEFRAME_EOB_MARKER_SIZE offsetof (struct traceframe, data)\n\n/* The traceframe to be used as the source of data to send back to\n   GDB.  A value of -1 means to get data from the live program.  */\n\nint current_traceframe = -1;\n\n/* This flag is true if the trace buffer is circular, meaning that\n   when it fills, the oldest trace frames are discarded in order to\n   make room.  */\n\n#ifndef IN_PROCESS_AGENT\nstatic int circular_trace_buffer;\n#endif\n\n/* Size of the trace buffer.  */\n\nstatic LONGEST trace_buffer_size;\n\n/* Pointer to the block of memory that traceframes all go into.  */\n\nstatic unsigned char *trace_buffer_lo;\n\n/* Pointer to the end of the trace buffer, more precisely to the byte\n   after the end of the buffer.  */\n\nstatic unsigned char *trace_buffer_hi;\n\n/* Control structure holding the read/write/etc. pointers into the\n   trace buffer.  We need more than one of these to implement a\n   transaction-like mechanism to garantees that both GDBserver and the\n   in-process agent can try to change the trace buffer\n   simultaneously.  */\n\nstruct trace_buffer_control\n{\n  /* Pointer to the first trace frame in the buffer.  In the\n     non-circular case, this is equal to trace_buffer_lo, otherwise it\n     moves around in the buffer.  */\n  unsigned char *start;\n\n  /* Pointer to the free part of the trace buffer.  Note that we clear\n     several bytes at and after this pointer, so that traceframe\n     scans/searches terminate properly.  */\n  unsigned char *free;\n\n  /* Pointer to the byte after the end of the free part.  Note that\n     this may be smaller than trace_buffer_free in the circular case,\n     and means that the free part is in two pieces.  Initially it is\n     equal to trace_buffer_hi, then is generally equivalent to\n     trace_buffer_start.  */\n  unsigned char *end_free;\n\n  /* Pointer to the wraparound.  If not equal to trace_buffer_hi, then\n     this is the point at which the trace data breaks, and resumes at\n     trace_buffer_lo.  */\n  unsigned char *wrap;\n};\n\n/* Same as above, to be used by GDBserver when updating the in-process\n   agent.  */\nstruct ipa_trace_buffer_control\n{\n  uintptr_t start;\n  uintptr_t free;\n  uintptr_t end_free;\n  uintptr_t wrap;\n};\n\n\n/* We have possibly both GDBserver and an inferior thread accessing\n   the same IPA trace buffer memory.  The IPA is the producer (tries\n   to put new frames in the buffer), while GDBserver occasionally\n   consumes them, that is, flushes the IPA's buffer into its own\n   buffer.  Both sides need to update the trace buffer control\n   pointers (current head, tail, etc.).  We can't use a global lock to\n   synchronize the accesses, as otherwise we could deadlock GDBserver\n   (if the thread holding the lock stops for a signal, say).  So\n   instead of that, we use a transaction scheme where GDBserver writes\n   always prevail over the IPAs writes, and, we have the IPA detect\n   the commit failure/overwrite, and retry the whole attempt.  This is\n   mainly implemented by having a global token object that represents\n   who wrote last to the buffer control structure.  We need to freeze\n   any inferior writing to the buffer while GDBserver touches memory,\n   so that the inferior can correctly detect that GDBserver had been\n   there, otherwise, it could mistakingly think its commit was\n   successful; that's implemented by simply having GDBserver set a\n   breakpoint the inferior hits if it is the critical region.\n\n   There are three cycling trace buffer control structure copies\n   (buffer head, tail, etc.), with the token object including an index\n   indicating which is current live copy.  The IPA tentatively builds\n   an updated copy in a non-current control structure, while GDBserver\n   always clobbers the current version directly.  The IPA then tries\n   to atomically \"commit\" its version; if GDBserver clobbered the\n   structure meanwhile, that will fail, and the IPA restarts the\n   allocation process.\n\n   Listing the step in further detail, we have:\n\n  In-process agent (producer):\n\n  - passes by `about_to_request_buffer_space' breakpoint/lock\n\n  - reads current token, extracts current trace buffer control index,\n    and starts tentatively updating the rightmost one (0->1, 1->2,\n    2->0).  Note that only one inferior thread is executing this code\n    at any given time, due to an outer lock in the jump pads.\n\n  - updates counters, and tries to commit the token.\n\n  - passes by second `about_to_request_buffer_space' breakpoint/lock,\n    leaving the sync region.\n\n  - checks if the update was effective.\n\n  - if trace buffer was found full, hits flush_trace_buffer\n    breakpoint, and restarts later afterwards.\n\n  GDBserver (consumer):\n\n  - sets `about_to_request_buffer_space' breakpoint/lock.\n\n  - updates the token unconditionally, using the current buffer\n    control index, since it knows that the IP agent always writes to\n    the rightmost, and due to the breakpoint, at most one IP thread\n    can try to update the trace buffer concurrently to GDBserver, so\n    there will be no danger of trace buffer control index wrap making\n    the IPA write to the same index as GDBserver.\n\n  - flushes the IP agent's trace buffer completely, and updates the\n    current trace buffer control structure.  GDBserver *always* wins.\n\n  - removes the `about_to_request_buffer_space' breakpoint.\n\nThe token is stored in the `trace_buffer_ctrl_curr' variable.\nInternally, it's bits are defined as:\n\n |-------------+-----+-------------+--------+-------------+--------------|\n | Bit offsets |  31 |   30 - 20   |   19   |    18-8     |     7-0      |\n |-------------+-----+-------------+--------+-------------+--------------|\n | What        | GSB | PC (11-bit) | unused | CC (11-bit) | TBCI (8-bit) |\n |-------------+-----+-------------+--------+-------------+--------------|\n\n GSB  - GDBserver Stamp Bit\n PC   - Previous Counter\n CC   - Current Counter\n TBCI - Trace Buffer Control Index\n\n\nAn IPA update of `trace_buffer_ctrl_curr' does:\n\n    - read CC from the current token, save as PC.\n    - updates pointers\n    - atomically tries to write PC+1,CC\n\nA GDBserver update of `trace_buffer_ctrl_curr' does:\n\n    - reads PC and CC from the current token.\n    - updates pointers\n    - writes GSB,PC,CC\n*/\n\n/* These are the bits of `trace_buffer_ctrl_curr' that are reserved\n   for the counters described below.  The cleared bits are used to\n   hold the index of the items of the `trace_buffer_ctrl' array that\n   is \"current\".  */\n#define GDBSERVER_FLUSH_COUNT_MASK        0xfffffff0\n\n/* `trace_buffer_ctrl_curr' contains two counters.  The `previous'\n   counter, and the `current' counter.  */\n\n#define GDBSERVER_FLUSH_COUNT_MASK_PREV   0x7ff00000\n#define GDBSERVER_FLUSH_COUNT_MASK_CURR   0x0007ff00\n\n/* When GDBserver update the IP agent's `trace_buffer_ctrl_curr', it\n   always stamps this bit as set.  */\n#define GDBSERVER_UPDATED_FLUSH_COUNT_BIT 0x80000000\n\n#ifdef IN_PROCESS_AGENT\nIP_AGENT_EXPORT struct trace_buffer_control trace_buffer_ctrl[3];\nIP_AGENT_EXPORT unsigned int trace_buffer_ctrl_curr;\n\n# define TRACE_BUFFER_CTRL_CURR \\\n  (trace_buffer_ctrl_curr & ~GDBSERVER_FLUSH_COUNT_MASK)\n\n#else\n\n/* The GDBserver side agent only needs one instance of this object, as\n   it doesn't need to sync with itself.  Define it as array anyway so\n   that the rest of the code base doesn't need to care for the\n   difference.  */\nstruct trace_buffer_control trace_buffer_ctrl[1];\n# define TRACE_BUFFER_CTRL_CURR 0\n#endif\n\n/* These are convenience macros used to access the current trace\n   buffer control in effect.  */\n#define trace_buffer_start (trace_buffer_ctrl[TRACE_BUFFER_CTRL_CURR].start)\n#define trace_buffer_free (trace_buffer_ctrl[TRACE_BUFFER_CTRL_CURR].free)\n#define trace_buffer_end_free \\\n  (trace_buffer_ctrl[TRACE_BUFFER_CTRL_CURR].end_free)\n#define trace_buffer_wrap (trace_buffer_ctrl[TRACE_BUFFER_CTRL_CURR].wrap)\n\n\n/* Macro that returns a pointer to the first traceframe in the buffer.  */\n\n#define FIRST_TRACEFRAME() ((struct traceframe *) trace_buffer_start)\n\n/* Macro that returns a pointer to the next traceframe in the buffer.\n   If the computed location is beyond the wraparound point, subtract\n   the offset of the wraparound.  */\n\n#define NEXT_TRACEFRAME_1(TF) \\\n  (((unsigned char *) (TF)) + sizeof (struct traceframe) + (TF)->data_size)\n\n#define NEXT_TRACEFRAME(TF) \\\n  ((struct traceframe *) (NEXT_TRACEFRAME_1 (TF)  \\\n\t\t\t  - ((NEXT_TRACEFRAME_1 (TF) >= trace_buffer_wrap) \\\n\t\t\t     ? (trace_buffer_wrap - trace_buffer_lo)\t\\\n\t\t\t     : 0)))\n\n/* The difference between these counters represents the total number\n   of complete traceframes present in the trace buffer.  The IP agent\n   writes to the write count, GDBserver writes to read count.  */\n\nIP_AGENT_EXPORT unsigned int traceframe_write_count;\nIP_AGENT_EXPORT unsigned int traceframe_read_count;\n\n/* Convenience macro.  */\n\n#define traceframe_count \\\n  ((unsigned int) (traceframe_write_count - traceframe_read_count))\n\n/* The count of all traceframes created in the current run, including\n   ones that were discarded to make room.  */\n\nIP_AGENT_EXPORT int traceframes_created;\n\n#ifndef IN_PROCESS_AGENT\n\n/* Read-only regions are address ranges whose contents don't change,\n   and so can be read from target memory even while looking at a trace\n   frame.  Without these, disassembly for instance will likely fail,\n   because the program code is not usually collected into a trace\n   frame.  This data structure does not need to be very complicated or\n   particularly efficient, it's only going to be used occasionally,\n   and only by some commands.  */\n\nstruct readonly_region\n{\n  /* The bounds of the region.  */\n  CORE_ADDR start, end;\n\n  /* Link to the next one.  */\n  struct readonly_region *next;\n};\n\n/* Linked list of readonly regions.  This list stays in effect from\n   one tstart to the next.  */\n\nstatic struct readonly_region *readonly_regions;\n\n#endif\n\n/* The global that controls tracing overall.  */\n\nIP_AGENT_EXPORT int tracing;\n\n#ifndef IN_PROCESS_AGENT\n\n/* Controls whether tracing should continue after GDB disconnects.  */\n\nint disconnected_tracing;\n\n/* The reason for the last tracing run to have stopped.  We initialize\n   to a distinct string so that GDB can distinguish between \"stopped\n   after running\" and \"stopped because never run\" cases.  */\n\nstatic const char *tracing_stop_reason = \"tnotrun\";\n\nstatic int tracing_stop_tpnum;\n\n/* 64-bit timestamps for the trace run's start and finish, expressed\n   in microseconds from the Unix epoch.  */\n\nLONGEST tracing_start_time;\nLONGEST tracing_stop_time;\n\n/* The (optional) user-supplied name of the user that started the run.\n   This is an arbitrary string, and may be NULL.  */\n\nchar *tracing_user_name;\n\n/* Optional user-supplied text describing the run.  This is\n   an arbitrary string, and may be NULL.  */\n\nchar *tracing_notes;\n\n/* Optional user-supplied text explaining a tstop command.  This is an\n   arbitrary string, and may be NULL.  */\n\nchar *tracing_stop_note;\n\n#endif\n\n/* Functions local to this file.  */\n\n/* Base \"class\" for tracepoint type specific data to be passed down to\n   collect_data_at_tracepoint.  */\nstruct tracepoint_hit_ctx\n{\n  enum tracepoint_type type;\n};\n\n#ifdef IN_PROCESS_AGENT\n\n/* Fast/jump tracepoint specific data to be passed down to\n   collect_data_at_tracepoint.  */\nstruct fast_tracepoint_ctx\n{\n  struct tracepoint_hit_ctx base;\n\n  struct regcache regcache;\n  int regcache_initted;\n  unsigned char *regspace;\n\n  unsigned char *regs;\n  struct tracepoint *tpoint;\n};\n\n/* Static tracepoint specific data to be passed down to\n   collect_data_at_tracepoint.  */\nstruct static_tracepoint_ctx\n{\n  struct tracepoint_hit_ctx base;\n\n  /* The regcache corresponding to the registers state at the time of\n     the tracepoint hit.  Initialized lazily, from REGS.  */\n  struct regcache regcache;\n  int regcache_initted;\n\n  /* The buffer space REGCACHE above uses.  We use a separate buffer\n     instead of letting the regcache malloc for both signal safety and\n     performance reasons; this is allocated on the stack instead.  */\n  unsigned char *regspace;\n\n  /* The register buffer as passed on by lttng/ust.  */\n  struct registers *regs;\n\n  /* The \"printf\" formatter and the args the user passed to the marker\n     call.  We use this to be able to collect \"static trace data\"\n     ($_sdata).  */\n  const char *fmt;\n  va_list *args;\n\n  /* The GDB tracepoint matching the probed marker that was \"hit\".  */\n  struct tracepoint *tpoint;\n};\n\n#else\n\n/* Static tracepoint specific data to be passed down to\n   collect_data_at_tracepoint.  */\nstruct trap_tracepoint_ctx\n{\n  struct tracepoint_hit_ctx base;\n\n  struct regcache *regcache;\n};\n\n#endif\n\n#ifndef IN_PROCESS_AGENT\nstatic CORE_ADDR traceframe_get_pc (struct traceframe *tframe);\nstatic int traceframe_read_tsv (int num, LONGEST *val);\n#endif\n\nstatic int condition_true_at_tracepoint (struct tracepoint_hit_ctx *ctx,\n\t\t\t\t\t struct tracepoint *tpoint);\n\n#ifndef IN_PROCESS_AGENT\nstatic void clear_readonly_regions (void);\nstatic void clear_installed_tracepoints (void);\n#endif\n\nstatic void collect_data_at_tracepoint (struct tracepoint_hit_ctx *ctx,\n\t\t\t\t\tCORE_ADDR stop_pc,\n\t\t\t\t\tstruct tracepoint *tpoint);\n#ifndef IN_PROCESS_AGENT\nstatic void collect_data_at_step (struct tracepoint_hit_ctx *ctx,\n\t\t\t\t  CORE_ADDR stop_pc,\n\t\t\t\t  struct tracepoint *tpoint, int current_step);\nstatic void compile_tracepoint_condition (struct tracepoint *tpoint,\n\t\t\t\t\t  CORE_ADDR *jump_entry);\n#endif\nstatic void do_action_at_tracepoint (struct tracepoint_hit_ctx *ctx,\n\t\t\t\t     CORE_ADDR stop_pc,\n\t\t\t\t     struct tracepoint *tpoint,\n\t\t\t\t     struct traceframe *tframe,\n\t\t\t\t     struct tracepoint_action *taction);\n\n#ifndef IN_PROCESS_AGENT\nstatic struct tracepoint *fast_tracepoint_from_ipa_tpoint_address (CORE_ADDR);\n\nstatic void install_tracepoint (struct tracepoint *, char *own_buf);\nstatic void download_tracepoint (struct tracepoint *);\nstatic int install_fast_tracepoint (struct tracepoint *, char *errbuf);\nstatic void clone_fast_tracepoint (struct tracepoint *to,\n\t\t\t\t   const struct tracepoint *from);\n#endif\n\nstatic LONGEST get_timestamp (void);\n\n#if defined(__GNUC__)\n#  define memory_barrier() asm volatile (\"\" : : : \"memory\")\n#else\n#  define memory_barrier() do {} while (0)\n#endif\n\n/* We only build the IPA if this builtin is supported, and there are\n   no uses of this in GDBserver itself, so we're safe in defining this\n   unconditionally.  */\n#define cmpxchg(mem, oldval, newval) \\\n  __sync_val_compare_and_swap (mem, oldval, newval)\n\n/* Record that an error occurred during expression evaluation.  */\n\nstatic void\nrecord_tracepoint_error (struct tracepoint *tpoint, const char *which,\n\t\t\t enum eval_result_type rtype)\n{\n  trace_debug (\"Tracepoint %d at %s %s eval reports error %d\",\n\t       tpoint->number, paddress (tpoint->address), which, rtype);\n\n#ifdef IN_PROCESS_AGENT\n  /* Only record the first error we get.  */\n  if (cmpxchg (&expr_eval_result,\n\t       expr_eval_no_error,\n\t       rtype) != expr_eval_no_error)\n    return;\n#else\n  if (expr_eval_result != expr_eval_no_error)\n    return;\n#endif\n\n  error_tracepoint = tpoint;\n}\n\n/* Trace buffer management.  */\n\nstatic void\nclear_trace_buffer (void)\n{\n  trace_buffer_start = trace_buffer_lo;\n  trace_buffer_free = trace_buffer_lo;\n  trace_buffer_end_free = trace_buffer_hi;\n  trace_buffer_wrap = trace_buffer_hi;\n  /* A traceframe with zeroed fields marks the end of trace data.  */\n  ((struct traceframe *) trace_buffer_free)->tpnum = 0;\n  ((struct traceframe *) trace_buffer_free)->data_size = 0;\n  traceframe_read_count = traceframe_write_count = 0;\n  traceframes_created = 0;\n}\n\n#ifndef IN_PROCESS_AGENT\n\nstatic void\nclear_inferior_trace_buffer (void)\n{\n  CORE_ADDR ipa_trace_buffer_lo;\n  CORE_ADDR ipa_trace_buffer_hi;\n  struct traceframe ipa_traceframe = { 0 };\n  struct ipa_trace_buffer_control ipa_trace_buffer_ctrl;\n\n  read_inferior_data_pointer (ipa_sym_addrs.addr_trace_buffer_lo,\n\t\t\t      &ipa_trace_buffer_lo);\n  read_inferior_data_pointer (ipa_sym_addrs.addr_trace_buffer_hi,\n\t\t\t      &ipa_trace_buffer_hi);\n\n  ipa_trace_buffer_ctrl.start = ipa_trace_buffer_lo;\n  ipa_trace_buffer_ctrl.free = ipa_trace_buffer_lo;\n  ipa_trace_buffer_ctrl.end_free = ipa_trace_buffer_hi;\n  ipa_trace_buffer_ctrl.wrap = ipa_trace_buffer_hi;\n\n  /* A traceframe with zeroed fields marks the end of trace data.  */\n  write_inferior_memory (ipa_sym_addrs.addr_trace_buffer_ctrl,\n\t\t\t (unsigned char *) &ipa_trace_buffer_ctrl,\n\t\t\t sizeof (ipa_trace_buffer_ctrl));\n\n  write_inferior_uinteger (ipa_sym_addrs.addr_trace_buffer_ctrl_curr, 0);\n\n  /* A traceframe with zeroed fields marks the end of trace data.  */\n  write_inferior_memory (ipa_trace_buffer_lo,\n\t\t\t (unsigned char *) &ipa_traceframe,\n\t\t\t sizeof (ipa_traceframe));\n\n  write_inferior_uinteger (ipa_sym_addrs.addr_traceframe_write_count, 0);\n  write_inferior_uinteger (ipa_sym_addrs.addr_traceframe_read_count, 0);\n  write_inferior_integer (ipa_sym_addrs.addr_traceframes_created, 0);\n}\n\n#endif\n\nstatic void\ninit_trace_buffer (LONGEST bufsize)\n{\n  size_t alloc_size;\n\n  trace_buffer_size = bufsize;\n\n  /* Make sure to internally allocate at least space for the EOB\n     marker.  */\n  alloc_size = (bufsize < TRACEFRAME_EOB_MARKER_SIZE\n\t\t? TRACEFRAME_EOB_MARKER_SIZE : bufsize);\n  trace_buffer_lo = xrealloc (trace_buffer_lo, alloc_size);\n\n  trace_buffer_hi = trace_buffer_lo + trace_buffer_size;\n\n  clear_trace_buffer ();\n}\n\n#ifdef IN_PROCESS_AGENT\n\nIP_AGENT_EXPORT void ATTR_USED ATTR_NOINLINE\nabout_to_request_buffer_space (void)\n{\n  /* GDBserver places breakpoint here while it goes about to flush\n     data at random times.  */\n  UNKNOWN_SIDE_EFFECTS();\n}\n\n#endif\n\n/* Carve out a piece of the trace buffer, returning NULL in case of\n   failure.  */\n\nstatic void *\ntrace_buffer_alloc (size_t amt)\n{\n  unsigned char *rslt;\n  struct trace_buffer_control *tbctrl;\n  unsigned int curr;\n#ifdef IN_PROCESS_AGENT\n  unsigned int prev, prev_filtered;\n  unsigned int commit_count;\n  unsigned int commit;\n  unsigned int readout;\n#else\n  struct traceframe *oldest;\n  unsigned char *new_start;\n#endif\n\n  trace_debug (\"Want to allocate %ld+%ld bytes in trace buffer\",\n\t       (long) amt, (long) sizeof (struct traceframe));\n\n  /* Account for the EOB marker.  */\n  amt += TRACEFRAME_EOB_MARKER_SIZE;\n\n#ifdef IN_PROCESS_AGENT\n again:\n  memory_barrier ();\n\n  /* Read the current token and extract the index to try to write to,\n     storing it in CURR.  */\n  prev = trace_buffer_ctrl_curr;\n  prev_filtered = prev & ~GDBSERVER_FLUSH_COUNT_MASK;\n  curr = prev_filtered + 1;\n  if (curr > 2)\n    curr = 0;\n\n  about_to_request_buffer_space ();\n\n  /* Start out with a copy of the current state.  GDBserver may be\n     midway writing to the PREV_FILTERED TBC, but, that's OK, we won't\n     be able to commit anyway if that happens.  */\n  trace_buffer_ctrl[curr]\n    = trace_buffer_ctrl[prev_filtered];\n  trace_debug (\"trying curr=%u\", curr);\n#else\n  /* The GDBserver's agent doesn't need all that syncing, and always\n     updates TCB 0 (there's only one, mind you).  */\n  curr = 0;\n#endif\n  tbctrl = &trace_buffer_ctrl[curr];\n\n  /* Offsets are easier to grok for debugging than raw addresses,\n     especially for the small trace buffer sizes that are useful for\n     testing.  */\n  trace_debug (\"Trace buffer [%d] start=%d free=%d endfree=%d wrap=%d hi=%d\",\n\t       curr,\n\t       (int) (tbctrl->start - trace_buffer_lo),\n\t       (int) (tbctrl->free - trace_buffer_lo),\n\t       (int) (tbctrl->end_free - trace_buffer_lo),\n\t       (int) (tbctrl->wrap - trace_buffer_lo),\n\t       (int) (trace_buffer_hi - trace_buffer_lo));\n\n  /* The algorithm here is to keep trying to get a contiguous block of\n     the requested size, possibly discarding older traceframes to free\n     up space.  Since free space might come in one or two pieces,\n     depending on whether discarded traceframes wrapped around at the\n     high end of the buffer, we test both pieces after each\n     discard.  */\n  while (1)\n    {\n      /* First, if we have two free parts, try the upper one first.  */\n      if (tbctrl->end_free < tbctrl->free)\n\t{\n\t  if (tbctrl->free + amt <= trace_buffer_hi)\n\t    /* We have enough in the upper part.  */\n\t    break;\n\t  else\n\t    {\n\t      /* Our high part of free space wasn't enough.  Give up\n\t\t on it for now, set wraparound.  We will recover the\n\t\t space later, if/when the wrapped-around traceframe is\n\t\t discarded.  */\n\t      trace_debug (\"Upper part too small, setting wraparound\");\n\t      tbctrl->wrap = tbctrl->free;\n\t      tbctrl->free = trace_buffer_lo;\n\t    }\n\t}\n\n      /* The normal case.  */\n      if (tbctrl->free + amt <= tbctrl->end_free)\n\tbreak;\n\n#ifdef IN_PROCESS_AGENT\n      /* The IP Agent's buffer is always circular.  It isn't used\n\t currently, but `circular_trace_buffer' could represent\n\t GDBserver's mode.  If we didn't find space, ask GDBserver to\n\t flush.  */\n\n      flush_trace_buffer ();\n      memory_barrier ();\n      if (tracing)\n\t{\n\t  trace_debug (\"gdbserver flushed buffer, retrying\");\n\t  goto again;\n\t}\n\n      /* GDBserver cancelled the tracing.  Bail out as well.  */\n      return NULL;\n#else\n      /* If we're here, then neither part is big enough, and\n\t non-circular trace buffers are now full.  */\n      if (!circular_trace_buffer)\n\t{\n\t  trace_debug (\"Not enough space in the trace buffer\");\n\t  return NULL;\n\t}\n\n      trace_debug (\"Need more space in the trace buffer\");\n\n      /* If we have a circular buffer, we can try discarding the\n\t oldest traceframe and see if that helps.  */\n      oldest = FIRST_TRACEFRAME ();\n      if (oldest->tpnum == 0)\n\t{\n\t  /* Not good; we have no traceframes to free.  Perhaps we're\n\t     asking for a block that is larger than the buffer?  In\n\t     any case, give up.  */\n\t  trace_debug (\"No traceframes to discard\");\n\t  return NULL;\n\t}\n\n      /* We don't run this code in the in-process agent currently.\n\t E.g., we could leave the in-process agent in autonomous\n\t circular mode if we only have fast tracepoints.  If we do\n\t that, then this bit becomes racy with GDBserver, which also\n\t writes to this counter.  */\n      --traceframe_write_count;\n\n      new_start = (unsigned char *) NEXT_TRACEFRAME (oldest);\n      /* If we freed the traceframe that wrapped around, go back\n\t to the non-wrap case.  */\n      if (new_start < tbctrl->start)\n\t{\n\t  trace_debug (\"Discarding past the wraparound\");\n\t  tbctrl->wrap = trace_buffer_hi;\n\t}\n      tbctrl->start = new_start;\n      tbctrl->end_free = tbctrl->start;\n\n      trace_debug (\"Discarded a traceframe\\n\"\n\t\t   \"Trace buffer [%d], start=%d free=%d \"\n\t\t   \"endfree=%d wrap=%d hi=%d\",\n\t\t   curr,\n\t\t   (int) (tbctrl->start - trace_buffer_lo),\n\t\t   (int) (tbctrl->free - trace_buffer_lo),\n\t\t   (int) (tbctrl->end_free - trace_buffer_lo),\n\t\t   (int) (tbctrl->wrap - trace_buffer_lo),\n\t\t   (int) (trace_buffer_hi - trace_buffer_lo));\n\n      /* Now go back around the loop.  The discard might have resulted\n\t in either one or two pieces of free space, so we want to try\n\t both before freeing any more traceframes.  */\n#endif\n    }\n\n  /* If we get here, we know we can provide the asked-for space.  */\n\n  rslt = tbctrl->free;\n\n  /* Adjust the request back down, now that we know we have space for\n     the marker, but don't commit to AMT yet, we may still need to\n     restart the operation if GDBserver touches the trace buffer\n     (obviously only important in the in-process agent's version).  */\n  tbctrl->free += (amt - sizeof (struct traceframe));\n\n  /* Or not.  If GDBserver changed the trace buffer behind our back,\n     we get to restart a new allocation attempt.  */\n\n#ifdef IN_PROCESS_AGENT\n  /* Build the tentative token.  */\n  commit_count = (((prev & GDBSERVER_FLUSH_COUNT_MASK_CURR) + 0x100)\n\t\t  & GDBSERVER_FLUSH_COUNT_MASK_CURR);\n  commit = (((prev & GDBSERVER_FLUSH_COUNT_MASK_CURR) << 12)\n\t    | commit_count\n\t    | curr);\n\n  /* Try to commit it.  */\n  readout = cmpxchg (&trace_buffer_ctrl_curr, prev, commit);\n  if (readout != prev)\n    {\n      trace_debug (\"GDBserver has touched the trace buffer, restarting.\"\n\t\t   \" (prev=%08x, commit=%08x, readout=%08x)\",\n\t\t   prev, commit, readout);\n      goto again;\n    }\n\n  /* Hold your horses here.  Even if that change was committed,\n     GDBserver could come in, and clobber it.  We need to hold to be\n     able to tell if GDBserver clobbers before or after we committed\n     the change.  Whenever GDBserver goes about touching the IPA\n     buffer, it sets a breakpoint in this routine, so we have a sync\n     point here.  */\n  about_to_request_buffer_space ();\n\n  /* Check if the change has been effective, even if GDBserver stopped\n     us at the breakpoint.  */\n\n  {\n    unsigned int refetch;\n\n    memory_barrier ();\n\n    refetch = trace_buffer_ctrl_curr;\n\n    if (refetch == commit\n\t|| ((refetch & GDBSERVER_FLUSH_COUNT_MASK_PREV) >> 12) == commit_count)\n      {\n\t/* effective */\n\ttrace_debug (\"change is effective: (prev=%08x, commit=%08x, \"\n\t\t     \"readout=%08x, refetch=%08x)\",\n\t\t     prev, commit, readout, refetch);\n      }\n    else\n      {\n\ttrace_debug (\"GDBserver has touched the trace buffer, not effective.\"\n\t\t     \" (prev=%08x, commit=%08x, readout=%08x, refetch=%08x)\",\n\t\t     prev, commit, readout, refetch);\n\tgoto again;\n      }\n  }\n#endif\n\n  /* We have a new piece of the trace buffer.  Hurray!  */\n\n  /* Add an EOB marker just past this allocation.  */\n  ((struct traceframe *) tbctrl->free)->tpnum = 0;\n  ((struct traceframe *) tbctrl->free)->data_size = 0;\n\n  /* Adjust the request back down, now that we know we have space for\n     the marker.  */\n  amt -= sizeof (struct traceframe);\n\n  if (debug_threads)\n    {\n      trace_debug (\"Allocated %d bytes\", (int) amt);\n      trace_debug (\"Trace buffer [%d] start=%d free=%d \"\n\t\t   \"endfree=%d wrap=%d hi=%d\",\n\t\t   curr,\n\t\t   (int) (tbctrl->start - trace_buffer_lo),\n\t\t   (int) (tbctrl->free - trace_buffer_lo),\n\t\t   (int) (tbctrl->end_free - trace_buffer_lo),\n\t\t   (int) (tbctrl->wrap - trace_buffer_lo),\n\t\t   (int) (trace_buffer_hi - trace_buffer_lo));\n    }\n\n  return rslt;\n}\n\n#ifndef IN_PROCESS_AGENT\n\n/* Return the total free space.  This is not necessarily the largest\n   block we can allocate, because of the two-part case.  */\n\nstatic int\nfree_space (void)\n{\n  if (trace_buffer_free <= trace_buffer_end_free)\n    return trace_buffer_end_free - trace_buffer_free;\n  else\n    return ((trace_buffer_end_free - trace_buffer_lo)\n\t    + (trace_buffer_hi - trace_buffer_free));\n}\n\n/* An 'S' in continuation packets indicates remainder are for\n   while-stepping.  */\n\nstatic int seen_step_action_flag;\n\n/* Create a tracepoint (location) with given number and address.  Add this\n   new tracepoint to list and sort this list.  */\n\nstatic struct tracepoint *\nadd_tracepoint (int num, CORE_ADDR addr)\n{\n  struct tracepoint *tpoint, **tp_next;\n\n  tpoint = xmalloc (sizeof (struct tracepoint));\n  tpoint->number = num;\n  tpoint->address = addr;\n  tpoint->numactions = 0;\n  tpoint->actions = NULL;\n  tpoint->actions_str = NULL;\n  tpoint->cond = NULL;\n  tpoint->num_step_actions = 0;\n  tpoint->step_actions = NULL;\n  tpoint->step_actions_str = NULL;\n  /* Start all off as regular (slow) tracepoints.  */\n  tpoint->type = trap_tracepoint;\n  tpoint->orig_size = -1;\n  tpoint->source_strings = NULL;\n  tpoint->compiled_cond = 0;\n  tpoint->handle = NULL;\n  tpoint->next = NULL;\n\n  /* Find a place to insert this tracepoint into list in order to keep\n     the tracepoint list still in the ascending order.  There may be\n     multiple tracepoints at the same address as TPOINT's, and this\n     guarantees TPOINT is inserted after all the tracepoints which are\n     set at the same address.  For example, fast tracepoints A, B, C are\n     set at the same address, and D is to be insert at the same place as\n     well,\n\n     -->| A |--> | B |-->| C |->...\n\n     One jump pad was created for tracepoint A, B, and C, and the target\n     address of A is referenced/used in jump pad.  So jump pad will let\n     inferior jump to A.  If D is inserted in front of A, like this,\n\n     -->| D |-->| A |--> | B |-->| C |->...\n\n     without updating jump pad, D is not reachable during collect, which\n     is wrong.  As we can see, the order of B, C and D doesn't matter, but\n     A should always be the `first' one.  */\n  for (tp_next = &tracepoints;\n       (*tp_next) != NULL && (*tp_next)->address <= tpoint->address;\n       tp_next = &(*tp_next)->next)\n    ;\n  tpoint->next = *tp_next;\n  *tp_next = tpoint;\n  last_tracepoint = tpoint;\n\n  seen_step_action_flag = 0;\n\n  return tpoint;\n}\n\n#ifndef IN_PROCESS_AGENT\n\n/* Return the tracepoint with the given number and address, or NULL.  */\n\nstatic struct tracepoint *\nfind_tracepoint (int id, CORE_ADDR addr)\n{\n  struct tracepoint *tpoint;\n\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    if (tpoint->number == id && tpoint->address == addr)\n      return tpoint;\n\n  return NULL;\n}\n\n/* Remove TPOINT from global list.  */\n\nstatic void\nremove_tracepoint (struct tracepoint *tpoint)\n{\n  struct tracepoint *tp, *tp_prev;\n\n  for (tp = tracepoints, tp_prev = NULL; tp && tp != tpoint;\n       tp_prev = tp, tp = tp->next)\n    ;\n\n  if (tp)\n    {\n      if (tp_prev)\n\ttp_prev->next = tp->next;\n      else\n\ttracepoints = tp->next;\n\n      xfree (tp);\n    }\n}\n\n/* There may be several tracepoints with the same number (because they\n   are \"locations\", in GDB parlance); return the next one after the\n   given tracepoint, or search from the beginning of the list if the\n   first argument is NULL.  */\n\nstatic struct tracepoint *\nfind_next_tracepoint_by_number (struct tracepoint *prev_tp, int num)\n{\n  struct tracepoint *tpoint;\n\n  if (prev_tp)\n    tpoint = prev_tp->next;\n  else\n    tpoint = tracepoints;\n  for (; tpoint; tpoint = tpoint->next)\n    if (tpoint->number == num)\n      return tpoint;\n\n  return NULL;\n}\n\n#endif\n\n/* Append another action to perform when the tracepoint triggers.  */\n\nstatic void\nadd_tracepoint_action (struct tracepoint *tpoint, char *packet)\n{\n  char *act;\n\n  if (*packet == 'S')\n    {\n      seen_step_action_flag = 1;\n      ++packet;\n    }\n\n  act = packet;\n\n  while (*act)\n    {\n      char *act_start = act;\n      struct tracepoint_action *action = NULL;\n\n      switch (*act)\n\t{\n\tcase 'M':\n\t  {\n\t    struct collect_memory_action *maction;\n\t    ULONGEST basereg;\n\t    int is_neg;\n\n\t    maction = xmalloc (sizeof *maction);\n\t    maction->base.type = *act;\n\t    maction->base.ops = &m_tracepoint_action_ops;\n\t    action = &maction->base;\n\n\t    ++act;\n\t    is_neg = (*act == '-');\n\t    if (*act == '-')\n\t      ++act;\n\t    act = unpack_varlen_hex (act, &basereg);\n\t    ++act;\n\t    act = unpack_varlen_hex (act, &maction->addr);\n\t    ++act;\n\t    act = unpack_varlen_hex (act, &maction->len);\n\t    maction->basereg = (is_neg\n\t\t\t\t? - (int) basereg\n\t\t\t\t: (int) basereg);\n\t    trace_debug (\"Want to collect %s bytes at 0x%s (basereg %d)\",\n\t\t\t pulongest (maction->len),\n\t\t\t paddress (maction->addr), maction->basereg);\n\t    break;\n\t  }\n\tcase 'R':\n\t  {\n\t    struct collect_registers_action *raction;\n\n\t    raction = xmalloc (sizeof *raction);\n\t    raction->base.type = *act;\n\t    raction->base.ops = &r_tracepoint_action_ops;\n\t    action = &raction->base;\n\n\t    trace_debug (\"Want to collect registers\");\n\t    ++act;\n\t    /* skip past hex digits of mask for now */\n\t    while (isxdigit(*act))\n\t      ++act;\n\t    break;\n\t  }\n\tcase 'L':\n\t  {\n\t    struct collect_static_trace_data_action *raction;\n\n\t    raction = xmalloc (sizeof *raction);\n\t    raction->base.type = *act;\n\t    raction->base.ops = &l_tracepoint_action_ops;\n\t    action = &raction->base;\n\n\t    trace_debug (\"Want to collect static trace data\");\n\t    ++act;\n\t    break;\n\t  }\n\tcase 'S':\n\t  trace_debug (\"Unexpected step action, ignoring\");\n\t  ++act;\n\t  break;\n\tcase 'X':\n\t  {\n\t    struct eval_expr_action *xaction;\n\n\t    xaction = xmalloc (sizeof (*xaction));\n\t    xaction->base.type = *act;\n\t    xaction->base.ops = &x_tracepoint_action_ops;\n\t    action = &xaction->base;\n\n\t    trace_debug (\"Want to evaluate expression\");\n\t    xaction->expr = gdb_parse_agent_expr (&act);\n\t    break;\n\t  }\n\tdefault:\n\t  trace_debug (\"unknown trace action '%c', ignoring...\", *act);\n\t  break;\n\tcase '-':\n\t  break;\n\t}\n\n      if (action == NULL)\n\tbreak;\n\n      if (seen_step_action_flag)\n\t{\n\t  tpoint->num_step_actions++;\n\n\t  tpoint->step_actions\n\t    = xrealloc (tpoint->step_actions,\n\t\t\t(sizeof (*tpoint->step_actions)\n\t\t\t * tpoint->num_step_actions));\n\t  tpoint->step_actions_str\n\t    = xrealloc (tpoint->step_actions_str,\n\t\t\t(sizeof (*tpoint->step_actions_str)\n\t\t\t * tpoint->num_step_actions));\n\t  tpoint->step_actions[tpoint->num_step_actions - 1] = action;\n\t  tpoint->step_actions_str[tpoint->num_step_actions - 1]\n\t    = savestring (act_start, act - act_start);\n\t}\n      else\n\t{\n\t  tpoint->numactions++;\n\t  tpoint->actions\n\t    = xrealloc (tpoint->actions,\n\t\t\tsizeof (*tpoint->actions) * tpoint->numactions);\n\t  tpoint->actions_str\n\t    = xrealloc (tpoint->actions_str,\n\t\t\tsizeof (*tpoint->actions_str) * tpoint->numactions);\n\t  tpoint->actions[tpoint->numactions - 1] = action;\n\t  tpoint->actions_str[tpoint->numactions - 1]\n\t    = savestring (act_start, act - act_start);\n\t}\n    }\n}\n\n#endif\n\n/* Find or create a trace state variable with the given number.  */\n\nstatic struct trace_state_variable *\nget_trace_state_variable (int num)\n{\n  struct trace_state_variable *tsv;\n\n#ifdef IN_PROCESS_AGENT\n  /* Search for an existing variable.  */\n  for (tsv = alloced_trace_state_variables; tsv; tsv = tsv->next)\n    if (tsv->number == num)\n      return tsv;\n#endif\n\n  /* Search for an existing variable.  */\n  for (tsv = trace_state_variables; tsv; tsv = tsv->next)\n    if (tsv->number == num)\n      return tsv;\n\n  return NULL;\n}\n\n/* Find or create a trace state variable with the given number.  */\n\nstatic struct trace_state_variable *\ncreate_trace_state_variable (int num, int gdb)\n{\n  struct trace_state_variable *tsv;\n\n  tsv = get_trace_state_variable (num);\n  if (tsv != NULL)\n    return tsv;\n\n  /* Create a new variable.  */\n  tsv = xmalloc (sizeof (struct trace_state_variable));\n  tsv->number = num;\n  tsv->initial_value = 0;\n  tsv->value = 0;\n  tsv->getter = NULL;\n  tsv->name = NULL;\n#ifdef IN_PROCESS_AGENT\n  if (!gdb)\n    {\n      tsv->next = alloced_trace_state_variables;\n      alloced_trace_state_variables = tsv;\n    }\n  else\n#endif\n    {\n      tsv->next = trace_state_variables;\n      trace_state_variables = tsv;\n    }\n  return tsv;\n}\n\nIP_AGENT_EXPORT LONGEST\nget_trace_state_variable_value (int num)\n{\n  struct trace_state_variable *tsv;\n\n  tsv = get_trace_state_variable (num);\n\n  if (!tsv)\n    {\n      trace_debug (\"No trace state variable %d, skipping value get\", num);\n      return 0;\n    }\n\n  /* Call a getter function if we have one.  While it's tempting to\n     set up something to only call the getter once per tracepoint hit,\n     it could run afoul of thread races. Better to let the getter\n     handle it directly, if necessary to worry about it.  */\n  if (tsv->getter)\n    tsv->value = (tsv->getter) ();\n\n  trace_debug (\"get_trace_state_variable_value(%d) ==> %s\",\n\t       num, plongest (tsv->value));\n\n  return tsv->value;\n}\n\nIP_AGENT_EXPORT void\nset_trace_state_variable_value (int num, LONGEST val)\n{\n  struct trace_state_variable *tsv;\n\n  tsv = get_trace_state_variable (num);\n\n  if (!tsv)\n    {\n      trace_debug (\"No trace state variable %d, skipping value set\", num);\n      return;\n    }\n\n  tsv->value = val;\n}\n\nLONGEST\nagent_get_trace_state_variable_value (int num)\n{\n  return get_trace_state_variable_value (num);\n}\n\nvoid\nagent_set_trace_state_variable_value (int num, LONGEST val)\n{\n  set_trace_state_variable_value (num, val);\n}\n\nstatic void\nset_trace_state_variable_name (int num, const char *name)\n{\n  struct trace_state_variable *tsv;\n\n  tsv = get_trace_state_variable (num);\n\n  if (!tsv)\n    {\n      trace_debug (\"No trace state variable %d, skipping name set\", num);\n      return;\n    }\n\n  tsv->name = (char *) name;\n}\n\nstatic void\nset_trace_state_variable_getter (int num, LONGEST (*getter) (void))\n{\n  struct trace_state_variable *tsv;\n\n  tsv = get_trace_state_variable (num);\n\n  if (!tsv)\n    {\n      trace_debug (\"No trace state variable %d, skipping getter set\", num);\n      return;\n    }\n\n  tsv->getter = getter;\n}\n\n/* Add a raw traceframe for the given tracepoint.  */\n\nstatic struct traceframe *\nadd_traceframe (struct tracepoint *tpoint)\n{\n  struct traceframe *tframe;\n\n  tframe = trace_buffer_alloc (sizeof (struct traceframe));\n\n  if (tframe == NULL)\n    return NULL;\n\n  tframe->tpnum = tpoint->number;\n  tframe->data_size = 0;\n\n  return tframe;\n}\n\n/* Add a block to the traceframe currently being worked on.  */\n\nstatic unsigned char *\nadd_traceframe_block (struct traceframe *tframe,\n\t\t      struct tracepoint *tpoint, int amt)\n{\n  unsigned char *block;\n\n  if (!tframe)\n    return NULL;\n\n  block = trace_buffer_alloc (amt);\n\n  if (!block)\n    return NULL;\n\n  gdb_assert (tframe->tpnum == tpoint->number);\n\n  tframe->data_size += amt;\n  tpoint->traceframe_usage += amt;\n\n  return block;\n}\n\n/* Flag that the current traceframe is finished.  */\n\nstatic void\nfinish_traceframe (struct traceframe *tframe)\n{\n  ++traceframe_write_count;\n  ++traceframes_created;\n}\n\n#ifndef IN_PROCESS_AGENT\n\n/* Given a traceframe number NUM, find the NUMth traceframe in the\n   buffer.  */\n\nstatic struct traceframe *\nfind_traceframe (int num)\n{\n  struct traceframe *tframe;\n  int tfnum = 0;\n\n  for (tframe = FIRST_TRACEFRAME ();\n       tframe->tpnum != 0;\n       tframe = NEXT_TRACEFRAME (tframe))\n    {\n      if (tfnum == num)\n\treturn tframe;\n      ++tfnum;\n    }\n\n  return NULL;\n}\n\nstatic CORE_ADDR\nget_traceframe_address (struct traceframe *tframe)\n{\n  CORE_ADDR addr;\n  struct tracepoint *tpoint;\n\n  addr = traceframe_get_pc (tframe);\n\n  if (addr)\n    return addr;\n\n  /* Fallback strategy, will be incorrect for while-stepping frames\n     and multi-location tracepoints.  */\n  tpoint = find_next_tracepoint_by_number (NULL, tframe->tpnum);\n  return tpoint->address;\n}\n\n/* Search for the next traceframe whose address is inside or outside\n   the given range.  */\n\nstatic struct traceframe *\nfind_next_traceframe_in_range (CORE_ADDR lo, CORE_ADDR hi, int inside_p,\n\t\t\t       int *tfnump)\n{\n  struct traceframe *tframe;\n  CORE_ADDR tfaddr;\n\n  *tfnump = current_traceframe + 1;\n  tframe = find_traceframe (*tfnump);\n  /* The search is not supposed to wrap around.  */\n  if (!tframe)\n    {\n      *tfnump = -1;\n      return NULL;\n    }\n\n  for (; tframe->tpnum != 0; tframe = NEXT_TRACEFRAME (tframe))\n    {\n      tfaddr = get_traceframe_address (tframe);\n      if (inside_p\n\t  ? (lo <= tfaddr && tfaddr <= hi)\n\t  : (lo > tfaddr || tfaddr > hi))\n\treturn tframe;\n      ++*tfnump;\n    }\n\n  *tfnump = -1;\n  return NULL;\n}\n\n/* Search for the next traceframe recorded by the given tracepoint.\n   Note that for multi-location tracepoints, this will find whatever\n   location appears first.  */\n\nstatic struct traceframe *\nfind_next_traceframe_by_tracepoint (int num, int *tfnump)\n{\n  struct traceframe *tframe;\n\n  *tfnump = current_traceframe + 1;\n  tframe = find_traceframe (*tfnump);\n  /* The search is not supposed to wrap around.  */\n  if (!tframe)\n    {\n      *tfnump = -1;\n      return NULL;\n    }\n\n  for (; tframe->tpnum != 0; tframe = NEXT_TRACEFRAME (tframe))\n    {\n      if (tframe->tpnum == num)\n\treturn tframe;\n      ++*tfnump;\n    }\n\n  *tfnump = -1;\n  return NULL;\n}\n\n#endif\n\n#ifndef IN_PROCESS_AGENT\n\n/* Clear all past trace state.  */\n\nstatic void\ncmd_qtinit (char *packet)\n{\n  struct trace_state_variable *tsv, *prev, *next;\n\n  /* Make sure we don't try to read from a trace frame.  */\n  current_traceframe = -1;\n\n  stop_tracing ();\n\n  trace_debug (\"Initializing the trace\");\n\n  clear_installed_tracepoints ();\n  clear_readonly_regions ();\n\n  tracepoints = NULL;\n  last_tracepoint = NULL;\n\n  /* Clear out any leftover trace state variables.  Ones with target\n     defined getters should be kept however.  */\n  prev = NULL;\n  tsv = trace_state_variables;\n  while (tsv)\n    {\n      trace_debug (\"Looking at var %d\", tsv->number);\n      if (tsv->getter == NULL)\n\t{\n\t  next = tsv->next;\n\t  if (prev)\n\t    prev->next = next;\n\t  else\n\t    trace_state_variables = next;\n\t  trace_debug (\"Deleting var %d\", tsv->number);\n\t  free (tsv);\n\t  tsv = next;\n\t}\n      else\n\t{\n\t  prev = tsv;\n\t  tsv = tsv->next;\n\t}\n    }\n\n  clear_trace_buffer ();\n  clear_inferior_trace_buffer ();\n\n  write_ok (packet);\n}\n\n/* Unprobe the UST marker at ADDRESS.  */\n\nstatic void\nunprobe_marker_at (CORE_ADDR address)\n{\n  char cmd[IPA_CMD_BUF_SIZE];\n\n  sprintf (cmd, \"unprobe_marker_at:%s\", paddress (address));\n  run_inferior_command (cmd, strlen (cmd) + 1);\n}\n\n/* Restore the program to its pre-tracing state.  This routine may be called\n   in error situations, so it needs to be careful about only restoring\n   from known-valid bits.  */\n\nstatic void\nclear_installed_tracepoints (void)\n{\n  struct tracepoint *tpoint;\n  struct tracepoint *prev_stpoint;\n\n  pause_all (1);\n\n  prev_stpoint = NULL;\n\n  /* Restore any bytes overwritten by tracepoints.  */\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    {\n      /* Catch the case where we might try to remove a tracepoint that\n\t was never actually installed.  */\n      if (tpoint->handle == NULL)\n\t{\n\t  trace_debug (\"Tracepoint %d at 0x%s was \"\n\t\t       \"never installed, nothing to clear\",\n\t\t       tpoint->number, paddress (tpoint->address));\n\t  continue;\n\t}\n\n      switch (tpoint->type)\n\t{\n\tcase trap_tracepoint:\n\t  delete_breakpoint (tpoint->handle);\n\t  break;\n\tcase fast_tracepoint:\n\t  delete_fast_tracepoint_jump (tpoint->handle);\n\t  break;\n\tcase static_tracepoint:\n\t  if (prev_stpoint != NULL\n\t      && prev_stpoint->address == tpoint->address)\n\t    /* Nothing to do.  We already unprobed a tracepoint set at\n\t       this marker address (and there can only be one probe\n\t       per marker).  */\n\t    ;\n\t  else\n\t    {\n\t      unprobe_marker_at (tpoint->address);\n\t      prev_stpoint = tpoint;\n\t    }\n\t  break;\n\t}\n\n      tpoint->handle = NULL;\n    }\n\n  unpause_all (1);\n}\n\n/* Parse a packet that defines a tracepoint.  */\n\nstatic void\ncmd_qtdp (char *own_buf)\n{\n  int tppacket;\n  /* Whether there is a trailing hyphen at the end of the QTDP packet.  */\n  int trail_hyphen = 0;\n  ULONGEST num;\n  ULONGEST addr;\n  ULONGEST count;\n  struct tracepoint *tpoint;\n  char *actparm;\n  char *packet = own_buf;\n\n  packet += strlen (\"QTDP:\");\n\n  /* A hyphen at the beginning marks a packet specifying actions for a\n     tracepoint already supplied.  */\n  tppacket = 1;\n  if (*packet == '-')\n    {\n      tppacket = 0;\n      ++packet;\n    }\n  packet = unpack_varlen_hex (packet, &num);\n  ++packet; /* skip a colon */\n  packet = unpack_varlen_hex (packet, &addr);\n  ++packet; /* skip a colon */\n\n  /* See if we already have this tracepoint.  */\n  tpoint = find_tracepoint (num, addr);\n\n  if (tppacket)\n    {\n      /* Duplicate tracepoints are never allowed.  */\n      if (tpoint)\n\t{\n\t  trace_debug (\"Tracepoint error: tracepoint %d\"\n\t\t       \" at 0x%s already exists\",\n\t\t       (int) num, paddress (addr));\n\t  write_enn (own_buf);\n\t  return;\n\t}\n\n      tpoint = add_tracepoint (num, addr);\n\n      tpoint->enabled = (*packet == 'E');\n      ++packet; /* skip 'E' */\n      ++packet; /* skip a colon */\n      packet = unpack_varlen_hex (packet, &count);\n      tpoint->step_count = count;\n      ++packet; /* skip a colon */\n      packet = unpack_varlen_hex (packet, &count);\n      tpoint->pass_count = count;\n      /* See if we have any of the additional optional fields.  */\n      while (*packet == ':')\n\t{\n\t  ++packet;\n\t  if (*packet == 'F')\n\t    {\n\t      tpoint->type = fast_tracepoint;\n\t      ++packet;\n\t      packet = unpack_varlen_hex (packet, &count);\n\t      tpoint->orig_size = count;\n\t    }\n\t  else if (*packet == 'S')\n\t    {\n\t      tpoint->type = static_tracepoint;\n\t      ++packet;\n\t    }\n\t  else if (*packet == 'X')\n\t    {\n\t      actparm = (char *) packet;\n\t      tpoint->cond = gdb_parse_agent_expr (&actparm);\n\t      packet = actparm;\n\t    }\n\t  else if (*packet == '-')\n\t    break;\n\t  else if (*packet == '\\0')\n\t    break;\n\t  else\n\t    trace_debug (\"Unknown optional tracepoint field\");\n\t}\n      if (*packet == '-')\n\t{\n\t  trail_hyphen = 1;\n\t  trace_debug (\"Also has actions\\n\");\n\t}\n\n      trace_debug (\"Defined %stracepoint %d at 0x%s, \"\n\t\t   \"enabled %d step %\" PRIu64 \" pass %\" PRIu64,\n\t\t   tpoint->type == fast_tracepoint ? \"fast \"\n\t\t   : tpoint->type == static_tracepoint ? \"static \" : \"\",\n\t\t   tpoint->number, paddress (tpoint->address), tpoint->enabled,\n\t\t   tpoint->step_count, tpoint->pass_count);\n    }\n  else if (tpoint)\n    add_tracepoint_action (tpoint, packet);\n  else\n    {\n      trace_debug (\"Tracepoint error: tracepoint %d at 0x%s not found\",\n\t\t   (int) num, paddress (addr));\n      write_enn (own_buf);\n      return;\n    }\n\n  /* Install tracepoint during tracing only once for each tracepoint location.\n     For each tracepoint loc, GDB may send multiple QTDP packets, and we can\n     determine the last QTDP packet for one tracepoint location by checking\n     trailing hyphen in QTDP packet.  */\n  if (tracing && !trail_hyphen)\n    {\n      struct tracepoint *tp = NULL;\n\n      /* Pause all threads temporarily while we patch tracepoints.  */\n      pause_all (0);\n\n      /* download_tracepoint will update global `tracepoints'\n\t list, so it is unsafe to leave threads in jump pad.  */\n      stabilize_threads ();\n\n      /* Freeze threads.  */\n      pause_all (1);\n\n\n      if (tpoint->type != trap_tracepoint)\n\t{\n\t  /* Find another fast or static tracepoint at the same address.  */\n\t  for (tp = tracepoints; tp; tp = tp->next)\n\t    {\n\t      if (tp->address == tpoint->address && tp->type == tpoint->type\n\t\t  && tp->number != tpoint->number)\n\t\tbreak;\n\t    }\n\n\t  /* TPOINT is installed at the same address as TP.  */\n\t  if (tp)\n\t    {\n\t      if (tpoint->type == fast_tracepoint)\n\t\tclone_fast_tracepoint (tpoint, tp);\n\t      else if (tpoint->type == static_tracepoint)\n\t\ttpoint->handle = (void *) -1;\n\t    }\n\t}\n\n      if (use_agent && tpoint->type == fast_tracepoint\n\t  && agent_capability_check (AGENT_CAPA_FAST_TRACE))\n\t{\n\t  /* Download and install fast tracepoint by agent.  */\n\t  if (tracepoint_send_agent (tpoint) == 0)\n\t    write_ok (own_buf);\n\t  else\n\t    {\n\t      write_enn (own_buf);\n\t      remove_tracepoint (tpoint);\n\t    }\n\t}\n      else\n\t{\n\t  download_tracepoint (tpoint);\n\n\t  if (tpoint->type == trap_tracepoint || tp == NULL)\n\t    {\n\t      install_tracepoint (tpoint, own_buf);\n\t      if (strcmp (own_buf, \"OK\") != 0)\n\t\tremove_tracepoint (tpoint);\n\t    }\n\t  else\n\t    write_ok (own_buf);\n\t}\n\n      unpause_all (1);\n      return;\n    }\n\n  write_ok (own_buf);\n}\n\nstatic void\ncmd_qtdpsrc (char *own_buf)\n{\n  ULONGEST num, addr, start, slen;\n  struct tracepoint *tpoint;\n  char *packet = own_buf;\n  char *saved, *srctype, *src;\n  size_t nbytes;\n  struct source_string *last, *newlast;\n\n  packet += strlen (\"QTDPsrc:\");\n\n  packet = unpack_varlen_hex (packet, &num);\n  ++packet; /* skip a colon */\n  packet = unpack_varlen_hex (packet, &addr);\n  ++packet; /* skip a colon */\n\n  /* See if we already have this tracepoint.  */\n  tpoint = find_tracepoint (num, addr);\n\n  if (!tpoint)\n    {\n      trace_debug (\"Tracepoint error: tracepoint %d at 0x%s not found\",\n\t\t   (int) num, paddress (addr));\n      write_enn (own_buf);\n      return;\n    }\n\n  saved = packet;\n  packet = strchr (packet, ':');\n  srctype = xmalloc (packet - saved + 1);\n  memcpy (srctype, saved, packet - saved);\n  srctype[packet - saved] = '\\0';\n  ++packet;\n  packet = unpack_varlen_hex (packet, &start);\n  ++packet; /* skip a colon */\n  packet = unpack_varlen_hex (packet, &slen);\n  ++packet; /* skip a colon */\n  src = xmalloc (slen + 1);\n  nbytes = hex2bin (packet, (gdb_byte *) src, strlen (packet) / 2);\n  src[nbytes] = '\\0';\n\n  newlast = xmalloc (sizeof (struct source_string));\n  newlast->type = srctype;\n  newlast->str = src;\n  newlast->next = NULL;\n  /* Always add a source string to the end of the list;\n     this keeps sequences of actions/commands in the right\n     order.  */\n  if (tpoint->source_strings)\n    {\n      for (last = tpoint->source_strings; last->next; last = last->next)\n\t;\n      last->next = newlast;\n    }\n  else\n    tpoint->source_strings = newlast;\n\n  write_ok (own_buf);\n}\n\nstatic void\ncmd_qtdv (char *own_buf)\n{\n  ULONGEST num, val, builtin;\n  char *varname;\n  size_t nbytes;\n  struct trace_state_variable *tsv;\n  char *packet = own_buf;\n\n  packet += strlen (\"QTDV:\");\n\n  packet = unpack_varlen_hex (packet, &num);\n  ++packet; /* skip a colon */\n  packet = unpack_varlen_hex (packet, &val);\n  ++packet; /* skip a colon */\n  packet = unpack_varlen_hex (packet, &builtin);\n  ++packet; /* skip a colon */\n\n  nbytes = strlen (packet) / 2;\n  varname = xmalloc (nbytes + 1);\n  nbytes = hex2bin (packet, (gdb_byte *) varname, nbytes);\n  varname[nbytes] = '\\0';\n\n  tsv = create_trace_state_variable (num, 1);\n  tsv->initial_value = (LONGEST) val;\n  tsv->name = varname;\n\n  set_trace_state_variable_value (num, (LONGEST) val);\n\n  write_ok (own_buf);\n}\n\nstatic void\ncmd_qtenable_disable (char *own_buf, int enable)\n{\n  char *packet = own_buf;\n  ULONGEST num, addr;\n  struct tracepoint *tp;\n\n  packet += strlen (enable ? \"QTEnable:\" : \"QTDisable:\");\n  packet = unpack_varlen_hex (packet, &num);\n  ++packet; /* skip a colon */\n  packet = unpack_varlen_hex (packet, &addr);\n\n  tp = find_tracepoint (num, addr);\n\n  if (tp)\n    {\n      if ((enable && tp->enabled) || (!enable && !tp->enabled))\n\t{\n\t  trace_debug (\"Tracepoint %d at 0x%s is already %s\",\n\t\t       (int) num, paddress (addr),\n\t\t       enable ? \"enabled\" : \"disabled\");\n\t  write_ok (own_buf);\n\t  return;\n\t}\n\n      trace_debug (\"%s tracepoint %d at 0x%s\",\n\t\t   enable ? \"Enabling\" : \"Disabling\",\n\t\t   (int) num, paddress (addr));\n\n      tp->enabled = enable;\n\n      if (tp->type == fast_tracepoint || tp->type == static_tracepoint)\n\t{\n\t  int ret;\n\t  int offset = offsetof (struct tracepoint, enabled);\n\t  CORE_ADDR obj_addr = tp->obj_addr_on_target + offset;\n\n\t  ret = prepare_to_access_memory ();\n\t  if (ret)\n\t    {\n\t      trace_debug (\"Failed to temporarily stop inferior threads\");\n\t      write_enn (own_buf);\n\t      return;\n\t    }\n\t  \n\t  ret = write_inferior_integer (obj_addr, enable);\n\t  done_accessing_memory ();\n\t  \n\t  if (ret)\n\t    {\n\t      trace_debug (\"Cannot write enabled flag into \"\n\t\t\t   \"inferior process memory\");\n\t      write_enn (own_buf);\n\t      return;\n\t    }\n\t}\n\n      write_ok (own_buf);\n    }\n  else\n    {\n      trace_debug (\"Tracepoint %d at 0x%s not found\",\n\t\t   (int) num, paddress (addr));\n      write_enn (own_buf);\n    }\n}\n\nstatic void\ncmd_qtv (char *own_buf)\n{\n  ULONGEST num;\n  LONGEST val = 0;\n  int err;\n  char *packet = own_buf;\n\n  packet += strlen (\"qTV:\");\n  unpack_varlen_hex (packet, &num);\n\n  if (current_traceframe >= 0)\n    {\n      err = traceframe_read_tsv ((int) num, &val);\n      if (err)\n\t{\n\t  strcpy (own_buf, \"U\");\n\t  return;\n\t}\n    }\n  /* Only make tsv's be undefined before the first trace run.  After a\n     trace run is over, the user might want to see the last value of\n     the tsv, and it might not be available in a traceframe.  */\n  else if (!tracing && strcmp (tracing_stop_reason, \"tnotrun\") == 0)\n    {\n      strcpy (own_buf, \"U\");\n      return;\n    }\n  else\n    val = get_trace_state_variable_value (num);\n\n  sprintf (own_buf, \"V%s\", phex_nz (val, 0));\n}\n\n/* Clear out the list of readonly regions.  */\n\nstatic void\nclear_readonly_regions (void)\n{\n  struct readonly_region *roreg;\n\n  while (readonly_regions)\n    {\n      roreg = readonly_regions;\n      readonly_regions = readonly_regions->next;\n      free (roreg);\n    }\n}\n\n/* Parse the collection of address ranges whose contents GDB believes\n   to be unchanging and so can be read directly from target memory\n   even while looking at a traceframe.  */\n\nstatic void\ncmd_qtro (char *own_buf)\n{\n  ULONGEST start, end;\n  struct readonly_region *roreg;\n  char *packet = own_buf;\n\n  trace_debug (\"Want to mark readonly regions\");\n\n  clear_readonly_regions ();\n\n  packet += strlen (\"QTro\");\n\n  while (*packet == ':')\n    {\n      ++packet;  /* skip a colon */\n      packet = unpack_varlen_hex (packet, &start);\n      ++packet;  /* skip a comma */\n      packet = unpack_varlen_hex (packet, &end);\n      roreg = xmalloc (sizeof (struct readonly_region));\n      roreg->start = start;\n      roreg->end = end;\n      roreg->next = readonly_regions;\n      readonly_regions = roreg;\n      trace_debug (\"Added readonly region from 0x%s to 0x%s\",\n\t\t   paddress (roreg->start), paddress (roreg->end));\n    }\n\n  write_ok (own_buf);\n}\n\n/* Test to see if the given range is in our list of readonly ranges.\n   We only test for being entirely within a range, GDB is not going to\n   send a single memory packet that spans multiple regions.  */\n\nint\nin_readonly_region (CORE_ADDR addr, ULONGEST length)\n{\n  struct readonly_region *roreg;\n\n  for (roreg = readonly_regions; roreg; roreg = roreg->next)\n    if (roreg->start <= addr && (addr + length - 1) <= roreg->end)\n      return 1;\n\n  return 0;\n}\n\n/* The maximum size of a jump pad entry.  */\nstatic const int max_jump_pad_size = 0x100;\n\nstatic CORE_ADDR gdb_jump_pad_head;\n\n/* Return the address of the next free jump space.  */\n\nstatic CORE_ADDR\nget_jump_space_head (void)\n{\n  if (gdb_jump_pad_head == 0)\n    {\n      if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_jump_pad_buffer,\n\t\t\t\t      &gdb_jump_pad_head))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"error extracting jump_pad_buffer\");\n\t}\n    }\n\n  return gdb_jump_pad_head;\n}\n\n/* Reserve USED bytes from the jump space.  */\n\nstatic void\nclaim_jump_space (ULONGEST used)\n{\n  trace_debug (\"claim_jump_space reserves %s bytes at %s\",\n\t       pulongest (used), paddress (gdb_jump_pad_head));\n  gdb_jump_pad_head += used;\n}\n\nstatic CORE_ADDR trampoline_buffer_head = 0;\nstatic CORE_ADDR trampoline_buffer_tail;\n\n/* Reserve USED bytes from the trampoline buffer and return the\n   address of the start of the reserved space in TRAMPOLINE.  Returns\n   non-zero if the space is successfully claimed.  */\n\nint\nclaim_trampoline_space (ULONGEST used, CORE_ADDR *trampoline)\n{\n  if (!trampoline_buffer_head)\n    {\n      if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_trampoline_buffer,\n\t\t\t\t      &trampoline_buffer_tail))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"error extracting trampoline_buffer\");\n\t}\n\n      if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_trampoline_buffer_end,\n\t\t\t\t      &trampoline_buffer_head))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"error extracting trampoline_buffer_end\");\n\t}\n    }\n\n  /* Start claiming space from the top of the trampoline space.  If\n     the space is located at the bottom of the virtual address space,\n     this reduces the possibility that corruption will occur if a null\n     pointer is used to write to memory.  */\n  if (trampoline_buffer_head - trampoline_buffer_tail < used)\n    {\n      trace_debug (\"claim_trampoline_space failed to reserve %s bytes\",\n\t\t   pulongest (used));\n      return 0;\n    }\n\n  trampoline_buffer_head -= used;\n\n  trace_debug (\"claim_trampoline_space reserves %s bytes at %s\",\n\t       pulongest (used), paddress (trampoline_buffer_head));\n\n  *trampoline = trampoline_buffer_head;\n  return 1;\n}\n\n/* Returns non-zero if there is space allocated for use in trampolines\n   for fast tracepoints.  */\n\nint\nhave_fast_tracepoint_trampoline_buffer (char *buf)\n{\n  CORE_ADDR trampoline_end, errbuf;\n\n  if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_trampoline_buffer_end,\n\t\t\t\t  &trampoline_end))\n    {\n      internal_error (__FILE__, __LINE__,\n\t\t      \"error extracting trampoline_buffer_end\");\n    }\n  \n  if (buf)\n    {\n      buf[0] = '\\0';\n      strcpy (buf, \"was claiming\");\n      if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_trampoline_buffer_error,\n\t\t\t\t  &errbuf))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"error extracting errbuf\");\n\t}\n\n      read_inferior_memory (errbuf, (unsigned char *) buf, 100);\n    }\n\n  return trampoline_end != 0;\n}\n\n/* Ask the IPA to probe the marker at ADDRESS.  Returns -1 if running\n   the command fails, or 0 otherwise.  If the command ran\n   successfully, but probing the marker failed, ERROUT will be filled\n   with the error to reply to GDB, and -1 is also returned.  This\n   allows directly passing IPA errors to GDB.  */\n\nstatic int\nprobe_marker_at (CORE_ADDR address, char *errout)\n{\n  char cmd[IPA_CMD_BUF_SIZE];\n  int err;\n\n  sprintf (cmd, \"probe_marker_at:%s\", paddress (address));\n  err = run_inferior_command (cmd, strlen (cmd) + 1);\n\n  if (err == 0)\n    {\n      if (*cmd == 'E')\n\t{\n\t  strcpy (errout, cmd);\n\t  return -1;\n\t}\n    }\n\n  return err;\n}\n\nstatic void\nclone_fast_tracepoint (struct tracepoint *to, const struct tracepoint *from)\n{\n  to->jump_pad = from->jump_pad;\n  to->jump_pad_end = from->jump_pad_end;\n  to->trampoline = from->trampoline;\n  to->trampoline_end = from->trampoline_end;\n  to->adjusted_insn_addr = from->adjusted_insn_addr;\n  to->adjusted_insn_addr_end = from->adjusted_insn_addr_end;\n  to->handle = from->handle;\n\n  gdb_assert (from->handle);\n  inc_ref_fast_tracepoint_jump ((struct fast_tracepoint_jump *) from->handle);\n}\n\n#define MAX_JUMP_SIZE 20\n\n/* Install fast tracepoint.  Return 0 if successful, otherwise return\n   non-zero.  */\n\nstatic int\ninstall_fast_tracepoint (struct tracepoint *tpoint, char *errbuf)\n{\n  CORE_ADDR jentry, jump_entry;\n  CORE_ADDR trampoline;\n  ULONGEST trampoline_size;\n  int err = 0;\n  /* The jump to the jump pad of the last fast tracepoint\n     installed.  */\n  unsigned char fjump[MAX_JUMP_SIZE];\n  ULONGEST fjump_size;\n\n  if (tpoint->orig_size < target_get_min_fast_tracepoint_insn_len ())\n    {\n      trace_debug (\"Requested a fast tracepoint on an instruction \"\n\t\t   \"that is of less than the minimum length.\");\n      return 0;\n    }\n\n  jentry = jump_entry = get_jump_space_head ();\n\n  trampoline = 0;\n  trampoline_size = 0;\n\n  /* Install the jump pad.  */\n  err = install_fast_tracepoint_jump_pad (tpoint->obj_addr_on_target,\n\t\t\t\t\t  tpoint->address,\n\t\t\t\t\t  ipa_sym_addrs.addr_gdb_collect,\n\t\t\t\t\t  ipa_sym_addrs.addr_collecting,\n\t\t\t\t\t  tpoint->orig_size,\n\t\t\t\t\t  &jentry,\n\t\t\t\t\t  &trampoline, &trampoline_size,\n\t\t\t\t\t  fjump, &fjump_size,\n\t\t\t\t\t  &tpoint->adjusted_insn_addr,\n\t\t\t\t\t  &tpoint->adjusted_insn_addr_end,\n\t\t\t\t\t  errbuf);\n\n  if (err)\n    return 1;\n\n  /* Wire it in.  */\n  tpoint->handle = set_fast_tracepoint_jump (tpoint->address, fjump,\n\t\t\t\t\t     fjump_size);\n\n  if (tpoint->handle != NULL)\n    {\n      tpoint->jump_pad = jump_entry;\n      tpoint->jump_pad_end = jentry;\n      tpoint->trampoline = trampoline;\n      tpoint->trampoline_end = trampoline + trampoline_size;\n\n      /* Pad to 8-byte alignment.  */\n      jentry = ((jentry + 7) & ~0x7);\n      claim_jump_space (jentry - jump_entry);\n    }\n\n  return 0;\n}\n\n\n/* Install tracepoint TPOINT, and write reply message in OWN_BUF.  */\n\nstatic void\ninstall_tracepoint (struct tracepoint *tpoint, char *own_buf)\n{\n  tpoint->handle = NULL;\n  *own_buf = '\\0';\n\n  if (tpoint->type == trap_tracepoint)\n    {\n      /* Tracepoints are installed as memory breakpoints.  Just go\n\t ahead and install the trap.  The breakpoints module\n\t handles duplicated breakpoints, and the memory read\n\t routine handles un-patching traps from memory reads.  */\n      tpoint->handle = set_breakpoint_at (tpoint->address,\n\t\t\t\t\t  tracepoint_handler);\n    }\n  else if (tpoint->type == fast_tracepoint || tpoint->type == static_tracepoint)\n    {\n      if (!agent_loaded_p ())\n\t{\n\t  trace_debug (\"Requested a %s tracepoint, but fast \"\n\t\t       \"tracepoints aren't supported.\",\n\t\t       tpoint->type == static_tracepoint ? \"static\" : \"fast\");\n\t  write_e_ipa_not_loaded (own_buf);\n\t  return;\n\t}\n      if (tpoint->type == static_tracepoint\n\t  && !in_process_agent_supports_ust ())\n\t{\n\t  trace_debug (\"Requested a static tracepoint, but static \"\n\t\t       \"tracepoints are not supported.\");\n\t  write_e_ust_not_loaded (own_buf);\n\t  return;\n\t}\n\n      if (tpoint->type == fast_tracepoint)\n\tinstall_fast_tracepoint (tpoint, own_buf);\n      else\n\t{\n\t  if (probe_marker_at (tpoint->address, own_buf) == 0)\n\t    tpoint->handle = (void *) -1;\n\t}\n\n    }\n  else\n    internal_error (__FILE__, __LINE__, \"Unknown tracepoint type\");\n\n  if (tpoint->handle == NULL)\n    {\n      if (*own_buf == '\\0')\n\twrite_enn (own_buf);\n    }\n  else\n    write_ok (own_buf);\n}\n\nstatic void download_tracepoint_1 (struct tracepoint *tpoint);\n\nstatic void\ncmd_qtstart (char *packet)\n{\n  struct tracepoint *tpoint, *prev_ftpoint, *prev_stpoint;\n  CORE_ADDR tpptr = 0, prev_tpptr = 0;\n\n  trace_debug (\"Starting the trace\");\n\n  /* Pause all threads temporarily while we patch tracepoints.  */\n  pause_all (0);\n\n  /* Get threads out of jump pads.  Safe to do here, since this is a\n     top level command.  And, required to do here, since we're\n     deleting/rewriting jump pads.  */\n\n  stabilize_threads ();\n\n  /* Freeze threads.  */\n  pause_all (1);\n\n  /* Sync the fast tracepoints list in the inferior ftlib.  */\n  if (agent_loaded_p ())\n    download_trace_state_variables ();\n\n  /* No previous fast tpoint yet.  */\n  prev_ftpoint = NULL;\n\n  /* No previous static tpoint yet.  */\n  prev_stpoint = NULL;\n\n  *packet = '\\0';\n\n  /* Start out empty.  */\n  if (agent_loaded_p ())\n    write_inferior_data_ptr (ipa_sym_addrs.addr_tracepoints, 0);\n\n  /* Download and install tracepoints.  */\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    {\n      /* Ensure all the hit counts start at zero.  */\n      tpoint->hit_count = 0;\n      tpoint->traceframe_usage = 0;\n\n      if (tpoint->type == trap_tracepoint)\n\t{\n\t  /* Tracepoints are installed as memory breakpoints.  Just go\n\t     ahead and install the trap.  The breakpoints module\n\t     handles duplicated breakpoints, and the memory read\n\t     routine handles un-patching traps from memory reads.  */\n\t  tpoint->handle = set_breakpoint_at (tpoint->address,\n\t\t\t\t\t      tracepoint_handler);\n\t}\n      else if (tpoint->type == fast_tracepoint\n\t       || tpoint->type == static_tracepoint)\n\t{\n\t  if (maybe_write_ipa_not_loaded (packet))\n\t    {\n\t      trace_debug (\"Requested a %s tracepoint, but fast \"\n\t\t\t   \"tracepoints aren't supported.\",\n\t\t\t   tpoint->type == static_tracepoint\n\t\t\t   ? \"static\" : \"fast\");\n\t      break;\n\t    }\n\n\t  if (tpoint->type == fast_tracepoint)\n\t    {\n\t      int use_agent_p\n\t\t= use_agent && agent_capability_check (AGENT_CAPA_FAST_TRACE);\n\n\t      if (prev_ftpoint != NULL\n\t\t  && prev_ftpoint->address == tpoint->address)\n\t\t{\n\t\t  if (use_agent_p)\n\t\t    tracepoint_send_agent (tpoint);\n\t\t  else\n\t\t    download_tracepoint_1 (tpoint);\n\n\t\t  clone_fast_tracepoint (tpoint, prev_ftpoint);\n\t\t}\n\t      else\n\t\t{\n\t\t  /* Tracepoint is installed successfully?  */\n\t\t  int installed = 0;\n\n\t\t  /* Download and install fast tracepoint by agent.  */\n\t\t  if (use_agent_p)\n\t\t    installed = !tracepoint_send_agent (tpoint);\n\t\t  else\n\t\t    {\n\t\t      download_tracepoint_1 (tpoint);\n\t\t      installed = !install_fast_tracepoint (tpoint, packet);\n\t\t    }\n\n\t\t  if (installed)\n\t\t    prev_ftpoint = tpoint;\n\t\t}\n\t    }\n\t  else\n\t    {\n\t      if (!in_process_agent_supports_ust ())\n\t\t{\n\t\t  trace_debug (\"Requested a static tracepoint, but static \"\n\t\t\t       \"tracepoints are not supported.\");\n\t\t  break;\n\t\t}\n\n\t      download_tracepoint_1 (tpoint);\n\t      /* Can only probe a given marker once.  */\n\t      if (prev_stpoint != NULL\n\t\t  && prev_stpoint->address == tpoint->address)\n\t\ttpoint->handle = (void *) -1;\n\t      else\n\t\t{\n\t\t  if (probe_marker_at (tpoint->address, packet) == 0)\n\t\t    {\n\t\t      tpoint->handle = (void *) -1;\n\n\t\t      /* So that we can handle multiple static tracepoints\n\t\t\t at the same address easily.  */\n\t\t      prev_stpoint = tpoint;\n\t\t    }\n\t\t}\n\t    }\n\n\t  prev_tpptr = tpptr;\n\t  tpptr = tpoint->obj_addr_on_target;\n\n\t  if (tpoint == tracepoints)\n\t    /* First object in list, set the head pointer in the\n\t       inferior.  */\n\t    write_inferior_data_ptr (ipa_sym_addrs.addr_tracepoints, tpptr);\n\t  else\n\t    write_inferior_data_ptr (prev_tpptr + offsetof (struct tracepoint,\n\t\t\t\t\t\t\t    next),\n\t\t\t\t     tpptr);\n\t}\n\n      /* Any failure in the inner loop is sufficient cause to give\n\t up.  */\n      if (tpoint->handle == NULL)\n\tbreak;\n    }\n\n  /* Any error in tracepoint insertion is unacceptable; better to\n     address the problem now, than end up with a useless or misleading\n     trace run.  */\n  if (tpoint != NULL)\n    {\n      clear_installed_tracepoints ();\n      if (*packet == '\\0')\n\twrite_enn (packet);\n      unpause_all (1);\n      return;\n    }\n\n  stopping_tracepoint = NULL;\n  trace_buffer_is_full = 0;\n  expr_eval_result = expr_eval_no_error;\n  error_tracepoint = NULL;\n  tracing_start_time = get_timestamp ();\n\n  /* Tracing is now active, hits will now start being logged.  */\n  tracing = 1;\n\n  if (agent_loaded_p ())\n    {\n      if (write_inferior_integer (ipa_sym_addrs.addr_tracing, 1))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"Error setting tracing variable in lib\");\n\t}\n\n      if (write_inferior_data_pointer (ipa_sym_addrs.addr_stopping_tracepoint,\n\t\t\t\t       0))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"Error clearing stopping_tracepoint variable\"\n\t\t\t  \" in lib\");\n\t}\n\n      if (write_inferior_integer (ipa_sym_addrs.addr_trace_buffer_is_full, 0))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"Error clearing trace_buffer_is_full variable\"\n\t\t\t  \" in lib\");\n\t}\n\n      stop_tracing_bkpt = set_breakpoint_at (ipa_sym_addrs.addr_stop_tracing,\n\t\t\t\t\t     stop_tracing_handler);\n      if (stop_tracing_bkpt == NULL)\n\terror (\"Error setting stop_tracing breakpoint\");\n\n      flush_trace_buffer_bkpt\n\t= set_breakpoint_at (ipa_sym_addrs.addr_flush_trace_buffer,\n\t\t\t     flush_trace_buffer_handler);\n      if (flush_trace_buffer_bkpt == NULL)\n\terror (\"Error setting flush_trace_buffer breakpoint\");\n    }\n\n  unpause_all (1);\n\n  write_ok (packet);\n}\n\n/* End a tracing run, filling in a stop reason to report back to GDB,\n   and removing the tracepoints from the code.  */\n\nvoid\nstop_tracing (void)\n{\n  if (!tracing)\n    {\n      trace_debug (\"Tracing is already off, ignoring\");\n      return;\n    }\n\n  trace_debug (\"Stopping the trace\");\n\n  /* Pause all threads before removing fast jumps from memory,\n     breakpoints, and touching IPA state variables (inferior memory).\n     Some thread may hit the internal tracing breakpoints, or be\n     collecting this moment, but that's ok, we don't release the\n     tpoint object's memory or the jump pads here (we only do that\n     when we're sure we can move all threads out of the jump pads).\n     We can't now, since we may be getting here due to the inferior\n     agent calling us.  */\n  pause_all (1);\n\n  /* Stop logging. Tracepoints can still be hit, but they will not be\n     recorded.  */\n  tracing = 0;\n  if (agent_loaded_p ())\n    {\n      if (write_inferior_integer (ipa_sym_addrs.addr_tracing, 0))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"Error clearing tracing variable in lib\");\n\t}\n    }\n\n  tracing_stop_time = get_timestamp ();\n  tracing_stop_reason = \"t???\";\n  tracing_stop_tpnum = 0;\n  if (stopping_tracepoint)\n    {\n      trace_debug (\"Stopping the trace because \"\n\t\t   \"tracepoint %d was hit %\" PRIu64 \" times\",\n\t\t   stopping_tracepoint->number,\n\t\t   stopping_tracepoint->pass_count);\n      tracing_stop_reason = \"tpasscount\";\n      tracing_stop_tpnum = stopping_tracepoint->number;\n    }\n  else if (trace_buffer_is_full)\n    {\n      trace_debug (\"Stopping the trace because the trace buffer is full\");\n      tracing_stop_reason = \"tfull\";\n    }\n  else if (expr_eval_result != expr_eval_no_error)\n    {\n      trace_debug (\"Stopping the trace because of an expression eval error\");\n      tracing_stop_reason = eval_result_names[expr_eval_result];\n      tracing_stop_tpnum = error_tracepoint->number;\n    }\n#ifndef IN_PROCESS_AGENT\n  else if (!gdb_connected ())\n    {\n      trace_debug (\"Stopping the trace because GDB disconnected\");\n      tracing_stop_reason = \"tdisconnected\";\n    }\n#endif\n  else\n    {\n      trace_debug (\"Stopping the trace because of a tstop command\");\n      tracing_stop_reason = \"tstop\";\n    }\n\n  stopping_tracepoint = NULL;\n  error_tracepoint = NULL;\n\n  /* Clear out the tracepoints.  */\n  clear_installed_tracepoints ();\n\n  if (agent_loaded_p ())\n    {\n      /* Pull in fast tracepoint trace frames from the inferior lib\n\t buffer into our buffer, even if our buffer is already full,\n\t because we want to present the full number of created frames\n\t in addition to what fit in the trace buffer.  */\n      upload_fast_traceframes ();\n    }\n\n  if (stop_tracing_bkpt != NULL)\n    {\n      delete_breakpoint (stop_tracing_bkpt);\n      stop_tracing_bkpt = NULL;\n    }\n\n  if (flush_trace_buffer_bkpt != NULL)\n    {\n      delete_breakpoint (flush_trace_buffer_bkpt);\n      flush_trace_buffer_bkpt = NULL;\n    }\n\n  unpause_all (1);\n}\n\nstatic int\nstop_tracing_handler (CORE_ADDR addr)\n{\n  trace_debug (\"lib hit stop_tracing\");\n\n  /* Don't actually handle it here.  When we stop tracing we remove\n     breakpoints from the inferior, and that is not allowed in a\n     breakpoint handler (as the caller is walking the breakpoint\n     list).  */\n  return 0;\n}\n\nstatic int\nflush_trace_buffer_handler (CORE_ADDR addr)\n{\n  trace_debug (\"lib hit flush_trace_buffer\");\n  return 0;\n}\n\nstatic void\ncmd_qtstop (char *packet)\n{\n  stop_tracing ();\n  write_ok (packet);\n}\n\nstatic void\ncmd_qtdisconnected (char *own_buf)\n{\n  ULONGEST setting;\n  char *packet = own_buf;\n\n  packet += strlen (\"QTDisconnected:\");\n\n  unpack_varlen_hex (packet, &setting);\n\n  write_ok (own_buf);\n\n  disconnected_tracing = setting;\n}\n\nstatic void\ncmd_qtframe (char *own_buf)\n{\n  ULONGEST frame, pc, lo, hi, num;\n  int tfnum, tpnum;\n  struct traceframe *tframe;\n  char *packet = own_buf;\n\n  packet += strlen (\"QTFrame:\");\n\n  if (strncmp (packet, \"pc:\", strlen (\"pc:\")) == 0)\n    {\n      packet += strlen (\"pc:\");\n      unpack_varlen_hex (packet, &pc);\n      trace_debug (\"Want to find next traceframe at pc=0x%s\", paddress (pc));\n      tframe = find_next_traceframe_in_range (pc, pc, 1, &tfnum);\n    }\n  else if (strncmp (packet, \"range:\", strlen (\"range:\")) == 0)\n    {\n      packet += strlen (\"range:\");\n      packet = unpack_varlen_hex (packet, &lo);\n      ++packet;\n      unpack_varlen_hex (packet, &hi);\n      trace_debug (\"Want to find next traceframe in the range 0x%s to 0x%s\",\n\t\t   paddress (lo), paddress (hi));\n      tframe = find_next_traceframe_in_range (lo, hi, 1, &tfnum);\n    }\n  else if (strncmp (packet, \"outside:\", strlen (\"outside:\")) == 0)\n    {\n      packet += strlen (\"outside:\");\n      packet = unpack_varlen_hex (packet, &lo);\n      ++packet;\n      unpack_varlen_hex (packet, &hi);\n      trace_debug (\"Want to find next traceframe \"\n\t\t   \"outside the range 0x%s to 0x%s\",\n\t\t   paddress (lo), paddress (hi));\n      tframe = find_next_traceframe_in_range (lo, hi, 0, &tfnum);\n    }\n  else if (strncmp (packet, \"tdp:\", strlen (\"tdp:\")) == 0)\n    {\n      packet += strlen (\"tdp:\");\n      unpack_varlen_hex (packet, &num);\n      tpnum = (int) num;\n      trace_debug (\"Want to find next traceframe for tracepoint %d\", tpnum);\n      tframe = find_next_traceframe_by_tracepoint (tpnum, &tfnum);\n    }\n  else\n    {\n      unpack_varlen_hex (packet, &frame);\n      tfnum = (int) frame;\n      if (tfnum == -1)\n\t{\n\t  trace_debug (\"Want to stop looking at traceframes\");\n\t  current_traceframe = -1;\n\t  write_ok (own_buf);\n\t  return;\n\t}\n      trace_debug (\"Want to look at traceframe %d\", tfnum);\n      tframe = find_traceframe (tfnum);\n    }\n\n  if (tframe)\n    {\n      current_traceframe = tfnum;\n      sprintf (own_buf, \"F%xT%x\", tfnum, tframe->tpnum);\n    }\n  else\n    sprintf (own_buf, \"F-1\");\n}\n\nstatic void\ncmd_qtstatus (char *packet)\n{\n  char *stop_reason_rsp = NULL;\n  char *buf1, *buf2, *buf3, *str;\n  int slen;\n\n  /* Translate the plain text of the notes back into hex for\n     transmission.  */\n\n  str = (tracing_user_name ? tracing_user_name : \"\");\n  slen = strlen (str);\n  buf1 = (char *) alloca (slen * 2 + 1);\n  bin2hex ((gdb_byte *) str, buf1, slen);\n\n  str = (tracing_notes ? tracing_notes : \"\");\n  slen = strlen (str);\n  buf2 = (char *) alloca (slen * 2 + 1);\n  bin2hex ((gdb_byte *) str, buf2, slen);\n\n  str = (tracing_stop_note ? tracing_stop_note : \"\");\n  slen = strlen (str);\n  buf3 = (char *) alloca (slen * 2 + 1);\n  bin2hex ((gdb_byte *) str, buf3, slen);\n\n  trace_debug (\"Returning trace status as %d, stop reason %s\",\n\t       tracing, tracing_stop_reason);\n\n  if (agent_loaded_p ())\n    {\n      pause_all (1);\n\n      upload_fast_traceframes ();\n\n      unpause_all (1);\n   }\n\n  stop_reason_rsp = (char *) tracing_stop_reason;\n\n  /* The user visible error string in terror needs to be hex encoded.\n     We leave it as plain string in `tracing_stop_reason' to ease\n     debugging.  */\n  if (strncmp (stop_reason_rsp, \"terror:\", strlen (\"terror:\")) == 0)\n    {\n      const char *result_name;\n      int hexstr_len;\n      char *p;\n\n      result_name = stop_reason_rsp + strlen (\"terror:\");\n      hexstr_len = strlen (result_name) * 2;\n      p = stop_reason_rsp = alloca (strlen (\"terror:\") + hexstr_len + 1);\n      strcpy (p, \"terror:\");\n      p += strlen (p);\n      bin2hex ((gdb_byte *) result_name, p, strlen (result_name));\n    }\n\n  /* If this was a forced stop, include any stop note that was supplied.  */\n  if (strcmp (stop_reason_rsp, \"tstop\") == 0)\n    {\n      stop_reason_rsp = alloca (strlen (\"tstop:\") + strlen (buf3) + 1);\n      strcpy (stop_reason_rsp, \"tstop:\");\n      strcat (stop_reason_rsp, buf3);\n    }\n\n  sprintf (packet,\n\t   \"T%d;\"\n\t   \"%s:%x;\"\n\t   \"tframes:%x;tcreated:%x;\"\n\t   \"tfree:%x;tsize:%s;\"\n\t   \"circular:%d;\"\n\t   \"disconn:%d;\"\n\t   \"starttime:%s;stoptime:%s;\"\n\t   \"username:%s;notes:%s:\",\n\t   tracing ? 1 : 0,\n\t   stop_reason_rsp, tracing_stop_tpnum,\n\t   traceframe_count, traceframes_created,\n\t   free_space (), phex_nz (trace_buffer_hi - trace_buffer_lo, 0),\n\t   circular_trace_buffer,\n\t   disconnected_tracing,\n\t   phex_nz (tracing_start_time, sizeof (tracing_start_time)),\n\t   phex_nz (tracing_stop_time, sizeof (tracing_stop_time)),\n\t   buf1, buf2);\n}\n\nstatic void\ncmd_qtp (char *own_buf)\n{\n  ULONGEST num, addr;\n  struct tracepoint *tpoint;\n  char *packet = own_buf;\n\n  packet += strlen (\"qTP:\");\n\n  packet = unpack_varlen_hex (packet, &num);\n  ++packet; /* skip a colon */\n  packet = unpack_varlen_hex (packet, &addr);\n\n  /* See if we already have this tracepoint.  */\n  tpoint = find_tracepoint (num, addr);\n\n  if (!tpoint)\n    {\n      trace_debug (\"Tracepoint error: tracepoint %d at 0x%s not found\",\n\t\t   (int) num, paddress (addr));\n      write_enn (own_buf);\n      return;\n    }\n\n  sprintf (own_buf, \"V%\" PRIu64 \":%\" PRIu64 \"\", tpoint->hit_count,\n\t   tpoint->traceframe_usage);\n}\n\n/* State variables to help return all the tracepoint bits.  */\nstatic struct tracepoint *cur_tpoint;\nstatic unsigned int cur_action;\nstatic unsigned int cur_step_action;\nstatic struct source_string *cur_source_string;\nstatic struct trace_state_variable *cur_tsv;\n\n/* Compose a response that is an imitation of the syntax by which the\n   tracepoint was originally downloaded.  */\n\nstatic void\nresponse_tracepoint (char *packet, struct tracepoint *tpoint)\n{\n  char *buf;\n\n  sprintf (packet, \"T%x:%s:%c:%\" PRIx64 \":%\" PRIx64, tpoint->number,\n\t   paddress (tpoint->address),\n\t   (tpoint->enabled ? 'E' : 'D'), tpoint->step_count,\n\t   tpoint->pass_count);\n  if (tpoint->type == fast_tracepoint)\n    sprintf (packet + strlen (packet), \":F%x\", tpoint->orig_size);\n  else if (tpoint->type == static_tracepoint)\n    sprintf (packet + strlen (packet), \":S\");\n\n  if (tpoint->cond)\n    {\n      buf = gdb_unparse_agent_expr (tpoint->cond);\n      sprintf (packet + strlen (packet), \":X%x,%s\",\n\t       tpoint->cond->length, buf);\n      free (buf);\n    }\n}\n\n/* Compose a response that is an imitation of the syntax by which the\n   tracepoint action was originally downloaded (with the difference\n   that due to the way we store the actions, this will output a packet\n   per action, while GDB could have combined more than one action\n   per-packet.  */\n\nstatic void\nresponse_action (char *packet, struct tracepoint *tpoint,\n\t\t char *taction, int step)\n{\n  sprintf (packet, \"%c%x:%s:%s\",\n\t   (step ? 'S' : 'A'), tpoint->number, paddress (tpoint->address),\n\t   taction);\n}\n\n/* Compose a response that is an imitation of the syntax by which the\n   tracepoint source piece was originally downloaded.  */\n\nstatic void\nresponse_source (char *packet,\n\t\t struct tracepoint *tpoint, struct source_string *src)\n{\n  char *buf;\n  int len;\n\n  len = strlen (src->str);\n  buf = alloca (len * 2 + 1);\n  bin2hex ((gdb_byte *) src->str, buf, len);\n\n  sprintf (packet, \"Z%x:%s:%s:%x:%x:%s\",\n\t   tpoint->number, paddress (tpoint->address),\n\t   src->type, 0, len, buf);\n}\n\n/* Return the first piece of tracepoint definition, and initialize the\n   state machine that will iterate through all the tracepoint\n   bits.  */\n\nstatic void\ncmd_qtfp (char *packet)\n{\n  trace_debug (\"Returning first tracepoint definition piece\");\n\n  cur_tpoint = tracepoints;\n  cur_action = cur_step_action = 0;\n  cur_source_string = NULL;\n\n  if (cur_tpoint)\n    response_tracepoint (packet, cur_tpoint);\n  else\n    strcpy (packet, \"l\");\n}\n\n/* Return additional pieces of tracepoint definition.  Each action and\n   stepping action must go into its own packet, because of packet size\n   limits, and so we use state variables to deliver one piece at a\n   time.  */\n\nstatic void\ncmd_qtsp (char *packet)\n{\n  trace_debug (\"Returning subsequent tracepoint definition piece\");\n\n  if (!cur_tpoint)\n    {\n      /* This case would normally never occur, but be prepared for\n\t GDB misbehavior.  */\n      strcpy (packet, \"l\");\n    }\n  else if (cur_action < cur_tpoint->numactions)\n    {\n      response_action (packet, cur_tpoint,\n\t\t       cur_tpoint->actions_str[cur_action], 0);\n      ++cur_action;\n    }\n  else if (cur_step_action < cur_tpoint->num_step_actions)\n    {\n      response_action (packet, cur_tpoint,\n\t\t       cur_tpoint->step_actions_str[cur_step_action], 1);\n      ++cur_step_action;\n    }\n  else if ((cur_source_string\n\t    ? cur_source_string->next\n\t    : cur_tpoint->source_strings))\n    {\n      if (cur_source_string)\n\tcur_source_string = cur_source_string->next;\n      else\n\tcur_source_string = cur_tpoint->source_strings;\n      response_source (packet, cur_tpoint, cur_source_string);\n    }\n  else\n    {\n      cur_tpoint = cur_tpoint->next;\n      cur_action = cur_step_action = 0;\n      cur_source_string = NULL;\n      if (cur_tpoint)\n\tresponse_tracepoint (packet, cur_tpoint);\n      else\n\tstrcpy (packet, \"l\");\n    }\n}\n\n/* Compose a response that is an imitation of the syntax by which the\n   trace state variable was originally downloaded.  */\n\nstatic void\nresponse_tsv (char *packet, struct trace_state_variable *tsv)\n{\n  char *buf = (char *) \"\";\n  int namelen;\n\n  if (tsv->name)\n    {\n      namelen = strlen (tsv->name);\n      buf = alloca (namelen * 2 + 1);\n      bin2hex ((gdb_byte *) tsv->name, buf, namelen);\n    }\n\n  sprintf (packet, \"%x:%s:%x:%s\", tsv->number, phex_nz (tsv->initial_value, 0),\n\t   tsv->getter ? 1 : 0, buf);\n}\n\n/* Return the first trace state variable definition, and initialize\n   the state machine that will iterate through all the tsv bits.  */\n\nstatic void\ncmd_qtfv (char *packet)\n{\n  trace_debug (\"Returning first trace state variable definition\");\n\n  cur_tsv = trace_state_variables;\n\n  if (cur_tsv)\n    response_tsv (packet, cur_tsv);\n  else\n    strcpy (packet, \"l\");\n}\n\n/* Return additional trace state variable definitions. */\n\nstatic void\ncmd_qtsv (char *packet)\n{\n  trace_debug (\"Returning additional trace state variable definition\");\n\n  if (cur_tsv)\n    {\n      cur_tsv = cur_tsv->next;\n      if (cur_tsv)\n\tresponse_tsv (packet, cur_tsv);\n      else\n\tstrcpy (packet, \"l\");\n    }\n  else\n    strcpy (packet, \"l\");\n}\n\n/* Return the first static tracepoint marker, and initialize the state\n   machine that will iterate through all the static tracepoints\n   markers.  */\n\nstatic void\ncmd_qtfstm (char *packet)\n{\n  if (!maybe_write_ipa_ust_not_loaded (packet))\n    run_inferior_command (packet, strlen (packet) + 1);\n}\n\n/* Return additional static tracepoints markers.  */\n\nstatic void\ncmd_qtsstm (char *packet)\n{\n  if (!maybe_write_ipa_ust_not_loaded (packet))\n    run_inferior_command (packet, strlen (packet) + 1);\n}\n\n/* Return the definition of the static tracepoint at a given address.\n   Result packet is the same as qTsST's.  */\n\nstatic void\ncmd_qtstmat (char *packet)\n{\n  if (!maybe_write_ipa_ust_not_loaded (packet))\n    run_inferior_command (packet, strlen (packet) + 1);\n}\n\n/* Helper for gdb_agent_about_to_close.\n   Return non-zero if thread ENTRY is in the same process in DATA.  */\n\nstatic int\nsame_process_p (struct inferior_list_entry *entry, void *data)\n{\n  int *pid = data;\n\n  return ptid_get_pid (entry->id) == *pid;\n}\n\n/* Sent the agent a command to close it.  */\n\nvoid\ngdb_agent_about_to_close (int pid)\n{\n  char buf[IPA_CMD_BUF_SIZE];\n\n  if (!maybe_write_ipa_not_loaded (buf))\n    {\n      struct thread_info *saved_thread;\n\n      saved_thread = current_thread;\n\n      /* Find any thread which belongs to process PID.  */\n      current_thread = (struct thread_info *)\n\tfind_inferior (&all_threads, same_process_p, &pid);\n\n      strcpy (buf, \"close\");\n\n      run_inferior_command (buf, strlen (buf) + 1);\n\n      current_thread = saved_thread;\n    }\n}\n\n/* Return the minimum instruction size needed for fast tracepoints as a\n   hexadecimal number.  */\n\nstatic void\ncmd_qtminftpilen (char *packet)\n{\n  if (current_thread == NULL)\n    {\n      /* Indicate that the minimum length is currently unknown.  */\n      strcpy (packet, \"0\");\n      return;\n    }\n\n  sprintf (packet, \"%x\", target_get_min_fast_tracepoint_insn_len ());\n}\n\n/* Respond to qTBuffer packet with a block of raw data from the trace\n   buffer.  GDB may ask for a lot, but we are allowed to reply with\n   only as much as will fit within packet limits or whatever.  */\n\nstatic void\ncmd_qtbuffer (char *own_buf)\n{\n  ULONGEST offset, num, tot;\n  unsigned char *tbp;\n  char *packet = own_buf;\n\n  packet += strlen (\"qTBuffer:\");\n\n  packet = unpack_varlen_hex (packet, &offset);\n  ++packet; /* skip a comma */\n  unpack_varlen_hex (packet, &num);\n\n  trace_debug (\"Want to get trace buffer, %d bytes at offset 0x%s\",\n\t       (int) num, phex_nz (offset, 0));\n\n  tot = (trace_buffer_hi - trace_buffer_lo) - free_space ();\n\n  /* If we're right at the end, reply specially that we're done.  */\n  if (offset == tot)\n    {\n      strcpy (own_buf, \"l\");\n      return;\n    }\n\n  /* Object to any other out-of-bounds request.  */\n  if (offset > tot)\n    {\n      write_enn (own_buf);\n      return;\n    }\n\n  /* Compute the pointer corresponding to the given offset, accounting\n     for wraparound.  */\n  tbp = trace_buffer_start + offset;\n  if (tbp >= trace_buffer_wrap)\n    tbp -= (trace_buffer_wrap - trace_buffer_lo);\n\n  /* Trim to the remaining bytes if we're close to the end.  */\n  if (num > tot - offset)\n    num = tot - offset;\n\n  /* Trim to available packet size.  */\n  if (num >= (PBUFSIZ - 16) / 2 )\n    num = (PBUFSIZ - 16) / 2;\n\n  bin2hex (tbp, own_buf, num);\n}\n\nstatic void\ncmd_bigqtbuffer_circular (char *own_buf)\n{\n  ULONGEST val;\n  char *packet = own_buf;\n\n  packet += strlen (\"QTBuffer:circular:\");\n\n  unpack_varlen_hex (packet, &val);\n  circular_trace_buffer = val;\n  trace_debug (\"Trace buffer is now %s\",\n\t       circular_trace_buffer ? \"circular\" : \"linear\");\n  write_ok (own_buf);\n}\n\nstatic void\ncmd_bigqtbuffer_size (char *own_buf)\n{\n  ULONGEST val;\n  LONGEST sval;\n  char *packet = own_buf;\n\n  /* Can't change the size during a tracing run.  */\n  if (tracing)\n    {\n      write_enn (own_buf);\n      return;\n    }\n\n  packet += strlen (\"QTBuffer:size:\");\n\n  /* -1 is sent as literal \"-1\".  */\n  if (strcmp (packet, \"-1\") == 0)\n    sval = DEFAULT_TRACE_BUFFER_SIZE;\n  else\n    {\n      unpack_varlen_hex (packet, &val);\n      sval = (LONGEST) val;\n    }\n\n  init_trace_buffer (sval);\n  trace_debug (\"Trace buffer is now %s bytes\",\n\t       plongest (trace_buffer_size));\n  write_ok (own_buf);\n}\n\nstatic void\ncmd_qtnotes (char *own_buf)\n{\n  size_t nbytes;\n  char *saved, *user, *notes, *stopnote;\n  char *packet = own_buf;\n\n  packet += strlen (\"QTNotes:\");\n\n  while (*packet)\n    {\n      if (strncmp (\"user:\", packet, strlen (\"user:\")) == 0)\n\t{\n\t  packet += strlen (\"user:\");\n\t  saved = packet;\n\t  packet = strchr (packet, ';');\n\t  nbytes = (packet - saved) / 2;\n\t  user = xmalloc (nbytes + 1);\n\t  nbytes = hex2bin (saved, (gdb_byte *) user, nbytes);\n\t  user[nbytes] = '\\0';\n\t  ++packet; /* skip the semicolon */\n\t  trace_debug (\"User is '%s'\", user);\n\t  xfree (tracing_user_name);\n\t  tracing_user_name = user;\n\t}\n      else if (strncmp (\"notes:\", packet, strlen (\"notes:\")) == 0)\n\t{\n\t  packet += strlen (\"notes:\");\n\t  saved = packet;\n\t  packet = strchr (packet, ';');\n\t  nbytes = (packet - saved) / 2;\n\t  notes = xmalloc (nbytes + 1);\n\t  nbytes = hex2bin (saved, (gdb_byte *) notes, nbytes);\n\t  notes[nbytes] = '\\0';\n\t  ++packet; /* skip the semicolon */\n\t  trace_debug (\"Notes is '%s'\", notes);\n\t  xfree (tracing_notes);\n\t  tracing_notes = notes;\n\t}\n      else if (strncmp (\"tstop:\", packet, strlen (\"tstop:\")) == 0)\n\t{\n\t  packet += strlen (\"tstop:\");\n\t  saved = packet;\n\t  packet = strchr (packet, ';');\n\t  nbytes = (packet - saved) / 2;\n\t  stopnote = xmalloc (nbytes + 1);\n\t  nbytes = hex2bin (saved, (gdb_byte *) stopnote, nbytes);\n\t  stopnote[nbytes] = '\\0';\n\t  ++packet; /* skip the semicolon */\n\t  trace_debug (\"tstop note is '%s'\", stopnote);\n\t  xfree (tracing_stop_note);\n\t  tracing_stop_note = stopnote;\n\t}\n      else\n\tbreak;\n    }\n\n  write_ok (own_buf);\n}\n\nint\nhandle_tracepoint_general_set (char *packet)\n{\n  if (strcmp (\"QTinit\", packet) == 0)\n    {\n      cmd_qtinit (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTDP:\", packet, strlen (\"QTDP:\")) == 0)\n    {\n      cmd_qtdp (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTDPsrc:\", packet, strlen (\"QTDPsrc:\")) == 0)\n    {\n      cmd_qtdpsrc (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTEnable:\", packet, strlen (\"QTEnable:\")) == 0)\n    {\n      cmd_qtenable_disable (packet, 1);\n      return 1;\n    }\n  else if (strncmp (\"QTDisable:\", packet, strlen (\"QTDisable:\")) == 0)\n    {\n      cmd_qtenable_disable (packet, 0);\n      return 1;\n    }\n  else if (strncmp (\"QTDV:\", packet, strlen (\"QTDV:\")) == 0)\n    {\n      cmd_qtdv (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTro:\", packet, strlen (\"QTro:\")) == 0)\n    {\n      cmd_qtro (packet);\n      return 1;\n    }\n  else if (strcmp (\"QTStart\", packet) == 0)\n    {\n      cmd_qtstart (packet);\n      return 1;\n    }\n  else if (strcmp (\"QTStop\", packet) == 0)\n    {\n      cmd_qtstop (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTDisconnected:\", packet,\n\t\t    strlen (\"QTDisconnected:\")) == 0)\n    {\n      cmd_qtdisconnected (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTFrame:\", packet, strlen (\"QTFrame:\")) == 0)\n    {\n      cmd_qtframe (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTBuffer:circular:\", packet, strlen (\"QTBuffer:circular:\")) == 0)\n    {\n      cmd_bigqtbuffer_circular (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTBuffer:size:\", packet, strlen (\"QTBuffer:size:\")) == 0)\n    {\n      cmd_bigqtbuffer_size (packet);\n      return 1;\n    }\n  else if (strncmp (\"QTNotes:\", packet, strlen (\"QTNotes:\")) == 0)\n    {\n      cmd_qtnotes (packet);\n      return 1;\n    }\n\n  return 0;\n}\n\nint\nhandle_tracepoint_query (char *packet)\n{\n  if (strcmp (\"qTStatus\", packet) == 0)\n    {\n      cmd_qtstatus (packet);\n      return 1;\n    }\n  else if (strncmp (\"qTP:\", packet, strlen (\"qTP:\")) == 0)\n    {\n      cmd_qtp (packet);\n      return 1;\n    }\n  else if (strcmp (\"qTfP\", packet) == 0)\n    {\n      cmd_qtfp (packet);\n      return 1;\n    }\n  else if (strcmp (\"qTsP\", packet) == 0)\n    {\n      cmd_qtsp (packet);\n      return 1;\n    }\n  else if (strcmp (\"qTfV\", packet) == 0)\n    {\n      cmd_qtfv (packet);\n      return 1;\n    }\n  else if (strcmp (\"qTsV\", packet) == 0)\n    {\n      cmd_qtsv (packet);\n      return 1;\n    }\n  else if (strncmp (\"qTV:\", packet, strlen (\"qTV:\")) == 0)\n    {\n      cmd_qtv (packet);\n      return 1;\n    }\n  else if (strncmp (\"qTBuffer:\", packet, strlen (\"qTBuffer:\")) == 0)\n    {\n      cmd_qtbuffer (packet);\n      return 1;\n    }\n  else if (strcmp (\"qTfSTM\", packet) == 0)\n    {\n      cmd_qtfstm (packet);\n      return 1;\n    }\n  else if (strcmp (\"qTsSTM\", packet) == 0)\n    {\n      cmd_qtsstm (packet);\n      return 1;\n    }\n  else if (strncmp (\"qTSTMat:\", packet, strlen (\"qTSTMat:\")) == 0)\n    {\n      cmd_qtstmat (packet);\n      return 1;\n    }\n  else if (strcmp (\"qTMinFTPILen\", packet) == 0)\n    {\n      cmd_qtminftpilen (packet);\n      return 1;\n    }\n\n  return 0;\n}\n\n#endif\n#ifndef IN_PROCESS_AGENT\n\n/* Call this when thread TINFO has hit the tracepoint defined by\n   TP_NUMBER and TP_ADDRESS, and that tracepoint has a while-stepping\n   action.  This adds a while-stepping collecting state item to the\n   threads' collecting state list, so that we can keep track of\n   multiple simultaneous while-stepping actions being collected by the\n   same thread.  This can happen in cases like:\n\n    ff0001  INSN1 <-- TP1, while-stepping 10 collect $regs\n    ff0002  INSN2\n    ff0003  INSN3 <-- TP2, collect $regs\n    ff0004  INSN4 <-- TP3, while-stepping 10 collect $regs\n    ff0005  INSN5\n\n   Notice that when instruction INSN5 is reached, the while-stepping\n   actions of both TP1 and TP3 are still being collected, and that TP2\n   had been collected meanwhile.  The whole range of ff0001-ff0005\n   should be single-stepped, due to at least TP1's while-stepping\n   action covering the whole range.  */\n\nstatic void\nadd_while_stepping_state (struct thread_info *tinfo,\n\t\t\t  int tp_number, CORE_ADDR tp_address)\n{\n  struct wstep_state *wstep;\n\n  wstep = xmalloc (sizeof (*wstep));\n  wstep->next = tinfo->while_stepping;\n\n  wstep->tp_number = tp_number;\n  wstep->tp_address = tp_address;\n  wstep->current_step = 0;\n\n  tinfo->while_stepping = wstep;\n}\n\n/* Release the while-stepping collecting state WSTEP.  */\n\nstatic void\nrelease_while_stepping_state (struct wstep_state *wstep)\n{\n  free (wstep);\n}\n\n/* Release all while-stepping collecting states currently associated\n   with thread TINFO.  */\n\nvoid\nrelease_while_stepping_state_list (struct thread_info *tinfo)\n{\n  struct wstep_state *head;\n\n  while (tinfo->while_stepping)\n    {\n      head = tinfo->while_stepping;\n      tinfo->while_stepping = head->next;\n      release_while_stepping_state (head);\n    }\n}\n\n/* If TINFO was handling a 'while-stepping' action, the step has\n   finished, so collect any step data needed, and check if any more\n   steps are required.  Return true if the thread was indeed\n   collecting tracepoint data, false otherwise.  */\n\nint\ntracepoint_finished_step (struct thread_info *tinfo, CORE_ADDR stop_pc)\n{\n  struct tracepoint *tpoint;\n  struct wstep_state *wstep;\n  struct wstep_state **wstep_link;\n  struct trap_tracepoint_ctx ctx;\n\n  /* Pull in fast tracepoint trace frames from the inferior lib buffer into\n     our buffer.  */\n  if (agent_loaded_p ())\n    upload_fast_traceframes ();\n\n  /* Check if we were indeed collecting data for one of more\n     tracepoints with a 'while-stepping' count.  */\n  if (tinfo->while_stepping == NULL)\n    return 0;\n\n  if (!tracing)\n    {\n      /* We're not even tracing anymore.  Stop this thread from\n\t collecting.  */\n      release_while_stepping_state_list (tinfo);\n\n      /* The thread had stopped due to a single-step request indeed\n\t explained by a tracepoint.  */\n      return 1;\n    }\n\n  wstep = tinfo->while_stepping;\n  wstep_link = &tinfo->while_stepping;\n\n  trace_debug (\"Thread %s finished a single-step for tracepoint %d at 0x%s\",\n\t       target_pid_to_str (tinfo->entry.id),\n\t       wstep->tp_number, paddress (wstep->tp_address));\n\n  ctx.base.type = trap_tracepoint;\n  ctx.regcache = get_thread_regcache (tinfo, 1);\n\n  while (wstep != NULL)\n    {\n      tpoint = find_tracepoint (wstep->tp_number, wstep->tp_address);\n      if (tpoint == NULL)\n\t{\n\t  trace_debug (\"NO TRACEPOINT %d at 0x%s FOR THREAD %s!\",\n\t\t       wstep->tp_number, paddress (wstep->tp_address),\n\t\t       target_pid_to_str (tinfo->entry.id));\n\n\t  /* Unlink.  */\n\t  *wstep_link = wstep->next;\n\t  release_while_stepping_state (wstep);\n\t  wstep = *wstep_link;\n\t  continue;\n\t}\n\n      /* We've just finished one step.  */\n      ++wstep->current_step;\n\n      /* Collect data.  */\n      collect_data_at_step ((struct tracepoint_hit_ctx *) &ctx,\n\t\t\t    stop_pc, tpoint, wstep->current_step);\n\n      if (wstep->current_step >= tpoint->step_count)\n\t{\n\t  /* The requested numbers of steps have occurred.  */\n\t  trace_debug (\"Thread %s done stepping for tracepoint %d at 0x%s\",\n\t\t       target_pid_to_str (tinfo->entry.id),\n\t\t       wstep->tp_number, paddress (wstep->tp_address));\n\n\t  /* Unlink the wstep.  */\n\t  *wstep_link = wstep->next;\n\t  release_while_stepping_state (wstep);\n\t  wstep = *wstep_link;\n\n\t  /* Only check the hit count now, which ensure that we do all\n\t     our stepping before stopping the run.  */\n\t  if (tpoint->pass_count > 0\n\t      && tpoint->hit_count >= tpoint->pass_count\n\t      && stopping_tracepoint == NULL)\n\t    stopping_tracepoint = tpoint;\n\t}\n      else\n\t{\n\t  /* Keep single-stepping until the requested numbers of steps\n\t     have occurred.  */\n\t  wstep_link = &wstep->next;\n\t  wstep = *wstep_link;\n\t}\n\n      if (stopping_tracepoint\n\t  || trace_buffer_is_full\n\t  || expr_eval_result != expr_eval_no_error)\n\t{\n\t  stop_tracing ();\n\t  break;\n\t}\n    }\n\n  return 1;\n}\n\n/* Handle any internal tracing control breakpoint hits.  That means,\n   pull traceframes from the IPA to our buffer, and syncing both\n   tracing agents when the IPA's tracing stops for some reason.  */\n\nint\nhandle_tracepoint_bkpts (struct thread_info *tinfo, CORE_ADDR stop_pc)\n{\n  /* Pull in fast tracepoint trace frames from the inferior in-process\n     agent's buffer into our buffer.  */\n\n  if (!agent_loaded_p ())\n    return 0;\n\n  upload_fast_traceframes ();\n\n  /* Check if the in-process agent had decided we should stop\n     tracing.  */\n  if (stop_pc == ipa_sym_addrs.addr_stop_tracing)\n    {\n      int ipa_trace_buffer_is_full;\n      CORE_ADDR ipa_stopping_tracepoint;\n      int ipa_expr_eval_result;\n      CORE_ADDR ipa_error_tracepoint;\n\n      trace_debug (\"lib stopped at stop_tracing\");\n\n      read_inferior_integer (ipa_sym_addrs.addr_trace_buffer_is_full,\n\t\t\t     &ipa_trace_buffer_is_full);\n\n      read_inferior_data_pointer (ipa_sym_addrs.addr_stopping_tracepoint,\n\t\t\t\t  &ipa_stopping_tracepoint);\n      write_inferior_data_pointer (ipa_sym_addrs.addr_stopping_tracepoint, 0);\n\n      read_inferior_data_pointer (ipa_sym_addrs.addr_error_tracepoint,\n\t\t\t\t  &ipa_error_tracepoint);\n      write_inferior_data_pointer (ipa_sym_addrs.addr_error_tracepoint, 0);\n\n      read_inferior_integer (ipa_sym_addrs.addr_expr_eval_result,\n\t\t\t     &ipa_expr_eval_result);\n      write_inferior_integer (ipa_sym_addrs.addr_expr_eval_result, 0);\n\n      trace_debug (\"lib: trace_buffer_is_full: %d, \"\n\t\t   \"stopping_tracepoint: %s, \"\n\t\t   \"ipa_expr_eval_result: %d, \"\n\t\t   \"error_tracepoint: %s, \",\n\t\t   ipa_trace_buffer_is_full,\n\t\t   paddress (ipa_stopping_tracepoint),\n\t\t   ipa_expr_eval_result,\n\t\t   paddress (ipa_error_tracepoint));\n\n      if (debug_threads)\n\t{\n\t  if (ipa_trace_buffer_is_full)\n\t    trace_debug (\"lib stopped due to full buffer.\");\n\t  if (ipa_stopping_tracepoint)\n\t    trace_debug (\"lib stopped due to tpoint\");\n\t  if (ipa_stopping_tracepoint)\n\t    trace_debug (\"lib stopped due to error\");\n\t}\n\n      if (ipa_stopping_tracepoint != 0)\n\t{\n\t  stopping_tracepoint\n\t    = fast_tracepoint_from_ipa_tpoint_address (ipa_stopping_tracepoint);\n\t}\n      else if (ipa_expr_eval_result != expr_eval_no_error)\n\t{\n\t  expr_eval_result = ipa_expr_eval_result;\n\t  error_tracepoint\n\t    = fast_tracepoint_from_ipa_tpoint_address (ipa_error_tracepoint);\n\t}\n      stop_tracing ();\n      return 1;\n    }\n  else if (stop_pc == ipa_sym_addrs.addr_flush_trace_buffer)\n    {\n      trace_debug (\"lib stopped at flush_trace_buffer\");\n      return 1;\n    }\n\n  return 0;\n}\n\n/* Return true if TINFO just hit a tracepoint.  Collect data if\n   so.  */\n\nint\ntracepoint_was_hit (struct thread_info *tinfo, CORE_ADDR stop_pc)\n{\n  struct tracepoint *tpoint;\n  int ret = 0;\n  struct trap_tracepoint_ctx ctx;\n\n  /* Not tracing, don't handle.  */\n  if (!tracing)\n    return 0;\n\n  ctx.base.type = trap_tracepoint;\n  ctx.regcache = get_thread_regcache (tinfo, 1);\n\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    {\n      /* Note that we collect fast tracepoints here as well.  We'll\n\t step over the fast tracepoint jump later, which avoids the\n\t double collect.  However, we don't collect for static\n\t tracepoints here, because UST markers are compiled in program,\n\t and probes will be executed in program.  So static tracepoints\n\t are collected there.   */\n      if (tpoint->enabled && stop_pc == tpoint->address\n\t  && tpoint->type != static_tracepoint)\n\t{\n\t  trace_debug (\"Thread %s at address of tracepoint %d at 0x%s\",\n\t\t       target_pid_to_str (tinfo->entry.id),\n\t\t       tpoint->number, paddress (tpoint->address));\n\n\t  /* Test the condition if present, and collect if true.  */\n\t  if (!tpoint->cond\n\t      || (condition_true_at_tracepoint\n\t\t  ((struct tracepoint_hit_ctx *) &ctx, tpoint)))\n\t    collect_data_at_tracepoint ((struct tracepoint_hit_ctx *) &ctx,\n\t\t\t\t\tstop_pc, tpoint);\n\n\t  if (stopping_tracepoint\n\t      || trace_buffer_is_full\n\t      || expr_eval_result != expr_eval_no_error)\n\t    {\n\t      stop_tracing ();\n\t    }\n\t  /* If the tracepoint had a 'while-stepping' action, then set\n\t     the thread to collect this tracepoint on the following\n\t     single-steps.  */\n\t  else if (tpoint->step_count > 0)\n\t    {\n\t      add_while_stepping_state (tinfo,\n\t\t\t\t\ttpoint->number, tpoint->address);\n\t    }\n\n\t  ret = 1;\n\t}\n    }\n\n  return ret;\n}\n\n#endif\n\n#if defined IN_PROCESS_AGENT && defined HAVE_UST\nstruct ust_marker_data;\nstatic void collect_ust_data_at_tracepoint (struct tracepoint_hit_ctx *ctx,\n\t\t\t\t\t    struct traceframe *tframe);\n#endif\n\n/* Create a trace frame for the hit of the given tracepoint in the\n   given thread.  */\n\nstatic void\ncollect_data_at_tracepoint (struct tracepoint_hit_ctx *ctx, CORE_ADDR stop_pc,\n\t\t\t    struct tracepoint *tpoint)\n{\n  struct traceframe *tframe;\n  int acti;\n\n  /* Only count it as a hit when we actually collect data.  */\n  tpoint->hit_count++;\n\n  /* If we've exceeded a defined pass count, record the event for\n     later, and finish the collection for this hit.  This test is only\n     for nonstepping tracepoints, stepping tracepoints test at the end\n     of their while-stepping loop.  */\n  if (tpoint->pass_count > 0\n      && tpoint->hit_count >= tpoint->pass_count\n      && tpoint->step_count == 0\n      && stopping_tracepoint == NULL)\n    stopping_tracepoint = tpoint;\n\n  trace_debug (\"Making new traceframe for tracepoint %d at 0x%s, hit %\" PRIu64,\n\t       tpoint->number, paddress (tpoint->address), tpoint->hit_count);\n\n  tframe = add_traceframe (tpoint);\n\n  if (tframe)\n    {\n      for (acti = 0; acti < tpoint->numactions; ++acti)\n\t{\n#ifndef IN_PROCESS_AGENT\n\t  trace_debug (\"Tracepoint %d at 0x%s about to do action '%s'\",\n\t\t       tpoint->number, paddress (tpoint->address),\n\t\t       tpoint->actions_str[acti]);\n#endif\n\n\t  do_action_at_tracepoint (ctx, stop_pc, tpoint, tframe,\n\t\t\t\t   tpoint->actions[acti]);\n\t}\n\n      finish_traceframe (tframe);\n    }\n\n  if (tframe == NULL && tracing)\n    trace_buffer_is_full = 1;\n}\n\n#ifndef IN_PROCESS_AGENT\n\nstatic void\ncollect_data_at_step (struct tracepoint_hit_ctx *ctx,\n\t\t      CORE_ADDR stop_pc,\n\t\t      struct tracepoint *tpoint, int current_step)\n{\n  struct traceframe *tframe;\n  int acti;\n\n  trace_debug (\"Making new step traceframe for \"\n\t       \"tracepoint %d at 0x%s, step %d of %\" PRIu64 \", hit %\" PRIu64,\n\t       tpoint->number, paddress (tpoint->address),\n\t       current_step, tpoint->step_count,\n\t       tpoint->hit_count);\n\n  tframe = add_traceframe (tpoint);\n\n  if (tframe)\n    {\n      for (acti = 0; acti < tpoint->num_step_actions; ++acti)\n\t{\n\t  trace_debug (\"Tracepoint %d at 0x%s about to do step action '%s'\",\n\t\t       tpoint->number, paddress (tpoint->address),\n\t\t       tpoint->step_actions_str[acti]);\n\n\t  do_action_at_tracepoint (ctx, stop_pc, tpoint, tframe,\n\t\t\t\t   tpoint->step_actions[acti]);\n\t}\n\n      finish_traceframe (tframe);\n    }\n\n  if (tframe == NULL && tracing)\n    trace_buffer_is_full = 1;\n}\n\n#endif\n\n#ifdef IN_PROCESS_AGENT\n/* The target description used by the IPA.  Given that the IPA library\n   is built for a specific architecture that is loaded into the\n   inferior, there only needs to be one such description per\n   build.  */\nconst struct target_desc *ipa_tdesc;\n#endif\n\nstatic struct regcache *\nget_context_regcache (struct tracepoint_hit_ctx *ctx)\n{\n  struct regcache *regcache = NULL;\n\n#ifdef IN_PROCESS_AGENT\n  if (ctx->type == fast_tracepoint)\n    {\n      struct fast_tracepoint_ctx *fctx = (struct fast_tracepoint_ctx *) ctx;\n      if (!fctx->regcache_initted)\n\t{\n\t  fctx->regcache_initted = 1;\n\t  init_register_cache (&fctx->regcache, ipa_tdesc, fctx->regspace);\n\t  supply_regblock (&fctx->regcache, NULL);\n\t  supply_fast_tracepoint_registers (&fctx->regcache, fctx->regs);\n\t}\n      regcache = &fctx->regcache;\n    }\n#ifdef HAVE_UST\n  if (ctx->type == static_tracepoint)\n    {\n      struct static_tracepoint_ctx *sctx\n\t= (struct static_tracepoint_ctx *) ctx;\n\n      if (!sctx->regcache_initted)\n\t{\n\t  sctx->regcache_initted = 1;\n\t  init_register_cache (&sctx->regcache, ipa_tdesc, sctx->regspace);\n\t  supply_regblock (&sctx->regcache, NULL);\n\t  /* Pass down the tracepoint address, because REGS doesn't\n\t     include the PC, but we know what it must have been.  */\n\t  supply_static_tracepoint_registers (&sctx->regcache,\n\t\t\t\t\t      (const unsigned char *)\n\t\t\t\t\t      sctx->regs,\n\t\t\t\t\t      sctx->tpoint->address);\n\t}\n      regcache = &sctx->regcache;\n    }\n#endif\n#else\n  if (ctx->type == trap_tracepoint)\n    {\n      struct trap_tracepoint_ctx *tctx = (struct trap_tracepoint_ctx *) ctx;\n      regcache = tctx->regcache;\n    }\n#endif\n\n  gdb_assert (regcache != NULL);\n\n  return regcache;\n}\n\nstatic void\ndo_action_at_tracepoint (struct tracepoint_hit_ctx *ctx,\n\t\t\t CORE_ADDR stop_pc,\n\t\t\t struct tracepoint *tpoint,\n\t\t\t struct traceframe *tframe,\n\t\t\t struct tracepoint_action *taction)\n{\n  enum eval_result_type err;\n\n  switch (taction->type)\n    {\n    case 'M':\n      {\n\tstruct collect_memory_action *maction;\n\tstruct eval_agent_expr_context ax_ctx;\n\n\tmaction = (struct collect_memory_action *) taction;\n\tax_ctx.regcache = NULL;\n\tax_ctx.tframe = tframe;\n\tax_ctx.tpoint = tpoint;\n\n\ttrace_debug (\"Want to collect %s bytes at 0x%s (basereg %d)\",\n\t\t     pulongest (maction->len),\n\t\t     paddress (maction->addr), maction->basereg);\n\t/* (should use basereg) */\n\tagent_mem_read (&ax_ctx, NULL, (CORE_ADDR) maction->addr,\n\t\t\tmaction->len);\n\tbreak;\n      }\n    case 'R':\n      {\n\tunsigned char *regspace;\n\tstruct regcache tregcache;\n\tstruct regcache *context_regcache;\n\tint regcache_size;\n\n\ttrace_debug (\"Want to collect registers\");\n\n\tcontext_regcache = get_context_regcache (ctx);\n\tregcache_size = register_cache_size (context_regcache->tdesc);\n\n\t/* Collect all registers for now.  */\n\tregspace = add_traceframe_block (tframe, tpoint, 1 + regcache_size);\n\tif (regspace == NULL)\n\t  {\n\t    trace_debug (\"Trace buffer block allocation failed, skipping\");\n\t    break;\n\t  }\n\t/* Identify a register block.  */\n\t*regspace = 'R';\n\n\t/* Wrap the regblock in a register cache (in the stack, we\n\t   don't want to malloc here).  */\n\tinit_register_cache (&tregcache, context_regcache->tdesc,\n\t\t\t     regspace + 1);\n\n\t/* Copy the register data to the regblock.  */\n\tregcache_cpy (&tregcache, context_regcache);\n\n#ifndef IN_PROCESS_AGENT\n\t/* On some platforms, trap-based tracepoints will have the PC\n\t   pointing to the next instruction after the trap, but we\n\t   don't want the user or GDB trying to guess whether the\n\t   saved PC needs adjusting; so always record the adjusted\n\t   stop_pc.  Note that we can't use tpoint->address instead,\n\t   since it will be wrong for while-stepping actions.  This\n\t   adjustment is a nop for fast tracepoints collected from the\n\t   in-process lib (but not if GDBserver is collecting one\n\t   preemptively), since the PC had already been adjusted to\n\t   contain the tracepoint's address by the jump pad.  */\n\ttrace_debug (\"Storing stop pc (0x%s) in regblock\",\n\t\t     paddress (stop_pc));\n\n\t/* This changes the regblock, not the thread's\n\t   regcache.  */\n\tregcache_write_pc (&tregcache, stop_pc);\n#endif\n      }\n      break;\n    case 'X':\n      {\n\tstruct eval_expr_action *eaction;\n\tstruct eval_agent_expr_context ax_ctx;\n\n\teaction = (struct eval_expr_action *) taction;\n\tax_ctx.regcache = get_context_regcache (ctx);\n\tax_ctx.tframe = tframe;\n\tax_ctx.tpoint = tpoint;\n\n\ttrace_debug (\"Want to evaluate expression\");\n\n\terr = gdb_eval_agent_expr (&ax_ctx, eaction->expr, NULL);\n\n\tif (err != expr_eval_no_error)\n\t  {\n\t    record_tracepoint_error (tpoint, \"action expression\", err);\n\t    return;\n\t  }\n      }\n      break;\n    case 'L':\n      {\n#if defined IN_PROCESS_AGENT && defined HAVE_UST\n\ttrace_debug (\"Want to collect static trace data\");\n\tcollect_ust_data_at_tracepoint (ctx, tframe);\n#else\n\ttrace_debug (\"warning: collecting static trace data, \"\n\t\t     \"but static tracepoints are not supported\");\n#endif\n      }\n      break;\n    default:\n      trace_debug (\"unknown trace action '%c', ignoring\", taction->type);\n      break;\n    }\n}\n\nstatic int\ncondition_true_at_tracepoint (struct tracepoint_hit_ctx *ctx,\n\t\t\t      struct tracepoint *tpoint)\n{\n  ULONGEST value = 0;\n  enum eval_result_type err;\n\n  /* Presently, gdbserver doesn't run compiled conditions, only the\n     IPA does.  If the program stops at a fast tracepoint's address\n     (e.g., due to a breakpoint, trap tracepoint, or stepping),\n     gdbserver preemptively collect the fast tracepoint.  Later, on\n     resume, gdbserver steps over the fast tracepoint like it steps\n     over breakpoints, so that the IPA doesn't see that fast\n     tracepoint.  This avoids double collects of fast tracepoints in\n     that stopping scenario.  Having gdbserver itself handle the fast\n     tracepoint gives the user a consistent view of when fast or trap\n     tracepoints are collected, compared to an alternative where only\n     trap tracepoints are collected on stop, and fast tracepoints on\n     resume.  When a fast tracepoint is being processed by gdbserver,\n     it is always the non-compiled condition expression that is\n     used.  */\n#ifdef IN_PROCESS_AGENT\n  if (tpoint->compiled_cond)\n    err = ((condfn) (uintptr_t) (tpoint->compiled_cond)) (ctx, &value);\n  else\n#endif\n    {\n      struct eval_agent_expr_context ax_ctx;\n\n      ax_ctx.regcache = get_context_regcache (ctx);\n      ax_ctx.tframe = NULL;\n      ax_ctx.tpoint = tpoint;\n\n      err = gdb_eval_agent_expr (&ax_ctx, tpoint->cond, &value);\n    }\n  if (err != expr_eval_no_error)\n    {\n      record_tracepoint_error (tpoint, \"condition\", err);\n      /* The error case must return false.  */\n      return 0;\n    }\n\n  trace_debug (\"Tracepoint %d at 0x%s condition evals to %s\",\n\t       tpoint->number, paddress (tpoint->address),\n\t       pulongest (value));\n  return (value ? 1 : 0);\n}\n\n/* Do memory copies for bytecodes.  */\n/* Do the recording of memory blocks for actions and bytecodes.  */\n\nint\nagent_mem_read (struct eval_agent_expr_context *ctx,\n\t\tunsigned char *to, CORE_ADDR from, ULONGEST len)\n{\n  unsigned char *mspace;\n  ULONGEST remaining = len;\n  unsigned short blocklen;\n\n  /* If a 'to' buffer is specified, use it.  */\n  if (to != NULL)\n    {\n      read_inferior_memory (from, to, len);\n      return 0;\n    }\n\n  /* Otherwise, create a new memory block in the trace buffer.  */\n  while (remaining > 0)\n    {\n      size_t sp;\n\n      blocklen = (remaining > 65535 ? 65535 : remaining);\n      sp = 1 + sizeof (from) + sizeof (blocklen) + blocklen;\n      mspace = add_traceframe_block (ctx->tframe, ctx->tpoint, sp);\n      if (mspace == NULL)\n\treturn 1;\n      /* Identify block as a memory block.  */\n      *mspace = 'M';\n      ++mspace;\n      /* Record address and size.  */\n      memcpy (mspace, &from, sizeof (from));\n      mspace += sizeof (from);\n      memcpy (mspace, &blocklen, sizeof (blocklen));\n      mspace += sizeof (blocklen);\n      /* Record the memory block proper.  */\n      read_inferior_memory (from, mspace, blocklen);\n      trace_debug (\"%d bytes recorded\", blocklen);\n      remaining -= blocklen;\n      from += blocklen;\n    }\n  return 0;\n}\n\nint\nagent_mem_read_string (struct eval_agent_expr_context *ctx,\n\t\t       unsigned char *to, CORE_ADDR from, ULONGEST len)\n{\n  unsigned char *buf, *mspace;\n  ULONGEST remaining = len;\n  unsigned short blocklen, i;\n\n  /* To save a bit of space, block lengths are 16-bit, so break large\n     requests into multiple blocks.  Bordering on overkill for strings,\n     but it could happen that someone specifies a large max length.  */\n  while (remaining > 0)\n    {\n      size_t sp;\n\n      blocklen = (remaining > 65535 ? 65535 : remaining);\n      /* We want working space to accumulate nonzero bytes, since\n\t traceframes must have a predecided size (otherwise it gets\n\t harder to wrap correctly for the circular case, etc).  */\n      buf = (unsigned char *) xmalloc (blocklen + 1);\n      for (i = 0; i < blocklen; ++i)\n\t{\n\t  /* Read the string one byte at a time, in case the string is\n\t     at the end of a valid memory area - we don't want a\n\t     correctly-terminated string to engender segvio\n\t     complaints.  */\n\t  read_inferior_memory (from + i, buf + i, 1);\n\n\t  if (buf[i] == '\\0')\n\t    {\n\t      blocklen = i + 1;\n\t      /* Make sure outer loop stops now too.  */\n\t      remaining = blocklen;\n\t      break;\n\t    }\n\t}\n      sp = 1 + sizeof (from) + sizeof (blocklen) + blocklen;\n      mspace = add_traceframe_block (ctx->tframe, ctx->tpoint, sp);\n      if (mspace == NULL)\n\t{\n\t  xfree (buf);\n\t  return 1;\n\t}\n      /* Identify block as a memory block.  */\n      *mspace = 'M';\n      ++mspace;\n      /* Record address and size.  */\n      memcpy ((void *) mspace, (void *) &from, sizeof (from));\n      mspace += sizeof (from);\n      memcpy ((void *) mspace, (void *) &blocklen, sizeof (blocklen));\n      mspace += sizeof (blocklen);\n      /* Copy the string contents.  */\n      memcpy ((void *) mspace, (void *) buf, blocklen);\n      remaining -= blocklen;\n      from += blocklen;\n      xfree (buf);\n    }\n  return 0;\n}\n\n/* Record the value of a trace state variable.  */\n\nint\nagent_tsv_read (struct eval_agent_expr_context *ctx, int n)\n{\n  unsigned char *vspace;\n  LONGEST val;\n\n  vspace = add_traceframe_block (ctx->tframe, ctx->tpoint,\n\t\t\t\t 1 + sizeof (n) + sizeof (LONGEST));\n  if (vspace == NULL)\n    return 1;\n  /* Identify block as a variable.  */\n  *vspace = 'V';\n  /* Record variable's number and value.  */\n  memcpy (vspace + 1, &n, sizeof (n));\n  val = get_trace_state_variable_value (n);\n  memcpy (vspace + 1 + sizeof (n), &val, sizeof (val));\n  trace_debug (\"Variable %d recorded\", n);\n  return 0;\n}\n\n#ifndef IN_PROCESS_AGENT\n\n/* Callback for traceframe_walk_blocks, used to find a given block\n   type in a traceframe.  */\n\nstatic int\nmatch_blocktype (char blocktype, unsigned char *dataptr, void *data)\n{\n  char *wantedp = data;\n\n  if (*wantedp == blocktype)\n    return 1;\n\n  return 0;\n}\n\n/* Walk over all traceframe blocks of the traceframe buffer starting\n   at DATABASE, of DATASIZE bytes long, and call CALLBACK for each\n   block found, passing in DATA unmodified.  If CALLBACK returns true,\n   this returns a pointer to where the block is found.  Returns NULL\n   if no callback call returned true, indicating that all blocks have\n   been walked.  */\n\nstatic unsigned char *\ntraceframe_walk_blocks (unsigned char *database, unsigned int datasize,\n\t\t\tint tfnum,\n\t\t\tint (*callback) (char blocktype,\n\t\t\t\t\t unsigned char *dataptr,\n\t\t\t\t\t void *data),\n\t\t\tvoid *data)\n{\n  unsigned char *dataptr;\n\n  if (datasize == 0)\n    {\n      trace_debug (\"traceframe %d has no data\", tfnum);\n      return NULL;\n    }\n\n  /* Iterate through a traceframe's blocks, looking for a block of the\n     requested type.  */\n  for (dataptr = database;\n       dataptr < database + datasize;\n       /* nothing */)\n    {\n      char blocktype;\n      unsigned short mlen;\n\n      if (dataptr == trace_buffer_wrap)\n\t{\n\t  /* Adjust to reflect wrapping part of the frame around to\n\t     the beginning.  */\n\t  datasize = dataptr - database;\n\t  dataptr = database = trace_buffer_lo;\n\t}\n\n      blocktype = *dataptr++;\n\n      if ((*callback) (blocktype, dataptr, data))\n\treturn dataptr;\n\n      switch (blocktype)\n\t{\n\tcase 'R':\n\t  /* Skip over the registers block.  */\n\t  dataptr += current_target_desc ()->registers_size;\n\t  break;\n\tcase 'M':\n\t  /* Skip over the memory block.  */\n\t  dataptr += sizeof (CORE_ADDR);\n\t  memcpy (&mlen, dataptr, sizeof (mlen));\n\t  dataptr += (sizeof (mlen) + mlen);\n\t  break;\n\tcase 'V':\n\t  /* Skip over the TSV block.  */\n\t  dataptr += (sizeof (int) + sizeof (LONGEST));\n\t  break;\n\tcase 'S':\n\t  /* Skip over the static trace data block.  */\n\t  memcpy (&mlen, dataptr, sizeof (mlen));\n\t  dataptr += (sizeof (mlen) + mlen);\n\t  break;\n\tdefault:\n\t  trace_debug (\"traceframe %d has unknown block type 0x%x\",\n\t\t       tfnum, blocktype);\n\t  return NULL;\n\t}\n    }\n\n  return NULL;\n}\n\n/* Look for the block of type TYPE_WANTED in the trameframe starting\n   at DATABASE of DATASIZE bytes long.  TFNUM is the traceframe\n   number.  */\n\nstatic unsigned char *\ntraceframe_find_block_type (unsigned char *database, unsigned int datasize,\n\t\t\t    int tfnum, char type_wanted)\n{\n  return traceframe_walk_blocks (database, datasize, tfnum,\n\t\t\t\t match_blocktype, &type_wanted);\n}\n\nstatic unsigned char *\ntraceframe_find_regblock (struct traceframe *tframe, int tfnum)\n{\n  unsigned char *regblock;\n\n  regblock = traceframe_find_block_type (tframe->data,\n\t\t\t\t\t tframe->data_size,\n\t\t\t\t\t tfnum, 'R');\n\n  if (regblock == NULL)\n    trace_debug (\"traceframe %d has no register data\", tfnum);\n\n  return regblock;\n}\n\n/* Get registers from a traceframe.  */\n\nint\nfetch_traceframe_registers (int tfnum, struct regcache *regcache, int regnum)\n{\n  unsigned char *dataptr;\n  struct tracepoint *tpoint;\n  struct traceframe *tframe;\n\n  tframe = find_traceframe (tfnum);\n\n  if (tframe == NULL)\n    {\n      trace_debug (\"traceframe %d not found\", tfnum);\n      return 1;\n    }\n\n  dataptr = traceframe_find_regblock (tframe, tfnum);\n  if (dataptr == NULL)\n    {\n      /* Mark registers unavailable.  */\n      supply_regblock (regcache, NULL);\n\n      /* We can generally guess at a PC, although this will be\n\t misleading for while-stepping frames and multi-location\n\t tracepoints.  */\n      tpoint = find_next_tracepoint_by_number (NULL, tframe->tpnum);\n      if (tpoint != NULL)\n\tregcache_write_pc (regcache, tpoint->address);\n    }\n  else\n    supply_regblock (regcache, dataptr);\n\n  return 0;\n}\n\nstatic CORE_ADDR\ntraceframe_get_pc (struct traceframe *tframe)\n{\n  struct regcache regcache;\n  unsigned char *dataptr;\n  const struct target_desc *tdesc = current_target_desc ();\n\n  dataptr = traceframe_find_regblock (tframe, -1);\n  if (dataptr == NULL)\n    return 0;\n\n  init_register_cache (&regcache, tdesc, dataptr);\n  return regcache_read_pc (&regcache);\n}\n\n/* Read a requested block of memory from a trace frame.  */\n\nint\ntraceframe_read_mem (int tfnum, CORE_ADDR addr,\n\t\t     unsigned char *buf, ULONGEST length,\n\t\t     ULONGEST *nbytes)\n{\n  struct traceframe *tframe;\n  unsigned char *database, *dataptr;\n  unsigned int datasize;\n  CORE_ADDR maddr;\n  unsigned short mlen;\n\n  trace_debug (\"traceframe_read_mem\");\n\n  tframe = find_traceframe (tfnum);\n\n  if (!tframe)\n    {\n      trace_debug (\"traceframe %d not found\", tfnum);\n      return 1;\n    }\n\n  datasize = tframe->data_size;\n  database = dataptr = &tframe->data[0];\n\n  /* Iterate through a traceframe's blocks, looking for memory.  */\n  while ((dataptr = traceframe_find_block_type (dataptr,\n\t\t\t\t\t\tdatasize\n\t\t\t\t\t\t- (dataptr - database),\n\t\t\t\t\t\ttfnum, 'M')) != NULL)\n    {\n      memcpy (&maddr, dataptr, sizeof (maddr));\n      dataptr += sizeof (maddr);\n      memcpy (&mlen, dataptr, sizeof (mlen));\n      dataptr += sizeof (mlen);\n      trace_debug (\"traceframe %d has %d bytes at %s\",\n\t\t   tfnum, mlen, paddress (maddr));\n\n      /* If the block includes the first part of the desired range,\n\t return as much it has; GDB will re-request the remainder,\n\t which might be in a different block of this trace frame.  */\n      if (maddr <= addr && addr < (maddr + mlen))\n\t{\n\t  ULONGEST amt = (maddr + mlen) - addr;\n\t  if (amt > length)\n\t    amt = length;\n\n\t  memcpy (buf, dataptr + (addr - maddr), amt);\n\t  *nbytes = amt;\n\t  return 0;\n\t}\n\n      /* Skip over this block.  */\n      dataptr += mlen;\n    }\n\n  trace_debug (\"traceframe %d has no memory data for the desired region\",\n\t       tfnum);\n\n  *nbytes = 0;\n  return 0;\n}\n\nstatic int\ntraceframe_read_tsv (int tsvnum, LONGEST *val)\n{\n  int tfnum;\n  struct traceframe *tframe;\n  unsigned char *database, *dataptr;\n  unsigned int datasize;\n  int vnum;\n  int found = 0;\n\n  trace_debug (\"traceframe_read_tsv\");\n\n  tfnum = current_traceframe;\n\n  if (tfnum < 0)\n    {\n      trace_debug (\"no current traceframe\");\n      return 1;\n    }\n\n  tframe = find_traceframe (tfnum);\n\n  if (tframe == NULL)\n    {\n      trace_debug (\"traceframe %d not found\", tfnum);\n      return 1;\n    }\n\n  datasize = tframe->data_size;\n  database = dataptr = &tframe->data[0];\n\n  /* Iterate through a traceframe's blocks, looking for the last\n     matched tsv.  */\n  while ((dataptr = traceframe_find_block_type (dataptr,\n\t\t\t\t\t\tdatasize\n\t\t\t\t\t\t- (dataptr - database),\n\t\t\t\t\t\ttfnum, 'V')) != NULL)\n    {\n      memcpy (&vnum, dataptr, sizeof (vnum));\n      dataptr += sizeof (vnum);\n\n      trace_debug (\"traceframe %d has variable %d\", tfnum, vnum);\n\n      /* Check that this is the variable we want.  */\n      if (tsvnum == vnum)\n\t{\n\t  memcpy (val, dataptr, sizeof (*val));\n\t  found = 1;\n\t}\n\n      /* Skip over this block.  */\n      dataptr += sizeof (LONGEST);\n    }\n\n  if (!found)\n    trace_debug (\"traceframe %d has no data for variable %d\",\n\t\t tfnum, tsvnum);\n  return !found;\n}\n\n/* Read a requested block of static tracepoint data from a trace\n   frame.  */\n\nint\ntraceframe_read_sdata (int tfnum, ULONGEST offset,\n\t\t       unsigned char *buf, ULONGEST length,\n\t\t       ULONGEST *nbytes)\n{\n  struct traceframe *tframe;\n  unsigned char *database, *dataptr;\n  unsigned int datasize;\n  unsigned short mlen;\n\n  trace_debug (\"traceframe_read_sdata\");\n\n  tframe = find_traceframe (tfnum);\n\n  if (!tframe)\n    {\n      trace_debug (\"traceframe %d not found\", tfnum);\n      return 1;\n    }\n\n  datasize = tframe->data_size;\n  database = &tframe->data[0];\n\n  /* Iterate through a traceframe's blocks, looking for static\n     tracepoint data.  */\n  dataptr = traceframe_find_block_type (database, datasize,\n\t\t\t\t\ttfnum, 'S');\n  if (dataptr != NULL)\n    {\n      memcpy (&mlen, dataptr, sizeof (mlen));\n      dataptr += sizeof (mlen);\n      if (offset < mlen)\n\t{\n\t  if (offset + length > mlen)\n\t    length = mlen - offset;\n\n\t  memcpy (buf, dataptr, length);\n\t  *nbytes = length;\n\t}\n      else\n\t*nbytes = 0;\n      return 0;\n    }\n\n  trace_debug (\"traceframe %d has no static trace data\", tfnum);\n\n  *nbytes = 0;\n  return 0;\n}\n\n/* Callback for traceframe_walk_blocks.  Builds a traceframe-info\n   object.  DATA is pointer to a struct buffer holding the\n   traceframe-info object being built.  */\n\nstatic int\nbuild_traceframe_info_xml (char blocktype, unsigned char *dataptr, void *data)\n{\n  struct buffer *buffer = data;\n\n  switch (blocktype)\n    {\n    case 'M':\n      {\n\tunsigned short mlen;\n\tCORE_ADDR maddr;\n\n\tmemcpy (&maddr, dataptr, sizeof (maddr));\n\tdataptr += sizeof (maddr);\n\tmemcpy (&mlen, dataptr, sizeof (mlen));\n\tdataptr += sizeof (mlen);\n\tbuffer_xml_printf (buffer,\n\t\t\t   \"<memory start=\\\"0x%s\\\" length=\\\"0x%s\\\"/>\\n\",\n\t\t\t   paddress (maddr), phex_nz (mlen, sizeof (mlen)));\n\tbreak;\n      }\n    case 'V':\n      {\n\tint vnum;\n\n\tmemcpy (&vnum, dataptr, sizeof (vnum));\n\tbuffer_xml_printf (buffer, \"<tvar id=\\\"%d\\\"/>\\n\", vnum);\n\tbreak;\n      }\n    case 'R':\n    case 'S':\n      {\n\tbreak;\n      }\n    default:\n      warning (\"Unhandled trace block type (%d) '%c ' \"\n\t       \"while building trace frame info.\",\n\t       blocktype, blocktype);\n      break;\n    }\n\n  return 0;\n}\n\n/* Build a traceframe-info object for traceframe number TFNUM into\n   BUFFER.  */\n\nint\ntraceframe_read_info (int tfnum, struct buffer *buffer)\n{\n  struct traceframe *tframe;\n\n  trace_debug (\"traceframe_read_info\");\n\n  tframe = find_traceframe (tfnum);\n\n  if (!tframe)\n    {\n      trace_debug (\"traceframe %d not found\", tfnum);\n      return 1;\n    }\n\n  buffer_grow_str (buffer, \"<traceframe-info>\\n\");\n  traceframe_walk_blocks (tframe->data, tframe->data_size,\n\t\t\t  tfnum, build_traceframe_info_xml, buffer);\n  buffer_grow_str0 (buffer, \"</traceframe-info>\\n\");\n  return 0;\n}\n\n/* Return the first fast tracepoint whose jump pad contains PC.  */\n\nstatic struct tracepoint *\nfast_tracepoint_from_jump_pad_address (CORE_ADDR pc)\n{\n  struct tracepoint *tpoint;\n\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    if (tpoint->type == fast_tracepoint)\n      if (tpoint->jump_pad <= pc && pc < tpoint->jump_pad_end)\n\treturn tpoint;\n\n  return NULL;\n}\n\n/* Return the first fast tracepoint whose trampoline contains PC.  */\n\nstatic struct tracepoint *\nfast_tracepoint_from_trampoline_address (CORE_ADDR pc)\n{\n  struct tracepoint *tpoint;\n\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    {\n      if (tpoint->type == fast_tracepoint\n\t  && tpoint->trampoline <= pc && pc < tpoint->trampoline_end)\n\treturn tpoint;\n    }\n\n  return NULL;\n}\n\n/* Return GDBserver's tracepoint that matches the IP Agent's\n   tracepoint object that lives at IPA_TPOINT_OBJ in the IP Agent's\n   address space.  */\n\nstatic struct tracepoint *\nfast_tracepoint_from_ipa_tpoint_address (CORE_ADDR ipa_tpoint_obj)\n{\n  struct tracepoint *tpoint;\n\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    if (tpoint->type == fast_tracepoint)\n      if (tpoint->obj_addr_on_target == ipa_tpoint_obj)\n\treturn tpoint;\n\n  return NULL;\n}\n\n#endif\n\n/* The type of the object that is used to synchronize fast tracepoint\n   collection.  */\n\ntypedef struct collecting_t\n{\n  /* The fast tracepoint number currently collecting.  */\n  uintptr_t tpoint;\n\n  /* A number that GDBserver can use to identify the thread that is\n     presently holding the collect lock.  This need not (and usually\n     is not) the thread id, as getting the current thread ID usually\n     requires a system call, which we want to avoid like the plague.\n     Usually this is thread's TCB, found in the TLS (pseudo-)\n     register, which is readable with a single insn on several\n     architectures.  */\n  uintptr_t thread_area;\n} collecting_t;\n\n#ifndef IN_PROCESS_AGENT\n\nvoid\nforce_unlock_trace_buffer (void)\n{\n  write_inferior_data_pointer (ipa_sym_addrs.addr_collecting, 0);\n}\n\n/* Check if the thread identified by THREAD_AREA which is stopped at\n   STOP_PC, is presently locking the fast tracepoint collection, and\n   if so, gather some status of said collection.  Returns 0 if the\n   thread isn't collecting or in the jump pad at all.  1, if in the\n   jump pad (or within gdb_collect) and hasn't executed the adjusted\n   original insn yet (can set a breakpoint there and run to it).  2,\n   if presently executing the adjusted original insn --- in which\n   case, if we want to move the thread out of the jump pad, we need to\n   single-step it until this function returns 0.  */\n\nint\nfast_tracepoint_collecting (CORE_ADDR thread_area,\n\t\t\t    CORE_ADDR stop_pc,\n\t\t\t    struct fast_tpoint_collect_status *status)\n{\n  CORE_ADDR ipa_collecting;\n  CORE_ADDR ipa_gdb_jump_pad_buffer, ipa_gdb_jump_pad_buffer_end;\n  CORE_ADDR ipa_gdb_trampoline_buffer;\n  CORE_ADDR ipa_gdb_trampoline_buffer_end;\n  struct tracepoint *tpoint;\n  int needs_breakpoint;\n\n  /* The thread THREAD_AREA is either:\n\n      0. not collecting at all, not within the jump pad, or within\n\t gdb_collect or one of its callees.\n\n      1. in the jump pad and haven't reached gdb_collect\n\n      2. within gdb_collect (out of the jump pad) (collect is set)\n\n      3. we're in the jump pad, after gdb_collect having returned,\n\t possibly executing the adjusted insns.\n\n      For cases 1 and 3, `collecting' may or not be set.  The jump pad\n      doesn't have any complicated jump logic, so we can tell if the\n      thread is executing the adjust original insn or not by just\n      matching STOP_PC with known jump pad addresses.  If we it isn't\n      yet executing the original insn, set a breakpoint there, and let\n      the thread run to it, so to quickly step over a possible (many\n      insns) gdb_collect call.  Otherwise, or when the breakpoint is\n      hit, only a few (small number of) insns are left to be executed\n      in the jump pad.  Single-step the thread until it leaves the\n      jump pad.  */\n\n again:\n  tpoint = NULL;\n  needs_breakpoint = 0;\n  trace_debug (\"fast_tracepoint_collecting\");\n\n  if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_jump_pad_buffer,\n\t\t\t\t  &ipa_gdb_jump_pad_buffer))\n    {\n      internal_error (__FILE__, __LINE__,\n\t\t      \"error extracting `gdb_jump_pad_buffer'\");\n    }\n  if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_jump_pad_buffer_end,\n\t\t\t\t  &ipa_gdb_jump_pad_buffer_end))\n    {\n      internal_error (__FILE__, __LINE__,\n\t\t      \"error extracting `gdb_jump_pad_buffer_end'\");\n    }\n\n  if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_trampoline_buffer,\n\t\t\t\t  &ipa_gdb_trampoline_buffer))\n    {\n      internal_error (__FILE__, __LINE__,\n\t\t      \"error extracting `gdb_trampoline_buffer'\");\n    }\n  if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_trampoline_buffer_end,\n\t\t\t\t  &ipa_gdb_trampoline_buffer_end))\n    {\n      internal_error (__FILE__, __LINE__,\n\t\t      \"error extracting `gdb_trampoline_buffer_end'\");\n    }\n\n  if (ipa_gdb_jump_pad_buffer <= stop_pc\n      && stop_pc < ipa_gdb_jump_pad_buffer_end)\n    {\n      /* We can tell which tracepoint(s) the thread is collecting by\n\t matching the jump pad address back to the tracepoint.  */\n      tpoint = fast_tracepoint_from_jump_pad_address (stop_pc);\n      if (tpoint == NULL)\n\t{\n\t  warning (\"in jump pad, but no matching tpoint?\");\n\t  return 0;\n\t}\n      else\n\t{\n\t  trace_debug (\"in jump pad of tpoint (%d, %s); jump_pad(%s, %s); \"\n\t\t       \"adj_insn(%s, %s)\",\n\t\t       tpoint->number, paddress (tpoint->address),\n\t\t       paddress (tpoint->jump_pad),\n\t\t       paddress (tpoint->jump_pad_end),\n\t\t       paddress (tpoint->adjusted_insn_addr),\n\t\t       paddress (tpoint->adjusted_insn_addr_end));\n\t}\n\n      /* Definitely in the jump pad.  May or may not need\n\t fast-exit-jump-pad breakpoint.  */\n      if (tpoint->jump_pad <= stop_pc\n\t  && stop_pc < tpoint->adjusted_insn_addr)\n\tneeds_breakpoint =  1;\n    }\n  else if (ipa_gdb_trampoline_buffer <= stop_pc\n\t   && stop_pc < ipa_gdb_trampoline_buffer_end)\n    {\n      /* We can tell which tracepoint(s) the thread is collecting by\n\t matching the trampoline address back to the tracepoint.  */\n      tpoint = fast_tracepoint_from_trampoline_address (stop_pc);\n      if (tpoint == NULL)\n\t{\n\t  warning (\"in trampoline, but no matching tpoint?\");\n\t  return 0;\n\t}\n      else\n\t{\n\t  trace_debug (\"in trampoline of tpoint (%d, %s); trampoline(%s, %s)\",\n\t\t       tpoint->number, paddress (tpoint->address),\n\t\t       paddress (tpoint->trampoline),\n\t\t       paddress (tpoint->trampoline_end));\n\t}\n\n      /* Have not reached jump pad yet, but treat the trampoline as a\n\t part of the jump pad that is before the adjusted original\n\t instruction.  */\n      needs_breakpoint = 1;\n    }\n  else\n    {\n      collecting_t ipa_collecting_obj;\n\n      /* If `collecting' is set/locked, then the THREAD_AREA thread\n\t may or not be the one holding the lock.  We have to read the\n\t lock to find out.  */\n\n      if (read_inferior_data_pointer (ipa_sym_addrs.addr_collecting,\n\t\t\t\t      &ipa_collecting))\n\t{\n\t  trace_debug (\"fast_tracepoint_collecting:\"\n\t\t       \" failed reading 'collecting' in the inferior\");\n\t  return 0;\n\t}\n\n      if (!ipa_collecting)\n\t{\n\t  trace_debug (\"fast_tracepoint_collecting: not collecting\"\n\t\t       \" (and nobody is).\");\n\t  return 0;\n\t}\n\n      /* Some thread is collecting.  Check which.  */\n      if (read_inferior_memory (ipa_collecting,\n\t\t\t\t(unsigned char *) &ipa_collecting_obj,\n\t\t\t\tsizeof (ipa_collecting_obj)) != 0)\n\tgoto again;\n\n      if (ipa_collecting_obj.thread_area != thread_area)\n\t{\n\t  trace_debug (\"fast_tracepoint_collecting: not collecting \"\n\t\t       \"(another thread is)\");\n\t  return 0;\n\t}\n\n      tpoint\n\t= fast_tracepoint_from_ipa_tpoint_address (ipa_collecting_obj.tpoint);\n      if (tpoint == NULL)\n\t{\n\t  warning (\"fast_tracepoint_collecting: collecting, \"\n\t\t   \"but tpoint %s not found?\",\n\t\t   paddress ((CORE_ADDR) ipa_collecting_obj.tpoint));\n\t  return 0;\n\t}\n\n      /* The thread is within `gdb_collect', skip over the rest of\n\t fast tracepoint collection quickly using a breakpoint.  */\n      needs_breakpoint = 1;\n    }\n\n  /* The caller wants a bit of status detail.  */\n  if (status != NULL)\n    {\n      status->tpoint_num = tpoint->number;\n      status->tpoint_addr = tpoint->address;\n      status->adjusted_insn_addr = tpoint->adjusted_insn_addr;\n      status->adjusted_insn_addr_end = tpoint->adjusted_insn_addr_end;\n    }\n\n  if (needs_breakpoint)\n    {\n      /* Hasn't executed the original instruction yet.  Set breakpoint\n\t there, and wait till it's hit, then single-step until exiting\n\t the jump pad.  */\n\n      trace_debug (\"\\\nfast_tracepoint_collecting, returning continue-until-break at %s\",\n\t\t   paddress (tpoint->adjusted_insn_addr));\n\n      return 1; /* continue */\n    }\n  else\n    {\n      /* Just single-step until exiting the jump pad.  */\n\n      trace_debug (\"fast_tracepoint_collecting, returning \"\n\t\t   \"need-single-step (%s-%s)\",\n\t\t   paddress (tpoint->adjusted_insn_addr),\n\t\t   paddress (tpoint->adjusted_insn_addr_end));\n\n      return 2; /* single-step */\n    }\n}\n\n#endif\n\n#ifdef IN_PROCESS_AGENT\n\n/* The global fast tracepoint collect lock.  Points to a collecting_t\n   object built on the stack by the jump pad, if presently locked;\n   NULL if it isn't locked.  Note that this lock *must* be set while\n   executing any *function other than the jump pad.  See\n   fast_tracepoint_collecting.  */\nstatic collecting_t * ATTR_USED collecting;\n\n/* This routine, called from the jump pad (in asm) is designed to be\n   called from the jump pads of fast tracepoints, thus it is on the\n   critical path.  */\n\nIP_AGENT_EXPORT void ATTR_USED\ngdb_collect (struct tracepoint *tpoint, unsigned char *regs)\n{\n  struct fast_tracepoint_ctx ctx;\n\n  /* Don't do anything until the trace run is completely set up.  */\n  if (!tracing)\n    return;\n\n  ctx.base.type = fast_tracepoint;\n  ctx.regs = regs;\n  ctx.regcache_initted = 0;\n  /* Wrap the regblock in a register cache (in the stack, we don't\n     want to malloc here).  */\n  ctx.regspace = alloca (ipa_tdesc->registers_size);\n  if (ctx.regspace == NULL)\n    {\n      trace_debug (\"Trace buffer block allocation failed, skipping\");\n      return;\n    }\n\n  for (ctx.tpoint = tpoint;\n       ctx.tpoint != NULL && ctx.tpoint->address == tpoint->address;\n       ctx.tpoint = ctx.tpoint->next)\n    {\n      if (!ctx.tpoint->enabled)\n\tcontinue;\n\n      /* Multiple tracepoints of different types, such as fast tracepoint and\n\t static tracepoint, can be set at the same address.  */\n      if (ctx.tpoint->type != tpoint->type)\n\tcontinue;\n\n      /* Test the condition if present, and collect if true.  */\n      if (ctx.tpoint->cond == NULL\n\t  || condition_true_at_tracepoint ((struct tracepoint_hit_ctx *) &ctx,\n\t\t\t\t\t   ctx.tpoint))\n\t{\n\t  collect_data_at_tracepoint ((struct tracepoint_hit_ctx *) &ctx,\n\t\t\t\t      ctx.tpoint->address, ctx.tpoint);\n\n\t  /* Note that this will cause original insns to be written back\n\t     to where we jumped from, but that's OK because we're jumping\n\t     back to the next whole instruction.  This will go badly if\n\t     instruction restoration is not atomic though.  */\n\t  if (stopping_tracepoint\n\t      || trace_buffer_is_full\n\t      || expr_eval_result != expr_eval_no_error)\n\t    {\n\t      stop_tracing ();\n\t      break;\n\t    }\n\t}\n      else\n\t{\n\t  /* If there was a condition and it evaluated to false, the only\n\t     way we would stop tracing is if there was an error during\n\t     condition expression evaluation.  */\n\t  if (expr_eval_result != expr_eval_no_error)\n\t    {\n\t      stop_tracing ();\n\t      break;\n\t    }\n\t}\n    }\n}\n\n#endif\n\n#ifndef IN_PROCESS_AGENT\n\nCORE_ADDR\nget_raw_reg_func_addr (void)\n{\n  return ipa_sym_addrs.addr_get_raw_reg;\n}\n\nCORE_ADDR\nget_get_tsv_func_addr (void)\n{\n  return ipa_sym_addrs.addr_get_trace_state_variable_value;\n}\n\nCORE_ADDR\nget_set_tsv_func_addr (void)\n{\n  return ipa_sym_addrs.addr_set_trace_state_variable_value;\n}\n\nstatic void\ncompile_tracepoint_condition (struct tracepoint *tpoint,\n\t\t\t      CORE_ADDR *jump_entry)\n{\n  CORE_ADDR entry_point = *jump_entry;\n  enum eval_result_type err;\n\n  trace_debug (\"Starting condition compilation for tracepoint %d\\n\",\n\t       tpoint->number);\n\n  /* Initialize the global pointer to the code being built.  */\n  current_insn_ptr = *jump_entry;\n\n  emit_prologue ();\n\n  err = compile_bytecodes (tpoint->cond);\n\n  if (err == expr_eval_no_error)\n    {\n      emit_epilogue ();\n\n      /* Record the beginning of the compiled code.  */\n      tpoint->compiled_cond = entry_point;\n\n      trace_debug (\"Condition compilation for tracepoint %d complete\\n\",\n\t\t   tpoint->number);\n    }\n  else\n    {\n      /* Leave the unfinished code in situ, but don't point to it.  */\n\n      tpoint->compiled_cond = 0;\n\n      trace_debug (\"Condition compilation for tracepoint %d failed, \"\n\t\t   \"error code %d\",\n\t\t   tpoint->number, err);\n    }\n\n  /* Update the code pointer passed in.  Note that we do this even if\n     the compile fails, so that we can look at the partial results\n     instead of letting them be overwritten.  */\n  *jump_entry = current_insn_ptr;\n\n  /* Leave a gap, to aid dump decipherment.  */\n  *jump_entry += 16;\n}\n\n/* We'll need to adjust these when we consider bi-arch setups, and big\n   endian machines.  */\n\nstatic int\nwrite_inferior_data_ptr (CORE_ADDR where, CORE_ADDR ptr)\n{\n  return write_inferior_memory (where,\n\t\t\t\t(unsigned char *) &ptr, sizeof (void *));\n}\n\n/* The base pointer of the IPA's heap.  This is the only memory the\n   IPA is allowed to use.  The IPA should _not_ call the inferior's\n   `malloc' during operation.  That'd be slow, and, most importantly,\n   it may not be safe.  We may be collecting a tracepoint in a signal\n   handler, for example.  */\nstatic CORE_ADDR target_tp_heap;\n\n/* Allocate at least SIZE bytes of memory from the IPA heap, aligned\n   to 8 bytes.  */\n\nstatic CORE_ADDR\ntarget_malloc (ULONGEST size)\n{\n  CORE_ADDR ptr;\n\n  if (target_tp_heap == 0)\n    {\n      /* We have the pointer *address*, need what it points to.  */\n      if (read_inferior_data_pointer (ipa_sym_addrs.addr_gdb_tp_heap_buffer,\n\t\t\t\t      &target_tp_heap))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"couldn't get target heap head pointer\");\n\t}\n    }\n\n  ptr = target_tp_heap;\n  target_tp_heap += size;\n\n  /* Pad to 8-byte alignment.  */\n  target_tp_heap = ((target_tp_heap + 7) & ~0x7);\n\n  return ptr;\n}\n\nstatic CORE_ADDR\ndownload_agent_expr (struct agent_expr *expr)\n{\n  CORE_ADDR expr_addr;\n  CORE_ADDR expr_bytes;\n\n  expr_addr = target_malloc (sizeof (*expr));\n  write_inferior_memory (expr_addr, (unsigned char *) expr, sizeof (*expr));\n\n  expr_bytes = target_malloc (expr->length);\n  write_inferior_data_ptr (expr_addr + offsetof (struct agent_expr, bytes),\n\t\t\t   expr_bytes);\n  write_inferior_memory (expr_bytes, expr->bytes, expr->length);\n\n  return expr_addr;\n}\n\n/* Align V up to N bits.  */\n#define UALIGN(V, N) (((V) + ((N) - 1)) & ~((N) - 1))\n\n/* Sync tracepoint with IPA, but leave maintenance of linked list to caller.  */\n\nstatic void\ndownload_tracepoint_1 (struct tracepoint *tpoint)\n{\n  struct tracepoint target_tracepoint;\n  CORE_ADDR tpptr = 0;\n\n  gdb_assert (tpoint->type == fast_tracepoint\n\t      || tpoint->type == static_tracepoint);\n\n  if (tpoint->cond != NULL && target_emit_ops () != NULL)\n    {\n      CORE_ADDR jentry, jump_entry;\n\n      jentry = jump_entry = get_jump_space_head ();\n\n      if (tpoint->cond != NULL)\n\t{\n\t  /* Pad to 8-byte alignment. (needed?)  */\n\t  /* Actually this should be left for the target to\n\t     decide.  */\n\t  jentry = UALIGN (jentry, 8);\n\n\t  compile_tracepoint_condition (tpoint, &jentry);\n\t}\n\n      /* Pad to 8-byte alignment.  */\n      jentry = UALIGN (jentry, 8);\n      claim_jump_space (jentry - jump_entry);\n    }\n\n  target_tracepoint = *tpoint;\n\n  tpptr = target_malloc (sizeof (*tpoint));\n  tpoint->obj_addr_on_target = tpptr;\n\n  /* Write the whole object.  We'll fix up its pointers in a bit.\n     Assume no next for now.  This is fixed up above on the next\n     iteration, if there's any.  */\n  target_tracepoint.next = NULL;\n  /* Need to clear this here too, since we're downloading the\n     tracepoints before clearing our own copy.  */\n  target_tracepoint.hit_count = 0;\n\n  write_inferior_memory (tpptr, (unsigned char *) &target_tracepoint,\n\t\t\t sizeof (target_tracepoint));\n\n  if (tpoint->cond)\n    write_inferior_data_ptr (tpptr + offsetof (struct tracepoint,\n\t\t\t\t\t       cond),\n\t\t\t     download_agent_expr (tpoint->cond));\n\n  if (tpoint->numactions)\n    {\n      int i;\n      CORE_ADDR actions_array;\n\n      /* The pointers array.  */\n      actions_array\n\t= target_malloc (sizeof (*tpoint->actions) * tpoint->numactions);\n      write_inferior_data_ptr (tpptr + offsetof (struct tracepoint,\n\t\t\t\t\t\t actions),\n\t\t\t       actions_array);\n\n      /* Now for each pointer, download the action.  */\n      for (i = 0; i < tpoint->numactions; i++)\n\t{\n\t  struct tracepoint_action *action = tpoint->actions[i];\n\t  CORE_ADDR ipa_action = action->ops->download (action);\n\n\t  if (ipa_action != 0)\n\t    write_inferior_data_ptr\n\t      (actions_array + i * sizeof (*tpoint->actions),\n\t       ipa_action);\n\t}\n    }\n}\n\n#define IPA_PROTO_FAST_TRACE_FLAG 0\n#define IPA_PROTO_FAST_TRACE_ADDR_ON_TARGET 2\n#define IPA_PROTO_FAST_TRACE_JUMP_PAD 10\n#define IPA_PROTO_FAST_TRACE_FJUMP_SIZE 18\n#define IPA_PROTO_FAST_TRACE_FJUMP_INSN 22\n\n/* Send a command to agent to download and install tracepoint TPOINT.  */\n\nstatic int\ntracepoint_send_agent (struct tracepoint *tpoint)\n{\n  char buf[IPA_CMD_BUF_SIZE];\n  char *p;\n  int i, ret;\n\n  p = buf;\n  strcpy (p, \"FastTrace:\");\n  p += 10;\n\n  COPY_FIELD_TO_BUF (p, tpoint, number);\n  COPY_FIELD_TO_BUF (p, tpoint, address);\n  COPY_FIELD_TO_BUF (p, tpoint, type);\n  COPY_FIELD_TO_BUF (p, tpoint, enabled);\n  COPY_FIELD_TO_BUF (p, tpoint, step_count);\n  COPY_FIELD_TO_BUF (p, tpoint, pass_count);\n  COPY_FIELD_TO_BUF (p, tpoint, numactions);\n  COPY_FIELD_TO_BUF (p, tpoint, hit_count);\n  COPY_FIELD_TO_BUF (p, tpoint, traceframe_usage);\n  COPY_FIELD_TO_BUF (p, tpoint, compiled_cond);\n  COPY_FIELD_TO_BUF (p, tpoint, orig_size);\n\n  /* condition */\n  p = agent_expr_send (p, tpoint->cond);\n\n  /* tracepoint_action */\n  for (i = 0; i < tpoint->numactions; i++)\n    {\n      struct tracepoint_action *action = tpoint->actions[i];\n\n      p[0] = action->type;\n      p = action->ops->send (&p[1], action);\n    }\n\n  get_jump_space_head ();\n  /* Copy the value of GDB_JUMP_PAD_HEAD to command buffer, so that\n     agent can use jump pad from it.  */\n  if (tpoint->type == fast_tracepoint)\n    {\n      memcpy (p, &gdb_jump_pad_head, 8);\n      p += 8;\n    }\n\n  ret = run_inferior_command (buf, (int) (ptrdiff_t) (p - buf));\n  if (ret)\n    return ret;\n\n  if (strncmp (buf, \"OK\", 2) != 0)\n    return 1;\n\n  /* The value of tracepoint's target address is stored in BUF.  */\n  memcpy (&tpoint->obj_addr_on_target,\n\t  &buf[IPA_PROTO_FAST_TRACE_ADDR_ON_TARGET], 8);\n\n  if (tpoint->type == fast_tracepoint)\n    {\n      unsigned char *insn\n\t= (unsigned char *) &buf[IPA_PROTO_FAST_TRACE_FJUMP_INSN];\n      int fjump_size;\n\n     trace_debug (\"agent: read from cmd_buf 0x%x 0x%x\\n\",\n\t\t  (unsigned int) tpoint->obj_addr_on_target,\n\t\t  (unsigned int) gdb_jump_pad_head);\n\n      memcpy (&gdb_jump_pad_head, &buf[IPA_PROTO_FAST_TRACE_JUMP_PAD], 8);\n\n      /* This has been done in agent.  We should also set up record for it.  */\n      memcpy (&fjump_size, &buf[IPA_PROTO_FAST_TRACE_FJUMP_SIZE], 4);\n      /* Wire it in.  */\n      tpoint->handle\n\t= set_fast_tracepoint_jump (tpoint->address, insn, fjump_size);\n    }\n\n  return 0;\n}\n\nstatic void\ndownload_tracepoint (struct tracepoint *tpoint)\n{\n  struct tracepoint *tp, *tp_prev;\n\n  if (tpoint->type != fast_tracepoint\n      && tpoint->type != static_tracepoint)\n    return;\n\n  download_tracepoint_1 (tpoint);\n\n  /* Find the previous entry of TPOINT, which is fast tracepoint or\n     static tracepoint.  */\n  tp_prev = NULL;\n  for (tp = tracepoints; tp != tpoint; tp = tp->next)\n    {\n      if (tp->type == fast_tracepoint || tp->type == static_tracepoint)\n\ttp_prev = tp;\n    }\n\n  if (tp_prev)\n    {\n      CORE_ADDR tp_prev_target_next_addr;\n\n      /* Insert TPOINT after TP_PREV in IPA.  */\n      if (read_inferior_data_pointer (tp_prev->obj_addr_on_target\n\t\t\t\t      + offsetof (struct tracepoint, next),\n\t\t\t\t      &tp_prev_target_next_addr))\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"error reading `tp_prev->next'\");\n\t}\n\n      /* tpoint->next = tp_prev->next */\n      write_inferior_data_ptr (tpoint->obj_addr_on_target\n\t\t\t       + offsetof (struct tracepoint, next),\n\t\t\t       tp_prev_target_next_addr);\n      /* tp_prev->next = tpoint */\n      write_inferior_data_ptr (tp_prev->obj_addr_on_target\n\t\t\t       + offsetof (struct tracepoint, next),\n\t\t\t       tpoint->obj_addr_on_target);\n    }\n  else\n    /* First object in list, set the head pointer in the\n       inferior.  */\n    write_inferior_data_ptr (ipa_sym_addrs.addr_tracepoints,\n\t\t\t     tpoint->obj_addr_on_target);\n\n}\n\nstatic void\ndownload_trace_state_variables (void)\n{\n  CORE_ADDR ptr = 0, prev_ptr = 0;\n  struct trace_state_variable *tsv;\n\n  /* Start out empty.  */\n  write_inferior_data_ptr (ipa_sym_addrs.addr_trace_state_variables, 0);\n\n  for (tsv = trace_state_variables; tsv != NULL; tsv = tsv->next)\n    {\n      struct trace_state_variable target_tsv;\n\n      /* TSV's with a getter have been initialized equally in both the\n\t inferior and GDBserver.  Skip them.  */\n      if (tsv->getter != NULL)\n\tcontinue;\n\n      target_tsv = *tsv;\n\n      prev_ptr = ptr;\n      ptr = target_malloc (sizeof (*tsv));\n\n      if (tsv == trace_state_variables)\n\t{\n\t  /* First object in list, set the head pointer in the\n\t     inferior.  */\n\n\t  write_inferior_data_ptr (ipa_sym_addrs.addr_trace_state_variables,\n\t\t\t\t   ptr);\n\t}\n      else\n\t{\n\t  write_inferior_data_ptr (prev_ptr\n\t\t\t\t   + offsetof (struct trace_state_variable,\n\t\t\t\t\t       next),\n\t\t\t\t   ptr);\n\t}\n\n      /* Write the whole object.  We'll fix up its pointers in a bit.\n\t Assume no next, fixup when needed.  */\n      target_tsv.next = NULL;\n\n      write_inferior_memory (ptr, (unsigned char *) &target_tsv,\n\t\t\t     sizeof (target_tsv));\n\n      if (tsv->name != NULL)\n\t{\n\t  size_t size = strlen (tsv->name) + 1;\n\t  CORE_ADDR name_addr = target_malloc (size);\n\t  write_inferior_memory (name_addr,\n\t\t\t\t (unsigned char *) tsv->name, size);\n\t  write_inferior_data_ptr (ptr\n\t\t\t\t   + offsetof (struct trace_state_variable,\n\t\t\t\t\t       name),\n\t\t\t\t   name_addr);\n\t}\n\n      gdb_assert (tsv->getter == NULL);\n    }\n\n  if (prev_ptr != 0)\n    {\n      /* Fixup the next pointer in the last item in the list.  */\n      write_inferior_data_ptr (prev_ptr\n\t\t\t       + offsetof (struct trace_state_variable,\n\t\t\t\t\t   next), 0);\n    }\n}\n\n/* Upload complete trace frames out of the IP Agent's trace buffer\n   into GDBserver's trace buffer.  This always uploads either all or\n   no trace frames.  This is the counter part of\n   `trace_alloc_trace_buffer'.  See its description of the atomic\n   synching mechanism.  */\n\nstatic void\nupload_fast_traceframes (void)\n{\n  unsigned int ipa_traceframe_read_count, ipa_traceframe_write_count;\n  unsigned int ipa_traceframe_read_count_racy, ipa_traceframe_write_count_racy;\n  CORE_ADDR tf;\n  struct ipa_trace_buffer_control ipa_trace_buffer_ctrl;\n  unsigned int curr_tbctrl_idx;\n  unsigned int ipa_trace_buffer_ctrl_curr;\n  unsigned int ipa_trace_buffer_ctrl_curr_old;\n  CORE_ADDR ipa_trace_buffer_ctrl_addr;\n  struct breakpoint *about_to_request_buffer_space_bkpt;\n  CORE_ADDR ipa_trace_buffer_lo;\n  CORE_ADDR ipa_trace_buffer_hi;\n\n  if (read_inferior_uinteger (ipa_sym_addrs.addr_traceframe_read_count,\n\t\t\t      &ipa_traceframe_read_count_racy))\n    {\n      /* This will happen in most targets if the current thread is\n\t running.  */\n      return;\n    }\n\n  if (read_inferior_uinteger (ipa_sym_addrs.addr_traceframe_write_count,\n\t\t\t      &ipa_traceframe_write_count_racy))\n    return;\n\n  trace_debug (\"ipa_traceframe_count (racy area): %d (w=%d, r=%d)\",\n\t       ipa_traceframe_write_count_racy\n\t       - ipa_traceframe_read_count_racy,\n\t       ipa_traceframe_write_count_racy,\n\t       ipa_traceframe_read_count_racy);\n\n  if (ipa_traceframe_write_count_racy == ipa_traceframe_read_count_racy)\n    return;\n\n  about_to_request_buffer_space_bkpt\n    = set_breakpoint_at (ipa_sym_addrs.addr_about_to_request_buffer_space,\n\t\t\t NULL);\n\n  if (read_inferior_uinteger (ipa_sym_addrs.addr_trace_buffer_ctrl_curr,\n\t\t\t      &ipa_trace_buffer_ctrl_curr))\n    return;\n\n  ipa_trace_buffer_ctrl_curr_old = ipa_trace_buffer_ctrl_curr;\n\n  curr_tbctrl_idx = ipa_trace_buffer_ctrl_curr & ~GDBSERVER_FLUSH_COUNT_MASK;\n\n  {\n    unsigned int prev, counter;\n\n    /* Update the token, with new counters, and the GDBserver stamp\n       bit.  Alway reuse the current TBC index.  */\n    prev = ipa_trace_buffer_ctrl_curr & GDBSERVER_FLUSH_COUNT_MASK_CURR;\n    counter = (prev + 0x100) & GDBSERVER_FLUSH_COUNT_MASK_CURR;\n\n    ipa_trace_buffer_ctrl_curr = (GDBSERVER_UPDATED_FLUSH_COUNT_BIT\n\t\t\t\t  | (prev << 12)\n\t\t\t\t  | counter\n\t\t\t\t  | curr_tbctrl_idx);\n  }\n\n  if (write_inferior_uinteger (ipa_sym_addrs.addr_trace_buffer_ctrl_curr,\n\t\t\t       ipa_trace_buffer_ctrl_curr))\n    return;\n\n  trace_debug (\"Lib: Committed %08x -> %08x\",\n\t       ipa_trace_buffer_ctrl_curr_old,\n\t       ipa_trace_buffer_ctrl_curr);\n\n  /* Re-read these, now that we've installed the\n     `about_to_request_buffer_space' breakpoint/lock.  A thread could\n     have finished a traceframe between the last read of these\n     counters and setting the breakpoint above.  If we start\n     uploading, we never want to leave this function with\n     traceframe_read_count != 0, otherwise, GDBserver could end up\n     incrementing the counter tokens more than once (due to event loop\n     nesting), which would break the IP agent's \"effective\" detection\n     (see trace_alloc_trace_buffer).  */\n  if (read_inferior_uinteger (ipa_sym_addrs.addr_traceframe_read_count,\n\t\t\t      &ipa_traceframe_read_count))\n    return;\n  if (read_inferior_uinteger (ipa_sym_addrs.addr_traceframe_write_count,\n\t\t\t      &ipa_traceframe_write_count))\n    return;\n\n  if (debug_threads)\n    {\n      trace_debug (\"ipa_traceframe_count (blocked area): %d (w=%d, r=%d)\",\n\t\t   ipa_traceframe_write_count - ipa_traceframe_read_count,\n\t\t   ipa_traceframe_write_count, ipa_traceframe_read_count);\n\n      if (ipa_traceframe_write_count != ipa_traceframe_write_count_racy\n\t  || ipa_traceframe_read_count != ipa_traceframe_read_count_racy)\n\ttrace_debug (\"note that ipa_traceframe_count's parts changed\");\n    }\n\n  /* Get the address of the current TBC object (the IP agent has an\n     array of 3 such objects).  The index is stored in the TBC\n     token.  */\n  ipa_trace_buffer_ctrl_addr = ipa_sym_addrs.addr_trace_buffer_ctrl;\n  ipa_trace_buffer_ctrl_addr\n    += sizeof (struct ipa_trace_buffer_control) * curr_tbctrl_idx;\n\n  if (read_inferior_memory (ipa_trace_buffer_ctrl_addr,\n\t\t\t    (unsigned char *) &ipa_trace_buffer_ctrl,\n\t\t\t    sizeof (struct ipa_trace_buffer_control)))\n    return;\n\n  if (read_inferior_data_pointer (ipa_sym_addrs.addr_trace_buffer_lo,\n\t\t\t\t  &ipa_trace_buffer_lo))\n    return;\n  if (read_inferior_data_pointer (ipa_sym_addrs.addr_trace_buffer_hi,\n\t\t\t\t  &ipa_trace_buffer_hi))\n    return;\n\n  /* Offsets are easier to grok for debugging than raw addresses,\n     especially for the small trace buffer sizes that are useful for\n     testing.  */\n  trace_debug (\"Lib: Trace buffer [%d] start=%d free=%d \"\n\t       \"endfree=%d wrap=%d hi=%d\",\n\t       curr_tbctrl_idx,\n\t       (int) (ipa_trace_buffer_ctrl.start - ipa_trace_buffer_lo),\n\t       (int) (ipa_trace_buffer_ctrl.free - ipa_trace_buffer_lo),\n\t       (int) (ipa_trace_buffer_ctrl.end_free - ipa_trace_buffer_lo),\n\t       (int) (ipa_trace_buffer_ctrl.wrap - ipa_trace_buffer_lo),\n\t       (int) (ipa_trace_buffer_hi - ipa_trace_buffer_lo));\n\n  /* Note that the IPA's buffer is always circular.  */\n\n#define IPA_FIRST_TRACEFRAME() (ipa_trace_buffer_ctrl.start)\n\n#define IPA_NEXT_TRACEFRAME_1(TF, TFOBJ)\t\t\\\n  ((TF) + sizeof (struct traceframe) + (TFOBJ)->data_size)\n\n#define IPA_NEXT_TRACEFRAME(TF, TFOBJ)\t\t\t\t\t\\\n  (IPA_NEXT_TRACEFRAME_1 (TF, TFOBJ)\t\t\t\t\t\\\n   - ((IPA_NEXT_TRACEFRAME_1 (TF, TFOBJ) >= ipa_trace_buffer_ctrl.wrap) \\\n      ? (ipa_trace_buffer_ctrl.wrap - ipa_trace_buffer_lo)\t\t\\\n      : 0))\n\n  tf = IPA_FIRST_TRACEFRAME ();\n\n  while (ipa_traceframe_write_count - ipa_traceframe_read_count)\n    {\n      struct tracepoint *tpoint;\n      struct traceframe *tframe;\n      unsigned char *block;\n      struct traceframe ipa_tframe;\n\n      if (read_inferior_memory (tf, (unsigned char *) &ipa_tframe,\n\t\t\t\toffsetof (struct traceframe, data)))\n\terror (\"Uploading: couldn't read traceframe at %s\\n\", paddress (tf));\n\n      if (ipa_tframe.tpnum == 0)\n\t{\n\t  internal_error (__FILE__, __LINE__,\n\t\t\t  \"Uploading: No (more) fast traceframes, but\"\n\t\t\t  \" ipa_traceframe_count == %u??\\n\",\n\t\t\t  ipa_traceframe_write_count\n\t\t\t  - ipa_traceframe_read_count);\n\t}\n\n      /* Note that this will be incorrect for multi-location\n\t tracepoints...  */\n      tpoint = find_next_tracepoint_by_number (NULL, ipa_tframe.tpnum);\n\n      tframe = add_traceframe (tpoint);\n      if (tframe == NULL)\n\t{\n\t  trace_buffer_is_full = 1;\n\t  trace_debug (\"Uploading: trace buffer is full\");\n\t}\n      else\n\t{\n\t  /* Copy the whole set of blocks in one go for now.  FIXME:\n\t     split this in smaller blocks.  */\n\t  block = add_traceframe_block (tframe, tpoint,\n\t\t\t\t\tipa_tframe.data_size);\n\t  if (block != NULL)\n\t    {\n\t      if (read_inferior_memory (tf\n\t\t\t\t\t+ offsetof (struct traceframe, data),\n\t\t\t\t\tblock, ipa_tframe.data_size))\n\t\terror (\"Uploading: Couldn't read traceframe data at %s\\n\",\n\t\t       paddress (tf + offsetof (struct traceframe, data)));\n\t    }\n\n\t  trace_debug (\"Uploading: traceframe didn't fit\");\n\t  finish_traceframe (tframe);\n\t}\n\n      tf = IPA_NEXT_TRACEFRAME (tf, &ipa_tframe);\n\n      /* If we freed the traceframe that wrapped around, go back\n\t to the non-wrap case.  */\n      if (tf < ipa_trace_buffer_ctrl.start)\n\t{\n\t  trace_debug (\"Lib: Discarding past the wraparound\");\n\t  ipa_trace_buffer_ctrl.wrap = ipa_trace_buffer_hi;\n\t}\n      ipa_trace_buffer_ctrl.start = tf;\n      ipa_trace_buffer_ctrl.end_free = ipa_trace_buffer_ctrl.start;\n      ++ipa_traceframe_read_count;\n\n      if (ipa_trace_buffer_ctrl.start == ipa_trace_buffer_ctrl.free\n\t  && ipa_trace_buffer_ctrl.start == ipa_trace_buffer_ctrl.end_free)\n\t{\n\t  trace_debug (\"Lib: buffer is fully empty.  \"\n\t\t       \"Trace buffer [%d] start=%d free=%d endfree=%d\",\n\t\t       curr_tbctrl_idx,\n\t\t       (int) (ipa_trace_buffer_ctrl.start\n\t\t\t      - ipa_trace_buffer_lo),\n\t\t       (int) (ipa_trace_buffer_ctrl.free\n\t\t\t      - ipa_trace_buffer_lo),\n\t\t       (int) (ipa_trace_buffer_ctrl.end_free\n\t\t\t      - ipa_trace_buffer_lo));\n\n\t  ipa_trace_buffer_ctrl.start = ipa_trace_buffer_lo;\n\t  ipa_trace_buffer_ctrl.free = ipa_trace_buffer_lo;\n\t  ipa_trace_buffer_ctrl.end_free = ipa_trace_buffer_hi;\n\t  ipa_trace_buffer_ctrl.wrap = ipa_trace_buffer_hi;\n\t}\n\n      trace_debug (\"Uploaded a traceframe\\n\"\n\t\t   \"Lib: Trace buffer [%d] start=%d free=%d \"\n\t\t   \"endfree=%d wrap=%d hi=%d\",\n\t\t   curr_tbctrl_idx,\n\t\t   (int) (ipa_trace_buffer_ctrl.start - ipa_trace_buffer_lo),\n\t\t   (int) (ipa_trace_buffer_ctrl.free - ipa_trace_buffer_lo),\n\t\t   (int) (ipa_trace_buffer_ctrl.end_free\n\t\t\t  - ipa_trace_buffer_lo),\n\t\t   (int) (ipa_trace_buffer_ctrl.wrap - ipa_trace_buffer_lo),\n\t\t   (int) (ipa_trace_buffer_hi - ipa_trace_buffer_lo));\n    }\n\n  if (write_inferior_memory (ipa_trace_buffer_ctrl_addr,\n\t\t\t     (unsigned char *) &ipa_trace_buffer_ctrl,\n\t\t\t     sizeof (struct ipa_trace_buffer_control)))\n    return;\n\n  write_inferior_integer (ipa_sym_addrs.addr_traceframe_read_count,\n\t\t\t  ipa_traceframe_read_count);\n\n  trace_debug (\"Done uploading traceframes [%d]\\n\", curr_tbctrl_idx);\n\n  pause_all (1);\n\n  delete_breakpoint (about_to_request_buffer_space_bkpt);\n  about_to_request_buffer_space_bkpt = NULL;\n\n  unpause_all (1);\n\n  if (trace_buffer_is_full)\n    stop_tracing ();\n}\n#endif\n\n#ifdef IN_PROCESS_AGENT\n\nIP_AGENT_EXPORT int ust_loaded;\nIP_AGENT_EXPORT char cmd_buf[IPA_CMD_BUF_SIZE];\n\n#ifdef HAVE_UST\n\n/* Static tracepoints.  */\n\n/* UST puts a \"struct tracepoint\" in the global namespace, which\n   conflicts with our tracepoint.  Arguably, being a library, it\n   shouldn't take ownership of such a generic name.  We work around it\n   here.  */\n#define tracepoint ust_tracepoint\n#include <ust/ust.h>\n#undef tracepoint\n\nextern int serialize_to_text (char *outbuf, int bufsize,\n\t\t\t      const char *fmt, va_list ap);\n\n#define GDB_PROBE_NAME \"gdb\"\n\n/* We dynamically search for the UST symbols instead of linking them\n   in.  This lets the user decide if the application uses static\n   tracepoints, instead of always pulling libust.so in.  This vector\n   holds pointers to all functions we care about.  */\n\nstatic struct\n{\n  int (*serialize_to_text) (char *outbuf, int bufsize,\n\t\t\t    const char *fmt, va_list ap);\n\n  int (*ltt_probe_register) (struct ltt_available_probe *pdata);\n  int (*ltt_probe_unregister) (struct ltt_available_probe *pdata);\n\n  int (*ltt_marker_connect) (const char *channel, const char *mname,\n\t\t\t     const char *pname);\n  int (*ltt_marker_disconnect) (const char *channel, const char *mname,\n\t\t\t\tconst char *pname);\n\n  void (*marker_iter_start) (struct marker_iter *iter);\n  void (*marker_iter_next) (struct marker_iter *iter);\n  void (*marker_iter_stop) (struct marker_iter *iter);\n  void (*marker_iter_reset) (struct marker_iter *iter);\n} ust_ops;\n\n#include <dlfcn.h>\n\n/* Cast through typeof to catch incompatible API changes.  Since UST\n   only builds with gcc, we can freely use gcc extensions here\n   too.  */\n#define GET_UST_SYM(SYM)\t\t\t\t\t\\\n  do\t\t\t\t\t\t\t\t\\\n    {\t\t\t\t\t\t\t\t\\\n      if (ust_ops.SYM == NULL)\t\t\t\t\t\\\n\tust_ops.SYM = (typeof (&SYM)) dlsym (RTLD_DEFAULT, #SYM);\t\\\n      if (ust_ops.SYM == NULL)\t\t\t\t\t\\\n\treturn 0;\t\t\t\t\t\t\\\n    } while (0)\n\n#define USTF(SYM) ust_ops.SYM\n\n/* Get pointers to all libust.so functions we care about.  */\n\nstatic int\ndlsym_ust (void)\n{\n  GET_UST_SYM (serialize_to_text);\n\n  GET_UST_SYM (ltt_probe_register);\n  GET_UST_SYM (ltt_probe_unregister);\n  GET_UST_SYM (ltt_marker_connect);\n  GET_UST_SYM (ltt_marker_disconnect);\n\n  GET_UST_SYM (marker_iter_start);\n  GET_UST_SYM (marker_iter_next);\n  GET_UST_SYM (marker_iter_stop);\n  GET_UST_SYM (marker_iter_reset);\n\n  ust_loaded = 1;\n  return 1;\n}\n\n/* Given an UST marker, return the matching gdb static tracepoint.\n   The match is done by address.  */\n\nstatic struct tracepoint *\nust_marker_to_static_tracepoint (const struct marker *mdata)\n{\n  struct tracepoint *tpoint;\n\n  for (tpoint = tracepoints; tpoint; tpoint = tpoint->next)\n    {\n      if (tpoint->type != static_tracepoint)\n\tcontinue;\n\n      if (tpoint->address == (uintptr_t) mdata->location)\n\treturn tpoint;\n    }\n\n  return NULL;\n}\n\n/* The probe function we install on lttng/ust markers.  Whenever a\n   probed ust marker is hit, this function is called.  This is similar\n   to gdb_collect, only for static tracepoints, instead of fast\n   tracepoints.  */\n\nstatic void\ngdb_probe (const struct marker *mdata, void *probe_private,\n\t   struct registers *regs, void *call_private,\n\t   const char *fmt, va_list *args)\n{\n  struct tracepoint *tpoint;\n  struct static_tracepoint_ctx ctx;\n\n  /* Don't do anything until the trace run is completely set up.  */\n  if (!tracing)\n    {\n      trace_debug (\"gdb_probe: not tracing\\n\");\n      return;\n    }\n\n  ctx.base.type = static_tracepoint;\n  ctx.regcache_initted = 0;\n  ctx.regs = regs;\n  ctx.fmt = fmt;\n  ctx.args = args;\n\n  /* Wrap the regblock in a register cache (in the stack, we don't\n     want to malloc here).  */\n  ctx.regspace = alloca (ipa_tdesc->registers_size);\n  if (ctx.regspace == NULL)\n    {\n      trace_debug (\"Trace buffer block allocation failed, skipping\");\n      return;\n    }\n\n  tpoint = ust_marker_to_static_tracepoint (mdata);\n  if (tpoint == NULL)\n    {\n      trace_debug (\"gdb_probe: marker not known: \"\n\t\t   \"loc:0x%p, ch:\\\"%s\\\",n:\\\"%s\\\",f:\\\"%s\\\"\",\n\t\t   mdata->location, mdata->channel,\n\t\t   mdata->name, mdata->format);\n      return;\n    }\n\n  if (!tpoint->enabled)\n    {\n      trace_debug (\"gdb_probe: tracepoint disabled\");\n      return;\n    }\n\n  ctx.tpoint = tpoint;\n\n  trace_debug (\"gdb_probe: collecting marker: \"\n\t       \"loc:0x%p, ch:\\\"%s\\\",n:\\\"%s\\\",f:\\\"%s\\\"\",\n\t       mdata->location, mdata->channel,\n\t       mdata->name, mdata->format);\n\n  /* Test the condition if present, and collect if true.  */\n  if (tpoint->cond == NULL\n      || condition_true_at_tracepoint ((struct tracepoint_hit_ctx *) &ctx,\n\t\t\t\t       tpoint))\n    {\n      collect_data_at_tracepoint ((struct tracepoint_hit_ctx *) &ctx,\n\t\t\t\t  tpoint->address, tpoint);\n\n      if (stopping_tracepoint\n\t  || trace_buffer_is_full\n\t  || expr_eval_result != expr_eval_no_error)\n\tstop_tracing ();\n    }\n  else\n    {\n      /* If there was a condition and it evaluated to false, the only\n\t way we would stop tracing is if there was an error during\n\t condition expression evaluation.  */\n      if (expr_eval_result != expr_eval_no_error)\n\tstop_tracing ();\n    }\n}\n\n/* Called if the gdb static tracepoint requested collecting \"$_sdata\",\n   static tracepoint string data.  This is a string passed to the\n   tracing library by the user, at the time of the tracepoint marker\n   call.  E.g., in the UST marker call:\n\n     trace_mark (ust, bar33, \"str %s\", \"FOOBAZ\");\n\n   the collected data is \"str FOOBAZ\".\n*/\n\nstatic void\ncollect_ust_data_at_tracepoint (struct tracepoint_hit_ctx *ctx,\n\t\t\t\tstruct traceframe *tframe)\n{\n  struct static_tracepoint_ctx *umd = (struct static_tracepoint_ctx *) ctx;\n  unsigned char *bufspace;\n  int size;\n  va_list copy;\n  unsigned short blocklen;\n\n  if (umd == NULL)\n    {\n      trace_debug (\"Wanted to collect static trace data, \"\n\t\t   \"but there's no static trace data\");\n      return;\n    }\n\n  va_copy (copy, *umd->args);\n  size = USTF(serialize_to_text) (NULL, 0, umd->fmt, copy);\n  va_end (copy);\n\n  trace_debug (\"Want to collect ust data\");\n\n  /* 'S' + size + string */\n  bufspace = add_traceframe_block (tframe, umd->tpoint,\n\t\t\t\t   1 + sizeof (blocklen) + size + 1);\n  if (bufspace == NULL)\n    {\n      trace_debug (\"Trace buffer block allocation failed, skipping\");\n      return;\n    }\n\n  /* Identify a static trace data block.  */\n  *bufspace = 'S';\n\n  blocklen = size + 1;\n  memcpy (bufspace + 1, &blocklen, sizeof (blocklen));\n\n  va_copy (copy, *umd->args);\n  USTF(serialize_to_text) ((char *) bufspace + 1 + sizeof (blocklen),\n\t\t\t   size + 1, umd->fmt, copy);\n  va_end (copy);\n\n  trace_debug (\"Storing static tracepoint data in regblock: %s\",\n\t       bufspace + 1 + sizeof (blocklen));\n}\n\n/* The probe to register with lttng/ust.  */\nstatic struct ltt_available_probe gdb_ust_probe =\n  {\n    GDB_PROBE_NAME,\n    NULL,\n    gdb_probe,\n  };\n\n#endif /* HAVE_UST */\n#endif /* IN_PROCESS_AGENT */\n\n#ifndef IN_PROCESS_AGENT\n\n/* Ask the in-process agent to run a command.  Since we don't want to\n   have to handle the IPA hitting breakpoints while running the\n   command, we pause all threads, remove all breakpoints, and then set\n   the helper thread re-running.  We communicate with the helper\n   thread by means of direct memory xfering, and a socket for\n   synchronization.  */\n\nstatic int\nrun_inferior_command (char *cmd, int len)\n{\n  int err = -1;\n  int pid = ptid_get_pid (current_ptid);\n\n  trace_debug (\"run_inferior_command: running: %s\", cmd);\n\n  pause_all (0);\n  uninsert_all_breakpoints ();\n\n  err = agent_run_command (pid, (const char *) cmd, len);\n\n  reinsert_all_breakpoints ();\n  unpause_all (0);\n\n  return err;\n}\n\n#else /* !IN_PROCESS_AGENT */\n\n#include <sys/socket.h>\n#include <sys/un.h>\n\n#ifndef UNIX_PATH_MAX\n#define UNIX_PATH_MAX sizeof(((struct sockaddr_un *) NULL)->sun_path)\n#endif\n\n/* Where we put the socked used for synchronization.  */\n#define SOCK_DIR P_tmpdir\n\n/* Thread ID of the helper thread.  GDBserver reads this to know which\n   is the help thread.  This is an LWP id on Linux.  */\nint helper_thread_id;\n\nstatic int\ninit_named_socket (const char *name)\n{\n  int result, fd;\n  struct sockaddr_un addr;\n\n  result = fd = socket (PF_UNIX, SOCK_STREAM, 0);\n  if (result == -1)\n    {\n      warning (\"socket creation failed: %s\", strerror (errno));\n      return -1;\n    }\n\n  addr.sun_family = AF_UNIX;\n\n  strncpy (addr.sun_path, name, UNIX_PATH_MAX);\n  addr.sun_path[UNIX_PATH_MAX - 1] = '\\0';\n\n  result = access (name, F_OK);\n  if (result == 0)\n    {\n      /* File exists.  */\n      result = unlink (name);\n      if (result == -1)\n\t{\n\t  warning (\"unlink failed: %s\", strerror (errno));\n\t  close (fd);\n\t  return -1;\n\t}\n      warning (\"socket %s already exists; overwriting\", name);\n    }\n\n  result = bind (fd, (struct sockaddr *) &addr, sizeof (addr));\n  if (result == -1)\n    {\n      warning (\"bind failed: %s\", strerror (errno));\n      close (fd);\n      return -1;\n    }\n\n  result = listen (fd, 1);\n  if (result == -1)\n    {\n      warning (\"listen: %s\", strerror (errno));\n      close (fd);\n      return -1;\n    }\n\n  return fd;\n}\n\nstatic char agent_socket_name[UNIX_PATH_MAX];\n\nstatic int\ngdb_agent_socket_init (void)\n{\n  int result, fd;\n\n  result = xsnprintf (agent_socket_name, UNIX_PATH_MAX, \"%s/gdb_ust%d\",\n\t\t      SOCK_DIR, getpid ());\n  if (result >= UNIX_PATH_MAX)\n    {\n      trace_debug (\"string overflow allocating socket name\");\n      return -1;\n    }\n\n  fd = init_named_socket (agent_socket_name);\n  if (fd < 0)\n    warning (\"Error initializing named socket (%s) for communication with the \"\n\t     \"ust helper thread. Check that directory exists and that it \"\n\t     \"is writable.\", agent_socket_name);\n\n  return fd;\n}\n\n#ifdef HAVE_UST\n\n/* The next marker to be returned on a qTsSTM command.  */\nstatic const struct marker *next_st;\n\n/* Returns the first known marker.  */\n\nstruct marker *\nfirst_marker (void)\n{\n  struct marker_iter iter;\n\n  USTF(marker_iter_reset) (&iter);\n  USTF(marker_iter_start) (&iter);\n\n  return iter.marker;\n}\n\n/* Returns the marker following M.  */\n\nconst struct marker *\nnext_marker (const struct marker *m)\n{\n  struct marker_iter iter;\n\n  USTF(marker_iter_reset) (&iter);\n  USTF(marker_iter_start) (&iter);\n\n  for (; iter.marker != NULL; USTF(marker_iter_next) (&iter))\n    {\n      if (iter.marker == m)\n\t{\n\t  USTF(marker_iter_next) (&iter);\n\t  return iter.marker;\n\t}\n    }\n\n  return NULL;\n}\n\n/* Return an hexstr version of the STR C string, fit for sending to\n   GDB.  */\n\nstatic char *\ncstr_to_hexstr (const char *str)\n{\n  int len = strlen (str);\n  char *hexstr = xmalloc (len * 2 + 1);\n  bin2hex ((gdb_byte *) str, hexstr, len);\n  return hexstr;\n}\n\n/* Compose packet that is the response to the qTsSTM/qTfSTM/qTSTMat\n   packets.  */\n\nstatic void\nresponse_ust_marker (char *packet, const struct marker *st)\n{\n  char *strid, *format, *tmp;\n\n  next_st = next_marker (st);\n\n  tmp = xmalloc (strlen (st->channel) + 1 +\n\t\t strlen (st->name) + 1);\n  sprintf (tmp, \"%s/%s\", st->channel, st->name);\n\n  strid = cstr_to_hexstr (tmp);\n  free (tmp);\n\n  format = cstr_to_hexstr (st->format);\n\n  sprintf (packet, \"m%s:%s:%s\",\n\t   paddress ((uintptr_t) st->location),\n\t   strid,\n\t   format);\n\n  free (strid);\n  free (format);\n}\n\n/* Return the first static tracepoint, and initialize the state\n   machine that will iterate through all the static tracepoints.  */\n\nstatic void\ncmd_qtfstm (char *packet)\n{\n  trace_debug (\"Returning first trace state variable definition\");\n\n  if (first_marker ())\n    response_ust_marker (packet, first_marker ());\n  else\n    strcpy (packet, \"l\");\n}\n\n/* Return additional trace state variable definitions. */\n\nstatic void\ncmd_qtsstm (char *packet)\n{\n  trace_debug (\"Returning static tracepoint\");\n\n  if (next_st)\n    response_ust_marker (packet, next_st);\n  else\n    strcpy (packet, \"l\");\n}\n\n/* Disconnect the GDB probe from a marker at a given address.  */\n\nstatic void\nunprobe_marker_at (char *packet)\n{\n  char *p = packet;\n  ULONGEST address;\n  struct marker_iter iter;\n\n  p += sizeof (\"unprobe_marker_at:\") - 1;\n\n  p = unpack_varlen_hex (p, &address);\n\n  USTF(marker_iter_reset) (&iter);\n  USTF(marker_iter_start) (&iter);\n  for (; iter.marker != NULL; USTF(marker_iter_next) (&iter))\n    if ((uintptr_t ) iter.marker->location == address)\n      {\n\tint result;\n\n\tresult = USTF(ltt_marker_disconnect) (iter.marker->channel,\n\t\t\t\t\t      iter.marker->name,\n\t\t\t\t\t      GDB_PROBE_NAME);\n\tif (result < 0)\n\t  warning (\"could not disable marker %s/%s\",\n\t\t   iter.marker->channel, iter.marker->name);\n\tbreak;\n      }\n}\n\n/* Connect the GDB probe to a marker at a given address.  */\n\nstatic int\nprobe_marker_at (char *packet)\n{\n  char *p = packet;\n  ULONGEST address;\n  struct marker_iter iter;\n  struct marker *m;\n\n  p += sizeof (\"probe_marker_at:\") - 1;\n\n  p = unpack_varlen_hex (p, &address);\n\n  USTF(marker_iter_reset) (&iter);\n\n  for (USTF(marker_iter_start) (&iter), m = iter.marker;\n       m != NULL;\n       USTF(marker_iter_next) (&iter), m = iter.marker)\n    if ((uintptr_t ) m->location == address)\n      {\n\tint result;\n\n\ttrace_debug (\"found marker for address.  \"\n\t\t     \"ltt_marker_connect (marker = %s/%s)\",\n\t\t     m->channel, m->name);\n\n\tresult = USTF(ltt_marker_connect) (m->channel, m->name,\n\t\t\t\t\t   GDB_PROBE_NAME);\n\tif (result && result != -EEXIST)\n\t  trace_debug (\"ltt_marker_connect (marker = %s/%s, errno = %d)\",\n\t\t       m->channel, m->name, -result);\n\n\tif (result < 0)\n\t  {\n\t    sprintf (packet, \"E.could not connect marker: channel=%s, name=%s\",\n\t\t     m->channel, m->name);\n\t    return -1;\n\t  }\n\n\tstrcpy (packet, \"OK\");\n\treturn 0;\n      }\n\n  sprintf (packet, \"E.no marker found at 0x%s\", paddress (address));\n  return -1;\n}\n\nstatic int\ncmd_qtstmat (char *packet)\n{\n  char *p = packet;\n  ULONGEST address;\n  struct marker_iter iter;\n  struct marker *m;\n\n  p += sizeof (\"qTSTMat:\") - 1;\n\n  p = unpack_varlen_hex (p, &address);\n\n  USTF(marker_iter_reset) (&iter);\n\n  for (USTF(marker_iter_start) (&iter), m = iter.marker;\n       m != NULL;\n       USTF(marker_iter_next) (&iter), m = iter.marker)\n    if ((uintptr_t ) m->location == address)\n      {\n\tresponse_ust_marker (packet, m);\n\treturn 0;\n      }\n\n  strcpy (packet, \"l\");\n  return -1;\n}\n\nstatic void\ngdb_ust_init (void)\n{\n  if (!dlsym_ust ())\n    return;\n\n  USTF(ltt_probe_register) (&gdb_ust_probe);\n}\n\n#endif /* HAVE_UST */\n\n#include <sys/syscall.h>\n\nstatic void\ngdb_agent_remove_socket (void)\n{\n  unlink (agent_socket_name);\n}\n\n/* Helper thread of agent.  */\n\nstatic void *\ngdb_agent_helper_thread (void *arg)\n{\n  int listen_fd;\n\n  atexit (gdb_agent_remove_socket);\n\n  while (1)\n    {\n      listen_fd = gdb_agent_socket_init ();\n\n      if (helper_thread_id == 0)\n\thelper_thread_id = syscall (SYS_gettid);\n\n      if (listen_fd == -1)\n\t{\n\t  warning (\"could not create sync socket\\n\");\n\t  break;\n\t}\n\n      while (1)\n\t{\n\t  socklen_t tmp;\n\t  struct sockaddr_un sockaddr;\n\t  int fd;\n\t  char buf[1];\n\t  int ret;\n\t  int stop_loop = 0;\n\n\t  tmp = sizeof (sockaddr);\n\n\t  do\n\t    {\n\t      fd = accept (listen_fd, &sockaddr, &tmp);\n\t    }\n\t  /* It seems an ERESTARTSYS can escape out of accept.  */\n\t  while (fd == -512 || (fd == -1 && errno == EINTR));\n\n\t  if (fd < 0)\n\t    {\n\t      warning (\"Accept returned %d, error: %s\\n\",\n\t\t       fd, strerror (errno));\n\t      break;\n\t    }\n\n\t  do\n\t    {\n\t      ret = read (fd, buf, 1);\n\t    } while (ret == -1 && errno == EINTR);\n\n\t  if (ret == -1)\n\t    {\n\t      warning (\"reading socket (fd=%d) failed with %s\",\n\t\t       fd, strerror (errno));\n\t      close (fd);\n\t      break;\n\t    }\n\n\t  if (cmd_buf[0])\n\t    {\n\t      if (strncmp (\"close\", cmd_buf, 5) == 0)\n\t\t{\n\t\t  stop_loop = 1;\n\t\t}\n#ifdef HAVE_UST\n\t      else if (strcmp (\"qTfSTM\", cmd_buf) == 0)\n\t\t{\n\t\t  cmd_qtfstm (cmd_buf);\n\t\t}\n\t      else if (strcmp (\"qTsSTM\", cmd_buf) == 0)\n\t\t{\n\t\t  cmd_qtsstm (cmd_buf);\n\t\t}\n\t      else if (strncmp (\"unprobe_marker_at:\",\n\t\t\t\tcmd_buf,\n\t\t\t\tsizeof (\"unprobe_marker_at:\") - 1) == 0)\n\t\t{\n\t\t  unprobe_marker_at (cmd_buf);\n\t\t}\n\t      else if (strncmp (\"probe_marker_at:\",\n\t\t\t\tcmd_buf,\n\t\t\t\tsizeof (\"probe_marker_at:\") - 1) == 0)\n\t\t{\n\t\t  probe_marker_at (cmd_buf);\n\t\t}\n\t      else if (strncmp (\"qTSTMat:\",\n\t\t\t\tcmd_buf,\n\t\t\t\tsizeof (\"qTSTMat:\") - 1) == 0)\n\t\t{\n\t\t  cmd_qtstmat (cmd_buf);\n\t\t}\n#endif /* HAVE_UST */\n\t    }\n\n\t  /* Fix compiler's warning: ignoring return value of 'write'.  */\n\t  ret = write (fd, buf, 1);\n\t  close (fd);\n\n\t  if (stop_loop)\n\t    {\n\t      close (listen_fd);\n\t      unlink (agent_socket_name);\n\n\t      /* Sleep endlessly to wait the whole inferior stops.  This\n\t\t thread can not exit because GDB or GDBserver may still need\n\t\t 'current_thread' (representing this thread) to access\n\t\t inferior memory.  Otherwise, this thread exits earlier than\n\t\t other threads, and 'current_thread' is set to NULL.  */\n\t      while (1)\n\t\tsleep (10);\n\t    }\n\t}\n    }\n\n  return NULL;\n}\n\n#include <signal.h>\n#include <pthread.h>\n\nIP_AGENT_EXPORT int gdb_agent_capability = AGENT_CAPA_STATIC_TRACE;\n\nstatic void\ngdb_agent_init (void)\n{\n  int res;\n  pthread_t thread;\n  sigset_t new_mask;\n  sigset_t orig_mask;\n\n  /* We want the helper thread to be as transparent as possible, so\n     have it inherit an all-signals-blocked mask.  */\n\n  sigfillset (&new_mask);\n  res = pthread_sigmask (SIG_SETMASK, &new_mask, &orig_mask);\n  if (res)\n    perror_with_name (\"pthread_sigmask (1)\");\n\n  res = pthread_create (&thread,\n\t\t\tNULL,\n\t\t\tgdb_agent_helper_thread,\n\t\t\tNULL);\n\n  res = pthread_sigmask (SIG_SETMASK, &orig_mask, NULL);\n  if (res)\n    perror_with_name (\"pthread_sigmask (2)\");\n\n  while (helper_thread_id == 0)\n    usleep (1);\n\n#ifdef HAVE_UST\n  gdb_ust_init ();\n#endif\n}\n\n#include <sys/mman.h>\n#include <fcntl.h>\n\nIP_AGENT_EXPORT char *gdb_tp_heap_buffer;\nIP_AGENT_EXPORT char *gdb_jump_pad_buffer;\nIP_AGENT_EXPORT char *gdb_jump_pad_buffer_end;\nIP_AGENT_EXPORT char *gdb_trampoline_buffer;\nIP_AGENT_EXPORT char *gdb_trampoline_buffer_end;\nIP_AGENT_EXPORT char *gdb_trampoline_buffer_error;\n\n/* Record the result of getting buffer space for fast tracepoint\n   trampolines.  Any error message is copied, since caller may not be\n   using persistent storage.  */\n\nvoid\nset_trampoline_buffer_space (CORE_ADDR begin, CORE_ADDR end, char *errmsg)\n{\n  gdb_trampoline_buffer = (char *) (uintptr_t) begin;\n  gdb_trampoline_buffer_end = (char *) (uintptr_t) end;\n  if (errmsg)\n    strncpy (gdb_trampoline_buffer_error, errmsg, 99);\n  else\n    strcpy (gdb_trampoline_buffer_error, \"no buffer passed\");\n}\n\nstatic void __attribute__ ((constructor))\ninitialize_tracepoint_ftlib (void)\n{\n  initialize_tracepoint ();\n\n  gdb_agent_init ();\n}\n\n#endif /* IN_PROCESS_AGENT */\n\n/* Return a timestamp, expressed as microseconds of the usual Unix\n   time.  (As the result is a 64-bit number, it will not overflow any\n   time soon.)  */\n\nstatic LONGEST\nget_timestamp (void)\n{\n   struct timeval tv;\n\n   if (gettimeofday (&tv, 0) != 0)\n     return -1;\n   else\n     return (LONGEST) tv.tv_sec * 1000000 + tv.tv_usec;\n}\n\nvoid\ninitialize_tracepoint (void)\n{\n  /* Start with the default size.  */\n  init_trace_buffer (DEFAULT_TRACE_BUFFER_SIZE);\n\n  /* Wire trace state variable 1 to be the timestamp.  This will be\n     uploaded to GDB upon connection and become one of its trace state\n     variables.  (In case you're wondering, if GDB already has a trace\n     variable numbered 1, it will be renumbered.)  */\n  create_trace_state_variable (1, 0);\n  set_trace_state_variable_name (1, \"trace_timestamp\");\n  set_trace_state_variable_getter (1, get_timestamp);\n\n#ifdef IN_PROCESS_AGENT\n  {\n    uintptr_t addr;\n    int pagesize;\n\n    pagesize = sysconf (_SC_PAGE_SIZE);\n    if (pagesize == -1)\n      perror_with_name (\"sysconf\");\n\n    gdb_tp_heap_buffer = xmalloc (5 * 1024 * 1024);\n\n#define SCRATCH_BUFFER_NPAGES 20\n\n    /* Allocate scratch buffer aligned on a page boundary, at a low\n       address (close to the main executable's code).  */\n    for (addr = pagesize; addr != 0; addr += pagesize)\n      {\n\tgdb_jump_pad_buffer = mmap ((void *) addr, pagesize * SCRATCH_BUFFER_NPAGES,\n\t\t\t\t    PROT_READ | PROT_WRITE | PROT_EXEC,\n\t\t\t\t    MAP_PRIVATE | MAP_ANONYMOUS | MAP_FIXED,\n\t\t\t\t    -1, 0);\n\tif (gdb_jump_pad_buffer != MAP_FAILED)\n\t  break;\n      }\n\n    if (addr == 0)\n      perror_with_name (\"mmap\");\n\n    gdb_jump_pad_buffer_end = gdb_jump_pad_buffer + pagesize * SCRATCH_BUFFER_NPAGES;\n  }\n\n  gdb_trampoline_buffer = gdb_trampoline_buffer_end = 0;\n\n  /* It's not a fatal error for something to go wrong with trampoline\n     buffer setup, but it can be mysterious, so create a channel to\n     report back on what went wrong, using a fixed size since we may\n     not be able to allocate space later when the problem occurs.  */\n  gdb_trampoline_buffer_error = xmalloc (IPA_BUFSIZ);\n\n  strcpy (gdb_trampoline_buffer_error, \"No errors reported\");\n\n  initialize_low_tracepoint ();\n#endif\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/contrib/expect-read1.c": "/* Copyright (C) 2013-2015 Free Software Foundation, Inc.\n\n   This file is part of GDB.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n/* RTLD_NEXT requires _GNU_SOURCE.  */\n#define _GNU_SOURCE 1\n#include <dlfcn.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdlib.h>\n\nssize_t\nread (int fd, void *buf, size_t count)\n{\n  static ssize_t (*read2) (int fd, void *buf, size_t count) = NULL;\n\n  if (read2 == NULL)\n    {\n      unsetenv (\"LD_PRELOAD\");\n      read2 = dlsym (RTLD_NEXT, \"read\");\n    }\n\n  if (count > 1 && isatty (fd) == 1)\n    count = 1;\n\n  return read2 (fd, buf, count);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/lib/read1.c": "/* This is part of GDB, the GNU debugger.\n\n   Copyright 2011-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n#define _GNU_SOURCE 1\n#include <dlfcn.h>\n#include <unistd.h>\n#include <fcntl.h>\n#include <stdlib.h>\n\n/* Wrap 'read', forcing it to return only one byte at a time, if\n   reading from the terminal.  */\n\nssize_t\nread (int fd, void *buf, size_t count)\n{\n  static ssize_t (*read2) (int fd, void *buf, size_t count) = NULL;\n  if (read2 == NULL)\n    {\n      unsetenv (\"LD_PRELOAD\");\n      read2 = dlsym (RTLD_NEXT, \"read\");\n    }\n  if (count > 1 && isatty (fd) >= 1)\n    count = 1;\n  return read2 (fd, buf, count);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.base/info-shared.c": "/* Copyright 2012-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include <dlfcn.h>\n#include <assert.h>\n#include <stddef.h>\n\nvoid\nstop (void)\n{\n}\n\nint\nmain (void)\n{\n  void *handle1, *handle2;\n  void (*func)(int);\n\n  handle1 = dlopen (SHLIB1_NAME, RTLD_LAZY);\n  assert (handle1 != NULL);\n  stop ();\n\n  handle2 = dlopen (SHLIB2_NAME, RTLD_LAZY);\n  assert (handle2 != NULL);\n  stop ();\n\n  func = (void (*)(int)) dlsym (handle1, \"foo\");\n  func (1);\n\n  func = (void (*)(int)) dlsym (handle2, \"bar\");\n  func (2);\n\n  dlclose (handle1);\n  stop ();\n\n  dlclose (handle2);\n  stop ();\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.base/solib-disc.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright 2007-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#ifdef __WIN32__\n#include <windows.h>\n#define dlopen(name, mode) LoadLibrary (name)\n#define dlsym(handle, func) GetProcAddress (handle, func)\n#define dlclose(handle) FreeLibrary (handle)\n#define dlerror() \"an error occurred\"\n#else\n#include <dlfcn.h>\n#endif\n\nint main()\n{\n  void *handle;\n  void (*func) (void);\n\n  handle = dlopen (SHLIB_NAME, RTLD_LAZY);\n  if (!handle)\n    {\n      fprintf (stderr, \"%s\\n\", dlerror ());\n      exit (1);\n    }\n\n  func = (void (*)(void)) dlsym (handle, \"shrfunc\");\n  if (!func)\n    {\n      fprintf (stderr, \"%s\\n\", dlerror ());\n      exit (1);\n    }\n\n  func ();\n\n  dlclose (handle);\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.base/watchpoint-solib.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright 2004-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>. */\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#ifdef __WIN32__\n#include <windows.h>\n#define dlopen(name, mode) LoadLibrary (TEXT (name))\n#ifdef _WIN32_WCE\n# define dlsym(handle, func) GetProcAddress (handle, TEXT (func))\n#else\n# define dlsym(handle, func) GetProcAddress (handle, func)\n#endif\n#define dlclose(handle) FreeLibrary (handle)\n#else\n#include <dlfcn.h>\n#endif\n\n\nvoid open_shlib ()\n{\n  void *handle;\n  void (*foo) (int);\n\n  handle = dlopen (SHLIB_NAME, RTLD_LAZY);\n  \n  if (!handle)\n    {\n#ifdef __WIN32__\n      fprintf (stderr, \"error %d occurred\\n\", GetLastError ());\n#else\n      fprintf (stderr, \"%s\\n\", dlerror ());\n#endif\n      exit (1);\n    }\n\n  foo = (void (*)(int))dlsym (handle, \"foo\");\n\n  if (!foo)\n    {\n      fprintf (stderr, \"%s\\n\", dlerror ());\n      exit (1);\n    }\n\n  foo (1); // call to foo\n  foo (2);\n\n  dlclose (handle);\n}\n\n\nint main()\n{\n  open_shlib ();\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.base/jit-dlmain.c": "#include <dlfcn.h>\n#include <stdio.h>\n\nint main (int argc, char *argv[])\n{\n  /* jit_libname is updated by jit-so.exp  */\n  const char *jit_libname = \"jit-dlmain-so.so\";\n  void *h;\n  int (*p_main) (int, char **);\n\n  h = NULL;  /* break here before-dlopen  */\n  h = dlopen (jit_libname, RTLD_LAZY);\n  if (h == NULL) return 1;\n\n  p_main = dlsym (h, \"jit_dl_main\");\n  if (p_main == NULL) return 2;\n\n  h = h;  /* break here after-dlopen */\n  return (*p_main) (argc, argv);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.base/unload.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright 2004-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>. */\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#ifdef __WIN32__\n#include <windows.h>\n#define dlopen(name, mode) LoadLibrary (TEXT (name))\n#ifdef _WIN32_WCE\n# define dlsym(handle, func) GetProcAddress (handle, TEXT (func))\n#else\n# define dlsym(handle, func) GetProcAddress (handle, func)\n#endif\n#define dlclose(handle) FreeLibrary (handle)\n#else\n#include <dlfcn.h>\n#endif\n\nint k = 0;\n\nint main()\n{\n  void *handle;\n  int (*unloadshr) (int);\n  int y;\n  const char *msg;\n\n  handle = dlopen (SHLIB_NAME, RTLD_LAZY);\n  \n  if (!handle)\n    {\n      fprintf (stderr, \"%s\\n\", dlerror ());\n      exit (1);\n    }\n\n  unloadshr = (int (*) (int)) dlsym (handle, \"shrfunc1\");\n\n  if (!unloadshr)\n    {\n#ifdef __WIN32__\n      fprintf (stderr, \"error %d occurred\\n\", GetLastError ());\n#else\n      fprintf (stderr, \"%s\\n\", dlerror ());\n#endif\n      exit (1);\n    }\n\n  y = (*unloadshr) (1);\n\n  dlclose (handle);\n  handle = NULL;\t/* y-set-1 */\n\n  /* The second library should share the same memory address.  */\n\n  handle = dlopen (SHLIB_NAME2, RTLD_LAZY);\n  \n  if (!handle)\n    {\n      fprintf (stderr, \"%s\\n\", dlerror ());\n      exit (1);\n    }\n\n  unloadshr = (int (*)(int)) dlsym (handle, \"shrfunc2\");\n\n  if (!unloadshr)\n    {\n#ifdef __WIN32__\n      fprintf (stderr, \"error %d occurred\\n\", GetLastError ());\n#else\n      fprintf (stderr, \"%s\\n\", dlerror ());\n#endif\n      exit (1);\n    }\n\n  y = (*unloadshr) (2);\n\n  dlclose (handle);\n  handle = NULL;\t/* y-set-2 */\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.threads/dlopen-libpthread.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright 2011-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include <dlfcn.h>\n#include <stddef.h>\n#include <assert.h>\n\nstatic const char *volatile filename;\n\nstatic void\nnotify (void)\n{\n  filename = NULL; /* notify-here */\n}\n\nint\nmain (void)\n{\n  void *h;\n  void (*fp) (void (*) (void));\n\n  assert (filename != NULL);\n  h = dlopen (filename, RTLD_LAZY);\n  assert (h != NULL);\n\n  fp = dlsym (h, \"f\");\n  assert (fp != NULL);\n\n  fp (notify);\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.perf/solib.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright (C) 2013-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include <stdio.h>\n#include <stdlib.h>\n\n#ifdef __WIN32__\n#include <windows.h>\n#define dlopen(name, mode) LoadLibrary (TEXT (name))\n# define dlsym(handle, func) GetProcAddress (handle, func)\n#define dlclose(handle) FreeLibrary (handle)\n#else\n#include <dlfcn.h>\n#endif\n\nstatic void **handles;\n\nvoid\ndo_test_load (int number)\n{\n  char libname[40];\n  int i;\n\n  handles = malloc (sizeof (void *) * number);\n  if (handles == NULL)\n    {\n      printf (\"ERROR on malloc\\n\");\n      exit (-1);\n    }\n\n  for (i = 0; i < number; i++)\n    {\n      sprintf (libname, \"solib-lib%d\", i);\n      handles[i] = dlopen (libname, RTLD_LAZY);\n      if (handles[i] == NULL)\n\t{\n\t  printf (\"ERROR on dlopen %s\\n\", libname);\n\t  exit (-1);\n\t}\n    }\n}\n\nvoid\ndo_test_unload (int number)\n{\n  int i;\n\n  /* Unload shared libraries in different orders.  */\n#ifndef SOLIB_DLCLOSE_REVERSED_ORDER\n  for (i = 0; i < number; i++)\n#else\n  for (i = number - 1; i >= 0; i--)\n#endif\n    dlclose (handles[i]);\n\n  free (handles);\n}\n\nstatic void\nend (void)\n{}\n\nint\nmain (void)\n{\n  end ();\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.trace/change-loc.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright 2011-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include <stdio.h>\n#include <dlfcn.h>\n#include \"change-loc.h\"\n\nextern void func (int x);\n\nstatic void\nmarker () {}\n\nint main()\n{\n  const char *libname = \"change-loc-2.sl\";\n  void *h;\n  int (*p_func) (int);\n\n  func (3);\n\n  func4 ();\n\n  marker ();\n\n  h = dlopen (libname, RTLD_LAZY);\n  if (h == NULL) return 1;\n\n  p_func = dlsym (h, \"func2\");\n  if (p_func == NULL) return 2;\n\n  (*p_func) (4);\n\n  marker ();\n\n  dlclose (h);\n\n  marker ();\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.trace/pending.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright 2011-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include <stdio.h>\n#include <dlfcn.h>\n\nextern void pendfunc (int x);\n\nstatic void\nmarker () {}\n\nint main()\n{\n  const char *libname = \"pendshr2.sl\";\n  void *h;\n  int (*p_func) (int);\n\n  pendfunc (3);\n  pendfunc (4);\n  pendfunc (3);\n\n  marker ();\n\n  h = dlopen (libname, RTLD_LAZY);\n  if (h == NULL) return 1;\n\n  p_func = dlsym (h, \"pendfunc2\");\n  if (p_func == NULL) return 2;\n\n  (*p_func) (4);\n\n  marker ();\n\n  dlclose (h);\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/testsuite/gdb.mi/pending.c": "/* This testcase is part of GDB, the GNU debugger.\n\n   Copyright 2011-2015 Free Software Foundation, Inc.\n\n   This program is free software; you can redistribute it and/or modify\n   it under the terms of the GNU General Public License as published by\n   the Free Software Foundation; either version 3 of the License, or\n   (at your option) any later version.\n\n   This program is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */\n\n#include <stdio.h>\n#include <dlfcn.h>\n\nextern void pendfunc (int x);\nint watch = 0;\n\nstatic void\nmarker () {}\n\nint main()\n{\n  const char *libname = \"pendshr2.sl\";\n  void *h;\n  int (*p_func) (int);\n\n  pendfunc (3);\n  pendfunc (4);\n  pendfunc (3);\n\n  marker ();\n\n  h = dlopen (libname, RTLD_LAZY);\n  if (h == NULL) return 1;\n\n  p_func = dlsym (h, \"pendfunc2\");\n  if (p_func == NULL) return 2;\n\n  (*p_func) (4);\n\n  marker ();\n\n  dlclose (h);\n  return 0;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/ga.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/ro.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/uk.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/ga.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/sv.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/pt_BR.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/de.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/nl.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/pt_BR.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/ro.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/it.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/opcodes/po/da.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/sim/m32c/mem.c",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/configure.com",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/hosts/alphavms.h",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/zh_CN.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/fi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/ro.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/sv.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/uk.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/sv.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/rw.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/ja.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/fr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/id.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/vi.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/zh_CN.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/da.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/ro.po",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/es.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/ru.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/bfd/po/tr.gmo",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/intl/locale.alias",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/readline/examples/rl-fgets.c",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/doc/stack_frame.png",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/gdb/doc/stack_frame.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gdb-7.9-tohj5khszrsaclfdoqfyt2f6zhiqt6we/spack-src/libiberty/strverscmp.c"
    ],
    "total_files": 10382
}