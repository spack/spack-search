{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-vsearch-2.14.1-yrnzqtkmstlk5nncmo2kkefdpe25tgm5/spack-src/src/dynlibs.cc": "/*\n\n  VSEARCH: a versatile open source tool for metagenomics\n\n  Copyright (C) 2014-2019, Torbjorn Rognes, Frederic Mahe and Tomas Flouri\n  All rights reserved.\n\n  Contact: Torbjorn Rognes <torognes@ifi.uio.no>,\n  Department of Informatics, University of Oslo,\n  PO Box 1080 Blindern, NO-0316 Oslo, Norway\n\n  This software is dual-licensed and available under a choice\n  of one of two licenses, either under the terms of the GNU\n  General Public License version 3 or the BSD 2-Clause License.\n\n\n  GNU General Public License version 3\n\n  This program is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n\n  This program is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n\n  You should have received a copy of the GNU General Public License\n  along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n  The BSD 2-Clause License\n\n  Redistribution and use in source and binary forms, with or without\n  modification, are permitted provided that the following conditions\n  are met:\n\n  1. Redistributions of source code must retain the above copyright\n  notice, this list of conditions and the following disclaimer.\n\n  2. Redistributions in binary form must reproduce the above copyright\n  notice, this list of conditions and the following disclaimer in the\n  documentation and/or other materials provided with the distribution.\n\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n  \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\n  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\n  COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\n  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT\n  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN\n  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n  POSSIBILITY OF SUCH DAMAGE.\n\n*/\n\n#include \"vsearch.h\"\n\n#ifdef HAVE_ZLIB_H\n# ifdef _WIN32\nconst char gz_libname[] = \"zlib1.dll\";\nHMODULE gz_lib;\n# else\n#  ifdef __APPLE__\nconst char gz_libname[] = \"libz.dylib\";\n#  else\nconst char gz_libname[] = \"libz.so\";\n#  endif\nvoid * gz_lib;\n# endif\ngzFile (*gzdopen_p)(int, const char *);\nint (*gzclose_p)(gzFile);\nint (*gzread_p)(gzFile, void *, unsigned);\nint (*gzgetc_p)(gzFile);\nint (*gzrewind_p)(gzFile);\nint (*gzungetc_p)(int, gzFile);\nconst char * (*gzerror_p)(gzFile, int*);\n#endif\n\n#ifdef HAVE_BZLIB_H\n# ifdef _WIN32\nconst char bz2_libname[] = \"libbz2.dll\";\nHMODULE bz2_lib;\n# else\n#  ifdef __APPLE__\nconst char bz2_libname[] = \"libbz2.dylib\";\n#  else\nconst char bz2_libname[] = \"libbz2.so\";\n#  endif\nvoid * bz2_lib;\n# endif\nBZFILE* (*BZ2_bzReadOpen_p)(int*, FILE*, int, int, void*, int);\nvoid (*BZ2_bzReadClose_p)(int*, BZFILE*);\nint (*BZ2_bzRead_p)(int*, BZFILE*, void*, int);\n#endif\n\n#ifdef _WIN32\nFARPROC arch_dlsym(HMODULE handle, const char * symbol)\n#else\nvoid * arch_dlsym(void * handle, const char * symbol)\n#endif\n{\n#ifdef _WIN32\n  return GetProcAddress(handle, symbol);\n#else\n  return dlsym(handle, symbol);\n#endif\n}\n\nvoid dynlibs_open()\n{\n#ifdef HAVE_ZLIB_H\n#ifdef _WIN32\n  gz_lib = LoadLibraryA(gz_libname);\n#else\n  gz_lib = dlopen(gz_libname, RTLD_LAZY);\n#endif\n  if (gz_lib)\n    {\n      gzdopen_p = (gzFile (*)(int, const char*)) arch_dlsym(gz_lib, \"gzdopen\");\n      gzclose_p = (int (*)(gzFile)) arch_dlsym(gz_lib, \"gzclose\");\n      gzread_p = (int (*)(gzFile, void*, unsigned)) arch_dlsym(gz_lib, \"gzread\");\n      gzgetc_p = (int (*)(gzFile)) arch_dlsym(gz_lib, \"gzgetc\");\n      gzrewind_p = (int (*)(gzFile)) arch_dlsym(gz_lib, \"gzrewind\");\n      gzerror_p = (const char * (*)(gzFile, int*)) arch_dlsym(gz_lib, \"gzerror\");\n      gzungetc_p = (int (*)(int, gzFile)) arch_dlsym(gz_lib, \"gzungetc\");\n    }\n#endif\n\n#ifdef HAVE_BZLIB_H\n#ifdef _WIN32\n  bz2_lib = LoadLibraryA(bz2_libname);\n#else\n  bz2_lib = dlopen(bz2_libname, RTLD_LAZY);\n#endif\n  if (bz2_lib)\n    {\n      BZ2_bzReadOpen_p = (BZFILE* (*)(int*, FILE*, int, int, void*, int))\n        arch_dlsym(bz2_lib, \"BZ2_bzReadOpen\");\n      BZ2_bzReadClose_p = (void (*)(int*, BZFILE*))\n        arch_dlsym(bz2_lib, \"BZ2_bzReadClose\");\n      BZ2_bzRead_p = (int (*)(int*, BZFILE*, void*, int))\n        arch_dlsym(bz2_lib, \"BZ2_bzRead\");\n    }\n#endif\n}\n\nvoid dynlibs_close()\n{\n#ifdef HAVE_ZLIB_H\n  if (gz_lib)\n#ifdef _WIN32\n    FreeLibrary(gz_lib);\n#else\n    dlclose(gz_lib);\n#endif\n  gz_lib = 0;\n#endif\n#ifdef HAVE_BZLIB_H\n  if (bz2_lib)\n#ifdef _WIN32\n    FreeLibrary(bz2_lib);\n#else\n    dlclose(bz2_lib);\n#endif\n  bz2_lib = 0;\n#endif\n}\n"
    },
    "skipped": [],
    "total_files": 115
}