{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-libunwind-master-dwt2qxx3j4hnf4kmav7v6l2hhs5xwxbz/spack-src/src/dl-iterate-phdr.c": "/* libunwind - a platform-independent unwind library\n   Copyright (C) 2003-2005 Hewlett-Packard Co\n\tContributed by David Mosberger-Tang <davidm@hpl.hp.com>\n\nThis file is part of libunwind.\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */\n\n#if defined(__ANDROID__) && __ANDROID_API__ < 21\n\n#include <dlfcn.h>\n#include <link.h>\n\n#include \"libunwind_i.h\"\n#include \"os-linux.h\"\n\n#ifndef IS_ELF\n/* Copied from NDK header. */\n#define IS_ELF(ehdr) ((ehdr).e_ident[EI_MAG0] == ELFMAG0 && \\\n                      (ehdr).e_ident[EI_MAG1] == ELFMAG1 && \\\n                      (ehdr).e_ident[EI_MAG2] == ELFMAG2 && \\\n                      (ehdr).e_ident[EI_MAG3] == ELFMAG3)\n#endif\n\ntypedef int (*unw_iterate_phdr_impl) (int (*callback) (\n                                        struct dl_phdr_info *info,\n                                        size_t size, void *data),\n                                      void *data);\n\nHIDDEN int\ndl_iterate_phdr (int (*callback) (struct dl_phdr_info *info, size_t size, void *data),\n                 void *data)\n{\n  static int initialized = 0;\n  static unw_iterate_phdr_impl libc_impl;\n  int rc = 0;\n  struct map_iterator mi;\n  unsigned long start, end, offset, flags;\n\n  if (!initialized)\n    {\n      libc_impl = dlsym (RTLD_NEXT, \"dl_iterate_phdr\");\n      initialized = 1;\n    }\n\n  if (libc_impl != NULL)\n    return libc_impl (callback, data);\n\n  if (maps_init (&mi, getpid()) < 0)\n    return -1;\n\n  while (maps_next (&mi, &start, &end, &offset, &flags))\n    {\n      Elf_W(Ehdr) *ehdr = (Elf_W(Ehdr) *) start;\n      Dl_info canonical_info;\n\n      if (mi.path[0] != '\\0' && (flags & PROT_EXEC) != 0 && IS_ELF (*ehdr)\n          && dladdr (ehdr, &canonical_info) == 0\n          && ehdr == canonical_info.dli_fbase)\n        {\n          struct dl_phdr_info info;\n          Elf_W(Phdr) *phdr = (Elf_W(Phdr) *) (start + ehdr->e_phoff);\n\n          info.dlpi_addr = start;\n          info.dlpi_name = canonical_info.dli_fname;\n          info.dlpi_phdr = phdr;\n          info.dlpi_phnum = ehdr->e_phnum;\n\n          rc = callback (&info, sizeof (info), data);\n        }\n    }\n\n  maps_close (&mi);\n\n  return rc;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-libunwind-master-dwt2qxx3j4hnf4kmav7v6l2hhs5xwxbz/spack-src/tests/Ltest-nocalloc.c": "/* libunwind - a platform-independent unwind library\n   Copyright (C) 2011 Google, Inc\n\tContributed by Paul Pluzhnikov <ppluzhnikov@google.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */\n\n#define UNW_LOCAL_ONLY\n#include <libunwind.h>\n\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <dlfcn.h>\n#include <pthread.h>\n\n#define panic(args...)\t\t\t\t\\\n\t{ fprintf (stderr, args); exit (-1); }\n\nint num_mallocs;\nint num_callocs;\nint in_unwind;\n\nvoid *\ncalloc(size_t n, size_t s)\n{\n  static void * (*func)(size_t, size_t);\n\n#ifdef __GLIBC__\n  /* In glibc, dlsym() calls calloc. Calling dlsym(RTLD_NEXT, \"calloc\") here\n     causes infinite recursion.  Instead, we simply use it by its other\n     name.  */\n  extern void *__libc_calloc(size_t, size_t);\n  if (!func)\n    func = &__libc_calloc;\n#else\n  if(!func)\n    func = dlsym(RTLD_NEXT, \"calloc\");\n#endif\n\n  if (in_unwind) {\n    num_callocs++;\n    return NULL;\n  } else {\n    return func(n, s);\n  }\n}\n\nvoid *\nmalloc(size_t s)\n{\n  static void * (*func)(size_t);\n\n  if(!func)\n    func = dlsym(RTLD_NEXT, \"malloc\");\n\n  if (in_unwind) {\n    num_mallocs++;\n    return NULL;\n  } else {\n    return func(s);\n  }\n}\n\nstatic void\ndo_backtrace (void)\n{\n  const int num_levels = 100;\n  void *pc[num_levels];\n\n  in_unwind = 1;\n  unw_backtrace(pc, num_levels);\n  in_unwind = 0;\n}\n\nvoid\nfoo3 (void)\n{\n  do_backtrace ();\n}\n\nvoid\nfoo2 (void)\n{\n  foo3 ();\n}\n\nvoid\nfoo1 (void)\n{\n  foo2 ();\n}\n\nint\nmain (void)\n{\n  int i, num_errors;\n\n  /* Create (and leak) 100 TSDs, then call backtrace()\n     and check that it doesn't call malloc()/calloc().  */\n  for (i = 0; i < 100; ++i) {\n    pthread_key_t key;\n    if (pthread_key_create (&key, NULL))\n      panic (\"FAILURE: unable to create key %d\\n\", i);\n  }\n  /* Call backtrace right after thread creation,\n   * where we are sure that we're not inside malloc */\n  do_backtrace();\n  num_mallocs = num_callocs = 0;\n  foo1 ();\n  num_errors = num_mallocs + num_callocs;\n  if (num_errors > 0)\n    {\n      fprintf (stderr,\n\t       \"FAILURE: detected %d error%s (malloc: %d, calloc: %d)\\n\",\n\t       num_errors, num_errors > 1 ? \"s\" : \"\",\n\t       num_mallocs, num_callocs);\n      exit (-1);\n    }\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-libunwind-master-dwt2qxx3j4hnf4kmav7v6l2hhs5xwxbz/spack-src/tests/Gtest-nomalloc.c": "/* libunwind - a platform-independent unwind library\n   Copyright (C) 2009 Google, Inc\n\tContributed by Arun Sharma <arun.sharma@google.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.  */\n\n#include <unistd.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <dlfcn.h>\n#include <libunwind.h>\n\n#define panic(args...)\t\t\t\t\\\n\t{ fprintf (stderr, args); exit (-1); }\n\nint verbose;\nint num_errors;\nint in_unwind;\n\nvoid *\nmalloc(size_t s)\n{\n  static void * (*func)();\n\n  if(!func)\n    func = (void *(*)()) dlsym(RTLD_NEXT, \"malloc\");\n\n  if (in_unwind) {\n    num_errors++;\n    return NULL;\n  } else {\n    return func(s);\n  }\n}\n\nstatic void\ndo_backtrace (void)\n{\n  unw_word_t ip, sp;\n  unw_cursor_t cursor;\n  unw_context_t uc;\n  int ret;\n\n  in_unwind = 1;\n  unw_getcontext (&uc);\n  if (unw_init_local (&cursor, &uc) < 0)\n    panic (\"unw_init_local failed!\\n\");\n\n  do\n    {\n      unw_get_reg (&cursor, UNW_REG_IP, &ip);\n      unw_get_reg (&cursor, UNW_REG_SP, &sp);\n\n      ret = unw_step (&cursor);\n      if (ret < 0)\n\t{\n\t  ++num_errors;\n\t}\n    }\n  while (ret > 0);\n  in_unwind = 0;\n}\n\nvoid\nfoo3 (void)\n{\n  do_backtrace ();\n}\n\nvoid\nfoo2 (void)\n{\n  foo3 ();\n}\n\nvoid\nfoo1 (void)\n{\n  foo2 ();\n}\n\nint\nmain (void)\n{\n  foo1();\n\n  if (num_errors > 0)\n    {\n      fprintf (stderr, \"FAILURE: detected %d errors\\n\", num_errors);\n      exit (-1);\n    }\n  return 0;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-libunwind-master-dwt2qxx3j4hnf4kmav7v6l2hhs5xwxbz/spack-src/.git/objects/pack/pack-0218b214042ddc070190b331967d698cc0209cd9.pack",
        "/tmp/vanessa/spack-stage/spack-stage-libunwind-master-dwt2qxx3j4hnf4kmav7v6l2hhs5xwxbz/spack-src/.git/objects/pack/pack-0218b214042ddc070190b331967d698cc0209cd9.idx"
    ],
    "total_files": 829
}