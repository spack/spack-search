{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/include/node/uv.h": "/* Copyright Joyent, Inc. and other Node contributors. All rights reserved.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n */\n\n/* See https://github.com/libuv/libuv#documentation for documentation. */\n\n#ifndef UV_H\n#define UV_H\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#ifdef _WIN32\n  /* Windows - set up dll import/export decorators. */\n# if defined(BUILDING_UV_SHARED)\n    /* Building shared library. */\n#   define UV_EXTERN __declspec(dllexport)\n# elif defined(USING_UV_SHARED)\n    /* Using shared library. */\n#   define UV_EXTERN __declspec(dllimport)\n# else\n    /* Building static library. */\n#   define UV_EXTERN /* nothing */\n# endif\n#elif __GNUC__ >= 4\n# define UV_EXTERN __attribute__((visibility(\"default\")))\n#else\n# define UV_EXTERN /* nothing */\n#endif\n\n#include \"uv-errno.h\"\n#include \"uv-version.h\"\n#include <stddef.h>\n#include <stdio.h>\n\n#if defined(_MSC_VER) && _MSC_VER < 1600\n# include \"stdint-msvc2008.h\"\n#else\n# include <stdint.h>\n#endif\n\n#if defined(_WIN32)\n# include \"uv-win.h\"\n#else\n# include \"uv-unix.h\"\n#endif\n\n/* Expand this list if necessary. */\n#define UV_ERRNO_MAP(XX)                                                      \\\n  XX(E2BIG, \"argument list too long\")                                         \\\n  XX(EACCES, \"permission denied\")                                             \\\n  XX(EADDRINUSE, \"address already in use\")                                    \\\n  XX(EADDRNOTAVAIL, \"address not available\")                                  \\\n  XX(EAFNOSUPPORT, \"address family not supported\")                            \\\n  XX(EAGAIN, \"resource temporarily unavailable\")                              \\\n  XX(EAI_ADDRFAMILY, \"address family not supported\")                          \\\n  XX(EAI_AGAIN, \"temporary failure\")                                          \\\n  XX(EAI_BADFLAGS, \"bad ai_flags value\")                                      \\\n  XX(EAI_BADHINTS, \"invalid value for hints\")                                 \\\n  XX(EAI_CANCELED, \"request canceled\")                                        \\\n  XX(EAI_FAIL, \"permanent failure\")                                           \\\n  XX(EAI_FAMILY, \"ai_family not supported\")                                   \\\n  XX(EAI_MEMORY, \"out of memory\")                                             \\\n  XX(EAI_NODATA, \"no address\")                                                \\\n  XX(EAI_NONAME, \"unknown node or service\")                                   \\\n  XX(EAI_OVERFLOW, \"argument buffer overflow\")                                \\\n  XX(EAI_PROTOCOL, \"resolved protocol is unknown\")                            \\\n  XX(EAI_SERVICE, \"service not available for socket type\")                    \\\n  XX(EAI_SOCKTYPE, \"socket type not supported\")                               \\\n  XX(EALREADY, \"connection already in progress\")                              \\\n  XX(EBADF, \"bad file descriptor\")                                            \\\n  XX(EBUSY, \"resource busy or locked\")                                        \\\n  XX(ECANCELED, \"operation canceled\")                                         \\\n  XX(ECHARSET, \"invalid Unicode character\")                                   \\\n  XX(ECONNABORTED, \"software caused connection abort\")                        \\\n  XX(ECONNREFUSED, \"connection refused\")                                      \\\n  XX(ECONNRESET, \"connection reset by peer\")                                  \\\n  XX(EDESTADDRREQ, \"destination address required\")                            \\\n  XX(EEXIST, \"file already exists\")                                           \\\n  XX(EFAULT, \"bad address in system call argument\")                           \\\n  XX(EFBIG, \"file too large\")                                                 \\\n  XX(EHOSTUNREACH, \"host is unreachable\")                                     \\\n  XX(EINTR, \"interrupted system call\")                                        \\\n  XX(EINVAL, \"invalid argument\")                                              \\\n  XX(EIO, \"i/o error\")                                                        \\\n  XX(EISCONN, \"socket is already connected\")                                  \\\n  XX(EISDIR, \"illegal operation on a directory\")                              \\\n  XX(ELOOP, \"too many symbolic links encountered\")                            \\\n  XX(EMFILE, \"too many open files\")                                           \\\n  XX(EMSGSIZE, \"message too long\")                                            \\\n  XX(ENAMETOOLONG, \"name too long\")                                           \\\n  XX(ENETDOWN, \"network is down\")                                             \\\n  XX(ENETUNREACH, \"network is unreachable\")                                   \\\n  XX(ENFILE, \"file table overflow\")                                           \\\n  XX(ENOBUFS, \"no buffer space available\")                                    \\\n  XX(ENODEV, \"no such device\")                                                \\\n  XX(ENOENT, \"no such file or directory\")                                     \\\n  XX(ENOMEM, \"not enough memory\")                                             \\\n  XX(ENONET, \"machine is not on the network\")                                 \\\n  XX(ENOPROTOOPT, \"protocol not available\")                                   \\\n  XX(ENOSPC, \"no space left on device\")                                       \\\n  XX(ENOSYS, \"function not implemented\")                                      \\\n  XX(ENOTCONN, \"socket is not connected\")                                     \\\n  XX(ENOTDIR, \"not a directory\")                                              \\\n  XX(ENOTEMPTY, \"directory not empty\")                                        \\\n  XX(ENOTSOCK, \"socket operation on non-socket\")                              \\\n  XX(ENOTSUP, \"operation not supported on socket\")                            \\\n  XX(EPERM, \"operation not permitted\")                                        \\\n  XX(EPIPE, \"broken pipe\")                                                    \\\n  XX(EPROTO, \"protocol error\")                                                \\\n  XX(EPROTONOSUPPORT, \"protocol not supported\")                               \\\n  XX(EPROTOTYPE, \"protocol wrong type for socket\")                            \\\n  XX(ERANGE, \"result too large\")                                              \\\n  XX(EROFS, \"read-only file system\")                                          \\\n  XX(ESHUTDOWN, \"cannot send after transport endpoint shutdown\")              \\\n  XX(ESPIPE, \"invalid seek\")                                                  \\\n  XX(ESRCH, \"no such process\")                                                \\\n  XX(ETIMEDOUT, \"connection timed out\")                                       \\\n  XX(ETXTBSY, \"text file is busy\")                                            \\\n  XX(EXDEV, \"cross-device link not permitted\")                                \\\n  XX(UNKNOWN, \"unknown error\")                                                \\\n  XX(EOF, \"end of file\")                                                      \\\n  XX(ENXIO, \"no such device or address\")                                      \\\n  XX(EMLINK, \"too many links\")                                                \\\n  XX(EHOSTDOWN, \"host is down\")                                               \\\n  XX(EREMOTEIO, \"remote I/O error\")                                           \\\n  XX(ENOTTY, \"inappropriate ioctl for device\")                                \\\n\n#define UV_HANDLE_TYPE_MAP(XX)                                                \\\n  XX(ASYNC, async)                                                            \\\n  XX(CHECK, check)                                                            \\\n  XX(FS_EVENT, fs_event)                                                      \\\n  XX(FS_POLL, fs_poll)                                                        \\\n  XX(HANDLE, handle)                                                          \\\n  XX(IDLE, idle)                                                              \\\n  XX(NAMED_PIPE, pipe)                                                        \\\n  XX(POLL, poll)                                                              \\\n  XX(PREPARE, prepare)                                                        \\\n  XX(PROCESS, process)                                                        \\\n  XX(STREAM, stream)                                                          \\\n  XX(TCP, tcp)                                                                \\\n  XX(TIMER, timer)                                                            \\\n  XX(TTY, tty)                                                                \\\n  XX(UDP, udp)                                                                \\\n  XX(SIGNAL, signal)                                                          \\\n\n#define UV_REQ_TYPE_MAP(XX)                                                   \\\n  XX(REQ, req)                                                                \\\n  XX(CONNECT, connect)                                                        \\\n  XX(WRITE, write)                                                            \\\n  XX(SHUTDOWN, shutdown)                                                      \\\n  XX(UDP_SEND, udp_send)                                                      \\\n  XX(FS, fs)                                                                  \\\n  XX(WORK, work)                                                              \\\n  XX(GETADDRINFO, getaddrinfo)                                                \\\n  XX(GETNAMEINFO, getnameinfo)                                                \\\n\ntypedef enum {\n#define XX(code, _) UV_ ## code = UV__ ## code,\n  UV_ERRNO_MAP(XX)\n#undef XX\n  UV_ERRNO_MAX = UV__EOF - 1\n} uv_errno_t;\n\ntypedef enum {\n  UV_UNKNOWN_HANDLE = 0,\n#define XX(uc, lc) UV_##uc,\n  UV_HANDLE_TYPE_MAP(XX)\n#undef XX\n  UV_FILE,\n  UV_HANDLE_TYPE_MAX\n} uv_handle_type;\n\ntypedef enum {\n  UV_UNKNOWN_REQ = 0,\n#define XX(uc, lc) UV_##uc,\n  UV_REQ_TYPE_MAP(XX)\n#undef XX\n  UV_REQ_TYPE_PRIVATE\n  UV_REQ_TYPE_MAX\n} uv_req_type;\n\n\n/* Handle types. */\ntypedef struct uv_loop_s uv_loop_t;\ntypedef struct uv_handle_s uv_handle_t;\ntypedef struct uv_stream_s uv_stream_t;\ntypedef struct uv_tcp_s uv_tcp_t;\ntypedef struct uv_udp_s uv_udp_t;\ntypedef struct uv_pipe_s uv_pipe_t;\ntypedef struct uv_tty_s uv_tty_t;\ntypedef struct uv_poll_s uv_poll_t;\ntypedef struct uv_timer_s uv_timer_t;\ntypedef struct uv_prepare_s uv_prepare_t;\ntypedef struct uv_check_s uv_check_t;\ntypedef struct uv_idle_s uv_idle_t;\ntypedef struct uv_async_s uv_async_t;\ntypedef struct uv_process_s uv_process_t;\ntypedef struct uv_fs_event_s uv_fs_event_t;\ntypedef struct uv_fs_poll_s uv_fs_poll_t;\ntypedef struct uv_signal_s uv_signal_t;\n\n/* Request types. */\ntypedef struct uv_req_s uv_req_t;\ntypedef struct uv_getaddrinfo_s uv_getaddrinfo_t;\ntypedef struct uv_getnameinfo_s uv_getnameinfo_t;\ntypedef struct uv_shutdown_s uv_shutdown_t;\ntypedef struct uv_write_s uv_write_t;\ntypedef struct uv_connect_s uv_connect_t;\ntypedef struct uv_udp_send_s uv_udp_send_t;\ntypedef struct uv_fs_s uv_fs_t;\ntypedef struct uv_work_s uv_work_t;\n\n/* None of the above. */\ntypedef struct uv_cpu_info_s uv_cpu_info_t;\ntypedef struct uv_interface_address_s uv_interface_address_t;\ntypedef struct uv_dirent_s uv_dirent_t;\ntypedef struct uv_passwd_s uv_passwd_t;\n\ntypedef enum {\n  UV_LOOP_BLOCK_SIGNAL\n} uv_loop_option;\n\ntypedef enum {\n  UV_RUN_DEFAULT = 0,\n  UV_RUN_ONCE,\n  UV_RUN_NOWAIT\n} uv_run_mode;\n\n\nUV_EXTERN unsigned int uv_version(void);\nUV_EXTERN const char* uv_version_string(void);\n\ntypedef void* (*uv_malloc_func)(size_t size);\ntypedef void* (*uv_realloc_func)(void* ptr, size_t size);\ntypedef void* (*uv_calloc_func)(size_t count, size_t size);\ntypedef void (*uv_free_func)(void* ptr);\n\nUV_EXTERN int uv_replace_allocator(uv_malloc_func malloc_func,\n                                   uv_realloc_func realloc_func,\n                                   uv_calloc_func calloc_func,\n                                   uv_free_func free_func);\n\nUV_EXTERN uv_loop_t* uv_default_loop(void);\nUV_EXTERN int uv_loop_init(uv_loop_t* loop);\nUV_EXTERN int uv_loop_close(uv_loop_t* loop);\n/*\n * NOTE:\n *  This function is DEPRECATED (to be removed after 0.12), users should\n *  allocate the loop manually and use uv_loop_init instead.\n */\nUV_EXTERN uv_loop_t* uv_loop_new(void);\n/*\n * NOTE:\n *  This function is DEPRECATED (to be removed after 0.12). Users should use\n *  uv_loop_close and free the memory manually instead.\n */\nUV_EXTERN void uv_loop_delete(uv_loop_t*);\nUV_EXTERN size_t uv_loop_size(void);\nUV_EXTERN int uv_loop_alive(const uv_loop_t* loop);\nUV_EXTERN int uv_loop_configure(uv_loop_t* loop, uv_loop_option option, ...);\nUV_EXTERN int uv_loop_fork(uv_loop_t* loop);\n\nUV_EXTERN int uv_run(uv_loop_t*, uv_run_mode mode);\nUV_EXTERN void uv_stop(uv_loop_t*);\n\nUV_EXTERN void uv_ref(uv_handle_t*);\nUV_EXTERN void uv_unref(uv_handle_t*);\nUV_EXTERN int uv_has_ref(const uv_handle_t*);\n\nUV_EXTERN void uv_update_time(uv_loop_t*);\nUV_EXTERN uint64_t uv_now(const uv_loop_t*);\n\nUV_EXTERN int uv_backend_fd(const uv_loop_t*);\nUV_EXTERN int uv_backend_timeout(const uv_loop_t*);\n\ntypedef void (*uv_alloc_cb)(uv_handle_t* handle,\n                            size_t suggested_size,\n                            uv_buf_t* buf);\ntypedef void (*uv_read_cb)(uv_stream_t* stream,\n                           ssize_t nread,\n                           const uv_buf_t* buf);\ntypedef void (*uv_write_cb)(uv_write_t* req, int status);\ntypedef void (*uv_connect_cb)(uv_connect_t* req, int status);\ntypedef void (*uv_shutdown_cb)(uv_shutdown_t* req, int status);\ntypedef void (*uv_connection_cb)(uv_stream_t* server, int status);\ntypedef void (*uv_close_cb)(uv_handle_t* handle);\ntypedef void (*uv_poll_cb)(uv_poll_t* handle, int status, int events);\ntypedef void (*uv_timer_cb)(uv_timer_t* handle);\ntypedef void (*uv_async_cb)(uv_async_t* handle);\ntypedef void (*uv_prepare_cb)(uv_prepare_t* handle);\ntypedef void (*uv_check_cb)(uv_check_t* handle);\ntypedef void (*uv_idle_cb)(uv_idle_t* handle);\ntypedef void (*uv_exit_cb)(uv_process_t*, int64_t exit_status, int term_signal);\ntypedef void (*uv_walk_cb)(uv_handle_t* handle, void* arg);\ntypedef void (*uv_fs_cb)(uv_fs_t* req);\ntypedef void (*uv_work_cb)(uv_work_t* req);\ntypedef void (*uv_after_work_cb)(uv_work_t* req, int status);\ntypedef void (*uv_getaddrinfo_cb)(uv_getaddrinfo_t* req,\n                                  int status,\n                                  struct addrinfo* res);\ntypedef void (*uv_getnameinfo_cb)(uv_getnameinfo_t* req,\n                                  int status,\n                                  const char* hostname,\n                                  const char* service);\n\ntypedef struct {\n  long tv_sec;\n  long tv_nsec;\n} uv_timespec_t;\n\n\ntypedef struct {\n  uint64_t st_dev;\n  uint64_t st_mode;\n  uint64_t st_nlink;\n  uint64_t st_uid;\n  uint64_t st_gid;\n  uint64_t st_rdev;\n  uint64_t st_ino;\n  uint64_t st_size;\n  uint64_t st_blksize;\n  uint64_t st_blocks;\n  uint64_t st_flags;\n  uint64_t st_gen;\n  uv_timespec_t st_atim;\n  uv_timespec_t st_mtim;\n  uv_timespec_t st_ctim;\n  uv_timespec_t st_birthtim;\n} uv_stat_t;\n\n\ntypedef void (*uv_fs_event_cb)(uv_fs_event_t* handle,\n                               const char* filename,\n                               int events,\n                               int status);\n\ntypedef void (*uv_fs_poll_cb)(uv_fs_poll_t* handle,\n                              int status,\n                              const uv_stat_t* prev,\n                              const uv_stat_t* curr);\n\ntypedef void (*uv_signal_cb)(uv_signal_t* handle, int signum);\n\n\ntypedef enum {\n  UV_LEAVE_GROUP = 0,\n  UV_JOIN_GROUP\n} uv_membership;\n\n\nUV_EXTERN int uv_translate_sys_error(int sys_errno);\n\nUV_EXTERN const char* uv_strerror(int err);\nUV_EXTERN const char* uv_err_name(int err);\n\n\n#define UV_REQ_FIELDS                                                         \\\n  /* public */                                                                \\\n  void* data;                                                                 \\\n  /* read-only */                                                             \\\n  uv_req_type type;                                                           \\\n  /* private */                                                               \\\n  void* active_queue[2];                                                      \\\n  void* reserved[4];                                                          \\\n  UV_REQ_PRIVATE_FIELDS                                                       \\\n\n/* Abstract base class of all requests. */\nstruct uv_req_s {\n  UV_REQ_FIELDS\n};\n\n\n/* Platform-specific request types. */\nUV_PRIVATE_REQ_TYPES\n\n\nUV_EXTERN int uv_shutdown(uv_shutdown_t* req,\n                          uv_stream_t* handle,\n                          uv_shutdown_cb cb);\n\nstruct uv_shutdown_s {\n  UV_REQ_FIELDS\n  uv_stream_t* handle;\n  uv_shutdown_cb cb;\n  UV_SHUTDOWN_PRIVATE_FIELDS\n};\n\n\n#define UV_HANDLE_FIELDS                                                      \\\n  /* public */                                                                \\\n  void* data;                                                                 \\\n  /* read-only */                                                             \\\n  uv_loop_t* loop;                                                            \\\n  uv_handle_type type;                                                        \\\n  /* private */                                                               \\\n  uv_close_cb close_cb;                                                       \\\n  void* handle_queue[2];                                                      \\\n  union {                                                                     \\\n    int fd;                                                                   \\\n    void* reserved[4];                                                        \\\n  } u;                                                                        \\\n  UV_HANDLE_PRIVATE_FIELDS                                                    \\\n\n/* The abstract base class of all handles. */\nstruct uv_handle_s {\n  UV_HANDLE_FIELDS\n};\n\nUV_EXTERN size_t uv_handle_size(uv_handle_type type);\nUV_EXTERN uv_handle_type uv_handle_get_type(const uv_handle_t* handle);\nUV_EXTERN const char* uv_handle_type_name(uv_handle_type type);\nUV_EXTERN void* uv_handle_get_data(const uv_handle_t* handle);\nUV_EXTERN uv_loop_t* uv_handle_get_loop(const uv_handle_t* handle);\nUV_EXTERN void uv_handle_set_data(uv_handle_t* handle, void* data);\n\nUV_EXTERN size_t uv_req_size(uv_req_type type);\nUV_EXTERN void* uv_req_get_data(const uv_req_t* req);\nUV_EXTERN void uv_req_set_data(uv_req_t* req, void* data);\nUV_EXTERN uv_req_type uv_req_get_type(const uv_req_t* req);\nUV_EXTERN const char* uv_req_type_name(uv_req_type type);\n\nUV_EXTERN int uv_is_active(const uv_handle_t* handle);\n\nUV_EXTERN void uv_walk(uv_loop_t* loop, uv_walk_cb walk_cb, void* arg);\n\n/* Helpers for ad hoc debugging, no API/ABI stability guaranteed. */\nUV_EXTERN void uv_print_all_handles(uv_loop_t* loop, FILE* stream);\nUV_EXTERN void uv_print_active_handles(uv_loop_t* loop, FILE* stream);\n\nUV_EXTERN void uv_close(uv_handle_t* handle, uv_close_cb close_cb);\n\nUV_EXTERN int uv_send_buffer_size(uv_handle_t* handle, int* value);\nUV_EXTERN int uv_recv_buffer_size(uv_handle_t* handle, int* value);\n\nUV_EXTERN int uv_fileno(const uv_handle_t* handle, uv_os_fd_t* fd);\n\nUV_EXTERN uv_buf_t uv_buf_init(char* base, unsigned int len);\n\n\n#define UV_STREAM_FIELDS                                                      \\\n  /* number of bytes queued for writing */                                    \\\n  size_t write_queue_size;                                                    \\\n  uv_alloc_cb alloc_cb;                                                       \\\n  uv_read_cb read_cb;                                                         \\\n  /* private */                                                               \\\n  UV_STREAM_PRIVATE_FIELDS\n\n/*\n * uv_stream_t is a subclass of uv_handle_t.\n *\n * uv_stream is an abstract class.\n *\n * uv_stream_t is the parent class of uv_tcp_t, uv_pipe_t and uv_tty_t.\n */\nstruct uv_stream_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n};\n\nUV_EXTERN size_t uv_stream_get_write_queue_size(const uv_stream_t* stream);\n\nUV_EXTERN int uv_listen(uv_stream_t* stream, int backlog, uv_connection_cb cb);\nUV_EXTERN int uv_accept(uv_stream_t* server, uv_stream_t* client);\n\nUV_EXTERN int uv_read_start(uv_stream_t*,\n                            uv_alloc_cb alloc_cb,\n                            uv_read_cb read_cb);\nUV_EXTERN int uv_read_stop(uv_stream_t*);\n\nUV_EXTERN int uv_write(uv_write_t* req,\n                       uv_stream_t* handle,\n                       const uv_buf_t bufs[],\n                       unsigned int nbufs,\n                       uv_write_cb cb);\nUV_EXTERN int uv_write2(uv_write_t* req,\n                        uv_stream_t* handle,\n                        const uv_buf_t bufs[],\n                        unsigned int nbufs,\n                        uv_stream_t* send_handle,\n                        uv_write_cb cb);\nUV_EXTERN int uv_try_write(uv_stream_t* handle,\n                           const uv_buf_t bufs[],\n                           unsigned int nbufs);\n\n/* uv_write_t is a subclass of uv_req_t. */\nstruct uv_write_s {\n  UV_REQ_FIELDS\n  uv_write_cb cb;\n  uv_stream_t* send_handle;\n  uv_stream_t* handle;\n  UV_WRITE_PRIVATE_FIELDS\n};\n\n\nUV_EXTERN int uv_is_readable(const uv_stream_t* handle);\nUV_EXTERN int uv_is_writable(const uv_stream_t* handle);\n\nUV_EXTERN int uv_stream_set_blocking(uv_stream_t* handle, int blocking);\n\nUV_EXTERN int uv_is_closing(const uv_handle_t* handle);\n\n\n/*\n * uv_tcp_t is a subclass of uv_stream_t.\n *\n * Represents a TCP stream or TCP server.\n */\nstruct uv_tcp_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n  UV_TCP_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_tcp_init(uv_loop_t*, uv_tcp_t* handle);\nUV_EXTERN int uv_tcp_init_ex(uv_loop_t*, uv_tcp_t* handle, unsigned int flags);\nUV_EXTERN int uv_tcp_open(uv_tcp_t* handle, uv_os_sock_t sock);\nUV_EXTERN int uv_tcp_nodelay(uv_tcp_t* handle, int enable);\nUV_EXTERN int uv_tcp_keepalive(uv_tcp_t* handle,\n                               int enable,\n                               unsigned int delay);\nUV_EXTERN int uv_tcp_simultaneous_accepts(uv_tcp_t* handle, int enable);\n\nenum uv_tcp_flags {\n  /* Used with uv_tcp_bind, when an IPv6 address is used. */\n  UV_TCP_IPV6ONLY = 1\n};\n\nUV_EXTERN int uv_tcp_bind(uv_tcp_t* handle,\n                          const struct sockaddr* addr,\n                          unsigned int flags);\nUV_EXTERN int uv_tcp_getsockname(const uv_tcp_t* handle,\n                                 struct sockaddr* name,\n                                 int* namelen);\nUV_EXTERN int uv_tcp_getpeername(const uv_tcp_t* handle,\n                                 struct sockaddr* name,\n                                 int* namelen);\nUV_EXTERN int uv_tcp_connect(uv_connect_t* req,\n                             uv_tcp_t* handle,\n                             const struct sockaddr* addr,\n                             uv_connect_cb cb);\n\n/* uv_connect_t is a subclass of uv_req_t. */\nstruct uv_connect_s {\n  UV_REQ_FIELDS\n  uv_connect_cb cb;\n  uv_stream_t* handle;\n  UV_CONNECT_PRIVATE_FIELDS\n};\n\n\n/*\n * UDP support.\n */\n\nenum uv_udp_flags {\n  /* Disables dual stack mode. */\n  UV_UDP_IPV6ONLY = 1,\n  /*\n   * Indicates message was truncated because read buffer was too small. The\n   * remainder was discarded by the OS. Used in uv_udp_recv_cb.\n   */\n  UV_UDP_PARTIAL = 2,\n  /*\n   * Indicates if SO_REUSEADDR will be set when binding the handle.\n   * This sets the SO_REUSEPORT socket flag on the BSDs and OS X. On other\n   * Unix platforms, it sets the SO_REUSEADDR flag.  What that means is that\n   * multiple threads or processes can bind to the same address without error\n   * (provided they all set the flag) but only the last one to bind will receive\n   * any traffic, in effect \"stealing\" the port from the previous listener.\n   */\n  UV_UDP_REUSEADDR = 4\n};\n\ntypedef void (*uv_udp_send_cb)(uv_udp_send_t* req, int status);\ntypedef void (*uv_udp_recv_cb)(uv_udp_t* handle,\n                               ssize_t nread,\n                               const uv_buf_t* buf,\n                               const struct sockaddr* addr,\n                               unsigned flags);\n\n/* uv_udp_t is a subclass of uv_handle_t. */\nstruct uv_udp_s {\n  UV_HANDLE_FIELDS\n  /* read-only */\n  /*\n   * Number of bytes queued for sending. This field strictly shows how much\n   * information is currently queued.\n   */\n  size_t send_queue_size;\n  /*\n   * Number of send requests currently in the queue awaiting to be processed.\n   */\n  size_t send_queue_count;\n  UV_UDP_PRIVATE_FIELDS\n};\n\n/* uv_udp_send_t is a subclass of uv_req_t. */\nstruct uv_udp_send_s {\n  UV_REQ_FIELDS\n  uv_udp_t* handle;\n  uv_udp_send_cb cb;\n  UV_UDP_SEND_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_udp_init(uv_loop_t*, uv_udp_t* handle);\nUV_EXTERN int uv_udp_init_ex(uv_loop_t*, uv_udp_t* handle, unsigned int flags);\nUV_EXTERN int uv_udp_open(uv_udp_t* handle, uv_os_sock_t sock);\nUV_EXTERN int uv_udp_bind(uv_udp_t* handle,\n                          const struct sockaddr* addr,\n                          unsigned int flags);\n\nUV_EXTERN int uv_udp_getsockname(const uv_udp_t* handle,\n                                 struct sockaddr* name,\n                                 int* namelen);\nUV_EXTERN int uv_udp_set_membership(uv_udp_t* handle,\n                                    const char* multicast_addr,\n                                    const char* interface_addr,\n                                    uv_membership membership);\nUV_EXTERN int uv_udp_set_multicast_loop(uv_udp_t* handle, int on);\nUV_EXTERN int uv_udp_set_multicast_ttl(uv_udp_t* handle, int ttl);\nUV_EXTERN int uv_udp_set_multicast_interface(uv_udp_t* handle,\n                                             const char* interface_addr);\nUV_EXTERN int uv_udp_set_broadcast(uv_udp_t* handle, int on);\nUV_EXTERN int uv_udp_set_ttl(uv_udp_t* handle, int ttl);\nUV_EXTERN int uv_udp_send(uv_udp_send_t* req,\n                          uv_udp_t* handle,\n                          const uv_buf_t bufs[],\n                          unsigned int nbufs,\n                          const struct sockaddr* addr,\n                          uv_udp_send_cb send_cb);\nUV_EXTERN int uv_udp_try_send(uv_udp_t* handle,\n                              const uv_buf_t bufs[],\n                              unsigned int nbufs,\n                              const struct sockaddr* addr);\nUV_EXTERN int uv_udp_recv_start(uv_udp_t* handle,\n                                uv_alloc_cb alloc_cb,\n                                uv_udp_recv_cb recv_cb);\nUV_EXTERN int uv_udp_recv_stop(uv_udp_t* handle);\nUV_EXTERN size_t uv_udp_get_send_queue_size(const uv_udp_t* handle);\nUV_EXTERN size_t uv_udp_get_send_queue_count(const uv_udp_t* handle);\n\n\n/*\n * uv_tty_t is a subclass of uv_stream_t.\n *\n * Representing a stream for the console.\n */\nstruct uv_tty_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n  UV_TTY_PRIVATE_FIELDS\n};\n\ntypedef enum {\n  /* Initial/normal terminal mode */\n  UV_TTY_MODE_NORMAL,\n  /* Raw input mode (On Windows, ENABLE_WINDOW_INPUT is also enabled) */\n  UV_TTY_MODE_RAW,\n  /* Binary-safe I/O mode for IPC (Unix-only) */\n  UV_TTY_MODE_IO\n} uv_tty_mode_t;\n\nUV_EXTERN int uv_tty_init(uv_loop_t*, uv_tty_t*, uv_file fd, int readable);\nUV_EXTERN int uv_tty_set_mode(uv_tty_t*, uv_tty_mode_t mode);\nUV_EXTERN int uv_tty_reset_mode(void);\nUV_EXTERN int uv_tty_get_winsize(uv_tty_t*, int* width, int* height);\n\n#ifdef __cplusplus\nextern \"C++\" {\n\ninline int uv_tty_set_mode(uv_tty_t* handle, int mode) {\n  return uv_tty_set_mode(handle, static_cast<uv_tty_mode_t>(mode));\n}\n\n}\n#endif\n\nUV_EXTERN uv_handle_type uv_guess_handle(uv_file file);\n\n/*\n * uv_pipe_t is a subclass of uv_stream_t.\n *\n * Representing a pipe stream or pipe server. On Windows this is a Named\n * Pipe. On Unix this is a Unix domain socket.\n */\nstruct uv_pipe_s {\n  UV_HANDLE_FIELDS\n  UV_STREAM_FIELDS\n  int ipc; /* non-zero if this pipe is used for passing handles */\n  UV_PIPE_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_pipe_init(uv_loop_t*, uv_pipe_t* handle, int ipc);\nUV_EXTERN int uv_pipe_open(uv_pipe_t*, uv_file file);\nUV_EXTERN int uv_pipe_bind(uv_pipe_t* handle, const char* name);\nUV_EXTERN void uv_pipe_connect(uv_connect_t* req,\n                               uv_pipe_t* handle,\n                               const char* name,\n                               uv_connect_cb cb);\nUV_EXTERN int uv_pipe_getsockname(const uv_pipe_t* handle,\n                                  char* buffer,\n                                  size_t* size);\nUV_EXTERN int uv_pipe_getpeername(const uv_pipe_t* handle,\n                                  char* buffer,\n                                  size_t* size);\nUV_EXTERN void uv_pipe_pending_instances(uv_pipe_t* handle, int count);\nUV_EXTERN int uv_pipe_pending_count(uv_pipe_t* handle);\nUV_EXTERN uv_handle_type uv_pipe_pending_type(uv_pipe_t* handle);\nUV_EXTERN int uv_pipe_chmod(uv_pipe_t* handle, int flags);\n\n\nstruct uv_poll_s {\n  UV_HANDLE_FIELDS\n  uv_poll_cb poll_cb;\n  UV_POLL_PRIVATE_FIELDS\n};\n\nenum uv_poll_event {\n  UV_READABLE = 1,\n  UV_WRITABLE = 2,\n  UV_DISCONNECT = 4,\n  UV_PRIORITIZED = 8\n};\n\nUV_EXTERN int uv_poll_init(uv_loop_t* loop, uv_poll_t* handle, int fd);\nUV_EXTERN int uv_poll_init_socket(uv_loop_t* loop,\n                                  uv_poll_t* handle,\n                                  uv_os_sock_t socket);\nUV_EXTERN int uv_poll_start(uv_poll_t* handle, int events, uv_poll_cb cb);\nUV_EXTERN int uv_poll_stop(uv_poll_t* handle);\n\n\nstruct uv_prepare_s {\n  UV_HANDLE_FIELDS\n  UV_PREPARE_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_prepare_init(uv_loop_t*, uv_prepare_t* prepare);\nUV_EXTERN int uv_prepare_start(uv_prepare_t* prepare, uv_prepare_cb cb);\nUV_EXTERN int uv_prepare_stop(uv_prepare_t* prepare);\n\n\nstruct uv_check_s {\n  UV_HANDLE_FIELDS\n  UV_CHECK_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_check_init(uv_loop_t*, uv_check_t* check);\nUV_EXTERN int uv_check_start(uv_check_t* check, uv_check_cb cb);\nUV_EXTERN int uv_check_stop(uv_check_t* check);\n\n\nstruct uv_idle_s {\n  UV_HANDLE_FIELDS\n  UV_IDLE_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_idle_init(uv_loop_t*, uv_idle_t* idle);\nUV_EXTERN int uv_idle_start(uv_idle_t* idle, uv_idle_cb cb);\nUV_EXTERN int uv_idle_stop(uv_idle_t* idle);\n\n\nstruct uv_async_s {\n  UV_HANDLE_FIELDS\n  UV_ASYNC_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_async_init(uv_loop_t*,\n                            uv_async_t* async,\n                            uv_async_cb async_cb);\nUV_EXTERN int uv_async_send(uv_async_t* async);\n\n\n/*\n * uv_timer_t is a subclass of uv_handle_t.\n *\n * Used to get woken up at a specified time in the future.\n */\nstruct uv_timer_s {\n  UV_HANDLE_FIELDS\n  UV_TIMER_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_timer_init(uv_loop_t*, uv_timer_t* handle);\nUV_EXTERN int uv_timer_start(uv_timer_t* handle,\n                             uv_timer_cb cb,\n                             uint64_t timeout,\n                             uint64_t repeat);\nUV_EXTERN int uv_timer_stop(uv_timer_t* handle);\nUV_EXTERN int uv_timer_again(uv_timer_t* handle);\nUV_EXTERN void uv_timer_set_repeat(uv_timer_t* handle, uint64_t repeat);\nUV_EXTERN uint64_t uv_timer_get_repeat(const uv_timer_t* handle);\n\n\n/*\n * uv_getaddrinfo_t is a subclass of uv_req_t.\n *\n * Request object for uv_getaddrinfo.\n */\nstruct uv_getaddrinfo_s {\n  UV_REQ_FIELDS\n  /* read-only */\n  uv_loop_t* loop;\n  /* struct addrinfo* addrinfo is marked as private, but it really isn't. */\n  UV_GETADDRINFO_PRIVATE_FIELDS\n};\n\n\nUV_EXTERN int uv_getaddrinfo(uv_loop_t* loop,\n                             uv_getaddrinfo_t* req,\n                             uv_getaddrinfo_cb getaddrinfo_cb,\n                             const char* node,\n                             const char* service,\n                             const struct addrinfo* hints);\nUV_EXTERN void uv_freeaddrinfo(struct addrinfo* ai);\n\n\n/*\n* uv_getnameinfo_t is a subclass of uv_req_t.\n*\n* Request object for uv_getnameinfo.\n*/\nstruct uv_getnameinfo_s {\n  UV_REQ_FIELDS\n  /* read-only */\n  uv_loop_t* loop;\n  /* host and service are marked as private, but they really aren't. */\n  UV_GETNAMEINFO_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_getnameinfo(uv_loop_t* loop,\n                             uv_getnameinfo_t* req,\n                             uv_getnameinfo_cb getnameinfo_cb,\n                             const struct sockaddr* addr,\n                             int flags);\n\n\n/* uv_spawn() options. */\ntypedef enum {\n  UV_IGNORE         = 0x00,\n  UV_CREATE_PIPE    = 0x01,\n  UV_INHERIT_FD     = 0x02,\n  UV_INHERIT_STREAM = 0x04,\n\n  /*\n   * When UV_CREATE_PIPE is specified, UV_READABLE_PIPE and UV_WRITABLE_PIPE\n   * determine the direction of flow, from the child process' perspective. Both\n   * flags may be specified to create a duplex data stream.\n   */\n  UV_READABLE_PIPE  = 0x10,\n  UV_WRITABLE_PIPE  = 0x20\n} uv_stdio_flags;\n\ntypedef struct uv_stdio_container_s {\n  uv_stdio_flags flags;\n\n  union {\n    uv_stream_t* stream;\n    int fd;\n  } data;\n} uv_stdio_container_t;\n\ntypedef struct uv_process_options_s {\n  uv_exit_cb exit_cb; /* Called after the process exits. */\n  const char* file;   /* Path to program to execute. */\n  /*\n   * Command line arguments. args[0] should be the path to the program. On\n   * Windows this uses CreateProcess which concatenates the arguments into a\n   * string this can cause some strange errors. See the note at\n   * windows_verbatim_arguments.\n   */\n  char** args;\n  /*\n   * This will be set as the environ variable in the subprocess. If this is\n   * NULL then the parents environ will be used.\n   */\n  char** env;\n  /*\n   * If non-null this represents a directory the subprocess should execute\n   * in. Stands for current working directory.\n   */\n  const char* cwd;\n  /*\n   * Various flags that control how uv_spawn() behaves. See the definition of\n   * `enum uv_process_flags` below.\n   */\n  unsigned int flags;\n  /*\n   * The `stdio` field points to an array of uv_stdio_container_t structs that\n   * describe the file descriptors that will be made available to the child\n   * process. The convention is that stdio[0] points to stdin, fd 1 is used for\n   * stdout, and fd 2 is stderr.\n   *\n   * Note that on windows file descriptors greater than 2 are available to the\n   * child process only if the child processes uses the MSVCRT runtime.\n   */\n  int stdio_count;\n  uv_stdio_container_t* stdio;\n  /*\n   * Libuv can change the child process' user/group id. This happens only when\n   * the appropriate bits are set in the flags fields. This is not supported on\n   * windows; uv_spawn() will fail and set the error to UV_ENOTSUP.\n   */\n  uv_uid_t uid;\n  uv_gid_t gid;\n} uv_process_options_t;\n\n/*\n * These are the flags that can be used for the uv_process_options.flags field.\n */\nenum uv_process_flags {\n  /*\n   * Set the child process' user id. The user id is supplied in the `uid` field\n   * of the options struct. This does not work on windows; setting this flag\n   * will cause uv_spawn() to fail.\n   */\n  UV_PROCESS_SETUID = (1 << 0),\n  /*\n   * Set the child process' group id. The user id is supplied in the `gid`\n   * field of the options struct. This does not work on windows; setting this\n   * flag will cause uv_spawn() to fail.\n   */\n  UV_PROCESS_SETGID = (1 << 1),\n  /*\n   * Do not wrap any arguments in quotes, or perform any other escaping, when\n   * converting the argument list into a command line string. This option is\n   * only meaningful on Windows systems. On Unix it is silently ignored.\n   */\n  UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS = (1 << 2),\n  /*\n   * Spawn the child process in a detached state - this will make it a process\n   * group leader, and will effectively enable the child to keep running after\n   * the parent exits.  Note that the child process will still keep the\n   * parent's event loop alive unless the parent process calls uv_unref() on\n   * the child's process handle.\n   */\n  UV_PROCESS_DETACHED = (1 << 3),\n  /*\n   * Hide the subprocess console window that would normally be created. This\n   * option is only meaningful on Windows systems. On Unix it is silently\n   * ignored.\n   */\n  UV_PROCESS_WINDOWS_HIDE = (1 << 4)\n};\n\n/*\n * uv_process_t is a subclass of uv_handle_t.\n */\nstruct uv_process_s {\n  UV_HANDLE_FIELDS\n  uv_exit_cb exit_cb;\n  int pid;\n  UV_PROCESS_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_spawn(uv_loop_t* loop,\n                       uv_process_t* handle,\n                       const uv_process_options_t* options);\nUV_EXTERN int uv_process_kill(uv_process_t*, int signum);\nUV_EXTERN int uv_kill(int pid, int signum);\nUV_EXTERN uv_pid_t uv_process_get_pid(const uv_process_t*);\n\n\n/*\n * uv_work_t is a subclass of uv_req_t.\n */\nstruct uv_work_s {\n  UV_REQ_FIELDS\n  uv_loop_t* loop;\n  uv_work_cb work_cb;\n  uv_after_work_cb after_work_cb;\n  UV_WORK_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_queue_work(uv_loop_t* loop,\n                            uv_work_t* req,\n                            uv_work_cb work_cb,\n                            uv_after_work_cb after_work_cb);\n\nUV_EXTERN int uv_cancel(uv_req_t* req);\n\n\nstruct uv_cpu_info_s {\n  char* model;\n  int speed;\n  struct uv_cpu_times_s {\n    uint64_t user;\n    uint64_t nice;\n    uint64_t sys;\n    uint64_t idle;\n    uint64_t irq;\n  } cpu_times;\n};\n\nstruct uv_interface_address_s {\n  char* name;\n  char phys_addr[6];\n  int is_internal;\n  union {\n    struct sockaddr_in address4;\n    struct sockaddr_in6 address6;\n  } address;\n  union {\n    struct sockaddr_in netmask4;\n    struct sockaddr_in6 netmask6;\n  } netmask;\n};\n\nstruct uv_passwd_s {\n  char* username;\n  long uid;\n  long gid;\n  char* shell;\n  char* homedir;\n};\n\ntypedef enum {\n  UV_DIRENT_UNKNOWN,\n  UV_DIRENT_FILE,\n  UV_DIRENT_DIR,\n  UV_DIRENT_LINK,\n  UV_DIRENT_FIFO,\n  UV_DIRENT_SOCKET,\n  UV_DIRENT_CHAR,\n  UV_DIRENT_BLOCK\n} uv_dirent_type_t;\n\nstruct uv_dirent_s {\n  const char* name;\n  uv_dirent_type_t type;\n};\n\nUV_EXTERN char** uv_setup_args(int argc, char** argv);\nUV_EXTERN int uv_get_process_title(char* buffer, size_t size);\nUV_EXTERN int uv_set_process_title(const char* title);\nUV_EXTERN int uv_resident_set_memory(size_t* rss);\nUV_EXTERN int uv_uptime(double* uptime);\nUV_EXTERN uv_os_fd_t uv_get_osfhandle(int fd);\n\ntypedef struct {\n  long tv_sec;\n  long tv_usec;\n} uv_timeval_t;\n\ntypedef struct {\n   uv_timeval_t ru_utime; /* user CPU time used */\n   uv_timeval_t ru_stime; /* system CPU time used */\n   uint64_t ru_maxrss;    /* maximum resident set size */\n   uint64_t ru_ixrss;     /* integral shared memory size */\n   uint64_t ru_idrss;     /* integral unshared data size */\n   uint64_t ru_isrss;     /* integral unshared stack size */\n   uint64_t ru_minflt;    /* page reclaims (soft page faults) */\n   uint64_t ru_majflt;    /* page faults (hard page faults) */\n   uint64_t ru_nswap;     /* swaps */\n   uint64_t ru_inblock;   /* block input operations */\n   uint64_t ru_oublock;   /* block output operations */\n   uint64_t ru_msgsnd;    /* IPC messages sent */\n   uint64_t ru_msgrcv;    /* IPC messages received */\n   uint64_t ru_nsignals;  /* signals received */\n   uint64_t ru_nvcsw;     /* voluntary context switches */\n   uint64_t ru_nivcsw;    /* involuntary context switches */\n} uv_rusage_t;\n\nUV_EXTERN int uv_getrusage(uv_rusage_t* rusage);\n\nUV_EXTERN int uv_os_homedir(char* buffer, size_t* size);\nUV_EXTERN int uv_os_tmpdir(char* buffer, size_t* size);\nUV_EXTERN int uv_os_get_passwd(uv_passwd_t* pwd);\nUV_EXTERN void uv_os_free_passwd(uv_passwd_t* pwd);\nUV_EXTERN uv_pid_t uv_os_getpid(void);\nUV_EXTERN uv_pid_t uv_os_getppid(void);\n\nUV_EXTERN int uv_cpu_info(uv_cpu_info_t** cpu_infos, int* count);\nUV_EXTERN void uv_free_cpu_info(uv_cpu_info_t* cpu_infos, int count);\n\nUV_EXTERN int uv_interface_addresses(uv_interface_address_t** addresses,\n                                     int* count);\nUV_EXTERN void uv_free_interface_addresses(uv_interface_address_t* addresses,\n                                           int count);\n\nUV_EXTERN int uv_os_getenv(const char* name, char* buffer, size_t* size);\nUV_EXTERN int uv_os_setenv(const char* name, const char* value);\nUV_EXTERN int uv_os_unsetenv(const char* name);\n\nUV_EXTERN int uv_os_gethostname(char* buffer, size_t* size);\n\n\ntypedef enum {\n  UV_FS_UNKNOWN = -1,\n  UV_FS_CUSTOM,\n  UV_FS_OPEN,\n  UV_FS_CLOSE,\n  UV_FS_READ,\n  UV_FS_WRITE,\n  UV_FS_SENDFILE,\n  UV_FS_STAT,\n  UV_FS_LSTAT,\n  UV_FS_FSTAT,\n  UV_FS_FTRUNCATE,\n  UV_FS_UTIME,\n  UV_FS_FUTIME,\n  UV_FS_ACCESS,\n  UV_FS_CHMOD,\n  UV_FS_FCHMOD,\n  UV_FS_FSYNC,\n  UV_FS_FDATASYNC,\n  UV_FS_UNLINK,\n  UV_FS_RMDIR,\n  UV_FS_MKDIR,\n  UV_FS_MKDTEMP,\n  UV_FS_RENAME,\n  UV_FS_SCANDIR,\n  UV_FS_LINK,\n  UV_FS_SYMLINK,\n  UV_FS_READLINK,\n  UV_FS_CHOWN,\n  UV_FS_FCHOWN,\n  UV_FS_REALPATH,\n  UV_FS_COPYFILE\n} uv_fs_type;\n\n/* uv_fs_t is a subclass of uv_req_t. */\nstruct uv_fs_s {\n  UV_REQ_FIELDS\n  uv_fs_type fs_type;\n  uv_loop_t* loop;\n  uv_fs_cb cb;\n  ssize_t result;\n  void* ptr;\n  const char* path;\n  uv_stat_t statbuf;  /* Stores the result of uv_fs_stat() and uv_fs_fstat(). */\n  UV_FS_PRIVATE_FIELDS\n};\n\nUV_EXTERN uv_fs_type uv_fs_get_type(const uv_fs_t*);\nUV_EXTERN ssize_t uv_fs_get_result(const uv_fs_t*);\nUV_EXTERN void* uv_fs_get_ptr(const uv_fs_t*);\nUV_EXTERN const char* uv_fs_get_path(const uv_fs_t*);\nUV_EXTERN uv_stat_t* uv_fs_get_statbuf(uv_fs_t*);\n\nUV_EXTERN void uv_fs_req_cleanup(uv_fs_t* req);\nUV_EXTERN int uv_fs_close(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_open(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         const char* path,\n                         int flags,\n                         int mode,\n                         uv_fs_cb cb);\nUV_EXTERN int uv_fs_read(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         uv_file file,\n                         const uv_buf_t bufs[],\n                         unsigned int nbufs,\n                         int64_t offset,\n                         uv_fs_cb cb);\nUV_EXTERN int uv_fs_unlink(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           const char* path,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_write(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          const uv_buf_t bufs[],\n                          unsigned int nbufs,\n                          int64_t offset,\n                          uv_fs_cb cb);\n/*\n * This flag can be used with uv_fs_copyfile() to return an error if the\n * destination already exists.\n */\n#define UV_FS_COPYFILE_EXCL   0x0001\n\nUV_EXTERN int uv_fs_copyfile(uv_loop_t* loop,\n                             uv_fs_t* req,\n                             const char* path,\n                             const char* new_path,\n                             int flags,\n                             uv_fs_cb cb);\nUV_EXTERN int uv_fs_mkdir(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          int mode,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_mkdtemp(uv_loop_t* loop,\n                            uv_fs_t* req,\n                            const char* tpl,\n                            uv_fs_cb cb);\nUV_EXTERN int uv_fs_rmdir(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_scandir(uv_loop_t* loop,\n                            uv_fs_t* req,\n                            const char* path,\n                            int flags,\n                            uv_fs_cb cb);\nUV_EXTERN int uv_fs_scandir_next(uv_fs_t* req,\n                                 uv_dirent_t* ent);\nUV_EXTERN int uv_fs_stat(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         const char* path,\n                         uv_fs_cb cb);\nUV_EXTERN int uv_fs_fstat(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_rename(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           const char* path,\n                           const char* new_path,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_fsync(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          uv_file file,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_fdatasync(uv_loop_t* loop,\n                              uv_fs_t* req,\n                              uv_file file,\n                              uv_fs_cb cb);\nUV_EXTERN int uv_fs_ftruncate(uv_loop_t* loop,\n                              uv_fs_t* req,\n                              uv_file file,\n                              int64_t offset,\n                              uv_fs_cb cb);\nUV_EXTERN int uv_fs_sendfile(uv_loop_t* loop,\n                             uv_fs_t* req,\n                             uv_file out_fd,\n                             uv_file in_fd,\n                             int64_t in_offset,\n                             size_t length,\n                             uv_fs_cb cb);\nUV_EXTERN int uv_fs_access(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           const char* path,\n                           int mode,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_chmod(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          int mode,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_utime(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          double atime,\n                          double mtime,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_futime(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           uv_file file,\n                           double atime,\n                           double mtime,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_lstat(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_link(uv_loop_t* loop,\n                         uv_fs_t* req,\n                         const char* path,\n                         const char* new_path,\n                         uv_fs_cb cb);\n\n/*\n * This flag can be used with uv_fs_symlink() on Windows to specify whether\n * path argument points to a directory.\n */\n#define UV_FS_SYMLINK_DIR          0x0001\n\n/*\n * This flag can be used with uv_fs_symlink() on Windows to specify whether\n * the symlink is to be created using junction points.\n */\n#define UV_FS_SYMLINK_JUNCTION     0x0002\n\nUV_EXTERN int uv_fs_symlink(uv_loop_t* loop,\n                            uv_fs_t* req,\n                            const char* path,\n                            const char* new_path,\n                            int flags,\n                            uv_fs_cb cb);\nUV_EXTERN int uv_fs_readlink(uv_loop_t* loop,\n                             uv_fs_t* req,\n                             const char* path,\n                             uv_fs_cb cb);\nUV_EXTERN int uv_fs_realpath(uv_loop_t* loop,\n                             uv_fs_t* req,\n                             const char* path,\n                             uv_fs_cb cb);\nUV_EXTERN int uv_fs_fchmod(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           uv_file file,\n                           int mode,\n                           uv_fs_cb cb);\nUV_EXTERN int uv_fs_chown(uv_loop_t* loop,\n                          uv_fs_t* req,\n                          const char* path,\n                          uv_uid_t uid,\n                          uv_gid_t gid,\n                          uv_fs_cb cb);\nUV_EXTERN int uv_fs_fchown(uv_loop_t* loop,\n                           uv_fs_t* req,\n                           uv_file file,\n                           uv_uid_t uid,\n                           uv_gid_t gid,\n                           uv_fs_cb cb);\n\n\nenum uv_fs_event {\n  UV_RENAME = 1,\n  UV_CHANGE = 2\n};\n\n\nstruct uv_fs_event_s {\n  UV_HANDLE_FIELDS\n  /* private */\n  char* path;\n  UV_FS_EVENT_PRIVATE_FIELDS\n};\n\n\n/*\n * uv_fs_stat() based polling file watcher.\n */\nstruct uv_fs_poll_s {\n  UV_HANDLE_FIELDS\n  /* Private, don't touch. */\n  void* poll_ctx;\n};\n\nUV_EXTERN int uv_fs_poll_init(uv_loop_t* loop, uv_fs_poll_t* handle);\nUV_EXTERN int uv_fs_poll_start(uv_fs_poll_t* handle,\n                               uv_fs_poll_cb poll_cb,\n                               const char* path,\n                               unsigned int interval);\nUV_EXTERN int uv_fs_poll_stop(uv_fs_poll_t* handle);\nUV_EXTERN int uv_fs_poll_getpath(uv_fs_poll_t* handle,\n                                 char* buffer,\n                                 size_t* size);\n\n\nstruct uv_signal_s {\n  UV_HANDLE_FIELDS\n  uv_signal_cb signal_cb;\n  int signum;\n  UV_SIGNAL_PRIVATE_FIELDS\n};\n\nUV_EXTERN int uv_signal_init(uv_loop_t* loop, uv_signal_t* handle);\nUV_EXTERN int uv_signal_start(uv_signal_t* handle,\n                              uv_signal_cb signal_cb,\n                              int signum);\nUV_EXTERN int uv_signal_start_oneshot(uv_signal_t* handle,\n                                      uv_signal_cb signal_cb,\n                                      int signum);\nUV_EXTERN int uv_signal_stop(uv_signal_t* handle);\n\nUV_EXTERN void uv_loadavg(double avg[3]);\n\n\n/*\n * Flags to be passed to uv_fs_event_start().\n */\nenum uv_fs_event_flags {\n  /*\n   * By default, if the fs event watcher is given a directory name, we will\n   * watch for all events in that directory. This flags overrides this behavior\n   * and makes fs_event report only changes to the directory entry itself. This\n   * flag does not affect individual files watched.\n   * This flag is currently not implemented yet on any backend.\n   */\n  UV_FS_EVENT_WATCH_ENTRY = 1,\n\n  /*\n   * By default uv_fs_event will try to use a kernel interface such as inotify\n   * or kqueue to detect events. This may not work on remote filesystems such\n   * as NFS mounts. This flag makes fs_event fall back to calling stat() on a\n   * regular interval.\n   * This flag is currently not implemented yet on any backend.\n   */\n  UV_FS_EVENT_STAT = 2,\n\n  /*\n   * By default, event watcher, when watching directory, is not registering\n   * (is ignoring) changes in it's subdirectories.\n   * This flag will override this behaviour on platforms that support it.\n   */\n  UV_FS_EVENT_RECURSIVE = 4\n};\n\n\nUV_EXTERN int uv_fs_event_init(uv_loop_t* loop, uv_fs_event_t* handle);\nUV_EXTERN int uv_fs_event_start(uv_fs_event_t* handle,\n                                uv_fs_event_cb cb,\n                                const char* path,\n                                unsigned int flags);\nUV_EXTERN int uv_fs_event_stop(uv_fs_event_t* handle);\nUV_EXTERN int uv_fs_event_getpath(uv_fs_event_t* handle,\n                                  char* buffer,\n                                  size_t* size);\n\nUV_EXTERN int uv_ip4_addr(const char* ip, int port, struct sockaddr_in* addr);\nUV_EXTERN int uv_ip6_addr(const char* ip, int port, struct sockaddr_in6* addr);\n\nUV_EXTERN int uv_ip4_name(const struct sockaddr_in* src, char* dst, size_t size);\nUV_EXTERN int uv_ip6_name(const struct sockaddr_in6* src, char* dst, size_t size);\n\nUV_EXTERN int uv_inet_ntop(int af, const void* src, char* dst, size_t size);\nUV_EXTERN int uv_inet_pton(int af, const char* src, void* dst);\n\n#if defined(IF_NAMESIZE)\n# define UV_IF_NAMESIZE (IF_NAMESIZE + 1)\n#elif defined(IFNAMSIZ)\n# define UV_IF_NAMESIZE (IFNAMSIZ + 1)\n#else\n# define UV_IF_NAMESIZE (16 + 1)\n#endif\n\nUV_EXTERN int uv_if_indextoname(unsigned int ifindex,\n                                char* buffer,\n                                size_t* size);\nUV_EXTERN int uv_if_indextoiid(unsigned int ifindex,\n                               char* buffer,\n                               size_t* size);\n\nUV_EXTERN int uv_exepath(char* buffer, size_t* size);\n\nUV_EXTERN int uv_cwd(char* buffer, size_t* size);\n\nUV_EXTERN int uv_chdir(const char* dir);\n\nUV_EXTERN uint64_t uv_get_free_memory(void);\nUV_EXTERN uint64_t uv_get_total_memory(void);\n\nUV_EXTERN uint64_t uv_hrtime(void);\n\nUV_EXTERN void uv_disable_stdio_inheritance(void);\n\nUV_EXTERN int uv_dlopen(const char* filename, uv_lib_t* lib);\nUV_EXTERN void uv_dlclose(uv_lib_t* lib);\nUV_EXTERN int uv_dlsym(uv_lib_t* lib, const char* name, void** ptr);\nUV_EXTERN const char* uv_dlerror(const uv_lib_t* lib);\n\nUV_EXTERN int uv_mutex_init(uv_mutex_t* handle);\nUV_EXTERN int uv_mutex_init_recursive(uv_mutex_t* handle);\nUV_EXTERN void uv_mutex_destroy(uv_mutex_t* handle);\nUV_EXTERN void uv_mutex_lock(uv_mutex_t* handle);\nUV_EXTERN int uv_mutex_trylock(uv_mutex_t* handle);\nUV_EXTERN void uv_mutex_unlock(uv_mutex_t* handle);\n\nUV_EXTERN int uv_rwlock_init(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_destroy(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_rdlock(uv_rwlock_t* rwlock);\nUV_EXTERN int uv_rwlock_tryrdlock(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_rdunlock(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_wrlock(uv_rwlock_t* rwlock);\nUV_EXTERN int uv_rwlock_trywrlock(uv_rwlock_t* rwlock);\nUV_EXTERN void uv_rwlock_wrunlock(uv_rwlock_t* rwlock);\n\nUV_EXTERN int uv_sem_init(uv_sem_t* sem, unsigned int value);\nUV_EXTERN void uv_sem_destroy(uv_sem_t* sem);\nUV_EXTERN void uv_sem_post(uv_sem_t* sem);\nUV_EXTERN void uv_sem_wait(uv_sem_t* sem);\nUV_EXTERN int uv_sem_trywait(uv_sem_t* sem);\n\nUV_EXTERN int uv_cond_init(uv_cond_t* cond);\nUV_EXTERN void uv_cond_destroy(uv_cond_t* cond);\nUV_EXTERN void uv_cond_signal(uv_cond_t* cond);\nUV_EXTERN void uv_cond_broadcast(uv_cond_t* cond);\n\nUV_EXTERN int uv_barrier_init(uv_barrier_t* barrier, unsigned int count);\nUV_EXTERN void uv_barrier_destroy(uv_barrier_t* barrier);\nUV_EXTERN int uv_barrier_wait(uv_barrier_t* barrier);\n\nUV_EXTERN void uv_cond_wait(uv_cond_t* cond, uv_mutex_t* mutex);\nUV_EXTERN int uv_cond_timedwait(uv_cond_t* cond,\n                                uv_mutex_t* mutex,\n                                uint64_t timeout);\n\nUV_EXTERN void uv_once(uv_once_t* guard, void (*callback)(void));\n\nUV_EXTERN int uv_key_create(uv_key_t* key);\nUV_EXTERN void uv_key_delete(uv_key_t* key);\nUV_EXTERN void* uv_key_get(uv_key_t* key);\nUV_EXTERN void uv_key_set(uv_key_t* key, void* value);\n\ntypedef void (*uv_thread_cb)(void* arg);\n\nUV_EXTERN int uv_thread_create(uv_thread_t* tid, uv_thread_cb entry, void* arg);\nUV_EXTERN uv_thread_t uv_thread_self(void);\nUV_EXTERN int uv_thread_join(uv_thread_t *tid);\nUV_EXTERN int uv_thread_equal(const uv_thread_t* t1, const uv_thread_t* t2);\n\n/* The presence of these unions force similar struct layout. */\n#define XX(_, name) uv_ ## name ## _t name;\nunion uv_any_handle {\n  UV_HANDLE_TYPE_MAP(XX)\n};\n\nunion uv_any_req {\n  UV_REQ_TYPE_MAP(XX)\n};\n#undef XX\n\n\nstruct uv_loop_s {\n  /* User data - use this for whatever. */\n  void* data;\n  /* Loop reference counting. */\n  unsigned int active_handles;\n  void* handle_queue[2];\n  void* active_reqs[2];\n  /* Internal flag to signal loop stop. */\n  unsigned int stop_flag;\n  UV_LOOP_PRIVATE_FIELDS\n};\n\nUV_EXTERN void* uv_loop_get_data(const uv_loop_t*);\nUV_EXTERN void uv_loop_set_data(uv_loop_t*, void* data);\n\n/* Don't export the private CPP symbols. */\n#undef UV_HANDLE_TYPE_PRIVATE\n#undef UV_REQ_TYPE_PRIVATE\n#undef UV_REQ_PRIVATE_FIELDS\n#undef UV_STREAM_PRIVATE_FIELDS\n#undef UV_TCP_PRIVATE_FIELDS\n#undef UV_PREPARE_PRIVATE_FIELDS\n#undef UV_CHECK_PRIVATE_FIELDS\n#undef UV_IDLE_PRIVATE_FIELDS\n#undef UV_ASYNC_PRIVATE_FIELDS\n#undef UV_TIMER_PRIVATE_FIELDS\n#undef UV_GETADDRINFO_PRIVATE_FIELDS\n#undef UV_GETNAMEINFO_PRIVATE_FIELDS\n#undef UV_FS_REQ_PRIVATE_FIELDS\n#undef UV_WORK_PRIVATE_FIELDS\n#undef UV_FS_EVENT_PRIVATE_FIELDS\n#undef UV_SIGNAL_PRIVATE_FIELDS\n#undef UV_LOOP_PRIVATE_FIELDS\n#undef UV_LOOP_PRIVATE_PLATFORM_FIELDS\n\n#ifdef __cplusplus\n}\n#endif\n#endif /* UV_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/include/node/openssl/dso.h": "/* dso.h */\n/*\n * Written by Geoff Thorpe (geoff@geoffthorpe.net) for the OpenSSL project\n * 2000.\n */\n/* ====================================================================\n * Copyright (c) 2000 The OpenSSL Project.  All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in\n *    the documentation and/or other materials provided with the\n *    distribution.\n *\n * 3. All advertising materials mentioning features or use of this\n *    software must display the following acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit. (http://www.OpenSSL.org/)\"\n *\n * 4. The names \"OpenSSL Toolkit\" and \"OpenSSL Project\" must not be used to\n *    endorse or promote products derived from this software without\n *    prior written permission. For written permission, please contact\n *    licensing@OpenSSL.org.\n *\n * 5. Products derived from this software may not be called \"OpenSSL\"\n *    nor may \"OpenSSL\" appear in their names without prior written\n *    permission of the OpenSSL Project.\n *\n * 6. Redistributions of any form whatsoever must retain the following\n *    acknowledgment:\n *    \"This product includes software developed by the OpenSSL Project\n *    for use in the OpenSSL Toolkit (http://www.OpenSSL.org/)\"\n *\n * THIS SOFTWARE IS PROVIDED BY THE OpenSSL PROJECT ``AS IS'' AND ANY\n * EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE OpenSSL PROJECT OR\n * ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\n * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)\n * HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,\n * STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n * ====================================================================\n *\n * This product includes cryptographic software written by Eric Young\n * (eay@cryptsoft.com).  This product includes software written by Tim\n * Hudson (tjh@cryptsoft.com).\n *\n */\n\n#ifndef HEADER_DSO_H\n# define HEADER_DSO_H\n\n# include <openssl/crypto.h>\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* These values are used as commands to DSO_ctrl() */\n# define DSO_CTRL_GET_FLAGS      1\n# define DSO_CTRL_SET_FLAGS      2\n# define DSO_CTRL_OR_FLAGS       3\n\n/*\n * By default, DSO_load() will translate the provided filename into a form\n * typical for the platform (more specifically the DSO_METHOD) using the\n * dso_name_converter function of the method. Eg. win32 will transform \"blah\"\n * into \"blah.dll\", and dlfcn will transform it into \"libblah.so\". The\n * behaviour can be overriden by setting the name_converter callback in the\n * DSO object (using DSO_set_name_converter()). This callback could even\n * utilise the DSO_METHOD's converter too if it only wants to override\n * behaviour for one or two possible DSO methods. However, the following flag\n * can be set in a DSO to prevent *any* native name-translation at all - eg.\n * if the caller has prompted the user for a path to a driver library so the\n * filename should be interpreted as-is.\n */\n# define DSO_FLAG_NO_NAME_TRANSLATION            0x01\n/*\n * An extra flag to give if only the extension should be added as\n * translation.  This is obviously only of importance on Unix and other\n * operating systems where the translation also may prefix the name with\n * something, like 'lib', and ignored everywhere else. This flag is also\n * ignored if DSO_FLAG_NO_NAME_TRANSLATION is used at the same time.\n */\n# define DSO_FLAG_NAME_TRANSLATION_EXT_ONLY      0x02\n\n/*\n * The following flag controls the translation of symbol names to upper case.\n * This is currently only being implemented for OpenVMS.\n */\n# define DSO_FLAG_UPCASE_SYMBOL                  0x10\n\n/*\n * This flag loads the library with public symbols. Meaning: The exported\n * symbols of this library are public to all libraries loaded after this\n * library. At the moment only implemented in unix.\n */\n# define DSO_FLAG_GLOBAL_SYMBOLS                 0x20\n\ntypedef void (*DSO_FUNC_TYPE) (void);\n\ntypedef struct dso_st DSO;\n\n/*\n * The function prototype used for method functions (or caller-provided\n * callbacks) that transform filenames. They are passed a DSO structure\n * pointer (or NULL if they are to be used independantly of a DSO object) and\n * a filename to transform. They should either return NULL (if there is an\n * error condition) or a newly allocated string containing the transformed\n * form that the caller will need to free with OPENSSL_free() when done.\n */\ntypedef char *(*DSO_NAME_CONVERTER_FUNC)(DSO *, const char *);\n/*\n * The function prototype used for method functions (or caller-provided\n * callbacks) that merge two file specifications. They are passed a DSO\n * structure pointer (or NULL if they are to be used independantly of a DSO\n * object) and two file specifications to merge. They should either return\n * NULL (if there is an error condition) or a newly allocated string\n * containing the result of merging that the caller will need to free with\n * OPENSSL_free() when done. Here, merging means that bits and pieces are\n * taken from each of the file specifications and added together in whatever\n * fashion that is sensible for the DSO method in question.  The only rule\n * that really applies is that if the two specification contain pieces of the\n * same type, the copy from the first string takes priority.  One could see\n * it as the first specification is the one given by the user and the second\n * being a bunch of defaults to add on if they're missing in the first.\n */\ntypedef char *(*DSO_MERGER_FUNC)(DSO *, const char *, const char *);\n\ntypedef struct dso_meth_st {\n    const char *name;\n    /*\n     * Loads a shared library, NB: new DSO_METHODs must ensure that a\n     * successful load populates the loaded_filename field, and likewise a\n     * successful unload OPENSSL_frees and NULLs it out.\n     */\n    int (*dso_load) (DSO *dso);\n    /* Unloads a shared library */\n    int (*dso_unload) (DSO *dso);\n    /* Binds a variable */\n    void *(*dso_bind_var) (DSO *dso, const char *symname);\n    /*\n     * Binds a function - assumes a return type of DSO_FUNC_TYPE. This should\n     * be cast to the real function prototype by the caller. Platforms that\n     * don't have compatible representations for different prototypes (this\n     * is possible within ANSI C) are highly unlikely to have shared\n     * libraries at all, let alone a DSO_METHOD implemented for them.\n     */\n    DSO_FUNC_TYPE (*dso_bind_func) (DSO *dso, const char *symname);\n/* I don't think this would actually be used in any circumstances. */\n# if 0\n    /* Unbinds a variable */\n    int (*dso_unbind_var) (DSO *dso, char *symname, void *symptr);\n    /* Unbinds a function */\n    int (*dso_unbind_func) (DSO *dso, char *symname, DSO_FUNC_TYPE symptr);\n# endif\n    /*\n     * The generic (yuck) \"ctrl()\" function. NB: Negative return values\n     * (rather than zero) indicate errors.\n     */\n    long (*dso_ctrl) (DSO *dso, int cmd, long larg, void *parg);\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_NAME_CONVERTER_FUNC dso_name_converter;\n    /*\n     * The default DSO_METHOD-specific function for converting filenames to a\n     * canonical native form.\n     */\n    DSO_MERGER_FUNC dso_merger;\n    /* [De]Initialisation handlers. */\n    int (*init) (DSO *dso);\n    int (*finish) (DSO *dso);\n    /* Return pathname of the module containing location */\n    int (*pathbyaddr) (void *addr, char *path, int sz);\n    /* Perform global symbol lookup, i.e. among *all* modules */\n    void *(*globallookup) (const char *symname);\n} DSO_METHOD;\n\n/**********************************************************************/\n/* The low-level handle type used to refer to a loaded shared library */\n\nstruct dso_st {\n    DSO_METHOD *meth;\n    /*\n     * Standard dlopen uses a (void *). Win32 uses a HANDLE. VMS doesn't use\n     * anything but will need to cache the filename for use in the dso_bind\n     * handler. All in all, let each method control its own destiny.\n     * \"Handles\" and such go in a STACK.\n     */\n    STACK_OF(void) *meth_data;\n    int references;\n    int flags;\n    /*\n     * For use by applications etc ... use this for your bits'n'pieces, don't\n     * touch meth_data!\n     */\n    CRYPTO_EX_DATA ex_data;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_name_converter. NB: This\n     * should normally set using DSO_set_name_converter().\n     */\n    DSO_NAME_CONVERTER_FUNC name_converter;\n    /*\n     * If this callback function pointer is set to non-NULL, then it will be\n     * used in DSO_load() in place of meth->dso_merger. NB: This should\n     * normally set using DSO_set_merger().\n     */\n    DSO_MERGER_FUNC merger;\n    /*\n     * This is populated with (a copy of) the platform-independant filename\n     * used for this DSO.\n     */\n    char *filename;\n    /*\n     * This is populated with (a copy of) the translated filename by which\n     * the DSO was actually loaded. It is NULL iff the DSO is not currently\n     * loaded. NB: This is here because the filename translation process may\n     * involve a callback being invoked more than once not only to convert to\n     * a platform-specific form, but also to try different filenames in the\n     * process of trying to perform a load. As such, this variable can be\n     * used to indicate (a) whether this DSO structure corresponds to a\n     * loaded library or not, and (b) the filename with which it was actually\n     * loaded.\n     */\n    char *loaded_filename;\n};\n\nDSO *DSO_new(void);\nDSO *DSO_new_method(DSO_METHOD *method);\nint DSO_free(DSO *dso);\nint DSO_flags(DSO *dso);\nint DSO_up_ref(DSO *dso);\nlong DSO_ctrl(DSO *dso, int cmd, long larg, void *parg);\n\n/*\n * This function sets the DSO's name_converter callback. If it is non-NULL,\n * then it will be used instead of the associated DSO_METHOD's function. If\n * oldcb is non-NULL then it is set to the function pointer value being\n * replaced. Return value is non-zero for success.\n */\nint DSO_set_name_converter(DSO *dso, DSO_NAME_CONVERTER_FUNC cb,\n                           DSO_NAME_CONVERTER_FUNC *oldcb);\n/*\n * These functions can be used to get/set the platform-independant filename\n * used for a DSO. NB: set will fail if the DSO is already loaded.\n */\nconst char *DSO_get_filename(DSO *dso);\nint DSO_set_filename(DSO *dso, const char *filename);\n/*\n * This function will invoke the DSO's name_converter callback to translate a\n * filename, or if the callback isn't set it will instead use the DSO_METHOD's\n * converter. If \"filename\" is NULL, the \"filename\" in the DSO itself will be\n * used. If the DSO_FLAG_NO_NAME_TRANSLATION flag is set, then the filename is\n * simply duplicated. NB: This function is usually called from within a\n * DSO_METHOD during the processing of a DSO_load() call, and is exposed so\n * that caller-created DSO_METHODs can do the same thing. A non-NULL return\n * value will need to be OPENSSL_free()'d.\n */\nchar *DSO_convert_filename(DSO *dso, const char *filename);\n/*\n * This function will invoke the DSO's merger callback to merge two file\n * specifications, or if the callback isn't set it will instead use the\n * DSO_METHOD's merger.  A non-NULL return value will need to be\n * OPENSSL_free()'d.\n */\nchar *DSO_merge(DSO *dso, const char *filespec1, const char *filespec2);\n/*\n * If the DSO is currently loaded, this returns the filename that it was\n * loaded under, otherwise it returns NULL. So it is also useful as a test as\n * to whether the DSO is currently loaded. NB: This will not necessarily\n * return the same value as DSO_convert_filename(dso, dso->filename), because\n * the DSO_METHOD's load function may have tried a variety of filenames (with\n * and/or without the aid of the converters) before settling on the one it\n * actually loaded.\n */\nconst char *DSO_get_loaded_filename(DSO *dso);\n\nvoid DSO_set_default_method(DSO_METHOD *meth);\nDSO_METHOD *DSO_get_default_method(void);\nDSO_METHOD *DSO_get_method(DSO *dso);\nDSO_METHOD *DSO_set_method(DSO *dso, DSO_METHOD *meth);\n\n/*\n * The all-singing all-dancing load function, you normally pass NULL for the\n * first and third parameters. Use DSO_up and DSO_free for subsequent\n * reference count handling. Any flags passed in will be set in the\n * constructed DSO after its init() function but before the load operation.\n * If 'dso' is non-NULL, 'flags' is ignored.\n */\nDSO *DSO_load(DSO *dso, const char *filename, DSO_METHOD *meth, int flags);\n\n/* This function binds to a variable inside a shared library. */\nvoid *DSO_bind_var(DSO *dso, const char *symname);\n\n/* This function binds to a function inside a shared library. */\nDSO_FUNC_TYPE DSO_bind_func(DSO *dso, const char *symname);\n\n/*\n * This method is the default, but will beg, borrow, or steal whatever method\n * should be the default on any particular platform (including\n * DSO_METH_null() if necessary).\n */\nDSO_METHOD *DSO_METHOD_openssl(void);\n\n/*\n * This method is defined for all platforms - if a platform has no DSO\n * support then this will be the only method!\n */\nDSO_METHOD *DSO_METHOD_null(void);\n\n/*\n * If DSO_DLFCN is defined, the standard dlfcn.h-style functions (dlopen,\n * dlclose, dlsym, etc) will be used and incorporated into this method. If\n * not, this method will return NULL.\n */\nDSO_METHOD *DSO_METHOD_dlfcn(void);\n\n/*\n * If DSO_DL is defined, the standard dl.h-style functions (shl_load,\n * shl_unload, shl_findsym, etc) will be used and incorporated into this\n * method. If not, this method will return NULL.\n */\nDSO_METHOD *DSO_METHOD_dl(void);\n\n/* If WIN32 is defined, use DLLs. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_win32(void);\n\n/* If VMS is defined, use shared images. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_vms(void);\n\n/*\n * This function writes null-terminated pathname of DSO module containing\n * 'addr' into 'sz' large caller-provided 'path' and returns the number of\n * characters [including trailing zero] written to it. If 'sz' is 0 or\n * negative, 'path' is ignored and required amount of charachers [including\n * trailing zero] to accomodate pathname is returned. If 'addr' is NULL, then\n * pathname of cryptolib itself is returned. Negative or zero return value\n * denotes error.\n */\nint DSO_pathbyaddr(void *addr, char *path, int sz);\n\n/*\n * This function should be used with caution! It looks up symbols in *all*\n * loaded modules and if module gets unloaded by somebody else attempt to\n * dereference the pointer is doomed to have fatal consequences. Primary\n * usage for this function is to probe *core* system functionality, e.g.\n * check if getnameinfo(3) is available at run-time without bothering about\n * OS-specific details such as libc.so.versioning or where does it actually\n * reside: in libc itself or libsocket.\n */\nvoid *DSO_global_lookup(const char *name);\n\n/* If BeOS is defined, use shared images. If not, return NULL. */\nDSO_METHOD *DSO_METHOD_beos(void);\n\n/* BEGIN ERROR CODES */\n/*\n * The following lines are auto generated by the script mkerr.pl. Any changes\n * made after this point may be overwritten when the script is next run.\n */\nvoid ERR_load_DSO_strings(void);\n\n/* Error codes for the DSO functions. */\n\n/* Function codes. */\n# define DSO_F_BEOS_BIND_FUNC                             144\n# define DSO_F_BEOS_BIND_VAR                              145\n# define DSO_F_BEOS_LOAD                                  146\n# define DSO_F_BEOS_NAME_CONVERTER                        147\n# define DSO_F_BEOS_UNLOAD                                148\n# define DSO_F_DLFCN_BIND_FUNC                            100\n# define DSO_F_DLFCN_BIND_VAR                             101\n# define DSO_F_DLFCN_LOAD                                 102\n# define DSO_F_DLFCN_MERGER                               130\n# define DSO_F_DLFCN_NAME_CONVERTER                       123\n# define DSO_F_DLFCN_UNLOAD                               103\n# define DSO_F_DL_BIND_FUNC                               104\n# define DSO_F_DL_BIND_VAR                                105\n# define DSO_F_DL_LOAD                                    106\n# define DSO_F_DL_MERGER                                  131\n# define DSO_F_DL_NAME_CONVERTER                          124\n# define DSO_F_DL_UNLOAD                                  107\n# define DSO_F_DSO_BIND_FUNC                              108\n# define DSO_F_DSO_BIND_VAR                               109\n# define DSO_F_DSO_CONVERT_FILENAME                       126\n# define DSO_F_DSO_CTRL                                   110\n# define DSO_F_DSO_FREE                                   111\n# define DSO_F_DSO_GET_FILENAME                           127\n# define DSO_F_DSO_GET_LOADED_FILENAME                    128\n# define DSO_F_DSO_GLOBAL_LOOKUP                          139\n# define DSO_F_DSO_LOAD                                   112\n# define DSO_F_DSO_MERGE                                  132\n# define DSO_F_DSO_NEW_METHOD                             113\n# define DSO_F_DSO_PATHBYADDR                             140\n# define DSO_F_DSO_SET_FILENAME                           129\n# define DSO_F_DSO_SET_NAME_CONVERTER                     122\n# define DSO_F_DSO_UP_REF                                 114\n# define DSO_F_GLOBAL_LOOKUP_FUNC                         138\n# define DSO_F_PATHBYADDR                                 137\n# define DSO_F_VMS_BIND_SYM                               115\n# define DSO_F_VMS_LOAD                                   116\n# define DSO_F_VMS_MERGER                                 133\n# define DSO_F_VMS_UNLOAD                                 117\n# define DSO_F_WIN32_BIND_FUNC                            118\n# define DSO_F_WIN32_BIND_VAR                             119\n# define DSO_F_WIN32_GLOBALLOOKUP                         142\n# define DSO_F_WIN32_GLOBALLOOKUP_FUNC                    143\n# define DSO_F_WIN32_JOINER                               135\n# define DSO_F_WIN32_LOAD                                 120\n# define DSO_F_WIN32_MERGER                               134\n# define DSO_F_WIN32_NAME_CONVERTER                       125\n# define DSO_F_WIN32_PATHBYADDR                           141\n# define DSO_F_WIN32_SPLITTER                             136\n# define DSO_F_WIN32_UNLOAD                               121\n\n/* Reason codes. */\n# define DSO_R_CTRL_FAILED                                100\n# define DSO_R_DSO_ALREADY_LOADED                         110\n# define DSO_R_EMPTY_FILE_STRUCTURE                       113\n# define DSO_R_FAILURE                                    114\n# define DSO_R_FILENAME_TOO_BIG                           101\n# define DSO_R_FINISH_FAILED                              102\n# define DSO_R_INCORRECT_FILE_SYNTAX                      115\n# define DSO_R_LOAD_FAILED                                103\n# define DSO_R_NAME_TRANSLATION_FAILED                    109\n# define DSO_R_NO_FILENAME                                111\n# define DSO_R_NO_FILE_SPECIFICATION                      116\n# define DSO_R_NULL_HANDLE                                104\n# define DSO_R_SET_FILENAME_FAILED                        112\n# define DSO_R_STACK_ERROR                                105\n# define DSO_R_SYM_FAILURE                                106\n# define DSO_R_UNLOAD_FAILED                              107\n# define DSO_R_UNSUPPORTED                                108\n\n#ifdef  __cplusplus\n}\n#endif\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/cli_plugin/install/__fixtures__/replies/banana.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/cli_plugin/install/__fixtures__/replies/corrupt.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/cli_plugin/install/__fixtures__/replies/invalid_name.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/cli_plugin/install/__fixtures__/replies/test_plugin.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/cli_plugin/install/__fixtures__/replies/test_plugin_no_kibana.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/cli_plugin/install/__fixtures__/replies/test_plugin_different_version.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/cli_plugin/install/__fixtures__/replies/test_plugin_many.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/server/sample_data/data_sets/flights/flights.json.gz",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/ne.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/cv.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/de.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/us.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/go.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/ni.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/favicons/android-chrome-256x256.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/favicons/favicon-32x32.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/favicons/android-chrome-192x192.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/favicons/favicon-16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/favicons/mstile-150x150.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/favicons/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/favicons/apple-touch-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_700.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_300.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_700.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_600.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_600.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_regular.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_300.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_600.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_700.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_300.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_regular.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_700.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_regular.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_300.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/assets/fonts/open_sans/open_sans_v15_latin_600.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/styles/fonts/glyphicons-halflings-regular.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/styles/fonts/glyphicons-halflings-regular.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/styles/fonts/glyphicons-halflings-regular.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/ui/public/styles/fonts/glyphicons-halflings-regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/timelion/public/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/redis_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/nginx_logs/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/apm/apm.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/mysql_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/kubernetes_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/apache_logs/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/system_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/mongodb_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/uwsgi_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/rabbitmq_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/system_logs/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/apache_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/kafka_logs/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/redis_logs/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/nginx_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/mysql_logs/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/osquery_logs/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/tutorial_resources/docker_metrics/screenshot.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/src/core_plugins/kibana/public/home/sample_data_resources/flights/dashboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/html/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/retry/equation.gif",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/cli-table2/examples/screenshots/basic-usage-with-colors.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/cli-table2/examples/screenshots/multi-line-colors.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/cli-table2/examples/screenshots/truncation-with-colors.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/qrcode-terminal/example/basic.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/read/node_modules/mute-stream/coverage/lcov-report/sort-arrow-sprite.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/update-notifier/node_modules/boxen/node_modules/term-size/vendor/windows/term-size.exe",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/unique-filename/coverage/sort-arrow-sprite.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node/lib/node_modules/npm/node_modules/tar/node_modules/minipass/minipass-benchmarks.xlsx",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/f4769f9bdb7466be65088239c12046d1.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/e18bbf611f2a2e43afc071aa2f4e1512.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/dfb02f8f6d0cedc009ee5887cc68f1f3.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/7c87870ab40d63cfb8870c1f183f9939.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/4b5a84aaf1c9485e060c503a0ff8cadb.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/fa2772327f55d8198301fdb8bcfc8158.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/45c73723862c6fc5eb3d6961db2d71fb.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/448c34a56d699c29117adc64c43affeb.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/stop.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/ne.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/cv.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/de.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/us.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/go.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/optimize/bundles/src/ui/public/field_editor/components/field_format_editor/editors/url/icons/ni.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/retry/equation.gif",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/point.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/band.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/category20.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/cubehelix.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/magma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/cool.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/plasma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/warm.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/viridis.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/category20b.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/inferno.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/category10.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/category20c.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale/img/rainbow.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet-draw/dist/images/marker-icon-2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet-draw/dist/images/spritesheet.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet-draw/dist/images/marker-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet-draw/dist/images/spritesheet-2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet-draw/dist/images/marker-shadow.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet-draw/dist/images/layers.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet-draw/dist/images/layers-2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/highlight.js/styles/brown-papersq.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/highlight.js/styles/school-book.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/highlight.js/styles/pojoaque.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/even-better/images/good.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/even-better/node_modules/joi/images/joi.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/even-better/node_modules/joi/images/validation.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/even-better/node_modules/boom/images/boom.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/even-better/node_modules/hoek/images/hoek.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/even-better/node_modules/wreck/images/wreck.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/dragula/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/dragula/resources/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/dragula/resources/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/dragula/resources/eyes.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/dragula/resources/demo.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/hapi-auth-cookie/node_modules/joi/images/joi.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/hapi-auth-cookie/node_modules/joi/images/validation.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/hapi-auth-cookie/node_modules/hoek/images/hoek.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-zoom/img/dots.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-zoom/img/brush.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-zoom/img/transition.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-zoom/img/axis.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/apm/public/images/apm-ml-anomaly-detection-example.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/graph/public/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/server/browsers/chromium/driver/screenshot_stitcher/fixtures/2x2-white.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/server/browsers/chromium/driver/screenshot_stitcher/fixtures/2x1-checkerboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/server/browsers/chromium/driver/screenshot_stitcher/fixtures/single-black-pixel.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/server/browsers/chromium/driver/screenshot_stitcher/fixtures/single-white-pixel.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/server/browsers/chromium/driver/screenshot_stitcher/fixtures/2x2-black.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/server/browsers/chromium/driver/screenshot_stitcher/fixtures/4x4-checkerboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/server/browsers/chromium/driver/screenshot_stitcher/fixtures/2x2-checkerboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/export_types/printable_pdf/server/lib/pdf/assets/img/logo-grey.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/export_types/printable_pdf/server/lib/pdf/assets/fonts/roboto/Roboto-Italic.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/export_types/printable_pdf/server/lib/pdf/assets/fonts/roboto/Roboto-Medium.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/export_types/printable_pdf/server/lib/pdf/assets/fonts/roboto/Roboto-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/export_types/printable_pdf/server/lib/pdf/assets/fonts/noto/NotoSansCJKtc-Medium.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/export_types/printable_pdf/server/lib/pdf/assets/fonts/noto/NotoSansCJKtc-Regular.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/.phantom/phantomjs-2.1.1-linux-x86_64.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/plugins/reporting/.chromium/chromium-503a3e4-linux.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/point.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/band.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/category20.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/cubehelix.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/magma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/cool.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/plasma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/warm.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/viridis.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/category20b.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/inferno.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/category10.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/category20c.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/d3-scale/img/rainbow.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/joi/images/joi.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/joi/images/validation.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/point.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/band.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/category20.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/cubehelix.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/magma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/cool.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/plasma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/warm.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/viridis.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/category20b.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/inferno.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/category10.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/category20c.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/react-vis/node_modules/d3-scale/img/rainbow.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/boom/images/boom.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/boom/node_modules/hoek/images/hoek.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/x-pack/node_modules/hoek/images/hoek.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/querystring/.Readme.md.un~",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/querystring/.package.json.un~",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/querystring/.History.md.un~",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/getos/imgs/logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/hclLong.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/lab.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/hsl.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/cubehelixGamma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/cubehelix.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/hcl.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/cubehelixLong.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/rgb.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/rgbGamma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/hslLong.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-interpolate/img/cubehelixGammaLong.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-sankey/img/energy.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-sankey/img/align-right.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-sankey/img/align-center.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-sankey/img/align-left.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/font-awesome/fonts/fontawesome-webfont.woff2",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/font-awesome/fonts/FontAwesome.otf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/font-awesome/fonts/fontawesome-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/font-awesome/fonts/fontawesome-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/font-awesome/fonts/fontawesome-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/vega-scale/node_modules/d3-scale/img/point.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/vega-scale/node_modules/d3-scale/img/band.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/html/img/copyashtml.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/html/img/before.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/html/img/after.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/linebreak/src/classes.trie",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-array/img/histogram.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/dragselect/src/typewriter.gif",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/dragselect/dist/typewriter.gif",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-drag/img/dots.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-drag/img/force-collide.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-drag/img/canvas.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-drag/img/voronoi.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-drag/img/force-graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-drag/img/drawing.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/angular/angular.min.js.gzip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/YlOrBr.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Accent.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Reds.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/PRGn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/RdGy.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Greens.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/RdBu.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Pastel2.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Greys.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/RdYlGn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Paired.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/YlGnBu.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Set1.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/PiYG.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/PuBuGn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/cubehelix.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Pastel1.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/magma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Set2.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Purples.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/PuOr.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/cool.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Oranges.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/PuRd.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/plasma.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/warm.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/YlGn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/BuGn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/PuBu.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/YlOrRd.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Dark2.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/viridis.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/BuPu.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/inferno.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/RdPu.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Spectral.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/BrBG.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/GnBu.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Set3.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/category10.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/Blues.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/OrRd.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/RdYlBu.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-scale-chromatic/img/rainbow.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/cubicIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/quadOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/quadIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/sinIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/backIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/elasticOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/circleOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/expOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/expIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/circleInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/polyInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/circleIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/linear.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/cubicOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/polyIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/bounceOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/backInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/cubicInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/elasticInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/polyOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/sinOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/bounceIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/backOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/expInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/sinInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/quadInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/bounceInOut.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-ease/img/elasticIn.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/js-base64/1x1.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/unicode-properties/data.trie",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet/dist/images/marker-icon-2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet/dist/images/marker-icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet/dist/images/marker-shadow.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet/dist/images/layers.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/leaflet/dist/images/layers-2x.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-voronoi/graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/broken.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/djay-indexed.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/ball.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/djay.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/spinfox.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/laptop.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/loading.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/chompy.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/png-js/images/trees.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/fa69a3d1d6c58ef671715ccb3f602ef8.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/8213b0f9cba80ea178885fdd0ddaed51.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/backgrounds/images/aboutus-hero.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/backgrounds/images/gray-cloud.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-semibold-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-regular-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-bold-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-semibold-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-black-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-black-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-regular-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-bold-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-light-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-regular-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-extralight-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-it-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-black-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-extralight-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-it-webfont.woff",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-light-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-bold-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-it-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-light-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-semibold-webfont.eot",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/pivotal-ui/css/typography/fonts/sourcesanspro-extralight-webfont.ttf",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/scroll-into-view/scrollintoview.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-force/img/collide.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-force/img/graph.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-force/img/beeswarm.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-force/img/phyllotaxis.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-force/img/tree.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-force/img/lattice.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/vision/node_modules/hoek/images/hoek.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/good-squeeze/node_modules/hoek/images/hoek.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-hierarchy/img/pack.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-hierarchy/img/cluster.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-hierarchy/img/treemap.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-hierarchy/img/stratify.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-hierarchy/img/partition.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/d3-hierarchy/img/tree.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/brace/assets/brace.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/venn.js/build/venn.zip",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/tinygradient/images/hsv2.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/tinygradient/images/rgb.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/tinygradient/images/hsv.png",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/fontkit/indic.trie",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/fontkit/use.trie",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/fontkit/data.trie",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/fontkit/src/opentype/shapers/indic.trie",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/fontkit/src/opentype/shapers/use.trie",
        "/tmp/vanessa/spack-stage/spack-stage-kibana-6.4.0-zp55m7wu6koongpw4qutvxuxxsqxb2mt/spack-src/node_modules/fontkit/src/opentype/shapers/data.trie"
    ],
    "total_files": 56280
}