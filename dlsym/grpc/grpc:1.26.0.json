{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/core/lib/gpr/env_linux.cc": "/*\n *\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n/* for secure_getenv. */\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n\n#include <grpc/support/port_platform.h>\n\n#ifdef GPR_LINUX_ENV\n\n#include \"src/core/lib/gpr/env.h\"\n\n#include <dlfcn.h>\n#include <features.h>\n#include <stdlib.h>\n#include <string.h>\n\n#include <grpc/support/log.h>\n#include <grpc/support/string_util.h>\n\n#include \"src/core/lib/gpr/string.h\"\n#include \"src/core/lib/gpr/useful.h\"\n\nchar* gpr_getenv(const char* name) {\n  char* result = nullptr;\n#if defined(GPR_BACKWARDS_COMPATIBILITY_MODE)\n  typedef char* (*getenv_type)(const char*);\n  static getenv_type getenv_func = nullptr;\n  /* Check to see which getenv variant is supported (go from most\n   * to least secure) */\n  if (getenv_func == nullptr) {\n    const char* names[] = {\"secure_getenv\", \"__secure_getenv\", \"getenv\"};\n    for (size_t i = 0; i < GPR_ARRAY_SIZE(names); i++) {\n      getenv_func = (getenv_type)dlsym(RTLD_DEFAULT, names[i]);\n      if (getenv_func != nullptr) {\n        break;\n      }\n    }\n  }\n  result = getenv_func(name);\n#elif __GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 17)\n  result = secure_getenv(name);\n#else\n  result = getenv(name);\n#endif\n  return result == nullptr ? result : gpr_strdup(result);\n}\n\nvoid gpr_setenv(const char* name, const char* value) {\n  int res = setenv(name, value, 1);\n  GPR_ASSERT(res == 0);\n}\n\nvoid gpr_unsetenv(const char* name) {\n  int res = unsetenv(name);\n  GPR_ASSERT(res == 0);\n}\n\n#endif /* GPR_LINUX_ENV */\n",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/csharp/Grpc.Core/Internal/UnmanagedLibrary.cs": "#region Copyright notice and license\n\n// Copyright 2015 gRPC authors.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n#endregion\n\nusing System;\nusing System.IO;\nusing System.Reflection;\nusing System.Runtime.InteropServices;\nusing System.Threading;\n\nusing Grpc.Core.Logging;\nusing Grpc.Core.Utils;\n\nnamespace Grpc.Core.Internal\n{\n    /// <summary>\n    /// Represents a dynamically loaded unmanaged library in a (partially) platform independent manner.\n    /// First, the native library is loaded using dlopen (on Unix systems) or using LoadLibrary (on Windows).\n    /// dlsym or GetProcAddress are then used to obtain symbol addresses. <c>Marshal.GetDelegateForFunctionPointer</c>\n    /// transforms the addresses into delegates to native methods.\n    /// See http://stackoverflow.com/questions/13461989/p-invoke-to-dynamically-loaded-library-on-mono.\n    /// </summary>\n    internal class UnmanagedLibrary\n    {\n        static readonly ILogger Logger = GrpcEnvironment.Logger.ForType<UnmanagedLibrary>();\n\n        // flags for dlopen\n        const int RTLD_LAZY = 1;\n        const int RTLD_GLOBAL = 8;\n\n        readonly string libraryPath;\n        readonly IntPtr handle;\n\n        public UnmanagedLibrary(string[] libraryPathAlternatives)\n        {\n            this.libraryPath = FirstValidLibraryPath(libraryPathAlternatives);\n\n            Logger.Debug(\"Attempting to load native library \\\"{0}\\\"\", this.libraryPath);\n\n            this.handle = PlatformSpecificLoadLibrary(this.libraryPath, out string loadLibraryErrorDetail);\n\n            if (this.handle == IntPtr.Zero)\n            {\n                throw new IOException(string.Format(\"Error loading native library \\\"{0}\\\". {1}\",\n                                                    this.libraryPath, loadLibraryErrorDetail));\n            }\n        }\n\n        /// <summary>\n        /// Loads symbol in a platform specific way.\n        /// </summary>\n        /// <param name=\"symbolName\"></param>\n        /// <returns></returns>\n        private IntPtr LoadSymbol(string symbolName)\n        {\n            if (PlatformApis.IsWindows)\n            {\n                // See http://stackoverflow.com/questions/10473310 for background on this.\n                if (PlatformApis.Is64Bit)\n                {\n                    return Windows.GetProcAddress(this.handle, symbolName);\n                }\n                else\n                {\n                    // Yes, we could potentially predict the size... but it's a lot simpler to just try\n                    // all the candidates. Most functions have a suffix of @0, @4 or @8 so we won't be trying\n                    // many options - and if it takes a little bit longer to fail if we've really got the wrong\n                    // library, that's not a big problem. This is only called once per function in the native library.\n                    symbolName = \"_\" + symbolName + \"@\";\n                    for (int stackSize = 0; stackSize < 128; stackSize += 4)\n                    {\n                        IntPtr candidate = Windows.GetProcAddress(this.handle, symbolName + stackSize);\n                        if (candidate != IntPtr.Zero)\n                        {\n                            return candidate;\n                        }\n                    }\n                    // Fail.\n                    return IntPtr.Zero;\n                }\n            }\n            if (PlatformApis.IsLinux)\n            {\n                if (PlatformApis.IsMono)\n                {\n                    return Mono.dlsym(this.handle, symbolName);\n                }\n                if (PlatformApis.IsNetCore)\n                {\n                    return CoreCLR.dlsym(this.handle, symbolName);\n                }\n                return Linux.dlsym(this.handle, symbolName);\n            }\n            if (PlatformApis.IsMacOSX)\n            {\n                return MacOSX.dlsym(this.handle, symbolName);\n            }\n            throw new InvalidOperationException(\"Unsupported platform.\");\n        }\n\n        public T GetNativeMethodDelegate<T>(string methodName)\n            where T : class\n        {\n            var ptr = LoadSymbol(methodName);\n            if (ptr == IntPtr.Zero)\n            {\n                throw new MissingMethodException(string.Format(\"The native method \\\"{0}\\\" does not exist\", methodName));\n            }\n#if NETSTANDARD1_5 || NETSTANDARD2_0\n            return Marshal.GetDelegateForFunctionPointer<T>(ptr);  // non-generic version is obsolete\n#else\n            return Marshal.GetDelegateForFunctionPointer(ptr, typeof(T)) as T;  // generic version not available in .NET45\n#endif\n        }\n\n        /// <summary>\n        /// Loads library in a platform specific way.\n        /// </summary>\n        private static IntPtr PlatformSpecificLoadLibrary(string libraryPath, out string errorMsg)\n        {\n            if (PlatformApis.IsWindows)\n            {\n                // TODO(jtattermusch): populate the error on Windows\n                errorMsg = null;\n                return Windows.LoadLibrary(libraryPath);\n            }\n            if (PlatformApis.IsLinux)\n            {\n                if (PlatformApis.IsMono)\n                {\n                    return LoadLibraryPosix(Mono.dlopen, Mono.dlerror, libraryPath, out errorMsg);\n                }\n                if (PlatformApis.IsNetCore)\n                {\n                    return LoadLibraryPosix(CoreCLR.dlopen, CoreCLR.dlerror, libraryPath, out errorMsg);\n                }\n                return LoadLibraryPosix(Linux.dlopen, Linux.dlerror, libraryPath, out errorMsg);\n            }\n            if (PlatformApis.IsMacOSX)\n            {\n                return LoadLibraryPosix(MacOSX.dlopen, MacOSX.dlerror, libraryPath, out errorMsg);\n            }\n            throw new InvalidOperationException(\"Unsupported platform.\");\n        }\n\n        private static IntPtr LoadLibraryPosix(Func<string, int, IntPtr> dlopenFunc, Func<IntPtr> dlerrorFunc, string libraryPath, out string errorMsg)\n        {\n            errorMsg = null;\n            IntPtr ret = dlopenFunc(libraryPath, RTLD_GLOBAL + RTLD_LAZY);\n            if (ret == IntPtr.Zero)\n            {\n                errorMsg = Marshal.PtrToStringAnsi(dlerrorFunc());\n            }\n            return ret;\n        }\n\n        private static string FirstValidLibraryPath(string[] libraryPathAlternatives)\n        {\n            GrpcPreconditions.CheckArgument(libraryPathAlternatives.Length > 0, \"libraryPathAlternatives cannot be empty.\");\n            foreach (var path in libraryPathAlternatives)\n            {\n                if (File.Exists(path))\n                {\n                    return path;\n                }\n            }\n            throw new FileNotFoundException(\n                String.Format(\"Error loading native library. Not found in any of the possible locations: {0}\", \n                    string.Join(\",\", libraryPathAlternatives)));\n        }\n\n        private static class Windows\n        {\n            [DllImport(\"kernel32.dll\")]\n            internal static extern IntPtr LoadLibrary(string filename);\n\n            [DllImport(\"kernel32.dll\")]\n            internal static extern IntPtr GetProcAddress(IntPtr hModule, string procName);\n        }\n\n        private static class Linux\n        {\n            [DllImport(\"libdl.so\")]\n            internal static extern IntPtr dlopen(string filename, int flags);\n\n            [DllImport(\"libdl.so\")]\n            internal static extern IntPtr dlerror();\n\n            [DllImport(\"libdl.so\")]\n            internal static extern IntPtr dlsym(IntPtr handle, string symbol);\n        }\n\n        private static class MacOSX\n        {\n            [DllImport(\"libSystem.dylib\")]\n            internal static extern IntPtr dlopen(string filename, int flags);\n\n            [DllImport(\"libSystem.dylib\")]\n            internal static extern IntPtr dlerror();\n\n            [DllImport(\"libSystem.dylib\")]\n            internal static extern IntPtr dlsym(IntPtr handle, string symbol);\n        }\n\n        /// <summary>\n        /// On Linux systems, using using dlopen and dlsym results in\n        /// DllNotFoundException(\"libdl.so not found\") if libc6-dev\n        /// is not installed. As a workaround, we load symbols for\n        /// dlopen and dlsym from the current process as on Linux\n        /// Mono sure is linked against these symbols.\n        /// </summary>\n        private static class Mono\n        {\n            [DllImport(\"__Internal\")]\n            internal static extern IntPtr dlopen(string filename, int flags);\n\n            [DllImport(\"__Internal\")]\n            internal static extern IntPtr dlerror();\n\n            [DllImport(\"__Internal\")]\n            internal static extern IntPtr dlsym(IntPtr handle, string symbol);\n        }\n\n        /// <summary>\n        /// Similarly as for Mono on Linux, we load symbols for\n        /// dlopen and dlsym from the \"libcoreclr.so\",\n        /// to avoid the dependency on libc-dev Linux.\n        /// </summary>\n        private static class CoreCLR\n        {\n            [DllImport(\"libcoreclr.so\")]\n            internal static extern IntPtr dlopen(string filename, int flags);\n\n            [DllImport(\"libcoreclr.so\")]\n            internal static extern IntPtr dlerror();\n\n            [DllImport(\"libcoreclr.so\")]\n            internal static extern IntPtr dlsym(IntPtr handle, string symbol);\n        }\n    }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/include/grpc/impl/codegen/port_platform.h": "/*\n *\n * Copyright 2015 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\n#ifndef GRPC_IMPL_CODEGEN_PORT_PLATFORM_H\n#define GRPC_IMPL_CODEGEN_PORT_PLATFORM_H\n\n/*\n * Define GPR_BACKWARDS_COMPATIBILITY_MODE to try harder to be ABI\n * compatible with older platforms (currently only on Linux)\n * Causes:\n *  - some libc calls to be gotten via dlsym\n *  - some syscalls to be made directly\n */\n\n/*\n * Defines GRPC_USE_ABSL to use Abseil Common Libraries (C++)\n */\n#ifndef GRPC_USE_ABSL\n#define GRPC_USE_ABSL 0\n#endif\n\n/* Get windows.h included everywhere (we need it) */\n#if defined(_WIN64) || defined(WIN64) || defined(_WIN32) || defined(WIN32)\n#ifndef WIN32_LEAN_AND_MEAN\n#define GRPC_WIN32_LEAN_AND_MEAN_WAS_NOT_DEFINED\n#define WIN32_LEAN_AND_MEAN\n#endif /* WIN32_LEAN_AND_MEAN */\n\n#ifndef NOMINMAX\n#define GRPC_NOMINMX_WAS_NOT_DEFINED\n#define NOMINMAX\n#endif /* NOMINMAX */\n\n#ifndef _WIN32_WINNT\n#error \\\n    \"Please compile grpc with _WIN32_WINNT of at least 0x600 (aka Windows Vista)\"\n#else /* !defined(_WIN32_WINNT) */\n#if (_WIN32_WINNT < 0x0600)\n#error \\\n    \"Please compile grpc with _WIN32_WINNT of at least 0x600 (aka Windows Vista)\"\n#endif /* _WIN32_WINNT < 0x0600 */\n#endif /* defined(_WIN32_WINNT) */\n\n#include <windows.h>\n\n#ifdef GRPC_WIN32_LEAN_AND_MEAN_WAS_NOT_DEFINED\n#undef GRPC_WIN32_LEAN_AND_MEAN_WAS_NOT_DEFINED\n#undef WIN32_LEAN_AND_MEAN\n#endif /* GRPC_WIN32_LEAN_AND_MEAN_WAS_NOT_DEFINED */\n\n#ifdef GRPC_NOMINMAX_WAS_NOT_DEFINED\n#undef GRPC_NOMINMAX_WAS_NOT_DEFINED\n#undef NOMINMAX\n#endif /* GRPC_WIN32_LEAN_AND_MEAN_WAS_NOT_DEFINED */\n#endif /* defined(_WIN64) || defined(WIN64) || defined(_WIN32) || \\\n          defined(WIN32) */\n\n/* Override this file with one for your platform if you need to redefine\n   things.  */\n\n#if !defined(GPR_NO_AUTODETECT_PLATFORM)\n#if defined(_WIN64) || defined(WIN64) || defined(_WIN32) || defined(WIN32)\n#if defined(_WIN64) || defined(WIN64)\n#define GPR_ARCH_64 1\n#else\n#define GPR_ARCH_32 1\n#endif\n#define GPR_PLATFORM_STRING \"windows\"\n#define GPR_WINDOWS 1\n#define GPR_WINDOWS_SUBPROCESS 1\n#define GPR_WINDOWS_ENV\n#ifdef __MSYS__\n#define GPR_GETPID_IN_UNISTD_H 1\n#define GPR_MSYS_TMPFILE\n#define GPR_POSIX_LOG\n#define GPR_POSIX_STRING\n#define GPR_POSIX_TIME\n#else\n#define GPR_GETPID_IN_PROCESS_H 1\n#define GPR_WINDOWS_TMPFILE\n#define GPR_WINDOWS_LOG\n#define GPR_WINDOWS_CRASH_HANDLER 1\n#define GPR_WINDOWS_STRING\n#define GPR_WINDOWS_TIME\n#endif\n#ifdef __GNUC__\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#else\n#define GPR_WINDOWS_ATOMIC 1\n#define GPR_MSVC_TLS 1\n#endif\n#elif defined(GPR_MANYLINUX1)\n// TODO(atash): manylinux1 is just another __linux__ but with ancient\n// libraries; it should be integrated with the `__linux__` definitions below.\n#define GPR_PLATFORM_STRING \"manylinux\"\n#define GPR_POSIX_CRASH_HANDLER 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#define GPR_LINUX 1\n#define GPR_LINUX_LOG 1\n#define GPR_SUPPORT_CHANNELS_FROM_FD 1\n#define GPR_LINUX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#include <linux/version.h>\n#elif defined(ANDROID) || defined(__ANDROID__)\n#define GPR_PLATFORM_STRING \"android\"\n#define GPR_ANDROID 1\n// TODO(apolcyn): re-evaluate support for c-ares\n// on android after upgrading our c-ares dependency.\n// See https://github.com/grpc/grpc/issues/18038.\n#define GRPC_ARES 0\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_SYNC 1\n#define GPR_GCC_TLS 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_ANDROID_LOG 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#define GPR_SUPPORT_CHANNELS_FROM_FD 1\n#elif defined(__linux__)\n#define GPR_PLATFORM_STRING \"linux\"\n#ifndef _BSD_SOURCE\n#define _BSD_SOURCE\n#endif\n#ifndef _DEFAULT_SOURCE\n#define _DEFAULT_SOURCE\n#endif\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n#include <features.h>\n#define GPR_CPU_LINUX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#define GPR_LINUX 1\n#define GPR_LINUX_LOG\n#define GPR_SUPPORT_CHANNELS_FROM_FD 1\n#define GPR_LINUX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#ifdef __GLIBC__\n#define GPR_POSIX_CRASH_HANDLER 1\n#define GPR_LINUX_PTHREAD_NAME 1\n#include <linux/version.h>\n#else /* musl libc */\n#define GPR_MUSL_LIBC_COMPAT 1\n#endif\n#elif defined(__ASYLO__)\n#define GPR_ARCH_64 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_TLS 1\n#define GPR_PLATFORM_STRING \"asylo\"\n#define GPR_GCC_SYNC 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_TIME 1\n#define GPR_POSIX_ENV 1\n#define GPR_ASYLO 1\n#define GRPC_POSIX_SOCKET 1\n#define GRPC_POSIX_SOCKETADDR\n#define GRPC_POSIX_SOCKETUTILS 1\n#define GRPC_TIMER_USE_GENERIC 1\n#define GRPC_POSIX_NO_SPECIAL_WAKEUP_FD 1\n#define GRPC_POSIX_WAKEUP_FD 1\n#define GRPC_ARES 0\n#define GPR_NO_AUTODETECT_PLATFORM 1\n#elif defined(__APPLE__)\n#include <Availability.h>\n#include <TargetConditionals.h>\n#ifndef _BSD_SOURCE\n#define _BSD_SOURCE\n#endif\n#if TARGET_OS_IPHONE\n#define GPR_PLATFORM_STRING \"ios\"\n#define GPR_CPU_IPHONE 1\n#define GPR_PTHREAD_TLS 1\n#define GRPC_CFSTREAM 1\n/* the c-ares resolver isn't safe to enable on iOS */\n#define GRPC_ARES 0\n#else /* TARGET_OS_IPHONE */\n#define GPR_PLATFORM_STRING \"osx\"\n#ifdef __MAC_OS_X_VERSION_MIN_REQUIRED\n#if __MAC_OS_X_VERSION_MIN_REQUIRED < __MAC_10_7\n#define GPR_CPU_IPHONE 1\n#define GPR_PTHREAD_TLS 1\n#else /* __MAC_OS_X_VERSION_MIN_REQUIRED < __MAC_10_7 */\n#define GPR_CPU_POSIX 1\n/* TODO(vjpai): there is a reported issue in bazel build for Mac where __thread\n   in a header is currently not working (bazelbuild/bazel#4341). Remove\n   the following conditional and use GPR_GCC_TLS when that is fixed */\n#ifndef GRPC_BAZEL_BUILD\n#define GPR_GCC_TLS 1\n#else /* GRPC_BAZEL_BUILD */\n#define GPR_PTHREAD_TLS 1\n#endif /* GRPC_BAZEL_BUILD */\n#define GPR_APPLE_PTHREAD_NAME 1\n#endif\n#else /* __MAC_OS_X_VERSION_MIN_REQUIRED */\n#define GPR_CPU_POSIX 1\n/* TODO(vjpai): Remove the following conditional and use only GPR_GCC_TLS\n   when bazelbuild/bazel#4341 is fixed */\n#ifndef GRPC_BAZEL_BUILD\n#define GPR_GCC_TLS 1\n#else /* GRPC_BAZEL_BUILD */\n#define GPR_PTHREAD_TLS 1\n#endif /* GRPC_BAZEL_BUILD */\n#endif\n#define GPR_POSIX_CRASH_HANDLER 1\n#endif\n#define GPR_APPLE 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#ifndef GRPC_CFSTREAM\n#define GPR_SUPPORT_CHANNELS_FROM_FD 1\n#endif\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#elif defined(__FreeBSD__)\n#define GPR_PLATFORM_STRING \"freebsd\"\n#ifndef _BSD_SOURCE\n#define _BSD_SOURCE\n#endif\n#define GPR_FREEBSD 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#define GPR_SUPPORT_CHANNELS_FROM_FD 1\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#elif defined(__OpenBSD__)\n#define GPR_PLATFORM_STRING \"openbsd\"\n#ifndef _BSD_SOURCE\n#define _BSD_SOURCE\n#endif\n#define GPR_OPENBSD 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#define GPR_SUPPORT_CHANNELS_FROM_FD 1\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#elif defined(__sun) && defined(__SVR4)\n#define GPR_PLATFORM_STRING \"solaris\"\n#define GPR_SOLARIS 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#elif defined(_AIX)\n#define GPR_PLATFORM_STRING \"aix\"\n#ifndef _ALL_SOURCE\n#define _ALL_SOURCE\n#endif\n#define GPR_AIX 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#elif defined(__native_client__)\n#define GPR_PLATFORM_STRING \"nacl\"\n#ifndef _BSD_SOURCE\n#define _BSD_SOURCE\n#endif\n#ifndef _DEFAULT_SOURCE\n#define _DEFAULT_SOURCE\n#endif\n#ifndef _GNU_SOURCE\n#define _GNU_SOURCE\n#endif\n#define GPR_NACL 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_GCC_TLS 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#ifdef _LP64\n#define GPR_ARCH_64 1\n#else /* _LP64 */\n#define GPR_ARCH_32 1\n#endif /* _LP64 */\n#elif defined(__Fuchsia__)\n#define GPR_FUCHSIA 1\n#define GPR_ARCH_64 1\n#define GPR_PLATFORM_STRING \"fuchsia\"\n#include <features.h>\n// Specifying musl libc affects wrap_memcpy.c. It causes memmove() to be\n// invoked.\n#define GPR_MUSL_LIBC_COMPAT 1\n#define GPR_CPU_POSIX 1\n#define GPR_GCC_ATOMIC 1\n#define GPR_PTHREAD_TLS 1\n#define GPR_POSIX_LOG 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_ENV 1\n#define GPR_POSIX_TMPFILE 1\n#define GPR_POSIX_SUBPROCESS 1\n#define GPR_POSIX_SYNC 1\n#define GPR_POSIX_STRING 1\n#define GPR_POSIX_TIME 1\n#define GPR_HAS_PTHREAD_H 1\n#define GPR_GETPID_IN_UNISTD_H 1\n#else\n#error \"Could not auto-detect platform\"\n#endif\n#endif /* GPR_NO_AUTODETECT_PLATFORM */\n\n#if defined(GPR_BACKWARDS_COMPATIBILITY_MODE)\n/*\n * For backward compatibility mode, reset _FORTIFY_SOURCE to prevent\n * a library from having non-standard symbols such as __asprintf_chk.\n * This helps non-glibc systems such as alpine using musl to find symbols.\n */\n#if defined(_FORTIFY_SOURCE) && _FORTIFY_SOURCE > 0\n#undef _FORTIFY_SOURCE\n#define _FORTIFY_SOURCE 0\n#endif\n#endif\n\n/*\n *  There are platforms for which TLS should not be used even though the\n * compiler makes it seem like it's supported (Android NDK < r12b for example).\n * This is primarily because of linker problems and toolchain misconfiguration:\n * TLS isn't supported until NDK r12b per\n * https://developer.android.com/ndk/downloads/revision_history.html\n * TLS also does not work with Android NDK if GCC is being used as the compiler\n * instead of Clang.\n * Since NDK r16, `__NDK_MAJOR__` and `__NDK_MINOR__` are defined in\n * <android/ndk-version.h>. For NDK < r16, users should define these macros,\n * e.g. `-D__NDK_MAJOR__=11 -D__NKD_MINOR__=0` for NDK r11. */\n#if defined(__ANDROID__) && defined(GPR_GCC_TLS)\n#if __has_include(<android/ndk-version.h>)\n#include <android/ndk-version.h>\n#endif /* __has_include(<android/ndk-version.h>) */\n#if (defined(__clang__) && defined(__NDK_MAJOR__) && defined(__NDK_MINOR__) && \\\n     ((__NDK_MAJOR__ < 12) ||                                                  \\\n      ((__NDK_MAJOR__ == 12) && (__NDK_MINOR__ < 1)))) ||                      \\\n    (defined(__GNUC__) && !defined(__clang__))\n#undef GPR_GCC_TLS\n#define GPR_PTHREAD_TLS 1\n#endif\n#endif /*defined(__ANDROID__) && defined(GPR_GCC_TLS) */\n\n#if defined(__has_include)\n#if __has_include(<atomic>)\n#define GRPC_HAS_CXX11_ATOMIC\n#endif /* __has_include(<atomic>) */\n#endif /* defined(__has_include) */\n\n#ifndef GPR_PLATFORM_STRING\n#warning \"GPR_PLATFORM_STRING not auto-detected\"\n#define GPR_PLATFORM_STRING \"unknown\"\n#endif\n\n#ifdef GPR_GCOV\n#undef GPR_FORBID_UNREACHABLE_CODE\n#define GPR_FORBID_UNREACHABLE_CODE 1\n#endif\n\n#ifdef _MSC_VER\n#if _MSC_VER < 1700\ntypedef __int8 int8_t;\ntypedef __int16 int16_t;\ntypedef __int32 int32_t;\ntypedef __int64 int64_t;\ntypedef unsigned __int8 uint8_t;\ntypedef unsigned __int16 uint16_t;\ntypedef unsigned __int32 uint32_t;\ntypedef unsigned __int64 uint64_t;\n#else\n#include <stdint.h>\n#endif /* _MSC_VER < 1700 */\n#else\n#include <stdint.h>\n#endif /* _MSC_VER */\n\n/* Type of cycle clock implementation */\n#ifdef GPR_LINUX\n/* Disable cycle clock by default.\n   TODO(soheil): enable when we support fallback for unstable cycle clocks.\n#if defined(__i386__)\n#define GPR_CYCLE_COUNTER_RDTSC_32 1\n#elif defined(__x86_64__) || defined(__amd64__)\n#define GPR_CYCLE_COUNTER_RDTSC_64 1\n#else\n#define GPR_CYCLE_COUNTER_FALLBACK 1\n#endif\n*/\n#define GPR_CYCLE_COUNTER_FALLBACK 1\n#else\n#define GPR_CYCLE_COUNTER_FALLBACK 1\n#endif /* GPR_LINUX */\n\n/* Cache line alignment */\n#ifndef GPR_CACHELINE_SIZE_LOG\n#if defined(__i386__) || defined(__x86_64__)\n#define GPR_CACHELINE_SIZE_LOG 6\n#endif\n#ifndef GPR_CACHELINE_SIZE_LOG\n/* A reasonable default guess. Note that overestimates tend to waste more\n   space, while underestimates tend to waste more time. */\n#define GPR_CACHELINE_SIZE_LOG 6\n#endif /* GPR_CACHELINE_SIZE_LOG */\n#endif /* GPR_CACHELINE_SIZE_LOG */\n\n#define GPR_CACHELINE_SIZE (1 << GPR_CACHELINE_SIZE_LOG)\n\n/* scrub GCC_ATOMIC if it's not available on this compiler */\n#if defined(GPR_GCC_ATOMIC) && !defined(__ATOMIC_RELAXED)\n#undef GPR_GCC_ATOMIC\n#define GPR_GCC_SYNC 1\n#endif\n\n/* Validate platform combinations */\n#if defined(GPR_GCC_ATOMIC) + defined(GPR_GCC_SYNC) + \\\n        defined(GPR_WINDOWS_ATOMIC) !=                \\\n    1\n#error Must define exactly one of GPR_GCC_ATOMIC, GPR_GCC_SYNC, GPR_WINDOWS_ATOMIC\n#endif\n\n#if defined(GPR_ARCH_32) + defined(GPR_ARCH_64) != 1\n#error Must define exactly one of GPR_ARCH_32, GPR_ARCH_64\n#endif\n\n#if defined(GPR_CPU_LINUX) + defined(GPR_CPU_POSIX) + defined(GPR_WINDOWS) + \\\n        defined(GPR_CPU_IPHONE) + defined(GPR_CPU_CUSTOM) !=                 \\\n    1\n#error Must define exactly one of GPR_CPU_LINUX, GPR_CPU_POSIX, GPR_WINDOWS, GPR_CPU_IPHONE, GPR_CPU_CUSTOM\n#endif\n\n#if defined(GPR_MSVC_TLS) + defined(GPR_GCC_TLS) + defined(GPR_PTHREAD_TLS) + \\\n        defined(GPR_CUSTOM_TLS) !=                                            \\\n    1\n#error Must define exactly one of GPR_MSVC_TLS, GPR_GCC_TLS, GPR_PTHREAD_TLS, GPR_CUSTOM_TLS\n#endif\n\n/* maximum alignment needed for any type on this platform, rounded up to a\n   power of two */\n#define GPR_MAX_ALIGNMENT 16\n\n#ifndef GRPC_ARES\n#define GRPC_ARES 1\n#endif\n\n#ifndef GRPC_IF_NAMETOINDEX\n#define GRPC_IF_NAMETOINDEX 1\n#endif\n\n#ifndef GRPC_MUST_USE_RESULT\n#if defined(__GNUC__) && !defined(__MINGW32__)\n#define GRPC_MUST_USE_RESULT __attribute__((warn_unused_result))\n#define GPR_ALIGN_STRUCT(n) __attribute__((aligned(n)))\n#else\n#define GRPC_MUST_USE_RESULT\n#define GPR_ALIGN_STRUCT(n)\n#endif\n#endif\n\n#ifndef GRPC_UNUSED\n#if defined(__GNUC__) && !defined(__MINGW32__)\n#define GRPC_UNUSED __attribute__((unused))\n#else\n#define GRPC_UNUSED\n#endif\n#endif\n\n#ifndef GPR_PRINT_FORMAT_CHECK\n#ifdef __GNUC__\n#define GPR_PRINT_FORMAT_CHECK(FORMAT_STR, ARGS) \\\n  __attribute__((format(printf, FORMAT_STR, ARGS)))\n#else\n#define GPR_PRINT_FORMAT_CHECK(FORMAT_STR, ARGS)\n#endif\n#endif /* GPR_PRINT_FORMAT_CHECK */\n\n#if GPR_FORBID_UNREACHABLE_CODE\n#define GPR_UNREACHABLE_CODE(STATEMENT)\n#else\n#define GPR_UNREACHABLE_CODE(STATEMENT)             \\\n  do {                                              \\\n    gpr_log(GPR_ERROR, \"Should never reach here.\"); \\\n    abort();                                        \\\n    STATEMENT;                                      \\\n  } while (0)\n#endif /* GPR_FORBID_UNREACHABLE_CODE */\n\n#ifndef GPRAPI\n#define GPRAPI\n#endif\n\n#ifndef GRPCAPI\n#define GRPCAPI GPRAPI\n#endif\n\n#ifndef CENSUSAPI\n#define CENSUSAPI GRPCAPI\n#endif\n\n#ifndef GPR_HAS_ATTRIBUTE\n#ifdef __has_attribute\n#define GPR_HAS_ATTRIBUTE(a) __has_attribute(a)\n#else\n#define GPR_HAS_ATTRIBUTE(a) 0\n#endif\n#endif /* GPR_HAS_ATTRIBUTE */\n\n#ifndef GPR_HAS_FEATURE\n#ifdef __has_feature\n#define GPR_HAS_FEATURE(a) __has_feature(a)\n#else\n#define GPR_HAS_FEATURE(a) 0\n#endif\n#endif /* GPR_HAS_FEATURE */\n\n#ifndef GPR_ATTRIBUTE_NOINLINE\n#if GPR_HAS_ATTRIBUTE(noinline) || (defined(__GNUC__) && !defined(__clang__))\n#define GPR_ATTRIBUTE_NOINLINE __attribute__((noinline))\n#define GPR_HAS_ATTRIBUTE_NOINLINE 1\n#else\n#define GPR_ATTRIBUTE_NOINLINE\n#endif\n#endif /* GPR_ATTRIBUTE_NOINLINE */\n\n#ifndef GPR_ATTRIBUTE_WEAK\n/* Attribute weak is broken on LLVM/windows:\n * https://bugs.llvm.org/show_bug.cgi?id=37598 */\n#if (GPR_HAS_ATTRIBUTE(weak) || (defined(__GNUC__) && !defined(__clang__))) && \\\n    !(defined(__llvm__) && defined(_WIN32))\n#define GPR_ATTRIBUTE_WEAK __attribute__((weak))\n#define GPR_HAS_ATTRIBUTE_WEAK 1\n#else\n#define GPR_ATTRIBUTE_WEAK\n#endif\n#endif /* GPR_ATTRIBUTE_WEAK */\n\n#ifndef GPR_ATTRIBUTE_NO_TSAN /* (1) */\n#if GPR_HAS_FEATURE(thread_sanitizer)\n#define GPR_ATTRIBUTE_NO_TSAN __attribute__((no_sanitize(\"thread\")))\n#endif                        /* GPR_HAS_FEATURE */\n#ifndef GPR_ATTRIBUTE_NO_TSAN /* (2) */\n#define GPR_ATTRIBUTE_NO_TSAN\n#endif /* GPR_ATTRIBUTE_NO_TSAN (2) */\n#endif /* GPR_ATTRIBUTE_NO_TSAN (1) */\n\n/* GRPC_TSAN_ENABLED will be defined, when compiled with thread sanitizer. */\n#if defined(__SANITIZE_THREAD__)\n#define GRPC_TSAN_ENABLED\n#elif GPR_HAS_FEATURE(thread_sanitizer)\n#define GRPC_TSAN_ENABLED\n#endif\n\n/* GRPC_ASAN_ENABLED will be defined, when compiled with address sanitizer. */\n#if defined(__SANITIZE_ADDRESS__)\n#define GRPC_ASAN_ENABLED\n#elif GPR_HAS_FEATURE(address_sanitizer)\n#define GRPC_ASAN_ENABLED\n#endif\n\n/* GRPC_ALLOW_EXCEPTIONS should be 0 or 1 if exceptions are allowed or not */\n#ifndef GRPC_ALLOW_EXCEPTIONS\n#ifdef GPR_WINDOWS\n#if defined(_MSC_VER) && defined(_CPPUNWIND)\n#define GRPC_ALLOW_EXCEPTIONS 1\n#elif defined(__EXCEPTIONS)\n#define GRPC_ALLOW_EXCEPTIONS 1\n#else\n#define GRPC_ALLOW_EXCEPTIONS 0\n#endif\n#else /* GPR_WINDOWS */\n#ifdef __EXCEPTIONS\n#define GRPC_ALLOW_EXCEPTIONS 1\n#else /* __EXCEPTIONS */\n#define GRPC_ALLOW_EXCEPTIONS 0\n#endif /* __EXCEPTIONS */\n#endif /* __GPR_WINDOWS */\n#endif /* GRPC_ALLOW_EXCEPTIONS */\n\n/* Use GPR_LIKELY only in cases where you are sure that a certain outcome is the\n * most likely. Ideally, also collect performance numbers to justify the claim.\n */\n#ifdef __GNUC__\n#define GPR_LIKELY(x) __builtin_expect((x), 1)\n#define GPR_UNLIKELY(x) __builtin_expect((x), 0)\n#else /* __GNUC__ */\n#define GPR_LIKELY(x) (x)\n#define GPR_UNLIKELY(x) (x)\n#endif /* __GNUC__ */\n\n#ifndef __STDC_FORMAT_MACROS\n#define __STDC_FORMAT_MACROS\n#endif\n\n#endif /* GRPC_IMPL_CODEGEN_PORT_PLATFORM_H */\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/third_party/upb/tests/google_message2.dat",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/third_party/upb/tests/test.proto.pb",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/third_party/upb/tests/google_message1.dat",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/third_party/upb/tests/json/test.proto.pb",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/android/test/interop/app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/android/test/interop/app/src/main/res/mipmap-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/android/test/interop/app/src/main/res/mipmap-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/android/test/interop/app/src/main/res/mipmap-xhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/android/test/interop/gradle/wrapper/gradle-wrapper.jar",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/csharp/keys/Grpc.snk",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/csharp/keys/Grpc.public.snk",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/csharp/doc/integration.md-fig.2-sdk.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/src/csharp/doc/integration.md-fig.1-classic.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/client_fuzzer_corpus/hdr_frame.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/client_fuzzer_corpus/data_frame.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/cdba6c45.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/652bfdce.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/65099066.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/f74b9428.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/597fdab5.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/3de41f3f.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/7ffd05db.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/e3bab014.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/2c6660ba.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/f541d27e.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/11516d58.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/8338ebee.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/c66e84d1.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/0d10bb63.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/f5c877c4.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/90240c7c.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/0f700e05.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/1f992057.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/c4534867.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/88e1329b.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/69891e9f.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/e0d9a9a7.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/021ec59f.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/41b31ef0.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/6e050e98.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/34bba9e4.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/a7e64803.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/01c008fa.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/1cfdde7a.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/67b04816.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/b1128694.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/97aed4bd.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/aa8729d7.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/746715fe.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/c43d97f2.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/aa825693.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/1e92aaa5.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/93beeba2.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/a5348197.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/4eb269c3.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/3e787760.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/86e6dbf2.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/422fa704.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/0ff4d220.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/f3220426.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/ff227015.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/0384345c.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/be9b6e78.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/25ab638f.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/b829143b.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/330ad4b6.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/44f342a6.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/hope.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/dab172ff.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/0b275a7f.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/server_fuzzer_corpus/5429f0da.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/api_fuzzer_corpus/bad.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/test/core/end2end/fuzzers/api_fuzzer_corpus/full_request.bin",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/android/helloworld/app/src/main/res/mipmap-xxhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/android/helloworld/app/src/main/res/mipmap-hdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/android/helloworld/app/src/main/res/mipmap-mdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/android/helloworld/app/src/main/res/mipmap-xhdpi/ic_launcher.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/android/helloworld/gradle/wrapper/gradle-wrapper.jar",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/objective-c/route_guide/Misc/Images.xcassets/second.imageset/second.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/objective-c/route_guide/Misc/Images.xcassets/first.imageset/first.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/objective-c/auth_sample/Misc/Images.xcassets/second.imageset/second.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/objective-c/auth_sample/Misc/Images.xcassets/first.imageset/first.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/csharp/HelloworldXamarin/Droid/Resources/mipmap-xxhdpi/Icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/csharp/HelloworldXamarin/Droid/Resources/mipmap-xxxhdpi/Icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/csharp/HelloworldXamarin/Droid/Resources/mipmap-hdpi/Icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/csharp/HelloworldXamarin/Droid/Resources/mipmap-mdpi/Icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/examples/csharp/HelloworldXamarin/Droid/Resources/mipmap-xhdpi/Icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/grpc_security_audit.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-pss.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-epollex.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-cq.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-client-lb-pss.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/load-balancing.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-ps-pss-fd.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/compression_cookbook_outgoing.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-epoll1.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-server-cq-fds.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/compression_cookbook_incoming.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/grpc-call-channel-cq.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/images/stress_test_framework.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/core/images/new_epoll_impl.png",
        "/tmp/vanessa/spack-stage/spack-stage-grpc-1.26.0-n55ologtna6preeliuvaj4nowxvuqxn2/spack-src/doc/core/images/old_epoll_impl.png"
    ],
    "total_files": 5147
}