{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/external/vmd_molfile/vmddlopen.c": "/* -*- mode: c; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; c-file-style: \"stroustrup\"; -*-\n *\n * \n * This file is part of Gromacs        Copyright (c) 1991-2008\n * David van der Spoel, Erik Lindahl, Berk Hess, University of Groningen.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * To help us fund GROMACS development, we humbly ask that you cite\n * the research papers on the package. Check out http://www.gromacs.org\n * \n * And Hey:\n * Gnomes, ROck Monsters And Chili Sauce\n */\n\n/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2009 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\nDeveloped by:           Theoretical and Computational Biophysics Group\n                        University of Illinois at Urbana-Champaign\n                        http://www.ks.uiuc.edu/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the Software), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to\ndo so, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimers.\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimers in the documentation\nand/or other materials provided with the distribution.\n\nNeither the names of Theoretical and Computational Biophysics Group,\nUniversity of Illinois at Urbana-Champaign, nor the names of its contributors\nmay be used to endorse or promote products derived from this Software without\nspecific prior written permission.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS WITH THE SOFTWARE.\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmddlopen.c,v $\n *      $Author: johns $        $Locker:  $             $State: Exp $\n *      $Revision: 1.18 $      $Date: 2009/07/07 02:40:05 $\n *\n ***************************************************************************\n * DESCRIPTION:\n *   Routines for loading dynamic link libraries and shared object files\n *   on various platforms, abstracting from machine dependent APIs.\n *\n ***************************************************************************/\n\n#include <stdio.h> \n#include <stdlib.h>\n#include <string.h>\n#include \"vmddlopen.h\"\n\n#if defined(__hpux)\n\n#include <dl.h>\n#include <errno.h>\n#include <string.h>\n\nvoid *vmddlopen( const char *path) {\n    void *ret;\n    ret = shl_load( path, BIND_IMMEDIATE | BIND_FIRST | BIND_VERBOSE, 0);\n    return ret;\n}\n\nint vmddlclose( void *handle ) {\n    return shl_unload( (shl_t) handle );\n}\n\nvoid *vmddlsym( void *handle, const char *sym ) {\n    void *value=0;\n\n    if ( shl_findsym( (shl_t*)&handle, sym, TYPE_UNDEFINED, &value ) != 0 ) \n\treturn 0;\n    return value;\n}\n\nconst char *vmddlerror( void  ) {\n    return strerror( errno );\n}\n\n#elif 0 && defined(__APPLE__)\n/*\n * This is only needed for MacOS X version 10.3 or older\n */\n#include <mach-o/dyld.h>\n\nvoid *vmddlopen( const char *path) {\n  NSObjectFileImage image;\n  NSObjectFileImageReturnCode retval;\n  NSModule module;\n\n  retval = NSCreateObjectFileImageFromFile(path, &image);\n  if (retval != NSObjectFileImageSuccess)\n    return NULL;\n\n  module = NSLinkModule(image, path,\n            NSLINKMODULE_OPTION_BINDNOW | NSLINKMODULE_OPTION_PRIVATE\n            | NSLINKMODULE_OPTION_RETURN_ON_ERROR);\n  return module;  /* module will be NULL on error */\n}\n\nint vmddlclose( void *handle ) {\n  NSModule module = (NSModule *)handle;\n  NSUnLinkModule(module, NSUNLINKMODULE_OPTION_NONE);\n  return 0;\n}\n\nvoid *vmddlsym( void *handle, const char *symname ) {\n  char *realsymname;\n  NSModule module;\n  NSSymbol sym;\n  /* Hack around the leading underscore in the symbol name */\n  realsymname = (char *)malloc(strlen(symname)+2);\n  strcpy(realsymname, \"_\");\n  strcat(realsymname, symname);\n  module = (NSModule)handle;\n  sym = NSLookupSymbolInModule(module, realsymname);\n  free(realsymname);\n  if (sym) \n    return (void *)(NSAddressOfSymbol(sym));\n  return NULL;\n}\n\nconst char *vmddlerror( void  ) {\n  NSLinkEditErrors c;\n  int errorNumber;\n  const char *fileName;\n  const char *errorString = NULL;\n  NSLinkEditError(&c, &errorNumber, &fileName, &errorString);\n  return errorString;\n}\n\n#elif defined( _WIN32 ) || defined( _WIN64 )\n\n#include <windows.h>\n\nvoid *vmddlopen(const char *fname) {\n  return (void *)LoadLibrary(fname);\n}\n\nconst char *vmddlerror(void) {\n  static CHAR szBuf[80]; \n  DWORD dw = GetLastError(); \n \n  sprintf(szBuf, \"vmddlopen failed: GetLastError returned %lu\\n\", dw);\n  return szBuf;\n}\n\nvoid *vmddlsym(void *h, const char *sym) {\n  return (void *)GetProcAddress((HINSTANCE)h, sym);\n}\n\nint vmddlclose(void *h) {\n  /* FreeLibrary returns nonzero on success */\n  return !FreeLibrary((HINSTANCE)h);\n}\n\n#else\n\n/* All remaining platforms (not Windows, HP-UX, or MacOS X <= 10.3) */\n#include <dlfcn.h>\n\nvoid *vmddlopen(const char *fname) {\n  return dlopen(fname, RTLD_NOW);\n}\nconst char *vmddlerror(void) {\n  return dlerror();\n}\nvoid *vmddlsym(void *h, const char *sym) {\n  return dlsym(h, sym);\n}\nint vmddlclose(void *h) {\n  return dlclose(h);\n}\n#endif \n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/external/vmd_molfile/vmddlopen.h": "/* -*- mode: c; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4; c-file-style: \"stroustrup\"; -*-\n *\n * \n * This file is part of Gromacs        Copyright (c) 1991-2008\n * David van der Spoel, Erik Lindahl, Berk Hess, University of Groningen.\n *\n * This program is free software; you can redistribute it and/or\n * modify it under the terms of the GNU General Public License\n * as published by the Free Software Foundation; either version 2\n * of the License, or (at your option) any later version.\n *\n * To help us fund GROMACS development, we humbly ask that you cite\n * the research papers on the package. Check out http://www.gromacs.org\n * \n * And Hey:\n * Gnomes, ROck Monsters And Chili Sauce\n */\n\n/***************************************************************************\n *cr\n *cr            (C) Copyright 1995-2009 The Board of Trustees of the\n *cr                        University of Illinois\n *cr                         All Rights Reserved\n *cr\nDeveloped by:           Theoretical and Computational Biophysics Group\n                        University of Illinois at Urbana-Champaign\n                        http://www.ks.uiuc.edu/\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the Software), to deal with\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to\ndo so, subject to the following conditions:\n\nRedistributions of source code must retain the above copyright notice,\nthis list of conditions and the following disclaimers.\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimers in the documentation\nand/or other materials provided with the distribution.\n\nNeither the names of Theoretical and Computational Biophysics Group,\nUniversity of Illinois at Urbana-Champaign, nor the names of its contributors\nmay be used to endorse or promote products derived from this Software without\nspecific prior written permission.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\nTHE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS WITH THE SOFTWARE.\n ***************************************************************************/\n\n/***************************************************************************\n * RCS INFORMATION:\n *\n *      $RCSfile: vmddlopen.h,v $\n *      $Author: johns $        $Locker:  $             $State: Exp $\n *      $Revision: 1.9 $      $Date: 2009/07/07 02:40:05 $\n *\n ***************************************************************************\n * DESCRIPTION:\n *   Routines for loading dynamic link libraries and shared object files\n *   on various platforms, abstracting from machine dependent APIs.\n *\n * LICENSE:\n *   UIUC Open Source License \n *   http://www.ks.uiuc.edu/Research/vmd/plugins/pluginlicense.html\n *\n ***************************************************************************/\n\n/*\n * vmddlopen: thin multi-platform wrapper around dlopen/LoadLibrary\n */\n\n#ifndef VMD_DLOPEN__\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* Try to open the specified library.  All symbols must be resolved or the \n * load will fail (RTLD_NOW).  \n */\nvoid *vmddlopen(const char *fname);\n\n/* Try to load the specified symbol using the given handle.  Returns NULL if \n * the symbol cannot be loaded.\n */\nvoid *vmddlsym(void *h, const char *sym);\n\n/* Unload the library.  Return 0 on success, nonzero on error. \n */\nint vmddlclose(void *h);\n\n/* Return last error from any of the above functions.  Not thread-safe on\n * Windows due to static buffer in our code. \n */ \nconst char *vmddlerror(void);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/fileio/vmdio.cpp": "/*\n * This file is part of the GROMACS molecular simulation package.\n *\n * Copyright (c) 2009,2010,2012,2013,2014,2015,2016,2017, by the GROMACS development team, led by\n * Mark Abraham, David van der Spoel, Berk Hess, and Erik Lindahl,\n * and including many others, as listed in the AUTHORS file in the\n * top-level source directory and at http://www.gromacs.org.\n *\n * GROMACS is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public License\n * as published by the Free Software Foundation; either version 2.1\n * of the License, or (at your option) any later version.\n *\n * GROMACS is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public\n * License along with GROMACS; if not, see\n * http://www.gnu.org/licenses, or write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA.\n *\n * If you want to redistribute modifications to GROMACS, please\n * consider that scientific software is very special. Version\n * control is crucial - bugs must be traceable. We will be happy to\n * consider code for inclusion in the official distribution, but\n * derived work must not be called official GROMACS. Details are found\n * in the README & COPYING files - if they are missing, get the\n * official version at http://www.gromacs.org.\n *\n * To help us fund GROMACS development, we humbly ask that you cite\n * the research papers on the package. Check out http://www.gromacs.org.\n */\n#include \"gmxpre.h\"\n\n#include \"vmdio.h\"\n\n#include \"config.h\"\n\n/* Derived from PluginMgr.C and catdcd.c */\n\n/* PluginMgr.C: Copyright: */\n/***************************************************************************\n * cr\n * cr            (C) Copyright 1995-2009 The Board of Trustees of the\n * cr                        University of Illinois\n * cr                         All Rights Reserved\n * cr\n   Developed by:           Theoretical and Computational Biophysics Group\n                        University of Illinois at Urbana-Champaign\n                        http://www.ks.uiuc.edu/\n\n   Permission is hereby granted, free of charge, to any person obtaining a copy of\n   this software and associated documentation files (the Software), to deal with\n   the Software without restriction, including without limitation the rights to\n   use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\n   of the Software, and to permit persons to whom the Software is furnished to\n   do so, subject to the following conditions:\n\n   Redistributions of source code must retain the above copyright notice,\n   this list of conditions and the following disclaimers.\n\n   Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimers in the documentation\n   and/or other materials provided with the distribution.\n\n   Neither the names of Theoretical and Computational Biophysics Group,\n   University of Illinois at Urbana-Champaign, nor the names of its contributors\n   may be used to endorse or promote products derived from this Software without\n   specific prior written permission.\n\n   THE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL\n   THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR\n   OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\n   ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\n   OTHER DEALINGS WITH THE SOFTWARE.\n ***************************************************************************/\n\n/* catdcd.c: Copyright: */\n/*****************************************************************************/\n/*                                                                           */\n/* (C) Copyright 2001-2005 Justin Gullingsrud and the University of Illinois.*/\n/*                                                                           */\n/*****************************************************************************/\n\n#include <assert.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n/*\n * Plugin header files; get plugin source from www.ks.uiuc.edu/Research/vmd\"\n */\n#include \"external/vmd_molfile/molfile_plugin.h\"\n#include \"external/vmd_molfile/vmddlopen.h\"\n#if !GMX_NATIVE_WINDOWS\n#include <glob.h>\n#else\n#ifndef _WIN32_IE\n#define _WIN32_IE 0x0500 /* SHGetFolderPath is available since WinXP/IE5 */\n#endif\n#include <shlobj.h>\n#include <windows.h>\n#endif\n\n#include \"gromacs/fileio/gmxfio.h\"\n#include \"gromacs/math/vec.h\"\n#include \"gromacs/pbcutil/pbc.h\"\n#include \"gromacs/trajectory/trajectoryframe.h\"\n#include \"gromacs/utility/basedefinitions.h\"\n#include \"gromacs/utility/fatalerror.h\"\n#include \"gromacs/utility/futil.h\"\n#include \"gromacs/utility/smalloc.h\"\n\n\ntypedef int (*initfunc)(void);\ntypedef int (*regfunc)(void *, vmdplugin_register_cb);\ntypedef int (*finifunc)(void);\n\n\n\nstatic int register_cb(void *v, vmdplugin_t *p)\n{\n    const char      *key       = p->name;\n    gmx_vmdplugin_t *vmdplugin = static_cast<gmx_vmdplugin_t *>(v);\n\n    if (strcmp(key, vmdplugin->filetype) == 0)\n    {\n        vmdplugin->api = (molfile_plugin_t *)p;\n    }\n    return VMDPLUGIN_SUCCESS;\n}\n\nstatic int load_sharedlibrary_plugins(const char *fullpath, gmx_vmdplugin_t *vmdplugin)\n{\n    /* Open the dll; try to execute the init function. */\n    void *handle, *ifunc, *registerfunc;\n    handle = vmddlopen(fullpath);\n    if (!handle)\n    {\n        if (debug)\n        {\n            fprintf(debug, \"\\nUnable to open dynamic library %s.\\n%s\\n\",  fullpath, vmddlerror());         /*only to debug because of stdc++ erros */\n        }\n        return 0;\n    }\n\n    ifunc = vmddlsym(handle, \"vmdplugin_init\");\n    if (!ifunc || ((initfunc)(ifunc))())\n    {\n        printf(\"\\nvmdplugin_init() for %s returned an error; plugin(s) not loaded.\\n\", fullpath);\n        vmddlclose(handle);\n        return 0;\n    }\n\n    registerfunc = vmddlsym(handle, \"vmdplugin_register\");\n    if (!registerfunc)\n    {\n        printf(\"\\nDidn't find the register function in %s; plugin(s) not loaded.\\n\", fullpath);\n        vmddlclose(handle);\n        return 0;\n    }\n    else\n    {\n        /* Load plugins from the library.*/\n        ((regfunc)registerfunc)(vmdplugin, register_cb);\n    }\n\n    /* in case this library does not support the filetype, close it */\n    if (vmdplugin->api == nullptr)\n    {\n        vmddlclose(handle);\n    }\n\n    return 1;\n}\n\n/*return: 1: success, 0: last frame, -1: error*/\ngmx_bool read_next_vmd_frame(gmx_vmdplugin_t *vmdplugin, t_trxframe *fr)\n{\n    int                rc, i;\n    rvec               vec, angle;\n    molfile_timestep_t ts;\n\n\n    fr->bV = vmdplugin->bV;\n\n#if GMX_DOUBLE\n    snew(ts.coords, fr->natoms*3);\n    if (fr->bV)\n    {\n        snew(ts.velocities, fr->natoms*3);\n    }\n#else\n    ts.coords = (float*)fr->x;\n    if (fr->bV)\n    {\n        ts.velocities = (float*)fr->v;\n    }\n#endif\n\n    rc = vmdplugin->api->read_next_timestep(vmdplugin->handle, fr->natoms, &ts);\n\n    if (rc < -1)\n    {\n        fprintf(stderr, \"\\nError reading input file (error code %d)\\n\", rc);\n    }\n    if (rc < 0)\n    {\n        vmdplugin->api->close_file_read(vmdplugin->handle);\n        return 0;\n    }\n\n#if GMX_DOUBLE\n    for (i = 0; i < fr->natoms; i++)\n    {\n        fr->x[i][0] = .1*ts.coords[i*3];\n        fr->x[i][1] = .1*ts.coords[i*3+1];\n        fr->x[i][2] = .1*ts.coords[i*3+2];\n        if (fr->bV)\n        {\n            fr->v[i][0] = .1*ts.velocities[i*3];\n            fr->v[i][1] = .1*ts.velocities[i*3+1];\n            fr->v[i][2] = .1*ts.velocities[i*3+2];\n        }\n    }\n    sfree(ts.coords);\n    if (fr->bV)\n    {\n        sfree(ts.velocities);\n    }\n#else\n    for (i = 0; i < fr->natoms; i++)\n    {\n        svmul(.1, fr->x[i], fr->x[i]);\n        if (fr->bV)\n        {\n            svmul(.1, fr->v[i], fr->v[i]);\n        }\n    }\n#endif\n\n    fr->bX   = 1;\n    fr->bBox = 1;\n    vec[0]   = .1*ts.A; vec[1] = .1*ts.B; vec[2] = .1*ts.C;\n    angle[0] = ts.alpha; angle[1] = ts.beta; angle[2] = ts.gamma;\n    matrix_convert(fr->box, vec, angle);\n    if (vmdplugin->api->abiversion > 10)\n    {\n        fr->bTime = TRUE;\n        fr->time  = ts.physical_time;\n    }\n    else\n    {\n        fr->bTime = FALSE;\n    }\n\n\n    return 1;\n}\n\nstatic int load_vmd_library(const char *fn, gmx_vmdplugin_t *vmdplugin)\n{\n    char            pathname[GMX_PATH_MAX];\n    const char     *pathenv;\n    const char     *err;\n    int             ret = 0;\n    char            pathenv_buffer[GMX_PATH_MAX];\n#if !GMX_NATIVE_WINDOWS\n    glob_t          globbuf;\n    const char     *defpath_suffix = \"/plugins/*/molfile\";\n    const char     *defpathenv     = GMX_VMD_PLUGIN_PATH;\n#else\n    WIN32_FIND_DATA ffd;\n    HANDLE          hFind = INVALID_HANDLE_VALUE;\n    char            progfolder[GMX_PATH_MAX];\n    char            defpathenv[GMX_PATH_MAX];\n    const char     *defpath_suffix = \"\\\\plugins\\\\WIN32\\\\molfile\";\n    SHGetFolderPath(NULL, CSIDL_PROGRAM_FILES, NULL, SHGFP_TYPE_CURRENT, progfolder);\n    sprintf(defpathenv, \"%s\\\\University of Illinois\\\\VMD\\\\plugins\\\\WIN32\\\\molfile\", progfolder);\n#endif\n\n    vmdplugin->api      = nullptr;\n    vmdplugin->filetype = strrchr(fn, '.');\n    if (!vmdplugin->filetype)\n    {\n        return 0;\n    }\n    vmdplugin->filetype++;\n\n    /* First look for an explicit path given at run time for the\n     * plugins, then an implicit run-time path, and finally for one\n     * given at configure time. This last might be hard-coded to the\n     * default for VMD installs. */\n    pathenv = getenv(\"VMD_PLUGIN_PATH\");\n    if (pathenv == nullptr)\n    {\n        pathenv = getenv(\"VMDDIR\");\n        if (nullptr == pathenv)\n        {\n            printf(\"\\nNeither VMD_PLUGIN_PATH or VMDDIR set. \");\n            printf(\"Using default location:\\n%s\\n\", defpathenv);\n            pathenv = defpathenv;\n        }\n        else\n        {\n            printf(\"\\nVMD_PLUGIN_PATH no set, but VMDDIR is set. \");\n#ifdef _MSC_VER\n            _snprintf_s(pathenv_buffer, sizeof(pathenv_buffer), _TRUNCATE, \"%s%s\", pathenv, defpath_suffix);\n#else\n            snprintf(pathenv_buffer, sizeof(pathenv_buffer), \"%s%s\", pathenv, defpath_suffix);\n#endif\n            printf(\"Using semi-default location:\\n%s\\n\", pathenv_buffer);\n            pathenv = pathenv_buffer;\n        }\n    }\n    strncpy(pathname, pathenv, sizeof(pathname));\n#if !GMX_NATIVE_WINDOWS\n    strcat(pathname, \"/*.so\");\n    glob(pathname, 0, nullptr, &globbuf);\n    if (globbuf.gl_pathc == 0)\n    {\n        printf(\"\\nNo VMD Plugins found\\n\"\n               \"Set the environment variable VMD_PLUGIN_PATH to the molfile folder within the\\n\"\n               \"VMD installation.\\n\"\n               \"The architecture (e.g. 32bit versus 64bit) of GROMACS and VMD has to match.\\n\");\n        return 0;\n    }\n    for (size_t i = 0; i < globbuf.gl_pathc && vmdplugin->api == nullptr; i++)\n    {\n        /* FIXME: Undefined which plugin is chosen if more than one plugin\n           can read a certain file ending. Requires some additional command\n           line option or enviroment variable to specify which plugin should\n           be picked.\n         */\n        ret |= load_sharedlibrary_plugins(globbuf.gl_pathv[i], vmdplugin);\n    }\n    globfree(&globbuf);\n#else\n    strcat(pathname, \"\\\\*.so\");\n    hFind = FindFirstFile(pathname, &ffd);\n    if (INVALID_HANDLE_VALUE == hFind)\n    {\n        printf(\"\\nNo VMD Plugins found\\n\");\n        return 0;\n    }\n    do\n    {\n        char filename[GMX_PATH_MAX];\n        sprintf(filename, \"%s\\\\%s\", pathenv, ffd.cFileName);\n        ret |= load_sharedlibrary_plugins(filename, vmdplugin);\n    }\n    while (FindNextFile(hFind, &ffd )  != 0 && vmdplugin->api == NULL);\n    FindClose(hFind);\n#endif\n\n    if (!ret)\n    {\n        printf(\"\\nCould not open any VMD library.\\n\");\n        err = vmddlerror();\n        if (!err)\n        {\n            printf(\"Compiled with dlopen?\\n\");\n        }\n        else\n        {\n            printf(\"Last error:\\n%s\\n\", err);\n        }\n        return 0;\n    }\n\n    if (vmdplugin->api == nullptr)\n    {\n        printf(\"\\nNo plugin for %s found\\n\", vmdplugin->filetype);\n        return 0;\n    }\n\n    if (vmdplugin->api->abiversion < 10)\n    {\n        printf(\"\\nPlugin and/or VMD is too old. At least VMD 1.8.6 is required.\\n\");\n        return 0;\n    }\n\n    printf(\"\\nUsing VMD plugin: %s (%s)\\n\", vmdplugin->api->name, vmdplugin->api->prettyname);\n\n    return 1;\n\n}\n\nint read_first_vmd_frame(const char *fn, gmx_vmdplugin_t **vmdpluginp, t_trxframe *fr)\n{\n    molfile_timestep_metadata_t *metadata = nullptr;\n    gmx_vmdplugin_t             *vmdplugin;\n\n    snew(vmdplugin, 1);\n    *vmdpluginp = vmdplugin;\n    if (!load_vmd_library(fn, vmdplugin))\n    {\n        return 0;\n    }\n\n    vmdplugin->handle = vmdplugin->api->open_file_read(fn, vmdplugin->filetype, &fr->natoms);\n\n    if (!vmdplugin->handle)\n    {\n        fprintf(stderr, \"\\nError: could not open file '%s' for reading.\\n\",\n                fn);\n        return 0;\n    }\n\n    if (fr->natoms == MOLFILE_NUMATOMS_UNKNOWN)\n    {\n        fprintf(stderr, \"\\nFormat of file %s does not record number of atoms.\\n\", fn);\n        return 0;\n    }\n    else if (fr->natoms == MOLFILE_NUMATOMS_NONE)\n    {\n        fprintf(stderr, \"\\nNo atoms found by VMD plugin in file %s.\\n\", fn );\n        return 0;\n    }\n    else if (fr->natoms < 1)     /*should not be reached*/\n    {\n        fprintf(stderr, \"\\nUnknown number of atoms %d for VMD plugin opening file %s.\\n\",\n                fr->natoms, fn );\n        return 0;\n    }\n\n    snew(fr->x, fr->natoms);\n\n    vmdplugin->bV = 0;\n    if (vmdplugin->api->abiversion > 10 && vmdplugin->api->read_timestep_metadata)\n    {\n        vmdplugin->api->read_timestep_metadata(vmdplugin->handle, metadata);\n        assert(metadata);\n        vmdplugin->bV = metadata->has_velocities;\n        if (vmdplugin->bV)\n        {\n            snew(fr->v, fr->natoms);\n        }\n    }\n    else\n    {\n        fprintf(stderr,\n                \"\\nThis trajectory is being read with a VMD plug-in from before VMD\"\n                \"\\nversion 1.8, or from a trajectory that lacks time step metadata.\"\n                \"\\nEither way, GROMACS cannot tell whether the trajectory has velocities.\\n\");\n    }\n    return 1;\n\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/cmake/TestVMD.c": "#include \"molfile_plugin.h\"\n#include \"vmddlopen.c\"\n#include \"stdio.h\"\n\nstatic int register_cb(void *v, vmdplugin_t *p) {\n    *(molfile_plugin_t**)v = (molfile_plugin_t *)p;\n    return VMDPLUGIN_SUCCESS;\n}\n\ntypedef int (*initfunc)(void);\ntypedef int (*regfunc)(void *, vmdplugin_register_cb);\n\n/*run: gcc TestVMD.c -DGMX_USE_PLUGINS -Wall -ldl src/gmxlib/vmddlopen.c -I src/gmxlib && ./a.out .../xyzplugin.so ; echo $?*/\nint main(int argc, char** argv)\n{\n    void *handle, *ifunc, *registerfunc;\n    molfile_plugin_t* api;\n    if (argc!=2) return -1;\n    handle = vmddlopen(argv[1]);\n    if (!handle)\n    {\n        fprintf(stderr,\"%s\\n\",vmddlerror());\n        return 1;\n    }\n    ifunc = vmddlsym(handle, \"vmdplugin_init\");\n    if (!ifunc || ((initfunc)(ifunc))()) return 2;\n    registerfunc = vmddlsym(handle, \"vmdplugin_register\");\n    if (!registerfunc) return 3;\n    ((regfunc)registerfunc)(&api, register_cb);\n    if (!api) return 4;\n    if (api->abiversion<10) return 5;\n    return 0;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/external/tng_io/example_files/tng_example.tng",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/programs/mdrun/tests/spc2.trr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/fileio/tests/spc2-traj.tng",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/gmxana/tests/spc2-traj.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/gmxana/tests/spc2-traj.tng",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/gmxana/tests/spc2-traj.g96",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/gmxana/tests/spc2-traj.trr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/trajectoryanalysis/tests/clustsize.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/trajectoryanalysis/tests/freevolume.xtc",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/trajectoryanalysis/tests/freevolume.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/energyanalysis/tests/dhdl.edr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/energyanalysis/tests/ener.edr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/energyanalysis/tests/dhdl.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/energyanalysis/tests/orires.tpr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/src/gromacs/energyanalysis/tests/orires.edr",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/gmxsphinx.pyc",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/dev-manual/redmine-states.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/peregrine.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/fp-highres.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/f-bham.eps",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/f-pr.eps",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/f-bond.eps",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/f-dih.eps",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/f-lj.eps",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/equipotential.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/compelsetup.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/rama.eps",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/f-rbs.eps",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/adress.png",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/f-imps.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/gaussians.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/sgangle.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/manual/plots/rotation.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/user-guide/plotje.gif",
        "/tmp/vanessa/spack-stage/spack-stage-gromacs-2018.8-rke4xab2u2ccnovp5qrho7pdo5svdvww/spack-src/docs/user-guide/xvgr.gif"
    ],
    "total_files": 5444
}