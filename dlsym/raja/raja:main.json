{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/src/RuntimePluginLoader.cpp": "//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n// Copyright (c) 2016-20, Lawrence Livermore National Security, LLC\n// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.\n//\n// SPDX-License-Identifier: (BSD-3-Clause)\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n\n#include \"RAJA/util/RuntimePluginLoader.hpp\"\n\n#ifndef _WIN32\n#include <dlfcn.h>\n#include <dirent.h>\n#endif\n\nRAJA_INLINE\nbool\nisSharedObject(const std::string& filename)\n{\n  return (filename.size() > 3 && !filename.compare(filename.size() - 3, 3, \".so\"));\n}\n\nnamespace RAJA {\nnamespace util {\n  \nRuntimePluginLoader::RuntimePluginLoader()\n{\n  char *env = ::getenv(\"RAJA_PLUGINS\");\n  if (nullptr == env)\n  {\n    return;\n  }\n  initDirectory(std::string(env));\n}\n\nvoid RuntimePluginLoader::init(const RAJA::util::PluginOptions& p)\n{\n  initDirectory(p.str);\n  for (auto &plugin : plugins)\n  {\n    plugin->init(p);\n  }\n}\n\nvoid RuntimePluginLoader::preCapture(const RAJA::util::PluginContext& p)\n{\n  for (auto &plugin : plugins)\n  {\n    plugin->preCapture(p);\n  }\n}\n\nvoid RuntimePluginLoader::postCapture(const RAJA::util::PluginContext& p)\n{\n  for (auto &plugin : plugins)\n  {\n    plugin->postCapture(p);\n  }\n}\n\nvoid RuntimePluginLoader::preLaunch(const RAJA::util::PluginContext& p)\n{\n  for (auto &plugin : plugins)\n  {\n    plugin->preLaunch(p);\n  }\n}\n\nvoid RuntimePluginLoader::postLaunch(const RAJA::util::PluginContext& p)\n{\n  for (auto &plugin : plugins)\n  {\n    plugin->postLaunch(p);\n  }\n}\n\nvoid RuntimePluginLoader::finalize()\n{\n  for (auto &plugin : plugins)\n  {\n    plugin->finalize();\n  }\n  plugins.clear();\n}\n\n// Initialize plugin from a shared object file specified by 'path'.\nvoid RuntimePluginLoader::initPlugin(const std::string &path)\n{\n  #ifndef _WIN32\n  void *plugin = dlopen(path.c_str(), RTLD_NOW | RTLD_GLOBAL);\n  if (!plugin)\n  {\n    printf(\"[RuntimePluginLoader]: dlopen failed: %s\\n\", dlerror());\n  }\n\n  RuntimePluginLoader::Parent *(*getPlugin)() = (RuntimePluginLoader::Parent * (*)()) dlsym(plugin, \"getPlugin\");\n\n  if (getPlugin)\n  {\n    plugins.push_back(std::unique_ptr<RuntimePluginLoader::Parent>(getPlugin()));\n  }\n  else\n  {\n    printf(\"[RuntimePluginLoader]: dlsym failed: %s\\n\", dlerror());\n  }\n  #else\n  RAJA_UNUSED_ARG(path);\n  #endif\n}\n\n// Initialize all plugins in a directory specified by 'path'.\nvoid RuntimePluginLoader::initDirectory(const std::string &path)\n{\n  #ifndef _WIN32\n  if (isSharedObject(path))\n  {\n    initPlugin(path);\n    return;\n  }\n  \n  DIR *dir;\n  struct dirent *file;\n\n  if ((dir = opendir(path.c_str())) != NULL)\n  {\n    while ((file = readdir(dir)) != NULL)\n    {\n      if (isSharedObject(std::string(file->d_name)))\n      {\n        initPlugin(path + \"/\" + file->d_name);\n      }\n    }\n    closedir(dir);\n  }\n  else\n  {\n    perror(\"[RuntimePluginLoader]: Could not open plugin directory\");\n  }\n  #else\n  RAJA_UNUSED_ARG(path);\n  #endif\n}\n\nvoid linkRuntimePluginLoader() {}\n\n} // end namespace util\n} // end namespace RAJA\n\nstatic RAJA::util::PluginRegistry::add<RAJA::util::RuntimePluginLoader> P(\"RuntimePluginLoader\", \"Dynamically load RAJA plugins.\");\n",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/src/KokkosPluginLoader.cpp": "//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n// Copyright (c) 2016-20, Lawrence Livermore National Security, LLC\n// and RAJA project contributors. See the RAJA/COPYRIGHT file for details.\n//\n// SPDX-License-Identifier: (BSD-3-Clause)\n//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~//\n\n#include \"RAJA/util/KokkosPluginLoader.hpp\"\n\n#ifndef _WIN32\n#include <dlfcn.h>\n#include <dirent.h>\n#endif\n\nconst uint64_t kokkos_interface_version = 20171029;\n\nRAJA_INLINE\nbool\nisSharedObject(const std::string& filename)\n{\n  return (filename.size() > 3 && !filename.compare(filename.size() - 3, 3, \".so\"));\n}\n\ntemplate<typename function>\nRAJA_INLINE\nvoid\ngetFunction(void* plugin, std::vector<function>& functions, const char* fname)\n{\n  #ifndef _WIN32\n  function func = (function) dlsym(plugin, fname);\n  if (func)\n    functions.push_back(func);\n  else\n    printf(\"[KokkosPluginLoader]: dlsym failed: %s\\n\", dlerror());\n  #else\n  RAJA_UNUSED_ARG(plugin);\n  RAJA_UNUSED_ARG(functions);\n  RAJA_UNUSED_ARG(fname);\n  #endif\n}\n\nnamespace RAJA {\nnamespace util {\n\nKokkosPluginLoader::KokkosPluginLoader()\n{\n  char *env = getenv(\"KOKKOS_PLUGINS\");\n  if (env == nullptr)\n  {\n    return;\n  }\n  initDirectory(std::string(env));\n\n  for (auto &func : init_functions)\n  {\n    func(0, kokkos_interface_version, 0, nullptr);\n  }\n}\n\nvoid KokkosPluginLoader::preLaunch(const RAJA::util::PluginContext& p)\n{\n  for (auto &func : pre_functions)\n  {\n    func(\"\", 0, &(p.kID));\n  }\n}\n\nvoid KokkosPluginLoader::postLaunch(const RAJA::util::PluginContext& p)\n{\n  for (auto &func : post_functions)\n  {\n    func(p.kID);\n  }\n}\n\nvoid KokkosPluginLoader::finalize()\n{\n  for (auto &func : finalize_functions)\n  {\n    func();\n  }\n  init_functions.clear();\n  pre_functions.clear();\n  post_functions.clear();\n  finalize_functions.clear();\n}\n\n// Initialize plugin from a shared object file specified by 'path'.\nvoid KokkosPluginLoader::initPlugin(const std::string &path)\n{\n  #ifndef _WIN32\n  void *plugin = dlopen(path.c_str(), RTLD_NOW | RTLD_GLOBAL);\n  if (!plugin)\n  {\n    printf(\"[KokkosPluginLoader]: dlopen failed: %s\\n\", dlerror());\n  }\n\n  // Getting and storing supported kokkos functions.\n  getFunction<init_function>(plugin, init_functions, \"kokkosp_init_library\");\n\n  getFunction<pre_function>(plugin, pre_functions, \"kokkosp_begin_parallel_for\");\n\n  getFunction<post_function>(plugin, post_functions, \"kokkosp_end_parallel_for\");\n\n  getFunction<finalize_function>(plugin, finalize_functions, \"kokkosp_finalize_library\");\n  #else\n  RAJA_UNUSED_ARG(path);\n  #endif\n}\n\n// Initialize all plugins in a directory specified by 'path'.\nvoid KokkosPluginLoader::initDirectory(const std::string &path)\n{\n  #ifndef _WIN32\n  if (isSharedObject(path))\n  {\n    initPlugin(path);\n    return;\n  }\n  \n  DIR *dir;\n  struct dirent *file;\n\n  if ((dir = opendir(path.c_str())) != NULL)\n  {\n    while ((file = readdir(dir)) != NULL)\n    {\n      if (isSharedObject(std::string(file->d_name)))\n      {\n        initPlugin(path + \"/\" + file->d_name);\n      }\n    }\n    closedir(dir);\n  }\n  else\n  {\n    perror(\"[KokkosPluginLoader]: Could not open plugin directory\");\n  }\n  #else\n  RAJA_UNUSED_ARG(path);\n  #endif\n}\n\nvoid linkKokkosPluginLoader() {}\n\n} // end namespace util\n} // end namespace RAJA\n\nstatic RAJA::util::PluginRegistry::add<RAJA::util::KokkosPluginLoader> P(\"KokkosPluginLoader\", \"Dynamically load plugins ported from the Kokkos library.\");\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/travis-data/intel2016.lic.enc",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/objects/pack/pack-192e7191b8864c041b90557a692db58e2a863629.pack",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/objects/pack/pack-192e7191b8864c041b90557a692db58e2a863629.idx",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/include/cub/objects/pack/pack-3ac5e2e591c39299801d2ef4618c096835659f0c.pack",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/include/cub/objects/pack/pack-3ac5e2e591c39299801d2ef4618c096835659f0c.idx",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/include/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.idx",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/include/camp/objects/pack/pack-6d6548339e72842ddaaa411a175ca8156eac6bed.pack",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/include/camp/modules/extern/googletest/objects/pack/pack-d1af96735a91529d331daee0a9c9ee8c31f6d2da.idx",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/include/camp/modules/extern/googletest/objects/pack/pack-d1af96735a91529d331daee0a9c9ee8c31f6d2da.pack",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/blt/objects/pack/pack-420824c9ca60a4710e8eecce3dd252a83507d396.idx",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/blt/objects/pack/pack-420824c9ca60a4710e8eecce3dd252a83507d396.pack",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/tpl/rocPRIM/objects/pack/pack-6b35e2eeda9cabed87c729fc199a7262e799588a.pack",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/.git/modules/tpl/rocPRIM/objects/pack/pack-6b35e2eeda9cabed87c729fc199a7262e799588a.idx",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/share/raja/logo/RAJA_LOGO_Color.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/blt/share/blt/logo/blt_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/RangeSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/RangeStrideSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/IndexSet.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/gsboard.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/vertexsum.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/jacobi.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/ListSegment.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/redblackGS.png",
        "/tmp/vanessa/spack-stage/spack-stage-raja-main-gyyvue6wbvkzoj6gh2kf35ejzhaobjsj/spack-src/docs/sphinx/user_guide/figures/index_set_fig.png"
    ],
    "total_files": 2069
}