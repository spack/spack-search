{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-xorg-cf-files-1.0.6-p5ls3mwtg6a7p6ysmdtc7smphutacxsb/spack-src/NetBSD.cf": "XCOMM platform:  $Xorg: NetBSD.cf,v 1.3 2000/08/17 19:41:46 cpqbld Exp $\n\n\n\nXCOMM platform:  $XFree86: xc/config/cf/NetBSD.cf,v 3.122 2003/11/18 18:09:45 dawes Exp $\n\n\n#ifndef OSName\n#define OSName\t\t\tDefaultOSName OSBinaryType\n#endif\n#ifndef OSMajorVersion\n#define OSMajorVersion\t\tDefaultOSMajorVersion\n#endif\n#ifndef OSMinorVersion\n#define OSMinorVersion\t\tDefaultOSMinorVersion\n#endif\n#ifndef OSTeenyVersion\n#define OSTeenyVersion\t\tDefaultOSTeenyVersion\n#endif\n\n\n#ifndef OSVendor\n#define\tOSVendor\t\tThe NetBSD Foundation, Inc.\n#endif\nXCOMM operating system:  OSName (OSMajorVersion./**/OSMinorVersion./**/OSTeenyVersion)\n\n/*\n * C library features\n */\n#if ((OSMajorVersion > 1) || \\\n     (OSMajorVersion == 1 && OSMinorVersion > 2) || \\\n     (OSMajorVersion == 1 && OSMinorVersion == 2 && OSTeenyVersion > 1))\n# define HasPoll\t\t\tYES\n#endif\n#define HasNdbm         \tYES\n#define HasPutenv       \tYES\n#if OSMajorVersion == 1 && OSMinorVersion > 4 || OSMajorVersion > 1\n# define HasStrlcat\t\tYES\n#endif\n#define HasSnprintf\t\tYES\n#define HasBSD44Sockets \tYES\n#define Malloc0ReturnsNull\tNO\n#define SetTtyGroup     \tYES\n#define DBMLibrary\t\t/**/\n#define HasDlopen\t\tYES\n#define HasSetProcTitle\t\tYES\n#ifndef HasLibCrypt\n# define HasLibCrypt\t\tYES\n#endif\n#ifndef BuildPDFdocs\n# define BuildPDFdocs NO\n#endif\n#ifndef HasShm\n# if OSMajorVersion == 0 && OSMinorVersion == 9 && OSTeenyVersion == 2\n/*\n * Shm memory was removed in 0.9B because it was encumbered.\n * A free version was added in 0.9C\n */\n#  define HasShm          \tNO\n# else\n#  define HasShm          \tYES\n# endif\n#endif\n#define HasWChar32\t\tYES\n/*\n * There's a bug in NetBSD 1.0, 1.1 and 1.2 dlsym()\n */\n#if ((OSMajorVersion == 1 && OSMinorVersion < 2) || \\\n     (OSMajorVersion == 1 && OSMinorVersion == 2 && OSTeenyVersion < 2))\n#  define HasDlsymBug\t\tYES\n#endif\n/* Mkstemp is there since 1.2 (at least) */\n#if (!(OSMajorVersion == 0 || \\\n       (OSMajorVersion == 1 && OSMinorVersion < 2)))\n#define HasMkstemp\t\tYES\n#endif\n/* But the standalone mktemp doesn't exist before NetBSD 1.5*/\n#if (OSMajorVersion ==0 || (OSMajorVersion == 1 && OSMinorVersion <= 4))\n# define HasMktemp\t\tNO\n#else\n# define HasMktemp\t\tYES\n#endif\n\n#ifndef HasIssetugid\n# if (OSMajorVersion > 1 || (OSMajorVersion == 1 && OSMinorVersion >= 5))\n#  define HasIssetugid          YES\n# endif\n#endif\n\n#if (OSMajorVersion == 1 && OSMinorVersion >= 5 || OSMajorVersion > 1)\n#define HasGetIfAddrs\t\tYES\n#endif\n\n#define HasUsableFileMmap\tYES\n\n#define HasVarRun\t\tYES\n#define HasVarDb\t\tYES\n\n#define HasShadowPasswd\t\tNO\n\n#define InstallXloadSetGID\tNO\n\n#if OSMajorVersion < 1 || (OSMajorVersion == 1 && OSMinorVersion < 5)\n#define BuildIPv6\t\tNO\n#endif\n\n#define IPv6SocketsAlsoIPv4\tNO\n\n/*\n * NetBSD 1.6M and newer supports POSIX Threads.\n */\n\n#ifndef NetBSDThreads\n# define NetBSDThreads\t\tYES\n#endif\n\n#if NetBSDThreads && \\\n    ((OSMajorVersion > 1) || \\\n     (OSMajorVersion == 1 && OSMinorVersion > 6) || \\\n     (OSMajorVersion == 1 && OSMinorVersion == 6 && OSTeenyVersion >= 13))\n\n# define HasPosixThreads\tYES\n# define ThreadedX\t\tYES\n# define HasThreadSafeAPI\tYES\n# define ThreadsLibraries\t-lpthread\n# if ((OSMajorVersion == 2 && OSMinorVersion == 99 && OSTeenyVersion < 11) || \\\n      (OSMajorVersion == 2 && OSMinorVersion < 99) || \\\n      (OSMajorVersion < 2))\n#  define LibraryMTDefines\t-DUSE_NBSD_THREADLIB\n# endif\n# define SystemMTDefines\t-D_REENTRANT\n# define MTSafeAPIDefines\t-DXUSE_MTSAFE_API -DXNO_MTSAFE_PWDAPI\n#else\n# define ThreadedX\t\tNO\n#endif\n\n/*\n * Compiler Features\n */\n#define GccUsesGas\t\tYES\n#define UseGas\t\t\tYES\n#define GnuCpp\t\t\tYES\n\n#define NeedConstPrototypes\tYES\n#define NeedFunctionPrototypes\tYES\n#define NeedNestedPrototypes\tYES\n#define NeedVarargsPrototypes\tYES\n#define NeedWidePrototypes\tNO\n\n#define MkdirHierCmd\t\tmkdir -p\n\n#undef CcCmd\n#define CcCmd \t\t\tgcc\n#ifndef DefaultCCOptions\n#if defined(UseInstalled)\n#define DefaultCCOptions \t/**/\n#else\n#ifdef Arm32Architecture\n#define DefaultCCOptions \t-ansi -Dasm=__asm -fsigned-char \\\n\t\t\t\t-fomit-frame-pointer\n#elif defined(PpcArchitecture)\n# define DefaultCCOptions\t-ansi -Dasm=__asm -fsigned-char\n#else\n#define DefaultCCOptions \t-ansi -Dasm=__asm GccWarningOptions\n#endif\n#endif\n#endif\n\n#define CppCmd\t\t\tcpp\n#define StandardCppOptions\t-traditional\n#define StandardCppDefines\t/**/\n#define PreProcessCmd   \tCcCmd -E\n#define PostIncDir\t\t/usr/include\n\n#define GccGasOption \t\t-DGCCUSESGAS\n#define AsmDefines \t\t-DUSE_GAS\n\n/* UseElfFormat defaults to YES if __ELF__ set */\n#ifndef UseElfFormat\n# ifdef __ELF__\n#  undef __ELF__\t\t\t/* other imake files shouldn't care */\n#  define UseElfFormat YES\n# else\n#  define UseElfFormat NO\n# endif\n#endif\n\n/*\n * Dynamic loading supported starting in 1.0 on a.out platforms,\n * and on all ELF platforms.\n *\n * XXX May not be correct on NetBSD/pmax (ELF, but might not have\n * working shared libs).\n *\n * Disabled for NetBSD/vax until I figure out the scheme. --CS\n */\n#if ((OSMajorVersion > 0) && defined(i386Architecture)) || \\\n    defined(PpcArchitecture) || defined(AMD64Architecture)\n#  ifndef DoLoadableServer\n#  define DoLoadableServer\tYES\n#  endif\n#else\n#  ifndef DoLoadableServer\n#  define DoLoadableServer\tNO\n#  endif\n#endif\n\n#if UseElfFormat\n#define DlLibrary\t\t-rdynamic /* no -ldl yet */\n#else\n#define DlLibrary\t\t/**/\n#endif\n\n/* All ELF NetBSD systems support Weak symbols */\n#define HasWeakSymbols\t\tUseElfFormat\n\n#ifdef i386Architecture\n# ifndef DefaultGcc2i386Opt\n#  if OSMajorVersion > 1 || (OSMajorVersion == 1 && OSMinorVersion > 2)\n    /* The GCC strength-reduce bug is fixed for NetBSD 1.3 and later */\n#   define DefaultGcc2i386Opt -O2 GccAliasingArgs\n#  endif\n# endif\n# define OptimizedCDebugFlags \tDefaultGcc2i386Opt\n# if OSMajorVersion < 1\n#  define ServerOSDefines\tXFree86ServerOSDefines -DXNO_SYSCONF\n# else\n#  define ServerOSDefines\tXFree86ServerOSDefines\n# endif\n# if OSMajorVersion == 1 && OSMinorVersion >= 1 || OSMajorVersion >= 2\n#  define ServerExtraSysLibs\t-li386\n# endif\n#else\n# define OptimizedCDebugFlags \t-O2 GccAliasingArgs\n# if defined(SparcArchitecture)\n#  define ServerOSDefines \t-DDDXOSINIT\n# elif defined(AlphaArchitecture)\n#  define ServerOSDefines \tXFree86ServerOSDefines\n# elif defined(Arm32Architecture)\n#   define ServerOSDefines\tXFree86ServerOSDefines -DDDXTIME\n# elif defined(PpcArchitecture)\n#  define ServerOSDefines\tXFree86ServerOSDefines -DDDXTIME -DDDXOSINIT\n# else\n#  define ServerOSDefines \t/**/\n# endif\n# if defined(AlphaArchitecture)\n#  define ServerExtraSysLibs\t-lalpha\n# else\n#  define ServerExtraSysLibs\t/**/\n# endif\n#endif\n#ifdef i386Architecture\n# define ServerExtraDefines GccGasOption XFree86ServerDefines\n# ifndef XFree86ConsoleDefines\n#  if (OSMajorVersion == 1 && ((OSMinorVersion == 3 && OSTeenyVersion >= 6) \\\n\t                       || OSMinorVersion >= 4) \\\n       || OSMajorVersion >= 2)\n#   define XFree86ConsoleDefines -DPCCONS_SUPPORT -DPCVT_SUPPORT -DWSCONS_SUPPORT\n#  else\n#   define XFree86ConsoleDefines -DPCCONS_SUPPORT -DPCVT_SUPPORT\n#  endif\n# endif\n#elif defined(SparcArchitecture)\n#  if defined(Sparc64Architecture)\n#   define ServerExtraDefines XFree86ServerDefines -D_XSERVER64\n#  else\n#   define ServerExtraDefines XFree86ServerDefines\n#  endif\n# elif defined(AlphaArchitecture)\n\t/* XXX for the following */\n#  define ServerExtraDefines GccGasOption XFree86ServerDefines -D_XSERVER64\n#  ifndef XFree86ConsoleDefines\n#   define XFree86ConsoleDefines -DWSCONS_SUPPORT -DPCCONS_SUPPORT -DPCVT_SUPPORT\n#  endif\n#elif defined(AlphaArchitecture)\n#   define ServerExtraDefines GccGasOption -D_XSERVER64\n#elif defined(Arm32Architecture)\n#  define ServerExtraDefines GccGasOption XFree86ServerDefines\n#  ifndef XFree86ConsoleDefines\n#    define XFree86ConsoleDefines -DPCCONS_SUPPORT\n#  endif\n#elif defined(PpcArchitecture)\n#  define ServerExtraDefines\tGccGasOption XFree86ServerDefines\n#  ifndef XFree86ConsoleDefines\n#    define XFree86ConsoleDefines\t-DWSCONS_SUPPORT\n#  endif\n#elif defined(ia64Architecture) || defined(AMD64Architecture)\n#define ServerExtraDefines GccGasOption XFree86ServerDefines -D_XSERVER64\n#else\n#  define ServerExtraDefines GccGasOption\n#endif\n\n#define StandardDefines\t-DCSRG_BASED\n/* Citrus mb locale were added in 1.5P */\n#if ((OSMajorVersion > 1) || \\\n     (OSMajorVersion == 1 && OSMinorVersion > 5) || \\\n     (OSMajorVersion == 1 && OSMinorVersion == 5 && OSTeenyVersion >= 15))\n#define XawI18nDefines\t-DHAS_WCHAR_H -DHAS_WCTYPE_H -DNO_WIDEC_H\n#else\n#define XawI18nDefines\t-DUSE_XWCHAR_STRING -DUSE_XMBTOWC\n#endif\n\n#ifndef ExtraLibraries\n#define ExtraLibraries\t\t/**/\n#endif\n#ifndef UseGnuMalloc\n/*\n * There is no way to map 1.4J correctly to OS*Version, so 'J' is mapped\n * to OSTeenyVersion == 9. That should be safe, since there will never\n * be a release for 1.4.9.\n */\n# if ((OSMajorVersion > 1) || \\\n     (OSMajorVersion == 1 && OSMinorVersion > 4) || \\\n     (OSMajorVersion == 1 && OSMinorVersion == 4 && OSTeenyVersion > 9))\n#  define UseGnuMalloc\t\tNO\n# else\n#  define UseGnuMalloc\t\tYES\n#endif\n#endif\n#ifndef GnuMallocLibrary\n#define GnuMallocLibrary\t-lgnumalloc\n#endif\n\n#if ((OSMajorVersion > 1) || \\\n     (OSMajorVersion == 1 && OSMinorVersion > 2) || \\\n     (OSMajorVersion == 1 && OSMinorVersion == 2 && OSTeenyVersion > 1))\n#ifndef HasZlib\n#define HasZlib\t\t\t  YES\n#endif\n#endif\n\n#define\tAdmDir\t\t\t/var/log\n\n#define HasFlex\t\t\tYES\n\n/* NetBSD doesn't have gperf in the base install */\n#define DontRebuildGperfOutput\tYES\n\n/*\n * NetBSD doesn't have perl in default system\n * you may override this in host.def if you installed perl from the packages\n */\n#ifndef HasPerl\n#define HasPerl\t\t\tNO\n#endif\n\n/*\n * NetBSD doesn't have gperf in default system\n * you may override this in host.def if you installed perl from the packages\n */\n#ifndef HasGperf\n#define HasGperf\t\tNO\n#endif\n\n/*\n * Make & install Features\n */\n#define HasBsdMake\t\tYES\n#define CompressAllFonts\tYES\n#define GzipFontCompression\tYES\n#define DefaultUserPath\t\t/bin:/usr/bin:/usr/pkg/bin:/usr/local/bin:$(BINDIR)\n#define DefaultSystemPath\t/sbin:/usr/sbin:/bin:/usr/bin:$(BINDIR)\n\n#ifdef  InstallCmd\n# undef  InstallCmd\n# define InstallCmd \t\t/usr/bin/install\n#endif\n\n#ifndef ExtraFilesToClean\n# define ExtraFilesToClean \t*.core\n#endif\n\n/*\n * Documentation formatting\n */\n#define NeqnCmd\t\t\tneqn -Tlatin1\n#define NroffCmd\t\tnroff -Tlatin1\n#define\tEqnCmd \t\t\teqn -Tps\n#define HasGroff\t\tYES\n\n/*\n * To use the NetBSD Aperture driver\n */\n#if defined(i386Architecture)\n# ifndef HasNetBSDApertureDriver\n#  define HasNetBSDApertureDriver\tYES\n# endif\n\n/*\n * Builtin MTRR support (NetBSD 1.5Y and up)\n */\n# if ((OSMajorVersion > 1) || \\\n      (OSMajorVersion == 1 && OSMinorVersion >= 6) || \\\n      (OSMajorVersion == 1 && OSMinorVersion == 5 && \\\n       OSTeenyVersion >= 25))\n#  define HasMTRRBuiltin        YES\n# else\n /*\n  * MTRR support  provided by the Aperture driver\n  */\n#  if HasNetBSDApertureDriver\n#   ifndef HasMTRRSupport\n#    define HasMTRRSupport\tYES\n#   endif\n#  endif\n# endif /* MTRRBuiltin */\n#endif /* i386Architecture */\n\n#if defined(AMD64Architecture)\n# define HasMTRRBuiltin\t\tYES\n#endif\n\n/*\n * agpgart support (NetBSD 1.5Y and up)\n */\n#if ((OSMajorVersion > 1) || \\\n     (OSMajorVersion == 1 && OSMinorVersion >= 6) || \\\n     (OSMajorVersion == 1 && OSMinorVersion == 5 && \\\n      OSTeenyVersion >= 25))\n# ifndef HasAgpGart\n#  define HasAgpGart   YES\n# endif\n#endif\n\n/*\n * MMX, SSE and 3DNow will be autodetected. NetBSD 1.6 and up have the\n * necessary kernel and toolchain support.\n */\n#if defined(i386Architecture) &&  \\\n\t((OSMajorVersion > 1) || (OSMajorVersion == 1 && OSMinorVersion > 5))\n# define HasX86Support          YES\n# define HasMMXSupport          YES\n# define Has3DNowSupport        YES\n# define HasSSESupport          YES\n#else\n# define HasX86Support          NO\n# define HasMMXSupport          NO\n# define Has3DNowSupport        NO\n# define HasSSESupport          NO\n#endif\n\n#ifndef HasCookieMaker\n# if OSMajorVersion == 1 && OSMinorVersion >= 5 || OSMajorVersion >= 2\n   /* NetBSD 1.5 and later have /dev/urandom */\n#  define HasCookieMaker\tYES\n#  define MkCookieCmd \\\n\t'dd if=/dev/urandom bs=16 count=1 2>/dev/null | hexdump -e \\\\\"%08x\\\\\"'\n# else\n#  define HasCookieMaker\tNO\n# endif\n#endif\n\n\n/*\n * ForceSubdirs - force make to build subdirectories\n *\n * For BSD 4.4 make\n */\n#define ForceSubdirs(dirs)\t\t\t\t\t\t@@\\\ndirs:\t.EXEC\t\t\t\t\t\t\t\t@@\\\n\t@cd $@ ; echo \"making all in $(CURRENT_DIR)/$@...\"; \\\t\t@@\\\n\t$(MAKE) $(MFLAGS) PassCDebugFlags all\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\n.EXEC:\n\n/*\n * Man pages need to be formatted when installed, so override the default\n * imake rules.\n */\n#define ManSuffix\t1\n#define FileManSuffix\t5\n#define ManSourcePath\t$(MANPATH)/cat\n\n#define InstallManPageLongBase(file,destdir,dest)\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nall:: file.0\t\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nfile.0:: file.$(MANNEWSUFFIX)\t\t\t\t\t\t@@\\\n\t@if [ -f file.$(MANNEWSUFFIX) ]; \\\t\t\t\t@@\\\n\tthen \\\t\t\t\t\t\t\t\t@@\\\n\tcat file.$(MANNEWSUFFIX) | $(NEQN) | $(TBL) | $(NROFF) $(MANMACROS) | $(COL) > file.0; \\\t@@\\\n\tfi \t\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\ninstall.man::                                                           @@\\\n\tMakeDir($(DESTDIR)destdir)\t\t\t\t\t@@\\\n\t-@if [ -f file.0 ]; \\\t\t\t\t\t\t@@\\\n\tthen \\\t\t\t\t\t\t\t\t@@\\\n\t$(INSTALL) -c $(INSTMANFLAGS) file.0 $(DESTDIR)destdir/dest.0; \\@@\\\n\tfi\t\t\t\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nclean::\t\t\t\t\t\t\t\t\t@@\\\n\tRemoveFile(file.0)\n\n#define InstallManPageLong(file,destdir,dest)\t\t\t\t@@\\\nBuildInstallHtmlManPage(file,dest,$(MANSUFFIX))\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nCppManTarget(file, $(EXTRAMANDEFS))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nInstallManPageLongBase(file,destdir,dest)\n\n#define InstallGenManPageLong(file,destdir,dest,suffix)\t\t\t@@\\\nBuildInstallHtmlManPage(file,dest,suffix)\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nCppManTarget(file, $(EXTRAMANDEFS))\t\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nInstallManPageLongBase(file,destdir,dest)\n\n#define InstallMultipleMan(list,dest)                                   @@\\\ninstall.man:: \t\t\t\t\t\t\t\t@@\\\n\tMakeDir($(DESTDIR)dest)\t\t\t\t\t\t@@\\\n\tcase '${MFLAGS}' in *[i]*) set +e;; esac; \\\t\t\t@@\\\n\tfor i in list; do \\                                             @@\\\n\t  (MNAME=`echo $$i | cut -f1 -d.`; \\\t\t\t\t@@\\\n\t  set -x; \\\t\t\t\t\t\t\t@@\\\n\t  cat $$i | $(NEQN) | $(TBL) | $(NROFF) $(MANMACROS) \\\t\t@@\\\n\t\t| $(COL) > $${MNAME}.0; \\\t\t\t\t@@\\\n\t  $(INSTALL) -c $(INSTMANFLAGS) $${MNAME}.0 \\\t\t\t@@\\\n\t\t\t$(DESTDIR)dest/$${MNAME}.0; \\\t\t\t@@\\\n\t  $(RM) $${MNAME}.0); \\\t\t\t\t\t\t@@\\\n\tdone\n\n#define InstallMultipleManSuffix(list,dest,suff)                        @@\\\ninstall.man:: \t\t\t\t\t\t\t\t@@\\\n\tMakeDir($(DESTDIR)dest)\t\t\t\t\t\t@@\\\n\tcase '${MFLAGS}' in *[i]*) set +e;; esac; \\\t\t\t@@\\\n\tfor i in list; do \\                                             @@\\\n\t  (set -x; \\\t\t\t\t\t\t\t@@\\\n\t  cat $$i.suff | $(NEQN) | $(TBL) | $(NROFF) $(MANMACROS) \\\t@@\\\n\t\t| $(COL) > $$i.0; \\\t\t\t\t\t@@\\\n\t  $(INSTALL) -c $(INSTMANFLAGS) $$i.0\t \\\t\t\t@@\\\n\t\t$(DESTDIR)dest/$$i.0; \\\t\t\t\t\t@@\\\n\t  $(RM) $$i.0 ); \\\t\t\t\t\t\t@@\\\n\tdone\n\n#define InstallManPageAliasesBase(file,destdir,aliases)\t\t\t@@\\\ninstall.man:: \t\t\t\t\t\t\t\t@@\\\n\t@case '${MFLAGS}' in *[i]*) set +e;; esac; \\                    @@\\\n\tfor i in aliases; do \\                                          @@\\\n\t\t(set -x; \\\t\t\t\t\t\t@@\\\n\t\t$(RM) $(DESTDIR)destdir/$$i.0;\\  \t\t\t@@\\\n\t\t(cd $(DESTDIR)/destdir; $(LN) file.0 $$i.0);\\ \t\t@@\\\n\t\t); \\\t\t\t\t\t\t\t@@\\\n\tdone\n\n#define InstallManPageAliases(file,destdir,aliases)\t\t\t@@\\\nInstallHtmlManPageAliases(file,aliases,$(MANSUFFIX))\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nInstallManPageAliasesBase(file,destdir,aliases)\n\n#define InstallGenManPageAliases(file,destdir,suffix,aliases)\t\t@@\\\nInstallHtmlManPageAliases(file,aliases,suffix)\t\t\t\t@@\\\n\t\t\t\t\t\t\t\t\t@@\\\nInstallManPageAliasesBase(file,destdir,aliases)\n\n/*\n * Shared libraries supported starting in 1.0 on a.out platforms,\n * and on all ELF platforms.\n *\n * XXX May not be correct on NetBSD/pmax (ELF, but might not have\n * working shared libs).\n */\n#if ((OSMajorVersion > 0) && \\\n     !defined(AlphaArchitecture) && !defined(MipsArchitecture)) || \\\n    UseElfFormat\n# ifndef HasSharedLibraries\n# define HasSharedLibraries\tYES\n# endif\n#endif\n\n#ifndef OSBinaryType\n#if UseElfFormat\n#define OSBinaryType\t[ELF]\n#else\n#define OSBinaryType\t/**/\n#endif\n#endif\n\n#ifndef HasSharedLibraries\n#define HasSharedLibraries\tNO\n#endif\n\n/*\n * Unresolved references are fatal on NetBSD 1.5 for libGL, which is\n * built with -Bsymbolic.\n */\n#if UseElfFormat && OSMajorVersion == 1 && OSMinorVersion == 5\n#define SharedGLReqs\t\t$(LDPRELIBS) $(XLIB) -lc\n#endif\n\n#if HasSharedLibraries\n#include <bsdLib.rules>\n#endif /* HasSharedLibraries */\n\n/* Always build the XInput library, regardless of server support on this plattform */\n#if !defined(BuildXInputLib) && !defined(BuildServersOnly)\n# define BuildXInputLib          YES\n#endif\n\n/*\n * Definitions for the SUN server on NetBSD/sparc\n */\n#ifdef SparcArchitecture\n#ifndef Xsun24Server\n#define Xsun24Server\tYES\n#endif\n#ifndef XsunServer\n#define XsunServer\tYES\n#endif\n#ifndef XsunMonoServer\n#define XsunMonoServer\tNO\t/* XXX: does not link */\n#endif\n#ifndef BuildScreenSaverLibrary\n#define BuildScreenSaverLibrary\tYES\n#endif\n\n/*\n * XFree86 uses its own (more portable) database routines to speed up\n * the RGB database lookups\n * However, if you want to use ndbm anyway, you can set that to NO in\n * site.def\n */\n#ifndef UseRgbTxt\n#define UseRgbTxt\tYES\n#endif\n#define BuildXF86VidModeExt\tNO\n#define BuildXF86DGA\t\tNO\n#define BuildXInputExt\t\tNO\n#endif\n\n/*\n * Definition for compiling on MIPS machines\n */\n#ifdef MipsArchitecture\n#define PositionIndependentCFlags\n#define SharedLibraryLoadFlags -x -shared --whole-archive -soname `echo $@ |\nsed 's/\\.[0-9]*$$//'`\n#define SharedXtReqs $(XONLYLIB) $(SMLIB) $(ICELIB)\n#define SharedXmuReqs $(LDPRELIB) $(XTOOLONLYLIB) $(XLIB)\n#endif\n\n/*\n * Definition for compiling on Alpha machines\n */\n#ifdef AlphaArchitecture\n\n/* Build the shared XDM greeter on Alpha if it supports shared libs */\n#define SharedLibXdmGreet HasSharedLibraries\n#endif\n\n/*\n * Definition for compile on macppc machines\n */\n#ifdef PpcArchitecture\n\n# define OptimizedCDebugFlags \t-O2 GccAliasingArgs\n# define XkbServerDefines\t-DXKB_ALWAYS_USES_SOFT_REPEAT\n\n# ifndef DoLoadableServer\n#   define DoLoadableServer\tYES\n# endif\n\n# define UseElfFormat\t\tYES\n\n#endif\n\n/*\n * Definition for compiling on VAX machines\n */\n#ifdef VaxArchitecture\n#define BuildServer\tNO\n#endif\n\n/*\n * General settings for all platforms\n */\n#ifndef SharedLibXdmGreet\n#define SharedLibXdmGreet NO\n#endif\n\n#ifndef BuildHtmlManPages\n#define BuildHtmlManPages NO\t/* We don't want HTML manpages */\n#endif\n\n#ifndef UseSeparateConfDir\n#define UseSeparateConfDir NO\t/* We don't want appdefs in \"/etc/X11\". */\n#endif\n\n#if defined(NetBSDArchitecture) && \\\n     ((OSMajorVersion > 1) || \\\n      (OSMajorVersion == 1 && OSMinorVersion > 3))\n#define HasDevRandom\t\tYES\n#define RandomDeviceFile\t/dev/urandom\n#endif\n\n/*\n * Always include xorg.cf for GccAliasingArgs,\n * regardless of server support on this plattform\n */\n#include <xorg.cf>\n"
    },
    "skipped": [],
    "total_files": 126
}