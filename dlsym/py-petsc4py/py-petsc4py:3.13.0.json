{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-py-petsc4py-3.13.0-4bq25alrm67celubxarsk53h2wffrhlq/spack-src/src/include/compat/mpi.h": "#ifndef PETSC4PY_COMPAT_MPI_H\n#define PETSC4PY_COMPAT_MPI_H\n\n#if defined(OPEN_MPI)\n\n/*\n * The hackery below redefines the actuall calls to 'MPI_Init()' and\n * 'MPI_Init_thread()' in order to preload the main MPI dynamic\n * library with appropriate flags to 'dlopen()' ensuring global\n * availability of library symbols.\n */\n\n#if !defined(OPENMPI_DLOPEN_LIBMPI) && defined(OMPI_MAJOR_VERSION)\n#if OMPI_MAJOR_VERSION >= 3 && OMPI_MAJOR_VERSION < 10\n#define OPENMPI_DLOPEN_LIBMPI 0\n#endif\n#endif\n\n#ifndef OPENMPI_DLOPEN_LIBMPI\n#define OPENMPI_DLOPEN_LIBMPI 1\n#endif\n\n#if OPENMPI_DLOPEN_LIBMPI\n#if HAVE_DLOPEN\n\n#if HAVE_DLFCN_H\n  #include <dlfcn.h>\n#else\n  #if defined(__linux__)\n    #define RTLD_LAZY     0x00001\n    #define RTLD_NOW      0x00002\n    #define RTLD_LOCAL    0x00000\n    #define RTLD_GLOBAL   0x00100\n    #define RTLD_NOLOAD   0x00004\n    #define RTLD_NODELETE 0x01000\n    #define RTLD_DEEPBIND 0x00008\n  #elif defined(__APPLE__)\n    #define RTLD_LAZY     0x1\n    #define RTLD_NOW      0x2\n    #define RTLD_LOCAL    0x4\n    #define RTLD_GLOBAL   0x8\n    #define RTLD_NOLOAD   0x10\n    #define RTLD_NODELETE 0x80\n    #define RTLD_FIRST    0x100\n  #elif defined(__CYGWIN__)\n    #define RTLD_LAZY     1\n    #define RTLD_NOW      2\n    #define RTLD_LOCAL    0\n    #define RTLD_GLOBAL   4\n  #endif\n  #if defined(__cplusplus) || defined(c_plusplus)\n  extern \"C\" {\n  #endif\n  extern void *dlopen(const char *, int);\n  extern void *dlsym(void *, const char *);\n  extern int   dlclose(void *);\n  extern char *dlerror(void);\n  #if defined(__cplusplus) || defined(c_plusplus)\n  }\n  #endif\n#endif\n\n#ifndef RTLD_LAZY\n#define RTLD_LAZY 1\n#endif\n#ifndef RTLD_NOW\n#define RTLD_NOW RTLD_LAZY\n#endif\n#ifndef RTLD_LOCAL\n#define RTLD_LOCAL 0\n#endif\n#ifndef RTLD_GLOBAL\n#define RTLD_GLOBAL RTLD_LOCAL\n#endif\n\n/*\nstatic void * my_dlopen(const char *name, int mode) {\n  void *handle;\n  static int called = 0;\n  if (!called) {\n    called = 1;\n    #if HAVE_DLFCN_H\n    printf(\"HAVE_DLFCN_H: yes\\n\");\n    #else\n    printf(\"HAVE_DLFCN_H: no\\n\");\n    #endif\n    printf(\"\\n\");\n    printf(\"RTLD_LAZY:    0x%X\\n\", RTLD_LAZY   );\n    printf(\"RTLD_NOW:     0x%X\\n\", RTLD_NOW    );\n    printf(\"RTLD_LOCAL:   0x%X\\n\", RTLD_LOCAL  );\n    printf(\"RTLD_GLOBAL:  0x%X\\n\", RTLD_GLOBAL );\n    #ifdef RTLD_NOLOAD\n    printf(\"RTLD_NOLOAD:  0x%X\\n\", RTLD_NOLOAD );\n    #endif\n    printf(\"\\n\");\n  }\n  handle = dlopen(name, mode);\n  printf(\"dlopen(\\\"%s\\\",0x%X) -> %p\\n\", name, mode, handle);\n  printf(\"dlerror() -> %s\\n\\n\", dlerror());\n  return handle;\n}\n#define dlopen my_dlopen\n*/\n\nstatic void OPENMPI_dlopen_libmpi(void)\n{\n  void *handle = 0;\n  int mode = RTLD_NOW | RTLD_GLOBAL;\n#if defined(__APPLE__)\n  /* macOS */\n  #ifdef RTLD_NOLOAD\n  mode |= RTLD_NOLOAD;\n  #endif\n  #if defined(OMPI_MAJOR_VERSION)\n  #if OMPI_MAJOR_VERSION == 3\n  if (!handle) handle = dlopen(\"libmpi.40.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 2\n  if (!handle) handle = dlopen(\"libmpi.20.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 10\n  if (!handle) handle = dlopen(\"libmpi.12.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 6\n  if (!handle) handle = dlopen(\"libmpi.1.dylib\", mode);\n  #elif OMPI_MAJOR_VERSION == 1\n  if (!handle) handle = dlopen(\"libmpi.0.dylib\", mode);\n  #endif\n  #endif\n  if (!handle) handle = dlopen(\"libmpi.dylib\", mode);\n#else\n  /* GNU/Linux and others */\n  #ifdef RTLD_NOLOAD\n  mode |= RTLD_NOLOAD;\n  #endif\n  #if defined(OMPI_MAJOR_VERSION)\n  #if OMPI_MAJOR_VERSION >= 10 /* IBM Spectrum MPI */\n  if (!handle) handle = dlopen(\"libmpi_ibm.so.2\", mode);\n  if (!handle) handle = dlopen(\"libmpi_ibm.so.1\", mode);\n  if (!handle) handle = dlopen(\"libmpi_ibm.so\", mode);\n  #elif OMPI_MAJOR_VERSION == 3\n  if (!handle) handle = dlopen(\"libmpi.so.40\", mode);\n  #elif OMPI_MAJOR_VERSION == 2\n  if (!handle) handle = dlopen(\"libmpi.so.20\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 10\n  if (!handle) handle = dlopen(\"libmpi.so.12\", mode);\n  #elif OMPI_MAJOR_VERSION == 1 && OMPI_MINOR_VERSION >= 6\n  if (!handle) handle = dlopen(\"libmpi.so.1\", mode);\n  #elif OMPI_MAJOR_VERSION == 1\n  if (!handle) handle = dlopen(\"libmpi.so.0\", mode);\n  #endif\n  #endif\n  if (!handle) handle = dlopen(\"libmpi.so\", mode);\n#endif\n}\n\nstatic PetscErrorCode PetscInitialize_OpenMPI(int *argc,char ***args,\n                                              const char file[],\n                                              const char help[])\n{\n  OPENMPI_dlopen_libmpi();\n  return PetscInitialize(argc,args,file,help);\n}\n#undef  PetscInitialize\n#define PetscInitialize PetscInitialize_OpenMPI\n\n#endif /* HAVE_DLOPEN */\n#endif /* OPENMPI_DLOPEN_LIBMPI */\n\n#endif /* OPEN_MPI */\n\n#endif/*PETSC4PY_COMPAT_MPI_H*/\n"
    },
    "skipped": [],
    "total_files": 207
}