{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-yasm-1.3.0-ic6l3kkpdnhsy4gro7yvrim45e7rgxt2/spack-src/frontends/yasm/yasm-plugin.c": "/*\n * Semi-portable (Windows and Unix) plugin loading\n *\n *  Copyright (C) 2008  Peter Johnson\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n * 1. Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n * 2. Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR AND OTHER CONTRIBUTORS ``AS IS''\n * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\n * ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR OR OTHER CONTRIBUTORS BE\n * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\n * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\n * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN\n * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)\n * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE\n * POSSIBILITY OF SUCH DAMAGE.\n */\n#include <util.h>\n\n#include <string.h>\n\n#include \"libyasm-stdint.h\"\n#include \"yasm-plugin.h\"\n\n#if defined(_MSC_VER)\n#include <windows.h>\n#elif defined(__GNUC__)\n#include <dlfcn.h>\n#endif\n\nstatic void **loaded_plugins = NULL;\nstatic int num_loaded_plugins = 0;\n\nstatic void *\nload_dll(const char *name)\n{\n#if defined(_MSC_VER)\n    return LoadLibrary(name);\n#elif defined(__GNUC__)\n    return dlopen(name, RTLD_NOW);\n#else\n    return NULL;\n#endif\n}\n\nint\nload_plugin(const char *name)\n{\n    char *path;\n    void *lib = NULL;\n    void (*init_plugin) (void) = NULL;\n\n    /* Load library */\n\n    path = yasm_xmalloc(strlen(name)+10);\n#if defined(_MSC_VER)\n    strcpy(path, name);\n    strcat(path, \".dll\");\n    lib = load_dll(path);\n#elif defined(__GNUC__)\n    strcpy(path, \"lib\");\n    strcat(path, name);\n    strcat(path, \".so\");\n    lib = load_dll(path);\n    if (!lib) {\n        strcpy(path, name);\n        strcat(path, \".so\");\n        lib = load_dll(path);\n    }\n#endif\n    yasm_xfree(path);\n    if (!lib)\n        lib = load_dll(name);\n\n    if (!lib)\n        return 0;       /* Didn't load successfully */\n\n    /* Add to array of loaded plugins */\n    loaded_plugins =\n        yasm_xrealloc(loaded_plugins, (num_loaded_plugins+1)*sizeof(void *));\n    loaded_plugins[num_loaded_plugins] = lib;\n    num_loaded_plugins++;\n\n    /* Get yasm_init_plugin() function and run it */\n\n#if defined(_MSC_VER)\n    init_plugin =\n        (void (*)(void))GetProcAddress((HINSTANCE)lib, \"yasm_init_plugin\");\n#elif defined(__GNUC__)\n    init_plugin = (void (*)(void))(uintptr_t)dlsym(lib, \"yasm_init_plugin\");\n#endif\n\n    if (!init_plugin)\n        return 0;       /* Didn't load successfully */\n\n    init_plugin();\n    return 1;\n}\n\nvoid\nunload_plugins(void)\n{\n    int i;\n\n    if (!loaded_plugins)\n        return;\n\n    for (i = 0; i < num_loaded_plugins; i++) {\n#if defined(_MSC_VER)\n        FreeLibrary((HINSTANCE)loaded_plugins[i]);\n#elif defined(__GNUC__)\n        dlclose(loaded_plugins[i]);\n#endif\n    }\n    yasm_xfree(loaded_plugins);\n    num_loaded_plugins = 0;\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-yasm-1.3.0-ic6l3kkpdnhsy4gro7yvrim45e7rgxt2/spack-src/tools/re2c/doc/loplas.ps.gz"
    ],
    "total_files": 1400
}