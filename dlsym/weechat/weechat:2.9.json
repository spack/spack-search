{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-sfgqadgkk63tbjqcpwkkztffivqybg3v/spack-src/src/plugins/plugin.c": "/*\n * plugin.c - WeeChat plugins management (load/unload dynamic C libraries)\n *\n * Copyright (C) 2003-2020 S\u00e9bastien Helleu <flashcode@flashtux.org>\n *\n * This file is part of WeeChat, the extensible chat client.\n *\n * WeeChat is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * WeeChat is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with WeeChat.  If not, see <https://www.gnu.org/licenses/>.\n */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include <errno.h>\n#include <stdlib.h>\n#include <stddef.h>\n#include <unistd.h>\n#include <libgen.h>\n#include <stdarg.h>\n#include <string.h>\n#include <sys/types.h>\n#include <sys/stat.h>\n#include <dirent.h>\n#include <dlfcn.h>\n\n#include \"../core/weechat.h\"\n#include \"../core/wee-arraylist.h\"\n#include \"../core/wee-config.h\"\n#include \"../core/wee-eval.h\"\n#include \"../core/wee-hashtable.h\"\n#include \"../core/wee-hdata.h\"\n#include \"../core/wee-hook.h\"\n#include \"../core/wee-infolist.h\"\n#include \"../core/wee-list.h\"\n#include \"../core/wee-log.h\"\n#include \"../core/wee-network.h\"\n#include \"../core/wee-string.h\"\n#include \"../core/wee-upgrade-file.h\"\n#include \"../core/wee-utf8.h\"\n#include \"../core/wee-util.h\"\n#include \"../gui/gui-bar.h\"\n#include \"../gui/gui-bar-item.h\"\n#include \"../gui/gui-buffer.h\"\n#include \"../gui/gui-chat.h\"\n#include \"../gui/gui-color.h\"\n#include \"../gui/gui-completion.h\"\n#include \"../gui/gui-key.h\"\n#include \"../gui/gui-nicklist.h\"\n#include \"../gui/gui-window.h\"\n#include \"plugin.h\"\n#include \"plugin-api.h\"\n#include \"plugin-config.h\"\n\n\nint plugin_quiet = 0;\nstruct t_weechat_plugin *weechat_plugins = NULL;\nstruct t_weechat_plugin *last_weechat_plugin = NULL;\n\n/* structure used to give arguments to callback of ... */\nstruct t_plugin_args\n{\n    int argc;\n    char **argv;\n};\n\nint plugin_autoload_count = 0;         /* number of items in autoload_array */\nchar **plugin_autoload_array = NULL;   /* autoload array, this is split of  */\n                                       /* option \"weechat.plugin.autoload\"  */\n\n\nvoid plugin_remove (struct t_weechat_plugin *plugin);\n\n\n/*\n * Checks if a plugin pointer is valid.\n *\n * Returns:\n *   1: plugin exists\n *   0: plugin does not exist\n */\n\nint\nplugin_valid (struct t_weechat_plugin *plugin)\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    if (!plugin)\n        return 0;\n\n    for (ptr_plugin = weechat_plugins; ptr_plugin;\n         ptr_plugin = ptr_plugin->next_plugin)\n    {\n        if (ptr_plugin == plugin)\n            return 1;\n    }\n\n    /* plugin not found */\n    return 0;\n}\n\n/*\n * Searches for a plugin by name.\n *\n * Returns pointer to plugin found, NULL if not found.\n */\n\nstruct t_weechat_plugin *\nplugin_search (const char *name)\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    if (!name)\n        return NULL;\n\n    for (ptr_plugin = weechat_plugins; ptr_plugin;\n         ptr_plugin = ptr_plugin->next_plugin)\n    {\n        if (string_strcasecmp (ptr_plugin->name, name) == 0)\n            return ptr_plugin;\n    }\n\n    /* plugin not found */\n    return NULL;\n}\n\n/*\n * Gets name of a plugin with a pointer.\n */\n\nconst char *\nplugin_get_name (struct t_weechat_plugin *plugin)\n{\n    static char *plugin_core = PLUGIN_CORE;\n\n    return (plugin) ? plugin->name : plugin_core;\n}\n\n/*\n * Checks if extension of filename is allowed by option\n * \"weechat.plugin.extension\".\n *\n * Returns:\n *   1: extension allowed\n *   0: extension not allowed\n */\n\nint\nplugin_check_extension_allowed (const char *filename)\n{\n    int i, length, length_ext;\n\n    /* extension allowed if no extension is defined */\n    if (!config_plugin_extensions)\n        return 1;\n\n    length = strlen (filename);\n    for (i = 0; i < config_num_plugin_extensions; i++)\n    {\n        length_ext = strlen (config_plugin_extensions[i]);\n        if (length >= length_ext)\n        {\n            if (string_strcasecmp (filename + length - length_ext,\n                                   config_plugin_extensions[i]) == 0)\n            {\n                /* extension allowed */\n                return 1;\n            }\n        }\n    }\n\n    /* extension not allowed */\n    return 0;\n}\n\n/*\n * Checks if a plugin can be autoloaded.\n *\n * List of autoloaded plugins is set in option \"weechat.plugin.autoload\".\n *\n * Returns:\n *   1: plugin can be autoloaded\n *   0: plugin can not be autoloaded\n */\n\nint\nplugin_check_autoload (const char *filename)\n{\n    int i, length, length_ext, match;\n    char *full_name, *ptr_base_name, *base_name, *plugin_name;\n\n    /* by default we can auto load all plugins */\n    if (!plugin_autoload_array)\n        return 1;\n\n    full_name = strdup (filename);\n    if (!full_name)\n        return 0;\n\n    /* get short name of plugin (filename without extension) */\n    plugin_name = NULL;\n    ptr_base_name = basename (full_name);\n    if (!ptr_base_name)\n    {\n        free (full_name);\n        return 1;\n    }\n\n    base_name = strdup (ptr_base_name);\n    if (!base_name)\n    {\n        free (full_name);\n        return 1;\n    }\n\n    free (full_name);\n\n    if (config_plugin_extensions)\n    {\n        length = strlen (base_name);\n        for (i = 0; i < config_num_plugin_extensions; i++)\n        {\n            length_ext = strlen (config_plugin_extensions[i]);\n            if (length >= length_ext)\n            {\n                if (string_strcasecmp (base_name + length - length_ext,\n                                       config_plugin_extensions[i]) == 0)\n                {\n                    plugin_name = string_strndup (base_name, length - length_ext);\n                    break;\n                }\n            }\n        }\n    }\n    else\n    {\n        plugin_name = strdup (base_name);\n    }\n\n    free (base_name);\n\n    if (!plugin_name)\n        return 1;\n\n    match = string_match_list (plugin_name,\n                               (const char **)plugin_autoload_array,\n                               0);\n\n    free (plugin_name);\n\n    return match;\n}\n\n/*\n * Returns arguments for plugins (only the relevant arguments for plugins,\n * arguments for WeeChat core not returned).\n *\n * Note: plugin_argv must be freed after use.\n */\n\nvoid\nplugin_get_args (struct t_weechat_plugin *plugin,\n                 int argc, char **argv,\n                 int *plugin_argc, char ***plugin_argv,\n                 int *no_connect)\n{\n    int i, temp_argc, length_plugin_name;\n    char **temp_argv;\n\n    temp_argc = 0;\n    temp_argv = NULL;\n\n    *no_connect = 0;\n\n    length_plugin_name = strlen (plugin->name);\n\n    if (argc > 0)\n    {\n        temp_argv = malloc ((argc + 1) * sizeof (*temp_argv));\n        if (temp_argv)\n        {\n            for (i = 0; i < argc; i++)\n            {\n                if ((strcmp (argv[i], \"-a\") == 0)\n                    || (strcmp (argv[i], \"--no-connect\") == 0))\n                {\n                    *no_connect = 1;\n                }\n                else if ((strcmp (argv[i], \"-s\") == 0)\n                         || (strcmp (argv[i], \"--no-script\") == 0)\n                         || ((strncmp (argv[i], plugin->name,\n                                       length_plugin_name) == 0)\n                             && (argv[i][length_plugin_name] == ':')))\n                {\n                    temp_argv[temp_argc++] = argv[i];\n                }\n            }\n            if (temp_argc == 0)\n            {\n                free (temp_argv);\n                temp_argv = NULL;\n            }\n            else\n                temp_argv[temp_argc] = NULL;\n        }\n    }\n\n    *plugin_argc = temp_argc;\n    *plugin_argv = temp_argv;\n}\n\n/*\n * Initializes a plugin by calling its init() function.\n *\n * Returns:\n *   1: OK\n *   0: error\n */\n\nint\nplugin_call_init (struct t_weechat_plugin *plugin, int argc, char **argv)\n{\n    t_weechat_init_func *init_func;\n    int plugin_argc, no_connect, rc, old_auto_connect;\n    char **plugin_argv;\n\n    if (plugin->initialized)\n        return 1;\n\n    /* look for plugin init function */\n    init_func = dlsym (plugin->handle, \"weechat_plugin_init\");\n    if (!init_func)\n        return 0;\n\n    /* get arguments for the plugin */\n    plugin_get_args (plugin, argc, argv,\n                     &plugin_argc, &plugin_argv, &no_connect);\n\n    old_auto_connect = weechat_auto_connect;\n    weechat_auto_connect = (no_connect) ? 0 : 1;\n\n    /* init plugin */\n    if (weechat_debug_core >= 1)\n    {\n        gui_chat_printf (NULL,\n                         _(\"Initializing plugin \\\"%s\\\" (priority: %d)\"),\n                         plugin->name,\n                         plugin->priority);\n    }\n    rc = ((t_weechat_init_func *)init_func) (plugin,\n                                             plugin_argc, plugin_argv);\n    if (rc == WEECHAT_RC_OK)\n    {\n        plugin->initialized = 1;\n    }\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to initialize plugin \"\n                           \"\\\"%s\\\"\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         plugin->filename);\n    }\n\n    weechat_auto_connect = old_auto_connect;\n\n    if (plugin_argv)\n        free (plugin_argv);\n\n    return (rc == WEECHAT_RC_OK) ? 1 : 0;\n}\n\n/*\n * Loads a WeeChat plugin (a dynamic library).\n *\n * If init_plugin == 1, then the init() function in plugin is called\n * (with argc/argv), otherwise the plugin is just loaded but not initialized.\n *\n * Returns a pointer to new WeeChat plugin, NULL if error.\n */\n\nstruct t_weechat_plugin *\nplugin_load (const char *filename, int init_plugin, int argc, char **argv)\n{\n    void *handle;\n    char *name, *api_version, *author, *description, *version;\n    char *license, *charset;\n    t_weechat_init_func *init_func;\n    int *priority;\n    struct t_weechat_plugin *new_plugin;\n    struct t_config_option *ptr_option;\n\n    if (!filename)\n        return NULL;\n\n    /*\n     * if plugin must not be autoloaded, then return immediately\n     * Note: the \"plugin_autoload_array\" variable is set only during auto-load,\n     * ie when WeeChat is starting or when doing /plugin autoload\n     */\n    if (plugin_autoload_array && !plugin_check_autoload (filename))\n        return NULL;\n\n    handle = dlopen (filename, RTLD_GLOBAL | RTLD_NOW);\n    if (!handle)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to load plugin \\\"%s\\\": %s\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename, dlerror ());\n        gui_chat_printf (NULL,\n                         _(\"%sIf you're trying to load a script and not a C \"\n                           \"plugin, try command to load scripts (/perl, \"\n                           \"/python, ...)\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR]);\n        return NULL;\n    }\n\n    /* look for plugin name */\n    name = dlsym (handle, \"weechat_plugin_name\");\n    if (!name)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_name\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for API version */\n    api_version = dlsym (handle, \"weechat_plugin_api_version\");\n    if (!api_version)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_api_version\",\n                         filename);\n        gui_chat_printf (NULL,\n                         _(\"%sIf plugin \\\"%s\\\" is old/obsolete, you can \"\n                           \"delete this file.\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n        dlclose (handle);\n        return NULL;\n    }\n    if (strcmp (api_version, WEECHAT_PLUGIN_API_VERSION) != 0)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: API mismatch for plugin \\\"%s\\\" (current \"\n                           \"API: \\\"%s\\\", plugin API: \\\"%s\\\"), failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename,\n                         WEECHAT_PLUGIN_API_VERSION,\n                         api_version);\n        gui_chat_printf (NULL,\n                         _(\"%sIf plugin \\\"%s\\\" is old/obsolete, you can \"\n                           \"delete this file.\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* check for plugin with same name */\n    if (plugin_search (name))\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to load plugin \\\"%s\\\": a plugin \"\n                           \"with same name already exists\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin description */\n    description = dlsym (handle, \"weechat_plugin_description\");\n    if (!description)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found \"\n                           \"in plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_description\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin author */\n    author = dlsym (handle, \"weechat_plugin_author\");\n    if (!author)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found \"\n                           \"in plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_author\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin version */\n    version = dlsym (handle, \"weechat_plugin_version\");\n    if (!version)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_version\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin license */\n    license = dlsym (handle, \"weechat_plugin_license\");\n    if (!license)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: symbol \\\"%s\\\" not found in \"\n                           \"plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_license\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /* look for plugin charset (optional, default is UTF-8) */\n    charset = dlsym (handle, \"weechat_plugin_charset\");\n\n    /* look for plugin init function */\n    init_func = dlsym (handle, \"weechat_plugin_init\");\n    if (!init_func)\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: function \\\"%s\\\" not \"\n                           \"found in plugin \\\"%s\\\", failed to load\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         \"weechat_plugin_init\",\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    /*\n     * look for plugin priority: it is used to initialize plugins in\n     * appropriate order: the important plugins that don't depend on other\n     * plugins are initialized first\n     */\n    priority = dlsym (handle, \"weechat_plugin_priority\");\n\n    /* create new plugin */\n    new_plugin = malloc (sizeof (*new_plugin));\n    if (new_plugin)\n    {\n        /* variables */\n        new_plugin->filename = strdup (filename);\n        new_plugin->handle = handle;\n        new_plugin->name = strdup (name);\n        new_plugin->description = strdup (description);\n        new_plugin->author = strdup (author);\n        new_plugin->version = strdup (version);\n        new_plugin->license = strdup (license);\n        new_plugin->charset = (charset) ? strdup (charset) : NULL;\n        new_plugin->priority = (priority) ?\n            *priority : PLUGIN_PRIORITY_DEFAULT;\n        new_plugin->initialized = 0;\n        ptr_option = config_weechat_debug_get (name);\n        new_plugin->debug = (ptr_option) ? CONFIG_INTEGER(ptr_option) : 0;\n        new_plugin->upgrading = weechat_upgrading;\n        new_plugin->variables = hashtable_new (\n            32,\n            WEECHAT_HASHTABLE_STRING, WEECHAT_HASHTABLE_STRING,\n            NULL, NULL);\n\n        /* functions */\n        new_plugin->plugin_get_name = &plugin_get_name;\n\n        new_plugin->charset_set = &plugin_api_charset_set;\n        new_plugin->iconv_to_internal = &string_iconv_to_internal;\n        new_plugin->iconv_from_internal = &string_iconv_from_internal;\n        new_plugin->gettext = &plugin_api_gettext;\n        new_plugin->ngettext = &plugin_api_ngettext;\n        new_plugin->strndup = &string_strndup;\n        new_plugin->string_tolower = &string_tolower;\n        new_plugin->string_toupper = &string_toupper;\n        new_plugin->strcasecmp = &string_strcasecmp;\n        new_plugin->strcasecmp_range = &string_strcasecmp_range;\n        new_plugin->strncasecmp = &string_strncasecmp;\n        new_plugin->strncasecmp_range = &string_strncasecmp_range;\n        new_plugin->strcmp_ignore_chars = &string_strcmp_ignore_chars;\n        new_plugin->strcasestr = &string_strcasestr;\n        new_plugin->strlen_screen = &gui_chat_strlen_screen;\n        new_plugin->string_match = &string_match;\n        new_plugin->string_match_list = &string_match_list;\n        new_plugin->string_replace = &string_replace;\n        new_plugin->string_expand_home = &string_expand_home;\n        new_plugin->string_eval_path_home = &string_eval_path_home;\n        new_plugin->string_remove_quotes = &string_remove_quotes;\n        new_plugin->string_strip = &string_strip;\n        new_plugin->string_convert_escaped_chars = &string_convert_escaped_chars;\n        new_plugin->string_mask_to_regex = &string_mask_to_regex;\n        new_plugin->string_regex_flags = &string_regex_flags;\n        new_plugin->string_regcomp = &string_regcomp;\n        new_plugin->string_has_highlight = &string_has_highlight;\n        new_plugin->string_has_highlight_regex = &string_has_highlight_regex;\n        new_plugin->string_replace_regex = &string_replace_regex;\n        new_plugin->string_split = &string_split;\n        new_plugin->string_split_shell = &string_split_shell;\n        new_plugin->string_free_split = &string_free_split;\n        new_plugin->string_build_with_split_string = &string_build_with_split_string;\n        new_plugin->string_split_command = &string_split_command;\n        new_plugin->string_free_split_command = &string_free_split_command;\n        new_plugin->string_format_size = &string_format_size;\n        new_plugin->string_remove_color = &gui_color_decode;\n        new_plugin->string_base_encode = &string_base_encode;\n        new_plugin->string_base_decode = &string_base_decode;\n        new_plugin->string_hex_dump = &string_hex_dump;\n        new_plugin->string_is_command_char = &string_is_command_char;\n        new_plugin->string_input_for_buffer = &string_input_for_buffer;\n        new_plugin->string_eval_expression = &eval_expression;\n        new_plugin->string_dyn_alloc = &string_dyn_alloc;\n        new_plugin->string_dyn_copy = &string_dyn_copy;\n        new_plugin->string_dyn_concat = &string_dyn_concat;\n        new_plugin->string_dyn_free = &string_dyn_free;\n\n        new_plugin->utf8_has_8bits = &utf8_has_8bits;\n        new_plugin->utf8_is_valid = &utf8_is_valid;\n        new_plugin->utf8_normalize = &utf8_normalize;\n        new_plugin->utf8_prev_char = &utf8_prev_char;\n        new_plugin->utf8_next_char = &utf8_next_char;\n        new_plugin->utf8_char_int = &utf8_char_int;\n        new_plugin->utf8_char_size = &utf8_char_size;\n        new_plugin->utf8_strlen = &utf8_strlen;\n        new_plugin->utf8_strnlen = &utf8_strnlen;\n        new_plugin->utf8_strlen_screen = &utf8_strlen_screen;\n        new_plugin->utf8_charcmp = &utf8_charcmp;\n        new_plugin->utf8_charcasecmp = &utf8_charcasecmp;\n        new_plugin->utf8_char_size_screen = &utf8_char_size_screen;\n        new_plugin->utf8_add_offset = &utf8_add_offset;\n        new_plugin->utf8_real_pos = &utf8_real_pos;\n        new_plugin->utf8_pos = &utf8_pos;\n        new_plugin->utf8_strndup = &utf8_strndup;\n\n        new_plugin->crypto_hash = &plugin_api_crypto_hash;\n        new_plugin->crypto_hash_pbkdf2 = &plugin_api_crypto_hash_pbkdf2;\n\n        new_plugin->mkdir_home = &util_mkdir_home;\n        new_plugin->mkdir = &util_mkdir;\n        new_plugin->mkdir_parents = &util_mkdir_parents;\n        new_plugin->exec_on_files = &util_exec_on_files;\n        new_plugin->file_get_content = &util_file_get_content;\n\n        new_plugin->util_timeval_cmp = &util_timeval_cmp;\n        new_plugin->util_timeval_diff = &util_timeval_diff;\n        new_plugin->util_timeval_add = &util_timeval_add;\n        new_plugin->util_get_time_string = &util_get_time_string;\n        new_plugin->util_version_number = &util_version_number;\n\n        new_plugin->list_new = &weelist_new;\n        new_plugin->list_add = &weelist_add;\n        new_plugin->list_search = &weelist_search;\n        new_plugin->list_search_pos = &weelist_search_pos;\n        new_plugin->list_casesearch = &weelist_casesearch;\n        new_plugin->list_casesearch_pos = &weelist_casesearch_pos;\n        new_plugin->list_get = &weelist_get;\n        new_plugin->list_set = &weelist_set;\n        new_plugin->list_next = &weelist_next;\n        new_plugin->list_prev = &weelist_prev;\n        new_plugin->list_string = &weelist_string;\n        new_plugin->list_user_data = &weelist_user_data;\n        new_plugin->list_size = &weelist_size;\n        new_plugin->list_remove = &weelist_remove;\n        new_plugin->list_remove_all = &weelist_remove_all;\n        new_plugin->list_free = &weelist_free;\n\n        new_plugin->arraylist_new = arraylist_new;\n        new_plugin->arraylist_size = arraylist_size;\n        new_plugin->arraylist_get = arraylist_get;\n        new_plugin->arraylist_search = arraylist_search;\n        new_plugin->arraylist_insert = arraylist_insert;\n        new_plugin->arraylist_add = arraylist_add;\n        new_plugin->arraylist_remove = arraylist_remove;\n        new_plugin->arraylist_clear = arraylist_clear;\n        new_plugin->arraylist_free = arraylist_free;\n\n        new_plugin->hashtable_new = &hashtable_new;\n        new_plugin->hashtable_set_with_size = &hashtable_set_with_size;\n        new_plugin->hashtable_set = &hashtable_set;\n        new_plugin->hashtable_get = &hashtable_get;\n        new_plugin->hashtable_has_key = &hashtable_has_key;\n        new_plugin->hashtable_map = &hashtable_map;\n        new_plugin->hashtable_map_string = &hashtable_map_string;\n        new_plugin->hashtable_dup = &hashtable_dup;\n        new_plugin->hashtable_get_integer = &hashtable_get_integer;\n        new_plugin->hashtable_get_string = &hashtable_get_string;\n        new_plugin->hashtable_set_pointer = &hashtable_set_pointer;\n        new_plugin->hashtable_add_to_infolist = &hashtable_add_to_infolist;\n        new_plugin->hashtable_add_from_infolist = &hashtable_add_from_infolist;\n        new_plugin->hashtable_remove = &hashtable_remove;\n        new_plugin->hashtable_remove_all = &hashtable_remove_all;\n        new_plugin->hashtable_free = &hashtable_free;\n\n        new_plugin->config_new = &config_file_new;\n        new_plugin->config_new_section = &config_file_new_section;\n        new_plugin->config_search_section = &config_file_search_section;\n        new_plugin->config_new_option = &config_file_new_option;\n        new_plugin->config_search_option = &config_file_search_option;\n        new_plugin->config_search_section_option = &config_file_search_section_option;\n        new_plugin->config_search_with_string = &config_file_search_with_string;\n        new_plugin->config_string_to_boolean = &config_file_string_to_boolean;\n        new_plugin->config_option_reset = &config_file_option_reset;\n        new_plugin->config_option_set = &config_file_option_set;\n        new_plugin->config_option_set_null = &config_file_option_set_null;\n        new_plugin->config_option_unset = &config_file_option_unset;\n        new_plugin->config_option_rename = &config_file_option_rename;\n        new_plugin->config_option_get_string = &config_file_option_get_string;\n        new_plugin->config_option_get_pointer = &config_file_option_get_pointer;\n        new_plugin->config_option_is_null = &config_file_option_is_null;\n        new_plugin->config_option_default_is_null = &config_file_option_default_is_null;\n        new_plugin->config_boolean = &config_file_option_boolean;\n        new_plugin->config_boolean_default = &config_file_option_boolean_default;\n        new_plugin->config_integer = &config_file_option_integer;\n        new_plugin->config_integer_default = &config_file_option_integer_default;\n        new_plugin->config_string = &config_file_option_string;\n        new_plugin->config_string_default = &config_file_option_string_default;\n        new_plugin->config_color = &config_file_option_color;\n        new_plugin->config_color_default = &config_file_option_color_default;\n        new_plugin->config_write_option = &config_file_write_option;\n        new_plugin->config_write_line = &config_file_write_line;\n        new_plugin->config_write = &config_file_write;\n        new_plugin->config_read = &config_file_read;\n        new_plugin->config_reload = &config_file_reload;\n        new_plugin->config_option_free = &plugin_api_config_file_option_free;\n        new_plugin->config_section_free_options = &config_file_section_free_options;\n        new_plugin->config_section_free = &config_file_section_free;\n        new_plugin->config_free = &config_file_free;\n        new_plugin->config_get = &plugin_api_config_get;\n        new_plugin->config_get_plugin = &plugin_api_config_get_plugin;\n        new_plugin->config_is_set_plugin = &plugin_api_config_is_set_plugin;\n        new_plugin->config_set_plugin = &plugin_api_config_set_plugin;\n        new_plugin->config_set_desc_plugin = &plugin_api_config_set_desc_plugin;\n        new_plugin->config_unset_plugin = &plugin_api_config_unset_plugin;\n\n        new_plugin->key_bind = &gui_key_bind_plugin;\n        new_plugin->key_unbind = &gui_key_unbind_plugin;\n\n        new_plugin->prefix = &plugin_api_prefix;\n        new_plugin->color = &plugin_api_color;\n        new_plugin->printf_date_tags = &gui_chat_printf_date_tags;\n        new_plugin->printf_y = &gui_chat_printf_y;\n        new_plugin->log_printf = &log_printf;\n\n        new_plugin->hook_command = &hook_command;\n        new_plugin->hook_command_run = &hook_command_run;\n        new_plugin->hook_timer = &hook_timer;\n        new_plugin->hook_fd = &hook_fd;\n        new_plugin->hook_process = &hook_process;\n        new_plugin->hook_process_hashtable = &hook_process_hashtable;\n        new_plugin->hook_connect = &hook_connect;\n        new_plugin->hook_line = &hook_line;\n        new_plugin->hook_print = &hook_print;\n        new_plugin->hook_signal = &hook_signal;\n        new_plugin->hook_signal_send = &hook_signal_send;\n        new_plugin->hook_hsignal = &hook_hsignal;\n        new_plugin->hook_hsignal_send = &hook_hsignal_send;\n        new_plugin->hook_config = &hook_config;\n        new_plugin->hook_completion = &hook_completion;\n        new_plugin->hook_completion_get_string = &gui_completion_get_string;\n        new_plugin->hook_completion_list_add = &gui_completion_list_add;\n        new_plugin->hook_modifier = &hook_modifier;\n        new_plugin->hook_modifier_exec = &hook_modifier_exec;\n        new_plugin->hook_info = &hook_info;\n        new_plugin->hook_info_hashtable = &hook_info_hashtable;\n        new_plugin->hook_infolist = &hook_infolist;\n        new_plugin->hook_hdata = &hook_hdata;\n        new_plugin->hook_focus = &hook_focus;\n        new_plugin->hook_set = &hook_set;\n        new_plugin->unhook = &unhook;\n        new_plugin->unhook_all = &unhook_all_plugin;\n\n        new_plugin->buffer_new = &gui_buffer_new;\n        new_plugin->buffer_search = &gui_buffer_search_by_name;\n        new_plugin->buffer_search_main = &gui_buffer_search_main;\n        new_plugin->buffer_clear = &gui_buffer_clear;\n        new_plugin->buffer_close = &gui_buffer_close;\n        new_plugin->buffer_merge = &gui_buffer_merge;\n        new_plugin->buffer_unmerge = &gui_buffer_unmerge;\n        new_plugin->buffer_get_integer = &gui_buffer_get_integer;\n        new_plugin->buffer_get_string = &gui_buffer_get_string;\n        new_plugin->buffer_get_pointer = &gui_buffer_get_pointer;\n        new_plugin->buffer_set = &gui_buffer_set;\n        new_plugin->buffer_set_pointer = &gui_buffer_set_pointer;\n        new_plugin->buffer_string_replace_local_var = &gui_buffer_string_replace_local_var;\n        new_plugin->buffer_match_list = &gui_buffer_match_list;\n\n        new_plugin->window_search_with_buffer = &gui_window_search_with_buffer;\n        new_plugin->window_get_integer = &gui_window_get_integer;\n        new_plugin->window_get_string = &gui_window_get_string;\n        new_plugin->window_get_pointer = &gui_window_get_pointer;\n        new_plugin->window_set_title = &gui_window_set_title;\n\n        new_plugin->nicklist_add_group = &gui_nicklist_add_group;\n        new_plugin->nicklist_search_group = &gui_nicklist_search_group;\n        new_plugin->nicklist_add_nick = &gui_nicklist_add_nick;\n        new_plugin->nicklist_search_nick = &gui_nicklist_search_nick;\n        new_plugin->nicklist_remove_group = &gui_nicklist_remove_group;\n        new_plugin->nicklist_remove_nick = &gui_nicklist_remove_nick;\n        new_plugin->nicklist_remove_all = &gui_nicklist_remove_all;\n        new_plugin->nicklist_get_next_item = &gui_nicklist_get_next_item;\n        new_plugin->nicklist_group_get_integer = &gui_nicklist_group_get_integer;\n        new_plugin->nicklist_group_get_string = &gui_nicklist_group_get_string;\n        new_plugin->nicklist_group_get_pointer = &gui_nicklist_group_get_pointer;\n        new_plugin->nicklist_group_set = &gui_nicklist_group_set;\n        new_plugin->nicklist_nick_get_integer = &gui_nicklist_nick_get_integer;\n        new_plugin->nicklist_nick_get_string = &gui_nicklist_nick_get_string;\n        new_plugin->nicklist_nick_get_pointer = &gui_nicklist_nick_get_pointer;\n        new_plugin->nicklist_nick_set = &gui_nicklist_nick_set;\n\n        new_plugin->bar_item_search = &gui_bar_item_search;\n        new_plugin->bar_item_new = &gui_bar_item_new;\n        new_plugin->bar_item_update = &gui_bar_item_update;\n        new_plugin->bar_item_remove = &gui_bar_item_free;\n        new_plugin->bar_search = &gui_bar_search;\n        new_plugin->bar_new = &gui_bar_new;\n        new_plugin->bar_set = &gui_bar_set;\n        new_plugin->bar_update = &gui_bar_update;\n        new_plugin->bar_remove = &gui_bar_free;\n\n        new_plugin->command = &plugin_api_command;\n        new_plugin->command_options = &plugin_api_command_options;\n\n        new_plugin->completion_new = &gui_completion_new;\n        new_plugin->completion_search = &gui_completion_search;\n        new_plugin->completion_get_string = &gui_completion_get_string;\n        new_plugin->completion_list_add = &gui_completion_list_add;\n        new_plugin->completion_free = &gui_completion_free;\n\n        new_plugin->network_pass_proxy = &network_pass_proxy;\n        new_plugin->network_connect_to = &network_connect_to;\n\n        new_plugin->info_get = &hook_info_get;\n        new_plugin->info_get_hashtable = &hook_info_get_hashtable;\n\n        new_plugin->infolist_new = &infolist_new;\n        new_plugin->infolist_new_item = &infolist_new_item;\n        new_plugin->infolist_new_var_integer = &infolist_new_var_integer;\n        new_plugin->infolist_new_var_string = &infolist_new_var_string;\n        new_plugin->infolist_new_var_pointer = &infolist_new_var_pointer;\n        new_plugin->infolist_new_var_buffer = &infolist_new_var_buffer;\n        new_plugin->infolist_new_var_time = &infolist_new_var_time;\n        new_plugin->infolist_search_var = &infolist_search_var;\n        new_plugin->infolist_get = &hook_infolist_get;\n        new_plugin->infolist_next = &plugin_api_infolist_next;\n        new_plugin->infolist_prev = &plugin_api_infolist_prev;\n        new_plugin->infolist_reset_item_cursor = &plugin_api_infolist_reset_item_cursor;\n        new_plugin->infolist_fields = &plugin_api_infolist_fields;\n        new_plugin->infolist_integer = &plugin_api_infolist_integer;\n        new_plugin->infolist_string = &plugin_api_infolist_string;\n        new_plugin->infolist_pointer = &plugin_api_infolist_pointer;\n        new_plugin->infolist_buffer = &plugin_api_infolist_buffer;\n        new_plugin->infolist_time = &plugin_api_infolist_time;\n        new_plugin->infolist_free = &plugin_api_infolist_free;\n\n        new_plugin->hdata_new = &hdata_new;\n        new_plugin->hdata_new_var = &hdata_new_var;\n        new_plugin->hdata_new_list = &hdata_new_list;\n        new_plugin->hdata_get = &hook_hdata_get;\n        new_plugin->hdata_get_var_offset = &hdata_get_var_offset;\n        new_plugin->hdata_get_var_type = &hdata_get_var_type;\n        new_plugin->hdata_get_var_type_string = &hdata_get_var_type_string;\n        new_plugin->hdata_get_var_array_size = &hdata_get_var_array_size;\n        new_plugin->hdata_get_var_array_size_string = &hdata_get_var_array_size_string;\n        new_plugin->hdata_get_var_hdata = &hdata_get_var_hdata;\n        new_plugin->hdata_get_var = &hdata_get_var;\n        new_plugin->hdata_get_var_at_offset = &hdata_get_var_at_offset;\n        new_plugin->hdata_get_list = &hdata_get_list;\n        new_plugin->hdata_check_pointer = &hdata_check_pointer;\n        new_plugin->hdata_move = &hdata_move;\n        new_plugin->hdata_search = &hdata_search;\n        new_plugin->hdata_char = &hdata_char;\n        new_plugin->hdata_integer = &hdata_integer;\n        new_plugin->hdata_long = &hdata_long;\n        new_plugin->hdata_string = &hdata_string;\n        new_plugin->hdata_pointer = &hdata_pointer;\n        new_plugin->hdata_time = &hdata_time;\n        new_plugin->hdata_hashtable = &hdata_hashtable;\n        new_plugin->hdata_compare = &hdata_compare;\n        new_plugin->hdata_set = &hdata_set;\n        new_plugin->hdata_update = &hdata_update;\n        new_plugin->hdata_get_string = &hdata_get_string;\n\n        new_plugin->upgrade_new = &upgrade_file_new;\n        new_plugin->upgrade_write_object = &upgrade_file_write_object;\n        new_plugin->upgrade_read = &upgrade_file_read;\n        new_plugin->upgrade_close = &upgrade_file_close;\n\n        /* add new plugin to list */\n        new_plugin->prev_plugin = last_weechat_plugin;\n        new_plugin->next_plugin = NULL;\n        if (last_weechat_plugin)\n            last_weechat_plugin->next_plugin = new_plugin;\n        else\n            weechat_plugins = new_plugin;\n        last_weechat_plugin = new_plugin;\n\n        /*\n         * associate orphan buffers with this plugin (if asked during upgrade\n         * process)\n         */\n        gui_buffer_set_plugin_for_upgrade (name, new_plugin);\n\n        if (init_plugin)\n        {\n            if (!plugin_call_init (new_plugin, argc, argv))\n            {\n                plugin_remove (new_plugin);\n                return NULL;\n            }\n        }\n    }\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: unable to load plugin \\\"%s\\\" \"\n                           \"(not enough memory)\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         filename);\n        dlclose (handle);\n        return NULL;\n    }\n\n    if ((weechat_debug_core >= 1) || !plugin_quiet)\n    {\n        gui_chat_printf (NULL,\n                         _(\"Plugin \\\"%s\\\" loaded\"),\n                         name);\n    }\n\n    (void) hook_signal_send (\"plugin_loaded\",\n                             WEECHAT_HOOK_SIGNAL_STRING, (char *)filename);\n\n    return new_plugin;\n}\n\n/*\n * Loads a file found by function plugin_auto_load, but only if this is really a\n * dynamic library.\n */\n\nvoid\nplugin_auto_load_file (void *data, const char *filename)\n{\n    struct t_plugin_args *plugin_args;\n\n    plugin_args = (struct t_plugin_args *)data;\n\n    if (plugin_check_extension_allowed (filename))\n        plugin_load (filename, 0, plugin_args->argc, plugin_args->argv);\n}\n\n/*\n * Callback used to sort plugins arraylist by priority (high priority first).\n */\n\nint\nplugin_arraylist_cmp_cb (void *data,\n                         struct t_arraylist *arraylist,\n                         void *pointer1, void *pointer2)\n{\n    struct t_weechat_plugin *plugin1, *plugin2;\n\n    /* make C compiler happy */\n    (void) data;\n    (void) arraylist;\n\n    plugin1 = (struct t_weechat_plugin *)pointer1;\n    plugin2 = (struct t_weechat_plugin *)pointer2;\n\n    return (plugin1->priority > plugin2->priority) ?\n        -1 : ((plugin1->priority < plugin2->priority) ? 1 : 0);\n}\n\n/*\n * Auto-loads WeeChat plugins, from user and system directories.\n */\n\nvoid\nplugin_auto_load (char *force_plugin_autoload,\n                  int load_from_plugin_path,\n                  int load_from_extra_lib_dir,\n                  int load_from_lib_dir,\n                  int argc, char **argv)\n{\n    char *dir_name, *plugin_path, *plugin_path2, *extra_libdir;\n    const char *ptr_plugin_autoload;\n    struct t_weechat_plugin *ptr_plugin;\n    struct t_plugin_args plugin_args;\n    struct t_arraylist *arraylist;\n    int length, i;\n\n    plugin_args.argc = argc;\n    plugin_args.argv = argv;\n\n    plugin_autoload_array = NULL;\n    plugin_autoload_count = 0;\n\n    ptr_plugin_autoload = (force_plugin_autoload) ?\n        force_plugin_autoload : CONFIG_STRING(config_plugin_autoload);\n\n    if (ptr_plugin_autoload && ptr_plugin_autoload[0])\n    {\n        plugin_autoload_array = string_split (\n            ptr_plugin_autoload,\n            \",\",\n            NULL,\n            WEECHAT_STRING_SPLIT_STRIP_LEFT\n            | WEECHAT_STRING_SPLIT_STRIP_RIGHT\n            | WEECHAT_STRING_SPLIT_COLLAPSE_SEPS,\n            0,\n            &plugin_autoload_count);\n    }\n\n    /* auto-load plugins in custom path */\n    if (load_from_plugin_path\n        && CONFIG_STRING(config_plugin_path)\n        && CONFIG_STRING(config_plugin_path)[0])\n    {\n        plugin_path = string_expand_home (CONFIG_STRING(config_plugin_path));\n        plugin_path2 = string_replace ((plugin_path) ?\n                                       plugin_path : CONFIG_STRING(config_plugin_path),\n                                       \"%h\", weechat_home);\n        util_exec_on_files ((plugin_path2) ?\n                            plugin_path2 : ((plugin_path) ?\n                                            plugin_path : CONFIG_STRING(config_plugin_path)),\n                            1,\n                            0,\n                            &plugin_auto_load_file, &plugin_args);\n        if (plugin_path)\n            free (plugin_path);\n        if (plugin_path2)\n            free (plugin_path2);\n    }\n\n    /* auto-load plugins in WEECHAT_EXTRA_LIBDIR environment variable */\n    if (load_from_extra_lib_dir)\n    {\n        extra_libdir = getenv (WEECHAT_EXTRA_LIBDIR);\n        if (extra_libdir && extra_libdir[0])\n        {\n            length = strlen (extra_libdir) + 16 + 1;\n            dir_name = malloc (length);\n            snprintf (dir_name, length, \"%s/plugins\", extra_libdir);\n            util_exec_on_files (dir_name, 1, 0,\n                                &plugin_auto_load_file, &plugin_args);\n            free (dir_name);\n        }\n    }\n\n    /* auto-load plugins in WeeChat global lib dir */\n    if (load_from_lib_dir)\n    {\n        length = strlen (WEECHAT_LIBDIR) + 16 + 1;\n        dir_name = malloc (length);\n        if (dir_name)\n        {\n            snprintf (dir_name, length, \"%s/plugins\", WEECHAT_LIBDIR);\n            util_exec_on_files (dir_name, 1, 0,\n                                &plugin_auto_load_file, &plugin_args);\n            free (dir_name);\n        }\n    }\n\n    /* free autoload array */\n    if (plugin_autoload_array)\n    {\n        string_free_split (plugin_autoload_array);\n        plugin_autoload_array = NULL;\n    }\n    plugin_autoload_count = 0;\n\n    /* initialize all uninitialized plugins */\n    arraylist = arraylist_new (10, 1, 1,\n                               &plugin_arraylist_cmp_cb, NULL, NULL, NULL);\n    if (arraylist)\n    {\n        for (ptr_plugin = weechat_plugins; ptr_plugin;\n             ptr_plugin = ptr_plugin->next_plugin)\n        {\n            arraylist_add (arraylist, ptr_plugin);\n        }\n        i = 0;\n        while (i < arraylist_size (arraylist))\n        {\n            ptr_plugin = arraylist_get (arraylist, i);\n            if (!ptr_plugin->initialized)\n            {\n                if (!plugin_call_init (ptr_plugin, argc, argv))\n                {\n                    plugin_remove (ptr_plugin);\n                    arraylist_remove (arraylist, i);\n                }\n                else\n                    i++;\n            }\n            else\n                i++;\n        }\n        arraylist_free (arraylist);\n    }\n}\n\n/*\n * Removes a WeeChat plugin.\n */\n\nvoid\nplugin_remove (struct t_weechat_plugin *plugin)\n{\n    struct t_weechat_plugin *new_weechat_plugins;\n    struct t_gui_buffer *ptr_buffer, *next_buffer;\n\n    /* remove all completions (only those created by API) */\n    gui_completion_free_all_plugin (plugin);\n\n    /* close buffers created by this plugin */\n    ptr_buffer = gui_buffers;\n    while (ptr_buffer)\n    {\n        next_buffer = ptr_buffer->next_buffer;\n\n        if (ptr_buffer->plugin == plugin)\n            gui_buffer_close (ptr_buffer);\n\n        ptr_buffer = next_buffer;\n    }\n\n    /* remove plugin from list */\n    if (last_weechat_plugin == plugin)\n        last_weechat_plugin = plugin->prev_plugin;\n    if (plugin->prev_plugin)\n    {\n        (plugin->prev_plugin)->next_plugin = plugin->next_plugin;\n        new_weechat_plugins = weechat_plugins;\n    }\n    else\n        new_weechat_plugins = plugin->next_plugin;\n\n    if (plugin->next_plugin)\n        (plugin->next_plugin)->prev_plugin = plugin->prev_plugin;\n\n    /* remove all configuration files */\n    config_file_free_all_plugin (plugin);\n\n    /* remove all hooks */\n    unhook_all_plugin (plugin, NULL);\n\n    /* remove all infolists */\n    infolist_free_all_plugin (plugin);\n\n    /* remove all hdata */\n    hdata_free_all_plugin (plugin);\n\n    /* remove all bar items */\n    gui_bar_item_free_all_plugin (plugin);\n\n    /* free data */\n    if (plugin->filename)\n        free (plugin->filename);\n    if (!weechat_plugin_no_dlclose)\n        dlclose (plugin->handle);\n    if (plugin->name)\n        free (plugin->name);\n    if (plugin->description)\n        free (plugin->description);\n    if (plugin->author)\n        free (plugin->author);\n    if (plugin->version)\n        free (plugin->version);\n    if (plugin->license)\n        free (plugin->license);\n    if (plugin->charset)\n        free (plugin->charset);\n    hashtable_free (plugin->variables);\n\n    free (plugin);\n\n    weechat_plugins = new_weechat_plugins;\n}\n\n/*\n * Unloads a WeeChat plugin.\n */\n\nvoid\nplugin_unload (struct t_weechat_plugin *plugin)\n{\n    t_weechat_end_func *end_func;\n    char *name;\n\n    name = (plugin->name) ? strdup (plugin->name) : NULL;\n\n    if (plugin->initialized)\n    {\n        end_func = dlsym (plugin->handle, \"weechat_plugin_end\");\n        if (end_func)\n            (void) (end_func) (plugin);\n    }\n\n    plugin_remove (plugin);\n\n    if ((weechat_debug_core >= 1) || !plugin_quiet)\n    {\n        gui_chat_printf (NULL,\n                         _(\"Plugin \\\"%s\\\" unloaded\"),\n                         (name) ? name : \"???\");\n    }\n    (void) hook_signal_send (\"plugin_unloaded\",\n                             WEECHAT_HOOK_SIGNAL_STRING, name);\n    if (name)\n        free (name);\n}\n\n/*\n * Unloads a WeeChat plugin by name.\n */\n\nvoid\nplugin_unload_name (const char *name)\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    ptr_plugin = plugin_search (name);\n    if (ptr_plugin)\n        plugin_unload (ptr_plugin);\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: plugin \\\"%s\\\" not found\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n    }\n}\n\n/*\n * Unloads all WeeChat plugins.\n */\n\nvoid\nplugin_unload_all ()\n{\n    int plugins_loaded;\n\n    plugins_loaded = (weechat_plugins) ? 1 : 0;\n\n    plugin_quiet = 1;\n    while (weechat_plugins)\n    {\n        plugin_unload (last_weechat_plugin);\n    }\n    plugin_quiet = 0;\n\n    if (plugins_loaded)\n    {\n        gui_chat_printf (NULL, _(\"Plugins unloaded\"));\n    }\n}\n\n/*\n * Reloads a WeeChat plugin by name.\n */\n\nvoid\nplugin_reload_name (const char *name, int argc, char **argv)\n{\n    struct t_weechat_plugin *ptr_plugin;\n    char *filename;\n\n    ptr_plugin = plugin_search (name);\n    if (ptr_plugin)\n    {\n        filename = strdup (ptr_plugin->filename);\n        if (filename)\n        {\n            plugin_unload (ptr_plugin);\n            plugin_load (filename, 1, argc, argv);\n            free (filename);\n        }\n    }\n    else\n    {\n        gui_chat_printf (NULL,\n                         _(\"%sError: plugin \\\"%s\\\" not found\"),\n                         gui_chat_prefix[GUI_CHAT_PREFIX_ERROR],\n                         name);\n    }\n}\n\n/*\n * Displays list of loaded plugins on one line.\n */\n\nvoid\nplugin_display_short_list ()\n{\n    const char *plugins_loaded;\n    char *buf;\n    int length;\n    struct t_weechat_plugin *ptr_plugin;\n    struct t_weelist *list;\n    struct t_weelist_item *ptr_item;\n\n    if (weechat_plugins)\n    {\n        list = weelist_new ();\n        if (list)\n        {\n            plugins_loaded = _(\"Plugins loaded:\");\n\n            length = strlen (plugins_loaded) + 1;\n\n            for (ptr_plugin = weechat_plugins; ptr_plugin;\n                 ptr_plugin = ptr_plugin->next_plugin)\n            {\n                length += strlen (ptr_plugin->name) + 2;\n                weelist_add (list, ptr_plugin->name, WEECHAT_LIST_POS_SORT, NULL);\n            }\n            length++;\n\n            buf = malloc (length);\n            if (buf)\n            {\n                strcpy (buf, plugins_loaded);\n                strcat (buf, \" \");\n                for (ptr_item = list->items; ptr_item;\n                     ptr_item = ptr_item->next_item)\n                {\n                    strcat (buf, ptr_item->data);\n                    if (ptr_item->next_item)\n                        strcat (buf, \", \");\n                }\n                gui_chat_printf (NULL, \"%s\", buf);\n                free (buf);\n            }\n            weelist_free (list);\n        }\n    }\n}\n\n/*\n * Initializes plugin support.\n */\n\nvoid\nplugin_init (char *force_plugin_autoload, int argc, char *argv[])\n{\n    /* read plugins options on disk */\n    plugin_config_init ();\n    plugin_config_read ();\n\n    /* auto-load plugins */\n    plugin_quiet = 1;\n    plugin_auto_load (force_plugin_autoload, 1, 1, 1, argc, argv);\n    plugin_display_short_list ();\n    plugin_quiet = 0;\n}\n\n/*\n * Ends plugin support.\n */\n\nvoid\nplugin_end ()\n{\n    /* write plugins configuration options */\n    plugin_config_write ();\n\n    /* unload all plugins */\n    plugin_unload_all ();\n\n    /* free all plugin options */\n    plugin_config_end ();\n}\n\n/*\n * Gets hdata for plugin.\n */\n\nstruct t_hdata *\nplugin_hdata_plugin_cb (const void *pointer, void *data,\n                        const char *hdata_name)\n{\n    struct t_hdata *hdata;\n\n    /* make C compiler happy */\n    (void) pointer;\n    (void) data;\n\n    hdata = hdata_new (NULL, hdata_name, \"prev_plugin\", \"next_plugin\",\n                       0, 0, NULL, NULL);\n    if (hdata)\n    {\n        HDATA_VAR(struct t_weechat_plugin, filename, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, handle, POINTER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, name, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, description, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, author, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, version, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, license, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, charset, STRING, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, priority, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, initialized, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, debug, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, upgrading, INTEGER, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, variables, HASHTABLE, 0, NULL, NULL);\n        HDATA_VAR(struct t_weechat_plugin, prev_plugin, POINTER, 0, NULL, hdata_name);\n        HDATA_VAR(struct t_weechat_plugin, next_plugin, POINTER, 0, NULL, hdata_name);\n        HDATA_LIST(weechat_plugins, WEECHAT_HDATA_LIST_CHECK_POINTERS);\n        HDATA_LIST(last_weechat_plugin, 0);\n    }\n    return hdata;\n}\n\n/*\n * Adds a plugin in an infolist.\n *\n * Returns:\n *   1: OK\n *   0: error\n */\n\nint\nplugin_add_to_infolist (struct t_infolist *infolist,\n                        struct t_weechat_plugin *plugin)\n{\n    struct t_infolist_item *ptr_item;\n\n    if (!infolist || !plugin)\n        return 0;\n\n    ptr_item = infolist_new_item (infolist);\n    if (!ptr_item)\n        return 0;\n\n    if (!infolist_new_var_pointer (ptr_item, \"pointer\", plugin))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"filename\", plugin->filename))\n        return 0;\n    if (!infolist_new_var_pointer (ptr_item, \"handle\", plugin->handle))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"name\", plugin->name))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"description\", plugin->description))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"description_nls\",\n                                  (plugin->description && plugin->description[0]) ?\n                                  _(plugin->description) : \"\"))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"author\", plugin->author))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"version\", plugin->version))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"license\", plugin->license))\n        return 0;\n    if (!infolist_new_var_string (ptr_item, \"charset\", plugin->charset))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"priority\", plugin->priority))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"initialized\", plugin->initialized))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"debug\", plugin->debug))\n        return 0;\n    if (!infolist_new_var_integer (ptr_item, \"upgrading\", plugin->upgrading))\n        return 0;\n    if (!hashtable_add_to_infolist (plugin->variables, ptr_item, \"var\"))\n        return 0;\n\n    return 1;\n}\n\n/*\n * Prints plugins in WeeChat log file (usually for crash dump).\n */\n\nvoid\nplugin_print_log ()\n{\n    struct t_weechat_plugin *ptr_plugin;\n\n    for (ptr_plugin = weechat_plugins; ptr_plugin;\n         ptr_plugin = ptr_plugin->next_plugin)\n    {\n        log_printf (\"\");\n        log_printf (\"[plugin (addr:0x%lx)]\", ptr_plugin);\n        log_printf (\"  filename . . . . . . . : '%s'\",  ptr_plugin->filename);\n        log_printf (\"  handle . . . . . . . . : 0x%lx\", ptr_plugin->handle);\n        log_printf (\"  name . . . . . . . . . : '%s'\",  ptr_plugin->name);\n        log_printf (\"  description. . . . . . : '%s'\",  ptr_plugin->description);\n        log_printf (\"  author . . . . . . . . : '%s'\",  ptr_plugin->author);\n        log_printf (\"  version. . . . . . . . : '%s'\",  ptr_plugin->version);\n        log_printf (\"  license. . . . . . . . : '%s'\",  ptr_plugin->license);\n        log_printf (\"  charset. . . . . . . . : '%s'\",  ptr_plugin->charset);\n        log_printf (\"  priority . . . . . . . : %d\",    ptr_plugin->priority);\n        log_printf (\"  initialized. . . . . . : %d\",    ptr_plugin->initialized);\n        log_printf (\"  debug. . . . . . . . . : %d\",    ptr_plugin->debug);\n        log_printf (\"  upgrading. . . . . . . : %d\",    ptr_plugin->upgrading);\n        hashtable_print_log (ptr_plugin->variables, \"variables\");\n        log_printf (\"  prev_plugin. . . . . . : 0x%lx\", ptr_plugin->prev_plugin);\n        log_printf (\"  next_plugin. . . . . . : 0x%lx\", ptr_plugin->next_plugin);\n    }\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-sfgqadgkk63tbjqcpwkkztffivqybg3v/spack-src/icons/64x64/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-sfgqadgkk63tbjqcpwkkztffivqybg3v/spack-src/icons/256x256/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-sfgqadgkk63tbjqcpwkkztffivqybg3v/spack-src/icons/16x16/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-sfgqadgkk63tbjqcpwkkztffivqybg3v/spack-src/icons/32x32/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-sfgqadgkk63tbjqcpwkkztffivqybg3v/spack-src/icons/128x128/weechat.png",
        "/tmp/vanessa/spack-stage/spack-stage-weechat-2.9-sfgqadgkk63tbjqcpwkkztffivqybg3v/spack-src/icons/512x512/weechat.png"
    ],
    "total_files": 761
}