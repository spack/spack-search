{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-amgx-2.1.0-4sohwr34lchgjnubf2vorb2zpe5fkwfw/spack-src/examples/amgx_capi.h": "/* Copyright (c) 2011-2019, NVIDIA CORPORATION. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n#ifndef __AMGX_C_H_INCLUDE__\n#define __AMGX_C_H_INCLUDE__\n\n#include <stdio.h>\n#include <stdlib.h>\n#include \"amgx_config.h\"\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n/*********************************************************\n ** These flags turn on output and vis data\n **********************************************************/\ntypedef enum\n{\n    SOLVE_STATS = 1,\n    GRID_STATS = 2,\n    CONFIG = 4,\n    PROFILE_STATS = 8,\n    VISDATA = 16,\n    RESIDUAL_HISTORY = 32,\n} AMGX_FLAGS;\n\n/*********************************************************\n ** These enums define the return codes\n **********************************************************/\ntypedef enum\n{\n    AMGX_RC_OK = 0,\n    AMGX_RC_BAD_PARAMETERS = 1,\n    AMGX_RC_UNKNOWN = 2,\n    AMGX_RC_NOT_SUPPORTED_TARGET = 3,\n    AMGX_RC_NOT_SUPPORTED_BLOCKSIZE = 4,\n    AMGX_RC_CUDA_FAILURE = 5,\n    AMGX_RC_THRUST_FAILURE = 6,\n    AMGX_RC_NO_MEMORY = 7,\n    AMGX_RC_IO_ERROR = 8,\n    AMGX_RC_BAD_MODE = 9,\n    AMGX_RC_CORE = 10,\n    AMGX_RC_PLUGIN = 11,\n    AMGX_RC_BAD_CONFIGURATION = 12,\n    AMGX_RC_NOT_IMPLEMENTED = 13,\n    AMGX_RC_LICENSE_NOT_FOUND = 14,\n    AMGX_RC_INTERNAL = 15\n} AMGX_RC ;\n\n/*********************************************************\n * Flags for status reporting\n *********************************************************/\ntypedef enum\n{\n    AMGX_SOLVE_SUCCESS = 0,\n    AMGX_SOLVE_FAILED = 1,\n    AMGX_SOLVE_DIVERGED = 2,\n    AMGX_SOLVE_NOT_CONVERGED = 2,\n} AMGX_SOLVE_STATUS;\n\n/*********************************************************\n * Flags to determine behavior of distributed matrix partitioning\n *********************************************************/\ntypedef enum\n{\n    AMGX_DIST_PARTITION_VECTOR = 0,\n    AMGX_DIST_PARTITION_OFFSETS = 1,\n} AMGX_DIST_PARTITION_INFO;\n\n/*********************************************************\n * Forward (opaque) handle declaration\n *********************************************************/\ntypedef void (*AMGX_print_callback)(const char *msg, int length);\n\ntypedef struct AMGX_config_handle_struct {char AMGX_config_handle_dummy;}\n*AMGX_config_handle;\n\ntypedef struct AMGX_resources_handle_struct {char AMGX_resources_handle_dummy;}\n*AMGX_resources_handle;\n\ntypedef struct AMGX_solver_handle_struct {char AMGX_solver_handle_dummy;}\n*AMGX_solver_handle;\n\ntypedef struct AMGX_matrix_handle_struct {char AMGX_matrix_handle_dummy;}\n*AMGX_matrix_handle;\n\ntypedef struct AMGX_vector_handle_struct {char AMGX_vector_handle_dummy;}\n*AMGX_vector_handle;\n\ntypedef struct AMGX_distribution_handle_struct {char AMGX_distribution_handle_dummy;}\n*AMGX_distribution_handle;\n\n/*********************************************************\n * Print C-API error and exit\n *********************************************************/\n#define AMGX_SAFE_CALL(rc) \\\n{ \\\n  AMGX_RC err;     \\\n  char msg[4096];   \\\n  switch(err = (rc)) {    \\\n  case AMGX_RC_OK: \\\n    break; \\\n  default: \\\n    fprintf(stderr, \"AMGX ERROR: file %s line %6d\\n\", __FILE__, __LINE__); \\\n    AMGX_get_error_string(err, msg, 4096);\\\n    fprintf(stderr, \"AMGX ERROR: %s\\n\", msg); \\\n    AMGX_abort(NULL,1);\\\n    break; \\\n  } \\\n}\n\n/*********************************************************\n * C-API stable\n *********************************************************/\n/* Build */\ntypedef AMGX_RC (*t_AMGX_get_api_version)\n(int *major,\n int *minor);\n\ntypedef AMGX_RC (*t_AMGX_get_build_info_strings)\n(char **version,\n char **date,\n char **time);\n\ntypedef AMGX_RC (*t_AMGX_get_error_string)\n(AMGX_RC err,\n char *buf,\n int buf_len);\n\n/* Init & Shutdown */\ntypedef AMGX_RC (*t_AMGX_initialize)();\n\ntypedef AMGX_RC (*t_AMGX_initialize_plugins)();\n\ntypedef AMGX_RC (*t_AMGX_finalize)();\n\ntypedef AMGX_RC (*t_AMGX_finalize_plugins)();\n\ntypedef void (*t_AMGX_abort)\n(AMGX_resources_handle rsc,\n int err);\n\n/* System */\ntypedef AMGX_RC (*t_AMGX_pin_memory)\n(void *ptr,\n unsigned int bytes);\n\ntypedef AMGX_RC (*t_AMGX_unpin_memory)\n(void *ptr);\n\ntypedef AMGX_RC (*t_AMGX_install_signal_handler)();\n\ntypedef AMGX_RC (*t_AMGX_reset_signal_handler)();\n\ntypedef AMGX_RC (*t_AMGX_register_print_callback)\n(AMGX_print_callback func);\n\n/* Config */\ntypedef AMGX_RC (*t_AMGX_config_create)\n(AMGX_config_handle *cfg,\n const char *options);\n\ntypedef AMGX_RC (*t_AMGX_config_add_parameters)\n(AMGX_config_handle *cfg,\n const char *options);\n\ntypedef AMGX_RC (*t_AMGX_config_create_from_file)\n(AMGX_config_handle *cfg,\n const char *param_file);\n\ntypedef AMGX_RC (*t_AMGX_config_create_from_file_and_string)\n(AMGX_config_handle *cfg,\n const char *param_file,\n const char *options);\n\ntypedef AMGX_RC (*t_AMGX_config_get_default_number_of_rings)\n(AMGX_config_handle cfg,\n int *num_import_rings);\n\ntypedef AMGX_RC (*t_AMGX_config_destroy)\n(AMGX_config_handle cfg);\n\n/* Resources */\ntypedef AMGX_RC (*t_AMGX_resources_create)\n(AMGX_resources_handle *rsc,\n AMGX_config_handle cfg,\n void *comm,\n int device_num,\n const int *devices);\n\ntypedef AMGX_RC (*t_AMGX_resources_create_simple)\n(AMGX_resources_handle *rsc,\n AMGX_config_handle cfg);\n\ntypedef AMGX_RC (*t_AMGX_resources_destroy)\n(AMGX_resources_handle rsc);\n\n/* Distribution */\ntypedef AMGX_RC (*t_AMGX_distribution_create)\n(AMGX_distribution_handle *dist, AMGX_config_handle cfg);\n\ntypedef AMGX_RC (*t_AMGX_distribution_destroy)\n(AMGX_distribution_handle dist);\n\ntypedef AMGX_RC (*t_AMGX_distribution_set_partition_data)\n(AMGX_distribution_handle dist, AMGX_DIST_PARTITION_INFO info, const void *partition_data);\n\ntypedef AMGX_RC (*t_AMGX_distribution_set_32bit_colindices)\n(AMGX_distribution_handle dist, int use32bit);\n\n/* Matrix */\ntypedef AMGX_RC (*t_AMGX_matrix_create)\n(AMGX_matrix_handle *mtx,\n AMGX_resources_handle rsc,\n AMGX_Mode mode);\n\ntypedef AMGX_RC (*t_AMGX_matrix_destroy)\n(AMGX_matrix_handle mtx);\n\ntypedef AMGX_RC (*t_AMGX_matrix_upload_all)\n(AMGX_matrix_handle mtx,\n int n,\n int nnz,\n int block_dimx,\n int block_dimy,\n const int *row_ptrs,\n const int *col_indices,\n const void *data,\n const void *diag_data);\n\ntypedef AMGX_RC (*t_AMGX_matrix_replace_coefficients)\n(AMGX_matrix_handle mtx,\n int n,\n int nnz,\n const void *data,\n const void *diag_data);\n\ntypedef AMGX_RC (*t_AMGX_matrix_get_size)\n(const AMGX_matrix_handle mtx,\n int *n,\n int *block_dimx,\n int *block_dimy);\n\ntypedef AMGX_RC (*t_AMGX_matrix_get_nnz)\n(const AMGX_matrix_handle mtx,\n int *nnz);\n\ntypedef AMGX_RC (*t_AMGX_matrix_download_all)\n(const AMGX_matrix_handle mtx,\n int *row_ptrs,\n int *col_indices,\n void *data,\n void **diag_data);\n\ntypedef AMGX_RC (*t_AMGX_matrix_set_boundary_separation)\n(AMGX_matrix_handle mtx,\n int boundary_separation);\n\ntypedef AMGX_RC (*t_AMGX_matrix_comm_from_maps)\n(AMGX_matrix_handle mtx,\n int allocated_halo_depth,\n int num_import_rings,\n int num_neighbors,\n const int *neighbors,\n const int *send_ptrs,\n const int *send_maps,\n const int *recv_ptrs,\n const int *recv_maps);\n\ntypedef AMGX_RC (*t_AMGX_matrix_comm_from_maps_one_ring)\n(AMGX_matrix_handle mtx,\n int allocated_halo_depth,\n int num_neighbors,\n const int *neighbors,\n const int *send_sizes,\n const int **send_maps,\n const int *recv_sizes,\n const int **recv_maps);\n\n/* Vector */\ntypedef AMGX_RC (*t_AMGX_vector_create)\n(AMGX_vector_handle *vec,\n AMGX_resources_handle rsc,\n AMGX_Mode mode);\n\ntypedef AMGX_RC (*t_AMGX_vector_destroy)\n(AMGX_vector_handle vec);\n\ntypedef AMGX_RC (*t_AMGX_vector_upload)\n(AMGX_vector_handle vec,\n int n,\n int block_dim,\n const void *data);\n\ntypedef AMGX_RC (*t_AMGX_vector_set_zero)\n(AMGX_vector_handle vec,\n int n,\n int block_dim);\n\ntypedef AMGX_RC (*t_AMGX_vector_download)\n(const AMGX_vector_handle vec,\n void *data);\n\ntypedef AMGX_RC (*t_AMGX_vector_get_size)\n(const AMGX_vector_handle vec,\n int *n,\n int *block_dim);\n\ntypedef AMGX_RC (*t_AMGX_vector_bind)\n(AMGX_vector_handle vec,\n const AMGX_matrix_handle mtx);\n\n/* Solver */\ntypedef AMGX_RC (*t_AMGX_solver_create)\n(AMGX_solver_handle *slv,\n AMGX_resources_handle rsc,\n AMGX_Mode mode,\n const AMGX_config_handle cfg);\n\ntypedef AMGX_RC (*t_AMGX_solver_destroy)\n(AMGX_solver_handle slv);\n\ntypedef AMGX_RC (*t_AMGX_solver_setup)\n(AMGX_solver_handle slv,\n AMGX_matrix_handle mtx);\n\ntypedef AMGX_RC (*t_AMGX_solver_solve)\n(AMGX_solver_handle slv,\n AMGX_vector_handle rhs,\n AMGX_vector_handle sol);\n\ntypedef AMGX_RC (*t_AMGX_solver_solve_with_0_initial_guess)\n(AMGX_solver_handle slv,\n AMGX_vector_handle rhs,\n AMGX_vector_handle sol);\n\ntypedef AMGX_RC (*t_AMGX_solver_get_iterations_number)\n(AMGX_solver_handle slv,\n int *n);\n\ntypedef AMGX_RC (*t_AMGX_solver_get_iteration_residual)\n(AMGX_solver_handle slv,\n int it,\n int idx,\n double *res);\n\ntypedef AMGX_RC (*t_AMGX_solver_get_status)\n(AMGX_solver_handle slv,\n AMGX_SOLVE_STATUS *st);\n\n/* Utilities */\ntypedef AMGX_RC (*t_AMGX_write_system)\n(const AMGX_matrix_handle mtx,\n const AMGX_vector_handle rhs,\n const AMGX_vector_handle sol,\n const char *filename);\n\ntypedef AMGX_RC (*t_AMGX_write_system_distributed)\n(const AMGX_matrix_handle mtx,\n const AMGX_vector_handle rhs,\n const AMGX_vector_handle sol,\n const char *filename,\n int allocated_halo_depth,\n int num_partitions,\n const int *partition_sizes,\n int partition_vector_size,\n const int *partition_vector);\n\ntypedef AMGX_RC (*t_AMGX_read_system)\n(AMGX_matrix_handle mtx,\n AMGX_vector_handle rhs,\n AMGX_vector_handle sol,\n const char *filename);\n\ntypedef AMGX_RC (*t_AMGX_read_system_distributed)\n(AMGX_matrix_handle mtx,\n AMGX_vector_handle rhs,\n AMGX_vector_handle sol,\n const char *filename,\n int allocated_halo_depth,\n int num_partitions,\n const int *partition_sizes,\n int partition_vector_size,\n const int *partition_vector);\n\ntypedef AMGX_RC (*t_AMGX_read_system_maps_one_ring)\n(int *n,\n int *nnz,\n int *block_dimx,\n int *block_dimy,\n int **row_ptrs,\n int **col_indices,\n void **data,\n void **diag_data,\n void **rhs,\n void **sol,\n int *num_neighbors,\n int **neighbors,\n int **send_sizes,\n int ***send_maps,\n int **recv_sizes,\n int ***recv_maps,\n AMGX_resources_handle rsc,\n AMGX_Mode mode,\n const char *filename,\n int allocated_halo_depth,\n int num_partitions,\n const int *partition_sizes,\n int partition_vector_size,\n const int *partition_vector);\n\ntypedef AMGX_RC (*t_AMGX_free_system_maps_one_ring)\n(int *row_ptrs,\n int *col_indices,\n void *data,\n void *diag_data,\n void *rhs,\n void *sol,\n int num_neighbors,\n int *neighbors,\n int *send_sizes,\n int **send_maps,\n int *recv_sizes,\n int **recv_maps);\n\ntypedef AMGX_RC (*t_AMGX_generate_distributed_poisson_7pt)\n(AMGX_matrix_handle mtx,\n AMGX_vector_handle rhs,\n AMGX_vector_handle sol,\n int allocated_halo_depth,\n int num_import_rings,\n int nx,\n int ny,\n int nz,\n int px,\n int py,\n int pz);\n\n/*********************************************************\n * C-API experimental\n *********************************************************/\ntypedef AMGX_RC (*t_AMGX_matrix_attach_coloring)\n(AMGX_matrix_handle mtx,\n int *row_coloring,\n int num_rows,\n int num_colors);\n\ntypedef AMGX_RC (*t_AMGX_matrix_attach_geometry)\n(AMGX_matrix_handle mtx,\n double *geox,\n double *geoy,\n double *geoz,\n int n);\n\ntypedef AMGX_RC (*t_AMGX_read_system_global)\n(int *n,\n int *nnz,\n int *block_dimx,\n int *block_dimy,\n int **row_ptrs,\n void **col_indices_global,\n void **data,\n void **diag_data,\n void **rhs,\n void **sol,\n AMGX_resources_handle rsc,\n AMGX_Mode mode,\n const char *filename,\n int allocated_halo_depth,\n int num_partitions,\n const int *partition_sizes,\n int partition_vector_size,\n const int *partition_vector);\n\ntypedef AMGX_RC (*t_AMGX_matrix_upload_all_global)\n(AMGX_matrix_handle mtx,\n int n_global,\n int n,\n int nnz,\n int block_dimx,\n int block_dimy,\n const int *row_ptrs,\n const void *col_indices_global,\n const void *data,\n const void *diag_data,\n int allocated_halo_depth,\n int num_import_rings,\n const int *partition_vector);\n\ntypedef AMGX_RC (*t_AMGX_matrix_upload_all_global_32)\n(AMGX_matrix_handle mtx,\n int n_global,\n int n,\n int nnz,\n int block_dimx,\n int block_dimy,\n const int *row_ptrs,\n const void *col_indices_global,\n const void *data,\n const void *diag_data,\n int allocated_halo_depth,\n int num_import_rings,\n const int *partition_vector);\n\ntypedef AMGX_RC (*t_AMGX_matrix_upload_distributed)\n(AMGX_matrix_handle mtx,\n int n_global,\n int n,\n int nnz,\n int block_dimx,\n int block_dimy,\n const int *row_ptrs,\n const void *col_indices_global,\n const void *data,\n const void *diag_data,\n AMGX_distribution_handle distribution);\n\n/*********************************************************\n * C-API deprecated\n *********************************************************/\ntypedef AMGX_RC (*t_AMGX_solver_register_print_callback)\n(AMGX_print_callback func);\n\ntypedef AMGX_RC (*t_AMGX_solver_resetup)\n(AMGX_solver_handle slv,\n AMGX_matrix_handle mtx);\n\n\n/*********************************************************\n * Setup dynamic loading of the library\n *********************************************************/\n#ifdef _WIN32\n#include \"windows.h\"\n#define amgx_libopen(path) (void*)(LoadLibrary(path))\n#define amgx_liblink(handle, symbol) GetProcAddress((HMODULE)(handle), symbol)\n#define amgx_libclose(handle) FreeLibrary((HMODULE)(handle))\n#endif\n\n#ifdef __unix__\n#include <dlfcn.h>\n#include <unistd.h>\n#define amgx_libopen(path) dlopen(path, RTLD_LAZY)\n#define amgx_liblink(handle, symbol) dlsym(handle, symbol)\n#define amgx_libclose(handle) dlclose(handle)\n#endif\n\n/* use types above to define function pointers */\n/* Build */\nt_AMGX_get_api_version                    AMGX_get_api_version;\nt_AMGX_get_build_info_strings             AMGX_get_build_info_strings;\nt_AMGX_get_error_string                   AMGX_get_error_string;\n/* Init & Shutdown */\nt_AMGX_initialize                         AMGX_initialize;\nt_AMGX_initialize_plugins                 AMGX_initialize_plugins;\nt_AMGX_finalize                           AMGX_finalize;\nt_AMGX_finalize_plugins                   AMGX_finalize_plugins;\nt_AMGX_abort                              AMGX_abort;\n/* System */\nt_AMGX_pin_memory                         AMGX_pin_memory;\nt_AMGX_unpin_memory                       AMGX_unpin_memory;\nt_AMGX_install_signal_handler             AMGX_install_signal_handler;\nt_AMGX_reset_signal_handler               AMGX_reset_signal_handler;\nt_AMGX_register_print_callback            AMGX_register_print_callback;\n/* Config */\nt_AMGX_config_create                      AMGX_config_create;\nt_AMGX_config_add_parameters              AMGX_config_add_parameters;\nt_AMGX_config_create_from_file            AMGX_config_create_from_file;\nt_AMGX_config_create_from_file_and_string AMGX_config_create_from_file_and_string;\nt_AMGX_config_get_default_number_of_rings AMGX_config_get_default_number_of_rings;\nt_AMGX_config_destroy                     AMGX_config_destroy;\n/* Resources */\nt_AMGX_resources_create                   AMGX_resources_create;\nt_AMGX_resources_create_simple            AMGX_resources_create_simple;\nt_AMGX_resources_destroy                  AMGX_resources_destroy;\n/* Distribution */\nt_AMGX_distribution_create                AMGX_distribution_create;\nt_AMGX_distribution_destroy               AMGX_distribution_destroy;\nt_AMGX_distribution_set_partition_data    AMGX_distribution_set_partition_data;\nt_AMGX_distribution_set_32bit_colindices  AMGX_distribution_set_32bit_colindices;\n\n\n/* Matrix */\nt_AMGX_matrix_create                      AMGX_matrix_create;\nt_AMGX_matrix_destroy                     AMGX_matrix_destroy;\nt_AMGX_matrix_upload_all                  AMGX_matrix_upload_all;\nt_AMGX_matrix_replace_coefficients        AMGX_matrix_replace_coefficients;\nt_AMGX_matrix_get_size                    AMGX_matrix_get_size;\nt_AMGX_matrix_get_nnz                     AMGX_matrix_get_nnz;\nt_AMGX_matrix_download_all                AMGX_matrix_download_all;\nt_AMGX_matrix_set_boundary_separation     AMGX_matrix_set_boundary_separation;\nt_AMGX_matrix_comm_from_maps              AMGX_matrix_comm_from_maps;\nt_AMGX_matrix_comm_from_maps_one_ring     AMGX_matrix_comm_from_maps_one_ring;\n/* Vector */\nt_AMGX_vector_create                      AMGX_vector_create;\nt_AMGX_vector_destroy                     AMGX_vector_destroy;\nt_AMGX_vector_upload                      AMGX_vector_upload;\nt_AMGX_vector_set_zero                    AMGX_vector_set_zero;\nt_AMGX_vector_download                    AMGX_vector_download;\nt_AMGX_vector_get_size                    AMGX_vector_get_size;\nt_AMGX_vector_bind                        AMGX_vector_bind;\n/* Solver */\nt_AMGX_solver_create                      AMGX_solver_create;\nt_AMGX_solver_destroy                     AMGX_solver_destroy;\nt_AMGX_solver_setup                       AMGX_solver_setup;\nt_AMGX_solver_solve                       AMGX_solver_solve;\nt_AMGX_solver_solve_with_0_initial_guess  AMGX_solver_solve_with_0_initial_guess;\nt_AMGX_solver_get_iterations_number       AMGX_solver_get_iterations_number;\nt_AMGX_solver_get_iteration_residual      AMGX_solver_get_iteration_residual;\nt_AMGX_solver_get_status                  AMGX_solver_get_status;\n/* Utilities */\nt_AMGX_write_system                       AMGX_write_system;\nt_AMGX_write_system_distributed           AMGX_write_system_distributed;\nt_AMGX_read_system                        AMGX_read_system;\nt_AMGX_read_system_distributed            AMGX_read_system_distributed;\nt_AMGX_read_system_maps_one_ring          AMGX_read_system_maps_one_ring;\nt_AMGX_free_system_maps_one_ring          AMGX_free_system_maps_one_ring;\nt_AMGX_generate_distributed_poisson_7pt   AMGX_generate_distributed_poisson_7pt;\n/* Experimental */\nt_AMGX_matrix_attach_geometry             AMGX_matrix_attach_geometry;\nt_AMGX_matrix_attach_coloring             AMGX_matrix_attach_coloring;\nt_AMGX_read_system_global                   AMGX_read_system_global;\nt_AMGX_matrix_upload_all_global             AMGX_matrix_upload_all_global;\nt_AMGX_matrix_upload_all_global_32       AMGX_matrix_upload_all_global_32;\nt_AMGX_matrix_upload_distributed         AMGX_matrix_upload_distributed;\n\n/* dynamically load the library, return: 1 - succeeded, 0 - failed*/\nint amgx_liblink_all(void *lib_handle)\n{\n    /* Build */\n    AMGX_get_api_version                     = (t_AMGX_get_api_version)amgx_liblink(lib_handle, \"AMGX_get_api_version\");\n    AMGX_get_build_info_strings              = (t_AMGX_get_build_info_strings)amgx_liblink(lib_handle, \"AMGX_get_build_info_strings\");\n    AMGX_get_error_string                    = (t_AMGX_get_error_string)amgx_liblink(lib_handle, \"AMGX_get_error_string\");\n    /* Init & Shutdown */\n    AMGX_initialize                          = (t_AMGX_initialize)amgx_liblink(lib_handle, \"AMGX_initialize\");\n    AMGX_initialize_plugins                  = (t_AMGX_initialize_plugins)amgx_liblink(lib_handle, \"AMGX_initialize_plugins\");\n    AMGX_finalize                            = (t_AMGX_finalize)amgx_liblink(lib_handle, \"AMGX_finalize\");\n    AMGX_finalize_plugins                    = (t_AMGX_finalize_plugins)amgx_liblink(lib_handle, \"AMGX_finalize_plugins\");\n    AMGX_abort                               = (t_AMGX_abort)amgx_liblink(lib_handle, \"AMGX_abort\");\n    /* System */\n    AMGX_pin_memory                          = (t_AMGX_pin_memory)amgx_liblink(lib_handle, \"AMGX_pin_memory\");\n    AMGX_unpin_memory                        = (t_AMGX_unpin_memory)amgx_liblink(lib_handle, \"AMGX_unpin_memory\");\n    AMGX_install_signal_handler              = (t_AMGX_install_signal_handler)amgx_liblink(lib_handle, \"AMGX_install_signal_handler\");\n    AMGX_reset_signal_handler                = (t_AMGX_reset_signal_handler)amgx_liblink(lib_handle, \"AMGX_reset_signal_handler\");\n    AMGX_register_print_callback             = (t_AMGX_register_print_callback)amgx_liblink(lib_handle, \"AMGX_register_print_callback\");\n    /* Config */\n    AMGX_config_create                       = (t_AMGX_config_create)amgx_liblink(lib_handle, \"AMGX_config_create\");\n    AMGX_config_add_parameters               = (t_AMGX_config_add_parameters)amgx_liblink(lib_handle, \"AMGX_config_add_parameters\");\n    AMGX_config_create_from_file             = (t_AMGX_config_create_from_file)amgx_liblink(lib_handle, \"AMGX_config_create_from_file\");\n    AMGX_config_create_from_file_and_string  = (t_AMGX_config_create_from_file_and_string)amgx_liblink(lib_handle, \"AMGX_config_create_from_file_and_string\");\n    AMGX_config_get_default_number_of_rings  = (t_AMGX_config_get_default_number_of_rings)amgx_liblink(lib_handle, \"AMGX_config_get_default_number_of_rings\");\n    AMGX_config_destroy                      = (t_AMGX_config_destroy)amgx_liblink(lib_handle, \"AMGX_config_destroy\");\n    /* Resources */\n    AMGX_resources_create                    = (t_AMGX_resources_create)amgx_liblink(lib_handle, \"AMGX_resources_create\");\n    AMGX_resources_create_simple             = (t_AMGX_resources_create_simple)amgx_liblink(lib_handle, \"AMGX_resources_create_simple\");\n    AMGX_resources_destroy                   = (t_AMGX_resources_destroy)amgx_liblink(lib_handle, \"AMGX_resources_destroy\");\n    /* Distribution */\n    AMGX_distribution_create                 = (t_AMGX_distribution_create)amgx_liblink(lib_handle, \"AMGX_distribution_create\");\n    AMGX_distribution_destroy                = (t_AMGX_distribution_destroy)amgx_liblink(lib_handle, \"AMGX_distribution_destroy\");\n    AMGX_distribution_set_partition_data     = (t_AMGX_distribution_set_partition_data)amgx_liblink(lib_handle, \"AMGX_distribution_set_partition_data\");\n    AMGX_distribution_set_32bit_colindices   = (t_AMGX_distribution_set_32bit_colindices)amgx_liblink(lib_handle, \"AMGX_distribution_set_32bit_colindices\");\n    /* Matrix */\n    AMGX_matrix_create                       = (t_AMGX_matrix_create)amgx_liblink(lib_handle, \"AMGX_matrix_create\");\n    AMGX_matrix_destroy                      = (t_AMGX_matrix_destroy)amgx_liblink(lib_handle, \"AMGX_matrix_destroy\");\n    AMGX_matrix_upload_all                   = (t_AMGX_matrix_upload_all)amgx_liblink(lib_handle, \"AMGX_matrix_upload_all\");\n    AMGX_matrix_replace_coefficients         = (t_AMGX_matrix_replace_coefficients)amgx_liblink(lib_handle, \"AMGX_matrix_replace_coefficients\");\n    AMGX_matrix_get_size                     = (t_AMGX_matrix_get_size)amgx_liblink(lib_handle, \"AMGX_matrix_get_size\");\n    AMGX_matrix_get_nnz                      = (t_AMGX_matrix_get_nnz)amgx_liblink(lib_handle, \"AMGX_matrix_get_nnz\");\n    AMGX_matrix_download_all                 = (t_AMGX_matrix_download_all)amgx_liblink(lib_handle, \"AMGX_matrix_download_all\");\n    AMGX_matrix_set_boundary_separation      = (t_AMGX_matrix_set_boundary_separation)amgx_liblink(lib_handle, \"AMGX_matrix_set_boundary_separation\");\n    AMGX_matrix_comm_from_maps               = (t_AMGX_matrix_comm_from_maps)amgx_liblink(lib_handle, \"AMGX_matrix_comm_from_maps\");\n    AMGX_matrix_comm_from_maps_one_ring      = (t_AMGX_matrix_comm_from_maps_one_ring)amgx_liblink(lib_handle, \"AMGX_matrix_comm_from_maps_one_ring\");\n    /* Vector */\n    AMGX_vector_create                       = (t_AMGX_vector_create)amgx_liblink(lib_handle, \"AMGX_vector_create\");\n    AMGX_vector_destroy                      = (t_AMGX_vector_destroy)amgx_liblink(lib_handle, \"AMGX_vector_destroy\");\n    AMGX_vector_upload                       = (t_AMGX_vector_upload)amgx_liblink(lib_handle, \"AMGX_vector_upload\");\n    AMGX_vector_set_zero                     = (t_AMGX_vector_set_zero)amgx_liblink(lib_handle, \"AMGX_vector_set_zero\");\n    AMGX_vector_download                     = (t_AMGX_vector_download)amgx_liblink(lib_handle, \"AMGX_vector_download\");\n    AMGX_vector_get_size                     = (t_AMGX_vector_get_size)amgx_liblink(lib_handle, \"AMGX_vector_get_size\");\n    AMGX_vector_bind                         = (t_AMGX_vector_bind)amgx_liblink(lib_handle, \"AMGX_vector_bind\");\n    /* Solver */\n    AMGX_solver_create                       = (t_AMGX_solver_create)amgx_liblink(lib_handle, \"AMGX_solver_create\");\n    AMGX_solver_destroy                      = (t_AMGX_solver_destroy)amgx_liblink(lib_handle, \"AMGX_solver_destroy\");\n    AMGX_solver_setup                        = (t_AMGX_solver_setup)amgx_liblink(lib_handle, \"AMGX_solver_setup\");\n    AMGX_solver_solve                        = (t_AMGX_solver_solve)amgx_liblink(lib_handle, \"AMGX_solver_solve\");\n    AMGX_solver_get_iterations_number        = (t_AMGX_solver_get_iterations_number)amgx_liblink(lib_handle, \"AMGX_solver_get_iterations_number\");\n    AMGX_solver_get_iteration_residual       = (t_AMGX_solver_get_iteration_residual)amgx_liblink(lib_handle, \"AMGX_solver_get_iteration_residual\");\n    AMGX_solver_get_status                   = (t_AMGX_solver_get_status)amgx_liblink(lib_handle, \"AMGX_solver_get_status\");\n    /* Utilities */\n    AMGX_write_system                        = (t_AMGX_write_system)amgx_liblink(lib_handle, \"AMGX_write_system\");\n    AMGX_write_system_distributed            = (t_AMGX_write_system_distributed)amgx_liblink(lib_handle, \"AMGX_write_system_distributed\");\n    AMGX_read_system                         = (t_AMGX_read_system)amgx_liblink(lib_handle, \"AMGX_read_system\");\n    AMGX_read_system_distributed             = (t_AMGX_read_system_distributed)amgx_liblink(lib_handle, \"AMGX_read_system_distributed\");\n    AMGX_read_system_maps_one_ring           = (t_AMGX_read_system_maps_one_ring)amgx_liblink(lib_handle, \"AMGX_read_system_maps_one_ring\");\n    AMGX_free_system_maps_one_ring           = (t_AMGX_free_system_maps_one_ring)amgx_liblink(lib_handle, \"AMGX_free_system_maps_one_ring\");\n    AMGX_generate_distributed_poisson_7pt    = (t_AMGX_generate_distributed_poisson_7pt)amgx_liblink(lib_handle, \"AMGX_generate_distributed_poisson_7pt\");\n    /* Experimental */\n    AMGX_matrix_attach_geometry              = (t_AMGX_matrix_attach_geometry)amgx_liblink(lib_handle, \"AMGX_matrix_attach_geometry\");\n    AMGX_matrix_attach_coloring              = (t_AMGX_matrix_attach_coloring)amgx_liblink(lib_handle, \"AMGX_matrix_attach_coloring\");\n    AMGX_read_system_global                  = (t_AMGX_read_system_global)amgx_liblink(lib_handle, \"AMGX_read_system_global\");\n    AMGX_matrix_upload_all_global            = (t_AMGX_matrix_upload_all_global)amgx_liblink(lib_handle, \"AMGX_matrix_upload_all_global\");\n    AMGX_matrix_upload_all_global_32        = (t_AMGX_matrix_upload_all_global_32)amgx_liblink(lib_handle, \"AMGX_matrix_upload_all_global_32\");\n    AMGX_matrix_upload_distributed          = (t_AMGX_matrix_upload_distributed)amgx_liblink(lib_handle, \"AMGX_matrix_upload_distributed\");\n\n    if (/* Build */\n        AMGX_get_api_version == NULL ||\n        AMGX_get_build_info_strings == NULL ||\n        AMGX_get_error_string == NULL ||\n        /* Init & Shutdown */\n        AMGX_initialize == NULL ||\n        AMGX_initialize_plugins == NULL ||\n        AMGX_finalize == NULL ||\n        AMGX_finalize_plugins == NULL ||\n        AMGX_abort == NULL ||\n        /* System */\n        AMGX_pin_memory == NULL ||\n        AMGX_unpin_memory == NULL ||\n        AMGX_install_signal_handler == NULL ||\n        AMGX_reset_signal_handler == NULL ||\n        AMGX_register_print_callback == NULL ||\n        /* Config */\n        AMGX_config_create == NULL ||\n        AMGX_config_add_parameters == NULL ||\n        AMGX_config_create_from_file == NULL ||\n        AMGX_config_create_from_file_and_string == NULL ||\n        AMGX_config_get_default_number_of_rings == NULL ||\n        AMGX_config_destroy == NULL ||\n        /* Resources */\n        AMGX_resources_create == NULL ||\n        AMGX_resources_create_simple == NULL ||\n        AMGX_resources_destroy == NULL ||\n        /* Distribution */\n        AMGX_distribution_create == NULL ||\n        AMGX_distribution_destroy == NULL ||\n        AMGX_distribution_set_partition_data == NULL ||\n        AMGX_distribution_set_32bit_colindices == NULL ||\n        /* Matrix */\n        AMGX_matrix_create == NULL ||\n        AMGX_matrix_destroy == NULL ||\n        AMGX_matrix_upload_all == NULL ||\n        AMGX_matrix_replace_coefficients == NULL ||\n        AMGX_matrix_get_size == NULL ||\n        AMGX_matrix_get_nnz  == NULL ||\n        AMGX_matrix_download_all  == NULL ||\n        AMGX_matrix_set_boundary_separation == NULL ||\n        AMGX_matrix_comm_from_maps == NULL ||\n        AMGX_matrix_comm_from_maps_one_ring == NULL ||\n        /* Vector */\n        AMGX_vector_create == NULL ||\n        AMGX_vector_destroy == NULL ||\n        AMGX_vector_upload == NULL ||\n        AMGX_vector_set_zero == NULL ||\n        AMGX_vector_download == NULL ||\n        AMGX_vector_get_size == NULL ||\n        AMGX_vector_bind == NULL ||\n        /* Solver */\n        AMGX_solver_create == NULL ||\n        AMGX_solver_destroy == NULL ||\n        AMGX_solver_setup == NULL ||\n        AMGX_solver_solve == NULL ||\n        AMGX_solver_get_iterations_number == NULL ||\n        AMGX_solver_get_iteration_residual == NULL ||\n        AMGX_solver_get_status == NULL ||\n        /* Utilities */\n        AMGX_write_system == NULL ||\n        AMGX_write_system_distributed == NULL ||\n        AMGX_read_system == NULL ||\n        AMGX_read_system_distributed == NULL ||\n        AMGX_read_system_maps_one_ring == NULL ||\n        AMGX_free_system_maps_one_ring == NULL ||\n        AMGX_generate_distributed_poisson_7pt == NULL ||\n        /* Experimental */\n        AMGX_matrix_attach_geometry == NULL ||\n        AMGX_matrix_attach_coloring == NULL ||\n        AMGX_read_system_global == NULL ||\n        AMGX_matrix_upload_all_global == NULL ||\n        AMGX_matrix_upload_all_global_32 == NULL ||\n        AMGX_matrix_upload_distributed == NULL)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1;\n    }\n}\n\n#if defined(__cplusplus)\n}//extern \"C\"\n#endif\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-amgx-2.1.0-4sohwr34lchgjnubf2vorb2zpe5fkwfw/spack-src/examples/amgxP_capi.h": "/* Copyright (c) 2011-2017, NVIDIA CORPORATION. All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions\n * are met:\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above copyright\n *    notice, this list of conditions and the following disclaimer in the\n *    documentation and/or other materials provided with the distribution.\n *  * Neither the name of NVIDIA CORPORATION nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS'' AND ANY\n * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n * PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n * OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\n#ifndef __AMGX_P_C_H_INCLUDE__\n#define __AMGX_P_C_H_INCLUDE__\n\n#if defined(__cplusplus)\nextern \"C\" {\n#endif\n\n/* WARNING: this is a private header file, it should not be publically exposed.\n            it contains experimental and internal routines used for testing */\ntypedef enum\n{\n    AMGX_TIMER_CPU = 1,\n    AMGX_TIMER_GPU = 2,\n    AMGX_TIMER_CREATE_AND_START = 4,\n    AMGX_TIMER_ACCUMULATE_AVERAGE = 8,\n} AMGX_TIMER_FLAGS;\n\ntypedef AMGX_RC (*_AMGX_timer_create)\n(const char *label,\n unsigned int flags);\n\ntypedef AMGX_RC (*_AMGX_timer_start)\n(const char *label);\n\n//get time upto this moment (do not stop the timer)\ntypedef AMGX_RC (*_AMGX_timer_elapsed)\n(const char *label,\n double *sec);\n\n//retrieve accumulated time upto this moment\ntypedef AMGX_RC (*_AMGX_timer_get_total)\n(const char *label,\n double *sec);\n\ntypedef AMGX_RC (*_AMGX_timer_stop)\n(const char *label,\n double *sec);\n\n// TODO figure out how to use multiple GPUs with one thread, should there be a resource_activate instead\ntypedef AMGX_RC (*_AMGX_set_device)\n(int device);\n\n// TODO might be needed for D1 interpolation, needs to be renamed to be more descriptive of what it does\ntypedef AMGX_RC (*_AMGX_matrix_sort)\n(AMGX_matrix_handle obj);\n\ntypedef AMGX_RC (*_AMGX_read_geometry)\n(const char *fname,\n double **geo_x,\n double **geo_y,\n double **geo_z,\n int *dim,\n int *numrows);\n\ntypedef AMGX_RC (*_AMGX_read_coloring)\n(const char *fname,\n int **row_coloring,\n int *colored_rows,\n int *num_colors);\n\ntypedef AMGX_RC (*_AMGX_read_system_with_cfg)\n(AMGX_matrix_handle mtx,\n AMGX_vector_handle rhs,\n AMGX_vector_handle sol,\n const char *filename,\n const AMGX_config_handle cfg_h);\n\n\n/*********************************************************\n * Setup dynamic loading of the library\n *********************************************************/\n#ifdef _WIN32\n#include \"windows.h\"\n#define amgx_libopen(path) (void*)(LoadLibrary(path))\n#define amgx_liblink(handle, symbol) GetProcAddress((HMODULE)(handle), symbol)\n#define amgx_libclose(handle) FreeLibrary((HMODULE)(handle))\n#endif\n\n#ifdef __unix__\n#include <dlfcn.h>\n#include <unistd.h>\n#define amgx_libopen(path) dlopen(path, RTLD_LAZY)\n#define amgx_liblink(handle, symbol) dlsym(handle, symbol)\n#define amgx_libclose(handle) dlclose(handle)\n#endif\n\n/* use types above to define function pointers */\n_AMGX_timer_create            AMGX_timer_create;\n_AMGX_timer_start             AMGX_timer_start;\n_AMGX_timer_elapsed           AMGX_timer_elapsed;\n_AMGX_timer_get_total         AMGX_timer_get_total;\n_AMGX_timer_stop              AMGX_timer_stop;\n_AMGX_matrix_sort             AMGX_matrix_sort;\n_AMGX_read_geometry           AMGX_read_geometry;\n_AMGX_read_coloring           AMGX_read_coloring;\n\nint amgxP_liblink_all(void *lib_handle)\n{\n    AMGX_timer_create            = (_AMGX_timer_create)amgx_liblink(lib_handle, \"AMGX_timer_create\");\n    AMGX_timer_start             = (_AMGX_timer_start)amgx_liblink(lib_handle, \"AMGX_timer_start\");\n    AMGX_timer_elapsed           = (_AMGX_timer_elapsed)amgx_liblink(lib_handle, \"AMGX_timer_elapsed\");\n    AMGX_timer_get_total         = (_AMGX_timer_get_total)amgx_liblink(lib_handle, \"AMGX_timer_get_total\");\n    AMGX_timer_stop              = (_AMGX_timer_stop)amgx_liblink(lib_handle, \"AMGX_timer_stop\");\n    AMGX_matrix_sort             = (_AMGX_matrix_sort)amgx_liblink(lib_handle, \"AMGX_matrix_sort\");\n    AMGX_read_geometry           = (_AMGX_read_geometry)amgx_liblink(lib_handle, \"AMGX_read_geometry\");\n    AMGX_read_coloring           = (_AMGX_read_coloring)amgx_liblink(lib_handle, \"AMGX_read_coloring\");\n    AMGX_read_system_with_cfg    = (_AMGX_read_system_with_cfg)amgx_liblink(lib_handle, \"_AMGX_read_system_with_cfg\");\n\n    if (AMGX_timer_create == NULL ||\n            AMGX_timer_start == NULL ||\n            AMGX_timer_elapsed == NULL ||\n            AMGX_timer_get_total == NULL ||\n            AMGX_timer_stop == NULL ||\n            AMGX_matrix_sort == NULL ||\n            AMGX_read_geometry == NULL ||\n            AMGX_read_coloring == NULL ||\n            AMGX_read_system_with_cfg == NULL)\n    {\n        return 0;\n    }\n    else\n    {\n        return 1;\n    }\n}\n\n#if defined(__cplusplus)\n}//extern \"C\"\n#endif\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-amgx-2.1.0-4sohwr34lchgjnubf2vorb2zpe5fkwfw/spack-src/doc/AMGX_Reference.pdf"
    ],
    "total_files": 707
}