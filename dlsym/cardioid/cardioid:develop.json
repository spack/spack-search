{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cardioid-develop-h7hurkntyyh52kmgp6ipunk3m2bkgwwk/spack-src/elec/reactionFactory.cc": "#include \"reactionFactory.hh\"\n\n#include <cassert>\n#include <cstdlib>\n#include <dlfcn.h>\n#ifndef BGQ //FIXME!!!\n#include <unordered_map>\n#else\n#include <map>\n#endif\n#include <mpi.h>\n#include \"object_cc.hh\"\n#include \"ioUtils.h\"\n#include \"mpiUtils.h\"\n#include \"ThreadServer.hh\"\n#include \"Anatomy.hh\"\n#include \"string.h\"\n\n#include <iostream>\nusing namespace std;\n\n#ifndef BGQ\n#define MAP unordered_map\n#else\n#define MAP map\n#endif\n\nstatic MAP<string,reactionFactoryFunction> g_factoryFromMethodName;\n\nReaction* reactionFactory(const string& name, double dt, const int numPoints,\n                          const ThreadTeam& group)\n{\n   static bool first = true;\n   if (first)\n   {\n      registerBuiltinReactions();\n      first = false;\n   }\n   \n   OBJECT* obj = objectFind(name, \"REACTION\");\n   string method; objectGet(obj, \"method\", method, \"undefined\");\n\n   MAP<string,reactionFactoryFunction>::iterator iter = g_factoryFromMethodName.find(method);\n   if (iter != g_factoryFromMethodName.end())\n   {\n      return iter->second(obj, dt, numPoints, group);\n   }\n   string filename = method;\n   if (filename[0]!='/')\n   {\n      filename = \"./\"+filename;\n   }\n   if (filetest(filename.c_str(),S_IFREG) == 0)\n   {\n      //try to load in the factory method\n      \n      void* handle = dlopen(filename.c_str(), RTLD_NOW|RTLD_LOCAL);\n      if (handle)\n      {\n         Reaction* (*factoryMethod)(OBJECT*,const double,const int,const ThreadTeam&) = reinterpret_cast<Reaction*(*)(OBJECT*,const double,const int,const ThreadTeam&)>(dlsym(handle,\"factory\"));\n         if (factoryMethod)\n         {\n            return factoryMethod(obj, dt, numPoints, group);\n         }\n      }\n      else\n      {\n         cerr << \"Cant load dynamic module \" << filename << \": \" << dlerror() << endl;\n      }\n   }\n   {\n      int myRank;\n      MPI_Comm_rank(MPI_COMM_WORLD, &myRank);\n   \n      if (myRank == 0)\n         cerr<<\"ERROR: Undefined reaction model in reactionFactory\"<<endl;\n      assert(false); // reachable only due to bad input\n      return 0;\n   }\n}\n\nvoid registerReactionFactory(const string method, reactionFactoryFunction scanFunc)\n{\n   g_factoryFromMethodName[method] = scanFunc;\n}\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cardioid-develop-h7hurkntyyh52kmgp6ipunk3m2bkgwwk/spack-src/.git/objects/pack/pack-1903ea8096df00db42824f6698d069297b0ed14c.pack",
        "/tmp/vanessa/spack-stage/spack-stage-cardioid-develop-h7hurkntyyh52kmgp6ipunk3m2bkgwwk/spack-src/.git/objects/pack/pack-1903ea8096df00db42824f6698d069297b0ed14c.idx",
        "/tmp/vanessa/spack-stage/spack-stage-cardioid-develop-h7hurkntyyh52kmgp6ipunk3m2bkgwwk/spack-src/test/tests/NiedererTest/Phil. Trans. R. Soc. A-2011-Niederer-4331-51.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cardioid-develop-h7hurkntyyh52kmgp6ipunk3m2bkgwwk/spack-src/elec/objs_precompiled-bgq-spi/TT06GatesSimd.o",
        "/tmp/vanessa/spack-stage/spack-stage-cardioid-develop-h7hurkntyyh52kmgp6ipunk3m2bkgwwk/spack-src/elec/doc/graphics/pulseTrain.png",
        "/tmp/vanessa/spack-stage/spack-stage-cardioid-develop-h7hurkntyyh52kmgp6ipunk3m2bkgwwk/spack-src/tools/create_stim_objs/example_pvsm_files.tar.gz"
    ],
    "total_files": 1451
}