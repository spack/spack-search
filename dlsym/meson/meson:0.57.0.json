{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/149 shared module resolving symbol in executable/prog.c": "#include <stdio.h>\n#include <assert.h>\n#ifdef _WIN32\n#include <windows.h>\n#else\n#include <dlfcn.h>\n#endif\n\n#if defined _WIN32 || defined __CYGWIN__\n  #define DLL_PUBLIC __declspec(dllexport)\n#else\n  #if defined __GNUC__\n    #define DLL_PUBLIC __attribute__ ((visibility(\"default\")))\n  #else\n    #pragma message (\"Compiler does not support symbol visibility.\")\n    #define DLL_PUBLIC\n  #endif\n#endif\n\ntypedef int (*fptr) (void);\n\nint DLL_PUBLIC\nfunc_from_executable(void)\n{\n  return 42;\n}\n\nint main(int argc, char **argv)\n{\n  int expected, actual;\n  fptr importedfunc;\n\n  if (argc=0) {};  // noop\n\n#ifdef _WIN32\n  HMODULE h = LoadLibraryA(argv[1]);\n#else\n  void *h = dlopen(argv[1], RTLD_NOW);\n#endif\n  assert(h != NULL);\n\n#ifdef _WIN32\n  importedfunc = (fptr) GetProcAddress (h, \"func\");\n#else\n  importedfunc = (fptr) dlsym(h, \"func\");\n#endif\n  assert(importedfunc != NULL);\n  assert(importedfunc != func_from_executable);\n\n  actual = (*importedfunc)();\n  expected = func_from_executable();\n  assert(actual == expected);\n\n#ifdef _WIN32\n  FreeLibrary(h);\n#else\n  dlclose(h);\n#endif\n\n  return 0;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/118 shared module/prog.c": "\n#include <stdio.h>\n\nint func_from_language_runtime(void);\ntypedef int (*fptr) (void);\n\n#ifdef _WIN32\n\n#include <windows.h>\n\nstatic wchar_t*\nwin32_get_last_error (void)\n{\n    wchar_t *msg = NULL;\n\n    FormatMessageW (FORMAT_MESSAGE_ALLOCATE_BUFFER\n                    | FORMAT_MESSAGE_IGNORE_INSERTS\n                    | FORMAT_MESSAGE_FROM_SYSTEM,\n                    NULL, GetLastError (), 0,\n                    (LPWSTR) &msg, 0, NULL);\n    return msg;\n}\n\nint main(int argc, char **argv)\n{\n    HINSTANCE handle;\n    fptr importedfunc;\n    int expected, actual;\n    int ret = 1;\n    if(argc==0) {};\n\n    handle = LoadLibraryA (argv[1]);\n    if (!handle) {\n        wchar_t *msg = win32_get_last_error ();\n        printf (\"Could not open %s: %S\\n\", argv[1], msg);\n        goto nohandle;\n    }\n\n    importedfunc = (fptr) GetProcAddress (handle, \"func\");\n    if (importedfunc == NULL) {\n        wchar_t *msg = win32_get_last_error ();\n        printf (\"Could not find 'func': %S\\n\", msg);\n        goto out;\n    }\n\n    actual = importedfunc ();\n    expected = func_from_language_runtime ();\n    if (actual != expected) {\n        printf (\"Got %i instead of %i\\n\", actual, expected);\n        goto out;\n    }\n\n    ret = 0;\nout:\n    FreeLibrary (handle);\nnohandle:\n    return ret;\n}\n\n#else\n\n#include<dlfcn.h>\n#include<assert.h>\n\nint main(int argc, char **argv) {\n    void *dl;\n    fptr importedfunc;\n    int expected, actual;\n    char *error;\n    int ret = 1;\n    if(argc==0) {};\n\n    dlerror();\n    dl = dlopen(argv[1], RTLD_LAZY);\n    error = dlerror();\n    if(error) {\n        printf(\"Could not open %s: %s\\n\", argv[1], error);\n        goto nodl;\n    }\n\n    importedfunc = (fptr) dlsym(dl, \"func\");\n    if (importedfunc == NULL) {\n        printf (\"Could not find 'func'\\n\");\n        goto out;\n    }\n\n    assert(importedfunc != func_from_language_runtime);\n\n    actual = (*importedfunc)();\n    expected = func_from_language_runtime ();\n    if (actual != expected) {\n        printf (\"Got %i instead of %i\\n\", actual, expected);\n        goto out;\n    }\n\n    ret = 0;\nout:\n    dlclose(dl);\nnodl:\n    return ret;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/118 shared module/module.c": "#if defined _WIN32 || defined __CYGWIN__\n  #define DLL_PUBLIC __declspec(dllexport)\n#else\n  #if defined __GNUC__\n    #define DLL_PUBLIC __attribute__ ((visibility(\"default\")))\n  #else\n    #pragma message (\"Compiler does not support symbol visibility.\")\n    #define DLL_PUBLIC\n  #endif\n#endif\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n\n#include <stdio.h>\n\ntypedef int (*fptr) (void);\n\n#ifdef __CYGWIN__\n\n#include <dlfcn.h>\n\nfptr find_any_f (const char *name) {\n    return (fptr) dlsym(RTLD_DEFAULT, name);\n}\n#else /* _WIN32 */\n\n#include <windows.h>\n#include <tlhelp32.h>\n\nstatic wchar_t*\nwin32_get_last_error (void)\n{\n    wchar_t *msg = NULL;\n\n    FormatMessageW (FORMAT_MESSAGE_ALLOCATE_BUFFER\n                    | FORMAT_MESSAGE_IGNORE_INSERTS\n                    | FORMAT_MESSAGE_FROM_SYSTEM,\n                    NULL, GetLastError (), 0,\n                    (LPWSTR) &msg, 0, NULL);\n    return msg;\n}\n\n/* Unlike Linux and OS X, when a library is loaded, all the symbols aren't\n * loaded into a single namespace. You must fetch the symbol by iterating over\n * all loaded modules. Code for finding the function from any of the loaded\n * modules is taken from gmodule.c in glib */\nfptr find_any_f (const char *name) {\n    fptr f;\n    HANDLE snapshot;\n    MODULEENTRY32 me32;\n\n    snapshot = CreateToolhelp32Snapshot (TH32CS_SNAPMODULE, 0);\n    if (snapshot == (HANDLE) -1) {\n        wchar_t *msg = win32_get_last_error();\n        printf(\"Could not get snapshot: %S\\n\", msg);\n        return 0;\n    }\n\n    me32.dwSize = sizeof (me32);\n\n    f = NULL;\n    if (Module32First (snapshot, &me32)) {\n        do {\n            if ((f = (fptr) GetProcAddress (me32.hModule, name)) != NULL)\n                break;\n        } while (Module32Next (snapshot, &me32));\n    }\n\n    CloseHandle (snapshot);\n    return f;\n}\n#endif\n\nint DLL_PUBLIC func(void) {\n    fptr f;\n\n    f = find_any_f (\"func_from_language_runtime\");\n    if (f != NULL)\n        return f();\n    printf (\"Could not find function\\n\");\n    return 1;\n}\n\n#else\n/*\n * Shared modules often have references to symbols that are not defined\n * at link time, but which will be provided from deps of the executable that\n * dlopens it. We need to make sure that this works, i.e. that we do\n * not pass -Wl,--no-undefined when linking modules.\n */\nint func_from_language_runtime(void);\n\nint DLL_PUBLIC func(void) {\n    return func_from_language_runtime();\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/cmake/21 shared module/prog.c": "\n#include <stdio.h>\n#include \"module.h\"\n\n#if SPECIAL_MAGIC_DEFINE != 42\n#error \"SPECIAL_MAGIC_DEFINE is not defined\"\n#endif\n\nint func_from_language_runtime(void);\ntypedef int (*fptr) (void);\n\n#ifdef _WIN32\n\n#include <windows.h>\n\nstatic wchar_t*\nwin32_get_last_error (void)\n{\n    wchar_t *msg = NULL;\n\n    FormatMessageW (FORMAT_MESSAGE_ALLOCATE_BUFFER\n                    | FORMAT_MESSAGE_IGNORE_INSERTS\n                    | FORMAT_MESSAGE_FROM_SYSTEM,\n                    NULL, GetLastError (), 0,\n                    (LPWSTR) &msg, 0, NULL);\n    return msg;\n}\n\nint main(int argc, char **argv)\n{\n    HINSTANCE handle;\n    fptr importedfunc;\n    int expected, actual;\n    int ret = 1;\n    if(argc==0) {};\n\n    handle = LoadLibraryA (argv[1]);\n    if (!handle) {\n        wchar_t *msg = win32_get_last_error ();\n        printf (\"Could not open %s: %S\\n\", argv[1], msg);\n        goto nohandle;\n    }\n\n    importedfunc = (fptr) GetProcAddress (handle, \"func\");\n    if (importedfunc == NULL) {\n        wchar_t *msg = win32_get_last_error ();\n        printf (\"Could not find 'func': %S\\n\", msg);\n        goto out;\n    }\n\n    actual = importedfunc ();\n    expected = func_from_language_runtime ();\n    if (actual != expected) {\n        printf (\"Got %i instead of %i\\n\", actual, expected);\n        goto out;\n    }\n\n    ret = 0;\nout:\n    FreeLibrary (handle);\nnohandle:\n    return ret;\n}\n\n#else\n\n#include<dlfcn.h>\n#include<assert.h>\n\nint main(int argc, char **argv) {\n    void *dl;\n    fptr importedfunc;\n    int expected, actual;\n    char *error;\n    int ret = 1;\n    if(argc==0) {};\n\n    dlerror();\n    dl = dlopen(argv[1], RTLD_LAZY);\n    error = dlerror();\n    if(error) {\n        printf(\"Could not open %s: %s\\n\", argv[1], error);\n        goto nodl;\n    }\n\n    importedfunc = (fptr) dlsym(dl, \"func\");\n    if (importedfunc == NULL) {\n        printf (\"Could not find 'func'\\n\");\n        goto out;\n    }\n\n    assert(importedfunc != func_from_language_runtime);\n\n    actual = (*importedfunc)();\n    expected = func_from_language_runtime ();\n    if (actual != expected) {\n        printf (\"Got %i instead of %i\\n\", actual, expected);\n        goto out;\n    }\n\n    ret = 0;\nout:\n    dlclose(dl);\nnodl:\n    return ret;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/cmake/21 shared module/subprojects/cmMod/module/module.c": "#if defined _WIN32 || defined __CYGWIN__\n  #define DLL_PUBLIC __declspec(dllexport)\n#else\n  #if defined __GNUC__\n    #define DLL_PUBLIC __attribute__ ((visibility(\"default\")))\n  #else\n    #pragma message (\"Compiler does not support symbol visibility.\")\n    #define DLL_PUBLIC\n  #endif\n#endif\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n\n#include <stdio.h>\n\ntypedef int (*fptr) (void);\n\n#ifdef __CYGWIN__\n\n#include <dlfcn.h>\n\nfptr find_any_f (const char *name) {\n    return (fptr) dlsym(RTLD_DEFAULT, name);\n}\n#else /* _WIN32 */\n\n#include <windows.h>\n#include <tlhelp32.h>\n\nstatic wchar_t*\nwin32_get_last_error (void)\n{\n    wchar_t *msg = NULL;\n\n    FormatMessageW (FORMAT_MESSAGE_ALLOCATE_BUFFER\n                    | FORMAT_MESSAGE_IGNORE_INSERTS\n                    | FORMAT_MESSAGE_FROM_SYSTEM,\n                    NULL, GetLastError (), 0,\n                    (LPWSTR) &msg, 0, NULL);\n    return msg;\n}\n\n/* Unlike Linux and OS X, when a library is loaded, all the symbols aren't\n * loaded into a single namespace. You must fetch the symbol by iterating over\n * all loaded modules. Code for finding the function from any of the loaded\n * modules is taken from gmodule.c in glib */\nfptr find_any_f (const char *name) {\n    fptr f;\n    HANDLE snapshot;\n    MODULEENTRY32 me32;\n\n    snapshot = CreateToolhelp32Snapshot (TH32CS_SNAPMODULE, 0);\n    if (snapshot == (HANDLE) -1) {\n        wchar_t *msg = win32_get_last_error();\n        printf(\"Could not get snapshot: %S\\n\", msg);\n        return 0;\n    }\n\n    me32.dwSize = sizeof (me32);\n\n    f = NULL;\n    if (Module32First (snapshot, &me32)) {\n        do {\n            if ((f = (fptr) GetProcAddress (me32.hModule, name)) != NULL)\n                break;\n        } while (Module32Next (snapshot, &me32));\n    }\n\n    CloseHandle (snapshot);\n    return f;\n}\n#endif\n\nint DLL_PUBLIC func(void) {\n    fptr f;\n\n    f = find_any_f (\"func_from_language_runtime\");\n    if (f != NULL)\n        return f();\n    printf (\"Could not find function\\n\");\n    return 1;\n}\n\n#else\n/*\n * Shared modules often have references to symbols that are not defined\n * at link time, but which will be provided from deps of the executable that\n * dlopens it. We need to make sure that this works, i.e. that we do\n * not pass -Wl,--no-undefined when linking modules.\n */\nint func_from_language_runtime(void);\n\nint DLL_PUBLIC func(void) {\n    return func_from_language_runtime();\n}\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/manual tests/4 standalone binaries/myapp.icns",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/manual tests/4 standalone binaries/template.dmg.gz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/graphics/meson_logo_big.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/14 configure file/invalid-utf8.bin.in",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/14 configure file/config8.h.in",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/99 subproject subdir/subprojects/sub_implicit/subprojects/subsub/subprojects/packagefiles/subsubsub-1.0.zip",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/154 wrap file should not failed/subprojects/packagefiles/bar-1.0-patch.tar.xz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/154 wrap file should not failed/subprojects/packagefiles/bar-1.0.tar.xz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/154 wrap file should not failed/subprojects/packagecache/zlib-1.2.8.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/154 wrap file should not failed/subprojects/packagecache/zlib-1.2.8-8-wrap.zip",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/154 wrap file should not failed/subprojects/packagecache/foo-1.0.tar.xz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/common/154 wrap file should not failed/subprojects/packagecache/foo-1.0-patch.tar.xz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/windows/14 resources with custom target depend_files/ico/sample.ico.in",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/windows/5 resources/res/sample.ico",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/windows/12 resources with custom targets/res/sample.ico",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/osx/4 framework/xcode-frameworks.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/unit/74 wrap file url/subprojects/foo-patch.tar.xz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/unit/74 wrap file url/subprojects/foo.tar.xz",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/frameworks/4 qt/thing.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/frameworks/4 qt/thing2.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/test cases/frameworks/4 qt/subfolder/resources/thing.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/py3-install-3.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/py3-install-2.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/win_vstoolsprompt.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/glib_empty.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/buildtime.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/osx_xcode.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/glib_build.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/gtksample.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/conftime.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/osx_working.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/win_dlvs.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/osx_download.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/win_working.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/win_downloadmeson.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/win_installvs.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/glib_conf.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/emptytime.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/py3-install-1.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/linux_alldone.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/markdown/images/glib_link.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/theme/extra/images/meson_logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-meson-0.57.0-fkq52jj2p5wtejxbznb4wobkzizld6fl/spack-src/docs/theme/extra/images/favicon.png"
    ],
    "total_files": 3572
}