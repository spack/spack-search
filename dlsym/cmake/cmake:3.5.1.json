{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/kwsys/DynamicLoader.cxx": "/*============================================================================\n  KWSys - Kitware System Library\n  Copyright 2000-2009 Kitware, Inc., Insight Software Consortium\n\n  Distributed under the OSI-approved BSD License (the \"License\");\n  see accompanying file Copyright.txt for details.\n\n  This software is distributed WITHOUT ANY WARRANTY; without even the\n  implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n  See the License for more information.\n============================================================================*/\n#include \"kwsysPrivate.h\"\n#include KWSYS_HEADER(DynamicLoader.hxx)\n\n#include KWSYS_HEADER(Configure.hxx)\n\n// Work-around CMake dependency scanning limitation.  This must\n// duplicate the above list of headers.\n#if 0\n# include \"DynamicLoader.hxx.in\"\n# include \"Configure.hxx.in\"\n#endif\n\n// This file is actually 3 different implementations.\n// 1. HP machines which uses shl_load\n// 2. Mac OS X 10.2.x and earlier which uses NSLinkModule\n// 3. Windows which uses LoadLibrary\n// 4. Most unix systems (including Mac OS X 10.3 and later) which use dlopen\n// (default) Each part of the ifdef contains a complete implementation for\n// the static methods of DynamicLoader.\n\n// ---------------------------------------------------------------\n// 1. Implementation for HPUX  machines\n#ifdef __hpux\n#include <errno.h>\n#include <dl.h>\n#define DYNAMICLOADER_DEFINED 1\n\nnamespace KWSYS_NAMESPACE\n{\n\n//----------------------------------------------------------------------------\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(const std::string& libname )\n{\n  return shl_load(libname.c_str(), BIND_DEFERRED | DYNAMIC_PATH, 0L);\n}\n\n//----------------------------------------------------------------------------\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (!lib)\n    {\n    return 0;\n    }\n  return !shl_unload(lib);\n}\n\n//----------------------------------------------------------------------------\nDynamicLoader::SymbolPointer\nDynamicLoader::GetSymbolAddress(DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  void* addr;\n  int status;\n\n  /* TYPE_PROCEDURE Look for a function or procedure. (This used to be default)\n   * TYPE_DATA      Look for a symbol in the data segment (for example, variables).\n   * TYPE_UNDEFINED Look for any symbol.\n   */\n  status = shl_findsym (&lib, sym.c_str(), TYPE_UNDEFINED, &addr);\n  void* result = (status < 0) ? (void*)0 : addr;\n\n  // Hack to cast pointer-to-data to pointer-to-function.\n  return *reinterpret_cast<DynamicLoader::SymbolPointer*>(&result);\n}\n\nconst char* DynamicLoader::LastError()\n{\n  // TODO: Need implementation with errno/strerror\n  /* If successful, shl_findsym returns an integer (int) value zero. If\n   * shl_findsym cannot find sym, it returns -1 and sets errno to zero.\n   * If any other errors occur, shl_findsym returns -1 and sets errno to one\n   * of these values (defined in <errno.h>):\n   * ENOEXEC\n   * A format error was detected in the specified library.\n   * ENOSYM\n   * A symbol on which sym depends could not be found.\n   * EINVAL\n   * The specified handle is invalid.\n   */\n\n  if(  errno == ENOEXEC\n    || errno == ENOSYM\n    || errno == EINVAL )\n    {\n    return strerror(errno);\n    }\n  // else\n  return 0;\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#endif //__hpux\n\n\n// ---------------------------------------------------------------\n// 2. Implementation for Mac OS X 10.2.x and earlier\n#ifdef __APPLE__\n#if MAC_OS_X_VERSION_MAX_ALLOWED < 1030\n#include <string.h> // for strlen\n#include <mach-o/dyld.h>\n#define DYNAMICLOADER_DEFINED 1\n\nnamespace KWSYS_NAMESPACE\n{\n\n//----------------------------------------------------------------------------\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(const std::string& libname )\n{\n  NSObjectFileImageReturnCode rc;\n  NSObjectFileImage image = 0;\n\n  rc = NSCreateObjectFileImageFromFile(libname.c_str(), &image);\n  // rc == NSObjectFileImageInappropriateFile when trying to load a dylib file\n  if( rc != NSObjectFileImageSuccess )\n    {\n    return 0;\n    }\n  NSModule handle = NSLinkModule(image, libname.c_str(),\n    NSLINKMODULE_OPTION_BINDNOW|NSLINKMODULE_OPTION_RETURN_ON_ERROR);\n  NSDestroyObjectFileImage(image);\n  return handle;\n}\n\n//----------------------------------------------------------------------------\nint DynamicLoader::CloseLibrary( DynamicLoader::LibraryHandle lib)\n{\n  // NSUNLINKMODULE_OPTION_KEEP_MEMORY_MAPPED\n  // With  this  option  the memory for the module is not deallocated\n  // allowing pointers into the module to still be valid.\n  // You should use this option instead if your code experience some problems\n  // reported against Panther 10.3.9 (fixed in Tiger 10.4.2 and up)\n  bool success = NSUnLinkModule(lib, NSUNLINKMODULE_OPTION_NONE);\n  return success;\n}\n\n//----------------------------------------------------------------------------\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  void *result=0;\n  // Need to prepend symbols with '_' on Apple-gcc compilers\n  size_t len = sym.size();\n  char *rsym = new char[len + 1 + 1];\n  strcpy(rsym, \"_\");\n  strcat(rsym+1, sym.c_str());\n\n  NSSymbol symbol = NSLookupSymbolInModule(lib, rsym);\n  if(symbol)\n    {\n    result = NSAddressOfSymbol(symbol);\n    }\n\n  delete[] rsym;\n  // Hack to cast pointer-to-data to pointer-to-function.\n  return *reinterpret_cast<DynamicLoader::SymbolPointer*>(&result);\n}\n\n//----------------------------------------------------------------------------\nconst char* DynamicLoader::LastError()\n{\n  return 0;\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#endif // MAC_OS_X_VERSION_MAX_ALLOWED < 1030\n#endif // __APPLE__\n\n// ---------------------------------------------------------------\n// 3. Implementation for Windows win32 code but not cygwin\n#if defined(_WIN32) && !defined(__CYGWIN__)\n#include <windows.h>\n#define DYNAMICLOADER_DEFINED 1\n\nnamespace KWSYS_NAMESPACE\n{\n\n//----------------------------------------------------------------------------\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(const std::string& libname)\n{\n  DynamicLoader::LibraryHandle lh;\n  int length = MultiByteToWideChar(CP_UTF8, 0, libname.c_str(), -1, NULL, 0);\n  wchar_t* wchars = new wchar_t[length+1];\n  wchars[0] = '\\0';\n  MultiByteToWideChar(CP_UTF8, 0, libname.c_str(), -1, wchars, length);\n  lh = LoadLibraryW(wchars);\n  delete [] wchars;\n  return lh;\n}\n\n//----------------------------------------------------------------------------\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  return (int)FreeLibrary(lib);\n}\n\n//----------------------------------------------------------------------------\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // TODO: The calling convention affects the name of the symbol.  We\n  // should have a tool to help get the symbol with the desired\n  // calling convention.  Currently we assume cdecl.\n  //\n  // Borland:\n  //   __cdecl    = \"_func\" (default)\n  //   __fastcall = \"@_func\"\n  //   __stdcall  = \"func\"\n  //\n  // Watcom:\n  //   __cdecl    = \"_func\"\n  //   __fastcall = \"@_func@X\"\n  //   __stdcall  = \"_func@X\"\n  //   __watcall  = \"func_\" (default)\n  //\n  // MSVC:\n  //   __cdecl    = \"func\" (default)\n  //   __fastcall = \"@_func@X\"\n  //   __stdcall  = \"_func@X\"\n  //\n  // Note that the \"@X\" part of the name above is the total size (in\n  // bytes) of the arguments on the stack.\n  void *result;\n#if defined(__BORLANDC__) || defined(__WATCOMC__)\n  // Need to prepend symbols with '_'\n  size_t len = sym.size();\n  char *rsym = new char[len + 1 + 1];\n  strcpy(rsym, \"_\");\n  strcat(rsym, sym.c_str());\n#else\n  const char *rsym = sym.c_str();\n#endif\n  result = (void*)GetProcAddress(lib, rsym);\n#if defined(__BORLANDC__) || defined(__WATCOMC__)\n  delete[] rsym;\n#endif\n  // Hack to cast pointer-to-data to pointer-to-function.\n#ifdef __WATCOMC__\n  return *(DynamicLoader::SymbolPointer*)(&result);\n#else\n  return *reinterpret_cast<DynamicLoader::SymbolPointer*>(&result);\n#endif\n}\n\n//----------------------------------------------------------------------------\nconst char* DynamicLoader::LastError()\n{\n  LPVOID lpMsgBuf=NULL;\n\n  FormatMessage(\n    FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,\n    NULL,\n    GetLastError(),\n    MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), // Default language\n    (LPTSTR) &lpMsgBuf,\n    0,\n    NULL\n    );\n\n  if(!lpMsgBuf)\n    {\n    return NULL;\n    }\n\n  static char* str = 0;\n  delete [] str;\n  str = strcpy(new char[strlen((char*)lpMsgBuf)+1], (char*)lpMsgBuf);\n  // Free the buffer.\n  LocalFree( lpMsgBuf );\n  return str;\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#endif //_WIN32\n\n// ---------------------------------------------------------------\n// 4. Implementation for BeOS\n#if defined __BEOS__\n\n#include <string.h> // for strerror()\n\n#include <be/kernel/image.h>\n#include <be/support/Errors.h>\n\n#define DYNAMICLOADER_DEFINED 1\n\nnamespace KWSYS_NAMESPACE\n{\n\nstatic image_id last_dynamic_err = B_OK;\n\n//----------------------------------------------------------------------------\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(const std::string& libname )\n{\n  // image_id's are integers, errors are negative. Add one just in case we\n  //  get a valid image_id of zero (is that even possible?).\n  image_id rc = load_add_on(libname.c_str());\n  if (rc < 0)\n    {\n    last_dynamic_err = rc;\n    return 0;\n    }\n\n  return rc+1;\n}\n\n//----------------------------------------------------------------------------\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (!lib)\n    {\n      last_dynamic_err = B_BAD_VALUE;\n      return 0;\n    }\n  else\n    {\n    // The function dlclose() returns 0 on success, and non-zero on error.\n    status_t rc = unload_add_on(lib-1);\n    if (rc != B_OK)\n      {\n      last_dynamic_err = rc;\n      return 0;\n      }\n    }\n\n  return 1;\n}\n\n//----------------------------------------------------------------------------\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // Hack to cast pointer-to-data to pointer-to-function.\n  union \n  {\n    void* pvoid;\n    DynamicLoader::SymbolPointer psym;\n  } result;\n\n  result.psym = NULL;\n\n  if (!lib)\n    {\n      last_dynamic_err = B_BAD_VALUE;\n    }\n  else\n    {\n    // !!! FIXME: BeOS can do function-only lookups...does this ever\n    // !!! FIXME:  actually _want_ a data symbol lookup, or was this union\n    // !!! FIXME:  a leftover of dlsym()? (s/ANY/TEXT for functions only).\n    status_t rc = get_image_symbol(lib-1,sym.c_str(),B_SYMBOL_TYPE_ANY,&result.pvoid);\n    if (rc != B_OK)\n      {\n      last_dynamic_err = rc;\n      result.psym = NULL;\n      }\n    }\n  return result.psym;\n}\n\n//----------------------------------------------------------------------------\nconst char* DynamicLoader::LastError()\n{\n  const char *retval = strerror(last_dynamic_err);\n  last_dynamic_err = B_OK;\n  return retval;\n}\n\n} // namespace KWSYS_NAMESPACE\n#endif\n\n// ---------------------------------------------------------------\n// 5. Implementation for systems without dynamic libs\n// __gnu_blrts__ is IBM BlueGene/L\n// __LIBCATAMOUNT__ is defined on Catamount on Cray compute nodes\n#if defined(__gnu_blrts__) || defined(__LIBCATAMOUNT__) || defined(__CRAYXT_COMPUTE_LINUX_TARGET)\n#include <string.h> // for strerror()\n#define DYNAMICLOADER_DEFINED 1\n\nnamespace KWSYS_NAMESPACE\n{\n\n//----------------------------------------------------------------------------\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(const std::string& libname )\n{\n  return 0;\n}\n\n//----------------------------------------------------------------------------\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (!lib)\n    {\n    return 0;\n    }\n\n  return 1;\n}\n\n//----------------------------------------------------------------------------\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n    DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  return 0;\n}\n\n//----------------------------------------------------------------------------\nconst char* DynamicLoader::LastError()\n  {\n  return \"General error\";\n  }\n\n} // namespace KWSYS_NAMESPACE\n#endif\n\n#ifdef __MINT__\n#define DYNAMICLOADER_DEFINED 1\n#define _GNU_SOURCE /* for program_invocation_name */\n#include <string.h>\n#include <malloc.h>\n#include <errno.h>\n#include <dld.h>\n\nnamespace KWSYS_NAMESPACE\n{\n\n//----------------------------------------------------------------------------\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(const std::string& libname )\n{\n  char *name = (char *)calloc(1, libname.size() + 1);\n  dld_init(program_invocation_name);\n  strncpy(name, libname.c_str(), libname.size());\n  dld_link(libname.c_str());\n  return (void *)name;\n}\n\n//----------------------------------------------------------------------------\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  dld_unlink_by_file((char *)lib, 0);\n  free(lib);\n  return 0;\n}\n\n//----------------------------------------------------------------------------\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // Hack to cast pointer-to-data to pointer-to-function.\n  union\n  {\n    void* pvoid;\n    DynamicLoader::SymbolPointer psym;\n  } result;\n  result.pvoid = dld_get_symbol(sym.c_str());\n  return result.psym;\n}\n\n//----------------------------------------------------------------------------\nconst char* DynamicLoader::LastError()\n{\n  return dld_strerror(dld_errno);\n}\n\n} // namespace KWSYS_NAMESPACE\n#endif\n\n// ---------------------------------------------------------------\n// 6. Implementation for default UNIX machines.\n// if nothing has been defined then use this\n#ifndef DYNAMICLOADER_DEFINED\n#define DYNAMICLOADER_DEFINED 1\n// Setup for most unix machines\n#include <dlfcn.h>\n\nnamespace KWSYS_NAMESPACE\n{\n\n//----------------------------------------------------------------------------\nDynamicLoader::LibraryHandle DynamicLoader::OpenLibrary(const std::string& libname )\n{\n  return dlopen(libname.c_str(), RTLD_LAZY);\n}\n\n//----------------------------------------------------------------------------\nint DynamicLoader::CloseLibrary(DynamicLoader::LibraryHandle lib)\n{\n  if (lib)\n    {\n    // The function dlclose() returns 0 on success, and non-zero on error.\n    return !dlclose(lib);\n    }\n  // else\n  return 0;\n}\n\n//----------------------------------------------------------------------------\nDynamicLoader::SymbolPointer DynamicLoader::GetSymbolAddress(\n  DynamicLoader::LibraryHandle lib, const std::string& sym)\n{\n  // Hack to cast pointer-to-data to pointer-to-function.\n  union \n  {\n    void* pvoid;\n    DynamicLoader::SymbolPointer psym;\n  } result;\n  result.pvoid = dlsym(lib, sym.c_str());\n  return result.psym;\n}\n\n//----------------------------------------------------------------------------\nconst char* DynamicLoader::LastError()\n{\n  return dlerror();\n}\n\n} // namespace KWSYS_NAMESPACE\n\n#endif\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/CMakeLogo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/CMakeVSMacros2.vsmacros",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/CMakeVSMacros1.vsmacros",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/Windows/Windows_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/Windows/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/Windows/SmallLogo44x44.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/Windows/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/Windows/ApplicationIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/Windows/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Templates/Windows/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProjectLocal/Step1NoDir.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProjectLocal/Step1.zip",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProjectLocal/Step1.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProjectLocal/Step1NoDir.zip",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProjectLocal/Step1NoDir.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProjectLocal/Step1.tar.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProject/gitrepo.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProject/hgrepo.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProject/gitrepo-sub.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProject/svnrepo.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProject/cvsrepo.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/CFBundleTest/Localized.rsrc",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/CMakeTests/FileDownloadInput.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/CMakeTests/ELF/elf64lsb.bin",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/CMakeTests/ELF/elf32lsb.bin",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/CMakeTests/ELF/elf32msb.bin",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/CMakeTests/ELF/elf64msb.bin",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/MFC/mfc1/res/Toolbar.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/MFC/mfc1/res/mfc1Doc.ico",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/MFC/mfc1/res/mfc1.ico",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/BundleGeneratorTest/CustomVolumeIcon.icns",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/BundleGeneratorTest/BundleIcon.icns",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/StringFileTest/test.utf8",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/CommandLine/cmake_depends/test_UTF-16LE.h",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/Syntax/BOM-UTF-32-LE.cmake",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/Syntax/BOM-UTF-32-BE.cmake",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/Syntax/BOM-UTF-16-BE.cmake",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/Syntax/BOM-UTF-16-LE.cmake",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/configure_file/UTF32LE-BOM.txt.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/configure_file/UTF16LE-BOM.txt.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/configure_file/UTF16BE-BOM.txt.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/configure_file/UTF32BE-BOM.txt.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/string/UTF-32BE.txt",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/string/UTF-32LE.txt",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/string/UTF-16BE.txt",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/RunCMake/string/UTF-16LE.txt",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ExternalProjectUpdate/gitrepo.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/ObjectLibrary/dummy.obj",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/SimplePixelShader.cso",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Direct3DApp1_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/SimpleVertexShader.cso",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/Logo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/SmallLogo44x44.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/SplashScreen.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/ApplicationIcon.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/SmallLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/StoreLogo.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/Tiles/FlipCycleTileMedium.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/Tiles/IconicTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/Tiles/IconicTileMediumLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/Tiles/FlipCycleTileSmall.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSWinStorePhone/Direct3DApp1/Assets/Tiles/FlipCycleTileLarge.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSXaml/VSXaml_TemporaryKey.pfx",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSXaml/Assets/SmallLogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSXaml/Assets/Logo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSXaml/Assets/StoreLogo.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Tests/VSXaml/Assets/SplashScreen.scale-100.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/Sphinx/static/cmake-logo-16.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/Sphinx/static/cmake-favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/sample2.tst",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/sample1.tst",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/sample3.rb2",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/libbz2.lib",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/manual.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/libbz2.dsp",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/manual.html",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/sample2.ref",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/sample1.rb2",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/sample1.ref",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/sample2.rb2",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmbzip2/dlltest.dsp",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmcurl/CMakeLists.txt",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmcurl/lib/libcurl.rc",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmcurl/lib/krb5.c",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmcurl/lib/security.c",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/cmcurl/lib/cookie.c",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/Release/CMakeLogo.ico",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/Release/CMakeInstall.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/Release/WiX/ui_dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Utilities/Release/WiX/ui_banner.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/QtDialog/Plus16.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/QtDialog/Delete16.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/QtDialog/CMakeSetup128.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/QtDialog/CMakeSetup32.png",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/QtDialog/CMakeSetup.ico",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/QtDialog/CMakeSetup.icns",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/CPack/OSXLauncherScript.scpt",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Source/kwsys/testSystemTools.bin",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Packaging/CMakeDMGBackground.tif",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Modules/CPack.OSXScriptLauncher.rsrc.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Modules/CPack.DS_Store.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Modules/CPack.background.png.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Modules/CPack.OSXX11.main.scpt.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Modules/CPack.OSXScriptLauncher.in",
        "/tmp/vanessa/spack-stage/spack-stage-cmake-3.5.1-m5is5uynrwa2f2xsdugzibpjvt7iz65t/spack-src/Modules/CPack.VolumeIcon.icns.in"
    ],
    "total_files": 9338
}