{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/buildtools/Cmake/test_prog/prog_gnu_dynlinker.c": "/* prog_gnu_dynlinker.c -- check that RTLD_NEXT is defined as in GNU linker */\n/* Copyright (c) 2012-2014. The SimGrid Team.\n * All rights reserved.                                                     */\n\n/* This program is free software; you can redistribute it and/or modify it\n * under the terms of the license (GNU LGPL) which comes with this package. */\n\n#define _GNU_SOURCE 1\n#include <dlfcn.h>\n#include <stdlib.h>\n#include <stdio.h>\n#include <string.h>\n\nstatic void * (*real_malloc) (size_t);\n\nint main(void) {\n   char *error;\n   dlerror(); // clear any previous error\n   real_malloc = (void * (*) (size_t)) dlsym(RTLD_NEXT, \"malloc\");\n   error = dlerror();\n   if (!error && real_malloc) {\n      char *A = real_malloc(20);\n      strcpy(A,\"epic success\");\n      free(A);\n      return 0; // SUCCESS\n   } else {\n      if (error)\n\t printf(\"Error while checking for dlsym: %s\\n\",error);\n      else\n\t printf(\"dlsym did not return any error, but failed to find malloc()\\n\");\n      return 1; // FAILED\n   }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/src/xbt/mmalloc/mm_legacy.c": "/* Copyright (c) 2010-2014. The SimGrid Team.\n * All rights reserved.                                                     */\n\n/* This program is free software; you can redistribute it and/or modify it\n * under the terms of the license (GNU LGPL) which comes with this package. */\n\n/* Redefine the classical malloc/free/realloc functions so that they fit well in the mmalloc framework */\n\n#include \"mmprivate.h\"\n#include \"xbt_modinter.h\"\n#include \"internal_config.h\"\n#include <math.h>\n\n//#define MM_LEGACY_VERBOSE 1 /* define this to see which version of malloc gets used */\n\n/* The mmalloc() package can use a single implicit malloc descriptor\n   for mmalloc/mrealloc/mfree operations which do not supply an explicit\n   descriptor.  This allows mmalloc() to provide\n   backwards compatibility with the non-mmap'd version. */\nxbt_mheap_t __mmalloc_default_mdp = NULL;\n\n\nstatic xbt_mheap_t __mmalloc_current_heap = NULL;     /* The heap we are currently using. */\n\nxbt_mheap_t mmalloc_get_current_heap(void)\n{\n  return __mmalloc_current_heap;\n}\n\nvoid mmalloc_set_current_heap(xbt_mheap_t new_heap)\n{\n  __mmalloc_current_heap = new_heap;\n}\n\n\n#ifdef MMALLOC_WANT_OVERRIDE_LEGACY\n#ifdef HAVE_GNU_LD\n\n#undef _GNU_SOURCE\n#define _GNU_SOURCE 1\n#include <dlfcn.h>\n\nstatic void * (*real_malloc) (size_t) = NULL;\nstatic void * (*real_realloc) (void*,size_t) = NULL;\nstatic void * (*real_free) (void*) = NULL;\n\nstatic void mm_gnuld_legacy_init(void) { /* This function is called from mmalloc_preinit(); it works even if it's static because all mm is in mm.c */\n  real_malloc = (void * (*) (size_t)) dlsym(RTLD_NEXT, \"malloc\");\n  real_realloc = (void * (*) (void*,size_t)) dlsym(RTLD_NEXT, \"realloc\");\n  real_free = (void * (*) (void*)) dlsym(RTLD_NEXT, \"free\");\n  __mmalloc_current_heap = __mmalloc_default_mdp;\n}\n\n/* Hello pimple!\n * DL needs some memory while resolving the malloc symbol, that is somehow problematic\n * To that extend, we have a little area here living in .BSS that we return if asked for memory before the malloc is resolved.\n */\nstatic int allocated_junk = 0; /* keep track of many blocks of our little area was already given to someone */\n#define JUNK_SIZE 8\n#define MAX_JUNK_AREAS (3*4096/JUNK_SIZE)\nstatic char junkareas[MAX_JUNK_AREAS][JUNK_SIZE];\n\n/* This version use mmalloc if there is a current heap, or the legacy implem if not */\nvoid *malloc(size_t n) {\n  xbt_mheap_t mdp = __mmalloc_current_heap;\n  void *ret;\n#ifdef MM_LEGACY_VERBOSE\n  static int warned_raw = 0;\n  static int warned_mmalloc = 0;\n#endif\n\n  if (mdp) {\n    LOCK(mdp);\n    ret = mmalloc(mdp, n);\n    UNLOCK(mdp);\n#ifdef MM_LEGACY_VERBOSE\n    if (!warned_mmalloc) {\n      fprintf(stderr,\"Using mmalloc; enabling the model-checker in cmake may have a bad impact on your simulation performance\\n\");\n      warned_mmalloc = 1;\n    }\n#endif\n  } else {\n    if (!real_malloc) {\n      size_t needed_areas = n / JUNK_SIZE;\n      if(needed_areas * JUNK_SIZE != n) needed_areas++;\n      if (allocated_junk+needed_areas>=MAX_JUNK_AREAS) {\n        fprintf(stderr,\n          \"Panic: real malloc symbol not resolved yet, and I already gave my little private memory chunk away.\\n\");\n        exit(1);\n      } else {\n        size_t i = allocated_junk;\n        allocated_junk += needed_areas;\n        return junkareas[i];\n      }\n    }\n#ifdef MM_LEGACY_VERBOSE\n    if (!warned_raw) {\n      fprintf(stderr,\"Using system malloc after interception; you seem to be currently model-checking\\n\");\n      warned_raw = 1;\n    }\n#endif\n    ret = real_malloc(n);\n  }\n  return ret;\n}\n\n\nvoid *calloc(size_t nmemb, size_t size)\n{\n  void *ret = malloc(nmemb*size);\n  memset(ret, 0, nmemb * size);\n  return ret;\n}\n\nvoid *realloc(void *p, size_t s)\n{\n  xbt_mheap_t mdp = __mmalloc_current_heap;\n  void *ret;\n\n  if (mdp) {\n    LOCK(mdp);\n    ret = mrealloc(mdp, p, s);\n    UNLOCK(mdp);\n  } else {\n    ret = real_realloc(p,s);\n  }\n\n  return ret;\n}\n\nvoid free(void *p)\n{\n  if (p==NULL)\n    return;\n  if (p<=(void*)junkareas || p>(void*)(junkareas[MAX_JUNK_AREAS]) ) {\n    xbt_mheap_t mdp = __mmalloc_current_heap;\n\n    if (mdp) {\n      LOCK(mdp);\n      mfree(mdp, p);\n      UNLOCK(mdp);\n    } else {\n      real_free(p);\n    }\n  } else if(allocated_junk && p==junkareas[allocated_junk-1]) {\n    allocated_junk--;\n  } else {\n    // Leaked memory.\n  }\n}\n\n\n#else /* NO GNU_LD */\nvoid *malloc(size_t n)\n{\n  xbt_mheap_t mdp = __mmalloc_current_heap ?: (xbt_mheap_t) mmalloc_preinit();\n\n  LOCK(mdp);\n  void *ret = mmalloc(mdp, n);\n  UNLOCK(mdp);\n\n  return ret;\n}\n\nvoid *calloc(size_t nmemb, size_t size)\n{\n  xbt_mheap_t mdp = __mmalloc_current_heap ?: (xbt_mheap_t) mmalloc_preinit();\n\n  LOCK(mdp);\n  void *ret = mmalloc(mdp, nmemb*size);\n  UNLOCK(mdp);\n  memset(ret, 0, nmemb * size);\n\n\n  return ret;\n}\n\nvoid *realloc(void *p, size_t s)\n{\n  void *ret = NULL;\n  xbt_mheap_t mdp = __mmalloc_current_heap ?: (xbt_mheap_t) mmalloc_preinit();\n\n  LOCK(mdp);\n  ret = mrealloc(mdp, p, s);\n  UNLOCK(mdp);\n\n  return ret;\n}\n\nvoid free(void *p)\n{\n  if (p != NULL) {\n    xbt_mheap_t mdp = __mmalloc_current_heap ?: (xbt_mheap_t) mmalloc_preinit();\n\n    LOCK(mdp);\n    mfree(mdp, p);\n    UNLOCK(mdp);\n  }\n}\n#endif /* NO GNU_LD */\n#endif /* WANT_MALLOC_OVERRIDE */\n\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/surf++.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/triva-time_interval.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/triva-graph_visualization.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/surf++.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/triva-graph_configuration.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/sc3-description.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/Paje_MSG_screenshot_thn.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/smpi_simgrid_alltoall_pair_16.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/output.goal.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/smpi_simgrid_alltoall_ring_16.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/Paje_MSG_screenshot.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/AS_hierarchy.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/win_install_02.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/SGicon.gif",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/win_install_03.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/win_install_01.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/win_install_05.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/win_install_06.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/SGicon.icns",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/SGicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/awstats_logo3.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/simgrid_logo_2011.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/simgrid_logo_2011.gif",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/win_install_04.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/poster_thumbnail.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/simgrid_logo_2011_small.png",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/simgrid_logo_win.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-simgrid-3.11-vr35soj2bxeu5zouldkwrmjarvo5b5ta/spack-src/doc/webcruft/simgrid_logo_win_2011.bmp"
    ],
    "total_files": 2120
}