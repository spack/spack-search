{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/thunk_solaris_amd64.s": "// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// This file exposes various external library functions to Go code in the runtime.\n\n#include \"zasm_GOOS_GOARCH.h\"\n#include \"textflag.h\"\n\nTEXT runtime\u00b7libc_chdir(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7chdir(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_chroot(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7chroot(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_close(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7close(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_dlopen(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7dlopen(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_dlclose(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7dlclose(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_dlsym(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7dlsym(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_execve(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7execve(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_exit(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7exit(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_fcntl(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7fcntl(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_forkx(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7forkx(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_gethostname(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7gethostname(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_ioctl(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7ioctl(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_setgid(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7setgid(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_setgroups(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7setgroups(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_setsid(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7setsid(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_setuid(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7setuid(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_setpgid(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7setpgid(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_syscall(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7syscall(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_wait4(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7wait4(SB), AX\n\tJMP\tAX\n\nTEXT runtime\u00b7libc_write(SB),NOSPLIT,$0\n\tMOVQ\tlibc\u00b7write(SB), AX\n\tJMP\tAX\n",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/syscall_solaris.c": "// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n#pragma dynimport libc\u00b7chdir chdir \"libc.so\"\n#pragma dynimport libc\u00b7chroot chroot \"libc.so\"\n#pragma dynimport libc\u00b7close close \"libc.so\"\n#pragma dynimport libc\u00b7dlclose dlclose \"libc.so\"\n#pragma dynimport libc\u00b7dlopen dlopen \"libc.so\"\n#pragma dynimport libc\u00b7dlsym dlsym \"libc.so\"\n#pragma dynimport libc\u00b7execve execve \"libc.so\"\n#pragma dynimport libc\u00b7fcntl fcntl \"libc.so\"\n#pragma dynimport libc\u00b7gethostname gethostname \"libc.so\"\n#pragma dynimport libc\u00b7ioctl ioctl \"libc.so\"\n#pragma dynimport libc\u00b7pipe pipe \"libc.so\"\n#pragma dynimport libc\u00b7setgid setgid \"libc.so\"\n#pragma dynimport libc\u00b7setgroups setgroups \"libc.so\"\n#pragma dynimport libc\u00b7setsid setsid \"libc.so\"\n#pragma dynimport libc\u00b7setuid setuid \"libc.so\"\n#pragma dynimport libc\u00b7setpgid setsid \"libc.so\"\n#pragma dynimport libc\u00b7syscall syscall \"libc.so\"\n#pragma dynimport libc\u00b7forkx forkx \"libc.so\"\n#pragma dynimport libc\u00b7wait4 wait4 \"libc.so\"\n",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/syscall_solaris.go": "// Copyright 2014 The Go Authors.  All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage runtime\n\nimport \"unsafe\"\n\nvar (\n\tlibc_chdir,\n\tlibc_chroot,\n\tlibc_close,\n\tlibc_dlopen,\n\tlibc_dlclose,\n\tlibc_dlsym,\n\tlibc_execve,\n\tlibc_exit,\n\tlibc_fcntl,\n\tlibc_forkx,\n\tlibc_gethostname,\n\tlibc_ioctl,\n\tlibc_pipe,\n\tlibc_setgid,\n\tlibc_setgroups,\n\tlibc_setsid,\n\tlibc_setuid,\n\tlibc_setpgid,\n\tlibc_syscall,\n\tlibc_wait4,\n\tlibc_write,\n\tpipe1 libcFunc\n)\n\n//go:nosplit\nfunc syscall_sysvicall6(fn, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr) {\n\tcall := libcall{\n\t\tfn:   fn,\n\t\tn:    nargs,\n\t\targs: uintptr(unsafe.Pointer(&a1)),\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\treturn call.r1, call.r2, call.err\n}\n\n//go:nosplit\nfunc syscall_rawsysvicall6(fn, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2, err uintptr) {\n\tcall := libcall{\n\t\tfn:   fn,\n\t\tn:    nargs,\n\t\targs: uintptr(unsafe.Pointer(&a1)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.r1, call.r2, call.err\n}\n\n// TODO(aram): Once we remove all instances of C calling sysvicallN, make\n// sysvicallN return errors and replace the body of the following functions\n// with calls to sysvicallN.\n\n//go:nosplit\nfunc syscall_chdir(path uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_chdir)),\n\t\tn:    1,\n\t\targs: uintptr(unsafe.Pointer(&path)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\n//go:nosplit\nfunc syscall_chroot(path uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_chroot)),\n\t\tn:    1,\n\t\targs: uintptr(unsafe.Pointer(&path)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\n// like close, but must not split stack, for forkx.\n//go:nosplit\nfunc syscall_close(fd int32) int32 {\n\treturn int32(sysvicall1(&libc_close, uintptr(fd)))\n}\n\nfunc syscall_dlopen(name *byte, mode uintptr) (handle uintptr, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_dlopen)),\n\t\tn:    2,\n\t\targs: uintptr(unsafe.Pointer(&name)),\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\tif call.r1 == 0 {\n\t\treturn call.r1, call.err\n\t}\n\treturn call.r1, 0\n}\n\nfunc syscall_dlclose(handle uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_dlclose)),\n\t\tn:    1,\n\t\targs: uintptr(unsafe.Pointer(&handle)),\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\treturn call.r1\n}\n\nfunc syscall_dlsym(handle uintptr, name *byte) (proc uintptr, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_dlsym)),\n\t\tn:    2,\n\t\targs: uintptr(unsafe.Pointer(&handle)),\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\tif call.r1 == 0 {\n\t\treturn call.r1, call.err\n\t}\n\treturn call.r1, 0\n}\n\n//go:nosplit\nfunc syscall_execve(path, argv, envp uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_execve)),\n\t\tn:    3,\n\t\targs: uintptr(unsafe.Pointer(&path)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\n// like exit, but must not split stack, for forkx.\n//go:nosplit\nfunc syscall_exit(code uintptr) {\n\tsysvicall1(&libc_exit, code)\n}\n\n//go:nosplit\nfunc syscall_fcntl(fd, cmd, arg uintptr) (val, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_fcntl)),\n\t\tn:    3,\n\t\targs: uintptr(unsafe.Pointer(&fd)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.r1, call.err\n}\n\n//go:nosplit\nfunc syscall_forkx(flags uintptr) (pid uintptr, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_forkx)),\n\t\tn:    1,\n\t\targs: uintptr(unsafe.Pointer(&flags)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.r1, call.err\n}\n\nfunc syscall_gethostname() (name string, err uintptr) {\n\tcname := new([_MAXHOSTNAMELEN]byte)\n\tvar args = [2]uintptr{uintptr(unsafe.Pointer(&cname[0])), _MAXHOSTNAMELEN}\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_gethostname)),\n\t\tn:    2,\n\t\targs: uintptr(unsafe.Pointer(&args[0])),\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\tif call.r1 != 0 {\n\t\treturn \"\", call.err\n\t}\n\tcname[_MAXHOSTNAMELEN-1] = 0\n\treturn gostringnocopy(&cname[0]), 0\n}\n\n//go:nosplit\nfunc syscall_ioctl(fd, req, arg uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_ioctl)),\n\t\tn:    3,\n\t\targs: uintptr(unsafe.Pointer(&fd)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\nfunc syscall_pipe() (r, w, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&pipe1)),\n\t\tn:    0,\n\t\targs: uintptr(unsafe.Pointer(&pipe1)), // it's unused but must be non-nil, otherwise crashes\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\treturn call.r1, call.r2, call.err\n}\n\n// This is syscall.RawSyscall, it exists to satisfy some build dependency,\n// but it doesn't work correctly.\n//\n// DO NOT USE!\n//\n// TODO(aram): make this panic once we stop calling fcntl(2) in net using it.\nfunc syscall_rawsyscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_syscall)),\n\t\tn:    4,\n\t\targs: uintptr(unsafe.Pointer(&trap)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.r1, call.r2, call.err\n}\n\n//go:nosplit\nfunc syscall_setgid(gid uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_setgid)),\n\t\tn:    1,\n\t\targs: uintptr(unsafe.Pointer(&gid)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\n//go:nosplit\nfunc syscall_setgroups(ngid, gid uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_setgroups)),\n\t\tn:    2,\n\t\targs: uintptr(unsafe.Pointer(&ngid)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\n//go:nosplit\nfunc syscall_setsid() (pid, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_setsid)),\n\t\tn:    0,\n\t\targs: uintptr(unsafe.Pointer(&libc_setsid)), // it's unused but must be non-nil, otherwise crashes\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.r1, call.err\n}\n\n//go:nosplit\nfunc syscall_setuid(uid uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_setuid)),\n\t\tn:    1,\n\t\targs: uintptr(unsafe.Pointer(&uid)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\n//go:nosplit\nfunc syscall_setpgid(pid, pgid uintptr) (err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_setpgid)),\n\t\tn:    2,\n\t\targs: uintptr(unsafe.Pointer(&pid)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.err\n}\n\n// This is syscall.Syscall, it exists to satisfy some build dependency,\n// but it doesn't work correctly.\n//\n// DO NOT USE!\n//\n// TODO(aram): make this panic once we stop calling fcntl(2) in net using it.\nfunc syscall_syscall(trap, a1, a2, a3 uintptr) (r1, r2, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_syscall)),\n\t\tn:    4,\n\t\targs: uintptr(unsafe.Pointer(&trap)),\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\treturn call.r1, call.r2, call.err\n}\n\nfunc syscall_wait4(pid uintptr, wstatus *uint32, options uintptr, rusage unsafe.Pointer) (wpid int, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_wait4)),\n\t\tn:    4,\n\t\targs: uintptr(unsafe.Pointer(&pid)),\n\t}\n\tentersyscallblock()\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\texitsyscall()\n\treturn int(call.r1), call.err\n}\n\n//go:nosplit\nfunc syscall_write(fd, buf, nbyte uintptr) (n, err uintptr) {\n\tcall := libcall{\n\t\tfn:   uintptr(unsafe.Pointer(&libc_write)),\n\t\tn:    3,\n\t\targs: uintptr(unsafe.Pointer(&fd)),\n\t}\n\tasmcgocall(unsafe.Pointer(&asmsysvicall6), unsafe.Pointer(&call))\n\treturn call.r1, call.err\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/cgo/gcc_openbsd_386.c": "// Copyright 2009 The Go Authors.  All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n#include <sys/types.h>\n#include <dlfcn.h>\n#include <errno.h>\n#include <pthread.h>\n#include <signal.h>\n#include <string.h>\n#include \"libcgo.h\"\n\nstatic void* threadentry(void*);\nstatic void (*setg_gcc)(void*);\n\n// TCB_SIZE is sizeof(struct thread_control_block),\n// as defined in /usr/src/lib/librthread/tcb.h\n#define TCB_SIZE (4 * sizeof(void *))\n#define TLS_SIZE (2 * sizeof(void *))\n\nvoid *__get_tcb(void);\nvoid __set_tcb(void *);\n\nstatic int (*sys_pthread_create)(pthread_t *thread, const pthread_attr_t *attr,\n\tvoid *(*start_routine)(void *), void *arg);\n\nstruct thread_args {\n\tvoid *(*func)(void *);\n\tvoid *arg;\n};\n\nstatic void\ntcb_fixup(int mainthread)\n{\n\tvoid *newtcb, *oldtcb;\n\n\t// The OpenBSD ld.so(1) does not currently support PT_TLS. As a result,\n\t// we need to allocate our own TLS space while preserving the existing\n\t// TCB that has been setup via librthread.\n\n\tnewtcb = malloc(TCB_SIZE + TLS_SIZE);\n\tif(newtcb == NULL)\n\t\tabort();\n\n\t// The signal trampoline expects the TLS slots to be zeroed.\n\tbzero(newtcb, TLS_SIZE);\n\n\toldtcb = __get_tcb();\n\tbcopy(oldtcb, newtcb + TLS_SIZE, TCB_SIZE);\n\t__set_tcb(newtcb + TLS_SIZE);\n\n\t// NOTE(jsing, minux): we can't free oldtcb without causing double-free\n\t// problem. so newtcb will be memory leaks. Get rid of this when OpenBSD\n\t// has proper support for PT_TLS.\n}\n\nstatic void *\nthread_start_wrapper(void *arg)\n{\n\tstruct thread_args args = *(struct thread_args *)arg;\n\n\tfree(arg);\n\ttcb_fixup(0);\n\n\treturn args.func(args.arg);\n}\n\nstatic void init_pthread_wrapper(void) {\n\tvoid *handle;\n\n\t// Locate symbol for the system pthread_create function.\n\thandle = dlopen(\"libpthread.so\", RTLD_LAZY);\n\tif(handle == NULL) {\n\t\tfprintf(stderr, \"runtime/cgo: dlopen failed to load libpthread: %s\\n\", dlerror());\n\t\tabort();\n\t}\n\tsys_pthread_create = dlsym(handle, \"pthread_create\");\n\tif(sys_pthread_create == NULL) {\n\t\tfprintf(stderr, \"runtime/cgo: dlsym failed to find pthread_create: %s\\n\", dlerror());\n\t\tabort();\n\t}\n\tdlclose(handle);\n}\n\nstatic pthread_once_t init_pthread_wrapper_once = PTHREAD_ONCE_INIT;\n\nint\npthread_create(pthread_t *thread, const pthread_attr_t *attr,\n\tvoid *(*start_routine)(void *), void *arg)\n{\n\tstruct thread_args *p;\n\n\t// we must initialize our wrapper in pthread_create, because it is valid to call\n\t// pthread_create in a static constructor, and in fact, our test for issue 9456\n\t// does just that.\n\tif(pthread_once(&init_pthread_wrapper_once, init_pthread_wrapper) != 0) {\n\t\tfprintf(stderr, \"runtime/cgo: failed to initialize pthread_create wrapper\\n\");\n\t\tabort();\n\t}\n\n\tp = malloc(sizeof(*p));\n\tif(p == NULL) {\n\t\terrno = ENOMEM;\n\t\treturn -1;\n\t}\n\tp->func = start_routine;\n\tp->arg = arg;\n\n\treturn sys_pthread_create(thread, attr, thread_start_wrapper, p);\n}\n\nvoid\nx_cgo_init(G *g, void (*setg)(void*))\n{\n\tpthread_attr_t attr;\n\tsize_t size;\n\n\tsetg_gcc = setg;\n\tpthread_attr_init(&attr);\n\tpthread_attr_getstacksize(&attr, &size);\n\tg->stacklo = (uintptr)&attr - size + 4096;\n\tpthread_attr_destroy(&attr);\n\n\tif(pthread_once(&init_pthread_wrapper_once, init_pthread_wrapper) != 0) {\n\t\tfprintf(stderr, \"runtime/cgo: failed to initialize pthread_create wrapper\\n\");\n\t\tabort();\n\t}\n\n\ttcb_fixup(1);\n}\n\n\nvoid\n_cgo_sys_thread_start(ThreadStart *ts)\n{\n\tpthread_attr_t attr;\n\tsigset_t ign, oset;\n\tpthread_t p;\n\tsize_t size;\n\tint err;\n\n\tsigfillset(&ign);\n\tpthread_sigmask(SIG_SETMASK, &ign, &oset);\n\n\tpthread_attr_init(&attr);\n\tpthread_attr_getstacksize(&attr, &size);\n\t// Leave stacklo=0 and set stackhi=size; mstack will do the rest.\n\tts->g->stackhi = size;\n\terr = sys_pthread_create(&p, &attr, threadentry, ts);\n\n\tpthread_sigmask(SIG_SETMASK, &oset, nil);\n\n\tif (err != 0) {\n\t\tfprintf(stderr, \"runtime/cgo: pthread_create failed: %s\\n\", strerror(err));\n\t\tabort();\n\t}\n}\n\nstatic void*\nthreadentry(void *v)\n{\n\tThreadStart ts;\n\n\ttcb_fixup(0);\n\n\tts = *(ThreadStart*)v;\n\tfree(v);\n\n\t/*\n\t * Set specific keys.\n\t */\n\tsetg_gcc((void*)ts.g);\n\n\tcrosscall_386(ts.fn);\n\treturn nil;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/cgo/gcc_openbsd_amd64.c": "// Copyright 2009 The Go Authors.  All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n#include <sys/types.h>\n#include <dlfcn.h>\n#include <errno.h>\n#include <pthread.h>\n#include <signal.h>\n#include <string.h>\n#include \"libcgo.h\"\n\nstatic void* threadentry(void*);\nstatic void (*setg_gcc)(void*);\n\n// TCB_SIZE is sizeof(struct thread_control_block),\n// as defined in /usr/src/lib/librthread/tcb.h\n#define TCB_SIZE (4 * sizeof(void *))\n#define TLS_SIZE (2 * sizeof(void *))\n\nvoid *__get_tcb(void);\nvoid __set_tcb(void *);\n\nstatic int (*sys_pthread_create)(pthread_t *thread, const pthread_attr_t *attr,\n\tvoid *(*start_routine)(void *), void *arg);\n\nstruct thread_args {\n\tvoid *(*func)(void *);\n\tvoid *arg;\n};\n\nstatic void\ntcb_fixup(int mainthread)\n{\n\tvoid *newtcb, *oldtcb;\n\n\t// The OpenBSD ld.so(1) does not currently support PT_TLS. As a result,\n\t// we need to allocate our own TLS space while preserving the existing\n\t// TCB that has been setup via librthread.\n\n\tnewtcb = malloc(TCB_SIZE + TLS_SIZE);\n\tif(newtcb == NULL)\n\t\tabort();\n\n\t// The signal trampoline expects the TLS slots to be zeroed.\n\tbzero(newtcb, TLS_SIZE);\n\n\toldtcb = __get_tcb();\n\tbcopy(oldtcb, newtcb + TLS_SIZE, TCB_SIZE);\n\t__set_tcb(newtcb + TLS_SIZE);\n\n\t// NOTE(jsing, minux): we can't free oldtcb without causing double-free\n\t// problem. so newtcb will be memory leaks. Get rid of this when OpenBSD\n\t// has proper support for PT_TLS.\n}\n\nstatic void *\nthread_start_wrapper(void *arg)\n{\n\tstruct thread_args args = *(struct thread_args *)arg;\n\n\tfree(arg);\n\ttcb_fixup(0);\n\n\treturn args.func(args.arg);\n}\n\nstatic void init_pthread_wrapper(void) {\n\tvoid *handle;\n\n\t// Locate symbol for the system pthread_create function.\n\thandle = dlopen(\"libpthread.so\", RTLD_LAZY);\n\tif(handle == NULL) {\n\t\tfprintf(stderr, \"runtime/cgo: dlopen failed to load libpthread: %s\\n\", dlerror());\n\t\tabort();\n\t}\n\tsys_pthread_create = dlsym(handle, \"pthread_create\");\n\tif(sys_pthread_create == NULL) {\n\t\tfprintf(stderr, \"runtime/cgo: dlsym failed to find pthread_create: %s\\n\", dlerror());\n\t\tabort();\n\t}\n\tdlclose(handle);\n}\n\nstatic pthread_once_t init_pthread_wrapper_once = PTHREAD_ONCE_INIT;\n\nint\npthread_create(pthread_t *thread, const pthread_attr_t *attr,\n\tvoid *(*start_routine)(void *), void *arg)\n{\n\tstruct thread_args *p;\n\n\t// we must initialize our wrapper in pthread_create, because it is valid to call\n\t// pthread_create in a static constructor, and in fact, our test for issue 9456\n\t// does just that.\n\tif(pthread_once(&init_pthread_wrapper_once, init_pthread_wrapper) != 0) {\n\t\tfprintf(stderr, \"runtime/cgo: failed to initialize pthread_create wrapper\\n\");\n\t\tabort();\n\t}\n\n\tp = malloc(sizeof(*p));\n\tif(p == NULL) {\n\t\terrno = ENOMEM;\n\t\treturn -1;\n\t}\n\tp->func = start_routine;\n\tp->arg = arg;\n\n\treturn sys_pthread_create(thread, attr, thread_start_wrapper, p);\n}\n\nvoid\nx_cgo_init(G *g, void (*setg)(void*))\n{\n\tpthread_attr_t attr;\n\tsize_t size;\n\n\tsetg_gcc = setg;\n\tpthread_attr_init(&attr);\n\tpthread_attr_getstacksize(&attr, &size);\n\tg->stacklo = (uintptr)&attr - size + 4096;\n\tpthread_attr_destroy(&attr);\n\n\tif(pthread_once(&init_pthread_wrapper_once, init_pthread_wrapper) != 0) {\n\t\tfprintf(stderr, \"runtime/cgo: failed to initialize pthread_create wrapper\\n\");\n\t\tabort();\n\t}\n\n\ttcb_fixup(1);\n}\n\n\nvoid\n_cgo_sys_thread_start(ThreadStart *ts)\n{\n\tpthread_attr_t attr;\n\tsigset_t ign, oset;\n\tpthread_t p;\n\tsize_t size;\n\tint err;\n\n\tsigfillset(&ign);\n\tpthread_sigmask(SIG_SETMASK, &ign, &oset);\n\n\tpthread_attr_init(&attr);\n\tpthread_attr_getstacksize(&attr, &size);\n\n\t// Leave stacklo=0 and set stackhi=size; mstack will do the rest.\n\tts->g->stackhi = size;\n\terr = sys_pthread_create(&p, &attr, threadentry, ts);\n\n\tpthread_sigmask(SIG_SETMASK, &oset, nil);\n\n\tif (err != 0) {\n\t\tfprintf(stderr, \"runtime/cgo: pthread_create failed: %s\\n\", strerror(err));\n\t\tabort();\n\t}\n}\n\nstatic void*\nthreadentry(void *v)\n{\n\tThreadStart ts;\n\n\ttcb_fixup(0);\n\n\tts = *(ThreadStart*)v;\n\tfree(v);\n\n\t/*\n\t * Set specific keys.\n\t */\n\tsetg_gcc((void*)ts.g);\n\n\tcrosscall_amd64(ts.fn);\n\treturn nil;\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/syscall/asm_solaris_amd64.s": "// Copyright 2014 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n#include \"textflag.h\"\n\n//\n// System calls for solaris/amd64 are implemented in ../runtime/syscall_solaris.go\n//\n\nTEXT \u00b7sysvicall6(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_sysvicall6(SB)\n\nTEXT \u00b7rawSysvicall6(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_rawsysvicall6(SB)\n\nTEXT \u00b7chdir(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_chdir(SB)\n\nTEXT \u00b7chroot1(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_chroot(SB)\n\nTEXT \u00b7close(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_close(SB)\n\nTEXT \u00b7dlopen(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_dlopen(SB)\n\nTEXT \u00b7dlclose(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_dlclose(SB)\n\nTEXT \u00b7dlsym(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_dlsym(SB)\n\nTEXT \u00b7execve(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_execve(SB)\n\nTEXT \u00b7exit(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_exit(SB)\n\nTEXT \u00b7fcntl1(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_fcntl(SB)\n\nTEXT \u00b7forkx(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_forkx(SB)\n\nTEXT \u00b7gethostname(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_gethostname(SB)\n\nTEXT \u00b7ioctl(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_ioctl(SB)\n\nTEXT \u00b7pipe(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_pipe(SB)\n\nTEXT \u00b7RawSyscall(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_rawsyscall(SB)\n\nTEXT \u00b7setgid(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_setgid(SB)\n\nTEXT \u00b7setgroups1(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_setgroups(SB)\n\nTEXT \u00b7setsid(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_setsid(SB)\n\nTEXT \u00b7setuid(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_setuid(SB)\n\nTEXT \u00b7setpgid(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_setpgid(SB)\n\nTEXT \u00b7Syscall(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_syscall(SB)\n\nTEXT \u00b7wait4(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_wait4(SB)\n\nTEXT \u00b7write1(SB),NOSPLIT,$0\n\tJMP\truntime\u00b7syscall_write(SB)\n",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/syscall/so_solaris.go": "// Copyright 2011 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage syscall\n\nimport (\n\t\"sync\"\n\t\"sync/atomic\"\n\t\"unsafe\"\n)\n\n// soError describes reasons for shared library load failures.\ntype soError struct {\n\tErr     error\n\tObjName string\n\tMsg     string\n}\n\nfunc (e *soError) Error() string { return e.Msg }\n\n// Implemented in asm_solaris_amd64.s.\nfunc rawSysvicall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)\nfunc sysvicall6(trap, nargs, a1, a2, a3, a4, a5, a6 uintptr) (r1, r2 uintptr, err Errno)\nfunc dlclose(handle uintptr) (err Errno)\nfunc dlopen(name *uint8, mode uintptr) (handle uintptr, err Errno)\nfunc dlsym(handle uintptr, name *uint8) (proc uintptr, err Errno)\n\n// A so implements access to a single shared library object.\ntype so struct {\n\tName   string\n\tHandle uintptr\n}\n\n// loadSO loads shared library file into memory.\nfunc loadSO(name string) (*so, error) {\n\tnamep, err := BytePtrFromString(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\th, e := dlopen(namep, 1) // RTLD_LAZY\n\tuse(unsafe.Pointer(namep))\n\tif e != 0 {\n\t\treturn nil, &soError{\n\t\t\tErr:     e,\n\t\t\tObjName: name,\n\t\t\tMsg:     \"Failed to load \" + name + \": \" + e.Error(),\n\t\t}\n\t}\n\td := &so{\n\t\tName:   name,\n\t\tHandle: uintptr(h),\n\t}\n\treturn d, nil\n}\n\n// mustLoadSO is like loadSO but panics if load operation fails.\nfunc mustLoadSO(name string) *so {\n\td, e := loadSO(name)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\treturn d\n}\n\n// FindProc searches shared library d for procedure named name and returns\n// *proc if found. It returns an error if the search fails.\nfunc (d *so) FindProc(name string) (*proc, error) {\n\tnamep, err := BytePtrFromString(name)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\ta, _ := dlsym(uintptr(d.Handle), namep)\n\tuse(unsafe.Pointer(namep))\n\tif a == 0 {\n\t\treturn nil, &soError{\n\t\t\tErr:     ENOSYS,\n\t\t\tObjName: name,\n\t\t\tMsg:     \"Failed to find \" + name + \" procedure in \" + d.Name,\n\t\t}\n\t}\n\tp := &proc{\n\t\tSO:   d,\n\t\tName: name,\n\t\taddr: a,\n\t}\n\treturn p, nil\n}\n\n// MustFindProc is like FindProc but panics if search fails.\nfunc (d *so) MustFindProc(name string) *proc {\n\tp, e := d.FindProc(name)\n\tif e != nil {\n\t\tpanic(e)\n\t}\n\treturn p\n}\n\n// Release unloads shared library d from memory.\nfunc (d *so) Release() (err error) {\n\treturn dlclose(d.Handle)\n}\n\n// A proc implements access to a procedure inside a shared library.\ntype proc struct {\n\tSO   *so\n\tName string\n\taddr uintptr\n}\n\n// Addr returns the address of the procedure represented by p.\n// The return value can be passed to Syscall to run the procedure.\nfunc (p *proc) Addr() uintptr {\n\treturn p.addr\n}\n\n// Call executes procedure p with arguments a. It will panic, if more then\n// 6 arguments are supplied.\n//\n// The returned error is always non-nil, constructed from the result of\n// GetLastError.  Callers must inspect the primary return value to decide\n// whether an error occurred (according to the semantics of the specific\n// function being called) before consulting the error. The error will be\n// guaranteed to contain syscall.Errno.\nfunc (p *proc) Call(a ...uintptr) (r1, r2 uintptr, lastErr error) {\n\tswitch len(a) {\n\tcase 0:\n\t\treturn sysvicall6(p.Addr(), uintptr(len(a)), 0, 0, 0, 0, 0, 0)\n\tcase 1:\n\t\treturn sysvicall6(p.Addr(), uintptr(len(a)), a[0], 0, 0, 0, 0, 0)\n\tcase 2:\n\t\treturn sysvicall6(p.Addr(), uintptr(len(a)), a[0], a[1], 0, 0, 0, 0)\n\tcase 3:\n\t\treturn sysvicall6(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], 0, 0, 0)\n\tcase 4:\n\t\treturn sysvicall6(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], 0, 0)\n\tcase 5:\n\t\treturn sysvicall6(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], 0)\n\tcase 6:\n\t\treturn sysvicall6(p.Addr(), uintptr(len(a)), a[0], a[1], a[2], a[3], a[4], a[5])\n\tdefault:\n\t\tpanic(\"Call \" + p.Name + \" with too many arguments \" + itoa(len(a)) + \".\")\n\t}\n\treturn\n}\n\n// A lazySO implements access to a single shared library.  It will delay\n// the load of the shared library until the first call to its Handle method\n// or to one of its lazyProc's Addr method.\ntype lazySO struct {\n\tmu   sync.Mutex\n\tso   *so // non nil once SO is loaded\n\tName string\n}\n\n// Load loads single shared file d.Name into memory. It returns an error if\n// fails.  Load will not try to load SO, if it is already loaded into memory.\nfunc (d *lazySO) Load() error {\n\t// Non-racy version of:\n\t// if d.so == nil {\n\tif atomic.LoadPointer((*unsafe.Pointer)(unsafe.Pointer(&d.so))) == nil {\n\t\td.mu.Lock()\n\t\tdefer d.mu.Unlock()\n\t\tif d.so == nil {\n\t\t\tso, e := loadSO(d.Name)\n\t\t\tif e != nil {\n\t\t\t\treturn e\n\t\t\t}\n\t\t\t// Non-racy version of:\n\t\t\t// d.so = so\n\t\t\tatomic.StorePointer((*unsafe.Pointer)(unsafe.Pointer(&d.so)), unsafe.Pointer(so))\n\t\t}\n\t}\n\treturn nil\n}\n\n// mustLoad is like Load but panics if search fails.\nfunc (d *lazySO) mustLoad() {\n\te := d.Load()\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\n\n// Handle returns d's module handle.\nfunc (d *lazySO) Handle() uintptr {\n\td.mustLoad()\n\treturn uintptr(d.so.Handle)\n}\n\n// NewProc returns a lazyProc for accessing the named procedure in the SO d.\nfunc (d *lazySO) NewProc(name string) *lazyProc {\n\treturn &lazyProc{l: d, Name: name}\n}\n\n// newLazySO creates new lazySO associated with SO file.\nfunc newLazySO(name string) *lazySO {\n\treturn &lazySO{Name: name}\n}\n\n// A lazyProc implements access to a procedure inside a lazySO.\n// It delays the lookup until the Addr method is called.\ntype lazyProc struct {\n\tmu   sync.Mutex\n\tName string\n\tl    *lazySO\n\tproc *proc\n}\n\n// Find searches the shared library for procedure named p.Name. It returns an\n// error if search fails. Find will not search procedure, if it is already\n// found and loaded into memory.\nfunc (p *lazyProc) Find() error {\n\t// Non-racy version of:\n\t// if p.proc == nil {\n\tif atomic.LoadPointer((*unsafe.Pointer)(unsafe.Pointer(&p.proc))) == nil {\n\t\tp.mu.Lock()\n\t\tdefer p.mu.Unlock()\n\t\tif p.proc == nil {\n\t\t\te := p.l.Load()\n\t\t\tif e != nil {\n\t\t\t\treturn e\n\t\t\t}\n\t\t\tproc, e := p.l.so.FindProc(p.Name)\n\t\t\tif e != nil {\n\t\t\t\treturn e\n\t\t\t}\n\t\t\t// Non-racy version of:\n\t\t\t// p.proc = proc\n\t\t\tatomic.StorePointer((*unsafe.Pointer)(unsafe.Pointer(&p.proc)), unsafe.Pointer(proc))\n\t\t}\n\t}\n\treturn nil\n}\n\n// mustFind is like Find but panics if search fails.\nfunc (p *lazyProc) mustFind() {\n\te := p.Find()\n\tif e != nil {\n\t\tpanic(e)\n\t}\n}\n\n// Addr returns the address of the procedure represented by p.\n// The return value can be passed to Syscall to run the procedure.\nfunc (p *lazyProc) Addr() uintptr {\n\tp.mustFind()\n\treturn p.proc.Addr()\n}\n\n// Call executes procedure p with arguments a. It will panic, if more then\n// 6 arguments are supplied.\n//\n// The returned error is always non-nil, constructed from the result of\n// GetLastError.  Callers must inspect the primary return value to decide\n// whether an error occurred (according to the semantics of the specific\n// function being called) before consulting the error. The error will be\n// guaranteed to contain syscall.Errno.\nfunc (p *lazyProc) Call(a ...uintptr) (r1, r2 uintptr, lastErr error) {\n\tp.mustFind()\n\treturn p.proc.Call(a...)\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/cgo/test/issue4029.go": "// Copyright 2012 The Go Authors.  All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// +build !windows\n\npackage cgotest\n\n/*\n#include <dlfcn.h>\n#cgo linux LDFLAGS: -ldl\n*/\nimport \"C\"\n\nimport (\n\t\"fmt\"\n\t\"testing\"\n)\n\n//export IMPIsOpaque\nfunc IMPIsOpaque() {\n\tfmt.Println(\"isOpaque\")\n}\n\n//export IMPInitWithFrame\nfunc IMPInitWithFrame() {\n\tfmt.Println(\"IInitWithFrame\")\n}\n\n//export IMPDrawRect\nfunc IMPDrawRect() {\n\tfmt.Println(\"drawRect:\")\n}\n\n//export IMPWindowResize\nfunc IMPWindowResize() {\n\tfmt.Println(\"windowDidResize:\")\n}\n\nfunc test4029(t *testing.T) {\n\tloadThySelf(t, \"IMPWindowResize\")\n\tloadThySelf(t, \"IMPDrawRect\")\n\tloadThySelf(t, \"IMPInitWithFrame\")\n\tloadThySelf(t, \"IMPIsOpaque\")\n}\n\nfunc loadThySelf(t *testing.T, symbol string) {\n\tthis_process := C.dlopen(nil, C.RTLD_NOW)\n\tif this_process == nil {\n\t\tt.Error(\"dlopen:\", C.GoString(C.dlerror()))\n\t\treturn\n\t}\n\tdefer C.dlclose(this_process)\n\n\tsymbol_address := C.dlsym(this_process, C.CString(symbol))\n\tif symbol_address == nil {\n\t\tt.Error(\"dlsym:\", C.GoString(C.dlerror()))\n\t\treturn\n\t}\n\tt.Log(symbol, symbol_address)\n}\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/compress/bzip2/testdata/Mark.Twain-Tom.Sawyer.txt.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/compress/bzip2/testdata/e.txt.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/compress/gzip/testdata/issue6550.gz",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/regexp/testdata/re2-exhaustive.txt.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/encoding/json/testdata/code.json.gz",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-005.gray.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.separate.dc.progression.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-005.gray.q50.2x2.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.440.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.422.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-005.gray.q50.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.5bpp.gif",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-005.gray.q50.2x2.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.separate.dc.progression.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-005.gray.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.gif",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.444.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-005.gray.gif",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.440.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.420.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.444.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.422.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-005.gray.q50.progressive.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.q50.420.jpeg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/testdata/video-001.interlaced.gif",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/benchPaletted.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/invalid-zlib.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/benchRGB-interlace.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/benchNRGBA-gradient.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/invalid-crc32.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/benchNRGBA-opaque.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/invalid-trunc.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/benchGray.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/benchRGB.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/invalid-noend.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn4a16.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g04-31.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn2c08.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn4a08.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g08.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn3p02.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn3p08.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g02.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g04.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g16.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g02-29.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn3p08-trns.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn3p01.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn6a16.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn3p04-31i.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g01-30.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn3p04.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn2c16.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn6a08.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/image/png/testdata/pngsuite/basn0g01.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/race/race_darwin_amd64.syso",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/race/race_freebsd_amd64.syso",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/race/race_windows_amd64.syso",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/runtime/race/race_linux_amd64.syso",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/test-trailing-junk.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/symlink.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/crc32-not-streamed.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/go-with-datadesc-sig.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/readme.notzip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/test.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/zip64.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/gophercolor16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/winxp.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/unix.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/go-no-datadesc-sig.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/dd.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/zip64-2.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/zip/testdata/readme.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/tar/testdata/writer-big.tar",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/tar/testdata/writer-big-long.tar",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/archive/tar/testdata/v7.tar",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/crypto/rsa/testdata/pss-vect.txt.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/crypto/ecdsa/testdata/SigVer.rsp.bz2",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/elf/testdata/go-relocation-test-gcc441-x86.obj",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/elf/testdata/hello-world-core.gz",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/elf/testdata/go-relocation-test-gcc482-aarch64.obj",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/elf/testdata/gcc-amd64-openbsd-debug-with-rela.obj",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/elf/testdata/go-relocation-test-gcc441-x86-64.obj",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/elf/testdata/go-relocation-test-gcc424-x86-64.obj",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/elf/testdata/go-relocation-test-clang-x86.obj",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/dwarf/testdata/typedef.macho",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/dwarf/testdata/typedef.elf",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/src/debug/dwarf/testdata/typedef.elf4",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/lib/time/zoneinfo.zip",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/test/bench/shootout/mandelbrot.txt",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/dashboard/codereview/static/gopherstamp.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/dashboard/codereview/static/icon.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/chrome/gophertool/gopher.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/makerelease/windows/images/gopher.ico",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/makerelease/windows/images/Banner.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/makerelease/windows/images/DialogLeft.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/makerelease/windows/images/Dialog.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/misc/makerelease/darwin/Resources/bg.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/logo-153x55.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/go-logo-blue.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/go-logo-black.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/go-logo-white.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/share.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/sieve.gif",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/help.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/bumper192x108.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/appenginegophercolor.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/gopherbw.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/project.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/ref.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/bumper.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/bumper640x360.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/gophercolor.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/gophercolor16x16.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/pkg.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/biplane.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/fiveyears.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/talks.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/appenginegopher.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/run.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/bumper480x270.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/doc.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/appenginelogo.gif",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/frontpage.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/bumper320x180.png",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/pencil/gopherswrench.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/pencil/gophermega.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/pencil/gopherhat.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/pencil/gopherswim.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/pencil/gopherhelmet.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/gopher/pencil/gopherrunning.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-go-bootstrap-1.4-bootstrap-20161024-dnwoi7i2lnjhgndqbewfybryx5sweksg/spack-src/doc/codewalk/popout.png"
    ],
    "total_files": 4257
}