{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/src/gafunc.c": "/* Copyright (C) 1988-2018 by George Mason University. See file COPYRIGHT for more information. */\n\n/*  Originally authored by B. Doty.  \n    Some functions provided by others. */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n/* If autoconfed, only include malloc.h when it's presen */\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n#else /* undef HAVE_CONFIG_H */\n#include <malloc.h>\n#endif /* HAVE_CONFIG_H */\n\n#include <math.h>\n#include <stdio.h>\n#include <stdlib.h>\n#include <dlfcn.h>\n#include <string.h>\n#include \"grads.h\"\n\n#ifdef OPENGRADS\n#include \"gaudx.h\"\n#endif\n\n\nextern struct gamfcmn mfcmn;     /* for global warning level settings */\nstatic struct gaupb *upba=NULL;  /* Anchor for user defined plug-in */\nstatic char pout[1256];          /* Build error msgs here */\n\n/* Function routine names.  Add a new function by putting the\n   prototype here and adding to the if tests below.  */\ngaint ffsqrt   (struct gafunc *, struct gastat *);\ngaint ffsin    (struct gafunc *, struct gastat *);\ngaint ffcos    (struct gafunc *, struct gastat *);\ngaint fftan    (struct gafunc *, struct gastat *);\ngaint ffasin   (struct gafunc *, struct gastat *);\ngaint ffacos   (struct gafunc *, struct gastat *);\ngaint ffexp    (struct gafunc *, struct gastat *);\ngaint fflog    (struct gafunc *, struct gastat *);\ngaint fflog10  (struct gafunc *, struct gastat *);\ngaint ffabs    (struct gafunc *, struct gastat *);\ngaint ffif     (struct gafunc *, struct gastat *);\ngaint ffpow    (struct gafunc *, struct gastat *);\ngaint ffmag    (struct gafunc *, struct gastat *);\ngaint ffatan   (struct gafunc *, struct gastat *);\ngaint ffave    (struct gafunc *, struct gastat *);\ngaint ffgint   (struct gafunc *, struct gastat *);\ngaint ffhdiv   (struct gafunc *, struct gastat *);\ngaint ffhcrl   (struct gafunc *, struct gastat *);\ngaint ffvint   (struct gafunc *, struct gastat *);\ngaint ffelp    (struct gafunc *, struct gastat *);\ngaint fftlp    (struct gafunc *, struct gastat *);\ngaint ffaav    (struct gafunc *, struct gastat *);\ngaint fflterp  (struct gafunc *, struct gastat *);\ngaint ffscor   (struct gafunc *, struct gastat *);\ngaint fftcor   (struct gafunc *, struct gastat *);\ngaint fftmav   (struct gafunc *, struct gastat *);\ngaint ffmask   (struct gafunc *, struct gastat *);\ngaint ffg2s    (struct gafunc *, struct gastat *);\ngaint ffg2s2   (struct gafunc *, struct gastat *);\ngaint fftv2t   (struct gafunc *, struct gastat *);\ngaint fftv2q   (struct gafunc *, struct gastat *);\ngaint ffoacr   (struct gafunc *, struct gastat *);\ngaint ffoabn   (struct gafunc *, struct gastat *); \ngaint ffsmth   (struct gafunc *, struct gastat *);\ngaint ffsave   (struct gafunc *, struct gastat *);\ngaint ffsmin   (struct gafunc *, struct gastat *);\ngaint ffsmax   (struct gafunc *, struct gastat *);\ngaint ffskip   (struct gafunc *, struct gastat *);\ngaint ffcnst   (struct gafunc *, struct gastat *);\ngaint ffcdif   (struct gafunc *, struct gastat *);\ngaint ffmn     (struct gafunc *, struct gastat *); \ngaint ffamn    (struct gafunc *, struct gastat *); \ngaint ffsum    (struct gafunc *, struct gastat *); \ngaint ffsumg   (struct gafunc *, struct gastat *); \ngaint ffasum   (struct gafunc *, struct gastat *); \ngaint ffasumg  (struct gafunc *, struct gastat *); \ngaint ffatot   (struct gafunc *, struct gastat *); \ngaint ffamin   (struct gafunc *, struct gastat *);\ngaint ffamax   (struct gafunc *, struct gastat *);\ngaint ffaminlocx (struct gafunc *, struct gastat *);\ngaint ffaminlocy (struct gafunc *, struct gastat *);\ngaint ffamaxlocx (struct gafunc *, struct gastat *);\ngaint ffamaxlocy (struct gafunc *, struct gastat *);\ngaint ffgrarea (struct gafunc *, struct gastat *); \ngaint ffclgr   (struct gafunc *, struct gastat *);\ngaint ffmin    (struct gafunc *, struct gastat *);\ngaint ffmax    (struct gafunc *, struct gastat *);\ngaint ffminl   (struct gafunc *, struct gastat *);\ngaint ffmaxl   (struct gafunc *, struct gastat *);\ngaint ffflvl   (struct gafunc *, struct gastat *);\ngaint ffsreg   (struct gafunc *, struct gastat *); \ngaint fftreg   (struct gafunc *, struct gastat *); \ngaint ffs2g1d  (struct gafunc *, struct gastat *);\ngaint fftv2    (struct gafunc *, struct gastat *, gaint);\ngaint ffsmnx   (struct gafunc *, struct gastat *, gaint);\ngaint tmaskf   (struct gafunc *, struct gastat *, gaint);\ngaint aave     (struct gafunc *, struct gastat *, gaint);  \ngaint ave      (struct gafunc *, struct gastat *, gaint);   \ngaint scorr    (struct gafunc *, struct gastat *, gaint); \ngaint tvrh2q   (gadouble, gadouble, gadouble, gadouble *, gadouble *);\ngaint fndarg   (char *, gaint *);\nvoid cosadj    (struct gagrid *);\nchar doaave    (struct gagrid *, gadouble, gadouble, gadouble, gadouble, gaint, gadouble *);\ngaint mnmx     (struct gafunc *, struct gastat *, int);\n\n\n/* the pointer to the anchor of user-defined plug-ins is set from grads.c */\nvoid setupba (struct gaupb *upb) {\n  upba = upb;\n}\n\n\n/* Handles function calls from gaexpr.c  */\nchar *rtnprs (char *ch, char *name, struct gastat *pst) {\nstruct gafunc *pfc;\nstruct gastat *pst2;\nstruct gaupb *upb=NULL;\nchar *pos;\ngaint pdeep,rc;\nsize_t sz;\ngaint (*fpntr)(struct gafunc *, struct gastat *);\n\n  /* Find the function name and get the function pointer. */\n  fpntr=NULL;\n\n  /* start with the list of built-in functions */\n  if (cmpwrd(\"sqrt\",name)) fpntr = ffsqrt;\n  if (cmpwrd(\"sin\",name)) fpntr = ffsin;\n  if (cmpwrd(\"cos\",name)) fpntr = ffcos;\n  if (cmpwrd(\"tan\",name)) fpntr = fftan;\n  if (cmpwrd(\"asin\",name)) fpntr = ffasin;\n  if (cmpwrd(\"acos\",name)) fpntr = ffacos;\n  if (cmpwrd(\"exp\",name)) fpntr = ffexp;\n  if (cmpwrd(\"log\",name)) fpntr = fflog;\n  if (cmpwrd(\"log10\",name)) fpntr = fflog10;\n  if (cmpwrd(\"abs\",name)) fpntr = ffabs;\n  if (cmpwrd(\"if\",name)) fpntr = ffif;\n  if (cmpwrd(\"pow\",name)) fpntr = ffpow;\n  if (cmpwrd(\"ave\",name)) fpntr = ffave;\n  if (cmpwrd(\"mag\",name)) fpntr = ffmag;\n  if (cmpwrd(\"atan2\",name)) fpntr = ffatan;\n  if (cmpwrd(\"hdivg\",name)) fpntr = ffhdiv;\n  if (cmpwrd(\"hcurl\",name)) fpntr = ffhcrl;\n  if (cmpwrd(\"vint\",name)) fpntr = ffvint;\n  if (cmpwrd(\"tloop\",name)) fpntr = fftlp;\n  if (cmpwrd(\"eloop\",name)) fpntr = ffelp;\n  if (cmpwrd(\"aave\",name)) fpntr = ffaav;\n  if (cmpwrd(\"scorr\",name)) fpntr = ffscor;\n  if (cmpwrd(\"tcorr\",name)) fpntr = fftcor;\n  if (cmpwrd(\"tmave\",name)) fpntr = fftmav;\n  if (cmpwrd(\"maskout\",name)) fpntr = ffmask;\n  if (cmpwrd(\"gr2stn\",name)) fpntr = ffg2s;\n  if (cmpwrd(\"tvrh2q\",name)) fpntr = fftv2q;\n  if (cmpwrd(\"tvrh2t\",name)) fpntr = fftv2t;\n  if (cmpwrd(\"gint\",name)) fpntr = ffgint;\n  if (cmpwrd(\"oacres\",name)) fpntr = ffoacr;\n  if (cmpwrd(\"oabin\",name)) fpntr = ffoabn;\n  if (cmpwrd(\"smth9\",name)) fpntr = ffsmth;\n  if (cmpwrd(\"stnave\",name)) fpntr = ffsave;\n  if (cmpwrd(\"stnmin\",name)) fpntr = ffsmin;\n  if (cmpwrd(\"stnmax\",name)) fpntr = ffsmax;\n  if (cmpwrd(\"skip\",name)) fpntr = ffskip;\n  if (cmpwrd(\"const\",name)) fpntr = ffcnst;\n  if (cmpwrd(\"cdiff\",name)) fpntr = ffcdif;\n  if (cmpwrd(\"mean\",name)) fpntr = ffmn;    \n  if (cmpwrd(\"amean\",name)) fpntr = ffamn;  \n  if (cmpwrd(\"sum\",name)) fpntr = ffsum;    \n  if (cmpwrd(\"sumg\",name)) fpntr = ffsumg;  \n  if (cmpwrd(\"asum\",name)) fpntr = ffasum;  \n  if (cmpwrd(\"asumg\",name)) fpntr = ffasumg; \n  if (cmpwrd(\"atot\",name)) fpntr = ffatot; \n  if (cmpwrd(\"grarea\",name)) fpntr = ffgrarea; \n  if (cmpwrd(\"coll2gr\",name)) fpntr = ffclgr;\n  if (cmpwrd(\"min\",name)) fpntr = ffmin;\n  if (cmpwrd(\"max\",name)) fpntr = ffmax;\n  if (cmpwrd(\"minloc\",name)) fpntr = ffminl;\n  if (cmpwrd(\"maxloc\",name)) fpntr = ffmaxl;\n  if (cmpwrd(\"fndlvl\",name)) fpntr = ffflvl;\n  if (cmpwrd(\"sregr\",name)) fpntr = ffsreg;  \n  if (cmpwrd(\"tregr\",name)) fpntr = fftreg;  \n  if (cmpwrd(\"s2g1d\",name)) fpntr = ffs2g1d;\n  if (cmpwrd(\"lterp\",name)) fpntr = fflterp;\n  if (cmpwrd(\"amin\",name)) fpntr = ffamin;    \n  if (cmpwrd(\"amax\",name)) fpntr = ffamax;    \n  if (cmpwrd(\"aminlocx\",name)) fpntr = ffaminlocx;    \n  if (cmpwrd(\"aminlocy\",name)) fpntr = ffaminlocy;    \n  if (cmpwrd(\"amaxlocx\",name)) fpntr = ffamaxlocx;    \n  if (cmpwrd(\"amaxlocy\",name)) fpntr = ffamaxlocy;    \n\n#ifdef OPENGRADS\n  /* OpenGrADS User Defined Extensions */\n  if (fpntr==NULL) *(void **) &fpntr = (void *) gaudf(name); \n#endif\n\n  /* check the list of plug-ins functions/defops */\n  if (fpntr==NULL) {\n    upb = upba;\n    while (upb) {\n      if (cmpwrd(upb->name,name) && upb->type<=2) break;\n      upb = upb->upb;\n    }\n  }\n\n  if (upb==NULL && fpntr==NULL) {           /* Didn't find it....      */\n    gaprnt (0,\"Syntax Error:  Invalid Operand \\n\");\n    snprintf(pout,1255,\"  '%s' not a variable or function name\\n\",name);\n    gaprnt (0,pout);\n    return (NULL);\n  }\n\n  /* Allocate storage for gastat and gafunc structures                */\n  sz = sizeof(struct gafunc);\n  pfc = (struct gafunc *)galloc(sz,\"funccall\");\n  sz = sizeof(struct gastat);\n  pst2 = (struct gastat *)galloc(sz,\"funcpst\");\n\n  *pst2 = *pst;                            /* Provide copy of gastat  */\n\n  /* Parse the argument list                                          */\n  pfc->argnum = 0;                         /* Initial arg count       */\n  if (*ch=='(') {                          /* If no leading paren..   */\n    ch++;                                  /* Past the '('            */\n    if (*ch==')') {                        /* Was it '()'???          */\n      ch++;                                /*  Point past this func   */\n    } else {                               /* We have something       */\n      pos = pfc->buff;                     /*  Point to output buffer */\n      pdeep = 0;                           /*  No parens nested yet   */\n      pfc->argpnt[0] = pos;                /*  Start of 1st arg       */\n      while (pdeep!=0 || *ch!=')') {       /*  Until end of args...   */\n        if (*ch=='\\0' || *ch=='\\n') {      /*   End of string?        */\n          gaprnt (0,\"Syntax Error:  Unmatched parens\\n\");\n          goto err;                        /*    And return           */\n        }                                  /*   Is ok                 */\n        *pos = *ch;                        /*   Move to output buffer */\n        if (*ch=='(') pdeep++;             /*   Track paren nesting   */\n        else if (*ch==')') pdeep--;        /*   ditto                 */\n        else if (pdeep==0 && *ch==',') {   /*   End of an arg?        */\n          *pos = '\\0';                     /*    Terminate string     */\n          pfc->argnum++;                   /*    Bump arg counter     */\n          pfc->argpnt[pfc->argnum] = pos+1; /*   Start of next arg    */\n          *(pos+1) = '\\0';                 /*    If trailing comma    */\n        }                                  /*   endif                 */\n        pos++; ch++;                       /*   Bump pointers         */\n      }                                    /*  Continue               */\n      *pos = '\\0';                         /*  terminate final arg    */\n      pfc->argnum++;                       /*  Count instead of subscr*/\n      ch++;                                /*  Pnt past func call     */\n    }                                      /* X                       */\n  }                                        /* We have args parsed     */\n\n  /* Everything is all set.  Call the function routine.               */\n\n  if (upb) rc = ffudpi(pfc,pst2,upb);      /* Call the plug-in        */\n  else rc = (*fpntr)(pfc, pst2);           /* Call the function       */\n\n  if (rc==-1) {\n    snprintf(pout,1255,\"Error in %s : Arg was stn data type\\n\",name);\n    gaprnt (0,pout);\n  }\n\n  if (rc) {                                /* If an error occurred... */\n    snprintf(pout,1255,\"Operation Error:  Error from %s function\\n\",name);\n    gaprnt (0,pout);\n    goto err;\n  }\n  pst->type = pst2->type;\n  pst->result = pst2->result;              /* Return result grid      */\n  gree(pst2,\"f404\");\n  gree(pfc,\"f405\");\n  return (ch);                             /* And return new pointer  */\n\nerr:\n  gree(pst2,\"f406\");\n  gree(pfc,\"f407\");\n  return (NULL);\n\n}\n\n\n/**********************************************************************\\\n*                                                                      *\n*  Function routines follow.  To add a funcion routine, add code here, *\n*  and update the gafunc.h file.                                       *\n*                                                                      *\n\\**********************************************************************/\n\ngaint ffsqrt (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt,ecnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from SQRT: Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  ecnt=0;\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val  = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) {\n        if (*val<0.0) {\n          *valu = 0;\n          ecnt++;\n        } else {\n\t  *val = sqrt(*val);\n\t  *valu = 1;\n\t}\n      }\n\tval++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask != 0) {\n        if (rpt->val < 0.0) {\n          rpt->umask = 0;\n          ecnt++;\n        } else rpt->val = sqrt(rpt->val);\n      }\n      rpt=rpt->rpt;\n    }\n  }\n  if (ecnt>0) {\n    snprintf(pout,1255,\"Warning from SQRT:  Data has %i values < zero \\n\",ecnt);\n    gaprnt (1,pout);\n    gaprnt (1,\"                    These were set to the undefined value \\n\");\n  }\n  return (0);\n}\n\ngaint ffsin  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from SIN:  Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) *val = sin(*val);\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) rpt->val = sin(rpt->val);\n      rpt=rpt->rpt;\n    }\n  }\n\n  return (0);\n}\n\ngaint ffcos  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from COS:  Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) *val = cos(*val);\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) rpt->val = cos(rpt->val);\n      rpt=rpt->rpt;\n    }\n  }\n\n  return (0);\n}\n\ngaint fftan  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from TAN:  Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) *val = tan(*val);\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) rpt->val = tan(rpt->val);\n      rpt=rpt->rpt;\n    }\n  }\n  return (0);\n}\n\ngaint ffasin  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from ASIN:  Too many or too few args \\n\");\n    gaprnt (0,\"                  One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) {\n        if (*val>1.0 || *val<-1.0) {\n\t  *valu = 0;\n\t}\n        else {\n\t  *val = asin(*val);\n\t}\n      }\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) {\n        if (rpt->val>1.0 || rpt->val<-1.0) rpt->umask = 0;\n        else rpt->val = asin(rpt->val);\n      }\n      rpt=rpt->rpt;\n    }\n  }\n  return (0);\n}\n\ngaint ffacos  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from ACOS:  Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) {\n        if (*val>1.0 || *val<-1.0) {\n\t  *valu = 0;\n\t}\n        else {\n\t  *val = acos(*val);\n\t}\n      }\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) {\n        if (rpt->val>1.0 || rpt->val<-1.0) rpt->umask = 0;\n        else rpt->val = acos(rpt->val);\n      }\n      rpt=rpt->rpt;\n    }\n  }\n  return (0);\n}\n\ngaint ffabs (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from ABS:  Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) *val = fabs(*val);\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) rpt->val = fabs(rpt->val);\n      rpt=rpt->rpt;\n    }\n  }\n\n  return (0);\n}\n\ngaint ffexp  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from EXP:  Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) *val = exp(*val);\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) rpt->val = exp(rpt->val);\n      rpt=rpt->rpt;\n    }\n  }\n\n  return (0);\n}\n\ngaint fflog  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt,ecnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from LOG:  Too many or too few args \\n\");\n    gaprnt (0,\"                 One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  ecnt=0;\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) {\n        if (*val<=0.0) {\n          *valu = 0;\n          ecnt++;\n        } \n\telse *val = log(*val);\n      }\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) {\n        if (rpt->val<=0.0) {\n          rpt->umask = 0;\n          ecnt++;\n        } else rpt->val = log(rpt->val);\n      }\n      rpt=rpt->rpt;\n    }\n  }\n  if (ecnt>0) {\n    snprintf(pout,1255,\"Warning from LOG:  Data has %i values <= zero \\n\",ecnt);\n    gaprnt (1,pout);\n    gaprnt (1,\"                   These were set to the undefined value \\n\");\n  }\n\n  return (0);\n}\n\ngaint fflog10 (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt,ecnt;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val;\nchar *valu;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from LOG10:  Too many or too few args \\n\");\n    gaprnt (0,\"                   One argument expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  ecnt=0;\n  if (pst->type==1) {\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    valu = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (*valu!=0) {\n        if (*val<=0.0) {\n          *valu = 0;\n          ecnt++;\n        } else *val = log10(*val);\n      }\n      val++; valu++;\n    }\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (rpt->umask!=0) {\n        if (rpt->val<=0.0) {\n          rpt->umask = 0;\n          ecnt++;\n        } else rpt->val = log10(rpt->val);\n      }\n      rpt=rpt->rpt;\n    }\n  }\n  if (ecnt>0) {\n    snprintf(pout,1255,\"Warning from LOG10:  Data has %i values <= zero \\n\",ecnt);\n    gaprnt (1,pout);\n    gaprnt (1,\"                     These were set to the undefined value \\n\");\n  }\n\n  return (0);\n}\n\n/* Implement the IF function.  Three expressions for the operation.\n   The first arg is assumed to be the result of a logical expression. */\n\ngaint ffif (struct gafunc *pfc, struct gastat *pst) {\nstruct gastat pst2,pst3;\nstruct gagrid *mypgr,*pgr1,*pgrres1,*pgrres2,*pgrres3;\ngaint rc,i,savaloc;\n\n  if (pfc->argnum!=3) { \n    gaprnt (0,\"Error from IF:  Too many or too few args \\n\");\n    gaprnt (0,\"                Three arguments expected \\n\");\n    return (1);\n  }\n\n  pst2 = *pst;\n  pst3 = *pst;\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) {\n    return (rc);\n  }\n\n  rc = gaexpr(pfc->argpnt[1],&pst2);\n  if (rc) {\n    gafree (pst);\n    return (rc);\n  }\n\n  rc = gaexpr(pfc->argpnt[2],&pst3);\n  if (rc) {\n    gafree (pst);\n    gafree (&pst2);\n    return (rc);\n  }\n\n  if (pst->type!=1 || pst2.type!=1 || pst3.type!=1) {\n    gaprnt (0,\"Error from IF:  Arguments must be grids \\n\");\n    goto err1;\n  }\n\n  /* We need a copy of the result of the logical expression (arg 1) \n     since we need to use that result twice, and gagrop \n     may put its result grid there for our first \n     step.  We will re-use the scaling info, but we have to be \n     careful with the alocf issue. */\n\n  mypgr = galloc(sizeof(struct gagrid),\"ffif3\");\n  if (mypgr==NULL) goto err1;\n\n  pgr1 = pst->result.pgr; \n  savaloc = pgr1->alocf;   /* preserve original alocf value */\n  *mypgr = *pgr1;\n  mypgr->alocf = 0;\n  pgr1->alocf = 0;   /* don't let scaling info get freed until we are ready */\n\n  if (mypgr->idim != -1 && mypgr->jdim != -1) {\n    mypgr->grid = galloc(sizeof(gadouble)*mypgr->isiz*mypgr->jsiz,\"ffif1\");\n    if (mypgr->grid==NULL) goto err1;\n    mypgr->umask = galloc(sizeof(char)*mypgr->isiz*mypgr->jsiz,\"ffif2\");\n    if (mypgr->umask==NULL) {\n      gree (mypgr->grid,\"ffif1\");\n      goto err1;\n    }\n    for (i=0; i<mypgr->isiz*mypgr->jsiz; i++) {\n      *(mypgr->grid+i) = *(pgr1->grid+i);\n      *(mypgr->umask+i) = *(pgr1->umask+i);\n    }\n  }\n\n  /* Don't let gagrop free anything  */\n\n  rc = 0;\n  pgrres1=NULL; pgrres2=NULL; pgrres3=NULL;\n\n  pgrres1 = gagrop(pgr1, pst2.result.pgr, 14, 0);\n  if (pgrres1==NULL) rc = 1;\n  if (rc==0) pgrres2 = gagrop(mypgr, pst3.result.pgr, 15, 0);\n  if (pgrres2==NULL) rc = 1;\n  if (rc==0) pgrres3 = gagrop(pgrres2, pgrres1, 2, 0);\n  if (pgrres3==NULL) rc = 1; \n\n  /* We don't really know what original pgr ended up being our final result.\n     We sure don't want to free that one! We'll do something kloodgy \n     and compare pointers.  On error, pgrres3 ends up NULL, so everything\n     will get free'd  */\n\n  /* printf (\"xxxx %p %p %p %p %p\\n\",pgrres3,pst->result.pgr,\n                   pst2.result.pgr,pst3.result.pgr,mypgr);\n  printf (\"xxxx before gafree pst\\n\",rc); */\n\n  if (pgrres3 == mypgr) mypgr->alocf = savaloc; /* propagate alocf... */ \n  else pgr1->alocf = savaloc;      /*  or restore it */\n\n  if (pgrres3 != pst->result.pgr) gafree(pst);\n  if (pgrres3 != pst2.result.pgr) gafree(&pst2);\n  if (pgrres3 != pst3.result.pgr) gafree(&pst3);\n  if (pgrres3 != mypgr) gagfre(mypgr);\n\n  if (rc==0) {\n    pst->type = 1;\n    pst->result.pgr = pgrres3;\n  }\n\n  return (rc);\n\n  err1:\n    gafree(pst);\n    gafree(&pst2);\n    gafree(&pst3);\n    return(1);\n}\n\n\ngaint ffpow (struct gafunc *pfc, struct gastat *pst) {\nstruct gastat pst2;\ngaint rc;\n\n  if (pfc->argnum!=2) { \n    gaprnt (0,\"Error from POW:  Too many or too few args \\n\");\n    gaprnt (0,\"                 Two arguments expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  pst2 = *pst;\n  rc = gaexpr(pfc->argpnt[1],&pst2);\n  if (rc) {\n    gafree (pst);\n    return (rc);\n  }\n\n  rc = gafopr (pst, &pst2, 10);\n  if (rc) {\n    gafree (pst);\n    gafree (&pst2);\n  }\n\n  return (rc);\n}\n\ngaint ffmag (struct gafunc *pfc, struct gastat *pst) {\nstruct gastat pst2;\ngaint rc;\n\n  if (pfc->argnum!=2) {\n    gaprnt (0,\"Error from MAG:  Too many or too few args \\n\");\n    gaprnt (0,\"                 Two arguments expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  pst2 = *pst;\n  rc = gaexpr(pfc->argpnt[1],&pst2);\n  if (rc) {\n    gafree (pst);\n    return (rc);\n  }\n\n  rc = gafopr (pst, &pst2, 11);\n  if (rc) {\n    gafree (pst);\n    gafree (&pst2);\n  }\n  return (rc);\n}\n\n/* Perform atan2 function */\n\ngaint ffatan (struct gafunc *pfc, struct gastat *pst) {\nstruct gastat pst2;\ngaint rc;\n\n  if (pfc->argnum!=2) {\n    gaprnt (0,\"Error from ATAN2:  Too many or too few args \\n\");\n    gaprnt (0,\"                   Two arguments expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  pst2 = *pst;\n  rc = gaexpr(pfc->argpnt[1],&pst2);\n  if (rc) {\n    gafree (pst);\n    return (rc);\n  }\n\n  rc = gafopr (pst, &pst2, 12);\n  if (rc) {\n    gafree (pst);\n    gafree (&pst2);\n  }\n  return (rc);\n}\n\n/* Performs a bi-linear interpolation between two grids, \n   adapted from the external UDF lterp.\n*/ \ngaint fflterp (struct gafunc *pfc, struct gastat *pst) {\nstruct gastat pst2;\nstruct gagrid *pgr1,*pgr2;\ngadouble (*i1conv) (gadouble *, gadouble);\ngadouble (*i2conv) (gadouble *, gadouble);\ngadouble *x1=NULL,*x2=NULL,*y1=NULL,*y2=NULL;\ngadouble *x1b=NULL,*x2b=NULL,*y1b=NULL,*y2b=NULL;\ngadouble *gr1,*gr2,*gxout=NULL,*gyout=NULL,*area1=NULL,*area2=NULL;\ngadouble rad,w1,w2=0,alo,ahi,pct,minpct,tscl;\ngaint rc,i,ii,j,jj,i2,ij,ij1,ij2,j2,error=0,opt;\ngaint pxgbflg,pygbflg; \ngaint ib,ie,jb,je,maxgrid,icnt,indx,flag;\ngadouble *area_box=NULL,*fld_box=NULL,tot_fld,tot_area;\nchar *gr1u,*gr2u;\nstruct gafile *pfi1,*pfi2;\ngaint ic,jc,k,jcm1,jcp1,jcp2,bessel;\ngadouble r,s,r1,r2,r3,s1,s2,s3,fijm1,fij,fijp1,fijp2,u,fr[4],del,del2,del3;\nchar uijm1,uij,uijp1,uijp2;\nstruct dt t1g1;\ngadouble tval;\n  \n  rad = M_PI/180.0;\n\n  if (pfc->argnum<2 || pfc->argnum>4) {\n    gaprnt (0,\"Error from LTERP:  Too many or too few args \\n\");\n    gaprnt (0,\"                    2 to 4 arguments expected \\n\");\n    return (1);\n  }\n\n  if (pfc->argnum>=3) {\n    if (strcmp(\"bilin\",pfc->argpnt[2])==0)  {opt = 0; bessel=0;}  /* bilinear interpolation */\n    if (strcmp(\"bessel\",pfc->argpnt[2])==0) {opt = 0; bessel=1;}  /* bilinear interpolation with bessel */\n    if (strcmp(\"aave\" ,pfc->argpnt[2])==0)   opt = 1;             /* area average */\n    if (strcmp(\"amean\",pfc->argpnt[2])==0)   opt = 2;             /* area mean */\n\n    if (pfc->argnum==4) {\n      if (getdbl(pfc->argpnt[3],&minpct)==NULL) {\n\tgaprnt (0,\"Error from LTERP:  4th argument must be a real number between 0 and 100 \\n\");\n\treturn(1);\n      }\n      if (minpct<0 || minpct>100) {\n\tgaprnt (0,\"Error from LTERP:  4th argument must be between 0 and 100 \\n\");\n\treturn(1);\n      }\n    }\n    else minpct=50.0;\n  }\n  else {\n    opt=0;         /* bilin without bessel is the default */\n    bessel=0;\n  }\n\n\n   /* Evaluate the 2nd expression, the destination grid */\n  pst2=*pst;\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) { \n    gaprnt (0,\"Error from LTERP: Failed to evaluate 2nd expression \\n\"); \n    error=1; goto err; \n  }\n  if (pst->type!=1) {\n    gaprnt (0,\"Error from LTERP: The 2nd argument is not a grid expression \\n\"); \n    error=1; goto err;\n  }\n\n  /* Check environment */\n  if (pst->idim==-1) {\n    gaprnt (0,\"Error from LTERP: The destination grid is a constant \\n\"); \n    error=1; goto err;\n  }\n  if (pst->idim==2 || pst->idim==4 || pst->jdim==2 || pst->jdim==4) {\n    gaprnt (0,\"Error from LTERP: The grids cannot vary in Z or E \\n\"); \n    error=1; goto err;\n  }\n  if (opt==1 || opt==2) {\n    if (pst->idim!=0 || pst->jdim!=1) {\n    gaprnt (0,\"Error from LTERP: The grids must vary in X and Y when using aave or amean\\n\");\n    error=1; goto err;\n    }\n  }\n \n  /* Evaluate the 1st expression, the data values to be interpolated */\n  rc = gaexpr(pfc->argpnt[0],&pst2);\n  if (rc) { \n    gaprnt (0,\"Error from LTERP: Failed to evaluate 1st expression \\n\");\n    error=1; goto err; \n  }\n  if (pst2.type!=1) {\n    gaprnt (0,\"Error from LTERP: The 1st argument is not a grid expression \\n\");\n    error=1; goto err;\n  }\n\n  /* Verify that the varying dimensions are equivalent */\n  if (pst->idim!=pst2.idim || pst->jdim!=pst2.jdim) {\n    gaprnt (0,\"Error from LTERP: Grids have different varying dimensions \\n\");\n    error=1; goto err;\n  }\n\n  /* Get the grids */\n  pgr1 = pst2.result.pgr;     /* data source grid (input)  */\n  pgr2 = pst->result.pgr;     /* destination grid (result) */\n  gr1  = pgr1->grid;\n  gr1u = pgr1->umask;\n  gr2  = pgr2->grid;\n  gr2u = pgr2->umask;\n  pfi1 = pgr1->pfile;\n  pfi2 = pgr2->pfile;\n\n  /* If the time dimension varies, the time increment must be equivalent \n     (we won't interpolate from months to minutes) */\n  if (pst->idim==3) {\n    if ((*(pgr1->ivals+6)<0.5 && *(pgr2->ivals+6)>0.8) || \n\t(*(pgr1->ivals+6)>0.8 && *(pgr2->ivals+6)<0.5)) {\n      gaprnt (0,\"Error from LTERP: Grids do not have matching time increments \\n\");\n      error=1; goto err;\n    }\n  }\n  if (pst->jdim==3) {\n    if ((*(pgr1->jvals+6)<0.5 && *(pgr2->jvals+6)>0.8) || \n\t(*(pgr1->jvals+6)>0.8 && *(pgr2->jvals+6)<0.5)) {\n      gaprnt (0,\"Error from LTERP: Grids do not have matching time increments \\n\");\n      error=1; goto err;\n    }\n  }\n\n  /* get coordinate information (grid box centers and edges) for both grids, \n     source input grid 1 and destination output grid 2 */\n\n  if (pgr1->idim>-1) {\n    /* x1  is for the longitude of source grid box centers */\n    /* x1b is for the longitude of source grid box boundaries */\n    x1 = (gadouble *)galloc(sizeof(gadouble)*pgr1->isiz,\"x1\");\n    if (x1==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for x1\\n\");\n      error=1; goto err; \n    }\n    if (pgr1->idim==3) {\n      /* don't need to get the boundaries for time interpolation */\n      j=0;\n      for (i=pgr1->dimmin[pgr1->idim];i<=pgr1->dimmax[pgr1->idim];i++) {\n\t*(x1+j) = (gadouble)i;\n\tj++;\n      }\n    } else {\n      /* one extra point in the boundary array */\n      x1b = (gadouble *)galloc(sizeof(gadouble)*(pgr1->isiz+1),\"x1b\");  \n      if (x1b==NULL) { \n\tgaprnt (0,\"Error from LTERP: Unable to allocate memory for x1b\\n\");\n\terror=1; goto err; \n      }\n      i1conv = pgr1->igrab;\n      j=0;\n      for (i=pgr1->dimmin[pgr1->idim];i<=pgr1->dimmax[pgr1->idim];i++) {\n\t*(x1+j)  = i1conv(pgr1->ivals,(gadouble)i);         /* grid box centers */\n\t*(x1b+j) = i1conv(pgr1->ivals,(gadouble)(i-0.5));   /* grid box edges */\n\tj++;\n      }\n      *(x1b+j) = i1conv(pgr1->ivals,(gadouble)(i-0.5));  /* final edge */\n    }\n  }\n\n  if (pgr2->idim>-1) {\n    /* x2  is for the longitude of destination grid box centers */\n    /* x2b is for the longitude of destination grid box boundaries */\n    x2 = (gadouble *)galloc(sizeof(gadouble)*pgr2->isiz,\"x2\");\n    if (x2==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for x2\\n\");\n      error=1; goto err; \n    }\n    if (pgr2->idim==3) {\n      /* don't need to get the boundaries for time interpolation */\n      j=0;\n      for (i=pgr2->dimmin[pgr2->idim];i<=pgr2->dimmax[pgr2->idim];i++) {\n\t*(x2+j) = (gadouble)i;\n\tj++;\n      }\n    } else {\n      x2b = (gadouble *)galloc(sizeof(gadouble)*(pgr2->isiz+1),\"x2b\");\n      if (x2b==NULL) { \n\tgaprnt (0,\"Error from LTERP: Unable to allocate memory for x2b\\n\");\n\terror=1; goto err; \n      }\n      i2conv = pgr2->igrab;\n      j=0;\n      for (i=pgr2->dimmin[pgr2->idim];i<=pgr2->dimmax[pgr2->idim];i++) {\n\t*(x2+j)  = i2conv(pgr2->ivals,(gadouble)i);        /* grid box centers */\n\t*(x2b+j) = i2conv(pgr2->ivals,(gadouble)(i-0.5));  /* grid box edges */\n\tj++;\n      }\n      *(x2b+j) = i2conv(pgr2->ivals,(gadouble)(i-0.5));  /* final edge */\n    }\n  }\n\n  if (pgr1->jdim>-1) {\n    /* y1  is for the latitude of source grid box centers */\n    /* y1b is for the latitude of source grid box boundaries */\n    y1 = (gadouble *)galloc(sizeof(gadouble)*pgr1->jsiz,\"y1\");\n    if (y1==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for y1\\n\");\n      error=1; goto err; \n    }\n    if (pgr1->jdim==3) {\n      /* don't need to get the boundaries for time interpolation */\n      j=0;\n      for (i=pgr1->dimmin[pgr1->jdim];i<=pgr1->dimmax[pgr1->jdim];i++) {\n\t*(y1+j) = (gadouble)i;\n\tj++;\n      }\n    } else {\n      y1b = (gadouble *)galloc(sizeof(gadouble)*(pgr1->jsiz+1),\"y1b\");\n      if (y1b==NULL) { \n\tgaprnt (0,\"Error from LTERP: Unable to allocate memory for y1b\\n\");\n\terror=1; goto err; \n      }\n      i1conv = pgr1->jgrab;\n      j=0;\n      for (i=pgr1->dimmin[pgr1->jdim];i<=pgr1->dimmax[pgr1->jdim];i++) {\n\t*(y1+j)  = i1conv(pgr1->jvals,(gadouble)i);         /* grid box centers */\n\t*(y1b+j) = i1conv(pgr1->jvals,(gadouble)(i-0.5));   /* grid box edges */\n\tj++;\n       }\n      *(y1b+j) = i1conv(pgr1->jvals,(gadouble)(i-0.5));  /* final edge */\n    }\n  }\n\n  if (pgr2->jdim>-1) {\n    /* y2  is for the latitude of destination grid box centers */\n    /* y2b is for the latitude of destination grid box boundaries */\n    y2 = (gadouble *)galloc(sizeof(gadouble)*pgr2->jsiz,\"y2\");\n    if (y2==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for y2\\n\");\n      error=1; goto err; \n    }\n    if (pgr2->jdim==3) {\n      /* don't need to get the boundaries for time interpolation */\n      j=0;\n      for (i=pgr2->dimmin[pgr2->jdim];i<=pgr2->dimmax[pgr2->jdim];i++) {\n\t*(y2+j) = (gadouble)i;\n\tj++;\n      }\n    } else {\n      y2b = (gadouble *)galloc(sizeof(gadouble)*(pgr2->jsiz+1),\"y2b\");\n      if (y2==NULL) { \n\tgaprnt (0,\"Error from LTERP: Unable to allocate memory for y2b\\n\");\n\terror=1; goto err; \n      }\n      i2conv = pgr2->jgrab;\n      j=0;\n      for (i=pgr2->dimmin[pgr2->jdim];i<=pgr2->dimmax[pgr2->jdim];i++) {\n\t*(y2+j)  = i2conv(pgr2->jvals,(gadouble)i);         /* grid box centers */\n\t*(y2b+j) = i2conv(pgr2->jvals,(gadouble)(i-0.5));   /* grid box edges */\n\tj++;\n      }\n      *(y2b+j) = i2conv(pgr2->jvals,(gadouble)(i-0.5));   /* final edge */  \n    }\n  }\n\n  /* Normalize the time coordinates.  We want the grid time values to\n     be the same coordinate system for each grid.  */\n  if (pst->idim==3 || pst->jdim==3) {\n\n    /* get world coordinate value of initial t for grid 2 (destination grid) */\n    gr2t (pfi2->grvals[3],pgr2->dimmin[3],&t1g1);\n    /* find the t value for this time in the axis of grid 1 (src grid) */\n    tval = t2gr(pfi1->abvals[3], &t1g1);\n\n    if (pst->idim==3) {\n      /* the i dimension is T-varying */\n      /* determine scaling factor */\n      if (pgr1->ivals[6]>0.8) \n\ttscl = pgr2->ivals[6] / pgr1->ivals[6] ;\n      else\n\ttscl = pgr2->ivals[5] / pgr1->ivals[5] ;\n      /* normalize */\n      for (i=0; i<pgr2->isiz; i++) *(x2+i) = tval + tscl*(gadouble)i;\n    }\n    else {\n      /* the j dimension is T-varying */\n      /* determine scaling factor */\n      if (pgr1->jvals[6]>0.8)\n\ttscl = pgr2->jvals[6] / pgr1->jvals[6] ;\n      else\n\ttscl = pgr2->jvals[5] / pgr1->jvals[5] ;\n      /* normalize */\n      for (i=0; i<pgr2->jsiz; i++) *(y2+i) = tval + tscl*(gadouble)i;\n    }\n  }\n\n  if (opt==1 || opt==2) {\n    /* for aave and amean, \n       gxout/gyout contain real-valued locations of output grid box EDGES in i/j-axis of input grid, \n       and whole integer values of gxout/gyout correspond to input grid point boundaries */\n    \n    /* allocate memory with one extra point in array size for final boundary value */\n    gxout = (gadouble *)galloc((pgr2->isiz+1)*sizeof(gadouble),\"gxout\");\n    if (gxout==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for gxout\\n\"); error=1; goto err; \n    }\n    gyout = (gadouble *)galloc((pgr2->jsiz+1)*sizeof(gadouble),\"gyout\");\n    if (gyout==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for gyout\\n\"); error=1; goto err; \n    }\n    /* loop over i dimension for output grid boundaries */\n    for (i2=0; i2<=pgr2->isiz; i2++) {  \n      /* check if this output grid point lies inside the longitude range of input grid */\n      if ((*(x2b+i2) >= *(x1b+0)) && (*(x2b+i2) <= *(x1b+pgr1->isiz))){\n\t/* loop over i dimension for input grid boundaries */\n\tfor (i=0; i<pgr1->isiz; i++) {\n\t  if (*(x2b+i2) >= *(x1b+i) && *(x2b+i2) <= *(x1b+i+1)) {\n\t    *(gxout+i2) = (gadouble)i + (*(x2b+i2)-*(x1b+i))/(*(x1b+i+1)-*(x1b+i));\n\t    break;\n\t  }\n\t}\n      }\n      else {\n\t/* output grid point is outside the longitude range of input grid */\n\tif (*(x2b+i2) < *(x1b+0)) \n\t  *(gxout+i2) = 0.0;\n\telse \n\t  *(gxout+i2) = (gadouble)pgr1->isiz;\n      }\n    }\n    /* loop over j dimension for output grid boundaries */\n    for (j2=0; j2<=pgr2->jsiz; j2++) {\n      /* check if this output grid point lies inside the latitude range of input grid */\n      if (*(y2b+j2) >= *(y1b+0) && *(y2b+j2) <= *(y1b+pgr1->jsiz)) {\n\t/* loop over j dimension for input grid boundaries */\n\tfor (j=0; j<pgr1->jsiz; j++) {\n\t  if (*(y2b+j2) >= *(y1b+j) && *(y2b+j2) <= *(y1b+j+1)) {\n\t    *(gyout+j2) = (gadouble)j + (*(y2b+j2)-*(y1b+j))/(*(y1b+j+1)-*(y1b+j));\n\t    break;\n\t  }\n\t}\n      }\n      else {\n\t/* output grid point is outside the longitude range of input grid */\n\tif (*(y2b+j2) < *(y1b+0))  \n\t  *(gyout+j2) = 0.0;\n\telse \n\t  *(gyout+j2) = (gadouble)pgr1->jsiz;\n      }\n    }\n  }\n  else {\n    /* for bilin (opt==0), \n       gxout/gyout contain real-valued locations of output grid box CENTERS in i/j-axis of input grid, \n       and whole integer values of gxout/gyout correspond to input grid point centers */\n    \n    /* allocate memory */\n    gxout = (gadouble *)galloc((pgr2->isiz)*sizeof(gadouble),\"gxout\");\n    if (gxout==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for gxout\\n\"); error=1; goto err; \n    }\n    /* loop over i dimension for output grid centers */\n    for (i2=0; i2<pgr2->isiz; i2++) {  \n      /* initialize -- destination grid points outside range of input grid will have gxout=-999 */\n      *(gxout+i2)=-999;   \n      /* check if this output grid point lies inside the longitude range of input grid box centers */\n      if ((*(x2+i2) >= *(x1+0)) && (*(x2+i2) <= *(x1+pgr1->isiz-1))){\n\t/* loop over i dimension for input grid box centers */\n\tfor (i=0; i<pgr1->isiz-1; i++) {\n\t  if (*(x2+i2) >= *(x1+i) && *(x2+i2) <= *(x1+i+1)) {\n\t    *(gxout+i2) = (gadouble)i + (*(x2+i2)-*(x1+i))/(*(x1+i+1)-*(x1+i));\n\t    break;\n\t  }\n\t}\n      }\n    }\n    if (pgr1->jdim>0) {\n      /* allocate memory */\n      gyout = (gadouble *)galloc((pgr2->jsiz)*sizeof(gadouble),\"gyout\");\n      if (gyout==NULL) { \n\tgaprnt (0,\"Error from LTERP: Unable to allocate memory for gyout\\n\"); error=1; goto err; \n      }\n      /* loop over j dimension for output grid boundaries */\n      for (j2=0; j2<pgr2->jsiz; j2++) {\n\t/* initialize -- destination grid points outside range of input grid will have gyout=-999 */\n\t*(gyout+j2)=-999; \n\t/* check if this output grid point lies inside the latitude range of input grid */\n\tif (*(y2+j2) >= *(y1+0) && *(y2+j2) <= *(y1+pgr1->jsiz-1)) {\n\t  /* loop over j dimension for input grid boundaries */\n\t  for (j=0; j<pgr1->jsiz-1; j++) {\n\t    if (*(y2+j2) >= *(y1+j) && *(y2+j2) <= *(y1+j+1)) {\n\t      *(gyout+j2) = (gadouble)j + (*(y2+j2)-*(y1+j))/(*(y1+j+1)-*(y1+j));\n\t      break;\n\t    }\n\t  }\n\t}\n      }\n    }\n  }\n\n  /* calculate the area of each grid box for the input and output grids */\n  /* areas are weighted by latitude if using aave, but not if using amean */\n  /* don't bother to calculate areas if using bilin */\n  if (opt==1 || opt==2) {\n    area1 = (gadouble *)galloc(pgr1->isiz*pgr1->jsiz*sizeof(gadouble),\"area1\");\n    if (area1==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for area1\\n\"); error=1; goto err; \n    }\n    for (j=0; j<pgr1->jsiz; j++) {\n      alo = *(y1b+j);\n      ahi = *(y1b+j+1);\n      if (alo < -90.0) alo = -90.0; if (alo > 90.0) alo = 90.0;\n      if (ahi < -90.0) ahi = -90.0; if (ahi > 90.0) ahi = 90.0;\n      if (opt==1) \n\tw1 = fabs(sin(ahi*rad)-sin(alo*rad));  /* length is weighted by latitude (aave) */\n      else \n\tw1 = fabs((ahi-alo)*rad);              /* length is not weighted by latitude (amean) */\n      for (i=0; i<pgr1->isiz; i++) {\n\tij = j*pgr1->isiz+i;  \n\talo = *(x1b+i);\n\tahi = *(x1b+i+1);\n\tw2 = fabs((ahi-alo)*rad);              /* w2 is the width of grid box  */\n\t*(area1+ij) =  w1 * w2;\n      }\n    }\n    area2 = (gadouble *)galloc(pgr2->isiz*pgr2->jsiz*sizeof(gadouble),\"area2\");\n    if (area2==NULL) { \n      gaprnt (0,\"Error from LTERP: Unable to allocate memory for area2\\n\"); error=1; goto err; \n    }\n    for (j=0; j<pgr2->jsiz; j++) {\n      alo = *(y2b+j);\n      ahi = *(y2b+j+1);\n      if (alo < -90.0) alo = -90.0; if (alo > 90.0) alo = 90.0;\n      if (ahi < -90.0) ahi = -90.0; if (ahi > 90.0) ahi = 90.0;\n      if (opt==1) \n\tw1 = fabs(sin(ahi*rad)-sin(alo*rad));  /* length is weighted by latitude (aave) */\n      else \n\tw1 = fabs((ahi-alo)*rad);              /* length is not weighted by latitude (amean) */\n      for (i=0; i<pgr2->isiz; i++) {\n\tij = j*pgr2->isiz+i;  \n\talo = *(x2b+i);\n\tahi = *(x2b+i+1);\n\tw2 = fabs((ahi-alo)*rad);              /* w2 is the width of grid box  */\n\t*(area2+ij) =  w1 * w2;\n      }\n    }\n  }\n\n  /* Finally, we're ready to perform the interpolation */\n  if (opt==1 || opt==2) {\n    /* box averaging, based on doaave, regrid2.f and re.c */\n\n    /* loop over output grid points */\n    for (j=0; j<pgr2->jsiz; j++) {\n      for (i=0; i<pgr2->isiz; i++) {\n\tij = j*pgr2->isiz+i;  \n\tif (*(area2+ij) > 0) {\n\t  /* whole integer values of gxout and gyout correspond to the boundaries of input grid boxes */\n\t  ib = (int)*(gxout+i);\n\t  ie = (int)*(gxout+i+1);\n\t  jb = (int)*(gyout+j);\n\t  je = (int)*(gyout+j+1);\n\t  /* allocate memory for group of input grid boxes within a single output grid box */\n\t  maxgrid = (ie-ib+1)*(je-jb+1);\n\t  area_box = (gadouble *)galloc(sizeof(gadouble)*maxgrid,\"area_box\");\n\t  fld_box  = (gadouble *)galloc(sizeof(gadouble)*maxgrid,\"fld_box\");\n\t  if (area_box==NULL || fld_box==NULL) {\n\t    gaprnt (0,\"Error from LTERP: memory allocation error for box_averaging \\n\");\n\t    error=1; goto err;\n\t  }      \n\t  /* Now loop over all input grid boxes that lie within the output grid box.\n\t     Figure out area of of each, whether whole or partial. \n\t     Start with the length along the latitude axis. \n\t     If input grid box is partially inside output grid box, we need to recalculate w1 */\n\t  icnt=0;   /* initialize the counter for input grid boxes that are within output grid box */\n\t  for (jj=jb; jj<=je; jj++) {\n\t    pygbflg=0;                 /* not a partial grid box in y */\n\t    if (jb!=je && jj==jb) { \n\t      /* more than one in y range, and this grid box is at bottom of y range */\n\t      /* re-calculate length of partial grid box */\n\t      pygbflg=1;\n\t      alo = *(y2b+j);\n\t      ahi = *(y1b+jb+1);\n\t      if (alo < -90.0) alo = -90.0; if (alo > 90.0) alo = 90.0;\n\t      if (ahi < -90.0) ahi = -90.0; if (ahi > 90.0) ahi = 90.0;\n\t      /* don't let alo be less than min lat of source grid */\n\t      if (jb==0 && alo<*(y1b)) alo = *(y1b);\n\t      if (opt==1)\n\t\tw1 = fabs(sin(ahi*rad)-sin(alo*rad)); \n\t      else \n\t\tw1 = fabs((ahi-alo)*rad);\n\t    }\n\t    else if (je!=jb && jj==je) {                     \n\t      /* more than one in y range, and this grid box is at top of y range */\n\t      /* re-calculate length of partial grid box */\n\t      pygbflg=1;\n\t      alo = *(y1b+je);\n\t      ahi = *(y2b+j+1);\n\t      if (alo < -90.0) alo = -90.0; if (alo > 90.0) alo = 90.0;\n\t      if (ahi < -90.0) ahi = -90.0; if (ahi > 90.0) ahi = 90.0;\n\t      /* don't let ahi be more than max lat of source grid */\n\t      if (je==pgr1->jsiz && ahi>*(y1b+je)) ahi=*(y1b+je);\n\t      if (opt==1) \n\t\tw1 = fabs(sin(ahi*rad)-sin(alo*rad));\n\t      else \n\t\tw1 = fabs((ahi-alo)*rad);\n\t    }\n\t    else {\n\t      /* only one box in y range, or this box is in the middle of the y range. \n\t\t either way, we will use entire length of output grid box (pygblfg is still 0) */\n\t      /* get length anyway in case we have a partial overlap in the x dimension */\n\t      alo = *(y1b+jj);\n\t      ahi = *(y1b+jj+1);\n\t      if (alo < -90.0) alo = -90.0; if (alo > 90.0) alo = 90.0;\n\t      if (ahi < -90.0) ahi = -90.0; if (ahi > 90.0) ahi = 90.0;\n\t      if (opt==1) \n\t\tw1 = fabs(sin(ahi*rad)-sin(alo*rad));\n\t      else \n\t\tw1 = fabs((ahi-alo)*rad);\n\t    }\n\t    /* Now get the width along the longitude axis.\n\t       If input grid box is partially inside the output grid box, we need to recalculate w2 */\n\t    for (ii=ib; ii<=ie; ii++) {\n\t      pxgbflg=0;                 /* not a partial grid box in x */   \n\t      if (ib!=ie && ii==ib) {\n\t\t/* more than one in x range, and this grid box is at left edge of range */\n\t\tpxgbflg=1;\n\t\talo = *(x2b+i);\n\t\tahi = *(x1b+ib+1);\n\t\t/* don't let alo be less than min lon of source grid */\n\t\tif (ib==0 && alo<*(x1b)) alo = *(x1b);\n\t\tw2 = fabs((ahi-alo)*rad);\n\t      }\n\t      else if (ie!=ib && ii==ie) {\n\t\t/* more than one in x range, and this grid box is at right edge of range */\n\t\tpxgbflg=1;\n\t\talo = *(x1b+ie);\n\t\tahi = *(x2b+i+1);\n\t\t/* don't let ahi be more than max lon of source grid */\n\t\tif (ie==pgr1->isiz && ahi>*(x1b+ie)) ahi=*(x1b+ie);\n\t\tw2 = fabs((ahi-alo)*rad);\n\t      }\n\t      else {\n\t\t/* only one box in x range, or this box is in the middle of the x range. \n\t\t   either way, we'll use entire width of output grid box (pxgbflg is 0) */\n\t\tif (pygbflg) {\n\t\t  /* get width because we have a partial overlap in the y dimension */\n\t\t  alo = *(x1b+ii);\n\t\t  ahi = *(x1b+ii+1);\n\t\t  w2 = fabs((ahi-alo)*rad);\n\t\t}\n\t      }\t\n\t      /* Set the area and data value for each non-missing input grid box in range */\n\t      indx = jj*pgr1->isiz+ii;\n\t      if ((*(gr1u+indx)==1) && (*(area1+indx)>0)) {\n\t\tif (pygbflg || pxgbflg) {\n\t\t  /* recalculate area of partial grid box, as long as length and width are non-zero */\n\t\t  if (w1>0 && w2>0) {\n\t\t    *(area_box+icnt) = w1 * w2; \n\t\t    *(fld_box+icnt)  = *(gr1+indx);\n\t\t    icnt++;\n\t\t  } \n\t\t}\n\t\telse {\n\t\t  /* the entire input grid box is within output grid, use area1 (already calculated) */\n\t\t  *(area_box+icnt) = *(area1+indx);\n\t\t  *(fld_box+icnt)  = *(gr1+indx);\n\t\t  icnt++;\n\t\t} \n\t      }\t\t\n\t      if (icnt > maxgrid) { \n\t\tgaprnt (0,\"Error from LTERP: icnt>maxgrid \\n\");\n\t\terror=1; goto err; \n\t      }\n\t    }\n\t  }\n\t  /* Now integrate over all the input boxes within the output box */\n\t  tot_fld = 0.0;\n\t  tot_area = 0.0;\n\t  for (ii=0; ii<icnt; ii++) {\n\t    tot_fld  = tot_fld + (*(fld_box+ii) * *(area_box+ii));\n\t    tot_area = tot_area + *(area_box+ii);\n\t  }\n\t  /* Calculate the percentage of the output grid box area that contains valid data */\n\t  pct = 100*(tot_area/(*(area2+ij)));\n\t  if (pct>minpct) {\n\t    *(gr2u+ij) = 1;\n\t    *(gr2+ij) = tot_fld/tot_area;\n\t  }\n\t  else {\n\t    *(gr2u+ij) = 0;\n\t  }\n\t  /* release memory */\n\t    if (fld_box)  gree(fld_box,\"399a\");\n\t    if (area_box) gree(area_box,\"399b\");\n\t    fld_box = area_box = NULL;\n\t} /* matches if *(area2+ij)>0 */\n      }\n    }\n  } /* matches if (opt==1 || opt==2) (for box averaging) */\n  \n  else {\n    /* bilinear interpolation based on regrid2.f and re.c */\n    /* bilinear/bessel interpolation based on the FNOC routine bssl5 by D. Hensen, FNOC */\n    \n    /* 1D */\n    if (pgr1->jdim<0) {\n      /* loop over all points in destination output grid */\n      for (i=0; i<pgr2->isiz; i++) { \t\n\t/* check if this destination grid point is outside the source grid */\n\tif (gxout[i]<0) {\n\t  *(gr2u+i) = 0;\n\t}\n\telse {\n\t  /* ic is index values for nearest input source grid point */\n\t  ic = (int) gxout[i];\n\t  r = gxout[i] - ic;\n\t  /* if we're at the edge of the grid, and endpoints of both grids have the same value,\n\t     we'll use the endpoints in the result grid -- tweak ic, and r to enable this. */\n\t  if ((ic==pgr1->isiz-1) && x1[ic]==x2[i]) {\n\t    ic--;\n\t    r=1;\n\t  }\n\t  /* make sure surrounding points are valid */\n\t  if (*(gr1u+ic) == 1 && *(gr1u+ic+1) == 1) {\n\t    *(gr2u+i) = 1;\n\t    *(gr2+i) = *(gr1+ic)*(1-r) + *(gr1+ic+1)*r;\n\t  } \n\t  else {\n\t    *(gr2u+i) = 0;\n\t  }\n\t}\n      }\n    }\n    /* 2D */\n    else {\n      /* loop over all points in destination output grid */\n      for (j=0; j<pgr2->jsiz; j++) {\n\tfor (i=0; i<pgr2->isiz; i++) {\n\t  ij2=i+j*pgr2->isiz;\n\t  /* check if this destination grid point is outside the source grid */\n\t  if (gxout[i]<0 || gyout[j]<0) {\n\t    *(gr2u+ij2) = 0;\n\t  } \n\t  else {\n\t    /* ic and jc are index values for input source grid point at bottom left of 4 nearest neighbors */\n\t    ic = (int) gxout[i];\n\t    jc = (int) gyout[j];\n\t    r = gxout[i] - ic;\n\t    s = gyout[j] - jc;\t\t\t\n\t    /* if we're at the top/right edge of the grid, and endpoints of both grids have the same value,\n\t       we'll use the endpoints in the result grid -- tweak ic, jc, r, and s to enable this. */\n\t    if ((ic==pgr1->isiz-1) && x1[ic]==x2[i]) {\n\t      ic--;\n\t      r=1;\n\t    }\n\t    if ((jc==pgr1->jsiz-1) && y1[jc]==y2[j]) {\n\t      jc--;\n\t      s=1;\n\t    }\n\t    ij1=ic+jc*pgr1->isiz;\n\t    /* make sure surrounding points are valid */\n\t    if (*(gr1u+ij1) == 1 && \n\t\t*(gr1u+ij1+1) == 1 && \n\t\t*(gr1u+ij1+pgr1->isiz) == 1 && \n\t\t*(gr1u+ij1+pgr1->isiz+1) == 1) {\n\t      *(gr2u+ij2) = 1;\n\t      *(gr2+ij2) = (1-s)*(*(gr1+ij1)*(1-r) + *(gr1+ij1+1)*r) + \n\t\ts*(*(gr1+ij1+pgr1->isiz)*(1-r) + *(gr1+ij1+pgr1->isiz+1)*r);\n\t    } \n\t    else {\n\t      *(gr2u+ij2) = 0;\n\t    }\n\t    \n\t    if (bessel==1) {\n\t      /* refine interpolation with bessel algorithm */\n\t      /* interpolate 4 columns (i-1,i,i+1,i+2) to j+s and store in fr[0] through fr[3]*/\n\t      r1 = r - 0.5;\n\t      r2 = r * (r-1) * 0.5;\n\t      r3 = r1 * r2 * (1/3);\n\t      s1 = s - 0.5;\n\t      s2 = s * (s-1) * 0.5;\n\t      s3 = s1 * s2 * (1/3);\n\t      k = 0;\n\t      flag=1;\n\t      for (ii=ic-1; ii<=ic+2; ii++) {\n\t\t/* make sure we're far enough away from the grid edges */\n\t\tif (ic==0 || jc==0) { flag=0; break; }\n\t\tif (ic>pgr1->isiz-3 || jc>pgr1->jsiz-3) { flag=0; break; }\n\t\t\n\t\t/* set up indices and values for secondary ring -- the nearest 16 grid points */\n\t\tjcp1 = jc+1;\n\t\tjcp2 = jc+2;\n\t\tjcm1 = jc-1;\n\t\t\n\t\tfijm1 = *(gr1+ii + jcm1 * pgr1->isiz);\n\t\tfij   = *(gr1+ii + jc   * pgr1->isiz);\n\t\tfijp1 = *(gr1+ii + jcp1 * pgr1->isiz);\n\t\tfijp2 = *(gr1+ii + jcp2 * pgr1->isiz);\n\t\t\n\t\tuijm1 = *(gr1u+ii + jcm1 * pgr1->isiz);\n\t\tuij   = *(gr1u+ii + jc   * pgr1->isiz);\n\t\tuijp1 = *(gr1u+ii + jcp1 * pgr1->isiz);\n\t\tuijp2 = *(gr1u+ii + jcp2 * pgr1->isiz);\n\t\t\n\t\t/* exit if any value undefined */\n\t\tif (uijm1 == 0 || uij == 0 || uijp1 == 0 || uijp2 == 0) { flag=0; break; }\n\t\tu = (fij + fijp1) * 0.5;\n\t\tdel = fijp1 - fij;\n\t\tdel2 = (fijp2 - fijp1 + fijm1 - fij) * 0.5;\n\t\tdel3 = fijp2 - fijp1 - del * 2 + fij - fijm1;\n\t\tfr[k] = u + s1*del + s2*del2 + s3*del3;\n\t\tk++;\n\t      }\n\t      \n\t      /* interpolate the fr row to ii+r */\n\t      if (flag) {\n\t\tu = (fr[1] + fr[2]) * 0.5;\n\t\tdel = fr[2] - fr[1];\n\t\tdel2 = (fr[3] - fr[2] + fr[0] - fr[1]) * 0.5;\n\t\tdel3 = fr[3] - fr[2] - del*2 + fr[1] - fr[0];\n\t\t*(gr2+ij2) = u + r1*del + r2*del2 + r3*del3;\n\t      }\n\t    }\n\t  }\n\t}\n      }\n    }\n  }\n\n/* Alternaive bilinear interpolation from Brian Doty's lterp code */\n/*     /\\* see which way x y vary with i*\\/ */\n/*     if (pgr2->ilinr == 0) { */\n/*       idir2 = -1; */\n/*       if (*(x2+1) > *x2) idir2 = 1; */\n/*     } else { */\n/*       idir2 = 1; */\n/*     } */\n/*     if (pgr2->jlinr == 0) { */\n/*       jdir2 = -1; */\n/*       if (*(y2+1) > *y2) jdir2 = 1; */\n/*     } else { */\n/*       jdir2 = 1; */\n/*     } */\n/*     if (pgr1->jdim<0) { */\n/*       /\\* 1D *\\/ */\n/*       i1 = -1; */\n/*       for (i2=0; i2<pgr2->isiz; i2++) { */\n/* \tif (idir2 == 1) { */\n/* \t  while (i1<pgr1->isiz-1 && *(x1+i1+1)<=*(x2+i2)) i1++; */\n/* \t} else { */\n/* \t  while (i1<pgr1->isiz-1 && *(x1+i1+1)>=*(x2+i2)) i1++; */\n/* \t}  */\n/* \tif (i1==pgr1->isiz-1 && *(x1+i1)==*(x2+i2)) i1--; */\n/* \tif (i1<0 || i1>pgr1->isiz-2 || *(gr1u+i1)==0 || *(gr1u+i1+1)==0) { */\n/* \t  *(gr2u+i2) = 0; */\n/* \t} */\n/* \telse { */\n/* \t  xd = *(x1+i1+1) - *(x1+i1); */\n/* \t  rd = *(gr1+i1+1) - *(gr1+i1); */\n/* \t  *(gr2+i2) = *(gr1+i1)+(*(x2+i2)-*(x1+i1))*rd/xd; */\n/* \t  *(gr2u+i2) = 1; */\n/* \t} */\n/*       } */\n/*     } else { */\n/*       /\\* 2D *\\/ */\n/*       j1 = -1; */\n/*       for (j2=0; j2<pgr2->jsiz; j2++) { */\n/* \tif (jdir2 == 1) { */\n/* \t  while (j1<pgr1->jsiz-1 && *(y1+j1+1)<=*(y2+j2)) j1++; */\n/* \t} else { */\n/* \t  while (j1<pgr1->jsiz-1 && *(y1+j1+1)>=*(y2+j2)) j1++; */\n/* \t} */\n/* \tif (j1==pgr1->jsiz-1 && *(y1+j1)==*(y2+j2)) j1--; */\n/* \ti1 = -1; */\n/* \tfor (i2=0; i2<pgr2->isiz; i2++) { */\n/* \t  if(idir2 == 1) { */\n/* \t    while (i1<pgr1->isiz-1 && *(x1+i1+1)<=*(x2+i2)) i1++; */\n/* \t  } else { */\n/* \t    while (i1<pgr1->isiz-1 && *(x1+i1+1)>=*(x2+i2)) i1++; */\n/* \t  }  */\n/* \t  if (i1==pgr1->isiz-1 && *(x1+i1)==*(x2+i2)) i1--; */\n/* \t  ij1 = j1*pgr1->isiz+i1; */\n/* \t  ij2 = j2*pgr2->isiz+i2; */\n/* \t  if ( i1<0 || i1>pgr1->isiz-2 ||  */\n/* \t       j1<0 || j1>pgr1->jsiz-2 || */\n/* \t       *(gr1u+ij1)==0 ||           */\n/* \t       *(gr1u+ij1+1)==0 || */\n/* \t       *(gr1u+ij1+pgr1->isiz)==0 ||  */\n/* \t       *(gr1u+ij1+pgr1->isiz+1)==0 ) { */\n/* \t    *(gr2u+ij2) = 0; */\n/* \t  } */\n/* \t  else { */\n/* \t    yd = *(y1+j1+1) - *(y1+j1); */\n/* \t    rd = *(gr1+ij1+pgr1->isiz) - *(gr1+ij1); */\n/* \t    t1 = *(gr1+ij1) + (*(y2+j2)-*(y1+j1))*rd/yd; */\n/* \t    rd = *(gr1+ij1+pgr1->isiz+1) - *(gr1+ij1+1); */\n/* \t    t2 = *(gr1+ij1+1) + (*(y2+j2)-*(y1+j1))*rd/yd; */\n/* \t    xd = *(x1+i1+1) - *(x1+i1); */\n/* \t    *(gr2+ij2) = t1 + (*(x2+i2)-*(x1+i1))*(t2-t1)/xd; */\n/* \t    *(gr2u+ij2) = 1; */\n/* \t  } */\n/* \t} */\n/*       } */\n/*     } */\n\nerr:\n\n  /* release memory */\n  gafree (&pst2);\n  if (error) if (pst!=NULL) gafree (pst); \n  if (x1!=NULL) gree(x1,\"f400\");\n  if (x2!=NULL) gree(x2,\"f401\");\n  if (y1!=NULL) gree(y1,\"f402\");\n  if (y2!=NULL) gree(y2,\"f403\");\n  if (x1b!=NULL) gree(x1b,\"f400b\");\n  if (x2b!=NULL) gree(x2b,\"f401b\");\n  if (y1b!=NULL) gree(y1b,\"f402b\");\n  if (y2b!=NULL) gree(y2b,\"f403b\");\n  if (gxout!=NULL) gree(gxout,\"f400c\");\n  if (gyout!=NULL) gree(gyout,\"f401c\");\n  if (area1!=NULL) gree(area1,\"f402b\");\n  if (area2!=NULL) gree(area2,\"f403b\");\n  if (fld_box!=NULL) gree(fld_box,\"399a\");\n  if (area_box!=NULL) gree(area_box,\"399b\");\n  if (error) \n    return 1;\n  else \n    return 0;\n}\n\n/* Perform a two-operand operation which may have both grid or\n   stn data types involved.  */\n\ngaint gafopr (struct gastat *pst1, struct gastat *pst2, gaint op) {\nstruct gagrid *pgr;\nstruct gastn *stn;\n\n  /* Check for grid-grid operation */\n  pgr=NULL;\n  if (pst1->type == 1 && pst2->type==1) {\n    pgr = gagrop(pst1->result.pgr, pst2->result.pgr, op, 1);\n    if (pgr==NULL) return (1);\n    pst1->type = 1;\n    pst1->result.pgr = pgr;\n    return (0);\n  }\n\n  /* If both stns, do stn-stn operation */\n  if (pst1->type==0 && pst2->type==0 ) {\n    stn = gastop(pst1->result.stn, pst2->result.stn, op, 1);\n    if (stn==NULL) return (1);\n    pst1->type = 0;\n    pst1->result.stn = stn;\n    return (0);\n  }\n\n  /* Operation between grid and stn is invalid -- unless the grid\n     is really a constant.  Check for this.  */\n  if (pst1->type == 1) pgr=pst1->result.pgr;\n  if (pst2->type == 1) pgr=pst2->result.pgr;\n  if (pgr->idim == -1 && pgr->jdim == -1) {\n    if (pst1->type == 0) {\n      stn = gascop (pst1->result.stn, pgr->rmin, op, 0);\n    } else {\n      stn = gascop (pst2->result.stn, pgr->rmin, op, 1);\n    }\n    if (stn==NULL) return (1);\n    gagfre (pgr);\n    pst1->type = 0;\n    pst1->result.stn = stn;\n  } else {\n    gaprnt (0,\"Operation Error: Incompatable Data Types\\n\");\n    gaprnt (0,\"  One operand was stn data, other was grid\\n\");\n    return (1);\n  }\n  return (0);\n}\n\nchar *aavenam[5] = {\"AAVE\",\"AMEAN\",\"ASUM\",\"ASUMG\",\"ATOT\"};\n\ngaint ffaav (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = aave (pfc, pst, 1);\n   return (rc);\n}\n\ngaint ffamn (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = aave (pfc, pst, 2);\n   return (rc);\n}\n\ngaint ffasum (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = aave (pfc, pst, 3);\n   return (rc);\n}\n\ngaint ffasumg (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = aave (pfc, pst, 4);\n   return (rc);\n}\n\ngaint ffatot (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = aave (pfc, pst, 5);\n   return (rc);\n}\n\ngaint aave (struct gafunc *pfc, struct gastat *pst, int sel) {\ngadouble (*iconv) (gadouble *, gadouble);\ngadouble (*jconv) (gadouble *, gadouble);\nstruct gagrid *pgr;\nstruct gafile *pfi;\ngadouble res=-999,x1,x2,y1,y2;\ngaint dim,wflag,rc,gflag=0;\nchar *ch,*fnam,resu;\n\n  fnam = aavenam[sel-1];\n\n  /* Check for valid number of args       */\n  if (pfc->argnum==2 && !strncmp(pfc->argpnt[1],\"global\",1)) gflag=1;\n  if (pfc->argnum!=5 && !gflag) {\n    snprintf(pout,1255,\"Error from %s:  Too many or too few args\\n\",fnam);\n    gaprnt(0,pout);\n    gaprnt (0,\"                  5 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Check environment.  Z or T or E can't vary.  */\n  if (pst->idim>1 || pst->jdim>1) {\n    snprintf(pout,1255,\"Error from %s  Invalid environment.  \",fnam);\n    gaprnt(0,pout);\n    gaprnt (0,\"Z, T, or E can't vary.\\n\");\n    return (1);\n  }\n\n  /* Parse the dimension expressions */\n  pfi = pst->pfid;\n  if (gflag) {\n    ch = dimprs (\"lon=0\", pst, pfi, &dim, &x1, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x1 = x1 - 0.5;\n    ch = dimprs (\"lon=360\", pst, pfi, &dim, &x2, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x2 = x2 + 0.5;\n    ch = dimprs (\"lat=-90\", pst, pfi, &dim, &y1, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y1 = y1 - 0.5;\n    ch = dimprs (\"lat=90\", pst, pfi, &dim, &y2, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y2 = y2 + 0.5;\n  } else {\n    pfi = pst->pfid;\n    ch = dimprs (pfc->argpnt[1], pst, pfi, &dim, &x1, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x1 = x1 - 0.5;\n    ch = dimprs (pfc->argpnt[2], pst, pfi, &dim, &x2, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x2 = x2 + 0.5;\n    ch = dimprs (pfc->argpnt[3], pst, pfi, &dim, &y1, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y1 = y1 - 0.5;\n    ch = dimprs (pfc->argpnt[4], pst, pfi, &dim, &y2, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y2 = y2 + 0.5;\n  }\n\n  /* Set up pst block properly to get the grid */\n  iconv = pfi->gr2ab[0];\n  pst->dmin[0] = iconv(pfi->grvals[0],x1);\n  pst->dmax[0] = iconv(pfi->grvals[0],x2);\n  jconv = pfi->gr2ab[1];\n  pst->dmin[1] = jconv(pfi->grvals[1],y1);\n  pst->dmax[1] = jconv(pfi->grvals[1],y2);\n  \n  pst->idim = 0;\n  pst->jdim = 1;\n\n  /* Get the grid */\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type!=1) {\n    gafree (pst);\n    return (-1);\n  }\n  pgr = pst->result.pgr;\n\n  /* Average over the grid  */\n  resu = doaave(pgr,pst->dmin[0],pst->dmax[0],pst->dmin[1],pst->dmax[1],sel,&res);\n  gafree (pst);\n  pgr = gagrvl(res);\n  pgr->umin = resu;\n  pst->type = 1;\n  pst->result.pgr = pgr;\n  return (0);\n\nerr1:\n  snprintf(pout,1255,\"Error from %s:  Invalid dimension expression \\n\",fnam);\n  gaprnt(0,pout);\n  return (1);\n}\n\nchar *mnmxnam[6] = {\"AMIN\",\"AMAX\",\"AMINLOCX\",\"AMINLOCY\",\"AMAXLOCX\", \"AMAXLOCY\"};\n\ngaint ffamin (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = mnmx (pfc, pst, 1);\n   return (rc);\n}\n\ngaint ffamax (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = mnmx (pfc, pst, 2);\n   return (rc);\n}\n\ngaint ffaminlocx (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = mnmx (pfc, pst, 3);\n   return (rc);\n}\n\ngaint ffaminlocy (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = mnmx (pfc, pst, 4);\n   return (rc);\n}\n\ngaint ffamaxlocx (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = mnmx (pfc, pst, 5);\n   return (rc);\n}\n\ngaint ffamaxlocy (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = mnmx (pfc, pst, 6);\n   return (rc);\n}\n\ngaint mnmx (struct gafunc *pfc, struct gastat *pst, int sel) {\n  gadouble (*iconv) (gadouble *, gadouble);\n  gadouble (*jconv) (gadouble *, gadouble);\n  struct gagrid *pgr;\n  struct gafile *pfi;\n  gadouble res=-999,x1,x2,y1,y2,min,max,minx,maxx,miny,maxy;\n  gaint dim,wflag,rc,gflag=0,i,j,x,y,cnt;\n  char *ch,*fnam,resu;\n  gadouble *gr;\n  char *gru;\n  \n  fnam = mnmxnam[sel-1];\n  \n  /* Check for valid number of args       */\n  if (pfc->argnum==2 && !strncmp(pfc->argpnt[1],\"global\",1)) gflag=1;\n  if (pfc->argnum!=5 && !gflag) {\n    snprintf(pout,1255,\"Error from %s:  Too many or too few args\\n\",fnam);\n    gaprnt(0,pout);\n    gaprnt (0,\"                  5 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Check environment.  Z or T or E can't vary.  */\n  if (pst->idim>1 || pst->jdim>1) {\n    snprintf(pout,1255,\"Error from %s  Invalid environment.  \",fnam);\n    gaprnt(0,pout);\n    gaprnt (0,\"Z, T, or E can't vary.\\n\");\n    return (1);\n  }\n\n  /* Parse the dimension expressions */\n  pfi = pst->pfid;\n  if (gflag) {\n    ch = dimprs (\"lon=0\", pst, pfi, &dim, &x1, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x1 = x1 - 0.5;\n    ch = dimprs (\"lon=360\", pst, pfi, &dim, &x2, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x2 = x2 + 0.5;\n    ch = dimprs (\"lat=-90\", pst, pfi, &dim, &y1, 1, &wflag); \n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y1 = y1 - 0.5;\n    ch = dimprs (\"lat=90\", pst, pfi, &dim, &y2, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y2 = y2 + 0.5;\n  } else {\n    pfi = pst->pfid;\n    ch = dimprs (pfc->argpnt[1], pst, pfi, &dim, &x1, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x1 = x1 - 0.5;\n    ch = dimprs (pfc->argpnt[2], pst, pfi, &dim, &x2, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag && sel!=4) x2 = x2 + 0.5;\n    ch = dimprs (pfc->argpnt[3], pst, pfi, &dim, &y1, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y1 = y1 - 0.5;\n    ch = dimprs (pfc->argpnt[4], pst, pfi, &dim, &y2, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag && sel!=4) y2 = y2 + 0.5;\n  }\n\n  /* Set up pst block properly to get the grid */\n  iconv = pfi->gr2ab[0];\n  pst->dmin[0] = iconv(pfi->grvals[0],x1);\n  pst->dmax[0] = iconv(pfi->grvals[0],x2);\n  jconv = pfi->gr2ab[1];\n  pst->dmin[1] = jconv(pfi->grvals[1],y1);\n  pst->dmax[1] = jconv(pfi->grvals[1],y2);\n  \n  pst->idim = 0;\n  pst->jdim = 1;\n\n  /* Get the grid */\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type!=1) {\n    gafree (pst);\n    return (-1);\n  }\n  pgr = pst->result.pgr;\n\n  /* Get the area min/max and its location */\n  min =  9.99e35;\n  max = -9.99e35;\n  minx = maxx = miny = maxy = -1; \n  gr  = pgr->grid;\n  gru = pgr->umask;\n  cnt = 0;\n  for (j=0; j<pgr->jsiz; j++) {\n    y = (gadouble)(j+pgr->dimmin[1]);\n    for (i=0; i<pgr->isiz; i++) {\n      x = (gadouble)(i+pgr->dimmin[0]);\n      if (*gru == 1) {\n\tcnt++;\n\tif (min>*gr) { min = *gr; minx = x; miny = y; }\n\tif (max<*gr) { max = *gr; maxx = x; maxy = y; }\n      }\n      gr++; gru++;\n    }\n  }\n  if (cnt==0) {\n    resu = 0;\n    res = pgr->undef; \n  } \n  else {\n    resu = 1;\n    if      (sel==1) res = min;\n    else if (sel==2) res = max; \n    else if (sel==3) res = minx; \n    else if (sel==4) res = miny;\n    else if (sel==5) res = maxx; \n    else if (sel==6) res = maxy;\n  }\n\n  gafree (pst);\n  pgr = gagrvl(res);\n  pgr->umin = resu;\n  pst->type = 1;\n  pst->result.pgr = pgr;\n  return (0);\n\nerr1:\n  snprintf(pout,1255,\"Error from %s:  Invalid dimension expression \\n\",fnam);\n  gaprnt(0,pout);\n  return (1);\n}\n\n\n\ngaint ffscor (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = scorr (pfc, pst, 1);\n   return (rc);\n}\n\ngaint ffsreg (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n  rc = scorr (pfc,pst,2);\n  return (rc);\n}\n\ngaint scorr (struct gafunc *pfc, struct gastat *pst, gaint sel) {\ngadouble (*iconv) (gadouble *, gadouble);\ngadouble (*jconv) (gadouble *, gadouble);\nstruct gagrid *pgr,*pgr2;\nstruct gafile *pfi;\nstruct gastat pst2;\ngadouble *gr1, *gr2, *gr3, *grid3;\ngadouble res,x1,x2,y1,y2,mn1,mn2,s1,s2,ss,cov;\ngaint i,dim,wflag,rc,cnt,gflag=0;\nchar *ch,*gr1u,*gr2u,*grid3u,*gr3u,s1u,s2u,mn1u,mn2u,resu,covu;\nsize_t sz;\n\n   mn1=mn2=s1=s2=cov=ss=res=0;   \n\n  /* Check for valid number of args       */\n  if (pfc->argnum==3 && !strncmp(pfc->argpnt[2],\"global\",1)) gflag=1;\n  if (pfc->argnum!=6 && !gflag) {\n    gaprnt (0,\"Error from SCORR:  Too many or too few args \\n\");\n    gaprnt (0,\"                   6 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Check environment.  Z or T or E can't vary.  */\n  if (pst->idim>1 || pst->jdim>1) {\n    gaprnt (0,\"Error from SCORR:  Invalid environment.  \");\n    gaprnt (0,\"Z, T, or E cannot vary.\\n\");\n    return (1);\n  }\n\n  /* Parse the dimension expressions */\n  pfi = pst->pfid;\n  if (gflag) {\n    ch = dimprs (\"lon=0\", pst, pfi, &dim, &x1, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag) x1 = x1 - 0.5;\n    ch = dimprs (\"lon=360\", pst, pfi, &dim, &x2, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag) x2 = x2 + 0.5;\n    ch = dimprs (\"lat=-90\", pst, pfi, &dim, &y1, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag) y1 = y1 - 0.5;\n    ch = dimprs (\"lat=90\", pst, pfi, &dim, &y2, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag) y2 = y2 + 0.5;\n  } else {\n    ch = dimprs (pfc->argpnt[2], pst, pfi, &dim, &x1, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag) x1 = x1 - 0.5;\n    ch = dimprs (pfc->argpnt[3], pst, pfi, &dim, &x2, 1, &wflag);\n    if (ch==NULL || dim!=0) goto err1;\n    if (!wflag) x2 = x2 + 0.5;\n    ch = dimprs (pfc->argpnt[4], pst, pfi, &dim, &y1, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag) y1 = y1 - 0.5;\n    ch = dimprs (pfc->argpnt[5], pst, pfi, &dim, &y2, 1, &wflag);\n    if (ch==NULL || dim!=1) goto err1;\n    if (!wflag) y2 = y2 + 0.5;\n  }\n\n  /* Set up pst block properly to get the grids */\n  iconv = pfi->gr2ab[0];\n  pst->dmin[0] = iconv(pfi->grvals[0],x1);\n  pst->dmax[0] = iconv(pfi->grvals[0],x2);\n  jconv = pfi->gr2ab[1];\n  pst->dmin[1] = jconv(pfi->grvals[1],y1);\n  pst->dmax[1] = jconv(pfi->grvals[1],y2);\n  pst->idim = 0;\n  pst->jdim = 1;\n  pst2 = *pst;\n\n  /* Get the first grid */\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type!=1) {\n    gafree (pst);\n    return (-1);\n  }\n  pgr = pst->result.pgr;\n\n  /* Get the 2nd grid */\n  rc = gaexpr(pfc->argpnt[1],&pst2);\n  if (rc) return (rc);\n  if (pst2.type!=1) {\n    gafree (&pst2);\n    gafree (pst);\n    return (-1);\n  }\n  pgr2 = pst2.result.pgr;\n\n  /* Verify that the grids are compatible for operations */\n  if (gagchk(pgr,pgr2,0) || gagchk(pgr,pgr2,1)) {\n    gaprnt (0,\"Error from SCORR:  Incompatable grids\\n\");\n    gafree (&pst2);\n    gafree (pst);\n    return (1);\n  }\n\n  /* Force missing data values to be reflected in each grid.  */\n  cnt = pgr->isiz * pgr->jsiz;\n  gr1 = pgr->grid;\n  gr2 = pgr2->grid;\n  gr1u = pgr->umask;\n  gr2u = pgr2->umask;\n  for (i=0; i<cnt; i++) {\n    if (*gr1u==0 || *gr2u==0) {\n      *gr1u = 0;\n      *gr2u = 0;\n    }\n    gr1++;  gr2++;\n    gr1u++; gr2u++;\n  }\n\n  /* Obtain areal average over each grid */\n  mn1u = doaave(pgr, pst->dmin[0],pst->dmax[0],pst->dmin[1],pst->dmax[1],1,&mn1);\n  mn2u = doaave(pgr2,pst->dmin[0],pst->dmax[0],pst->dmin[1],pst->dmax[1],1,&mn2);\n\n  /* result from doaave was undefined */\n  if (mn1u==0 || mn2u==0) {\n    resu = 0;\n  } \n  else {\n\n    /* Remove the mean from the fields */\n    gr1 = pgr->grid;\n    gr2 = pgr2->grid;\n    gr1u = pgr->umask;\n    gr2u = pgr2->umask;\n    for (i=0; i<cnt; i++) {\n      if (*gr1u!=0) *gr1 = *gr1 - mn1;\n      if (*gr2u!=0) *gr2 = *gr2 - mn2;\n      gr1++;  gr2++;\n      gr1u++; gr2u++;\n    }\n\n    /* Get gr1 * gr2; stash in a safe place.  Also get the squares of each variable. */\n    sz = sizeof(gadouble)*cnt;\n    grid3 = (gadouble *)galloc(sz,\"scorr3\");\n    if (grid3==NULL) {\n      gafree (pst);\n      gafree (&pst2);\n      gaprnt (0,\"Error from SCORR:  Memory Allocation \\n\");\n      return (1);\n    }\n    sz = sizeof(char)*cnt;\n    grid3u = (char *)galloc(sz,\"scorr3u\");\n    if (grid3u==NULL) {\n      if (grid3) gree(grid3,\"f408\");\n      gafree (pst);\n      gafree (&pst2);\n      gaprnt (0,\"Error from SCORR:  Memory Allocation \\n\");\n      return (1);\n    }\n    gr1 = pgr->grid;\n    gr2 = pgr2->grid;\n    gr3 = grid3;\n    gr1u = pgr->umask;\n    gr2u = pgr2->umask;\n    gr3u = grid3u;\n    for (i=0; i<cnt; i++) {\n      if (*gr1u!=0 && *gr2u!=0) {\n\t*gr3 = *gr1 * *gr2;\n\t*gr3u = 1;\n      }\n      else {\n\t*gr3u = 0;\n      }\n      if (*gr1u!=0) *gr1 = *gr1 * *gr1;\n      if (*gr2u!=0) *gr2 = *gr2 * *gr2;\n      gr1++;  gr2++;  gr3++;\n      gr1u++; gr2u++; gr3u++;\n    }\n\n    /* Get the areal average of the squares, then the\n       areal average of gr1 * gr2, then the final result */\n    /* hard wire to 1 for now as this is the default behaviour */\n    s1u = doaave(pgr, pst->dmin[0],pst->dmax[0],pst->dmin[1],pst->dmax[1],1,&s1);\n    s2u = doaave(pgr2,pst->dmin[0],pst->dmax[0],pst->dmin[1],pst->dmax[1],1,&s2);\n    gr1 = pgr->grid;\n    gr1u = pgr->umask;\n    gr3 = grid3;\n    gr3u = grid3u;\n    for (i=0; i<cnt; i++) {\n      if (*gr3u!=0) {\n\t*gr1 = *gr3;\n\t*gr1u = 1;\n      }\n      else {\n\t*gr1u=0;\n      }\n      gr1++;  gr3++;\n      gr1u++; gr3u++;\n    }\n    covu = doaave(pgr,pst->dmin[0],pst->dmax[0],pst->dmin[1],pst->dmax[1],1,&cov);\n    if (sel == 1) ss = sqrt(s1*s2);\n    if (sel == 2) ss = sqrt(s1*s1);\n    if (ss>0.0) {\n      res = cov/ss;\n      resu = 1;\n    }\n    else resu = 0;\n    gree(grid3,\"f408a\");\n    gree(grid3u,\"f408c\");\n  }\n\n  gafree (pst);\n  gafree (&pst2);\n  pgr = gagrvl(res);\n  pgr->umin = resu;\n  pst->type = 1;\n  pst->result.pgr = pgr;\n  return (0);\n\nerr1:\n  gaprnt (0,\"Error from SCORR:  Invalid dimension expression \\n\");\n  return (1);\n}\n\n/* Function that actually does area average over a grid */\n\nchar doaave(struct gagrid *pgr, gadouble dmin0, gadouble dmax0,\n\t\tgadouble dmin1, gadouble dmax1, gaint sel, gadouble *result) {\ngadouble (*iconv) (gadouble *, gadouble);\ngadouble (*jconv) (gadouble *, gadouble);\ngadouble *ivals, *jvals, *gr;\ngadouble d2r,sum,w1,w2=0,y1,x1,abs,alo,ahi,alen,wt;\ngaint i,j;\nchar *gru,sumu=0;\n\n  d2r = M_PI/180.0;\n  iconv = pgr->igrab;\n  jconv = pgr->jgrab;\n  ivals = pgr->ivals;\n  jvals = pgr->jvals;\n  sum = 0.0; \n  wt = 0.0;\n  gr  = pgr->grid;\n  gru = pgr->umask;\n\n  for (j=0; j<pgr->jsiz; j++) {\n    y1 = (gadouble)(j+pgr->dimmin[1]);\n    abs = jconv(jvals, y1);\n    alo = jconv(jvals, y1-0.5);\n    ahi = jconv(jvals, y1+0.5);\n    alen=fabs(ahi-alo);                /* length of the grid side in world coord */\n    if (alo < dmin1) alo = dmin1;\n    if (alo > dmax1) alo = dmax1;\n    if (ahi < dmin1) ahi = dmin1;\n    if (ahi > dmax1) ahi = dmax1;\n    if (alo < -90.0) alo = -90.0; if (ahi < -90.0) ahi = -90.0;\n    if (alo >  90.0) alo =  90.0; if (ahi >  90.0) ahi =  90.0;\n    w1 = 1.0;\n    if (sel==1 || sel==5) {\n      w1 = fabs(sin(ahi*d2r)-sin(alo*d2r));  /* for aave and atot, area weighting by latitude */\n    } \n    else if (sel==2) { \n      w1 = fabs(ahi-alo);           /* for amean, weight is length of interval in world coords */\n    } \n    else if (sel==3) {\n      if (alen > FUZZ_SCALE) {    /* grid weighting (asum), weighted by length of interval in grid coords */\n\tw1=fabs(ahi-alo)/alen;                 \n      } \n      else {\n\tw1=0.0;\n      }\n    }\n    for (i=0; i<pgr->isiz; i++) {\n      x1 = (gadouble)(i+pgr->dimmin[0]);\n      alo = iconv(ivals, x1-0.5);\n      ahi = iconv(ivals, x1+0.5);\n      alen=fabs(ahi-alo);\n      if (alo < dmin0) alo = dmin0;\n      if (alo > dmax0) alo = dmax0;\n      if (ahi < dmin0) ahi = dmin0;\n      if (ahi > dmax0) ahi = dmax0;\n\n      if (sel==1 || sel==2) {\n\tw2 = ahi - alo;                      /* for aave and amean */\n      } \n      else if (sel==5) {\n\tw2 = d2r*(ahi - alo);                /* for atot */\n      } \n      else if (sel==3) {\n\tif (alen > FUZZ_SCALE) {             /* grid weighting (asum) */\n\t  w2=fabs(ahi-alo)/alen;                 \n\t} \n\telse {\n\t  w2=0.0;\n\t}\n      } \n      else if (sel==4) {\n\tw2=1.0;              /* no weighting (asumg) */\n      }\n\n      if (*gru != 0) {\n\tif (sel==4) {\n\t  sum = sum + *gr;    /* no weighting for asumg */   \n\t}\n\telse {\n\t  sum = sum + (*gr * w1 * w2);  /* otherwise apply weights */\n\t} \n        wt = wt + (w1 * w2);\n      }\n      gr++; gru++;\n    }\n  }\n  if (wt>0.0) {\n    sumu = 1;\n    if (sel<=2 ) {\n      sum = sum / wt;\n    }\n  } \n  else {\n    sumu = 0;\n    sum = pgr->undef;\n  }\n  *result = sum;\n  return (sumu);\n}\n\n\n/* Time correlation */\n\ngaint fftcor (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = tmaskf (pfc, pst, 2);\n   return (rc);\n}\n\n/* Time regression */  /* Timlin */\n\ngaint fftreg (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n  rc = tmaskf (pfc,pst,3);\n  return (rc);\n}\n\n/* Time mean, masked and arbitrarily weighted. */\n\ngaint fftmav (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = tmaskf (pfc, pst, 1);\n   return (rc);\n}\n\nchar *tmnam[3] = {\"TMAVE\",\"TCORR\",\"TREGR\"};\n\n/* Following function does time series operations that\n   involve a mask grid, where if the first mask grid\n   is undefined, the 2nd grid is not even accessed.\n   This saves processing time for composite means and\n   such.  Variable sel determines the function operation:\n\n     sel = 1:  time mean.\n     sel = 2:  time correlation.\n     sel = 3:  time regression.     */\n\ngaint tmaskf (struct gafunc *pfc, struct gastat *pst, gaint sel) {\nstruct gafile *pfi;\nstruct gagrid *pgr;\ngadouble *gr, *mn1, *mn2, *cnt, *s1, *s2, *cov, *wt;\ngadouble t1,t2,vv,res=0,v1,v2;\ngaint dim,wflag=0,d1,d2,d,rc,i,siz,size=0;\nchar *ch,*fnam, uu, *gru, *mn1u, *mn2u, *cntu, *s1u, *s2u, *covu, resu=0;\nsize_t sz;\n\n  cov=s2=s1=cnt=mn2=wt=0;\n  s1u=mn2u=mn1u=NULL;\n\n  fnam = tmnam[sel-1];\n  /* Check for valid number of args       */\n  if (pfc->argnum!=4) {\n    snprintf(pout,1255,\"Error from %s:  Too many or too few args\\n\",fnam);\n    gaprnt (0,pout);\n    gaprnt (0,\"                   4 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Parse the dimension expression       */\n  pfi = pst->pfid;\n  ch = dimprs (pfc->argpnt[2], pst, pfi, &dim, &t1, 1, &wflag);\n  if (ch==NULL || dim!=3 || wflag==2) {\n    snprintf(pout,1255,\"Error from %s:  1st dimension expr invalid\\n\",fnam);\n    gaprnt (0,pout);\n    if (dim!=3) gaprnt (0,\"  expr does not describe time dimension\\n\");\n    if (wflag==2) {\n      snprintf(pout,1255,\"  offt expression not supported as an arg to %s\\n\",fnam);\n      gaprnt (0,pout);\n    }\n    return (1);\n  }\n\n  /* Now parse the 2nd dimension expression.  */\n  ch = dimprs (pfc->argpnt[3], pst, pfi, &dim, &t2, 1, &wflag);\n  if (ch==NULL || dim!=3 || t2<t1 || wflag==2) {\n    snprintf(pout,1255,\"Error from %s:  2nd dimension expr invalid\\n\",fnam);\n    gaprnt (0,pout);\n    if (dim!=3) gaprnt (0,\"  expr does not describe time dimension\\n\");\n    if (t2<t1)  gaprnt (0,\"  end time is earlier than start time\\n\");\n    if (wflag==2) {\n      snprintf(pout,1255,\"  offt expression not supported as an arg to %s\\n\",fnam);\n      gaprnt (0,pout);\n    }\n    return (1);\n  }\n\n  /* Loop through all times and get means */\n  if (pst->jdim==dim) pst->jdim = -1;\n  d1 =  ceil(t1-0.001);          /* Loop limits are integers    */\n  d2 = floor(t2+0.001);          /* No weighting  */\n  snprintf(pout,1255,\"%s:  dim = %i, start = %i, end = %i\\n\", fnam, dim, d1, d2);\n  gaprnt (2,pout);\n\n  rc = 0;\n  mn1 = NULL;\n  for (d=d1; d<=d2 && !rc; d++) {\n    gr2t (pfi->grvals[3],d,&(pst->tmin));\n    pst->tmax = pst->tmin;\n    rc = gaexpr(pfc->argpnt[0],pst);\n    if (rc) goto err2;\n    if (!rc && pst->type==0) {\n      gafree (pst);\n      goto err3;\n    }\n    pgr = pst->result.pgr;\n    if (pgr->idim != -1 || pgr->isiz!=1 || pgr->jsiz!=1) {\n      snprintf(pout,1255,\"Error from %s:  1st arg must be 0-D\\n\",fnam);\n      gaprnt (0,pout);\n      gafree (pst);\n      goto err2;\n    }\n    vv = pgr->rmin;\n    uu = pgr->umin;\n    gafree (pst);\n    if (uu!=0) {\n      rc = gaexpr(pfc->argpnt[1],pst);\n      if (rc) goto err2;\n      if (!rc && pst->type==0) {\n        gafree (pst);\n        goto err3;\n      }\n      pgr = pst->result.pgr;\n      siz = pgr->isiz * pgr->jsiz;\n      if (mn1==NULL) {\n        i = 2;\n        if (sel==2 || sel==3) i = 6;\n\tsz = sizeof(gadouble)*siz*i;\n        mn1 = (gadouble *)galloc(sz,\"tmaskmn1\");\n        if (mn1==NULL) {\n          gafree (pst);\n          goto err1;\n        }\n\tsz = sizeof(char)*siz*i;\n        mn1u = (char *)galloc(sz,\"tmaskmn1u\");\n        if (mn1u==NULL) {\n          gafree (pst);\n          goto err1;\n        }\n        if (sel==1) {\n          wt = mn1 + siz;\n          for (i=0; i<siz; i++) { \n\t    *(mn1+i)=0.0; \n\t    *(wt+i)=0.0; \n\t  }\n        }\n        if (sel==2 || sel==3) {\n          mn2  = mn1  + siz;       /* these are data grids */\n          cnt = mn2 + siz;\n          s1  = cnt + siz;\n          s2  = s1 + siz;\n          cov = s2 + siz;\n\n\t  mn2u = mn1u + siz;       /* these are undef masks */\n          cntu = mn2u + siz;\n          s1u  = cntu + siz;\n          s2u  = s1u + siz;\n          covu = s2u + siz;\n\n          for (i=0; i<siz; i++) {\n            *(mn1+i) = 0.0; \n\t    *(mn2+i) = 0.0;\n            *(cnt+i) = 0.0;\n            *(s1+i)  = 0.0; \n\t    *(s2+i)  = 0.0;\n            *(cov+i) = 0.0;\n          }\n        }\n        size = siz;\n      }\n      if (size != siz) {\n        gafree (pst);\n        goto err2;\n      }\n      gr  = pgr->grid;\n      gru = pgr->umask;\n      for (i=0; i<siz; i++) {\n        if (uu!=0 && *gru!=0) {\n          if (sel==1) {\n            *(mn1+i) += *gr * vv;\n            *(wt+i) += vv;\n          }\n          if (sel==2 || sel==3) {\n            *(mn1+i) += vv;\n            *(mn2+i) += *gr;\n            *(cnt+i) += 1.0;\n          }\n        }\n        gr++; gru++;\n      }\n      gafree (pst);\n    }\n  }\n\n  /* Calculate mean of each time series */\n\n  if (mn1) {\n    if (sel==1) {\n      for (i=0; i<size; i++) {\n        if (*(wt+i)>0.0) {\n          *(mn1+i) = *(mn1+i) / *(wt+i);\n\t  *(mn1u+i) = 1;\n        } else {\n          *(mn1u+i) = 0;\n        }\n      }\n    }\n    if (sel==2 || sel==3) {\n      for (i=0; i<size; i++) {\n        if (*(cnt+i)>0.0) {\n          *(mn1+i) = *(mn1+i) / *(cnt+i);\n          *(mn2+i) = *(mn2+i) / *(cnt+i);\n\t  *(mn1u+i) = 1;\n\t  *(mn2u+i) = 1;\n        } else {\n          *(mn1u+i) = 0;\n          *(mn2u+i) = 0;\n        }\n      }\n    }\n  }\n\n  /* Loop through time again if needed; do squares and cov.\n     Less error checking this time through. */\n\n  if ((sel==2 || sel==3) && mn1) {\n    rc = 0;\n    for (d=d1; d<=d2 && !rc; d++) {\n      gr2t (pfi->grvals[3],d,&(pst->tmin));\n      pst->tmax = pst->tmin;\n      rc = gaexpr(pfc->argpnt[0],pst);\n      if (rc) goto err2;\n      pgr = pst->result.pgr;\n      vv = pgr->rmin;\n      uu = pgr->umin;\n      gafree (pst);\n      rc = gaexpr(pfc->argpnt[1],pst);\n      if (rc) goto err2;\n      pgr = pst->result.pgr;\n      gr  = pgr->grid;\n      gru = pgr->umask;\n      for (i=0; i<size; i++) {\n        if (uu!=0 && *gru!=0) {\n          if (*(cnt+i) > 0.0) {\n            v1 = vv - *(mn1+i);\n            *(s1+i) += v1*v1;\n            v2 = *gr - *(mn2+i);\n            *(s2+i) += v2*v2;\n            *(cov+i) += v1*v2;\n          }\n        }\n        gr++; gru++;\n      }\n      gafree (pst);\n    }\n\n    for (i=0; i<size; i++) {\n      if (*(cnt+i) > 0.0) {\n        *(s1+i) = *(s1+i) / *(cnt+i);\n        *(s2+i) = *(s2+i) / *(cnt+i);\n        *(cov+i) = *(cov+i) / *(cnt+i);\n        if (sel==2) {\n\t  res = sqrt(*(s1+i) * *(s2+i));\n\t  resu = 1;\n\t}\n        if (sel==3) {\n\t  res = sqrt(*(s1+i) * *(s1+i));\n\t  resu = 1;\n\t}\n        if (res==0.0) {\n\t  resu = 0;\n\t}\n        else {\n\t  res = *(cov+i)/res;\n\t  resu = 1;\n\t}\n      } else resu = 0;\n      *(s1+i)  = res;\n      *(s1u+i) = resu;\n    }\n  }\n\n  /* Get one final grid, and use it to return the result. */\n\n  gr2t (pfi->grvals[3],d1,&(pst->tmin));\n  pst->tmax = pst->tmin;\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) goto err2;\n  if (!rc && pst->type==0) {\n    gafree (pst);\n    goto err3;\n  }\n  pgr = pst->result.pgr;\n  siz = pgr->isiz * pgr->jsiz;\n  gr  = pgr->grid;\n  gru = pgr->umask;\n  if (mn1) {\n    if (size != siz) {\n      gafree (pst);\n      goto err2;\n    }\n    if (sel==1) {\n      for (i=0; i<siz; i++) {\n\tif (*(mn1u+i)!=0) {\n\t  *(gr+i) = *(mn1+i);\n\t  *(gru+i) = 1;\n\t}\n\telse {\n\t  *(gru+i) = 0;\n\t}\n      }\n    }\n    if (sel==2 || sel==3) {\n      for (i=0; i<siz; i++) {\n\tif (*(s1u+i)!=0) {\n\t  *(gr+i) = *(s1+i);\n\t  *(gru+i) = 1;\n\t}\n\telse {\n\t  *(gru+i) = 0;\n\t}\n      }\n    }\n    gree(mn1,\"f409\");\n    gree(mn1u,\"f410\");\n  } else {\n    for (i=0; i<siz; i++) *(gru+i) = 0;\n  }\n  return (0);\n\nerr1:\n  snprintf(pout,1255,\"Error from %s:  Memory allocation error\\n\",fnam);\n  gaprnt (0,pout);\n  if (mn1) gree(mn1,\"f411\");\n  if (mn1u) gree(mn1u,\"f412\");\n  return (1);\nerr2:\n  snprintf(pout,1255,\"Error from %s:  Error getting grids\\n\",fnam);\n  gaprnt (0,pout);\n  if (mn1) gree(mn1,\"f413\");\n  if (mn1u) gree(mn1u,\"f414\");\n  return (1);\nerr3:\n  snprintf(pout,1255,\"Error from %s:  Args must be grid data\\n\",fnam);\n  gaprnt (0,pout);\n  if (mn1) gree(mn1,\"f415\");\n  if (mn1u) gree(mn1u,\"416\");\n  return (1);\n}\n\n\nchar *avenam[8] = {\"AVE\",\"MEAN\",\"SUM\",\"SUMG\",\"MIN\",\"MAX\",\"MINLOC\",\"MAXLOC\"};\n\ngaint ffave (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 1);\n   return (rc);\n}\n\ngaint ffmn (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 2);\n   return (rc);\n}\n\ngaint ffsum (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 3);\n   return (rc);\n}\n\n\ngaint ffsumg (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 4);\n   return (rc);\n}\n\ngaint ffmin (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 5);\n   return (rc);\n}\n\ngaint ffmax (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 6);\n   return (rc);\n}\n\ngaint ffminl (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 7);\n   return (rc);\n}\n\ngaint ffmaxl (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n   rc = ave (pfc, pst, 8);\n   return (rc);\n}\n\n\ngaint ave (struct gafunc *pfc, struct gastat *pst, gaint sel) {\nstruct gagrid *pgr1, *pgr2, *pgr;\nstruct gafile *pfi;\nstruct dt tinc;\ngadouble (*conv) (gadouble *, gadouble);\ngadouble gr1, gr2, *sum, *cnt, *val;\ngadouble alo, ahi, alen, wlo=0, whi=0, rd1;\ngadouble d2r, wt, wt1, abs;\ngaint mos, mns, wflag=0;\ngaint i, rc, siz, dim, d, d1, d2, dim2, ilin, incr, bndflg;\nchar *ch,*fnam,*sumu,*cntu,*valu;\n\n  d2r = M_PI/180;\n  fnam=avenam[sel-1];\n\n  /* Check for valid number of args */\n  if (pfc->argnum<3 || pfc->argnum>5) {\n    snprintf(pout,1255,\"Error from %s:  Too many or too few args \\n\",fnam);\n    gaprnt(0,pout);\n    gaprnt (0,\"                 3 to 5 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Parse the 1st dimension expression */\n  pfi = pst->pfid;\n  ch = dimprs (pfc->argpnt[1], pst, pfi, &dim, &gr1, 1, &wflag);\n  if (ch==NULL || wflag==2) {\n    snprintf(pout,1255,\"Error from %s:  1st dimension expression invalid\\n\",fnam);\n    gaprnt(0,pout);\n    if (wflag==2) {\n      snprintf(pout,1255,\"  offt expression not supported as an arg to %s\\n\",fnam);\n      gaprnt (0,pout);\n    }\n    return (1);\n  }\n\n  /* Parse the 2nd dimension expression */\n  ch = dimprs (pfc->argpnt[2], pst, pfi, &dim2, &gr2, 1, &wflag);\n  if (ch==NULL || dim2!=dim || gr2<gr1 || wflag==2) {\n    snprintf(pout,1255,\"Error from %s:  2nd dimension expression invalid\\n\",fnam);\n    gaprnt(0,pout);\n    if (dim2!=dim) gaprnt (0,\"  start and end points have different dimensions\\n\");\n    if (gr2<gr1)   gaprnt (0,\"  end grid point is less than start grid point \\n\");\n    if (wflag==2) {\n      snprintf(pout,1255,\"  offt expression not supported as an arg to %s\\n\",fnam);\n      gaprnt (0,pout);\n    }\n    return (1);\n  }\n\n  /* Check for 4th argument.  Could be a time increment, or it may\n     be option flags.  Time increment only valid for time averaging */\n  bndflg = 0;\n  incr = 1;\n  if (pfc->argnum == 4) {\n    if (*(pfc->argpnt[3]) == '-') {    /* Option flags? */\n      if (*(pfc->argpnt[3]+1) == 'b') bndflg = 1;\n      else {\n        snprintf(pout,1255,\"Error from %s: Invalid option flags\\n\",fnam);\n        gaprnt(0,pout);\n        return(1);\n      }\n    } else {                           \n      /* Must be time increment */\n      if (dim!=3) {\n        snprintf(pout,1255,\"Error from %s: Invalid usage of increment value\\n\",fnam);\n        gaprnt(0,pout);\n        gaprnt (0,\"                Can only be used with time averaging\\n\");\n        return (1);\n      }\n      ch = intprs(pfc->argpnt[3],&incr);\n      if (ch==NULL) goto err3;\n\n      /* If a relative date/time was given, the increment is obtained\n         by looking at the default file structure (which assumes\n         knowledge of how date/time conversions are done) */\n      if (*ch!='\\0') {\n        ch = rdtprs(pfc->argpnt[3],&tinc);\n        if (ch==NULL) goto err3;\n        mos = tinc.yr*12 + tinc.mo;\n        mns = tinc.dy*1140 + tinc.hr*60 + tinc.mn;\n        val = pfi->grvals[3];\n        if (mos>0 && *(val+5)>0) {\n          incr = mos / (*(val+5));\n          if (mos!=incr*(*(val+5))) goto err3;\n        }\n        else if (mns>0 && *(val+6)>0) {\n          incr = mns / (*(val+6));\n          if (mns!=incr*(*(val+6))) goto err3;\n        }\n        else goto err3;\n      }\n    }\n  }\n  if (pfc->argnum == 5) {\n    if (*(pfc->argpnt[4]) == '-' &&\n        *(pfc->argpnt[4]+1) == 'b') bndflg = 1;\n    else {\n      snprintf(pout,1255,\"Error from %s: Invalid option flags\\n\",fnam);\n      gaprnt(0,pout);\n      return(1);\n    }\n  }\n\n  /* Get the first two grids */\n\n  if (pst->idim==dim) {          /* Fewer varying dims if user */\n    pst->idim = pst->jdim;       /* averaging over varying dim */\n    pst->jdim = -1;\n  }\n  ilin = pfi->linear[dim];\n  if (pst->jdim==dim) pst->jdim = -1;\n  d1 = ceil(gr1-0.001);          /* Ave limits are integers    */\n  d2 = floor(gr2+0.001);\n  if (bndflg) {\n    d1 = floor(gr1+0.5);\n    d2 = ceil(gr2-0.5);\n    if (dim!=3) {\n      conv = pfi->gr2ab[dim];\n      wlo = conv(pfi->grvals[dim],gr1);\n      whi = conv(pfi->grvals[dim],gr2);\n    }\n  }\n\n  if(mfcmn.warnflg > 0) {\n    if (sel == 1) {\n      snprintf(pout,1255,\"Averaging.  dim = %i, start = %i, end = %i\\n\", dim, d1, d2);\n    } else {\n      snprintf(pout,1255,\"%sing.  dim = %i, start = %i, end = %i\\n\", fnam, dim, d1, d2);\n    }\n    gaprnt (2,pout);\n  }\n\n  /* Figure out weights for 1st grid */\n  wt1 = 1.0;                     \n\n  /*-----  time */\n  if (dim==3) {\n    gr2t (pfi->grvals[3],d1,&(pst->tmin));\n    pst->tmax = pst->tmin;\n    if (bndflg) {\n      rd1 = d1;\n      if (gr1 < rd1+0.5) wt1 = (rd1+0.5)-gr1;\n      if (gr2 > rd1-0.5) wt1 = gr2 + 0.5 - rd1;\n      if (wt1<0.0) wt1=0.0;\n    }\n  } \n  /*-----  lon,lat,lev,ens */\n  else {\n    conv = pfi->gr2ab[dim];\n    abs = conv(pfi->grvals[dim],d1);\n    alo = conv(pfi->grvals[dim],d1-0.5);\n    ahi = conv(pfi->grvals[dim],d1+0.5);\n    alen=fabs(ahi-alo);\n    pst->dmin[dim] = abs;\n    pst->dmax[dim] = abs;\n    if (bndflg) {\n      if (whi<wlo) {\n        if (alo > wlo) alo = wlo;\n        if (ahi > wlo) ahi = wlo;\n        if (alo < whi) alo = whi;\n        if (ahi < whi) ahi = whi;\n      } else {\n        if (alo < wlo) alo = wlo;\n        if (ahi < wlo) ahi = wlo;\n        if (alo > whi) alo = whi;\n        if (ahi > whi) ahi = whi;\n      }\n    }\n    /*-----  lat scaling */\n    if (dim==1) {\n      if (alo >  90.0) alo =  90.0;\n      if (ahi >  90.0) ahi =  90.0;\n      if (alo < -90.0) alo = -90.0;\n      if (ahi < -90.0) ahi = -90.0;\n      if (sel==1) {                                                   /* ave */\n\twt1 = fabs(sin(ahi*d2r)-sin(alo*d2r));\n      } else if (sel==2) {                                            /* mean */\n\twt1 = fabs(ahi-alo);\n      } else if (sel==3) {                                            /* sum */\n\tif (alen > FUZZ_SCALE) {\n\t  wt1=fabs(ahi-alo)/alen;\n\t} else {\n\t  wt1=0.0;\n\t}\n      } else if (sel==4) {                                            /* sumg */\n\twt1=1.0;\n      }\n    } \n    /* -----   lon,lev,ens scaling */\n    else {\n      if(sel<=2) {                                        /* ave, mean */\n\twt1 = ahi - alo;\n      } else if (sel==3) {                                /* sum */\n\tif (alen > FUZZ_SCALE) {\n\t  wt1=fabs(ahi-alo)/alen;\n\t} else {\n\t  wt1=0.0;\n\t}\n      } else if (sel==4) {                                /* sumg */\n\twt1=1.0;\n      }\n    } \n  }\n  \n  /* Get first grid */\n  rc = gaexpr(pfc->argpnt[0],pst);     \n  if (rc) return (rc);\n  if (pst->type == 0) {\n    gafree (pst);\n    return(-1);\n  }\n  pgr1 = pst->result.pgr;\n\n  d = d1 + incr;                       /* If only grid, just return */\n  if (d>d2)  {\n    if (sel==7 || sel==8) {\n      siz = pgr1->isiz * pgr1->jsiz;\n      sum  = pgr1->grid;\n      sumu = pgr1->umask;\n      for (i=0; i<siz; i++) {\n        if (*sumu != 0) *sum = d1;\n        sum++; sumu++;\n      }\n    }\n    return (0); \n  }\n\n  /* Figure out weights for 2nd grid */\n  wt = 1.0;                    \n\n  /*-----    time 22222222222222 */\n  if (dim==3) {\n    gr2t (pfi->grvals[3],d,&(pst->tmin));\n    pst->tmax = pst->tmin;\n    if (bndflg) {\n      rd1 = d;\n      if (gr1 < rd1+0.5) wt = (rd1+0.5)-gr1;\n      if (gr2 > rd1-0.5) wt = gr2 + 0.5 - rd1;\n      if (wt<0.0) wt=0.0;\n    }\n  } \n  /*----- lon,lat,lev,ens 22222222222 */\n  else {\n    conv = pfi->gr2ab[dim];\n    abs = conv(pfi->grvals[dim],d);\n    alo = conv(pfi->grvals[dim],d-0.5);\n    ahi = conv(pfi->grvals[dim],d+0.5);\n    alen=fabs(ahi-alo);\n    pst->dmin[dim] = abs;\n    pst->dmax[dim] = abs;\n    if (bndflg) {\n      if (whi<wlo) {\n        if (alo > wlo) alo = wlo;\n        if (ahi > wlo) ahi = wlo;\n        if (alo < whi) alo = whi;\n        if (ahi < whi) ahi = whi;\n      } else {\n        if (alo < wlo) alo = wlo;\n        if (ahi < wlo) ahi = wlo;\n        if (alo > whi) alo = whi;\n        if (ahi > whi) ahi = whi;\n      }\n    }\n    /* ---- lat scaling 2222222222222*/\n    if (dim==1) {\n      if (alo >  90.0) alo =  90.0;\n      if (ahi >  90.0) ahi =  90.0;\n      if (alo < -90.0) alo = -90.0;\n      if (ahi < -90.0) ahi = -90.0;\n      if(sel==1) {                                                 /* ave */\n\twt = fabs(sin(ahi*d2r)-sin(alo*d2r));\n      } else if (sel==2) {                                         /* mean */\n\twt = fabs(ahi-alo);\n      } else if (sel==3) {                                         /* sum */\n\tif(alen > FUZZ_SCALE) {\n\t  wt=fabs(ahi-alo)/alen;\n\t} else  {\n\t  wt=0.0;\n\t}\n      } else if (sel==4) {                                         /* sumg */\n\twt=1.0;\n      }\n    } \n    /* ---- lon,lev,ens  scaling 2222222222222*/\n    else {\n      if(sel<=2) {                                  /* ave, mean */\n\twt = ahi - alo;\n      } else if(sel==3) {                           /* sum */\n\tif(alen > FUZZ_SCALE) {\n\t  wt=fabs(ahi-alo)/alen;\n\t} else {\n\t  wt=0.0;\n\t}\n      } else if(sel==4) {                           /* sumg */\n\twt=1.0;\n      }\n    }\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);    /* Get 2nd grid */\n  if (rc) {\n    gagfre(pgr1);\n    return (rc);\n  }\n  if (pst->type==0) {\n    gafree(pst);\n    gagfre(pgr1);\n    return (-1);\n  }\n  pgr2 = pst->result.pgr;\n\n\n  /* We will sum into the first grid, and keep the\n     count in the 2nd grid.  Set this up...        */\n\n  siz = pgr1->isiz * pgr1->jsiz;\n  sum  = pgr1->grid;\n  cnt  = pgr2->grid;\n  sumu = pgr1->umask;\n  cntu = pgr2->umask;\n  for (i=0; i<siz; i++) {\n    if (sel>=5 && sel<=8) {\n      if (*sumu==0 || *cntu==0) {  \n        if (*cntu!=0) {\n\t  *sum = *cnt; \n\t  *sumu = 1;\n\t  *cnt = d;\n\t}\n        else if (*sumu!=0) {\n\t  *cnt = d1;\n\t  *cntu = 1;\n\t}\n      } \n      else {\n        if (sel==5 || sel==7) {\n          if (*cnt < *sum) {*sum = *cnt; *cnt = d;} \n          else *cnt = d1;\n        }\n        if (sel==6 || sel==8) {\n          if (*cnt > *sum) {*sum = *cnt; *cnt = d;}\n          else *cnt = d1;\n        }\n      }\n    }\n    else {\n      if (*sumu==0) {\n        if (*cntu==0) {\n\t  *cnt = 0.0;\n\t  *cntu = 1;\n\t}\n        else {\n    \t  if (sel<=3) {                                          /* ave, mean sum */\n\t    *sum = *cnt*wt;\n\t    *sumu = 1;\n\t    *cnt = wt;\n          } \n\t  else if (sel==4) {                                   /* sumg */\n\t    *sum = *cnt;\n\t    *sumu = 1;\n          }\n        }\n      } \n      else if (*cntu==0 && (sel<=3) ) {              /* ave, mean sum */\n        *cnt = wt1;\n\t*cntu = 1;\n        *sum = *sum*wt1; \n      } else {\n        if (sel<=3) {\n          *sum = *sum*wt1 + *cnt*wt;                            /* ave, mean sum */\n        } \n\telse if (sel==4) {\n          *sum = *sum + *cnt;\n        }\n        *cnt = wt1 + wt;\n\t*cntu = 1;\n      }\n    }\n    cnt++;  sum++;\n    cntu++; sumu++;\n  }\n\n  /* Now sum the rest of the grids */\n  d+=incr;\n  rc = 0;\n  for (d=d; d<=d2 && !rc; d+=incr) {\n    /* Get weight for this grid */\n    wt = 1.0;          \n    \n    /*---- time 3333333*/\n    if (dim==3) {\n      gr2t (pfi->grvals[3],d,&(pst->tmin));\n      pst->tmax = pst->tmin;\n      if (bndflg) {\n\trd1 = d;\n\tif (gr1 < rd1+0.5) wt = (rd1+0.5)-gr1;\n\tif (gr2 > rd1-0.5) wt = gr2 + 0.5 - rd1;\n\tif (wt<0.0) wt=0.0;\n      }\n    } \n    /*---- lat,lon,lev,ens 3333333*/\n    else {\n      conv = pfi->gr2ab[dim];\n      abs = conv(pfi->grvals[dim],d);\n      alo = conv(pfi->grvals[dim],d-0.5);\n      ahi = conv(pfi->grvals[dim],d+0.5);\n      alen=fabs(ahi-alo);\n      pst->dmin[dim] = abs;\n      pst->dmax[dim] = abs;\n      if (bndflg) {\n\tif (whi<wlo) {\n\t  if (alo > wlo) alo = wlo;\n\t  if (ahi > wlo) ahi = wlo;\n\t  if (alo < whi) alo = whi;\n\t  if (ahi < whi) ahi = whi;\n\t} else {\n\t  if (alo < wlo) alo = wlo;\n\t  if (ahi < wlo) ahi = wlo;\n\t  if (alo > whi) alo = whi;\n\t  if (ahi > whi) ahi = whi;\n\t}\n      }\n      /*---- lat 3333333*/\n      if (dim==1) {\n\tif (alo >  90.0) alo =  90.0;\n\tif (ahi >  90.0) ahi =  90.0;\n\tif (alo < -90.0) alo = -90.0;\n\tif (ahi < -90.0) ahi = -90.0;\n\tif(sel==1) {                                                  /* ave */\n\t  wt = fabs(sin(ahi*d2r)-sin(alo*d2r));\n\t} else if (sel==2) {                                          /* mean */\n\t  wt = fabs(ahi-alo);\n\t} else if (sel==3) {                                          /* sum */\n\t  if(alen > FUZZ_SCALE) {\n\t    wt=fabs(ahi-alo)/alen;\n\t  } else  {\n\t    wt=0.0;\n\t  }\n\t} else if (sel==4) {                                          /* sumg */\n\t  wt=1.0;\n\t}\n      } \n      /*---- lon,lev,ens 3333333*/\n      else {\n\tif(sel<=2) {                        /* ave, mean */\n\t  wt = ahi - alo;\n\t} else if(sel==3) {                 /* sum */\n\t  if(alen > FUZZ_SCALE) {\n\t    wt=fabs(ahi-alo)/alen;\n\t  } else {\n\t    wt=0.0;\n\t  }\n\t} else if(sel==4) {                 /* sumg */\n\t  wt=1.0;\n\t}\n      }\n    }\n    \n    rc = gaexpr(pfc->argpnt[0],pst);\n    if (!rc && pst->type==0) rc = -1;\n    if (!rc) {\n      pgr = pst->result.pgr;\n      val = pgr->grid;\n      cnt = pgr2->grid;\n      sum = pgr1->grid;\n      valu = pgr->umask;\n      cntu = pgr2->umask;\n      sumu = pgr1->umask;\n      for (i=0; i<siz; i++) {\n\tif (sel>=5 && sel<=8) {\n\t  if (*sumu==0 || *valu==0) {  \n\t    if (*valu!=0) {\n\t      *sum = *val; \n\t      *cnt = d;\n\t      *sumu = 1;\n\t      *cntu = 1;\n\t    }\n\t  } \n\t  else {\n\t    if ((sel==5 || sel==7) && *val < *sum) {*sum = *val; *cnt = d;} \n\t    if ((sel==6 || sel==8) && *val > *sum) {*sum = *val; *cnt = d;}\n\t  }\n\t} else {\n\t  if (*valu!=0) {\n\t    /* weight for ave,mean,sum  for sumg just accum */\n\t    if (sel<=3) {\n\t      *val = *val*wt;\n\t    }\n\t    if (*sumu==0) {\n\t      *sum = *val;\n\t      *sumu = 1;\n\t      *cnt += wt;\n\t    } else {\n\t      *sum += *val;\n\t      *cnt += wt;\n\t    }\n\t  }\n\t}\n\tsum++;  cnt++;  val++;\n\tsumu++; cntu++; valu++;\n      }\n      gagfre(pgr);\n    }\n  }\n  \n  if (rc) {\n    if (rc==-1) gafree (pst);\n    gagfre(pgr1);\n    gagfre(pgr2);\n    snprintf(pout,1255,\"Error from %s:  Error getting grids \\n\",fnam);\n    gaprnt(0,pout);\n    return (rc);\n  } else {\n    cnt = pgr2->grid;         /* Normalize if needed */\n    sum = pgr1->grid;\n    cntu = pgr2->umask;\n    sumu = pgr1->umask;\n    if (sel==1 || sel==2 || sel==7 || sel==8) {\n      for (i=0; i<siz; i++) {\n        if (*sumu!=0) {\n          if (sel < 3 && *cnt==0.0) {\n            snprintf(pout,1255,\"Error from %s:  Internal logic check 100\\n\",fnam);\n            gaprnt(0,pout);\n            return (1);\n          }\n          if (sel > 6 && *cntu==0) {\n            snprintf(pout,1255,\"Error from %s:  Internal logic check 101\\n\",fnam);\n            gaprnt(0,pout);\n            return (1);\n          }\n          if (sel==1 || sel==2) {\n\t    *sum = *sum / *cnt;\n          } else {\n            *sum = *cnt;\n          }\n        }\n        sum++;  cnt++;\n        sumu++; cntu++;\n      }\n    }\n  }\n\n  gagfre(pgr2);\n\n  pst->type = 1;\n  pst->result.pgr = pgr1;\n\n  return (0);\n\nerr3:\n  snprintf(pout,1255,\"Error from %s: Invalid time increment argument\\n\",fnam);\n  gaprnt(0,pout);\n  return (1);\n}\n\n\ngaint ffgint (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgr1, *pgr;\nstruct gafile *pfi;\ngadouble (*conv) (gadouble *, gadouble);\ngadouble gr1,gr2,*sum, *val;\ngadouble wt, abs, abslo, abshi, d2r;\ngaint i, rc, siz, dim, d, d1, d2, dim2, ilin, bndflg, wflag=0;\nchar *ch,*sumu,*valu;\n\n  d2r = M_PI/180;\n\n  /* Check for valid number of args       */\n  if (pfc->argnum<3 || pfc->argnum>4) {\n    gaprnt (0,\"Error from GINT:  Too many or too few args \\n\");\n    gaprnt (0,\"                  3 or 4 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Parse the dimension expression       */\n  pfi = pst->pfid;\n  ch = dimprs (pfc->argpnt[1], pst, pfi, &dim, &gr1, 1, &wflag);\n  if (ch==NULL || wflag==2) {\n    gaprnt (0,\"Error from GINT:  1st dimension expression invalid\\n\");\n    if (wflag==2) gaprnt (0,\"  offt expression not supported as an arg to GINT\\n\");\n    return (1);\n  }\n\n  /* Now parse the 2nd dimension expression.  */\n  ch = dimprs (pfc->argpnt[2], pst, pfi, &dim2, &gr2, 1, &wflag);\n  if (ch==NULL || dim2!=dim || gr2<gr1 || wflag==2) {\n    gaprnt(0,\"Error from GINT:  2nd dimension expression invalid\\n\");\n    if (dim2!=dim) gaprnt (0,\"  start and end points have different dimensions\\n\");\n    if (gr2<gr1)   gaprnt (0,\"  end grid point is less than start grid point \\n\");\n    if (wflag==2)  gaprnt (0,\"  offt expression not supported as an arg to GINT\\n\");\n    return (1);\n  }\n\n  /* Check for 4th argument.  Should be flags.  */\n  bndflg = 0;\n  if (pfc->argnum == 5) {\n    if (*(pfc->argpnt[4]) == '-' &&\n        *(pfc->argpnt[4]+1) == 'b') bndflg = 1;\n    else {\n      gaprnt (0,\"Error from GINT: Invalid option flags\\n\");\n      return(1);\n    }\n  }\n\n  /* Get the first grid.             */\n  if (pst->idim==dim) {          /* Fewer varying dims if user */\n    pst->idim = pst->jdim;       /* integrating over varng dim */\n    pst->jdim = -1;\n  }\n  ilin = pfi->linear[dim];\n  if (pst->jdim==dim) pst->jdim = -1;\n  d1 = ceil(gr1-0.001);          /* dim limits must be integer */\n  d2 = floor(gr2+0.001);\n\n  if(mfcmn.warnflg > 0) {\n    snprintf(pout,1255,\"Integrating.  dim = %i, start = %i, end = %i\\n\", dim, d1, d2);\n    gaprnt (2,pout);\n  }\n\n  wt = 1.0;                     /* Figure out weight for 1st grid */\n  if (dim==3) {\n    gr2t (pfi->grvals[3],d1,&(pst->tmin));\n    pst->tmax = pst->tmin;\n    wt = *(pfi->grvals[3]+5) + *(pfi->grvals[3]+6);\n  } else {\n    conv = pfi->gr2ab[dim];\n    abs = conv(pfi->grvals[dim],d1);\n    pst->dmin[dim] = abs;\n    pst->dmax[dim] = abs;\n    abslo = conv(pfi->grvals[dim],d1-0.5);\n    abshi = conv(pfi->grvals[dim],d1+0.5);\n    wt = abshi - abslo;\n    wt = fabs(wt);\n    if (dim==0 || dim==1) wt = wt*6.37E6*d2r;\n  }\n  if (bndflg) wt = wt*0.5;\n\n  rc = gaexpr(pfc->argpnt[0],pst);     /* Get first grid */\n  if (rc) return (rc);\n  if (pst->type == 0) {\n    gafree (pst);\n    return(-1);\n  }\n  pgr1 = pst->result.pgr;\n\n  if (dim==0) {                        /* Adjust weights if needed  */\n    if (pgr1->idim==1) cosadj(pgr1);\n    else wt = wt * cos(pst->dmin[1]*d2r);\n  }\n\n  siz = pgr1->isiz * pgr1->jsiz;       /* Apply weights to this grid */\n  sum  = pgr1->grid;\n  sumu = pgr1->umask;\n  for (i=0; i<siz; i++) {\n    if (*sumu!=0) *sum = *sum * wt;\n    sum++; sumu++;\n  }\n\n  d = d1 + 1;\n  if (d>d2) return(0);                 /* If only one grid, return  */\n\n  /* Now sum the rest of the grids into the first grid */\n\n  rc = 0;\n  for (d=d; d<=d2 && !rc; d++) {\n    wt = 1.0;\n    if (dim==3) {\n      gr2t (pfi->grvals[3],d,&(pst->tmin));\n      pst->tmax = pst->tmin;\n      wt = *(pfi->grvals[3]+5) + *(pfi->grvals[3]+6);\n    } else {\n      conv = pfi->gr2ab[dim];\n      abs = conv(pfi->grvals[dim],d);\n      pst->dmin[dim] = abs;\n      pst->dmax[dim] = abs;\n      abslo = conv(pfi->grvals[dim],d-0.5);\n      abshi = conv(pfi->grvals[dim],d+0.5);\n      wt = abshi - abslo;\n      wt = fabs(wt);\n      if (dim==0 || dim==1) wt = wt*6.37E6*d2r;\n    }\n    if (d==d2 && bndflg) wt = wt*0.5;\n    rc = gaexpr(pfc->argpnt[0],pst);\n    if (!rc && pst->type==0) rc = -1;\n    if (!rc) {\n      pgr = pst->result.pgr;\n      if (dim==0) {                   /* Adjust weights if needed  */\n        if (pgr->idim==1) cosadj(pgr);\n        else wt = wt * cos(pst->dmin[1]*d2r);\n      }\n      val  = pgr->grid;\n      valu = pgr->umask;\n      sum  = pgr1->grid;\n      sumu = pgr1->umask;\n      for (i=0; i<siz; i++) {\n        if (*valu!=0) {\n          *val = *val*wt;\n          if (*sumu==0) {\n\t    *sum  = *val;\n\t    *sumu = 1;\n\t  }\n          else *sum += *val;\n        }\n        sum++;  val++;\n        sumu++; valu++;\n      }\n      gagfre(pgr);\n    }\n  }\n\n  if (rc) {\n    if (rc==-1) gafree (pst);\n    gagfre(pgr1);\n    gaprnt (0,\"Error from GINT:  Error getting grids \\n\");\n    return (rc);\n  }\n\n  pst->type = 1;\n  pst->result.pgr = pgr1;\n\n  return (0);\n}\n\nvoid cosadj (struct gagrid *pgr) {\ngadouble *ltvals;\ngadouble (*ltconv) (gadouble *, gadouble);\ngadouble lat,*gr,d2r;\ngaint i,j;\nchar *gru;\n  d2r = M_PI/180;\n  ltvals = pgr->ivals;\n  ltconv = pgr->igrab;\n  gr = pgr->grid;\n  gru = pgr->umask;\n  for (j=0; j<pgr->jsiz; j++) {\n    for (i=0; i<pgr->isiz; i++) {\n      lat  = ltconv(ltvals,(gadouble)(i+pgr->dimmin[1]))*d2r;\n      if (*gru!=0) *gr = *gr * cos(lat);\n      gr++; gru++;\n    }\n  }\n}\n\ngaint ffhdiv (struct gafunc *pfc, struct gastat *pst) {\ngaint rc,size,i,j;\nstruct gagrid *pgr1, *pgr2;\ngadouble *result;\ngadouble *p1, *p2, *p3, *p4, *p;\ngadouble lat2, lat4, lat, lon1, lon3, ri, rj, temp, d2r;\ngadouble *lnvals, *ltvals;\ngadouble (*lnconv) (gadouble *, gadouble);\ngadouble (*ltconv) (gadouble *, gadouble);\nchar *resultu, *p1u, *p2u, *p3u, *p4u, *pu;\nsize_t sz;\n\n  d2r = M_PI/180;\n  result = NULL;\n  resultu = NULL;\n\n  /* Check for user errors */\n  if (pfc->argnum!=2) {\n    gaprnt (0,\"Error from HDIVG:  Too many or too few args \\n\");\n    gaprnt (0,\"                   Two arguments expected \\n\");\n    return (1);\n  }\n  if (pst->idim!=0 || pst->jdim!=1) {\n    gaprnt (0,\"Error from HDIVG:  Invalid dimension environment\\n\");\n    gaprnt (0,\"  Horizontal environment (X, Y Varying) is required\\n\");\n    return (1);\n  }\n\n  /* Get the u and v fields.  User responsible for validity. */\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    gafree (pst);\n    return (-1);\n  }\n  pgr1 = pst->result.pgr;\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) {\n    gagfre(pgr1);\n    return (rc);\n  }\n  if (pst->type==0) {\n    gafree (pst);\n    gagfre(pgr1);\n    return (-1);\n  }\n  pgr2 = pst->result.pgr;\n\n  /* Check that an operation between these grids is valid */\n  if (gagchk(pgr1,pgr2,pst->idim) ||\n      gagchk(pgr1,pgr2,pst->jdim) ) {\n    gaprnt (0,\"Error from HDIVG:  Incompatable grids \\n\");\n    gaprnt (0,\"                   Dimension ranges unequal \\n\");\n    goto erret;\n  }\n\n  /* Get memory for result grid and umask */\n  size = pgr1->isiz * pgr1->jsiz;\n  sz = size*sizeof(gadouble);\n  result = (gadouble *)galloc(sz,\"hdivres\");\n  if (result==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  HDIVG function \\n\");\n    goto erret;\n  }\n  sz = size*sizeof(char);\n  resultu = (char *)galloc(sz,\"hdivresu\");\n  if (resultu==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  HDIVG function \\n\");\n    goto erret;\n  }\n\n  /* Perform the divergence calculation except at grid borders */\n  for (i=0; i<size; i++) *(resultu+i) = 0;\n\n  lnvals = pgr1->ivals;\n  ltvals = pgr1->jvals;\n  lnconv = pgr1->igrab;\n  ltconv = pgr1->jgrab;\n\n  /*             p4\n                 |\n             p1--p--p3\n                 |\n                 p2                           */\n\n  p = result + (pgr1->isiz + 1);\n  p1 = pgr1->grid + pgr1->isiz;\n  p2 = pgr2->grid + 1;\n  p3 = p1 + 2;\n  p4 = p2 + (2 * pgr1->isiz);\n\n  pu = resultu + (pgr1->isiz + 1);\n  p1u = pgr2->umask + pgr2->isiz;\n  p2u = pgr1->umask + 1;\n  p3u = p1u + 2;\n  p4u = p2u + (2 * pgr1->isiz);\n\n  for (j=(pgr1->dimmin[1]+1); j<pgr1->dimmax[1]; j++) {\n    rj = (gadouble)j;\n    lat  = ltconv(ltvals,rj    ) * d2r;\n    lat2 = ltconv(ltvals,rj-1.0) * d2r;\n    lat4 = ltconv(ltvals,rj+1.0) * d2r;\n    for (i=(pgr1->dimmin[0]+1); i<pgr1->dimmax[0]; i++) {\n      if (*p1u!=0 && \n\t  *p2u!=0 &&\n          *p3u!=0 && \n\t  *p4u!=0 ) {\n        ri = (gadouble)i;\n        lon1 = lnconv(lnvals,ri-1.0) * d2r;\n        lon3 = lnconv(lnvals,ri+1.0) * d2r;\n        *p = (*p3 - *p1)/(lon3-lon1);\n        *p = *p + (*p4*cos(lat4) - *p2*cos(lat2))/(lat4-lat2);\n        temp = 6.37E6 * cos(lat);\n        if (temp>1E-10) {\n\t  *p = *p / temp;\n\t  *pu = 1;\n\t}\n        else *pu = 0;\n      }\n      p++; p1++; p2++; p3++; p4++;\n      pu++; p1u++; p2u++; p3u++; p4u++;\n    }\n    p+=2; p1+=2; p2+=2; p3+=2; p4+=2;\n    pu+=2; p1u+=2; p2u+=2; p3u+=2; p4u+=2;\n  }\n  gree(pgr1->grid,\"f417\");\n  gree(pgr1->umask,\"f418\");\n  gagfre(pgr2);\n  pgr1->grid = result;\n  pgr1->umask = resultu;\n  pst->type = 1;\n  pst->result.pgr = pgr1;\n  return (0);\n\nerret:\n  if (result) gree(result,\"f419\");\n  gagfre(pgr1);\n  gagfre(pgr2);\n  return (1);\n\n}\n\ngaint ffhcrl (struct gafunc *pfc, struct gastat *pst) {\ngaint rc,size,i,j;\nstruct gagrid *pgr1, *pgr2;\ngadouble *result=NULL;\ngadouble *p1, *p2, *p3, *p4, *p;\ngadouble lat2, lat4, lat, lon1, lon3, ri, rj, temp, d2r;\ngadouble *lnvals, *ltvals;\ngadouble (*lnconv) (gadouble *, gadouble);\ngadouble (*ltconv) (gadouble *, gadouble);\nchar *p1u, *p2u, *p3u, *p4u, *pu, *resultu;\nsize_t sz;\n\n  d2r = M_PI/180;\n\n  /* Check for user errors */\n\n  if (pfc->argnum!=2) {\n    gaprnt (0,\"Error from HCURL:  Too many or too few args \\n\");\n    gaprnt (0,\"                   Two arguments expected \\n\");\n    return (1);\n  }\n  if (pst->idim!=0 || pst->jdim!=1) {\n    gaprnt (0,\"Error from HCURL:  Invalid dimension environment\\n\");\n    gaprnt (0,\"  Horizontal environment (X, Y Varying) is required\\n\");\n    return (1);\n  }\n\n  /* Get the u and v fields.  User responsible for validity. */\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    gafree (pst);\n    return(-1);\n  }\n  pgr1 = pst->result.pgr;\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) {\n    gagfre(pgr1);\n    return (rc);\n  }\n  if (pst->type==0) {\n    gafree (pst);\n    gagfre(pgr1);\n    return (-1);\n  }\n  pgr2 = pst->result.pgr;\n\n  /* Check that an operation between these grids is valid */\n\n  if (gagchk(pgr1,pgr2,pst->idim) ||\n      gagchk(pgr1,pgr2,pst->jdim) ) {\n    gaprnt (0,\"Error from HCURL:  Incompatable grids \\n\");\n    gaprnt (0,\"                   Dimension ranges unequal \\n\");\n    goto erret;\n  }\n\n  /* Get memory for result grid and umask */\n  size = pgr1->isiz * pgr1->jsiz;\n  sz = size*sizeof(gadouble);\n  result = (gadouble *)galloc(sz,\"hcurlres\");\n  if (result==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  HCURL function\\n\");\n    goto erret;\n  }\n  sz = size*sizeof(char);\n  resultu = (char *)galloc(sz,\"hcurlresu\");\n  if (resultu==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  HCURL function\\n\");\n    goto erret;\n  }\n\n  /* Perform the vorticity calculation except at grid borders */\n  for (i=0; i<size; i++) *(resultu+i) = 0;\n\n  lnvals = pgr1->ivals;\n  ltvals = pgr1->jvals;\n  lnconv = pgr1->igrab;\n  ltconv = pgr1->jgrab;\n\n  /*             p4\n                 |\n             p1--p--p3\n                 |\n                 p2                           */\n\n  p  = result  + (pgr1->isiz + 1);\n  p1  = pgr2->grid + pgr2->isiz;\n  p2  = pgr1->grid + 1;\n  p3  = p1 + 2;\n  p4  = p2  + (2 * pgr1->isiz);\n\n  pu = resultu + (pgr1->isiz + 1);\n  p1u = pgr2->umask + pgr2->isiz;\n  p2u = pgr1->umask + 1;\n  p3u = p1u + 2;\n  p4u = p2u + (2 * pgr1->isiz);\n\n  for (j=(pgr1->dimmin[1]+1); j<pgr1->dimmax[1]; j++) {\n    rj = (gadouble)j;\n    lat  = ltconv(ltvals,rj    ) * d2r;\n    lat2 = ltconv(ltvals,rj-1.0) * d2r;\n    lat4 = ltconv(ltvals,rj+1.0) * d2r;\n    for (i=(pgr1->dimmin[0]+1); i<pgr1->dimmax[0]; i++) {\n      if (*p1u!=0 && \n\t  *p2u!=0 &&\n          *p3u!=0 && \n\t  *p4u!=0 ) {\n        ri = (gadouble)i;\n        lon1 = lnconv(lnvals,ri-1.0) * d2r;\n        lon3 = lnconv(lnvals,ri+1.0) * d2r;\n        *p = (*p3 - *p1)/(lon3-lon1);\n        *p = *p - (*p4*cos(lat4) - *p2*cos(lat2))/(lat4-lat2);\n        temp = 6.37E6 * cos(lat);\n        if (temp>1E-10) {\n\t  *p = *p / temp;\n\t  *pu = 1;\n\t}\n        else {\n\t  *pu = 0;\n\t}\n      }\n      p++;  p1++;  p2++;  p3++;  p4++;\n      pu++; p1u++; p2u++; p3u++; p4u++;\n    }\n    p+=2;  p1+=2;  p2+=2;  p3+=2;  p4+=2;\n    pu+=2; p1u+=2; p2u+=2; p3u+=2; p4u+=2;\n  }\n  gree(pgr1->grid,\"f420\");\n  gree(pgr1->umask,\"f421\");\n  gagfre (pgr2);\n  pgr1->grid = result;\n  pgr1->umask = resultu;\n  pst->type = 1;\n  pst->result.pgr = pgr1;\n  return (0);\n\nerret:\n  if (result) gree(result,\"f422\");\n  gagfre(pgr1);\n  gagfre(pgr2);\n  return (1);\n\n}\n\ngaint fftv2q (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n  rc = fftv2 (pfc, pst, 0);\n  return (rc);\n}\n\ngaint fftv2t (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n  rc = fftv2 (pfc, pst, 1);\n  return (rc);\n}\n\ngaint fftv2 (struct gafunc *pfc, struct gastat *pst, gaint tflag) {\nstruct gagrid *pgrtv, *pgrrh;\ngadouble *lvvals;\ngadouble (*lvconv) (gadouble *, gadouble);\ngaint i,j, rc, errcnt;\ngadouble *tv, *rh, t, q, p;\nchar *tvu, *rhu;\n\n  if (pfc->argnum!=2) {\n    if (tflag) {\n      gaprnt (0,\"Error from TVRH2T:  Too many or too few args \\n\");\n    } else {\n      gaprnt (0,\"Error from TVRH2Q:  Too many or too few args \\n\");\n    }\n    gaprnt (0,\"                    Two arguments expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type == 0) {\n    gafree (pst);\n    return(-1);\n  }\n  pgrtv = pst->result.pgr;\n\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) return (rc);\n  if (pst->type == 0) {\n    gagfre(pgrtv);\n    gafree (pst);\n    return(-1);\n  }\n  pgrrh = pst->result.pgr;\n\n  if ((pgrrh->idim!=pgrtv->idim) || \n      (pgrrh->jdim!=pgrtv->jdim) || \n      (pgrrh->idim>-1 && gagchk(pgrrh,pgrtv,pgrrh->idim)) || \n      (pgrrh->jdim>-1 && gagchk(pgrrh,pgrtv,pgrrh->jdim)) ) {\n    gaprnt (0,\"Error in TVRH2Q: Grids don't have same scaling\");\n    gagfre (pgrtv);\n    gagfre (pgrrh);\n    return (1);\n  }\n\n  errcnt = 0;\n  if (pgrrh->idim == 2) {\n    lvconv = pgrrh->igrab;\n    lvvals = pgrrh->ivals;\n    tv = pgrtv->grid;\n    rh = pgrrh->grid;\n    tvu = pgrtv->umask;\n    rhu = pgrrh->umask;\n    for (j=0; j<pgrrh->jsiz; j++) {\n      for (i=0; i<pgrrh->isiz; i++) {\n        if (*rhu==0 || *tvu==0) {\n          *rhu = 0;\n        } else {\n          p = lvconv(lvvals, (gadouble)(i+pgrrh->dimmin[2]));\n          rc = tvrh2q (p, *tv, *rh, &q, &t);\n          if (rc) {\n            *rhu = 0;\n            errcnt++;\n          } else {\n            if (tflag) {\n\t      *rh = t;\n\t      *rhu = 1;\n\t    }\n            else {\n\t      *rh = q;\n\t      *rhu = 1;\n\t    }\n          }\n        }\n        rh++;  tv++;\n        rhu++; tvu++;\n      }\n    }\n  } else if (pgrrh->jdim == 2) {\n    lvconv = pgrrh->jgrab;\n    lvvals = pgrrh->jvals;\n    tv = pgrtv->grid;\n    rh = pgrrh->grid;\n    tvu = pgrtv->umask;\n    rhu = pgrrh->umask;\n    for (j=0; j<pgrrh->jsiz; j++) {\n      p = lvconv(lvvals, (gadouble)(j+pgrrh->dimmin[2]));\n      for (i=0; i<pgrrh->isiz; i++) {\n        if (*rhu==0 || *tvu==0) {\n          *rhu = 0;\n        } else {\n          rc = tvrh2q (p, *tv, *rh, &q, &t);\n          if (rc) {\n            *rhu = 0;\n            errcnt++;\n          } else {\n            if (tflag) {\n\t      *rh = t;\n\t      *rhu = 1;\n\t    }\n            else {\n\t      *rh = q;\n\t      *rhu = 1;\n\t    }\n          }\n        }\n        rh++; tv++;\n        rhu++; tvu++;\n      }\n    }\n  } else {\n    p = pst->dmin[2];\n    snprintf(pout,1255,\" Using fixed pressure level %g mb\\n\",p);\n    if (tflag) {\n      gaprnt (2,\"Notice from TVRH2T:\");\n    } else {\n      gaprnt (2,\"Notice from TVRH2Q:\");\n    }\n    gaprnt (1,pout);\n    tv = pgrtv->grid;\n    rh = pgrrh->grid;\n    tvu = pgrtv->umask;\n    rhu = pgrrh->umask;\n    for (j=0; j<pgrrh->jsiz; j++) {\n      for (i=0; i<pgrrh->isiz; i++) {\n        if (*rhu==0 || *tvu==0) {\n          *rhu = 0;\n        } else {\n          rc = tvrh2q (p, *tv, *rh, &q, &t);\n          if (rc) {\n            *rhu = 0;\n            errcnt++;\n          } else {\n            if (tflag) {\n\t      *rh = t;\n\t      *rhu = 1;\n\t    }\n            else {\n\t      *rh = q;\n\t      *rhu = 1;\n\t    }\n          }\n        }\n        rh++; tv++;\n        rhu++; tvu++;\n      }\n    }\n  }\n\n  if (errcnt) {\n    snprintf(pout,1255,\" Convergence failed for %i grid points\\n\",errcnt);\n    if (tflag) {\n      gaprnt (1,\"Warning from TVRH2T:\");\n    } else {\n      gaprnt (1,\"Warning from TVRH2Q:\");\n    }\n    gaprnt (1,pout);\n  }\n  gagfre (pgrtv);\n  return (0);\n}\n\n/* Routine to convert tv and rh to t and q.  FORTRAN version\n   provided by J. Kinter.  Converted to C by B. Doty.    */\n\ngaint tvrh2q (gadouble p, gadouble tv, gadouble rh, gadouble *qret, gadouble *tret) {\ngadouble eps,a,b,c,t,q,al10,tc,esat,desdt,qr,f,denom,dfdt,fn,qn,tn;\ngaint i;\n\n  eps = 0.622;\n  a = 0.7854;\n  b = 0.03477;\n  c = 0.00412;\n\n  /* Convert rh to fraction.  Convert pressure to pascals. */\n\n  rh = rh * 0.01;\n  p = p*100.0;\n\n  /* Set first guess for t and q */\n\n  t = tv;\n  q = 0.01 * rh * eps;\n\n  /* Iterate to convergence */\n\n  al10 = log(10.0);\n  for (i=0; i<25; i++) {\n\n    /* Set saturation vapor pressure (compute from smisthonian tables)*/\n\n    tc = t - 273.16;\n    esat = 100.0 * exp(al10*(a+b*tc)/(1.0+c*tc));\n    desdt = al10 * esat * (b-a*c)/((1.0+c*tc)*(1.0+c*tc));\n    qr = eps*rh*esat/(p-(1.0-eps)*esat);\n    f = q-qr;\n\n    /* Compute derivative of q wrt q given fixed virtual temp and\n       rh (constant pressure) */\n\n    denom = p-(1.0-eps)*esat;\n    denom = denom * denom;\n    dfdt = eps*rh*((p-(1.0-eps)*esat)*desdt+esat*(1.0-eps)*desdt);\n    dfdt = 1.0-dfdt/denom;\n\n    /* Newton's method */\n\n    fn = f-f/dfdt;\n    qn = fn+qr;\n    tn = eps*tv*((1.0-qn)/(eps*(1.0-qn)+qn*(1.0-eps)));\n\n    /* Test for convergence */\n\n    if (fabs((tn-t)/t) <= 1.0E-6) break;\n    q = qn;\n    t = tn;\n  }\n\n  /* Print results */\n\n  if (i==25) return(1);\n  *qret = qn;\n  *tret = tn;\n  return(0);\n}\n\ngaint ffvint (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgrb, *pgr, *pgrv;\nstruct gafile *pfi;\ngadouble *ps, *var, *res;\ngadouble *lvvals;\ngadouble (*lvconv) (gadouble *, gadouble);\ngadouble top,clev,ulev,blev,ulevi,blevi,ulevt,blevt,kgm;\ngaint rc, size, i, j, lvt;\nchar *psu, *varu, *resu;\n\n  if (pfc->argnum!=3) {\n    gaprnt (0,\"Error from VINT:  Too many or too few args \\n\");\n    gaprnt (0,\"                  Three arguments expected \\n\");\n    return (1);\n  }\n\n  /* Get top pressure level.  It is a character value in 3rd arg */\n  if (getdbl(pfc->argpnt[2],&top)==NULL) {\n    gaprnt (0,\"Error from VINT:  3rd argument invalid. \\n\");\n    return (1);\n  }\n\n  /* Get the range of levels from the default file.  Set the\n     level in the status block to the first level.  */\n\n  pfi = pst->pfid;\n  lvt = pfi->dnum[2];\n  if (lvt<3) {\n    gaprnt (0,\"Error from VINT:  Too few levels in default file \\n\");\n    return (1);\n  }\n  lvconv = pfi->gr2ab[2];\n  lvvals = pfi->grvals[2];\n  clev = lvconv(lvvals, 1.0);\n  ulev = lvconv(lvvals, 2.0);\n  ulev = clev + ((ulev-clev)/2.0);\n  pst->dmin[2] = clev;\n  pst->dmax[2] = clev;\n  if (pst->idim==2) {\n    pst->idim = pst->jdim;\n    pst->jdim = -1;\n  }\n  if (pst->jdim==2) pst->jdim = -1;\n\n  /* Get the surface pressure field (1st arg).  User is responsible\n     for valid argument.  Then get the lowest level of the\n     field to integrate.  */\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (1);\n  if (pst->type==0) {\n    gafree (pst);\n    return (-1);\n  }\n  pgrb = pst->result.pgr;\n\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) {\n    gagfre (pgrb);\n    return (1);\n  }\n  if (pst->type==0) {\n    gafree (pst);\n    gagfre (pgrb);\n    return (-1);\n  }\n  pgr = pst->result.pgr;\n\n  /* Check that the two grids are equivalent.  */\n  if (pgrb->isiz!=pgr->isiz || pgrb->jsiz!=pgr->jsiz) {\n    gaprnt (0,\"Error from VINT:  Incompatible grids. \\n\");\n    goto erret;\n  }\n\n  /* Apply appropriate mass weight (kg/m**2) to first level.\n     It is assumed the vertical coordinate system is mb.    */\n  size = pgr->isiz * pgr->jsiz;\n  kgm = 100.0/9.8;\n  ps  = pgrb->grid; \n  psu = pgrb->umask;\n  res  = pgr->grid; \n  resu = pgr->umask;\n  for (i=0; i<size; i++) {\n    if (*psu==0 || *resu==0) {\n      *resu = 0;\n    }\n    else if (*ps < clev) {\n      *resu = 0;\n    }\n    else {\n      *res = *res * kgm * (*ps - ulev);\n      *resu = 1;\n    }\n    ps++; psu++; res++; resu++;\n  }\n\n  /* Go through the intermediate levels and apply mass weight. */\n  for (i=2; i<lvt; i++) {\n    clev = lvconv(lvvals, (gadouble)i);\n    if (clev<top) break;\n    ulev = lvconv(lvvals, (gadouble)(i+1));\n    ulevi = clev + ((ulev-clev)/2.0);\n    blev = lvconv(lvvals, (gadouble)(i-1));\n    blevi = clev + ((blev-clev)/2.0);\n    pst->dmin[2] = clev;\n    pst->dmax[2] = clev;\n    rc = gaexpr(pfc->argpnt[1],pst);\n    if (rc) goto erret;\n    if (pst->type==0) {\n      rc = -1;\n      gafree (pst);\n      goto erret;\n    }\n    pgrv = pst->result.pgr;\n    ps  = pgrb->grid;\n    res = pgr->grid;\n    var = pgrv->grid;\n    psu  = pgrb->umask;\n    resu = pgr->umask;\n    varu = pgrv->umask;\n    for (j=0; j<size; j++) {\n      if ((*psu!=0) && (*varu!=0) && (*ps>=clev)) {\n        ulevt = ulevi;\n        if (top>ulev) ulevt = top;\n        blevt = blevi;\n        if (*ps<blev) blevt = *ps;\n        if (*resu==0) {\n\t  *res = *var * kgm * (blevt - ulevt);\n\t  *resu = 1;\n\t}\n        else {\n\t  *res = *res + (*var * kgm * (blevt - ulevt) );\n\t  *resu = 1;\n\t}\n      }\n      ps++;  res++;  var++;\n      psu++; resu++; varu++;\n    }\n    gafree (pst);\n  }\n\n  /* Do top, and last, level */\n\n  clev = lvconv(lvvals, (gadouble)i);\n  if (top<=clev) {\n    blev = lvconv(lvvals, (gadouble)(i-1));\n    blevi = clev + ((blev-clev)/2.0);\n    pst->dmin[2] = clev;\n    pst->dmax[2] = clev;\n    rc = gaexpr(pfc->argpnt[1],pst);\n    if (rc) goto erret;\n    if (pst->type==0) {\n      rc = -1;\n      gafree (pst);\n      goto erret;\n    }\n    pgrv = pst->result.pgr;\n    ps  = pgrb->grid;\n    res = pgr->grid;\n    var = pgrv->grid;\n    psu  = pgrb->umask;\n    resu = pgr->umask;\n    varu = pgrv->umask;\n    for (i=0; i<size; i++) {\n      if (*psu!=0 && *varu!=0) {\n        blevt = blevi;\n        if (*ps<blev) blevt = *ps;\n        if (*resu==0) {\n\t  *res = *var * kgm * (blevt - top);\n\t  *resu = 1;\n\t}\n        else {\n\t  *res = *res + (*var * kgm * (blevt - top) );\n\t  *resu = 1;\n\t}\n      }\n      ps++; res++; var++;\n      psu++; resu++; varu++;\n    }\n  }\n  gafree (pst);\n\n  /* Release storage and return */\n\n  rc = 0;\n  pst->type = 1;\n  pst->result.pgr = pgr;\n  gagfre (pgrb);\n  return (0);\n\n  /* Error return */\n\nerret:\n\n  gagfre (pgrb);\n  gagfre (pgr);\n  return (rc);\n}\n\ngaint fftlp (struct gafunc *pfc, struct gastat *pst) {\nstruct gafile *pfi;\nstruct gagrid *pgr, *res;\ngaint size, rc, t1, t2, i, cont;\ngadouble gr1, gr2,*in, *out;\nchar *inu, *outu;\nsize_t sz;\n\n  /* Check for valid number of args       */\n\n  if (pfc->argnum != 1 ) {\n    gaprnt (0,\"Error from TLOOP:  Too many or too few args \\n\");\n    gaprnt (0,\"                   1 argument expected \\n\");\n    return (1);\n  }\n\n  /* If t is non-varying, treat this as a no-op.  */\n\n  if (pst->idim!=3 && pst->jdim!=3) {\n    rc = gaexpr(pfc->argpnt[0],pst);\n    return (rc);\n  }\n\n  /* Get start and end times in terms of grid space */\n\n  pfi = pst->pfid;\n  gr1 = t2gr(pfi->abvals[3], &pst->tmin);\n  gr2 = t2gr(pfi->abvals[3], &pst->tmax);\n  gr1 = ceil(gr1-0.001);\n  gr2 = floor(gr2+0.001);\n  t1 = (gaint)gr1;\n  t2 = (gaint)gr2;\n  if (t2<t1) t2 = t1;\n\n  /* Get 1st grid. */\n\n  gr2t(pfi->grvals[3], gr1, &pst->tmin);\n  if (pst->idim==3) {\n    pst->idim = pst->jdim;\n    pst->jdim = -1;\n  }\n  if (pst->jdim==3) pst->jdim = -1;\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    gafree (pst);\n    return (-1);\n  }\n  pgr = pst->result.pgr;\n\n  /* Check validity of 1st grid.  It should be a 1-D or a 0-D grid,\n     and it should not have a time-varying dimension.  */\n\n  if (pgr->jdim!=-1 || pgr->idim==3) {\n    gaprnt (0,\"Error from TLOOP: Internal logic check 36\\n\");\n    goto err1;\n  }\n\n  /* Create output grid */\n\n  size = sizeof(struct gagrid);\n  sz = size;\n  res = (struct gagrid *)galloc(sz,\"tloopres\");\n  if (res==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  TLOOP function\\n\");\n    goto err1;\n  }\n  size = 1+t2-t1;\n  size = size * pgr->isiz;\n  if (size>1) {\n    sz = size*sizeof(gadouble);\n    res->grid = (gadouble *)galloc(sz,\"tloopgr\");\n    if (res->grid==NULL) {\n      gaprnt (0,\"Memory Allocation Error:  TLOOP function\\n\");\n      gree(res,\"f423\");\n      goto err1;\n    }\n    sz = size*sizeof(char);\n    res->umask = (char *)galloc(sz,\"tloopgru\");\n    if (res->umask==NULL) {\n      gaprnt (0,\"Memory Allocation Error:  TLOOP function\\n\");\n      gree(res->grid,\"f424\");\n      gree(res,\"f425\");\n      goto err1;\n    }\n  } else {\n    res->grid = &(res->rmin);\n    res->umask = &(res->umin);\n  }\n\n  res->alocf = 0;\n  res->pfile = NULL;\n  res->undef = pgr->undef;\n  res->pvar  = NULL;\n  res->exprsn = NULL;\n  for (i=0;i<5;i++) {\n    res->dimmin[i] = 0;\n    res->dimmax[i] = 0;\n  }\n  res->dimmin[3] = t1;\n  res->dimmax[3] = t2;\n  res->jwrld = 0;\n  if (pgr->isiz>1) {\n    res->dimmin[pgr->idim] = pgr->dimmin[pgr->idim];\n    res->dimmax[pgr->idim] = pgr->dimmax[pgr->idim];\n    res->idim = pgr->idim;\n    res->iwrld = pgr->iwrld;\n    res->isiz = pgr->isiz;\n    res->igrab = pgr->igrab;\n    res->ilinr = pgr->ilinr;\n    res->ivals = pgr->ivals;\n    if (t1==t2) {\n      res->jdim = -1;\n      res->jsiz = 1;\n    } else {\n      res->jdim = 3;\n      res->jsiz = 1+t2-t1;\n      res->jvals = pfi->grvals[3];\n      res->jgrab = NULL;\n      res->jlinr = 1;\n    }\n  } else {\n    res->jdim = -1;\n    res->jsiz = 1;\n    if (t1==t2) {\n      res->idim = -1;\n      res->isiz = 1;\n    } else {\n      res->idim = 3;\n      res->isiz = 1+t2-t1;\n      res->ivals = pfi->grvals[3];\n      res->igrab = NULL;\n      res->ilinr = 1;\n    }\n  }\n\n  /* Loop and fill output grid.  */\n\n  cont = 1;\n  out = res->grid;\n  outu = res->umask;\n  while (cont) {\n    in = pgr->grid;\n    inu = pgr->umask;\n    for (i=0; i<pgr->isiz; i++) {\n      if (*inu==0) {\n\t*outu=0;\n      }\n      else {\n\t*out = *in;\n\t*outu = 1;\n      }\n      in++; inu++; out++; outu++;\n    }\n    gagfre(pgr);\n    t1++;\n    if (t1<=t2) {\n      gr2t(pfi->abvals[3], (gadouble)t1, &pst->tmin);\n      pst->tmax = pst->tmin;\n      rc = gaexpr(pfc->argpnt[0],pst);\n      if (rc) goto err2;\n      pgr = pst->result.pgr;\n    } else cont = 0;\n  }\n  pst->result.pgr = res;\n  return (0);\n\nerr1:\n  gagfre (pgr);\n  return (1);\n\nerr2:\n  gagfre(res);\n  return(1);\n}\n\ngaint ffelp (struct gafunc *pfc, struct gastat *pst) {\nstruct gafile *pfi;\nstruct gagrid *pgr, *res;\ngaint size, rc, e1, e2, i, cont;\ngadouble gr1, gr2,*in, *out;\nchar *inu, *outu;\nsize_t sz;\n\n  /* Check for valid number of args       */\n  if (pfc->argnum != 1 ) {\n    gaprnt (0,\"Error from ELOOP:  Too many or too few args \\n\");\n    gaprnt (0,\"                   1 argument expected \\n\");\n    return (1);\n  }\n\n  /* If e is non-varying, treat this as a no-op.  */\n  if (pst->idim!=4 && pst->jdim!=4) {\n    rc = gaexpr(pfc->argpnt[0],pst);\n    return (rc);\n  }\n\n  /* Get start and end E indices */\n  pfi = pst->pfid;\n  gr1 = pst->dmin[4];\n  gr2 = pst->dmax[4];\n  gr1 = ceil(gr1-0.001);\n  gr2 = floor(gr2+0.001);\n  e1 = (gaint)gr1;\n  e2 = (gaint)gr2;\n  if (e2<e1) e2 = e1;\n\n  /* Get 1st grid. */\n  pst->dmin[4] = e1;\n  if (pst->idim==4) {\n    pst->idim = pst->jdim;\n    pst->jdim = -1;\n  }\n  if (pst->jdim==4) pst->jdim = -1;\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    gafree (pst);\n    return (-1);\n  }\n  pgr = pst->result.pgr;\n\n  /* Check validity of 1st grid.  It should be a 1-D or a 0-D grid,\n     and it should not have a ensemble-varying dimension.  */\n  if (pgr->jdim!=-1 || pgr->idim==4) {\n    gaprnt (0,\"Error from ELOOP: Internal logic check 36\\n\");\n    goto err1;\n  }\n\n  /* Create output grid */\n  size = sizeof(struct gagrid);\n  sz = size;\n  res = (struct gagrid *)galloc(sz,\"eloopres\");\n  if (res==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  ELOOP function\\n\");\n    goto err1;\n  }\n  size = 1+e2-e1;\n  size = size * pgr->isiz;\n  if (size>1) {\n    sz = size*sizeof(gadouble);\n    res->grid = (gadouble *)galloc(sz,\"eloopgr\");\n    if (res->grid==NULL) {\n      gaprnt (0,\"Memory Allocation Error:  ELOOP function\\n\");\n      gree(res,\"f423e\");\n      goto err1;\n    }\n    sz = size*sizeof(char);\n    res->umask = (char *)galloc(sz,\"eloopgru\");\n    if (res->umask==NULL) {\n      gaprnt (0,\"Memory Allocation Error:  ELOOP function\\n\");\n      gree(res->grid,\"f424e\");\n      gree(res,\"f425e\");\n      goto err1;\n    }\n  } else {\n    res->grid = &(res->rmin);\n    res->umask = &(res->umin);\n  }\n\n  res->alocf = 0;\n  res->pfile = NULL;\n  res->undef = pgr->undef;\n  res->pvar  = NULL;\n  res->exprsn = NULL;\n  for (i=0;i<5;i++) {\n    res->dimmin[i] = 0;\n    res->dimmax[i] = 0;\n  }\n  res->dimmin[4] = e1;\n  res->dimmax[4] = e2;\n  res->jwrld = 0;\n  if (pgr->isiz>1) {\n    res->dimmin[pgr->idim] = pgr->dimmin[pgr->idim];\n    res->dimmax[pgr->idim] = pgr->dimmax[pgr->idim];\n    res->idim = pgr->idim;\n    res->iwrld = pgr->iwrld;\n    res->isiz = pgr->isiz;\n    res->igrab = pgr->igrab;\n    res->ilinr = pgr->ilinr;\n    res->ivals = pgr->ivals;\n    if (e1==e2) {\n      res->jdim = -1;\n      res->jsiz = 1;\n    } else {\n      res->jdim = 4;\n      res->jsiz = 1+e2-e1;\n      res->jvals = pfi->grvals[4];\n      res->jgrab = NULL;\n      res->jlinr = 1;\n    }\n  } else {\n    res->jdim = -1;\n    res->jsiz = 1;\n    if (e1==e2) {\n      res->idim = -1;\n      res->isiz = 1;\n    } else {\n      res->idim = 4;\n      res->isiz = 1+e2-e1;\n      res->ivals = pfi->grvals[4];\n      res->igrab = NULL;\n      res->ilinr = 1;\n    }\n  }\n\n  /* Loop and fill output grid.  */\n  cont = 1;\n  out = res->grid;\n  outu = res->umask;\n  while (cont) {\n    in = pgr->grid;\n    inu = pgr->umask;\n    for (i=0; i<pgr->isiz; i++) {\n      if (*inu==0) {\n\t*outu=0;\n      }\n      else {\n\t*out = *in;\n\t*outu = 1;\n      }\n      in++; inu++; out++; outu++;\n    }\n    gagfre(pgr);\n    e1++;\n    if (e1<=e2) {\n      pst->dmin[4] = e1;\n      pst->dmax[4] = pst->dmin[4];\n      rc = gaexpr(pfc->argpnt[0],pst);\n      if (rc) goto err2;\n      pgr = pst->result.pgr;\n    } else cont = 0;\n  }\n  pst->result.pgr = res;\n  return (0);\n\nerr1:\n  gagfre (pgr);\n  return (1);\n\nerr2:\n  gagfre(res);\n  return(1);\n}\n\ngaint ffmask (struct gafunc *pfc, struct gastat *pst) {\nstruct gastat pst2;\nstruct gastn *stn;\nstruct garpt *rpt;\nchar *ch,c1,c2;\ngaint rc,cnt,flag,i;\n\n  if (pfc->argnum!=2) {\n    gaprnt (0,\"Error from MASKOUT:  Too many or too few args \\n\");\n    gaprnt (0,\"                     Two arguments expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type!=0 || *(pfc->argpnt[1])!='\\'') {\n\n    pst2 = *pst;\n    rc = gaexpr(pfc->argpnt[1],&pst2);\n    if (rc) {\n      gafree (pst);\n      return (rc);\n    }\n\n    rc = gafopr (pst, &pst2, 13);\n    if (rc) {\n      gafree (pst);\n      gafree (&pst2);\n    }\n\n    /* Handle maskout of stn data by stid */\n\n  } else {\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      ch = pfc->argpnt[1]+1;\n      flag = 1; cnt = 0;\n      while (*ch!='\\'' && flag && cnt<8) {\n        if (*ch!='?') {\n          c1 = *ch;\n          c2 = rpt->stid[cnt];\n          i = c1;\n          if (i>64 && i<91) {i+=32; c1=i;}\n          i = c2;\n          if (i>64 && i<91) {i+=32; c2=i;}\n          if (c1 != c2) flag = 0;\n        }\n        ch++; cnt++;\n      }\n      if (flag==0) rpt->umask = 0; \n      rpt=rpt->rpt;\n    }\n  }\n  return (rc);\n}\n\n/* Given a grid and a set of stations, interpolate to the\n   stations and return the set of stations.                       */\n\ngaint ffg2s  (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble (*iconv) (gadouble *, gadouble);\ngadouble (*jconv) (gadouble *, gadouble);\ngadouble *ivars, *jvars, *p1, *p2, *p3, *p4;\ngadouble gi,gj,w1,w2,lon,lat,lnmin,lnmax,lnscl,ltmin,ltmax,ltscl;\ngadouble w3,w4,wm;\ngaint rc,ig,jg,nearn;\nchar *p1u, *p2u, *p3u, *p4u;\n \n\n  if (pfc->argnum<2 || pfc->argnum>4) {\n    gaprnt (0,\"Error from GR2STN:  Too many or too few args \\n\");\n    gaprnt (0,\"                    2 or 3 or 4 arguments expected \\n\");\n    return (1);\n  }\n\n  /* If we are doing the form of gr2stn that involves\n     interpolating to a 1-D profile or time series, \n     branch to a different routine */\n\n  if ( (pst->idim == -1 || pst->idim>1) && pst->jdim == -1) {\n    rc = ffg2s2 (pfc,pst);\n    return (rc);\n  }\n\n  /* Check for nearest neighbor flag -- instead of bilin interp from\n     grid to station, use the nearest grid point to the station. */\n\n  nearn = 0;\n  if (pfc->argnum==3 && strcmp(\"-n\",pfc->argpnt[2])==0) nearn = 1;\n  if (nearn) gaprnt (2,\"Notice: Using nearest neighbor instead of bilinear interpolation\\n\");\n\n  /* Evaluate the grid expression */\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type!=1) {\n    gaprnt (0,\"Error from GR2STN: 1st argument is not a grid\\n\");\n    gafree (pst);\n    return (1);\n  }\n  pgr = pst->result.pgr;\n  if (pgr->idim!=0 || pgr->jdim!=1) {\n    gaprnt (0,\"Error from GR2STN: 2-D grid must vary in X and Y\\n\");\n    gafree (pst);\n    return (1);\n  }\n  if (!pgr->ilinr || !pgr->jlinr) {\n    gaprnt (0,\"Error from GR2STN: 2-D grid dimensions must have linear scaling\\n\");\n    gafree (pst);\n    return (1);\n  }\n\n  /* Evaluate the station expression */\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) {\n    gagfre (pgr);\n    return (rc);\n  }\n  if (pst->type!=0) {\n    gaprnt (0,\"Error from GR2STN: 2nd argument is not a station expression\\n\");\n    gafree (pst);\n    gagfre (pgr);\n    return (1);\n  }\n  stn = pst->result.stn;\n\n  /* Set up scaling for converting lon-lat to grid units */\n  iconv = pgr->igrab;\n  ivars = pgr->ivals;\n  jconv = pgr->jgrab;\n  jvars = pgr->jvals;\n  lnmin = iconv(ivars,(gadouble)pgr->dimmin[0]);\n  lnmax = iconv(ivars,(gadouble)pgr->dimmax[0]);\n  ltmin = iconv(jvars,(gadouble)pgr->dimmin[1]);\n  ltmax = iconv(jvars,(gadouble)pgr->dimmax[1]);\n  lnscl = (lnmax-lnmin)/((gadouble)pgr->isiz-1);\n  ltscl = (ltmax-ltmin)/((gadouble)pgr->jsiz-1);\n\n  /* Now loop through each stn report, convert stn lat/lon to grid\n     units, then interpolate from grid to stn */\n\n  rpt = stn->rpt;\n  while (rpt!=NULL) {\n    lon = rpt->lon;\n    lat = rpt->lat;\n    if (lon<lnmin) lon+=360.0;\n    else if (lon>lnmax) lon-=360.0;\n    if (lon<lnmin || lon>=lnmax || lat<ltmin || lat>=ltmax) {\n      rpt->umask = 0;\n    } else {\n      gi = (lon-lnmin)/lnscl;\n      gj = (lat-ltmin)/ltscl;\n      ig = (gaint)gi; \n      jg = (gaint)gj;\n      p1 = pgr->grid + jg*pgr->isiz + ig;\n      p1u = pgr->umask + jg*pgr->isiz + ig;\n      p2 = p1+1;\n      p2u = p1u+1;\n      p3 = p2 + pgr->isiz;\n      p3u = p2u + pgr->isiz;\n      p4 = p1 + pgr->isiz;\n      p4u = p1u + pgr->isiz;\n      if (nearn) {                   /* nearest neighbor */\n        gi = gi - (gadouble)ig;\n        gj = gj - (gadouble)jg;\n        w1 = hypot(gi,gj);\n        w2 = hypot(1.0-gi,gj);\n        w3 = hypot(1.0-gi,1.0-gj);\n        w4 = hypot(gi,1.0-gj);\n        wm = 999.0;\n        if (w1<wm) {\n          wm = w1;\n          if (*p1u==0) rpt->umask = 0;\n          else rpt->val = *p1;\n        }\n        if (w2<wm) {\n          wm = w2;\n          if (*p2u==0) rpt->umask = 0;\n          else rpt->val = *p2;\n        }\n        if (w3<wm) {\n          wm = w3;\n          if (*p3u==0) rpt->umask = 0;\n          else rpt->val = *p3;\n        }\n        if (w4<wm) {\n          wm = w4;\n          if (*p4u==0) rpt->umask = 0;\n          else rpt->val = *p4;\n        }\n      } else {                        /* bilinear */\n        if (*p1u==0 || *p2u==0 || *p3u==0 || *p4u==0) {\n          rpt->umask = 0;\n        } else {\n          gi = gi - (gadouble)ig;\n          gj = gj - (gadouble)jg;\n/*\n Weighted by distance or use bilinear?  bilinear looks to be\n more valid to me......\n          w1 = 1.0 - hypot(gi,gj);\n          w2 = 1.0 - hypot(1.0-gi,gj);\n          w3 = 1.0 - hypot(1.0-gi,1.0-gj);\n          w4 = 1.0 - hypot(gi,1.0-gj);\n          if (w1<0.0) w1=0.0;\n          if (w2<0.0) w2=0.0;\n          if (w3<0.0) w3=0.0;\n          if (w4<0.0) w4=0.0;\n          rpt->val = *p1*w1 + *p2*w2 + *p3*w3 + *p4*w4;\n          rpt->val = rpt->val / (w1+w2+w3+w4);\n*/\n          w1 = *p1 + (*p2 - *p1)*gi;\n          w2 = *p4 + (*p3 - *p4)*gi;\n          rpt->val = w1 + (w2-w1)*gj;\n        }\n      }\n    }\n    rpt=rpt->rpt;\n  }\n  gagfre (pgr);\n  pst->type = 0;\n  pst->result.stn=stn;\n  return(0);\n}\n\n/* gr2stn where we interpolate to a lat-lon for \n   a profile or time series */\n\ngaint ffg2s2  (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgr, *pgr2;\nstruct gastn *stn, *stn2;\nstruct garpt *rpt;\ngadouble (*iconv) (gadouble *, gadouble);\ngadouble (*icnv) (gadouble *, gadouble);\ngadouble (*jcnv) (gadouble *, gadouble);\ngadouble *ivars, lon, lat, *grid, lev=0, val=0;\ngadouble *p1, *p2, *p3, *p4;\ngadouble gi,gj,w1,w2,w3,w4,wm;\ngaint i,rc,gr1,gr2,gr,ig,jg,nearn;\nchar *p1u, *p2u, *p3u, *p4u, umask=0;\nsize_t sz;\n\n  /* Get lat-lon to interpolate to.  This is either provided\n     as two string arguments, or as a single stn-data argument. */\n\n  iconv = NULL;\n  stn2 = NULL;\n  ivars = 0;\n  nearn = 0;\n  /* Evaluate the 2nd argument  */\n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    /* 2nd arg is station expression */\n    stn2 = pst->result.stn;\n    rpt = stn2->rpt;\n    if (rpt == NULL) {\n      printf(\"Error in GR2STN: 2nd arg returned a null result \\n\");\n      return(1);\n    }\n    lat = rpt->lat;\n    lon = rpt->lon;\n    /* Check for nearest neighbor flag in 3rd arg */\n    if (pfc->argnum==3 && strcmp(\"-n\",pfc->argpnt[2])==0) nearn = 1;\n  } \n  else {\n    /* 2nd & 3rd args are lon & lat */\n    pgr = pst->result.pgr;\n    if (pgr->idim!=-1 || pgr->jdim!=-1) {\n      gaprnt (0,\"Error in GR2STN:  2nd arg invalid\\n\");\n      return (1);\n    }\n    lon = pgr->rmin;\n    gafree(pst);\n    if (pfc->argnum<3) {\n      gaprnt(0,\"Error in GR2STN:  3rd Argument Required\\n\");\n      return (1);\n    }\n    if (getdbl(pfc->argpnt[2],&lat)==NULL) {\n      gaprnt (0,\"Error from GR2STN:  3rd argument invalid. \\n\");\n      return (1);\n    }\n    /* Check for nearest neighbor flag in 4th arg */\n    if (pfc->argnum==4 && strcmp(\"-n\",pfc->argpnt[3])==0) nearn = 1;\n  }\n  /* Evaluate the 1st argument */\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type!=1) {\n    gaprnt (0,\"Error from GR2STN: 1st argument is not a grid\\n\");\n    gafree (pst);\n    return (1);\n  }\n  pgr = pst->result.pgr;\n  if (pgr->idim==3) {\n    ivars = pgr->ivals;\n    gr1 = pgr->dimmin[3];\n    gr2 = pgr->dimmax[3];\n  } else if (pgr->idim==2) {\n    iconv = pgr->igrab;\n    ivars = pgr->ivals;\n    gr1 = pgr->dimmin[2];\n    gr2 = pgr->dimmax[2];\n  } else if (pgr->idim== -1) {\n    gr1 = 1;  \n    gr2 = 1;\n  } else if (pgr->idim==4) {\n    gaprnt(0,\"Error from GR2STN: 1-D grid may vary only in the Z or T dimension \\n\");\n    gafree (pst);\n    return (1);\n  } else {\n    gaprnt (0,\"Error from GR2STN:  Logic Error 4\\n\");\n    gafree (pst);\n    return (1);\n  }\n\n  /* Set up stn structure for the returned data */\n  sz = sizeof(struct gastn);\n  stn = (struct gastn *)galloc(sz,\"gr2stn\");\n  if (stn==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  Station Request Block \\n\");\n    gagfre (pgr);\n    return (1);\n  }\n  stn->rpt = NULL;\n  stn->rnum = 0;\n  stn->idim = pgr->idim;\n  stn->jdim = pgr->jdim;\n  stn->undef = pgr->undef;\n  stn->pvar = NULL;\n  stn->dmin[0] = lon;  stn->dmax[0] = lon;\n  stn->dmin[1] = lat;  stn->dmax[1] = lat;\n  stn->rflag = 0;\n  stn->radius = 1.0;\n  stn->sflag = 1;\n  if (stn2) {\n    for (i=0; i<8; i++) stn->stid[i] = stn2->stid[i];\n  } else {\n    for (i=0; i<8; i++) stn->stid[i] = 'x';\n  }\n  sz = sizeof(gadouble)*8;\n  stn->tvals = (gadouble *)galloc(sz,\"gr2stnt\");\n  if (stn->tvals==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  Station Request Block \\n\");\n    gree(stn,\"f426\");\n    gagfre (pgr);\n    return (1);\n  }\n  stn->jdim = -1;\n  if (pgr->idim==3) {                  /* time series */\n    for (i=0; i<8; i++) *(stn->tvals+i) = *(ivars+i);\n    stn->tmin = gr1; stn->tmax = gr2;\n    stn->dmin[2] = pst->dmin[2];\n    stn->dmax[2] = pst->dmin[2];\n    stn->idim = 3;\n  } else if (pgr->idim== -1) {         /* single point */\n    stn->dmin[2] = pst->dmin[2];\n    stn->dmax[2] = pst->dmin[2];\n    stn->tmin = 1; stn->tmax = 1;\n    *(stn->tvals) = pst->tmin.yr;\n    *(stn->tvals+1) = pst->tmin.mo;\n    *(stn->tvals+2) = pst->tmin.dy;\n    *(stn->tvals+3) = pst->tmin.hr;\n    *(stn->tvals+4) = pst->tmin.mn;\n    *(stn->tvals+5) = 0.0;\n    *(stn->tvals+6) = 1.0;\n    *(stn->tvals+7) = -999.9;\n  } else {                             /* vertical profile */\n    stn->dmin[2] = gr1;  \n    stn->dmax[2] = gr2;\n    stn->tmin = 1; \n    stn->tmax = 1;\n    *(stn->tvals) = pst->tmin.yr;\n    *(stn->tvals+1) = pst->tmin.mo;\n    *(stn->tvals+2) = pst->tmin.dy;\n    *(stn->tvals+3) = pst->tmin.hr;\n    *(stn->tvals+4) = pst->tmin.mn;\n    *(stn->tvals+5) = 0.0;\n    *(stn->tvals+6) = 1.0;\n    *(stn->tvals+7) = -999.9;\n  }\n\n  if (nearn) gaprnt (2,\"Notice: Using nearest neighbor instead of bilinear interpolation\\n\");\n\n  pst->idim = 0;\n  pst->jdim = 1;\n  pst->dmin[0] = lon;\n  pst->dmax[0] = lon + 0.1;\n  pst->dmin[1] = lat;\n  pst->dmax[1] = lat + 0.1;\n  /* loop over grid points in the profile/time series */\n  for (gr=gr1; gr<=gr2; gr++) { \n    if (pgr->idim==2) {\n      lev = iconv(ivars,(gadouble)gr);\n      pst->dmin[2] = lev;\n      pst->dmax[2] = lev;\n    } else if (pgr->idim==3) {\n      gr2t (ivars, (gadouble)gr, &(pst->tmin));\n      pst->tmax = pst->tmin;\n    }\n    rc = gaexpr(pfc->argpnt[0],pst);\n    if (rc) {\n      gagfre(pgr);\n      return (rc);\n    }\n    pgr2 = pst->result.pgr;\n    grid = pgr2->grid;\n    icnv = pgr2->iabgr;\n    jcnv = pgr2->jabgr;\n    gi = icnv(pgr2->iavals,lon) - (gadouble)pgr2->dimmin[0];\n    gj = jcnv(pgr2->javals,lat) - (gadouble)pgr2->dimmin[1];\n    ig = (gaint)gi; \n    jg = (gaint)gj;\n    p1 = pgr2->grid + jg*pgr2->isiz + ig;\n    p1u = pgr2->umask + jg*pgr2->isiz + ig;\n    p2 = p1+1;\n    p2u = p1u+1;\n    p3 = p2 + pgr2->isiz;\n    p3u = p2u + pgr2->isiz;\n    p4 = p1 + pgr2->isiz;\n    p4u = p1u + pgr2->isiz;\n    if (nearn) {                   /* nearest neighbor */\n      gi = gi - (gadouble)ig;\n      gj = gj - (gadouble)jg;\n      w1 = hypot(gi,gj);\n      w2 = hypot(1.0-gi,gj);\n      w3 = hypot(1.0-gi,1.0-gj);\n      w4 = hypot(gi,1.0-gj);\n      wm = 999.0;\n      if (w1<wm) {\n\twm = w1;\n\tif (*p1u==0) umask = 0;\n\telse {umask = 1; val = *p1;}\n      }\n      if (w2<wm) {\n\twm = w2;\n\tif (*p2u==0) umask = 0;\n\telse {umask = 1; val = *p2;}\n      }\n      if (w3<wm) {\n\twm = w3;\n\tif (*p3u==0) umask = 0;\n\telse {umask = 1; val = *p3;}\n      }\n      if (w4<wm) {\n\twm = w4;\n\tif (*p4u==0) umask = 0;\n\telse {umask = 1; val = *p4;}\n      }\n    } else {                        /* bilinear */ \n      if (*p1u==0 || *p2u==0 || *p3u==0 || *p4u==0) {\n\tumask = 0;\n      } else {\n\tgi = gi - (gadouble)ig;\n\tgj = gj - (gadouble)jg;\n\tw1 = *p1 + (*p2 - *p1)*gi;\n\tw2 = *p4 + (*p3 - *p4)*gi;\n\tval = w1 + (w2-w1)*gj;\n\tumask = 1;\n      }\n    }\n\n    rpt = gaarpt (stn);\n    if (rpt==NULL) {\n      gaprnt (0,\"Memory Allocation Error:  Station Block \\n\");\n      gagfre(pgr);  \n      gafree(pst); \n      gasfre(stn);\n      return (1);\n    }\n    rpt->lat = lat;\n    rpt->lon = lon;\n    if (pgr->idim==2) { rpt->lev = lev; rpt->tim = 1; }\n    else { rpt->lev = stn->dmin[2]; rpt->tim = gr; }\n    if (umask==1) {\n      rpt->umask = 1;\n      rpt->val = val;\n    }\n    else {\n      rpt->umask = 0;\n    }  \n    for (i=0; i<8; i++) *(rpt->stid+i) = *(stn->stid+i);\n    stn->rnum++;\n    gafree(pst);\n  }\n\n  gagfre(pgr);  /* Release the grid from evaluating the first argument */\n  pst->result.stn = stn;\n  pst->type = 0;\n  pst->idim = stn->idim;\n  pst->jdim = -1;\n  return (0);\n}\n\ngaint ffclgr (struct gafunc *pfc, struct gastat *pst) {\n  struct gaclct *clct, *clct0;\n  struct gastn *stn;\n  struct garpt *rpt;\n  struct gagrid *pgr=NULL;\n  gadouble *levs, lev, vlo, vhi, uu=0, *gr=NULL;\n  gadouble *iv=NULL,*jv=NULL,diff,lld,lhd,llo,lhi,xdiff;\n  gaint i,j,cnt,lcnt=0,scnt,flag,clnm,dim,lflg,ucnt;\n  gaint noundef,rev=0;\n  char *gru=NULL;\n  size_t sz;\n\n  lflg = 1;\n  ucnt = 10;\n\n  /* set noundef=1 to use only defined points in vertical interploation\n     default is 0 */\n  noundef=0;\n  \n  if (pfc->argnum>3) {\n    gaprnt (0,\"Error from COLL2GR:  Too many args \\n\");\n    gaprnt (0,\"                     One to three arguments expected \\n\");\n    return (1);\n  }\n  if (intprs(pfc->argpnt[0],&clnm)==NULL) {\n    gaprnt (0,\"Error from COLL2GR:  1st argument must be an integer\\n\");\n    return(1);\n  }\n  if (pfc->argnum>1) {\n    if (cmpwrd(\"-u\",pfc->argpnt[1])) lflg = 2;\n    else if (intprs(pfc->argpnt[1],&i) != NULL) ucnt = i;\n    else gaprnt (1,\"COLL2GR Warning:  2nd arg Invalid; Ignored\\n\");\n  }\n  /* JMA this option not documented */\n  if (pfc->argnum>2) {\n    if (cmpwrd(\"-n0\",pfc->argpnt[2])) noundef=0;\n    else if (cmpwrd(\"-n1\",pfc->argpnt[2])) noundef=1;\n    else gaprnt (1,\"COLL2GR Warning:  3nd arg Invalid; Ignored\\n\");\n  }\n  clct0 = *(pst->pclct+clnm);\n  clct = clct0;\n  if (clct==NULL) {\n     snprintf(pout,1255,\"Error from COLL2GR:  Collection %i empty\\n\",clnm);\n     gaprnt (0,pout);\n     return (1);\n  }\n\n  /* Count number of soundings, number of levels, and check dimension validity */\n  cnt = 0;\n  scnt = 0;\n  dim = -1;\n  while (clct) {\n    stn = clct->stn;\n    cnt += stn->rnum;\n    scnt += 1;\n    if (dim==-1) dim = stn->idim;\n    if (dim != stn->idim) dim = -999;\n    clct = clct->forw;\n  }\n  if (dim == -999 || dim != pst->jdim || pst->idim != 0 || dim<2 || dim>3 ) {\n    gaprnt (0,\"Error from COLL2GR:  Invalid dimension environment\\n\");\n    return (1);\n  }\n  if (dim==3) {\n    gaprnt  (0,\"COLL2GR does not yet support time slices\\n\");\n    return (1);\n  }\n\n\n  /* Obtain sorted list of levels or times, depending on\n     what sort of interpolation was requested */\n  if (lflg==1) cnt = ucnt;\n  sz = sizeof(gadouble)*cnt;\n  levs = (gadouble *)galloc(sz,\"clgrlevs\");\n  if (levs==NULL) {\n    gaprnt (0,\"Error from COLL2GR: failled to allocate memory for levels \\n\");\n    goto err;\n  }\n\n  if (lflg==1) {\n    /* fixed number of levels */\n    vlo = pst->dmin[2];\n    vhi = pst->dmax[2];\n    uu = (vhi - vlo)/((gadouble)cnt-1.0);\n    lev = vlo;\n    for (i=0; i<cnt; i++) {\n      *(levs+i) = lev;\n      lev += uu;\n    }\n    lcnt = cnt;\n  } \n  else if (lflg==2) {\n    /* union of all levels  */\n    if (pst->dmin[2] < pst->dmax[2]) rev=1;\n    diff = fabs(pst->dmin[2] - pst->dmax[2])/1e4;\n    lcnt = 0;\n    clct = clct0;\n    while (clct) {\n      stn = clct->stn;\n      rpt = stn->rpt;\n      while (rpt) {\n        lev = rpt->lev;\n        i = 0;\n        flag = 1;\n\t/* don't use this level if the data value is undefined */\n\tif (noundef && (rpt->umask == 0) ) flag = 0;\n\t/* don't use this level if out of range */\n        if ((lev > pst->dmin[2] || lev < pst->dmax[2]) && rev==0) flag = 0;\n        if ((lev < pst->dmin[2] || lev > pst->dmax[2]) && rev==1) flag = 0;\n        while (i<lcnt && flag) {\n          if (fabs(*(levs+i)-lev)<diff) {\n            flag = 0;\n            break;\n          }\n          if (*(levs+i) < lev && rev==0) break;\n          if (*(levs+i) > lev && rev==1) break;\n          i = i + 1;\n        }\n        if (flag) {\n          if (i<lcnt) {\n            for (j=lcnt; j>i; j--) *(levs+j) = *(levs+j-1);\n          }\n          *(levs+i) = lev;\n          lcnt++;\n        }\n        rpt = rpt->rpt;\n      }\n      clct = clct->forw;\n    }\n  }\n\n  /* Allocate and fill the interpolated grid */\n  sz = sizeof(gadouble)*lcnt*scnt;\n  gr = (gadouble *)galloc(sz,\"col2grgr\");\n  if (gr==NULL) {\n    gaprnt (0,\"Error from COLL2GR: failled to allocate memory for collection grid \\n\");\n    goto err;\n  }\n  sz = sizeof(char)*lcnt*scnt;\n  gru = (char *)galloc(sz,\"col2grgru\");\n  if (gru==NULL) {\n    gaprnt (0,\"Error from COLL2GR: failled to allocate memory for collection umask \\n\");\n    goto err;\n  }\n  clct = clct0;\n  i = 0;\n  while (clct) {\n    stn = clct->stn;\n    if (i==0) uu = stn->undef;\n    for (j=0; j<lcnt; j++) {\n      lev = *(levs+j);\n      rpt = stn->rpt;\n      lld = 9.99e33;\n      lhd = 9.99e33;\n      llo = lev; lhi = lev;\n      vlo = stn->undef;\n      vhi = stn->undef;\n      flag = 0;\n      while (rpt) {\n        if (dequal(rpt->lev,lev,1.0e-8)==0) {\n\t  /* level in rpt matches level in grid, no need to interpolate */\n          flag = 1;\n          break;\n        }\n        if (rpt->lev<lev) {\n\t  if (noundef) {\n\t    if (lev-rpt->lev<lld && (rpt->umask != 0) ) {\n\t      lld = lev-rpt->lev;\n\t      llo = rpt->lev;\n\t      vlo = rpt->val;\n\t    }\n\t  } else {\n\t    if (lev-rpt->lev<lld) {\n\t      lld = lev-rpt->lev;\n\t      llo = rpt->lev;\n\t      vlo = rpt->val;\n\t    }\n          }\n        } else {\n\t  if(noundef) {\n\t    if (rpt->lev-lev<lhd && (rpt->umask != 0) ) {\n\t      lhd = rpt->lev-lev;\n\t      lhi = rpt->lev;\n\t      vhi = rpt->val;\n\t    }\n\t  } else {\n\t    if (rpt->lev-lev<lhd) {\n\t      lhd = rpt->lev-lev;\n\t      lhi = rpt->lev;\n\t      vhi = rpt->val;\n\t    }\n\t  }\n\t}\n        rpt = rpt->rpt;\n      }\n      if (flag) {\n\t*(gr+j*scnt+i) = rpt->val;\n\t*(gru+j*scnt+i) = rpt->umask;\n      }\n      else {\n        if (dequal(vhi,stn->undef,1.0e-8)==0 || dequal(vlo,stn->undef,1.0e-8)==0) {\n          *(gru+j*scnt+i) = 0;\n        } else {\n          *(gr+j*scnt+i) = vlo + (vhi-vlo)*(lev-llo)/(lhi-llo);\n          *(gru+j*scnt+i) = 1;\n        }\n      }\n    }\n    clct = clct->forw;\n    i++;\n  }\n\n  /* Now create the grid structure for our new grid and\n     chain it in all the right places */\n\n  sz = sizeof(struct gagrid);\n  pgr = (struct gagrid *)galloc(sz,\"col2grpgr\");\n  if (pgr==NULL) {\n    gaprnt (0,\"Error from COLL2GR: failled to allocate memory for gagrid structure\\n\");\n    goto err;\n  }\n\n  pgr->grid = gr;\n  pgr->umask = gru;\n  pgr->undef = uu;\n  pgr->isiz = scnt;\n  pgr->jsiz = lcnt;\n  pgr->idim  = 0;  /* arbitrary */\n  pgr->jdim  = dim;\n  pgr->iwrld = 1; pgr->jwrld = 0;\n  pgr->dimmin[0] = 1; pgr->dimmax[0] = scnt;\n  pgr->dimmin[2] = 1; pgr->dimmax[2] = lcnt;\n  pgr->exprsn = NULL;\n  pgr->ilinr = 0;\n  pgr->jlinr = 0;\n  sz = sizeof(gadouble)*(scnt+2);\n  iv = (gadouble *)galloc(sz,\"col2griv\");\n  if (iv==NULL) {\n    gaprnt (0,\"Error from COLL2GR: failled to allocate memory for scnt \\n\");\n    goto err;\n  }\n  sz = sizeof(gadouble)*(lcnt+2);\n  jv = (gadouble *)galloc(sz,\"col2grjv\");\n  if (jv==NULL) {\n    gaprnt (0,\"Error from COLL2GR: failled to allocate memory for lcnt \\n\");\n    goto err;\n  }\n  *iv = (gadouble)scnt;\n  *jv = (gadouble)lcnt;\n  xdiff = pst->dmax[0] - pst->dmin[0];\n  xdiff = xdiff / ( (gadouble)(scnt-1) );\n  for (i=1; i<=scnt; i++) *(iv+i) = pst->dmin[0] + (gadouble)(i-1) * xdiff;\n  for (i=0; i<lcnt; i++) *(jv+i+1) = *(levs+i);\n  *(jv+lcnt+1) = -999.9;\n  *(iv+scnt+1) = -999.9;\n  pgr->ivals = iv;\n  pgr->jvals = jv;\n  pgr->iavals = pgr->ivals;\n  pgr->javals = pgr->jvals;\n  pgr->igrab = gr2lev;\n  pgr->jgrab = gr2lev;\n  pgr->iabgr = lev2gr;\n  pgr->jabgr = lev2gr;\n  pgr->alocf = 1; \n\n  pst->type = 1;\n  pst->result.pgr = pgr;\n  gree(levs,\"f428\"); \n  return (0);\n\n err:\n  if (levs) gree(levs,\"f429\");\n  if (gr) gree(gr,\"f430\");\n  if (gru) gree(gru,\"f431\");\n  if (pgr) gagfre(pgr); \n  if (iv) gree(iv,\"f432\");\n  if (jv) gree(jv,\"f433\");\n  return (1);\n\n\n}\n\n/* Given a grid and a set of stations, interpolate to the\n   grid using cressman technique and return the grid.             */\n\nstatic gadouble rads[5] = {10.0, 7.0, 4.0, 2.0, 1.0};\n\ngaint ffoacr (struct gafunc *pfc, struct gastat *pst) {\nstruct gastat pst2;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble (*iconv) (gadouble *, gadouble);\ngadouble (*jconv) (gadouble *, gadouble);\ngadouble *ivars, *jvars, *gr, *nw, *newbuf, *p1, *p2, *p3, *p4;\ngadouble lon,lat,lnmin,lnmax,lnscl,ltmin,ltmax,ltscl;\ngadouble sum;\ngadouble e1,e2,e,wsum,x,y,xmin,xmax,ymin,ymax,d,d2,rad,rad2,w;\ngaint *flgbuf, *ii;\ngaint rc,i,j,p,siz,icnt,irad,radflg;\ngadouble fgsum=-1e20;\ngadouble radii[30];\nchar sumu,*gru,*nwu,*newbufu; \nsize_t sz;\n\n  if (pfc->argnum<2) {\n    gaprnt (0,\"Error from OACRES:  Too many or too few args \\n\");\n    gaprnt (0,\"                    Two arguments expected \\n\");\n    return (1);\n  }\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    gaprnt (0,\"Error from OACRES: 1st argument must be a grid\\n\");\n    gafree (pst);\n    return (1);\n  }\n  pgr = pst->result.pgr;\n  if (pgr->idim!=0 || pgr->jdim!=1) {\n    gaprnt (0,\"Error from OACRES: Grid must vary in X, Y\\n\");\n    gafree (pst);\n    return (1);\n  }\n  if (!pgr->ilinr || !pgr->jlinr) {\n    gaprnt (0,\"Error from OACRES: Grid must have linear scaling\\n\");\n    gafree (pst);\n    return (1);\n  }\n  pst2 = *pst;\n  rc = gaexpr(pfc->argpnt[1],&pst2);\n  if (rc) {\n    gafree (pst);\n    return (rc);\n  }\n  if (pst2.type!=0) {\n    gaprnt (0,\"Error from OACRES: 2nd argument must be stns\\n\");\n    gafree (&pst2);\n    gafree (pst);\n    return (1);\n  }\n  stn = pst2.result.stn;\n\n  /* Check for user provided radii */\n  irad = 5;\n  radflg = 0;\n  if (pfc->argnum>2) {\n    radflg = 1;\n    irad = pfc->argnum-2;\n    if (irad>30) {\n      gaprnt (1,\"Warning from OACRES:  Using 30 pass radii\\n\");\n      irad = 30;\n    }\n    for (i=0; i<irad; i++) {\n      if (getdbl(pfc->argpnt[i+2],radii+i)==NULL) {\n        gaprnt (0,\"Error from OACRES:  Radii must be constant\\n\");\n        gaprnt (0,\"                    Using default radii\\n\");\n        radflg = 0;\n        i = irad+1;\n      } else {\n\tif (radii[i]<0.0) {\n\t  i++;\n\t  if(irad != i+1) {\n\t    gaprnt (0,\"Error from OACRES:  Improper setting of 1st guess\\n\");\n\t    gaprnt (0,\"                    Must provide the value or make the value the last argument\\n\");\n\t    gaprnt (0,\"                    Using default radii\\n\");\n\t    irad=5;\n\t    radflg=0;\n            i=irad+1;\n\t  } else if (getdbl(pfc->argpnt[i+2],&fgsum)==NULL) {\n\t    gaprnt (0,\"Error from OACRES:  Improper setting of 1st guess\\n\");\n\t    gaprnt (0,\"                    Bad value\\n\");\n\t    gaprnt (0,\"                    Using default radii\\n\");\n\t    irad=5;\n\t    radflg=0;\n\t    fgsum=-1e20;\n            i=irad+2;\n\t  } else {\n\t    if(irad<1) radflg=0;\n\t    i=irad+2;\n\t    irad=irad-2;\n\t  }\n\n\t}\n        if ((radii[i]<0.01 || radii[i]>50.0) && i<irad) {\n          gaprnt (0,\"Error from OACRES:  Radii must be 0<radii<50\\n\");\n          gaprnt (0,\"                    Using default radii\\n\");\n          radflg = 0;\n          i = irad+1;\n        }\n      }\n    }\n  }\n\n  /* Set up scaling for converting lon-lat to grid units */\n\n  iconv = pgr->igrab;\n  ivars = pgr->ivals;\n  jconv = pgr->jgrab;\n  jvars = pgr->jvals;\n  lnmin = iconv(ivars,(gadouble)pgr->dimmin[0]);\n  lnmax = iconv(ivars,(gadouble)pgr->dimmax[0]);\n  ltmin = iconv(jvars,(gadouble)pgr->dimmin[1]);\n  ltmax = iconv(jvars,(gadouble)pgr->dimmax[1]);\n  lnscl = (lnmax-lnmin)/((gadouble)pgr->isiz-1);\n  ltscl = (ltmax-ltmin)/((gadouble)pgr->jsiz-1);\n\n  /* Now loop through each stn report and convert stn lat/lon to grid coordinates */\n  rpt = stn->rpt;\n  sum = 0.0;\n  icnt = 0;\n  while (rpt!=NULL) {\n    lon = rpt->lon;\n    lat = rpt->lat;\n    if (lon<lnmin) lon+=360.0;\n    else if (lon>lnmax) lon-=360.0;\n    rpt->lon = (lon-lnmin)/lnscl;\n    rpt->lat = (lat-ltmin)/ltscl;\n    i = (gaint)rpt->lon;\n    j = (gaint)rpt->lat;\n    if (i<0 || i>(pgr->isiz-1) || \n\tj<0 || j>(pgr->jsiz-1) ||\n        rpt->umask==0) \n      rpt->work = -999;\n    else {\n      rpt->work = j*pgr->isiz + i;\n      sum = sum + rpt->val;\n      icnt++;\n      i = (gaint)rpt->lon;\n      j = (gaint)rpt->lat;\n      rpt->lev = rpt->lon - (gadouble)i;\n      rpt->tim = rpt->lat - (gadouble)j;\n    }\n    rpt=rpt->rpt;\n  }\n  if (icnt<2) {\n    gaprnt (1,\"Warning from OACRES:  Less than two stations\\n\");\n    gaprnt (1,\"    Grid will be all missing values\\n\");\n    sumu = 0;\n  } \n  else {\n    sum = sum/((gadouble)icnt);\n    sumu = 1;\n  }\n\n  /* Need some buffer space */\n  siz = pgr->isiz * pgr->jsiz;\n  sz = sizeof(gadouble)*siz;\n  newbuf = (gadouble *)galloc(sz,\"oacrbuf\");\n  if (newbuf==NULL) {\n    goto err;\n  }\n  sz = sizeof(char)*siz;\n  newbufu = (char *)galloc(sz,\"oacrbufu\");\n  if (newbufu==NULL) {\n    gree(newbuf,\"f434\");\n    goto err;\n  }\n  sz = sizeof(gaint)*siz;\n  flgbuf = (gaint *)galloc(sz,\"oacrbuff\");\n  if (flgbuf==NULL) {\n    gree(newbuf,\"f435\");\n    gree(newbufu,\"f436\");\n    goto err;\n  }\n\n  /* Initial grid values are average of station reports */\n  if (fabs(fgsum) < 1e20 ) {\n    sum=fgsum;\n    sumu=1;\n  }\n  gr = pgr->grid;\n  gru = pgr->umask;\n  nw = newbuf;\n  nwu = newbufu;\n  ii = flgbuf;\n  for (i=0; i<siz; i++) {\n    if (sumu==1) {\n      *gr = sum; *gru = 1;\n      *nw = sum; *nwu = 1;\n    }\n    else {\n      *gru = 0;\n      *nwu = 0;\n    }\n    *ii = 0;\n    ii++; \n    gr++; gru++; \n    nw++; nwu++;\n  }\n  if (sumu==0) goto retrn;\n\n  /* Perform the objective analysis */\n  for (p=0; p<irad; p++) {\n    if (radflg) rad = radii[p];\n    else rad = rads[p];\n    rad2 = rad*rad;\n    gr = pgr->grid;\n    nw = newbuf;\n    nwu = newbufu;\n    ii = flgbuf;\n    for (j=0; j<pgr->jsiz; j++) {\n      y = (gadouble)j;\n      ymin = y - rad;\n      ymax = y + rad;\n      for (i=0; i<pgr->isiz; i++) {\n        x = (gadouble)i;\n        xmin = x - rad;\n        xmax = x + rad;\n        sum = 0.0; wsum = 0.0;\n        rpt = stn->rpt;\n        while (rpt) {\n          if (rpt->work==-999 || \n\t      rpt->lon < xmin || rpt->lon > xmax ||\n              rpt->lat < ymin || rpt->lat > ymax ||\n              (d = hypot(x-rpt->lon,y-rpt->lat)) > rad ) rpt = rpt->rpt;\n          else {\n            d2 = d*d;\n            p1 = pgr->grid + rpt->work;\n            p2 = p1+1;\n            p4 = p1 + pgr->isiz;\n            p3 = p4 + 1;\n            e1 = *p1 + ( (*p2 - *p1)*rpt->lev );\n            e2 = *p4 + ( (*p3 - *p4)*rpt->lev );\n            e = e1 + ( (e2 - e1)*rpt->tim );\n            e = rpt->val - e;\n            w = (rad2-d2)/(rad2+d2);\n            sum += e*w;\n            wsum += w;\n            rpt = rpt->rpt;\n          }\n        }\n        if (wsum>1e-6) {\n\t  *nw = *gr + sum/wsum;\n\t  *nwu = 1; \n\t}\n        else if (p==2) *ii = 1;\n        nw++; nwu++; gr++; ii++;\n      }\n    }\n    nw  = newbuf;\n    nwu = newbufu;\n    gr = pgr->grid;\n    gru = pgr->umask;\n    for (i=0; i<siz; i++) {\n      if (*nwu==1) {\n\t*gr = *nw;\n\t*gru = 1;\n      }\n      else {\n\t*gru = 0;\n      }\n      gr++; gru++; nw++; nwu++;\n    }\n  }\n  ii = flgbuf;\n  gru = pgr->umask;\n  for (i=0; i<siz; i++) {\n    if (*ii) *gru = 0;\n    gru++; ii++;\n  }\n\n  gr  = pgr->grid;\n  gru = pgr->umask;\n\nretrn:\n  gafree (&pst2);\n  gree(newbuf,\"f437\");\n  gree(newbufu,\"f438\");\n  gree(flgbuf,\"f439\");\n  return(0);\n\nerr:\n  gaprnt (0,\"Error in OACRES:  Unable to allocate memory\\n\");\n  gafree (&pst2);\n  gafree (pst);\n  return (1);\n}\n\ngaint ffoabn (struct gafunc *pfc, struct gastat *pst) {\n  struct gastat pst2;\n  struct gagrid *pgr;\n  struct gastn *stn;\n  struct garpt *rpt;\n  gadouble (*iconv) (gadouble *, gadouble);\n  gadouble (*jconv) (gadouble *, gadouble);\n  gadouble *ivars, *jvars, *gr;\n  gadouble lon,lat,lnmin,lnmax,lnscl,ltmin,ltmax,ltscl;\n  gaint *cnt, *ii;\n  gaint rc,i,j,siz,icnt,cntflg;\n  char *ch, *gru;\n  size_t sz;\n  \n  if (pfc->argnum<2) {\n    gaprnt (0,\"Error from OABIN:  Too many or too few args \\n\");\n    gaprnt (0,\"                   Two arguments expected \\n\");\n    return (1);\n  }\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    gaprnt (0,\"Error from OABIN: 1st argument must be a grid\\n\");\n    gafree (pst);\n    return (1);\n  }\n  pgr = pst->result.pgr;\n  if (pgr->idim!=0 || pgr->jdim!=1) {\n    gaprnt (0,\"Error from OABIN: Grid must vary in X, Y\\n\");\n    gafree (pst);\n    return (1);\n  }\n  if (!pgr->ilinr || !pgr->jlinr) {\n    gaprnt (0,\"Error from OABIN: Grid must have linear scaling\\n\");\n    gafree (pst);\n    return (1);\n  }\n  pst2 = *pst;\n  rc = gaexpr(pfc->argpnt[1],&pst2);\n  if (rc) {\n    gafree (pst);\n    return (rc);\n  }\n  if (pst2.type!=0) {\n    gaprnt (0,\"Error from OABIN: 2nd argument must be stns\\n\");\n    gafree (&pst2);\n    gafree (pst);\n    return (1);\n  }\n  stn = pst2.result.stn;\n\n  cntflg = 0;\n  if (pfc->argnum>2) {\n    ch = pfc->argpnt[2];\n    if      (*ch == '-' && *(ch+1) == 'c') cntflg = 1;\n    else if (*ch == '-' && *(ch+1) == 'f') cntflg = 2;\n    else gaprnt (1,\"Warning from OABIN: Invalid flag.  Ignored.\\n\");\n  }\n\n  /* Set up scaling for converting lon-lat to grid units */\n  iconv = pgr->igrab;\n  ivars = pgr->ivals;\n  jconv = pgr->jgrab;\n  jvars = pgr->jvals;\n  lnmin = iconv(ivars,(gadouble)pgr->dimmin[0]);\n  lnmax = iconv(ivars,(gadouble)pgr->dimmax[0]);\n  ltmin = iconv(jvars,(gadouble)pgr->dimmin[1]);\n  ltmax = iconv(jvars,(gadouble)pgr->dimmax[1]);\n  lnscl = (lnmax-lnmin)/((gadouble)pgr->isiz-1);\n  ltscl = (ltmax-ltmin)/((gadouble)pgr->jsiz-1);\n\n  /* Now loop through each stn report and convert stn lat/lon to grid  coordinates */\n  rpt = stn->rpt;\n  icnt = 0;\n  while (rpt!=NULL) {\n    lon = rpt->lon;\n    lat = rpt->lat;\n    if (lon<lnmin) lon+=360.0;\n    else if (lon>lnmax) lon-=360.0;\n    rpt->lon = (lon-lnmin)/lnscl;\n    rpt->lat = (lat-ltmin)/ltscl;\n    /* nearest grid point center */\n    i = (gaint)(rpt->lon+0.5);\n    j = (gaint)(rpt->lat+0.5);\n    if (i<0 || i>(pgr->isiz-1) || \n\tj<0 || j>(pgr->jsiz-1) ||\n        rpt->umask==0) \n      rpt->work = -999;\n    else {\n      rpt->work = j*pgr->isiz + i;\n    }\n    rpt=rpt->rpt;\n  }\n\n  /* cnt space */\n  siz = pgr->isiz * pgr->jsiz;\n  sz = sizeof(gaint)*siz;\n  cnt = (gaint *)galloc(sz,\"oabincnt\");\n  if (cnt==NULL) {\n    goto err;\n  }\n\n  /* initialize cnt and grid to 0.0 for summing */\n  gr=pgr->grid;\n  for(i=0;i<siz;i++) {\n    *gr=0.0;\n    gr++;\n  }\n  ii = cnt;\n  for (i=0; i<siz; i++) {\n    *ii = 0;\n    ii++;\n  }\n\n  /* Perform the bin analysis */\n  rpt = stn->rpt;\n  while (rpt) {\n    gr = pgr->grid;\n    ii = cnt;\n    if (rpt->work==-999) {\n      rpt = rpt->rpt;\n    } \n    else {\n      gr += rpt->work;\n      ii += rpt->work;\n      if( (cntflg <= 1) || (cntflg == 2 && *ii <= 1)) {\n\t*gr += rpt->val;\n\t*ii += 1;\n      }\n      rpt = rpt->rpt;\n    }\n  }\n  \n  gr=pgr->grid;\n  gru=pgr->umask;\n  ii=cnt;\n  for(i=0;i<siz;i++) {\n    if(*ii > 0) {\n      *gr=(*gr)/(*ii);\n      if(cntflg==1) *gr=(gadouble)(*ii);\n      *gru = 1;\n    } else {\n      *gru=0;\n    }\n    gr++ ; gru++; ii++;\n  }\n  \n  gafree (&pst2);\n  gree(cnt,\"f440\");\n  return(0);\n\nerr:\n  gaprnt (0,\"Error in OABIN:  Unable to allocate memory\\n\");\n  gafree (&pst2);\n  gafree (pst);\n  return (1);\n}\n\n\n\n/* Nine point smoother */\n\ngaint ffsmth  (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgr;\ngadouble *buff, *gr, *nw;\ngadouble w,s,mid,sid,cor;\ngaint i,j,k,rc,siz,p;\nchar *gru, *nwu, *buffu;\nsize_t sz;\n\n  if (pfc->argnum!=1 && pfc->argnum!=4) {\n    gaprnt (0,\"Error from SMTH9:  Too many or too few args \\n\");\n    gaprnt (0,\"                   One or 4 arguments expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type!=1) {\n    gaprnt (0,\"Error from SMTH9:  Grid Required\\n\");\n    gafree (pst);\n    return (1);\n  }\n\n  pgr = pst->result.pgr;\n  siz = pgr->isiz * pgr->jsiz;\n  sz = siz*sizeof(gadouble);\n  buff = (gadouble *)galloc(sz,\"sm9buf\");\n  if (buff==NULL) {\n    gaprnt (0,\"Error from SMTH9:  Unable to allocate memory\\n\");\n    gafree (pst);\n    return (1);\n  }\n  sz = siz*sizeof(char);\n  buffu = (char *)galloc(sz,\"sm9bufu\");\n  if (buffu==NULL) {\n    gaprnt (0,\"Error from SMTH9:  Unable to allocate memory\\n\");\n    gafree (pst);\n    return (1);\n  }\n\n  mid = 1.0; sid = 0.5; cor = 0.3;\n  if (pfc->argnum==4) {\n    if (getdbl(pfc->argpnt[1],&mid)==NULL ||\n        getdbl(pfc->argpnt[2],&sid)==NULL ||\n        getdbl(pfc->argpnt[3],&cor)==NULL )  {\n      gaprnt (0,\"Error from SMTH9:  Invalid Weight Values\\n\");\n      gaprnt (0,\"  Using defaults:  1.0  0.5  0.3\\n\");\n      mid = 1.0; sid = 0.5; cor = 0.3;\n    }\n  }\n\n  gr = pgr->grid;\n  gru = pgr->umask;\n  nw = buff;\n  nwu = buffu;\n  k = 0;\n  for (j=0; j<pgr->jsiz; j++) {\n    for (i=0; i<pgr->isiz; i++) {\n      if (*(gru+k)!=0) {\n        s = *(gr+k)*mid;\n        w = mid;\n        if (i!=0 && *(gru+k-1)!=0) { \n\t  s = s + *(gr+k-1)*sid; \n\t  w+=sid;\n\t}\n        if (i!=pgr->isiz-1 && *(gru+k+1)!=0) { \n\t  s = s + *(gr+k+1)*sid; \n\t  w+=sid;\n\t}\n        if (j!=0) {\n          p = k - pgr->isiz;\n          if (*(gru+p)!=0) { \n\t    s = s + *(gr+p)*sid; \n\t    w+=sid;\n\t  }\n          if (i!=0 && *(gru+p-1)!=0) { \n\t    s = s + *(gr+p-1)*cor; \n\t    w+=cor;\n\t  }\n          if (i!=pgr->isiz-1 && *(gru+p+1)!=0) { \n\t    s = s + *(gr+p+1)*cor; \n\t    w+=cor;\n\t  }\n        }\n        if (j!=pgr->jsiz-1) {\n          p = k + pgr->isiz;\n          if (*(gru+p)!=0) { \n\t    s = s + *(gr+p)*sid; \n\t    w+=sid;\n\t  }\n          if (i!=0 && *(gru+p-1)!=0) { \n\t    s = s + *(gr+p-1)*cor; \n\t    w+=cor;\n\t  }\n          if (i!=pgr->isiz-1 && *(gru+p+1)!=0) { \n\t    s = s + *(gr+p+1)*cor; \n\t    w+=cor;\n\t  }\n        }\n        *nw = s/w;\n\t*nwu = 1;\n      } \n      else {\n\t*nwu = 0;\n      }\n      nw++; nwu++; k++;\n    }\n  }\n  gr = pgr->grid;\n  gru = pgr->umask;\n  nw = buff;\n  nwu = buffu;\n  for (i=0; i<siz; i++) {\n    *gr  = *nw;\n    *gru = *nwu; \n    gr++; gru++; nw++; nwu++;\n  }\n\n  gree(buff,\"f441\");\n  gree(buffu,\"f442\");\n  return (0);\n}\n\n/* Station Averaging.  Averaging is done in time only.\n   If there are multiple stations per time, they are\n   averaged with equal weight, then that value for that time\n   is averaged with equal weight with the other times for that\n   station.  The user may specify the number of times required\n   for an average to be reported for a station.    */\n\ngaint ffsave (struct gafunc *pfc, struct gastat *pst) {\nstruct gafile *pfi;\nstruct gastn *stnr, *stn;\nstruct garpt *rpt,*rpt2;\nstruct dt tinc,tloc,twrk,tstrt,tend;\ngadouble gr1,gr2,*val,sum,cnt,ttt;\ngaint dim,dim2,rc,d1,d2,d,fflg,i,mcnt,wflag=0;\ngaint mos=0,mns=0,incr;\nchar *ch,chs[20],che[20];\nsize_t sz;\n\n  /* Check for X, Y varying environment */\n\n  if (pst->idim!=0 || pst->jdim!=1) {\n    gaprnt (0,\"Error from STNAVE:  X, Y varying environment required\\n\");\n    return(1);\n  }\n\n  /* Check for valid number of args       */\n\n  if (pfc->argnum<3 || pfc->argnum>5) {\n    gaprnt (0,\"Error from STNAVE:  Too many or too few args \\n\");\n    gaprnt (0,\"                    3 to 5 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Parse the dimension expression       */\n\n  pfi = pst->pfid;\n  ch = dimprs (pfc->argpnt[1], pst, pfi, &dim, &gr1, 1, &wflag);\n  if (ch==NULL || dim!=3 || wflag==2) {\n    gaprnt (0,\"Error from STNAVE:  1st dimension expression invalid\\n\");\n    if (wflag==2) gaprnt (0,\"  offt expression not supported as an arg to STNAVE\\n\");\n    return (1);\n  }\n\n  /* Now parse the 2nd dimension expression.  */\n\n  ch = dimprs (pfc->argpnt[2], pst, pfi, &dim2, &gr2, 1, &wflag);\n  if (ch==NULL || dim2!=dim || wflag==2) {\n    gaprnt (0,\"Error from STNAVE:  2nd dimension expression invalid\\n\");\n    if (wflag==2) gaprnt (0,\"  offt expression not supported as an arg to STNAVE\\n\");\n    return (1);\n  }\n\n  /* Get optional arguments:  time increment and min number of times \n     required for a successful average */\n\n  val = pfi->grvals[3];\n  if (*(val+5)>0) { mos = (*(val+5)); mns = 0; }\n  if (*(val+6)>0) { mns = (*(val+6)); mos = 0; }\n\n  mcnt = 1;\n  if (pfc->argnum >= 4) {\n    if (*(pfc->argpnt[3]) == '-') {    /* Option flags? */\n      i = fndarg (pfc->argpnt[3], &mcnt);\n      if (i) return (1);\n    } else {                           /* Assume time increment */\n                               /*  Done differently from grid ave */\n                               /*  to allow increment of 1yr for \n                                   daily data.  Might want to adopts\n                                   this for grid ave also.  Think about\n                                   a flag to handle leap years?  */\n      ch = intprs(pfc->argpnt[3],&incr);\n      if (ch==NULL) goto err3;\n      if (*(val+5)>0) { mos = incr * (*(val+5)); mns = 0; }\n      if (*(val+6)>0) { mns = incr * (*(val+6)); mos = 0; }\n      if (*ch!='\\0') {\n        ch = rdtprs(pfc->argpnt[3],&tinc);\n        if (ch==NULL) goto err3;\n        mos = tinc.yr*12 + tinc.mo;\n        mns = tinc.dy*1140 + tinc.hr*60 + tinc.mn;\n        if (mos>0 && *(val+5)>0) {\n          incr = mos / (*(val+5));\n          if (mos!=incr*(*(val+5))) goto err3;\n        }\n        else if (mos>0 && *(val+6)>0) {\n          incr = mos;  /* not really used */\n        }\n        else if (mns>0 && *(val+6)>0) {\n          incr = mns / (*(val+6));\n          if (mns!=incr*(*(val+6))) goto err3;\n        }\n        else goto err3;\n      }\n    }\n  }\n  if (pfc->argnum == 5) {\n    i = fndarg (pfc->argpnt[4], &mcnt);\n    if (i) return (1);\n  }\n\n  tinc.yr = 0; tinc.mo = mos; tinc.dy = 0; tinc.hr = 0; tinc.mn = mns;\n\n  d1 = ceil(gr1-0.001);          /* Ave limits are integers    */\n  d2 = floor(gr2+0.001);\n\n  /* Set up the result stn block */\n\n  sz = sizeof(struct gastn);\n  stnr = (struct gastn *)galloc(sz,\"stnavr\");\n  if (stnr==NULL) {\n    gaprnt(0,\"Memory allocation error:  station averaging function\\n\");\n    return(1);\n  }\n\n  /* Loop over time */\n  gr2t (pfi->grvals[3],d1,&tstrt);\n  gr2t (pfi->grvals[3],d2,&tend);\n  gat2ch (&tstrt,5,chs,20);\n  gat2ch (&tend,5,che,20);\n  snprintf(pout,1255,\"Stn Averaging.  Dim = %i, Start = %s, End = %s Incr(mos,mns) = %i %i\\n\", \n\t   dim, chs, che, mos, mns);\n  gaprnt (2,pout);\n\n  rc = 0;\n  fflg = 1;\n  d = d1;\n  while (d<=d2 && !rc) {\n    gr2t (pfi->grvals[3],d,&(pst->tmin));\n    pst->tmax = pst->tmin;\n    /* evaluate the expression at this time */\n    rc = gaexpr(pfc->argpnt[0],pst);\n    if (rc || pst->type==1) goto err;\n    stn = pst->result.stn;\n    /* set up the block to hold the final result */\n    if (fflg) {\n      fflg = 0;       /* makes sure this is only done once */\n      *stnr = *stn;\n      stnr->rnum = 0;\n      stnr->rpt = NULL;\n      sz = sizeof(gadouble)*8;\n      stnr->tvals = (gadouble *)galloc(sz,\"stnavtvals\");\n      if (stnr->tvals==NULL) {\n        gaprnt (0,\"Memory Allocation Error:  Station Request Block \\n\");\n        goto err;\n      }\n      for (i=0; i<8; i++) *(stnr->tvals+i) = *(stn->tvals+i);\n    }\n\n    /* Average multiple stations for this time, if any.  */\n\n    rpt = stn->rpt;\n    while (rpt) {\n      rpt->work = 1;\n      rpt = rpt->rpt;\n    }\n    rpt = stn->rpt;\n    while (rpt) {\n      if (rpt->work && rpt->umask!=0) {\n        rpt2 = rpt->rpt;\n        sum = rpt->val;\n        cnt = 1.0;\n\t/* check for more reports to include in the average for this time */\n        while (rpt2) {\n\t  /* additional reports must have same stid and location */\n          if (rpt2->umask!=0 &&           \n              !cmpch(rpt->stid,rpt2->stid,8) &&\n              rpt->lat == rpt2->lat && rpt->lon == rpt2->lon) {\n            sum = sum + rpt2->val;\n            cnt = cnt+1.0;\n            rpt2->work = 0;       /* flag these reports as already used in calculation */\n          }\n          rpt2 = rpt2->rpt;\n        }\n        rpt->val = sum/cnt;       /* rpt->val now has the average of all reports */\n      } \n      rpt = rpt->rpt;\n    }\n\n    /* Now sum these with the items already in the result list */\n\n    rpt = stn->rpt;\n    while (rpt) {\n      if (rpt->work) {\n        rpt2 = stnr->rpt;  /* this will be NULL for the first time step */\n        while (rpt2) {\n          if (!cmpch(rpt->stid,rpt2->stid,8) &&\n              rpt->lat == rpt2->lat && rpt->lon == rpt2->lon) break;\n          rpt2 = rpt2->rpt;\n        }\n        if (rpt2==NULL) {\n\t  /* at first time step, allocate result (rpt2), copy rpt values into it  */\n          rpt2 = gaarpt(stnr);\n          if (rpt2==NULL) goto err;\n          stnr->rnum++;\n          *rpt2 = *rpt;\n          rpt2->rpt = NULL;\n          rpt2->work = 1;\n          if (rpt->umask == 0) rpt2->umask = 0;\n        } else {\n\t  /* for subsequent time steps, check if result is undefined */\n          if (rpt2->umask == 0) {\n\t    /* no previous result, copy current time's average into result if defined */\n\t    if (rpt->umask != 0) {\n              rpt2->val = rpt->val;\n              rpt2->work = 1;\n\t      rpt2->umask = 1;\n\t    }\n          } else if (rpt->umask != 0) {\n\t    /* add current time's average to result, increment work flag */\n            rpt2->val = rpt2->val + rpt->val;\n            rpt2->work++;\n          }\n        }\n      }\n      rpt = rpt->rpt;\n    }\n    gafree(pst);\n   \n    /*  Apply time increment */\n\n    gr2t (pfi->grvals[3],d,&tloc);\n    twrk = tinc;\n    timadd (&tloc, &twrk);\n    ttt = t2gr(pfi->grvals[3],&twrk);\n    d = ttt;\n    if (fabs(((gadouble)d)-ttt) > 0.001) {\n      gaprnt(0,\"Logic Error 16 in stnave.  Contact Developer(s).\\n\");\n      goto err;\n    }\n  }\n\n  /* Calculate final result, return */\n\n  rpt = stnr->rpt;\n  while (rpt) {\n    if (rpt->umask!=0) {\n      if (rpt->work<mcnt) rpt->umask = 0;\n      else {\n        cnt = (gadouble)rpt->work;\n        rpt->val = rpt->val/cnt;\n\trpt->umask = 1;\n      }\n    }\n    rpt = rpt->rpt;\n  }\n  pst->result.stn = stnr;\n  return(0);\n\nerr:\n  gaprnt (0,\"Error from STNAVE:  Unable to evaluate expression\\n\");\n  gafree(pst);\n  gasfre(stnr);\n  return(1);\nerr3:\n  snprintf(pout,1255,\"Error from STNAVE: Invalid time increment argument\\n\");\n  gaprnt(0,pout);\n  return (1);\n}\n\n/* Set every nth grid point value to missing in a grid */\n\ngaint ffskip (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgr;\ngaint rc,iskip,jskip,ii,jj,i,j;\nchar *uval;\n\n  if (pfc->argnum<2 || pfc->argnum>3) {\n    gaprnt (0,\"Error from SKIP:  Too many or too few args \\n\");\n    gaprnt (0,\"                  Two or 3 arguments expected \\n\");\n    return (1);\n  }\n  if (intprs(pfc->argpnt[1],&iskip)==NULL) {\n    gaprnt (0,\"Error from SKIP:  2nd argument must be an integer \\n\");\n    return(1);\n  }\n  if (pfc->argnum>2) {\n    if (intprs(pfc->argpnt[2],&jskip)==NULL) {\n      gaprnt (0,\"Error from SKIP:  3rd argument must be an integer\\n\");\n      return(1);\n    }\n  } \n  else jskip = iskip;\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type!=1) {\n    gaprnt (0,\"Error from SKIP:  Grid Required\\n\");\n    gafree (pst);\n    return (1);\n  }\n\n  pgr = pst->result.pgr;\n  uval = pgr->umask;\n  if (pgr->idim==-1) return(0);\n\n  iskip = iskip - 1;\n  jskip = jskip - 1;\n  jj = -1;\n  for (j=0; j<pgr->jsiz; j++) {\n    jj++;\n    if (jj>jskip) jj=0;\n    ii = -1;\n    for (i=0; i<pgr->isiz; i++) {\n      ii++;\n      if (ii>iskip) ii=0;\n      if (ii || jj) *uval = 0;\n      uval++;\n    }\n  }\n  return (0);\n}\n\ngaint ffgrarea (struct gafunc *pfc, struct gastat *pst) {\n  struct gagrid *pgr;\n  gadouble *val;\n  gaint rc,i,j;\n  gadouble (*iconv) (gadouble *, gadouble);\n  gadouble (*jconv) (gadouble *, gadouble);\n  gadouble *ivals, *jvals;\n  gadouble rad,scl,w1,w2,y1,x1,alo,ahi;\n  char *uval;\n\n  if (pfc->argnum>3) {\n    gaprnt (0,\"Error from GRAREA:  Too many args \\n\");\n    gaprnt (0,\"                  1 arguments expected \\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type!=1) {\n    gaprnt (0,\"Error from GRAREA:  Grid Required\\n\");\n    gafree (pst);\n    return (1);\n  }\n  pgr = pst->result.pgr;\n  if( (pgr->idim)!=0 || (pgr->jdim)!=1 ) {\n    gaprnt (0,\"Error from GRAREA:  XY (lon-lat) grid required\\n\");\n    gafree (pst);\n    return (1);\n  }\n\n  rad = acos(0.0)/90.0;\n  scl=1.0/720.0;\n  jconv = pgr->jgrab;\n  ivals = pgr->ivals;\n  iconv = pgr->igrab;\n  jvals = pgr->jvals;\n  val = pgr->grid;\n  uval = pgr->umask;\n  for (j=0; j<pgr->jsiz; j++) {\n    y1 = (gadouble)(j+pgr->dimmin[1]);\n    alo = jconv(jvals, y1-0.5);\n    ahi = jconv(jvals, y1+0.5);\n    if (alo < pst->dmin[1]) alo = pst->dmin[1];\n    if (alo > pst->dmax[1]) alo = pst->dmax[1];\n    if (ahi < pst->dmin[1]) ahi = pst->dmin[1];\n    if (ahi > pst->dmax[1]) ahi = pst->dmax[1];\n    if (alo < -90.0) alo = -90.0; if (ahi < -90.0) ahi = -90.0;\n    if (alo >  90.0) alo =  90.0; if (ahi >  90.0) ahi =  90.0;\n    w1 = fabs(sin(ahi*rad)-sin(alo*rad));  /* area weighting (aave) */\n      \n    for (i=0; i<pgr->isiz; i++) {\n      x1 = (gadouble)(i+pgr->dimmin[0]);\n      alo = iconv(ivals, x1-0.5);\n      ahi = iconv(ivals, x1+0.5);\n      if (alo<pst->dmin[0]) alo = pst->dmin[0];\n      if (alo>pst->dmax[0]) alo = pst->dmax[0];\n      if (ahi<pst->dmin[0]) ahi = pst->dmin[0];\n      if (ahi>pst->dmax[0]) ahi = pst->dmax[0];\n      w2 = (ahi - alo)*scl;\n      if (*uval!=0) *val = w1 * w2;\n      val++; uval++;\n    }\n  }\n  return (0);\n}\n\ngaint ffcnst  (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,cnt,flg;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val,cnst;\nchar *ch, *uval;\n\n  if (pfc->argnum<2 || pfc->argnum>3) {\n    gaprnt (0,\"Error from CONST:  Too many or too few args \\n\");\n    gaprnt (0,\"                   Two or 3 arguments expected \\n\");\n    return (1);\n  }\n\n  if (getdbl(pfc->argpnt[1],&cnst)==NULL) {\n    gaprnt (0,\"Error from CONST:  2nd argument must be a constant\\n\");\n    return(1);\n  }\n\n  flg = 0;\n  if (pfc->argnum>2) {\n    ch = pfc->argpnt[2];\n    if      (*ch == '-' && *(ch+1) == 'u') flg = 1;\n    else if (*ch == '-' && *(ch+1) == 'a') flg = 2;\n    else gaprnt (1,\"Warning from CONST: Invalid flag.  Ignored.\\n\");\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    /* gridded data */\n    pgr = pst->result.pgr;\n    cnt = pgr->isiz * pgr->jsiz;\n    val = pgr->grid;\n    uval = pgr->umask;\n    for (i=0; i<cnt; i++) {\n      if (flg==0) {\n\t/* change valid data to a constant, missing data unchanged */\n        if (*uval!=0) *val = cnst;\n      } \n      else if (flg==1) {\n\t/* change missing data to a constant, update mask value */\n        if (*uval==0) {\n\t  *val = cnst;\n\t  *uval = 1;       \n\t}\n      } \n      else if (flg==2) {\n\t/* change valid and missing data to a constaont, update mask values */\n        *val = cnst;\n\t*uval = 1;\n      }\n      val++; uval++;\n    }\n  } \n  else {\n    /* station data */\n    stn = pst->result.stn;\n    rpt = stn->rpt;\n    while (rpt!=NULL) {\n      if (flg==0) {\n\t/* change valid data to a constant, missing data unchanged */\n        if (rpt->umask!=0) rpt->val = cnst;\n      } else if (flg==1) {\n\t/* change missing data to a constant, update mask value */\n        if (rpt->umask==0) {\n\t  rpt->val = cnst;\n\t  rpt->umask = 1;\n\t}\n      } else if (flg==2) {\n\t/* change valid and missing data to a constaont, update mask values */\n        rpt->val = cnst;\n        rpt->umask = 1;\n      }\n      rpt=rpt->rpt;\n    }\n  }\n\n  return (0);\n}\n\n/* Station min or max.  Done over time only.     */\nchar *smnxnam[2] = {\"STNMIN\",\"STNMAX\"};\n\ngaint ffsmin (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n  rc = ffsmnx (pfc, pst, 0);\n  return (rc);\n}\n\ngaint ffsmax (struct gafunc *pfc, struct gastat *pst) {\ngaint rc;\n  rc = ffsmnx (pfc, pst, 1);\n  return (rc);\n}\n\ngaint ffsmnx (struct gafunc *pfc, struct gastat *pst, gaint flg) {\nstruct gafile *pfi;\nstruct gastn *stnr, *stn;\nstruct garpt *rpt,*rpt2;\ngadouble gr1,gr2;\ngaint dim,dim2,rc,d1,d2,d,fflg,i,mcnt,wflag=0;\nchar *ch,*fnam;\nsize_t sz;\n\n  fnam = smnxnam[flg];\n\n  /* Check for X, Y varying environment */\n  if (pst->idim!=0 || pst->jdim!=1) {\n    snprintf(pout,1255,\"Error from %s:  X, Y varying environment required\\n\",fnam);\n    gaprnt (0,pout);\n    return(1);\n  }\n\n  /* Check for valid number of args */\n  if (pfc->argnum<3 || pfc->argnum>4) {\n    snprintf(pout,1255,\"Error from %s:  Too many or too few args \\n\",fnam);\n    gaprnt (0,pout);\n    gaprnt (0,\"                    3 or 4 arguments expected \\n\");\n    return (1);\n  }\n\n  /* Parse the dimension expression */\n  pfi = pst->pfid;\n  ch = dimprs (pfc->argpnt[1], pst, pfi, &dim, &gr1, 1, &wflag);\n  if (ch==NULL || dim!=3 || wflag==2) {\n    snprintf(pout,1255,\"Error from %s:  1st dimension expression invalid\\n\",fnam);\n    gaprnt (0,pout);\n    if (wflag==2) {\n      snprintf(pout,1255,\"  offt expression not supported as an arg to %s\\n\",fnam);\n      gaprnt (0,pout);\n    }\n    return (1);\n  }\n\n  /* Now parse the 2nd dimension expression. */\n  ch = dimprs (pfc->argpnt[2], pst, pfi, &dim2, &gr2, 1, &wflag);\n  if (ch==NULL || dim2!=dim || wflag==2) {\n    snprintf(pout,1255,\"Error from %s:  2nd dimension expression invalid\\n\",fnam);\n    gaprnt (0,pout);\n    if (wflag==2) {\n      snprintf(pout,1255,\"  offt expression not supported as an arg to %s\\n\",fnam);\n      gaprnt (0,pout);\n    }\n    return (1);\n  }\n\n  /* Get the min number of times required for average, if provided */\n  mcnt = 1;\n  if (pfc->argnum==4) {\n    i = fndarg (pfc->argpnt[3], &mcnt);\n    if (i) return (1);\n  }\n  /* Ave limits are integers */\n  d1 = ceil(gr1-0.001);          \n  d2 = floor(gr2+0.001);\n\n  /* Set up the result stn block */\n  sz = sizeof(struct gastn);\n  stnr = (struct gastn *)galloc(sz,\"stnminr\");\n  if (stnr==NULL) {\n    gaprnt(0,\"Memory allocation error:  station averaging function\\n\");\n    return(1);\n  }\n\n  /* Loop over time */\n  rc = 0;\n  fflg = 1;\n  for (d=d1; d<=d2 && !rc; d+=1) {\n\n    /* Get next set of stations */\n    gr2t (pfi->grvals[3],d,&(pst->tmin));\n    pst->tmax = pst->tmin;\n    rc = gaexpr(pfc->argpnt[0],pst);\n    if (rc || pst->type==1) goto err;\n    stn = pst->result.stn;\n    if (fflg) {\n      fflg = 0;\n      *stnr = *stn;\n      stnr->rnum = 0;\n      stnr->rpt = NULL;\n      sz = sizeof(gadouble)*8;\n      stnr->tvals = (gadouble *)galloc(sz,\"stnmintv\");\n      if (stnr->tvals==NULL) {\n        gaprnt (0,\"Memory Allocation Error:  Station Request Block \\n\");\n        goto err;\n      }\n      for (i=0; i<8; i++) *(stnr->tvals+i) = *(stn->tvals+i);\n    }\n\n    /* Tabulate mins or maxes */\n    rpt = stn->rpt;\n    while (rpt) {\n      rpt2 = stnr->rpt;\n      while (rpt2) {\n        if (!cmpch(rpt->stid,rpt2->stid,8) &&\n            rpt->lat == rpt2->lat && rpt->lon == rpt2->lon) break;\n        rpt2 = rpt2->rpt;\n      }\n      if (rpt2==NULL) {\n        rpt2 = gaarpt(stnr);\n        if (rpt2==NULL) goto err;\n        stnr->rnum++;\n        *rpt2 = *rpt;\n        rpt2->work = 1;\n        rpt2->rpt = NULL;\n        if (rpt->umask == 0) rpt2->umask = 0;\n      } else {\n        if (rpt2->umask == 0) {\n          rpt2->val = rpt->val;\n          rpt2->umask = rpt->umask;\n        } else if (rpt->umask != 0) {\n          if (flg) {\n            if (rpt->val > rpt2->val) rpt2->val = rpt->val;\n          } else {\n            if (rpt->val < rpt2->val) rpt2->val = rpt->val;\n          }\n          rpt2->work++;\n        }\n      }\n      rpt = rpt->rpt;\n    }\n    gafree(pst);\n  }\n\n  /* Check min count if provided */\n  if (mcnt>1) {\n    rpt = stnr->rpt;\n    while (rpt) {\n      if (rpt->work<mcnt) rpt->umask = 0;\n      rpt = rpt->rpt;\n    }\n  }\n\n  /* Return final result. */\n  pst->result.stn = stnr;\n  return(0);\n\nerr:\n  snprintf(pout,1255,\"Error from %s:  Unable to evaluate expression\\n\",fnam);\n  gaprnt (0,pout);\n  gafree(pst);\n  gasfre(stnr);\n  return(1);\n}\n\n/*  Find args for the stnave, stnmin, and stnmax functions */\n\ngaint fndarg (char *ch, gaint *iv) {\ngaint ival;\n\n   while (*ch==' ') ch++;\n   if (*ch!='-' && *(ch+1)!='m') {\n     gaprnt (0,\"Invalid option argument in STN function\\n\");\n     return (1);\n   }\n\n   ch+=2;\n   while (*ch==' ') ch++;\n\n   ch = intprs(ch,&ival);\n   if (ch==NULL || ival<1) {\n     gaprnt (0,\"Invalid option argument in STN function\\n\");\n     return (1);\n   }\n\n   *iv = ival;\n   return (0);\n}\n\ngaint ffcdif (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgr;\ngaint dim,rc,is,siz,i,j,sflag;\ngadouble *res,*rr,*gr;\nchar *resundef, *rru, *gru;\nsize_t sz;\n\n  /* Check for user errors */\n\n  if (pfc->argnum!=2) {\n    gaprnt (0,\"Error from CDIFF:  Too many or too few args \\n\");\n    gaprnt (0,\"                   Two arguments expected \\n\");\n    return (1);\n  }\n\n  if      (*(pfc->argpnt[1])=='x') dim = 0;\n  else if (*(pfc->argpnt[1])=='y') dim = 1;\n  else if (*(pfc->argpnt[1])=='z') dim = 2;\n  else if (*(pfc->argpnt[1])=='t') dim = 3;\n  else if (*(pfc->argpnt[1])=='e') dim = 4;\n  else {\n    gaprnt (0,\"Error from CDIFF:  Invalid dimension argument\\n\");\n    gaprnt (0,\"  2nd argument must be X, Y, Z, T or E\\n\");\n    return (1);\n  }\n  sflag = 0;\n  if (*(pfc->argpnt[1]+1)=='p') sflag = 1;\n  if (*(pfc->argpnt[1]+1)=='m') sflag = 2;\n  \n\n  /* Get the result grid. */\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n  if (pst->type==0) {\n    gafree (pst);\n    return(-1);\n  }\n  pgr = pst->result.pgr;\n\n  /* Verify that the dimension specified is a varying dimension */\n\n  if (dim!=pgr->idim && dim!=pgr->jdim) {\n    gaprnt (0,\"Error from CDIFF:  Specified dimension non varying\\n\");\n    gafree(pst);\n    return(1);\n  }\n\n  /* Get the output grid and its undef mask */\n\n  siz = pgr->isiz * pgr->jsiz;\n  sz = siz*sizeof(gadouble);\n  res = (gadouble *)galloc(sz,\"cdifres\");\n  if (res==NULL) {\n    gaprnt (0,\"Error from CDIFF:  Memory allocation error\\n\");\n    gafree(pst);\n    return (1);\n  }\n  sz = siz*sizeof(char);\n  resundef = (char *)galloc(sz,\"cdifresu\");\n  if (resundef==NULL) {\n    gaprnt (0,\"Error from CDIFF:  Memory allocation error\\n\");\n    gafree(pst);\n    return (1);\n  }\n\n  /* Do the differencing */\n\n  gr = pgr->grid;\n  gru = pgr->umask;\n  rr = res;\n  rru = resundef;\n  is = pgr->isiz;\n  if (dim==pgr->jdim) {\n    for (j=0; j<pgr->jsiz; j++) {\n      for (i=0; i<pgr->isiz; i++) {\n        if (sflag == 0) {\n          if (j==0 || j==pgr->jsiz-1) {\n\t    *rru = 0;\n\t  }\n          else {\n            if (*(gru+is)==0 || *(gru-is)==0) {\n              *rru = 0;\n            } \n\t    else {\n\t      *rr = *(gr+is) - *(gr-is);\n\t      *rru = 1;\n\t    }\n          }\n        } else if (sflag == 1) {\n          if (j==pgr->jsiz-1) {\n\t    *rru = 0;\n\t  }\n          else {\n            if (*(gru+is)==0 || *(gru)==0) {\n              *rru = 0;\n            } \n\t    else {\n\t      *rr = *(gr+is) - *(gr);\n\t      *rru = 1;\n\t    }\n          }\n        } else {\n          if (j==0) {\n\t    *rru = 0;\n\t  }\n          else {\n            if (*(gru)==0 || *(gru-is)==0) {\n              *rru = 0;\n            } \n\t    else {\n\t      *rr = *(gr) - *(gr-is);\n\t      *rru = 1;\n\t    }\n          }\n        }\n        gr++; gru++; rr++; rru++;\n      }\n    }\n  } \n  else {\n    for (j=0; j<pgr->jsiz; j++) {\n      for (i=0; i<pgr->isiz; i++) {\n        if (sflag==0) {\n          if (i==0 || i==pgr->isiz-1) {\n\t    *rru = 0;\n\t  }\n          else {\n            if (*(gru+1)==0 || *(gru-1)==0) {\n              *rru = 0;\n            } \n\t    else {\n\t      *rr = *(gr+1) - *(gr-1);\n\t      *rru = 1;\n\t    }\n          }\n        } \n\telse if (sflag==1) {\n          if (i==pgr->isiz-1) {\n\t    *rru = 0;\n\t  }\n          else {\n            if (*(gru+1)==0 || *(gru)==0) {\n              *rru = 0;\n            } \n\t    else {\n\t      *rr = *(gr+1) - *(gr);\n\t      *rru = 1;\n\t    }\n          }\n        } \n\telse {\n          if (i==0) {\n\t    *rru = 0;\n\t  }\n          else {\n            if (*(gru)==0 || *(gru-1)==0) {\n              *rru = 0;\n            } \n\t    else {\n\t      *rr = *(gr) - *(gr-1);\n\t      *rru = 1;\n\t    }\n          }\n        }\n        gr++; gru++; rr++; rru++;\n      }\n    }\n  }\n\n  gree(pgr->grid,\"f443\");\n  gree(pgr->umask,\"f443a\");\n  pgr->grid = res;\n  pgr->umask = resundef;\n  return (0);\n}\n\n\ngaint ffflvl (struct gafunc *pfc, struct gastat *pst) {\nstruct gagrid *pgr1, *pgr2, *pgrv;\nstruct gafile *pfi;\ngadouble (*lvconv) (gadouble *, gadouble);\ngadouble levf, levl, *levs, clev, ulev, flev, llev, lev, lev1, lev2;\ngadouble *lvvals, *gr1, *gr2, *grv, *grr, *res;\ngaint rc, i, j, lvt, dim, wflag, cnt, size;\nchar *ch, *resundef, *gr1u, *gr2u, *grru;\nsize_t sz;\n\n  if (pfc->argnum!=4) {\n    gaprnt (0,\"Error from FNDLVL:  Too many or too few args \\n\");\n    gaprnt (0,\"                    Four arguments expected \\n\");\n    return (1);\n  }\n\n  /* Get 1st and last level.  They are args 3 and 4 and should\n     be valid 'z' dimension expressions. */\n\n  pfi = pst->pfid;\n\n  ch = dimprs (pfc->argpnt[2], pst, pfi, &dim, &levf, 1, &wflag);\n  if (ch==NULL || dim!=2) {\n    gaprnt (0,\"Error from FNDLVL:  Arg 3 an invalid Z dimension expression\\n\");\n    return (1);\n  }\n  ch = dimprs (pfc->argpnt[3], pst, pfi, &dim, &levl, 1, &wflag);\n  if (ch==NULL || dim!=2) {\n    gaprnt (0,\"Error from FNDLVL:  Arg 4 an invalid Z dimension expression\\n\");\n    return (1);\n  }\n\n  /* Determine the levels we need to process, given the range provided\n     by the user and the data levels available in the default file */\n\n  lvt = pfi->dnum[2];\n  if (lvt<3) {\n    gaprnt (0,\"Error from FNDLVL:  Too few levels in default file \\n\");\n    return (1);\n  }\n\n  sz = sizeof(gadouble)*lvt;\n  levs = (gadouble *)galloc(sz,\"fndlevs\");\n  if (levs==NULL) {\n    gaprnt (0,\"Error from FNDLVL:  Memory allocation error \\n\");\n    return (1);\n  }\n  cnt = 0;\n  \n  lvconv = pfi->gr2ab[2];\n  lvvals = pfi->grvals[2];\n  clev = lvconv(lvvals, 1.0);\n  ulev = lvconv(lvvals, (gadouble)lvt);\n  flev = lvconv(lvvals, levf);\n  llev = lvconv(lvvals, levl);\n\n  if ( (clev<ulev && flev<llev) ||\n       (clev>ulev && flev>llev) ) {  /* User ordering is same as file */\n    for (i=1; i<=lvt; i++) {\n      lev = lvconv(lvvals, (gadouble)i);\n      if ( (flev<llev && (lev>=flev && lev<=llev)) ||\n           (flev>llev && (lev<=flev && lev>=llev)) ) {\n        *(levs+cnt) = lev;  cnt++; \n      }\n    }\n  } else {                           /* User ordering is reverse of file */\n    for (i=lvt; i>=1; i--) {\n      lev = lvconv(lvvals, (gadouble)i);\n      if ( (flev<llev && (lev>=flev && lev<=llev)) ||\n           (flev>llev && (lev<=flev && lev>=llev)) ) {\n        *(levs+cnt) = lev;  cnt++; \n      }\n    }\n  }\n\n  /* Insure z is not a varying dimension */\n\n  lev1 = *levs;\n  if (pst->idim==2) {\n    pst->idim = pst->jdim;\n    pst->jdim = -1;\n    pst->dmin[2] = lev1;\n    pst->dmax[2] = lev1;\n  }\n  if (pst->jdim==2) {\n    pst->jdim = -1;\n    pst->dmin[2] = lev1;\n    pst->dmax[2] = lev1;\n  }\n\n  /* Get the level to find (2nd arg).   Must be an expression that \n     yields the same grid the 1st arg will yield. */                              \n \n  rc = gaexpr(pfc->argpnt[1],pst);\n  if (rc) {\n    gree(levs,\"f444\");\n    return (1);\n  }\n  if (pst->type==0) {\n    gree(levs,\"f445\");\n    gafree (pst);\n    return (-1);\n  }\n  pgrv = pst->result.pgr;\n\n  /* Get first grid (at 1st level) from 1st arg. */\n\n  pst->dmin[2] = lev1;\n  pst->dmax[2] = lev1;\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) {\n    gree(levs,\"f446\");\n    gagfre (pgrv);\n    return (1);\n  }\n  if (pst->type==0) {\n    gree(levs,\"f447\");\n    gafree (pst);\n    gagfre (pgrv);\n    return (-1);\n  }\n  pgr1 = pst->result.pgr;\n\n  /* Check that the two grids are equivalent.  */\n\n  if (pgrv->idim!=pgr1->idim || pgrv->jdim != pgr1->jdim ||\n      gagchk(pgrv,pgr1,pgrv->idim) || gagchk(pgrv,pgr1,pgrv->jdim)) {\n    gaprnt (0,\"Error from FNDLVL :  Incompatible grids. \\n\");\n    gree(levs,\"f448\");\n    gafree (pst);\n    gagfre (pgrv);\n    return (1);\n  }\n\n  /* Allocate space to hold the result and its undef mask */\n\n  size = pgrv->isiz * pgrv->jsiz;\n  sz = sizeof(gadouble)*size;\n  res = (gadouble *)galloc(sz,\"fndlvlres\");\n  if (res==NULL) {\n    gaprnt (0,\"Error from FNDLVL :  Memory allocation error \\n\");\n    gree(levs,\"f449\");\n    gafree (pst);\n    gagfre (pgrv);\n    return (1);\n  }\n  sz = sizeof(char)*size;\n  resundef = (char *)galloc(sz,\"fndlvlresu\");\n  if (resundef==NULL) {\n    gaprnt (0,\"Error from FNDLVL :  Memory allocation error \\n\");\n    gree(levs,\"f450\");\n    gafree (pst);\n    gagfre (pgrv);\n    return (1);\n  }\n  for (i=0; i<size; i++) *(resundef+i) = 0;\n\n  /* Loop through the levels and, when appropriate, interpolate to find\n     the level.  */\n\n  for (i=1; i<cnt; i++) {\n    lev2 = *(levs+i);\n    pst->dmin[2] = lev2;\n    pst->dmax[2] = lev2;\n    rc = gaexpr(pfc->argpnt[0],pst);\n    if (rc) {             \n      gree(levs,\"f451\");\n      gree(res,\"f452\");\n      gagfre (pgr1);\n      gagfre (pgrv);\n      return (1);\n    }\n    if (pst->type==0) {\n      gree(levs,\"f453\");\n      gree(res,\"f454\");\n      gafree (pst);\n      gagfre (pgr1);\n      gagfre (pgrv);\n      return (-1);\n    }\n    pgr2 = pst->result.pgr;\n\n    gr1 = pgr1->grid; gr1u = pgr1->umask;\n    gr2 = pgr2->grid; gr2u = pgr2->umask;\n    grr = res;        grru = resundef;\n    grv = pgrv->grid;\n    for (j=0; j<size; j++) {\n     if (*grru == 0) {                                       /* If we haven't yet found a level...  */\n      if (*gr1u != 0 && *gr2u != 0) {                        /* and data is available... */\n       if ((*gr1 <  *gr2 && *grv >= *gr1 && *grv <= *gr2) ||\n           (*gr1 >= *gr2 && *grv <= *gr1 && *grv >= *gr2)) { /* and the level falls in this layer... */\n         if (fabs(*gr2 - *gr1) < 1e-5) {\n\t   *grr = lev1; \n\t   *grru = 1;\n\t }\n         else {\n\t   *grr = lev1 + (lev2-lev1)*(*grv - *gr1)/(*gr2 - *gr1);   /* then interpolate. */\n\t   *grru = 1;\n\t }\n       }\n      }\n     }\n     gr1++; gr1u++; \n     gr2++; gr2u++;\n     grr++; grru++;\n     grv++; \n    }\n    gagfre(pgr1);\n    pgr1 = pgr2;\n    lev1 = lev2;\n  }\n\n  /* Release storage and return */\n  \n  gagfre (pgr1);\n  if (pgrv->idim>-1) gree(pgrv->grid,\"f455\");\n  if (pgrv->idim==-1) {\n    pgrv->rmin = *res;\n    pgrv->umin = *resundef;\n    gree(res,\"f456\");\n    gree(resundef,\"457\");\n  } \n  else {\n    pgrv->grid = res;\n    pgrv->umask = resundef;\n  }\n\n  pst->type = 1;\n  pst->result.pgr = pgrv;\n  gree(levs,\"f458\");\n  return (0);\n}\n\n\n/*  Convert a station data time series into a grid; \n    this allows more graphics operations and \n    analytical comparisons.  */\n\ngaint ffs2g1d (struct gafunc *pfc, struct gastat *pst) {\ngaint i,rc,size,idim,jdim;\nstruct gagrid *pgr;\nstruct gastn *stn;\nstruct garpt *rpt;\ngadouble *val,*tvals;\nchar *valundef;\nsize_t sz;\n\n  if (pfc->argnum!=1) {\n    gaprnt (0,\"Error from S2G1D: Too many or too few args \\n\");\n    gaprnt (0,\"                  One argument expected \\n\");\n    return (1);\n  }\n\n  if (pst->idim != 3 || pst->jdim != -1) {\n    gaprnt (0,\"Error from S2G1D: Time can be only varying dimension\\n\");\n    return (1);\n  }\n\n  rc = gaexpr(pfc->argpnt[0],pst);\n  if (rc) return (rc);\n\n  if (pst->type==1) {\n    gaprnt (0,\"Error from S2G1D: Station data argument expected\\n\");\n    return (1);\n  }\n\n  stn = pst->result.stn;\n\n  if (stn->idim != 3 || stn->jdim != -1) {\n    gaprnt (0,\"Error from S2G1D: Logic Error 4; contact developer\\n\");\n    return (1);\n  }\n\n  sz = sizeof(struct gagrid);\n  pgr = (struct gagrid *)galloc(sz,\"s2g1dpgr\");\n\n  if (pgr==NULL) {\n    gaprnt (0,\"Memory Allocation Error:  Grid Request Block\\n\");\n    return (1);\n  }\n\n  /* Fill in gagrid variables */\n  \n  pgr->pfile = NULL;\n  pgr->undef = stn->undef;\n  pgr->isiz = 1 + stn->tmax - stn->tmin;\n  pgr->jsiz = 1; \n  idim = stn->idim; jdim = stn->jdim;\n  pgr->exprsn = NULL;\n  pgr->alocf = 1;\n  pgr->pvar  = NULL;\n  pgr->idim  = idim;\n  pgr->jdim  = jdim;\n  pgr->iwrld = 0;  pgr->jwrld = 0;\n  for (i=0;i<3;i++) {\n    pgr->dimmin[i] = 1;\n    pgr->dimmax[i] = 1;\n  }\n  pgr->dimmin[3] = stn->tmin;\n  pgr->dimmax[3] = stn->tmax;\n  pgr->ilinr = 1;\n  pgr->jlinr = 0;\n\n  sz = sizeof(gadouble)*8;\n  tvals = (gadouble *)galloc(sz,\"s2g1dtvals\");\n  if (tvals == NULL) {\n    gaprnt (0,\"Memory Allocation Error: Dimension array\\n\");\n    gree(pgr,\"f459\");\n    return (1);\n  }\n\n  for (i=0; i<8; i++) {\n    *(tvals+i) = *(stn->tvals+i);\n  }\n  pgr->ivals = tvals;\n  pgr->iavals = tvals;\n  pgr->jvals = NULL;\n  /* this is for the grid */\n  sz = sizeof(gadouble)*pgr->isiz;\n  pgr->grid = (gadouble *)galloc(sz,\"s2g1dgr\");\n  if (pgr->grid == NULL) {\n    gaprnt (0,\"Memory Allocation Error: Data array\\n\");\n    gree(pgr,\"f460\");\n    return (1);\n  }\n  /* this is for the undef mask */\n  sz = sizeof(char)*pgr->isiz;\n  pgr->umask = (char *)galloc(sz,\"s2g2dgru\");\n  if (pgr->umask == NULL) {\n    gaprnt (0,\"Memory Allocation Error: Undef mask array\\n\");\n    gree(pgr,\"f461\");\n    return (1);\n  }\n\n  /* pre-fill the grid with undef values */\n  valundef = pgr->umask;\n  size = pgr->isiz;\n  for (i=0; i<size; i++) {\n    *valundef = 0;\n    valundef++;\n  }\n  /* now populate the grid with station values */\n  valundef = pgr->umask;\n  val = pgr->grid;\n  rpt = stn->rpt;\n  while (rpt!=NULL) {\n    if (rpt->val != stn->undef) {\n      i = (gaint)(rpt->tim) - stn->tmin;\n      *(val+i) = rpt->val;\n      *(valundef+i) = 1;\n    }\n    rpt=rpt->rpt;\n  }\n\n  gafree(pst);\n\n  pst->type = 1;\n  pst->result.pgr = pgr;\n  \n  return (0);\n}\n\ngaint ffudpi (struct gafunc *pfc, struct gastat *pst2, struct gaupb *upb) {\nstruct gaudpinfo *pudpinfo;\nvoid *handle;\nchar *error;\ngaint rc;\ngaint (*pfunc)(struct gafunc *, struct gastat *, struct gaudpinfo *);\n\n  /* set up the pointer to gaexpr */\n  pudpinfo = malloc(sizeof(struct gaudpinfo)); \n  pudpinfo->exprptr = gaexpr;\n  pudpinfo->version = UDPVERS; \n\n  /* load the shared object file and get the function pointer */\n  if (upb->pfunc == NULL) {\n    handle = dlopen(upb->fname,RTLD_LAZY);\n    if (handle==NULL) {\n      snprintf (pout,1255,\"Error: dlopen failed to get a handle on %s \\n\",upb->fname);\n      gaprnt (0,pout);\n      return (1);\n    }\n    dlerror();\n    pfunc = dlsym(handle,upb->alias);\n    if ((error=dlerror()) != NULL) {\n      snprintf (pout,1255,\"Error: dlsym failed to load %s \\n%s \\n\",upb->alias,error);\n      gaprnt (0,pout);\n      return (1);\n    }\n    /* save the function pointer */\n    upb->pfunc = pfunc;\n  }\n  else {\n    pfunc = upb->pfunc;\n  }\n\n  /* call the function */\n  rc = (*pfunc)(pfc,pst2,pudpinfo);\n  \n  free (pudpinfo);\n  return (rc);\n}\n\n/* Prints the contents of the chain of upb structures */\nvoid gaprntupb (void) {\nstruct gaupb *upb;\n  upb = upba;\n  while (upb) {\n    if (upb->type==1) {\n      if (!strcmp(upb->name,upb->alias))\n\tsprintf (pout,\"function   %-15s  %s\\n\",upb->name, upb->fname);\n      else\n\tsprintf (pout,\"function   %-15s  %s  %s\\n\",upb->name, upb->fname, upb->alias);\n    }\n    if (upb->type==2) sprintf (pout,\"defop      %-15s  %s\\n\",upb->name, upb->fname);\n    if (upb->type==3) sprintf (pout,\"gxdisplay  %-15s  %s\\n\",upb->name, upb->fname);\n    if (upb->type==4) sprintf (pout,\"gxprint    %-15s  %s\\n\",upb->name, upb->fname);\n    gaprnt (2,pout);\n    upb = upb->upb;\n  }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/src/gxsubs.c": "/* Copyright (C) 1988-2018 by George Mason University. See file COPYRIGHT for more information. */\n\n/* Authored by B. Doty */\n\n/*  Low level graphics interface, providing scaling, line styles,\n    clipping, character drawing, metafile output, etc.         */\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n\n/* If autoconfed, only include malloc.h when it's presen */\n#ifdef HAVE_MALLOC_H\n#include <malloc.h>\n#endif\n\n#else /* undef HAVE_CONFIG_H */\n\n#include <malloc.h>\n\n#endif /* HAVE_CONFIG_H */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <math.h>\n#include <dlfcn.h>\n#include \"gatypes.h\"\n#include \"gx.h\"\n\nchar *gaqupb (char *, gaint);\nvoid gree ();\n\n/* The following variables are local to this file, and are used by\n   all the routines in the file.    */\n\nstatic char *datad = \"/usr/local/lib/grads\";\nstatic gadouble xsize, ysize;                /* Virtual page size  */\nstatic gadouble rxsize, rysize;              /* Real page size     */\nstatic gaint lwflg;                          /* Reduce lw due vpage*/\nstatic gadouble clminx,clmaxx,clminy,clmaxy; /* Clipping region    */\nstatic gaint cflag;                          /* Clipping flag      */\nstatic gaint mflag;                          /* mask flag          */\nstatic gadouble dash[8];                     /* Linestyle pattern  */\nstatic gaint dnum,lstyle;                    /* Current linestyle  */\nstatic gaint lcolor;                         /* Current color      */\nstatic gaint lwide;                          /* Current linewidth  */\nstatic gadouble oldx,oldy;                   /* Previous position  */\nstatic gaint bufmod;                         /* Buffering mode     */\nstatic gadouble xsave,ysave,alen,slen;       /* Linestyle constants*/\nstatic gaint jpen,dpnt;\nstatic gaint intflg;                         /* Batch/Interactive flag    */\nstatic void (*fconv) (gadouble, gadouble, gadouble *, gadouble *); /* for proj rnt */\nstatic void (*gconv) (gadouble, gadouble, gadouble *, gadouble *); /* for grid rnt */\nstatic void (*bconv) (gadouble, gadouble, gadouble *, gadouble *); /* for back transform rnt */\nstatic gaint bcol;                           /* background color */\nstatic gaint savcol;                         /* for color save/restore */\nstatic char *mask;                           /* pointer to mask array */\nstatic gaint maskx;                          /* Size of a row in the array */\nstatic gaint masksize;                       /* Size of mask array */\nstatic gaint maskflg;                        /* mask flag; -999 no mask yet,\n                                                0 no mask used, 1 mask values set, -888 error  */\nstatic struct gxpsubs psubs;                 /* Holds function pointers to printing subroutines */\nstatic struct gxdsubs dsubs;                 /* Holds function pointers to display subroutines */\n\n/* For STNDALN, routines included are gxgnam and gxgsym */\n#ifndef STNDALN\n\n/* Initialize graphics output  */\n/* If batch flag is 1, batch mode only (no graphics output) */\n\ngaint gxstrt (gadouble xmx, gadouble ymx, gaint batch, gaint hbufsz, char *gxdopt, char *gxpopt, char *xgeom) {\n  gaint rc;\n\n  printf (\"GX Package Initialization: Size = %g %g \\n\",xmx,ymx);\n  if (batch) printf (\"Running in Batch mode\\n\");\n  intflg = !batch;                            /* Set batch/interactive flag */\n  gxdbinit();                                 /* Initialize the graphics data base */\n  rc = gxload(gxdopt,gxpopt);                 /* Load the graphics routines from a shared library */\n  if (rc) {\n    printf(\"GX Package Terminated \\n\"); \n    return (rc);\n  }\n  if (intflg) {\n    if (xgeom[0]!='\\0') dsubs.gxdgeo(xgeom);  /* tell display software about geometry override */\n    dsubs.gxdbgn(xmx, ymx);                   /* Initialize graphics output */\n    dsubs.gxdwid(3);                          /* Initial line width */\n  } else {\t\t\t\t      \t\t       \t\t    \n    dsubs.gxdbat();                           /* Tell display hardware layer we're in batch mode */\n    psubs.gxpinit(xmx, ymx);                  /* printing layer initializes batch mode surface */\n  }\t\t\t\t\t  \t\t\t\t\t    \t\t  \n  psubs.gxpbgn (xmx, ymx);                    /* Tell printing layer about page size */\n  rxsize = xmx;                               /* Set local variables with real page size  */\n  rysize = ymx;\t\t\t\t  \t\t\t\t   \n  clminx=0; clmaxx=xmx;                       /* Set clipping area       */\n  clminy=0; clmaxy=ymx;\n  xsave=0.0; ysave=0.0;\n  lstyle=0; lwide=3;\n  oldx=0.0; oldy=0.0;\n  fconv=NULL;                                 /* No projection set up    */\n  gconv=NULL;                                 /* No grid scaling set up  */\n  bconv=NULL;                                 /* No back transform       */\n  gxchii();                                   /* Init character plotting */\n  bufmod=0;                                   /* double buffering is OFF */\n  gxhnew(rxsize,rysize,hbufsz);               /* Init hardcopy buffering */\n  gxscal (0.0,xmx,0.0,ymx,0.0,xmx,0.0,ymx);   /* Linear scaling=inches   */\n  gxvpag (xmx,ymx,0.0,xmx,0.0,ymx);           /* Virtual page scaling    */\n  mask = NULL; maskflg = -999;                /* Don't allocate mask until first use */\n  gxcolr(1);                                  /* Initial color is 1 (foreground) */\n  return(0);\n}\n\n/* Loads the graphics back end shared libraries and define the required subroutines */\ngaint gxload(char *gxdopt, char *gxpopt) {\n  void *phandle=NULL,*dhandle=NULL; \n  const char *err=NULL,*dname=NULL,*pname=NULL;\n  char *cname=NULL;\n  FILE *cfile;\n  \n  /* Printing Hardcopy */\n  pname=(const char *)gaqupb(gxpopt,4);\n  if (pname==NULL) {\n    printf(\"GX Package Error: Could not find a record for the printing plug-in named \\\"%s\\\" \\n\",gxpopt);\n    /* Tell user where we looked based on $GAUDPT */\n    cname = getenv(\"GAUDPT\");\n    if (cname==NULL) {\n      printf(\"  * The environment variable GAUDPT has not been set\\n\");\n    } \n    else {\n      cfile = fopen(cname,\"r\");\n      if (cfile==NULL) {\n        printf(\"  * Unable to open the file named by the GAUDPT environment variable: %s\\n\",cname);\n      }\n      else {\n        printf(\"  * No entry with \\\"gxprint %s\\\" in the file named by the GAUDPT environment variable: %s\\n\",gxpopt,cname);\n        fclose(cfile);\n      }\n    }\n    /* Tell user where we looked based on $GADDIR/udpt */\n    cname = gxgnam(\"udpt\");\n    cfile = fopen(cname,\"r\");\n    if (cfile==NULL) {\n      printf(\"  * Unable to open the default User Defined Plug-in Table: %s\\n\",cname);\n    }\n    else {\n      printf(\"  * No entry with \\\"gxprint %s\\\" in the default User Defined Plug-in Table: %s\\n\",gxpopt,cname);\n      fclose(cfile);\n    }\n    printf(\"  Please read the documentation at http://cola.gmu.edu/grads/gadoc/plugins.html\\n\");\n    return(1);\n  }\n  dlerror();\n  phandle = dlopen (pname, RTLD_LAZY);\n  if (!phandle) {\n    printf(\"GX Package Error: dlopen failed to get a handle on gxprint plug-in named \\\"%s\\\" \\n\",gxpopt); \n    if ((err=dlerror())!=NULL) printf(\"   %s\\n\",err); \n    return(1);\n  }\n\n  /* Display */\n  dname=(const char *)gaqupb(gxdopt,3);\n  if (dname==NULL) {\n    printf(\"GX Package Error: Could not find a record for the display plug-in named \\\"%s\\\" \\n\",gxpopt);\n    /* Tell user where we looked based on $GAUDPT */\n    cname = getenv(\"GAUDPT\");\n    if (cname==NULL) {\n      printf(\"  * The environment variable GAUDPT has not been set\\n\");\n    } \n    else {\n      cfile = fopen(cname,\"r\");\n      if (cfile==NULL) {\n        printf(\"  * Unable to open the file named by the GAUDPT environment variable: %s\\n\",cname);\n      }\n      else {\n        printf(\"  * No entry with \\\"gxdisplay %s\\\" in the file named by the GAUDPT environment variable: %s\\n\",gxdopt,cname);\n        fclose(cfile);\n      }\n    }\n    /* Tell user where we looked based on $GADDIR/udpt */\n    cname = gxgnam(\"udpt\");\n    cfile = fopen(cname,\"r\");\n    if (cfile==NULL) {\n      printf(\"  * Unable to open the default User Defined Plug-in Table: %s\\n\",cname);\n    }\n    else {\n      printf(\"  * No entry with \\\"gxdisplay %s\\\" in the default User Defined Plug-in Table: %s\\n\",gxdopt,cname);\n      fclose(cfile);\n    }\n    printf(\"  Please read the documentation at http://cola.gmu.edu/grads/gadoc/plugins.html\\n\");\n    return(1);\n  }\n  dlerror();\n  dhandle = dlopen (dname, RTLD_LAZY);\n  if (!dhandle) {\n    printf(\"GX Package Error: dlopen failed to get a a handle on gxdisplay plug-in named \\\"%s\\\" \\n\",gxdopt); \n    if ((err=dlerror())!=NULL) printf(\"   %s\\n\",err); \n    return(2);\n  }\n  \n  /* Get pointers to the printing subroutines */\n  dlerror();\n  psubs.gxpcfg   = dlsym(phandle,\"gxpcfg\");\n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpckfont= dlsym(phandle,\"gxpckfont\");\n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpbgn   = dlsym(phandle,\"gxpbgn\");   \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpinit  = dlsym(phandle,\"gxpinit\");  \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpend   = dlsym(phandle,\"gxpend\");   \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxprint  = dlsym(phandle,\"gxprint\");  \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpcol   = dlsym(phandle,\"gxpcol\");   \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpacol  = dlsym(phandle,\"gxpacol\");  \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpwid   = dlsym(phandle,\"gxpwid\");   \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxprec   = dlsym(phandle,\"gxprec\");   \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpbpoly = dlsym(phandle,\"gxpbpoly\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpepoly = dlsym(phandle,\"gxpepoly\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpmov   = dlsym(phandle,\"gxpmov\");   \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpdrw   = dlsym(phandle,\"gxpdrw\");   \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpflush = dlsym(phandle,\"gxpflush\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpsignal= dlsym(phandle,\"gxpsignal\");\n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpclip  = dlsym(phandle,\"gxpclip\");  \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpch    = dlsym(phandle,\"gxpch\");    \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  psubs.gxpqchl  = dlsym(phandle,\"gxpqchl\");  \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  \n  /* get pointers to the display (hardware) subroutines, some are needed even in batch mode */\n  dsubs.gxdcfg   = dlsym(dhandle,\"gxdcfg\");\n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  dsubs.gxdckfont= dlsym(dhandle,\"gxdckfont\");\n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(1);}\n  dsubs.gxdbb    = dlsym(dhandle,\"gxdbb\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdfb    = dlsym(dhandle,\"gxdfb\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdacol  = dlsym(dhandle,\"gxdacol\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdbat   = dlsym(dhandle,\"gxdbat\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdbgn   = dlsym(dhandle,\"gxdbgn\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdbtn   = dlsym(dhandle,\"gxdbtn\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdch    = dlsym(dhandle,\"gxdch\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdclip  = dlsym(dhandle,\"gxdclip\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdcol   = dlsym(dhandle,\"gxdcol\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxddbl   = dlsym(dhandle,\"gxddbl\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxddrw   = dlsym(dhandle,\"gxddrw\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdend   = dlsym(dhandle,\"gxdend\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdfil   = dlsym(dhandle,\"gxdfil\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdfrm   = dlsym(dhandle,\"gxdfrm\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdgcoord= dlsym(dhandle,\"gxdgcoord\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdgeo   = dlsym(dhandle,\"gxdgeo\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdimg   = dlsym(dhandle,\"gxdimg\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdlg    = dlsym(dhandle,\"gxdlg\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdmov   = dlsym(dhandle,\"gxdmov\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdopt   = dlsym(dhandle,\"gxdopt\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdpbn   = dlsym(dhandle,\"gxdpbn\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdptn   = dlsym(dhandle,\"gxdptn\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdptn   = dlsym(dhandle,\"gxdptn\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdqchl  = dlsym(dhandle,\"gxdqchl\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdrbb   = dlsym(dhandle,\"gxdrbb\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdrec   = dlsym(dhandle,\"gxdrec\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdrmu   = dlsym(dhandle,\"gxdrmu\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdsfr   = dlsym(dhandle,\"gxdsfr\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdsgl   = dlsym(dhandle,\"gxdsgl\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdsignal= dlsym(dhandle,\"gxdsignal\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdssh   = dlsym(dhandle,\"gxdssh\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdssv   = dlsym(dhandle,\"gxdssv\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdswp   = dlsym(dhandle,\"gxdswp\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdwid   = dlsym(dhandle,\"gxdwid\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdXflush= dlsym(dhandle,\"gxdXflush\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxdxsz   = dlsym(dhandle,\"gxdxsz\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxrs1wd  = dlsym(dhandle,\"gxrs1wd\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.gxsetpatt= dlsym(dhandle,\"gxsetpatt\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  dsubs.win_data = dlsym(dhandle,\"win_data\"); \n  if ((err=dlerror())!=NULL) {printf(\"Error in gxload: %s\\n\",err); return(2);}\n  return(0);\n}\n\n/* pass the pointer to the graphcis printing subroutines to gxmeta.c and gauser.c */\nstruct gxpsubs* getpsubs() {\n  return &psubs; \n}\n\n/* pass the pointer to the graphcis display subroutines to gxmeta.c and gauser.c */\nstruct gxdsubs* getdsubs() {\n  return &dsubs; \n}\n\n/* get configuration information from display and printing plug-ins */\nvoid gxcfg (char *gxdopt, char *gxpopt) {\n  const char *dname,*pname;\n  dname=(const char *)gaqupb(gxdopt,3);\n  printf(\" -+- GX Display \\\"%s\\\"  %s  \",gxdopt,dname); dsubs.gxdcfg(); printf(\"\\n\");\n  pname=(const char *)gaqupb(gxpopt,4);\n  printf(\" -+- GX Print   \\\"%s\\\"  %s  \",gxpopt,pname); psubs.gxpcfg(); printf(\"\\n\");\n}\n\n/* Terminate graphics output */\nvoid gxend (void) {\n  if (mask) free(mask);\n  if (intflg) \n    dsubs.gxdend();                              /* Close X11 window */\n  else\n    psubs.gxpend();                              /* Tell printing layer to destroy batch mode surface */\n  printf (\"GX Package Terminated \\n\");\n}\n\n/* Send a signal to the rendering engine and the metabuffer. \n   Signal values are: \n     1 == Done with draw/display so finish rendering\n     2 == Disable anti-aliasing \n     3 == Enable anti-aliasing \n     4 == Cairo push\n     5 == Cairo pop and then paint\n*/\nvoid gxsignal (gaint sig) {\n  if (intflg) dsubs.gxdsignal(sig);  /* tell the rendering layer about the signal */\n  hout1c(-22,sig);                   /* put the signal in the metafile buffer */\n}\n\n\n/* Query the width of a character */\ngadouble gxqchl (char ch, gaint fn, gadouble w) {\ngadouble wid;\n\n  /* cases where we want to use Hershey fonts */\n  if (fn==3) return (-999.9);                  /* symbol font */\n  if (fn>5 && fn<10) return (-999.9);          /* user-defined font file */\n  if (fn<6 && !gxdbqhersh()) return (-999.9);  /* font 0-5 and hershflag=0 in gxmeta.c */\n\n  if (intflg) \n    wid = dsubs.gxdqchl (ch, fn, w);           /* get the character width (interactive mode) */\n  else \n    wid = psubs.gxpqchl (ch, fn, w);           /* get the character width (batch mode) */\n  return (wid);\n}\n\n/* Draw a character */\ngadouble gxdrawch (char ch, gaint fn, gadouble x, gadouble y, gadouble w, gadouble h, gadouble rot) {\ngadouble wid;\n\n  /* cases where we want to use Hershey fonts */ \n  if (fn==3) return (-999.9);                  /* symbol font */\n  if (fn>5 && fn<10) return (-999.9);          /* user-defined font file */\n  if (fn<6 && !gxdbqhersh()) return (-999.9);  /* font 0-5 and hershflag=0 in gxmeta.c */\n\n  /* from here on we're using Cairo fonts */\n  gxvcon(x,y,&x,&y);                           /* scale the position and size for the virual page */\n  gxvcon2(w,h,&w,&h);\n  if (w>0 && h>0) {                            /* make sure the width and height are non-zero */\n    if (intflg) \n      wid = dsubs.gxdch (ch, fn, x, y, w, h, rot);   /* plot a character */\n    else \n      wid = psubs.gxpqchl (ch, fn, w);         /* get the character width (batch mode) */\n    houtch (ch, fn, x, y, w, h, rot);          /* put the character in the metabuffer */\n    gxppvp2(wid,&wid);                         /* rescale the character width back to real page size */\n    return (wid);                              /* return character width */\n  }\n  else return(0);\n}\n\n\n/* Frame action.  Values for action are:\n      0 -- new frame (clear display), wait before clearing.\n      1 -- new frame, no wait.\n      2 -- New frame in double buffer mode.  If not supported\n           has same result as action=1.  Usage involves multiple\n           calls with action=2 to obtain an animation effect.  \n      7 -- new frame, but just clear graphics.  Do not clear  \n           event queue; redraw buttons. \n      8 -- clear only the event queue.\n      9 -- clear only the X request buffer */\n\nvoid gxfrme (gaint action) {\n\n  if (action>7) { \n    if (intflg) dsubs.gxdfrm(action);\n    return;\n  }\n  gxmaskclear();\n  if (intflg) {\n    if (action==0) getchar();        /* Wait if requested */\n    if (action!=2 && bufmod) {\n      dsubs.gxdsgl ();               /* tell hardware to turn off double buffer mode */\n      bufmod=0;\n    }\n    if (action==2 && (!bufmod)) {\n      dsubs.gxddbl ();               /* tell hardware to turn on double buffer mode */\n      bufmod=1;\n    }\n    if (bufmod) dsubs.gxdswp ();     /* swap */\n    dsubs.gxdfrm (action);           /* tell hardware layer about frame action */\n    dsubs.gxdfrm (9);                /* clear the X request buffer */\n  }\n  gxhfrm (action);                   /* reset metabuffer */\n  bcol = gxdbkq();\n  if (bcol>1) {\n    /* If background is not black/white, draw a full page rectangle and populate the metabuffer */\n    savcol = lcolor;\n    gxcolr(bcol);\n    gxrecf(0.0, rxsize, 0.0, rysize);\n    gxcolr(savcol);\n  }\n}\n\n\n/* Set color.  Colors are: 0 - black;    1 - white\n                           2 - red;      3 - green     4 - blue\n                           5 - cyan;     6 - magenta   7 - yellow\n                           8 - orange;   9 - purple   10 - lt. green\n                          11 - m.blue   12 - yellow   13 - aqua\n\t\t\t  14 - d.purple 15 - gray\n   Other colors may be available but are defined by the device driver */\n\nvoid gxcolr (gaint clr){                 /* Set color     */\n  if (clr<0) clr=0;\n  if (clr>=COLORMAX) clr=COLORMAX-1; \n  hout1(-3,clr);\n  if (intflg) dsubs.gxdcol (clr);\n  lcolor = clr;\n}\n\n/* define a new color */\n\ngaint gxacol (gaint clr, gaint red, gaint green, gaint blue, gaint alpha ) {\n  gaint rc=0;\n  gxdbacol (clr, red, green, blue, alpha);                       /* update the database */\n  hout5i(-5,clr,red,green,blue,alpha);                           /* tell the metabuffer */\n  if (intflg) rc = dsubs.gxdacol(clr, red, green, blue, alpha);  /* tell hardware */ \n  return(rc);\n}\n\n\n/* Set line weight */\n\nvoid gxwide (gaint wid) {                 /* Set width     */\ngaint hwid;\n  hwid = wid;\n  hout2i(-4,hwid,wid);\n  if (intflg) dsubs.gxdwid (hwid);\n  lwide = hwid;\n}\n\n/* Move to x, y with 'clipping'.  Clipping is implmented\n   coarsely, where any move or draw point that is outside the\n   clip region is not plotted.                          */\n\nvoid gxmove (gadouble x, gadouble y) {        /* Move to x,y   */\n  mflag = 0;\n  oldx = x;\n  oldy = y;\n  if ( x<clminx || x>clmaxx || y<clminy || y>clmaxy ) {\n    cflag=1;\n    return;\n  }\n  cflag=0;\n  gxvcon(x,y,&x,&y);\n  hout2(-10,x,y);\n  if (intflg) dsubs.gxdmov (x,y);\n}\n\n/* Draw to x, y with clipping */\n\nvoid gxdraw (gadouble x, gadouble y) {        /* Draw to x,y   */\ngadouble xnew,ynew;\ngaint pos=0;\n  if ( x<clminx || x>clmaxx || y<clminy || y>clmaxy ) {\n    if (!cflag) {\n      bdterp (oldx,oldy,x,y,&xnew,&ynew);\n      gxvcon(xnew,ynew,&xnew,&ynew);\n      hout2(-11,xnew,ynew);\n      if (intflg) dsubs.gxddrw (xnew,ynew);\n      cflag=1;\n    }\n    oldx = x; oldy = y;\n    return;\n  }\n  if (cflag) {\n    bdterp (oldx,oldy,x,y,&xnew,&ynew);\n    cflag=0;\n    gxvcon(xnew,ynew,&xnew,&ynew);\n    hout2(-10,xnew,ynew);\n    if (intflg) dsubs.gxdmov (xnew,ynew);\n  }\n  oldx = x; oldy = y;\n  gxvcon(x,y,&x,&y);\n  if (maskflg>0) pos = ((gaint)(y*100.0))*maskx + (gaint)(x*100.0);\n  if (maskflg>0 && pos>0 && pos<masksize && *(mask+pos)=='1') {\n    hout2(-10,x,y);\n    if (intflg) dsubs.gxdmov (x,y);\n    mflag = 1;\n    return;\n  }\n  if (mflag) {\n    hout2(-10,x,y);\n    if (intflg) dsubs.gxdmov (x,y);\n    mflag = 0;\n    return;\n  }\n  hout2(-11,x,y);\n  if (intflg) dsubs.gxddrw (x, y);\n}\n\n/* Draw lines in small segments, sometimes needed when masking is in use \n   (eg, grid lines)  */\n\nvoid gxsdrw (gadouble x, gadouble y){ \ngadouble xdif,ydif,xx,yy,slope,incr;\ngaint xnum,ynum,i;\n\n  if (maskflg > 0) {\n    ydif = fabs(oldy-y);\n    xdif = fabs(oldx-x);\n    if (ydif<0.03 && xdif<0.03) gxdraw(x,y);\n    else {\n      if (xdif>ydif) {\n        incr = 0.03;\n        if (ydif/xdif<0.3) incr = 0.02;\n        xnum = (gaint)(xdif/incr);\n        slope = (y-oldy)/(x-oldx);\n        xx = oldx; yy = oldy;\n        if (x < oldx) incr = -1.0 * incr;\n        for (i=0; i<xnum; i++) {\n          xx = xx + incr;\n          yy = yy + incr*slope;\n          gxdraw(xx,yy);\n        }\n        gxdraw(x,y);\n      } else {\n        incr = 0.03;\n        if (xdif/ydif<0.3) incr = 0.02;\n        ynum = (gaint)(ydif/incr);\n        slope = (x-oldx)/(y-oldy);\n        xx = oldx; yy = oldy;\n        if (y < oldy) incr = -1.0 * incr;\n        for (i=0; i<ynum; i++) {\n          xx = xx + incr*slope;\n          yy = yy + incr;\n          gxdraw(xx,yy);\n        }\n        gxdraw(x,y);\n      }\n    } \n  } else {\n    gxdraw (x,y);\n  }\n}\n\n/* Set software linestyle */\n\nvoid gxstyl (gaint style) {              /* Set line style  */\n  if (style==-9) style=1;\n  lstyle=style;\n  if (style==2) {\n    dnum=1;\n    dash[0]=0.25;\n    dash[1]=0.1;  }\n  else if (style==3) {\n    dnum=1;\n    dash[0]=0.03;\n    dash[1]=0.03;   }\n  else if (style==4) {\n    dnum=3;\n    dash[0]=0.25;\n    dash[1]=0.1;\n    dash[2]=0.1;\n    dash[3]=0.1;   }\n  else if (style==5) {\n    dnum=1;\n    dash[0]=0.01;\n    dash[1]=0.08;  }\n  else if (style==6) {\n    dnum=3;\n    dash[0]=0.15;\n    dash[1]=0.08;\n    dash[2]=0.01; ;\n    dash[3]=0.08;   }\n  else if (style==7) {\n    dnum=5;\n    dash[0]=0.15;\n    dash[1]=0.08;\n    dash[2]=0.01;\n    dash[3]=0.08;\n    dash[4]=0.01;\n    dash[5]=0.08;  }\n  else lstyle=0;\n  slen=dash[0]; jpen=2; dpnt=0;\n}\n\n\n/* Move and draw with linestyles and clipping */\n\nvoid gxplot (gadouble x, gadouble y, gaint ipen ) {    /* Move or draw  */\ngadouble x1,y1;\n\n  if (lstyle<2) {\n     if (ipen==2) gxdraw (x,y);\n     else gxmove (x,y);\n     xsave=x; ysave=y;\n     return;\n  }\n  if (ipen==3) {\n    slen=dash[0];\n    dpnt=0;\n    jpen=2;\n    xsave=x;\n    ysave=y;\n    gxmove (x,y);\n    return;\n  }\n  alen=hypot ((x-xsave),(y-ysave));\n  if (alen<0.001) return;\n  while (alen>slen) {\n    x1=xsave+(x-xsave)*(slen/alen);\n    y1=ysave+(y-ysave)*(slen/alen);\n    if (jpen==2) gxdraw (x1,y1);\n            else gxmove (x1,y1);\n    dpnt+=1;\n    if (dpnt>dnum) dpnt=0;\n    slen=slen+dash[dpnt];\n    jpen+=1;\n    if (jpen>3) jpen=2;\n  }\n  slen=slen-alen;\n  xsave=x;\n  ysave=y;\n  if (jpen==2) gxdraw (x,y);\n          else gxmove (x,y);\n  if (slen<0.001) {\n    dpnt+=1;\n    if (dpnt>dnum) dpnt=0;\n    slen=dash[dpnt];\n    jpen+=1;\n    if (jpen>3) jpen=2;\n  }\n}\n\n/* Specify software clip region.  */\n\nvoid gxclip (gadouble xmin, gadouble xmax, gadouble ymin, gadouble ymax) {\ngadouble clxmin,clxmax,clymin,clymax;\n\n  /* for software clipping */\n  clminx = xmin;\n  clmaxx = xmax;\n  clminy = ymin;\n  clmaxy = ymax;\n  if (clminx<0.0) clminx = 0.0;\n  if (clmaxx>xsize) clmaxx = xsize;\n  if (clminy<0.0) clminy = 0.0;\n  if (clmaxy>ysize) clmaxy = ysize;\n\n  /* specify the hardware clip region, and put it in the metabuffer as well */\n  gxvcon(clminx,clminy,&clxmin,&clymin);\n  gxvcon(clmaxx,clmaxy,&clxmax,&clymax);\n  if (intflg) dsubs.gxdclip(clxmin,clxmax,clymin,clymax);\n  hout4(-23,clxmin,clxmax,clymin,clymax); \n}\n\n/* Constants for linear scaling */\n\nstatic gadouble xm,xb,ym,yb;\n\n/* Specify low level linear scaling (scaling level 1) */\n\nvoid gxscal (gadouble xmin, gadouble xmax, gadouble ymin, gadouble ymax,\n             gadouble smin, gadouble smax, gadouble tmin, gadouble tmax){\n  xm=(xmax-xmin)/(smax-smin);\n  xb=xmin-(xm*smin);\n  ym=(ymax-ymin)/(tmax-tmin);\n  yb=ymin-(ym*tmin);\n}\n\n/* Constants for virtual page scaling */\n\nstatic gadouble vxm,vxb,vym,vyb;\n\n/* Specify virtual page scaling. \n   Input args are as follows:\n     xmax,ymax == virtual page sizes\n     smin,smax == real page X-coordinates of virtual page\n     tmin,tmax == real page Y-coordinates of virtual page\n*/\n\nvoid gxvpag (gadouble xmax, gadouble ymax,\n\t     gadouble smin, gadouble smax, gadouble tmin, gadouble tmax){\ngadouble xmin, ymin;\n  /* set virtual page size */\n  xmin = 0.0;\n  ymin = 0.0;\n  xsize = xmax;  \n  ysize = ymax;  \n  /* check if virtual page coordinates extend beyond the real page size */\n  if (smin<0.0) smin=0.0;\n  if (smax>rxsize) smax = rxsize;\n  if (tmin<0.0) tmin=0.0;\n  if (tmax>rysize) tmax = rysize;\n  /* set clipping area to virtual page */\n  clminx = 0.0;\n  clmaxx = xmax;\n  clminy = 0.0;\n  clmaxy = ymax;\n  /* if virtual page is small, set a flag to reduce line thickness */\n  if ((smax-smin)/rxsize < 0.49 || (tmax-tmin)/rysize < 0.49) lwflg = 1;\n  else lwflg = 0;\n  /* set up constants for virtual page scaling */\n  vxm=(smax-smin)/(xmax-xmin);\n  vxb=smin-(vxm*xmin);\n  vym=(tmax-tmin)/(ymax-ymin);\n  vyb=tmin-(vym*ymin);\n  /* For non-software clipping ... put coordinates in the metabuffer and tell the hardware */\n  gxclip(clminx,clmaxx,clminy,clmaxy); \n}\n\n/* Do virtual page scaling conversion */\n\nvoid gxvcon (gadouble s, gadouble t, gadouble *x, gadouble *y) {  /* positions, real->virtual */\n  *x = s*vxm+vxb;\n  *y = t*vym+vyb;\n}\n\nvoid gxvcon2 (gadouble s, gadouble t, gadouble *x, gadouble *y) {  /* characters, real->virtual */\n  *x = s*vxm;\n  *y = t*vym;\n}\n \nvoid gxppvp (gadouble x, gadouble y, gadouble *s, gadouble *t) {   /* positions, virtual->real */\n  *s = (x-vxb)/vxm;\n  *t = (y-vyb)/vym;\n}\n\nvoid gxppvp2 (gadouble x, gadouble *s) {  /* character width, virtual->real */\n  *s = (x)/vxm;\n}\n\n\n/* Specify projection-level scaling, typically used for map\n   projections.  The address of the routine to perform the scaling\n   is provided.  This is scaling level 2, and is the level that\n   mapping is done. */\n\nvoid gxproj ( void (*fproj) (gadouble s, gadouble t, gadouble *x, gadouble *y)){\n\n  fconv=fproj;\n}\n\n/* Specify grid level scaling, typically used to convert a grid\n   to lat-lon values that can be input to the projection or linear\n   level scaling.  The address of a routine is provided to perform\n   the possibly non-linear scaling.  This is scaling level 3, and\n   is the level that contouring is done.  */\n\nvoid gxgrid ( void (*fproj) (gadouble s, gadouble t, gadouble *x, gadouble *y)){\n\n  gconv=fproj;\n}\n\n/* Convert coordinates at a particular level to level 0 coordinates\n   (hardware coords, 'inches').  The level of the input coordinates\n   is provided.  User projection and grid scaling routines are called\n   as needed.  */\n\nvoid gxconv (gadouble s, gadouble t, gadouble *x, gadouble *y, gaint level) { \n\n  if (level>2 && gconv!=NULL) (*gconv)(s,t,&s,&t);\n  if (level>1 && fconv!=0) (*fconv)(s,t,&s,&t);\n  if (level>0) {\n    s=s*xm+xb;\n    t=t*ym+yb;\n  }\n  *x=s;\n  *y=t;\n}\n\n/* Convert from level 0 coordinates (inches) to level 2 world\n   coordinates.  The back transform is done via conversion\n   linearly from level 0 to level 1, then calling the back\n   transform map routine, if available, to do level 1 to level\n   2 transform.  */\n\nvoid gxxy2w (gadouble x, gadouble y, gadouble *s, gadouble *t) { \n\n  /* Do level 0 to level 1 */\n  if (xm==0.0 || ym==0.0) {\n    *s = -999.9;\n    *t = -999.9;\n    return;\n  }\n  *s = (x-xb)/xm;\n  *t = (y-yb)/ym;\n\n  /* Do level 1 to level 2 */\n  if (bconv!=NULL) (*bconv)(*s,*t,s,t);\n}\n\n/* Allow caller to specify a routine to do the back transform from\n   level 1 to level 2 coordinates. */\nvoid gxback ( void (*fproj) (gadouble s, gadouble t, gadouble *x, gadouble *y)){\n\n  bconv=fproj;\n}\n\n\n/* Convert from grid coordinates to map coordinates (level 3 to level 2) */\nvoid gxgrmp (gadouble s, gadouble t, gadouble *x, gadouble *y) {\n\n  if (gconv!=NULL) (*gconv)(s,t,&s,&t);\n  *x = s;\n  *y = t;\n}\n\n/* Convert an array of higher level coordinates to level 0 coordinates.\n   The conversion is done 'in place' and the input coordinates are\n   lost.  This routine performs the same function as coord except is\n   somewhat more efficient for many coordinate transforms.         */\n\nvoid gxcord (gadouble *coords, gaint num, gaint level) {\ngaint i;\ngadouble *xy;\n\n  if (level>2 && gconv!=NULL) {\n    xy=coords;\n    for (i=0; i<num; i++) {\n      (*gconv) (*xy,*(xy+1),xy,xy+1);\n      xy+=2;\n    }\n  }\n\n  if (level>1 && fconv!=NULL) {\n    xy=coords;\n    for (i=0; i<num; i++) {\n      (*fconv) (*xy,*(xy+1),xy,xy+1);\n      xy+=2;\n    }\n  }\n\n  if (level>0) {\n    xy=coords;\n    for (i=0; i<num; i++) {\n      *xy = *xy*xm+xb;\n      xy++;\n      *xy = *xy*ym+yb;\n      xy++;\n    }\n  }\n}\n\n/* Delete level 3 or level 2 and level 3 scaling.  \n   Level 1 scaling cannot be deleted.  */\n\nvoid gxrset (gaint level) {\n\n  if (level > 2) gconv=NULL;\n  if (level > 1) { fconv=NULL; bconv=NULL; }\n}\n\n/* Plot a color filled rectangle.  */\n\nvoid gxrecf (gadouble xlo, gadouble xhi, gadouble ylo, gadouble yhi) {\ngadouble x;\n\n  if (xlo>xhi) {\n    x = xlo;\n    xlo = xhi;\n    xhi = x;\n  }\n  if (ylo>yhi) {\n    x = ylo;\n    ylo = yhi;\n    yhi = x;\n  }\n  if (xhi<=clminx || xlo>=clmaxx || yhi<=clminy || ylo>=clmaxy) return;\n  if (xlo<clminx) xlo = clminx;\n  if (xhi>clmaxx) xhi = clmaxx;\n  if (ylo<clminy) ylo = clminy;\n  if (yhi>clmaxy) yhi = clmaxy;\n  gxvcon (xlo,ylo,&xlo,&ylo);\n  gxvcon (xhi,yhi,&xhi,&yhi);\n  hout4(-6,xlo,xhi,ylo,yhi);\n  if (intflg) {\n    dsubs.gxdrec (xlo, xhi, ylo, yhi);\n  }\n}\n\n/* Define fill pattern for rectangles and polygons. */\n\nvoid gxptrn (gaint typ, gaint den, gaint ang) {\n  hout3i(-12,typ,den,ang);\n  if (intflg) dsubs.gxdptn (typ, den, ang);\n}\n\n/* query line width */\n\ngaint gxqwid (void) {\n  return (lwide);\n}\n\n/* query color */\n\ngaint gxqclr (void) {\n  return (lcolor);\n}\n\n/* query style */\n\ngaint gxqstl (void) {\n  return (lstyle);\n}\n\n/* Draw markers 1-5. */\n\nvoid gxmark (gaint mtype, gadouble x, gadouble y, gadouble siz ) {\ngadouble xy[80],siz2;\ngaint i,ii,cnt;\n\n  siz2 = siz/2.0;\n  if (mtype==1) {                      /* cross hair */\n    gxmove (x,y-siz2);\n    gxdraw (x,y+siz2);\n    gxmove (x-siz2,y);\n    gxdraw (x+siz2,y);\n    return;\n  }\n  if (mtype==2 || mtype==3 || mtype==10 || mtype==11) { /* circles */\n    if (siz<0.1) ii = 30;\n    else if (siz<0.3) ii = 15;\n    else ii = 10;\n    if (mtype>3) ii = 15;\n    cnt = 0;\n    for (i=60; i<415; i+=ii) {\n      xy[cnt*2]   = x + siz2*cos((gadouble)(i)*pi/180.0);\n      xy[cnt*2+1] = y + siz2*sin((gadouble)(i)*pi/180.0);\n      cnt++;\n    }\n    xy[cnt*2]   = xy[0];\n    xy[cnt*2+1] = xy[1];\n    cnt++;\n    if (mtype==2) {                  /* Open circle */\n      gxmove(xy[0],xy[1]);\n      for (i=1; i<cnt; i++) gxdraw (xy[i*2],xy[i*2+1]);\n    } else if (mtype==3) {           /* Filled circle */\n      gxfill (xy,cnt);\n    } else if (mtype==10) {          /* Scattered fill */\n      gxmove(xy[6],xy[7]);\n      for (i=4; i<14; i++) gxdraw (xy[i*2],xy[i*2+1]);\n      gxmove(xy[30],xy[31]);\n      for (i=16; i<25; i++) gxdraw (xy[i*2],xy[i*2+1]);\n      gxdraw (xy[0],xy[1]);\n      for (i=8; i<14; i++) xy[i] = xy[i+18];\n      xy[14] = xy[2]; xy[15] = xy[3];\n      gxfill (xy+2,7);\n    } else if (mtype==11) {          /* Broken fill */\n      xy[0]  = x + siz2*cos(68.0*pi/180.0);\n      xy[1]  = y + siz2*sin(68.0*pi/180.0);\n      xy[8]  = x + siz2*cos(112.0*pi/180.0);\n      xy[9]  = y + siz2*sin(112.0*pi/180.0);\n      xy[24] = x + siz2*cos(248.0*pi/180.0);\n      xy[25] = y + siz2*sin(248.0*pi/180.0);\n      xy[32] = x + siz2*cos(292.0*pi/180.0);\n      xy[33] = y + siz2*sin(292.0*pi/180.0);\n      gxmove(xy[0],xy[1]);\n      for (i=1; i<5; i++) gxdraw (xy[i*2],xy[i*2+1]);\n      gxmove(xy[24],xy[25]);\n      for (i=13; i<17; i++) gxdraw (xy[i*2],xy[i*2+1]);\n      xy[26] = xy[8]; xy[27] = xy[9];\n      gxfill (xy+8,10);\n      xy[50] = xy[0]; xy[51] = xy[1];\n      gxfill (xy+32,10);\n    }\n    return;\n  }\n  if (mtype==4 || mtype==5) {          /* Draw sqaures */\n    xy[0] = x-siz2; xy[1] = y+siz2;\n    xy[2] = x+siz2; xy[3] = y+siz2;\n    xy[4] = x+siz2; xy[5] = y-siz2;\n    xy[6] = x-siz2; xy[7] = y-siz2;\n    xy[8] = xy[0]; xy[9] = xy[1];\n    if (mtype==4) {\n      gxmove (xy[0],xy[1]);\n      for (i=1; i<5; i++) gxdraw (xy[i*2],xy[i*2+1]);\n    } else {\n      gxfill (xy,5);\n    }\n    return;\n  }\n  if (mtype==6) {                      /* ex marks the spot */\n    gxmove (x-siz2*0.71,y-siz2*0.71);\n    gxdraw (x+siz2*0.71,y+siz2*0.71);\n    gxmove (x-siz2*0.71,y+siz2*0.71);\n    gxdraw (x+siz2*0.71,y-siz2*0.71);\n    return;\n  }\n  if (mtype==7 || mtype==12) {   /* Open or closed diamond */\n    gxmove (x-siz2*0.75,y);\n    gxdraw (x,y+siz2*1.1);\n    gxdraw (x+siz2*0.75,y);\n    gxdraw (x,y-siz2*1.1);\n    gxdraw (x-siz2*0.75,y);\n    if (mtype==12) {\n      xy[0] = x-siz2*0.75; xy[1]=y;\n      xy[2] = x; xy[3] = y+siz2*1.1;\n      xy[4] = x+siz2*0.75; xy[5] = y;\n      xy[6] = x; xy[7] = y-siz2*1.1;\n      xy[8] = x-siz2*0.75; xy[9] = y;\n      gxfill(xy,4);\n    }\n    return;\n  }\n  if (mtype==8 || mtype==9) {          /* Triangles */\n    xy[0] = x; xy[1] = y+siz2;\n    xy[2] = x+siz2*0.88; xy[3] = y-siz2*0.6;\n    xy[4] = x-siz2*0.88; xy[5] = y-siz2*0.6;\n    xy[6] = x; xy[7] = y+siz2;\n    if (mtype==8) {\n      gxmove (xy[0],xy[1]);\n      for (i=1; i<4; i++) gxdraw (xy[i*2],xy[i*2+1]);\n    } else {\n      gxfill (xy,4);\n    }\n    return;\n  }\n}\n\n/* Plot centered title.  Only supports angle of 0 and 90 */\n\nvoid gxtitl (char *chrs, gadouble x, gadouble y, gadouble height,\n             gadouble width, gadouble angle) {\ngadouble xx,yy;\ngaint len,i;\n\n  i = 0;\n  len = 0;\n  while (*(chrs+i)) {\n    if (*(chrs+i)!=' ') len=i+1;\n    i++;\n  }\n  if (len==0) return;\n\n  xx = x; yy = y;\n  if (angle > 45.0) {\n    yy = y - 0.5*width*(gadouble)len;\n  } else {\n    xx = x - 0.5*width*(gadouble)len;\n  }\n  gxchpl (chrs, len, xx, yy, height, width, angle);\n}\n\n/* Do polygon fill.  It is assumed the bulk of the work will be done\n   in hardware.  We do perform clipping at this level, and\n   actually do the work to clip at the clipping boundry.       */\n\nvoid gxfill (gadouble *xy, gaint num) {\ngadouble *r, *out, *buff, x, y, xybuff[40];\ngaint i,flag,onum,aflag;\n\n  if (num<3) return;\n  /* Do clipping.    */\n\n  aflag = 0;\n  if (num<10) buff = xybuff;\n  else {\n    buff = (gadouble *)malloc(sizeof(gadouble)*num*4);\n    if (buff==NULL) {\n      printf(\"Memory allocation error in gxfill.  Can't fill contour\\n\");\n      return;\n    }\n    aflag = 1;\n  }\n\n  r = xy;\n  out = buff;\n  onum = 0;\n  flag = 0;\n  if (*r<clminx || *r>clmaxx || *(r+1)<clminy || *(r+1)>clmaxy) flag=1;\n  for (i=0; i<num; i++) {\n    if (*r<clminx || *r>clmaxx || *(r+1)<clminy || *(r+1)>clmaxy) {\n      if (!flag) {\n        bdterp (*(r-2), *(r-1), *r, *(r+1), &x, &y);\n        *out = x;\n        *(out+1) = y;\n        onum++;\n        out+=2;\n      }\n      *out = *r;\n      *(out+1) = *(r+1);\n      if (*r<clminx) *out = clminx;\n      if (*r>clmaxx) *out = clmaxx;\n      if (*(r+1)<clminy) *(out+1) = clminy;\n      if (*(r+1)>clmaxy) *(out+1) = clmaxy;\n      onum++;\n      out+=2;\n      flag = 1;\n    } else {\n      if (flag) {\n        bdterp (*(r-2), *(r-1), *r, *(r+1), &x, &y);\n        *out = x;\n        *(out+1) = y;\n        onum++;\n        out+=2;\n      }\n      *out = *r;\n      *(out+1) = *(r+1);\n      onum++;\n      out+=2;\n      flag = 0;\n    }\n    r+=2;\n  }\n\n  r = buff;\n  for (i=0; i<onum; i++) {\n    gxvcon (*r,*(r+1),r,r+1);\n    r+=2;\n  }\n\n  /* Output to metabuffer */\n\n  hout1(-7,onum);             /* start a polygon fill */\n  r = buff;\n  hout2(-10,*r,*(r+1));       /* move to first point in polygon */\n  r+=2;\n  for (i=1; i<onum; i++) {\n    hout2(-11,*r,*(r+1));     /* draw to next point in polygon */\n    r+=2;\n  }\n  hout0(-8);                  /* terminate polygon */\n\n  /* Output to hardware */\n\n  if (intflg) dsubs.gxdfil (buff, onum);\n  if (aflag) free(buff);\n}\n\n/* Perform edge interpolation for clipping  */\n\nvoid bdterp (gadouble x1, gadouble y1, gadouble x2, gadouble y2,\n             gadouble *x, gadouble *y) {\n\n  if (x1<clminx || x2<clminx || x1>clmaxx || x2>clmaxx) {\n    *x = clminx;\n    if (x1>clmaxx || x2>clmaxx) *x = clmaxx;\n    *y = y1 - ((y1-y2)*(x1-*x)/(x1-x2));\n    if (*y<clminy || *y>clmaxy) goto sideh;\n    return;\n  }\n\n  sideh:\n\n  if (y1<clminy || y2<clminy || y1>clmaxy || y2>clmaxy) {\n    *y = clminy;\n    if (y1>clmaxy || y2>clmaxy) *y = clmaxy;\n    *x = x1 - ((x1-x2)*(y1-*y)/(y1-y2));\n    return;\n  }\n}\n\nvoid gxbutn (gaint bnum, struct gbtn *pbn) {\n  hout1(-20,bnum);\n  dsubs.gxdpbn(bnum, pbn, 0, 0, -1);\n}\n\n/* Set mask for a rectangular area */\n\nvoid gxmaskrec (gadouble xlo, gadouble xhi, gadouble ylo, gadouble yhi) {\ngaint siz,i,j,pos,ilo,ihi,jlo,jhi,jj;\n\n  if (maskflg == -888) return;\n\n  if (mask==NULL) {                     /* If not allocated yet, now's the time */\n    siz = (gaint)(rxsize*rysize*10000.0); \n    mask = (char *)malloc(siz);\n    if (mask==NULL) {\n      printf (\"Error allocating mask array memory\\n\");\n      printf (\"Execution continues with no mask\\n\");\n      maskflg = -888;\n      return;\n    }\n    masksize = siz;\n    maskx = (gaint)(rxsize*100.0);\n    gxmaskclear();\n  } \n  maskflg = 1;\n  \n  /* do clipping for the mask */\n  if (xlo<clminx && xhi<clminx) return;\n  if (xlo>clmaxx && xhi>clmaxx) return;\n  if (ylo<clminy && yhi<clminy) return;\n  if (ylo>clmaxy && yhi>clmaxy) return;\n\n  if (xlo<clminx) xlo=clminx;\n  if (xhi>clmaxx) xhi=clmaxx;\n  if (ylo<clminy) ylo=clminy;\n  if (yhi>clmaxy) yhi=clmaxy;\n\n  /* convert to virtual page coordinates */\n  gxvcon(xlo,ylo,&xlo,&ylo);\n  gxvcon(xhi,yhi,&xhi,&yhi);\n  \n  ilo = (gaint)(xlo*100.0);\n  ihi = (gaint)(xhi*100.0);\n  jlo = (gaint)(ylo*100.0);\n  jhi = (gaint)(yhi*100.0);\n  if (ilo<0) ilo = 0;\n  if (ihi<0) ihi = 0;\n  if (ilo>=maskx) ilo = maskx-1;\n  if (ihi>=maskx) ihi = maskx-1;\n  for (j=jlo; j<=jhi; j++) {\n    jj = j*maskx;\n    for (i=ilo; i<=ihi; i++) {\n      pos = jj+i;\n      if (pos>=0 && pos<masksize) *(mask+pos) = '1';\n    }\n  }\n}\n\n/* Given a rectangular area, check to see if it overlaps with any existing\n   mask.  This is used to avoid overlaying contour labels. */\n\ngaint gxmaskrq (gadouble xlo, gadouble xhi, gadouble ylo, gadouble yhi) {\ngaint i,j,ilo,ihi,jlo,jhi,jj,pos;\n\n  if (maskflg == -888) return(0);\n  if (mask==NULL) return (0);\n  if (maskflg==0) return (0);\n\n  /* If query region is partially or completely outside of clip area, indicate an overlap */\n\n  if (xlo<clminx || xhi>clmaxx || ylo<clminy || yhi>clmaxy) return(1);\n\n  /* convert to virtual page coordinates */\n  gxvcon(xlo,ylo,&xlo,&ylo);\n  gxvcon(xhi,yhi,&xhi,&yhi);\n  \n  ilo = (gaint)(xlo*100.0);\n  ihi = (gaint)(xhi*100.0);\n  jlo = (gaint)(ylo*100.0);\n  jhi = (gaint)(yhi*100.0);\n  if (ilo<0) ilo = 0;\n  if (ihi<0) ihi = 0;\n  if (ilo>maskx) ilo = maskx;\n  if (ihi>maskx) ihi = maskx;\n  for (j=jlo; j<=jhi; j++) {\n    jj = j*maskx;\n    for (i=ilo; i<=ihi; i++) {\n      pos = jj+i;\n      if (pos>=0 && pos<masksize) {\n        if (*(mask+pos) == '1') return(1);\n      }\n    }\n  }\n  return (0);\n}\n\n/* Set mask to unset state */\n\nvoid gxmaskclear(void) {\ngaint i;   \n  if (maskflg > 0)  {\n    for (i=0; i<masksize; i++) *(mask+i) = '0';\n    maskflg = 0;\n  }\n}\n\n#endif  /* matches #ifndef STNDALN */\n\n\n/* Query env symbol */\n\nchar *gxgsym(char *ch) {\n  return (getenv(ch));\n}\n\n/* Construct full file path name from env symbol or default */\n\nchar *gxgnam(char *ch) {\nchar *fname=NULL, *ddir;\ngaint len,i,j;\nsize_t sz;\n\n  /* calc partial length of output string */\n  len = 0;\n  i = 0;\n  while (*(ch+i)) { i++; len++;}\n\n  /* Query the env symbol */\n  ddir = gxgsym(\"GADDIR\");\n\n  /* calc the total length of the output string */\n  if (ddir==NULL) {\n    i = 0;\n    while (*(datad+i)) { i++; len++;}\n  } else {\n    i = 0;\n    while (*(ddir+i)) { i++; len++;}\n  }\n\n  /* Allocate memory for the output */\n  sz = len+15;\n  fname = (char *)malloc(sz);\n  if (fname==NULL) {\n    printf (\"Memory allocation error in data set open\\n\");\n    return (NULL);\n  }\n\n  /* fill in the directory depending on the value of the env var */\n  if (ddir==NULL) {\n    i = 0;\n    while (*(datad+i)) {\n      *(fname+i) = *(datad+i);\n      i++;\n    }\n  } else if (*ddir=='.') {\n    i = 0;\n  } else {\n    i = 0;\n    while (*(ddir+i)) {\n      *(fname+i) = *(ddir+i);\n      i++;\n    }\n  }\n\n  /* Insure a slash between dir name and file name */\n  if (i!=0 && *(fname+i-1)!='/') {\n    *(fname+i) = '/';\n    i++;\n  }\n\n  /* fill in the file name */\n  j = 0;\n  while (*(ch+j)) {\n    *(fname+i) = *(ch+j);\n    i++; j++;\n  }\n  *(fname+i) = '\\0';\n\n  return (fname);\n}\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/src/gradspy.c": "/* Copyright (C) 1988-2018 by George Mason University. See file COPYRIGHT for more information. */\n\n/* This is the source file for the GrADS Python extension. \n   It gets compiled with the command 'python setup.py install'\n   Originally authored by Brian Doty and Jennifer Adams in April 2018.\n*/\n\n\n#define NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION\n#include <Python.h>\n#include <numpy/arrayobject.h>\n#include <dlfcn.h>\n#include \"gradspy.h\"\n\nstatic int gapyerror;\nstatic int gapystart;\n\n/* This method starts GrADS */\n\nstatic PyObject* start(PyObject* self, PyObject *args) {\nPyObject *item;\nint i,rc,siz;\nPy_ssize_t tupsiz;\nchar *ganame = \"gradspy\";\nchar *arglist[50];\n\n    if (gapystart) {\n      PyErr_SetString(PyExc_TypeError, \"start error: method already invoked -- use 'cmd' or 'result'\");\n      return NULL;\n    }\n\n    if (gapyerror) {\n      PyErr_SetString(PyExc_TypeError, \"start error: prior initialization error\");\n      return NULL;\n    }\n\n    tupsiz = PyTuple_Size(args);\n    siz = (int)tupsiz;\n\n    arglist[0] = ganame;\n    for (i=0; i<siz; i++) {\n      item = PyTuple_GetItem(args,i);\n      if (PyBytes_Check(item) != 1) {\n         PyErr_SetString(PyExc_TypeError, \"start error: args must be strings\");\n         return NULL;\n      } \n      arglist[i+1] = PyBytes_AsString(item);\n    }\n    rc = (*pgainit)(siz+1,arglist); /* Call gamain */\n    if (rc == 0) gapystart = 1;     /* If all ok, set the flag */\n\n    return Py_BuildValue(\"i\", rc);  \n}\n\n/* This method executes a grads command.\n   It calls subroutine gagsdo in gauser.c and returns any resulting text */\n\nstatic PyObject* cmd(PyObject* self,PyObject *args) {\n  char *str, *s;\n  PyObject *resstr;\n  int rc;\n  if (gapyerror) {\n    PyErr_SetString(PyExc_TypeError, \"cmd error: prior initialization error\");\n    return NULL;\n  }\n  if (!gapystart) {\n    PyErr_SetString(PyExc_TypeError, \"cmd error: start method failed or not called\");\n    return NULL;\n  }\n  \n  if (!PyArg_ParseTuple (args,\"s\", &s)) return NULL;\n  str = (*pdocmd)(s,&rc);\n  \n  if (rc<0) exit(0);\n  resstr = Py_BuildValue(\"s\", str);\n  free(str);\n  return resstr;\n}\n\n/* This method evaluates a grads expression and returns the result in a Python tuple.\n   The returned tuple has seven elements (one integer and six PyObjects):\n   1. The return code contains the number of varying dimensions (rank) \n      of the result grid; if it is negative, an error occurred.\n   2. 2D NumPy array containing the result grid (with NaN for missing data values) \n   3. 1D NumPy array of X coordinate values (NaN if X is not varying) \n   4. 1D NumPy array of Y coordinate values (NaN if Y is not varying)\n   5. 1D NumPy array of Z coordinate values (NaN if Z is not varying)\n   6. 1D NumPy array of grid metadata (integers)\n   7. 1D NumPy array of grid metadata (doubles) \n*/\n\nstatic PyObject* result(PyObject* self, PyObject *args) {\n  PyArrayObject *res,*xvals,*yvals,*zvals,*iinfo,*dinfo,*junk;\n  PyObject *rval;\n  struct pygagrid pygr;\n  double *r,*s,*t;\n  char *expr,*ch;\n  int i,j,*ir,*is,rc;\n  npy_intp dims[2],dim[1];\n  int nd;\n  \n  if (gapyerror) {\n    PyErr_SetString(PyExc_TypeError, \"result error: prior initialization error\");\n    return NULL;\n  }\n  if (!gapystart) {\n    PyErr_SetString(PyExc_TypeError, \"result error: start method failed or not called\");\n    return NULL;\n  }\n\n  /* Evaluate the expression. GrADS will populate the pygr structure with data and metadata */\n  PyArg_ParseTuple (args,\"s\",&expr); \n  rc = (*pdoexpr)(expr,&pygr);\n\n  /* Check for an error */\n  if (rc<0) {\n    /* something went wrong, so we return the tuple with a negative return code, \n       and the remaining elements contain a single value: nan */\n    dims[0] = 1;\n    dims[1] = 1;\n    nd = 2;\n    res = (PyArrayObject *) PyArray_SimpleNew(nd,dims,NPY_DOUBLE);\n    r = (double *)PyArray_DATA(res);\n    *r = strtod(\"nan\",&ch);\n    dim[0] = 1;\n    nd = 1;\n    junk = (PyArrayObject *) PyArray_SimpleNew(nd,dim,NPY_DOUBLE);\n    r = (double *)PyArray_DATA(junk);\n    *r = strtod(\"nan\",&ch);\n    rval =  Py_BuildValue(\"iNNNNNN\",rc,res,junk,junk,junk,junk,junk); \n    return(rval);\n  }\n  \n  /* set up a PyArray for the result grid, copy data from pygr structure */\n  dims[0] = pygr.jsiz; \n  dims[1] = pygr.isiz;\n  nd = 2;\n  res = (PyArrayObject *) PyArray_SimpleNew(nd,dims,NPY_DOUBLE);\n  r = (double *)PyArray_DATA(res);\n  s = r; \n  t = pygr.grid;\n  for (j=0; j<pygr.jsiz; j++) {\n    for (i=0; i<pygr.isiz; i++) {\n      *s = *(t+j*pygr.isiz+i);\n      s++; \n    }\n  }\n\n  /* set up a PyArray for the X coordinate values, copy data from pygr structure */\n  dim[0] = pygr.xsz;\n  nd = 1;\n  xvals = (PyArrayObject *) PyArray_SimpleNew(nd,dim,NPY_DOUBLE);\n  r = (double *)PyArray_DATA(xvals);\n  s = r; \n  t = pygr.xvals;\n  for (i=0; i<pygr.xsz; i++) {\n    *s = *(t+i);\n    s++; \n  } \n  \n  /* set up another PyArray for the Y coordinate values, copy data from pygr structure */\n  dim[0] = pygr.ysz; \n  yvals = (PyArrayObject *) PyArray_SimpleNew(nd,dim,NPY_DOUBLE);\n  r = (double *)PyArray_DATA(yvals);\n  s = r; \n  t = pygr.yvals;\n  for (i=0; i<pygr.ysz; i++) {\n    *s = *(t+i);\n    s++; \n  } \n  \n  /* set up a PyArray for the Z coordinate values, copy data from pygr structure */\n  dim[0] = pygr.zsz; \n  zvals = (PyArrayObject *) PyArray_SimpleNew(nd,dim,NPY_DOUBLE);\n  r = (double *)PyArray_DATA(zvals);\n  s = r; \n  t = pygr.zvals;\n  for (i=0; i<pygr.zsz; i++) {\n    *s = *(t+i);\n    s++; \n  } \n\n  /* Set up a PyArray for metadata: 14 integers copied from pygr */\n  dim[0] = 14;\n  iinfo = (PyArrayObject *) PyArray_SimpleNew(nd,dim,NPY_INT);\n  ir = (int *)PyArray_DATA(iinfo);\n  is = ir; \n  *(is+0)  = pygr.xsz;      /* X (lon)  size (1 if not varying) */\n  *(is+1)  = pygr.ysz;      /* Y (lat)  size (1 if not varying) */\n  *(is+2)  = pygr.zsz;      /* Z (lev)  size (1 if not varying) */\n  *(is+3)  = pygr.tsz;      /* T (time) size (1 if not varying) */  \n  *(is+4)  = pygr.esz;      /* E (ens)  size (1 if not varying) */\n  *(is+5)  = pygr.syr;      /* T start time -- year   */\t\t\t  \n  *(is+6)  = pygr.smo;      /* T start time -- month  */\n  *(is+7)  = pygr.sdy;      /* T start time -- day    */\n  *(is+8)  = pygr.shr;      /* T start time -- hour   */\n  *(is+9)  = pygr.smn;      /* T start time -- minute */\t  \n  *(is+10) = pygr.tincr;    /* T increment */\t\t  \n  *(is+11) = pygr.ttyp;     /* type of T increment (0==months, 1==minutes) */\n  *(is+12) = pygr.tcal;     /* T calendar type (0==normal, 1==365-day) */\n  *(is+13) = pygr.estrt;    /* E start (E increment is always 1) */\n\n\n  /* Set up another PyArray for more metadata: 6 doubles copied from pygr */\n  dim[0] = 6;\n  dinfo = (PyArrayObject *) PyArray_SimpleNew(nd,dim,NPY_DOUBLE);\n  r = (double *)PyArray_DATA(dinfo);\n  s = r; \n  *(s+0) = pygr.xstrt;      /* X start value (if linear) */\n  *(s+1) = pygr.xincr;      /* X increment (negative if non-linear) */\n  *(s+2) = pygr.ystrt;      /* Y start value (if linear) */\n  *(s+3) = pygr.yincr;      /* Y increment (negative if non-linear) */\n  *(s+4) = pygr.zstrt;      /* Z start value (if linear) */\n  *(s+5) = pygr.zincr;      /* Z increment (negative if non-linear) */\n  \n\n  /* We're done copying data, so we can release the pypgr structure on the GrADS side */\n  (*pyfre)(&pygr);\n  \n  /* Returns the tuple containing the return code, the result, and the metadata back to Python. \n     This routine passes \"ownership\" of the object reference to our result back to Python\n     by decrementing the reference count of the numpy result object */\n  rval =  Py_BuildValue(\"iNNNNNN\",rc,res,xvals,yvals,zvals,iinfo,dinfo);\n  return(rval);\n}\n\n\n\nstatic PyMethodDef gradspy_funcs[] = {\n    {\"start\",  (PyCFunction)start,  METH_VARARGS, \"Start GrADS with desired switches and arguments\"},\n    {\"cmd\",    (PyCFunction)cmd,    METH_VARARGS, \"Issue a command to GrADS\"},\n    {\"result\", (PyCFunction)result, METH_VARARGS, \"Retrieve a grid using a GrADS expression\"},\n    {NULL}\n};\n\n/* This routine gets called when gradspy is imported into Python */\n\nvoid initgradspy(void) {\nvoid *handle;\nconst char *error;\n\n  gapyerror = 0;\n\n  Py_InitModule3(\"gradspy\", gradspy_funcs,\"GrADS extension modlues for Python\");\n\n  handle = dlopen (\"libgradspy.so\",    RTLD_LAZY | RTLD_GLOBAL );  /* for linux */\n/*   handle = dlopen (\"libgradspy.dylib\", RTLD_LAZY | RTLD_GLOBAL );  /\\* for mac   *\\/ */\n  if (!handle) {\n    fputs (dlerror(), stderr);\n    fputs (\"\\n\", stderr);\n    gapyerror = 1;\n  } \n  else {\n\n    pgainit = dlsym(handle, \"gamain\");    /* starts GrADS */\n    if ((error = dlerror()) != NULL)  {\n      fputs(error, stderr);\n      fputs (\"\\n\", stderr);\n      gapyerror = 1;\n    } \n    \n    pdocmd = dlsym(handle, \"gagsdo\");     /* executes a command */\n    if ((error = dlerror()) != NULL)  {\n      fputs(error, stderr);\n      fputs (\"\\n\", stderr);\n      gapyerror = 1;\n    }\n    \n    pdoexpr = dlsym(handle, \"gadoexpr\");  /* evaluates an expression */\n    if ((error = dlerror()) != NULL)  {\n      fputs(error, stderr);\n      fputs (\"\\n\", stderr);\n      gapyerror = 1;\n    }\n    \n    pyfre = dlsym(handle, \"gapyfre\");     /* releases memory after data is copied to Python */\n    if ((error = dlerror()) != NULL)  {\n      fputs(error, stderr);\n      fputs (\"\\n\", stderr);\n      gapyerror = 1;\n    }\n    \n    /* This call makes sure that the module which implements the array\n       type has been imported, and initializes a pointer array through\n       which the NumPy functions are called. It is a bit of a black box */\n    import_array();\n\n  }\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/etc/ltmain.sh": "\n# libtool (GNU libtool) 2.4.2\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n# 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#       --config             show all configuration variables\n#       --debug              enable verbose shell tracing\n#   -n, --dry-run            display commands without modifying any files\n#       --features           display basic configuration information and exit\n#       --mode=MODE          use operation mode MODE\n#       --preserve-dup-deps  don't remove duplicate dependency libraries\n#       --quiet, --silent    don't print informational messages\n#       --no-quiet, --no-silent\n#                            print informational messages (default)\n#       --no-warn            don't display warning messages\n#       --tag=TAG            use configuration variables from tag TAG\n#   -v, --verbose            print more informational messages than default\n#       --no-verbose         don't print the extra informational messages\n#       --version            print version information\n#   -h, --help, --help-all   print short, long, or detailed help message\n#\n# MODE must be one of the following:\n#\n#         clean              remove files from the build directory\n#         compile            compile a source file into a libtool object\n#         execute            automatically set library path, then run a program\n#         finish             complete the installation of libtool libraries\n#         install            install libraries or executables\n#         link               create a library or an executable\n#         uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.  When passed as first option,\n# `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#         host-triplet:\t$host\n#         shell:\t\t$SHELL\n#         compiler:\t\t$LTCC\n#         compiler flags:\t\t$LTCFLAGS\n#         linker:\t\t$LD (gnu? $with_gnu_ld)\n#         $progname:\t(GNU libtool) 2.4.2\n#         automake:\t$automake_version\n#         autoconf:\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n# GNU libtool home page: <http://www.gnu.org/software/libtool/>.\n# General help using GNU software: <http://www.gnu.org/gethelp/>.\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=2.4.2\nTIMESTAMP=\"\"\npackage_revision=1.3337\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# NLS nuisances: We save the old values to restore during execute mode.\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\nLC_ALL=C\nLANGUAGE=C\nexport LANGUAGE LC_ALL\n\n$lt_unset CDPATH\n\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n\n\n: ${CP=\"cp -f\"}\ntest \"${ECHO+set}\" = set || ECHO=${as_echo-'printf %s\\n'}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n    func_dirname_result=`$ECHO \"${1}\" | $SED \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n} # func_dirname may be replaced by extended shell implementation\n\n\n# func_basename file\nfunc_basename ()\n{\n    func_basename_result=`$ECHO \"${1}\" | $SED \"$basename\"`\n} # func_basename may be replaced by extended shell implementation\n\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n    # Extract subdirectory from the argument.\n    func_dirname_result=`$ECHO \"${1}\" | $SED -e \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n    func_basename_result=`$ECHO \"${1}\" | $SED -e \"$basename\"`\n} # func_dirname_and_basename may be replaced by extended shell implementation\n\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n    case ${2} in\n      .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n    esac\n} # func_stripname may be replaced by extended shell implementation\n\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar='s,^/\\([^/]*\\).*$,\\1,'\npathcdr='s,^/[^/]*,,'\nremovedotparts=':dotsl\n\t\ts@/\\./@/@g\n\t\tt dotsl\n\t\ts,/\\.$,/,'\ncollapseslashes='s@/\\{1,\\}@/@g'\nfinalslash='s,/*$,/,'\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# The name of this program:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s,[].[^$\\\\*\\/],\\\\&,g'\n\n# Sed substitution that converts a w32 file name or path\n# which contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nlt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }$*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }\"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname: ${opt_mode+$opt_mode: }warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"$my_directory_path\" | $SED -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"$my_dir_list\" | $SED 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"$my_tmpdir\"\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"$1\" | $SED \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n# func_tr_sh\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n  case $1 in\n  [0-9]* | *[!a-zA-Z0-9_]*)\n    func_tr_sh_result=`$ECHO \"$1\" | $SED 's/^\\([0-9]\\)/_\\1/; s/[^a-zA-Z0-9_]/_/g'`\n    ;;\n  * )\n    func_tr_sh_result=$1\n    ;;\n  esac\n}\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $opt_debug\n\n    $SED -n '/(C)/!b go\n\t:more\n\t/\\./!{\n\t  N\n\t  s/\\n# / /\n\t  b more\n\t}\n\t:go\n\t/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/^#  *.*--help/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    echo\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help [NOEXIT]\n# Echo long help message to standard output and exit,\n# unless 'noexit' is passed as argument.\nfunc_help ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n\t:print\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(${AUTOMAKE-automake} --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(${AUTOCONF-autoconf} --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n\td\n     }\n     /^# .* home page:/b print\n     /^# General help using/b print\n     ' < \"$progpath\"\n    ret=$?\n    if test -z \"$1\"; then\n      exit $ret\n    fi\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $opt_debug\n\n    func_error \"missing argument for $1.\"\n    exit_cmd=exit\n}\n\n\n# func_split_short_opt shortopt\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nfunc_split_short_opt ()\n{\n    my_sed_short_opt='1s/^\\(..\\).*$/\\1/;q'\n    my_sed_short_rest='1s/^..\\(.*\\)$/\\1/;q'\n\n    func_split_short_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_short_opt\"`\n    func_split_short_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_short_rest\"`\n} # func_split_short_opt may be replaced by extended shell implementation\n\n\n# func_split_long_opt longopt\n# Set func_split_long_opt_name and func_split_long_opt_arg shell\n# variables after splitting LONGOPT at the `=' sign.\nfunc_split_long_opt ()\n{\n    my_sed_long_opt='1s/^\\(--[^=]*\\)=.*/\\1/;q'\n    my_sed_long_arg='1s/^--[^=]*=//'\n\n    func_split_long_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_long_opt\"`\n    func_split_long_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_long_arg\"`\n} # func_split_long_opt may be replaced by extended shell implementation\n\nexit_cmd=:\n\n\n\n\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\nnonopt=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n    eval \"${1}=\\$${1}\\${2}\"\n} # func_append may be replaced by extended shell implementation\n\n# func_append_quoted var value\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nfunc_append_quoted ()\n{\n    func_quote_for_eval \"${2}\"\n    eval \"${1}=\\$${1}\\\\ \\$func_quote_for_eval_result\"\n} # func_append_quoted may be replaced by extended shell implementation\n\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n    func_arith_result=`expr \"${@}\"`\n} # func_arith may be replaced by extended shell implementation\n\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n    func_len_result=`expr \"${1}\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n} # func_len may be replaced by extended shell implementation\n\n\n# func_lo2o object\nfunc_lo2o ()\n{\n    func_lo2o_result=`$ECHO \"${1}\" | $SED \"$lo2o\"`\n} # func_lo2o may be replaced by extended shell implementation\n\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n    func_xform_result=`$ECHO \"${1}\" | $SED 's/\\.[^.]*$/.lo/'`\n} # func_xform may be replaced by extended shell implementation\n\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n# Shorthand for --mode=foo, only valid as the first argument\ncase $1 in\nclean|clea|cle|cl)\n  shift; set dummy --mode clean ${1+\"$@\"}; shift\n  ;;\ncompile|compil|compi|comp|com|co|c)\n  shift; set dummy --mode compile ${1+\"$@\"}; shift\n  ;;\nexecute|execut|execu|exec|exe|ex|e)\n  shift; set dummy --mode execute ${1+\"$@\"}; shift\n  ;;\nfinish|finis|fini|fin|fi|f)\n  shift; set dummy --mode finish ${1+\"$@\"}; shift\n  ;;\ninstall|instal|insta|inst|ins|in|i)\n  shift; set dummy --mode install ${1+\"$@\"}; shift\n  ;;\nlink|lin|li|l)\n  shift; set dummy --mode link ${1+\"$@\"}; shift\n  ;;\nuninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n  shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n  ;;\nesac\n\n\n\n# Option defaults:\nopt_debug=:\nopt_dry_run=false\nopt_config=false\nopt_preserve_dup_deps=false\nopt_features=false\nopt_finish=false\nopt_help=false\nopt_help_all=false\nopt_silent=:\nopt_warning=:\nopt_verbose=:\nopt_silent=false\nopt_verbose=false\n\n\n# Parse options once, thoroughly.  This comes as soon as possible in the\n# script to make things like `--version' happen as quickly as we can.\n{\n  # this just eases exit handling\n  while test $# -gt 0; do\n    opt=\"$1\"\n    shift\n    case $opt in\n      --debug|-x)\topt_debug='set -x'\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\t$opt_debug\n\t\t\t;;\n      --dry-run|--dryrun|-n)\n\t\t\topt_dry_run=:\n\t\t\t;;\n      --config)\n\t\t\topt_config=:\nfunc_config\n\t\t\t;;\n      --dlopen|-dlopen)\n\t\t\toptarg=\"$1\"\n\t\t\topt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$optarg\"\n\t\t\tshift\n\t\t\t;;\n      --preserve-dup-deps)\n\t\t\topt_preserve_dup_deps=:\n\t\t\t;;\n      --features)\n\t\t\topt_features=:\nfunc_features\n\t\t\t;;\n      --finish)\n\t\t\topt_finish=:\nset dummy --mode finish ${1+\"$@\"}; shift\n\t\t\t;;\n      --help)\n\t\t\topt_help=:\n\t\t\t;;\n      --help-all)\n\t\t\topt_help_all=:\nopt_help=': help-all'\n\t\t\t;;\n      --mode)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_mode=\"$optarg\"\ncase $optarg in\n  # Valid mode arguments:\n  clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n  # Catch anything else as an error\n  *) func_error \"invalid argument for $opt\"\n     exit_cmd=exit\n     break\n     ;;\nesac\n\t\t\tshift\n\t\t\t;;\n      --no-silent|--no-quiet)\n\t\t\topt_silent=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-warning|--no-warn)\n\t\t\topt_warning=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-verbose)\n\t\t\topt_verbose=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --silent|--quiet)\n\t\t\topt_silent=:\nfunc_append preserve_args \" $opt\"\n        opt_verbose=false\n\t\t\t;;\n      --verbose|-v)\n\t\t\topt_verbose=:\nfunc_append preserve_args \" $opt\"\nopt_silent=false\n\t\t\t;;\n      --tag)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_tag=\"$optarg\"\nfunc_append preserve_args \" $opt $optarg\"\nfunc_enable_tag \"$optarg\"\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t;;\n      --help)\t\tfunc_help\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t;;\n\n      # Separate optargs to long options:\n      --*=*)\n\t\t\tfunc_split_long_opt \"$opt\"\n\t\t\tset dummy \"$func_split_long_opt_name\" \"$func_split_long_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      # Separate non-argument short options:\n      -\\?*|-h*|-n*|-v*)\n\t\t\tfunc_split_short_opt \"$opt\"\n\t\t\tset dummy \"$func_split_short_opt_name\" \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      --)\t\tbreak\t\t\t\t\t;;\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\" ;;\n      *)\t\tset dummy \"$opt\" ${1+\"$@\"};\tshift; break  ;;\n    esac\n  done\n\n  # Validate options:\n\n  # save first non-option argument\n  if test \"$#\" -gt 0; then\n    nonopt=\"$opt\"\n    shift\n  fi\n\n  # preserve --debug\n  test \"$opt_debug\" = : || func_append preserve_args \" --debug\"\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n      ;;\n  esac\n\n  $opt_help || {\n    # Sanity checks first:\n    func_check_version_match\n\n    if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n      func_fatal_configuration \"not configured to build any kind of library\"\n    fi\n\n    # Darwin sucks\n    eval std_shrext=\\\"$shrext_cmds\\\"\n\n    # Only execute mode is allowed to have -dlopen flags.\n    if test -n \"$opt_dlopen\" && test \"$opt_mode\" != execute; then\n      func_error \"unrecognized option \\`-dlopen'\"\n      $ECHO \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Change the help message to a mode-specific one.\n    generic_help=\"$help\"\n    help=\"Try \\`$progname --help --mode=$opt_mode' for more information.\"\n  }\n\n\n  # Bail if the options were screwed\n  $exit_cmd $EXIT_FAILURE\n}\n\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case \"$lt_sysroot:$1\" in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result=\"=$func_stripname_result\"\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $opt_debug\n  func_convert_core_file_wine_to_w32_result=\"$1\"\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"${func_convert_core_file_wine_to_w32_tmp}\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$lt_sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $opt_debug\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\"\"\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\" ; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=\"$func_convert_core_file_wine_to_w32_result\"\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $opt_debug\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: \\`$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $opt_debug\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $opt_debug\n  if test -z \"$2\" && test -n \"$1\" ; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  \\`$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=\"$1\"\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $opt_debug\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  \\`$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=\"$3\"\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $opt_debug\n  case $4 in\n  $1 ) func_to_host_path_result=\"$3$func_to_host_path_result\"\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via `$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $opt_debug\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $opt_debug\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=\"$1\"\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_msys_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_file_wine_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via `$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $opt_debug\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=\"func_convert_path_${func_stripname_result}\"\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $opt_debug\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=\"$1\"\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_msys_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_path_wine_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test \"$opt_mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test \"$opt_help\" = :; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"\\`$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument \\`$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and \\`=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  sed -e \"${sysroot_cmd} s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the \\`$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest \"$opt_mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test \"x$prev\" = x-m && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"$lib\" | $SED 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined(__GNUC__) && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from \\`$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\"\"\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\" ; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=\"$func_basename_result\"\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\" ; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n      win32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $opt_debug\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $opt_debug\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive which possess that section. Heuristic: eliminate\n    # all those which have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $opt_debug\n  if func_cygming_gnu_implib_p \"$1\" ; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\" ; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\"\"\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    if test \"$lock_old_archive_extraction\" = yes; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test \"$lock_old_archive_extraction\" = yes; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ which is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options which match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"${outputname}:${output}:\\${LINENO}: libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* declarations of non-ANSI functions */\n#if defined(__MINGW32__)\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined(__CYGWIN__)\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined (other platforms) ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined(_MSC_VER)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n# ifndef _INTPTR_T_DEFINED\n#  define _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#elif defined(__MINGW32__)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined(__CYGWIN__)\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined (other platforms) ... */\n#endif\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#if defined(LT_DEBUGWRAPPER)\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nvolatile const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (strcmp (argv[i], debug_opt) == 0)\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (strcmp (argv[i], ltwrapper_option_prefix) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $opt_debug\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-flto*|-fwhopr*|-fuse-linker-plugin)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\${$shlibpath_var}\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test \"$prefer_static_libs\" = yes ||\n\t     test \"$prefer_static_libs,$installed\" = \"built,no\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=\"$l\"\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$lt_sysroot$libdir\"\n\t    absdir=\"$lt_sysroot$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  case \"$host\" in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    echo\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$absdir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      func_append linker_flags \" -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      func_append libobjs \" $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$opt_mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest \"$want_nocaseglob\" = yes && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test \"$want_nocaseglob\" = yes; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s,$i,,\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\t# Remove ${wl} instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$opt_mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$opt_mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test \"$try_normal_branch\" = yes \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=${output_objdir}/${output_la}.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$opt_mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$opt_mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test \"$build_libtool_libs\" != yes && libobjs=\"$non_pic_objects\"\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; /\\.lib$/d; $lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" ${wl}-bind_at_load\"\n\t      func_append finalize_command \" ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    func_append oldobjs \" $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$opt_mode\" = link || test \"$opt_mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=yes ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\todir=\"$objdir\"\n      else\n\todir=\"$dir/$objdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$opt_mode\" = uninstall && odir=\"$dir\"\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test \"$opt_mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case \"$opt_mode\" in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$opt_mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      func_append rmfiles \" $odir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$opt_mode\" = uninstall || test \"$opt_mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$opt_mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/udp.html": "<!--Copyright (C) 1988-2005 by the Institute of Global Environment and Society (IGES). See file COPYRIGHT for more information.-->\n\n<html>\n<head>\n<title>GrADS User Defined Plug-ins</title>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<link href=\"GrADS.css\" rel=\"stylesheet\" type=\"text/css\">\n<style type=\"text/css\">\n.red {\n\tcolor: #C00;\n}\nbody {\n\tbackground-color: #e0f0ff;\n}\n</style>\n</head>\n<body text=\"#000000\">\n\n<h2>User Defined Plug-in Functions (UDPs)</h2>\n<p>\n\n<a href=\"#overview\">Overview </a><br>\n<a href=\"#how\">How to set up and use User Defined Plug-in Functions</a><br>\n<a href=\"#compile\">How to compile User Defined Plug-in Functions</a><br>\n<a href=\"#table\">The User Defined Plug-in Table</a><br>\n<a href=\"#gaudpt\">The environment variable GAUDPT</a><br>\n<a href=\"#example1\">Example: Add a number to a variable</a><br><br>\n<hr>\n  \n<a name=\"overview\"><h3>Overview</h3></a>\n<p>User Defined <a href=\"plugins.html\">Plug-in</a> functions were introduced in <span class=\"red\">version 2.1.1.b0</span> and are intended to replace the old <a href=\"udf.html\">User Defined Functions</a>, which were disabled when version 2.0 was introduced. The use of plug-in functions will be an improvement in performance and flexibility for users who want to create customized functions. The function arguments and data grids are no longer passed between GrADS and the user's program through data files written out to disk. With plug-in functions, the user's code is dynamically loaded into GrADS when the function is invoked by the user, and the data is operated on while still sitting in memory. Please read the following documentation carefully.</p>\n\n<a name=\"how\">\n<h3>How to set up and use User Defined Plug-in functions:</h3></a>\n<ol>\n<li>Compile your plug-in functions  as shared object files. (Scroll down for <a href=\"#compile\">additional documention</a>.)\n<li>Update a stand-alone text file called the User Defined Plug-in Table (<a href=\"udpt.html\">UDPT</a>) that  provides all the necessary information GrADS needs to know about \n   plug-ins. \n(Scroll down for <a href=\"#table\">additional documention.</a>)\n<li>Set the environment variable GAUDPT  to provide the full name (including the path) of the <a href=\"udpt.html\">UDPT</a> file. \n<li>When GrADS is first started up, it will parse the UDPT records so it knows all the plug-in function names and where to find them. The plug-ins  will be loaded dynamically by GrADS only when the function is called by the user. <br>\n<li>When a plug-in function is invoked in an <a href=\"expressions.html\">expression</a>, GrADS passes all the function arguments as-is to the plug-in.  The arguments to a plug-in generally contain one or more GrADS expressions plus any additional numbers or strings that might be needed. The plug-in should contain the necessary code to parse and check the arguments, evaluate the expressions(s), perform the calculations, print out any desired diagnostic information, and return the result back to GrADS. \n<li>Note: User defined plug-ins do <em>NOT</em> have precedence over GrADS intrinsic\nfunctions, thus a UDP cannot be set up to replace\na GrADS function. This behavior is different from the old user defined functions. \n\n</ol>\n\n<a name=\"compile\">\n<h3>How to compile User Defined Plug-in functions:</h3></a>\n<p> User Defined Plug-ins are compiled as dynamic libraries or shared object files and are loaded by GrADS using the dlopen(), dlsym(), and dlclose() functions. Compiling these dynamic object files is a two-step process that requires a slightly different syntax than what is normally used to compile a stand-alone executable. Consider an example plug-in program called addthis.c:\n<p>Compile the \n  plug-in source code (<code><a href=\"addthis.c\">addthis.c</a></code>) and create the object file.\n<ol>\n<li>\n  <pre>  gcc -fPIC -Wall -g -c addthis.c </pre>\n<p>Note that this program requies the inclusion of <code>grads.h</code>, which is part of the GrADS source code. Use the environment variable CFLAGS to specify the directory where <code>grads.h</code> resides (e.g. $HOME/grads/src/grads.h):</p>\n<pre>  setenv CFLAGS -I$HOME/grads/src\n  gcc -fPIC -Wall -g -c addthis.c $CFLAGS</pre>\n<p>If you get an error message that the compiler cannot find additional include files such as <code>shapefil.h</code>, then try adding the supplibs include directory where the file is located to the <code>CFLAGS</code> environment variable, or use the -D option to disable the USESHP macro:</p>\n<pre>  gcc -fPIC -Wall -g -c addthis.c $CFLAGS -DUSESHP=0</pre>\n</li>\n\n<li>Once you have compiled the program and successfully created the object file <code>addthis.o</code>, you must create the dynamic library/shared object file that will be loaded  by GrADS. More  ```` than one object file can be packaged in a dynamic library/shared object file. The synatx for this step is different for Linux systems and for Mac OS X:\n  <p>\n  For Linux:\n  <pre>  gcc -fPIC -g -shared -rdynamic addthis.o -o addthis.so </pre>\n  <p>For Mac OS X:\n  <pre>  libtool -dynamic -flat_namespace -undefined suppress addthis.o -o addthis.dylib </pre>\n</li>\n</ol>\n\n<a name=\"table\">\n<h3>The User Defined Plug-in Table</h3></a>\n<p>\nThe <a href=\"udpt.html\">user-defined plug-in table (UDPT)</a> is a simple text file that\ncontains information about a user defined plug-in function. A record in the UDPT is required before the plug-in funciton can be used in GrADS. Check the <a href=\"udpt.html\">documentation</a> for more information about the proper syntax of UDPT records.  An example record for our example plug-in <code>addthis.c</code> might look like this:\n<pre>   function addthis /home/username/grads/udp/addthis.so</pre>\n\n\n\n<a name=\"gaudpt\">\n<h3>The environment variable GAUDPT</h3></a>\n<p>GrADS will look for user defined plug-in function entries in two places: the file name pointed to by the \n  <a href=\"gradcomdgrads.html#env\">environment variable</a> GAUDPT, and a file named &quot;udpt&quot; in the directory named by the GADDIR environment variable.  An example of setting the GAUDPT environment\n  variable is:\n  \n<pre>    setenv GAUDPT $HOME/grads/udpt</pre>\n\n<a name=\"example1\">\n<h3>Example: Add a number to a variable</h3>\n</a>\n<p><a href=\"addthis.c\"><code><b>addthis.c</b></code></a> is a sample user defined plug-in function for use with GrADS that does a very basic task: it adds a number to all the non-missing values in a GrADS expression, which may be for gridded or station data. Additional information may be found in the comments of the source code.</p>\n</body>\n</html>\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/edemo2.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/filledbarbs.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/shp_demo1.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/edemo7.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/key.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/reference_card_scl.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/shp_demo3.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/offt_1D_t1.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/clab_masked.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/edemo3.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/shp_demo2.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/edemo1.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/sample.grib",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/offt_diag.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/offtv_diag.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/reference_card.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/offtv_1D.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/edemo5.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/edemo4.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/clab_default.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig9.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/edemo6.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig9.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/tutorial_fig2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/pdsi.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/Tutorial_Espanol.doc",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_13.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/strpos.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_15.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/key.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/basemap_demo2.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/basemap_demo.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_12.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_b.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig1.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_3.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/letters.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/pattern_demo.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig8.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig6.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/logom2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig7.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/basemapUS.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/shp_demo4.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_11.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig9.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_14.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_5.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig4.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_clear.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/cmarks.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/tutorial_fig2.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_9.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_w.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_10.gif",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/pattern_demo2.png",
        "/tmp/vanessa/spack-stage/spack-stage-grads-2.2.1-ogiin6ajeju5msxubdgllgyanpw7irbg/spack-src/doc/images/dot_8.gif"
    ],
    "total_files": 515
}