{
    "matches": {
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/main/dotcode.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995  Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997--2014  The R Core Team\n *  Copyright (C) 2003\t      The R Foundation\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  http://www.r-project.org/Licenses/\n */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#define R_USE_SIGNALS 1\n#include <Defn.h>\n#include <Internal.h>\n#include <ctype.h> /* for tolower */\n#include <string.h>\n#include <errno.h>\n\n#include <Rmath.h>\n\n\n#ifndef max\n#define max(a, b) ((a > b)?(a):(b))\n#endif\n\n/* Was 'name' prior to 2.13.0, then .NAME, but checked as\n   'name' up to 2.15.1. */\nstatic void check1arg2(SEXP arg, SEXP call, const char *formal)\n{\n    if (TAG(arg) == R_NilValue) return;\n    errorcall(call, \"the first argument should not be named\");\n }\n\n\n\n/* These are set during the first call to do_dotCode() below. */\n\nstatic SEXP NaokSymbol = NULL;\nstatic SEXP DupSymbol = NULL;\nstatic SEXP PkgSymbol = NULL;\nstatic SEXP EncSymbol = NULL;\nstatic SEXP CSingSymbol = NULL;\n\n#include <Rdynpriv.h>\n// Odd: 'type' is really this enum\nenum {NOT_DEFINED, FILENAME, DLL_HANDLE, R_OBJECT};\ntypedef struct {\n    char DLLname[PATH_MAX];\n    HINSTANCE dll;\n    SEXP  obj;\n    int type;\n} DllReference;\n\n/* Maximum length of entry-point name, including nul terminator */\n#define MaxSymbolBytes 1024\n\n/* Maximum number of args to .C, .Fortran and .Call */\n#define MAX_ARGS 65\n\n/* This looks up entry points in DLLs in a platform specific way. */\nstatic DL_FUNC\nR_FindNativeSymbolFromDLL(char *name, DllReference *dll,\n\t\t\t  R_RegisteredNativeSymbol *symbol, SEXP env);\n\nstatic SEXP naokfind(SEXP args, int * len, int *naok, DllReference *dll);\nstatic SEXP pkgtrim(SEXP args, DllReference *dll);\n\nstatic R_INLINE Rboolean isNativeSymbolInfo(SEXP op)\n{\n    /* was: inherits(op, \"NativeSymbolInfo\")\n     * inherits() is slow because of string comparisons, so use\n     * structural check instead. */\n    return (TYPEOF(op) == VECSXP &&\n\t    LENGTH(op) >= 2 &&\n\t    TYPEOF(VECTOR_ELT(op, 1)) == EXTPTRSXP);\n}\n\n/*\n  Called from resolveNativeRoutine (and itself).\n\n  Checks whether the specified object correctly identifies a native routine.\n  op is the supplied value for .NAME.  This can be\n   a) a string (when this does nothing).\n   b) an external pointer giving the address of the routine\n      (e.g. getNativeSymbolInfo(\"foo\")$address)\n   c) or a NativeSymbolInfo itself  (e.g. getNativeSymbolInfo(\"foo\"))\n\n   It copies the symbol name to buf.\n\n   NB: in the last two cases it sets fun and symbol as well!\n */\nstatic void\ncheckValidSymbolId(SEXP op, SEXP call, DL_FUNC *fun,\n\t\t   R_RegisteredNativeSymbol *symbol, char *buf)\n{\n    if (isValidString(op)) return;\n\n    if(TYPEOF(op) == EXTPTRSXP) {\n\tstatic SEXP native_symbol = NULL;\n\tstatic SEXP registered_native_symbol = NULL;\n\tif (native_symbol == NULL) {\n\t    native_symbol = install(\"native symbol\");\n\t    registered_native_symbol = install(\"registered native symbol\");\n\t}\n\tchar *p = NULL;\n\tif(R_ExternalPtrTag(op) == native_symbol)\n\t   *fun = R_ExternalPtrAddrFn(op);\n\telse if(R_ExternalPtrTag(op) == registered_native_symbol) {\n\t   R_RegisteredNativeSymbol *tmp;\n\t   tmp = (R_RegisteredNativeSymbol *) R_ExternalPtrAddr(op);\n\t   if(tmp) {\n\t      if(symbol->type != R_ANY_SYM && symbol->type != tmp->type)\n\t\t errorcall(call, _(\"NULL value passed as symbol address\"));\n\t\t/* Check the type of the symbol. */\n\t      switch(symbol->type) {\n\t      case R_C_SYM:\n\t\t  *fun = tmp->symbol.c->fun;\n\t\t  p = tmp->symbol.c->name;\n\t\t  break;\n\t      case R_CALL_SYM:\n\t\t  *fun = tmp->symbol.call->fun;\n\t\t  p = tmp->symbol.call->name;\n\t\t  break;\n\t      case R_FORTRAN_SYM:\n\t\t  *fun = tmp->symbol.fortran->fun;\n\t\t  p = tmp->symbol.fortran->name;\n\t\t  break;\n\t      case R_EXTERNAL_SYM:\n\t\t  *fun = tmp->symbol.external->fun;\n\t\t  p = tmp->symbol.external->name;\n\t\t  break;\n\t      default:\n\t\t /* Something unintended has happened if we get here. */\n\t\t  errorcall(call, _(\"Unimplemented type %d in createRSymbolObject\"),\n\t\t\t    symbol->type);\n\t\t  break;\n\t      }\n\t      *symbol = *tmp;\n\t   }\n\t}\n\t/* This is illegal C */\n\tif(*fun == NULL)\n\t    errorcall(call, _(\"NULL value passed as symbol address\"));\n\n\t/* copy the symbol name. */\n\tif (p && buf) {\n\t    if (strlen(p) >= MaxSymbolBytes)\n\t\terror(_(\"symbol '%s' is too long\"), p);\n\t    memcpy(buf, p, strlen(p)+1);\n\t}\n\n\treturn;\n    }\n    else if(isNativeSymbolInfo(op)) {\n\tcheckValidSymbolId(VECTOR_ELT(op, 1), call, fun, symbol, buf);\n\treturn;\n    }\n\n    errorcall(call,\n      _(\"first argument must be a string (of length 1) or native symbol reference\"));\n    return; /* not reached */\n}\n\nattribute_hidden\nDL_FUNC R_dotCallFn(SEXP op, SEXP call, int nargs) {\n    R_RegisteredNativeSymbol symbol = {R_CALL_SYM, {NULL}, NULL};\n    DL_FUNC fun = NULL;\n    checkValidSymbolId(op, call, &fun, &symbol, NULL);\n    /* should check arg count here as well */\n    return fun;\n}\n\n/*\n  This is the routine that is called by do_dotCode, do_dotcall and\n  do_External to find the DL_FUNC to invoke. It handles processing the\n  arguments for the PACKAGE argument, if present, and also takes care\n  of the cases where we are given a NativeSymbolInfo object, an\n  address directly, and if the DLL is specified. If no PACKAGE is\n  provided, we check whether the calling function is in a namespace\n  and look there.\n*/\n\nstatic SEXP\nresolveNativeRoutine(SEXP args, DL_FUNC *fun,\n\t\t     R_RegisteredNativeSymbol *symbol, char *buf,\n\t\t     int *nargs, int *naok, SEXP call, SEXP env)\n{\n    SEXP op;\n    const char *p; char *q;\n    DllReference dll;\n    /* This is used as shorthand for 'all' in R_FindSymbol, but\n       should never be supplied */\n    strcpy(dll.DLLname, \"\");\n    dll.dll = NULL; dll.obj = NULL; dll.type = NOT_DEFINED;\n\n    op = CAR(args);  // value of .NAME =\n    /* NB, this sets fun, symbol and buf and is not just a check! */\n    checkValidSymbolId(op, call, fun, symbol, buf);\n\n    /* The following code modifies the argument list */\n    /* We know this is ok because do_dotCode is entered */\n    /* with its arguments evaluated. */\n\n    if(symbol->type == R_C_SYM || symbol->type == R_FORTRAN_SYM) {\n\t/* And that also looks for PACKAGE = */\n\targs = naokfind(CDR(args), nargs, naok, &dll);\n\tif(*naok == NA_LOGICAL)\n\t    errorcall(call, _(\"invalid '%s' value\"), \"naok\");\n\tif(*nargs > MAX_ARGS)\n\t    errorcall(call, _(\"too many arguments in foreign function call\"));\n    } else {\n\t/* This has the side effect of setting dll.type if a PACKAGE=\n\t   argument if found, but it will only be used if a string was\n\t   passed in  */\n\targs = pkgtrim(args, &dll);\n    }\n\n    /* We were given a symbol (or an address), so we are done. */\n    if (*fun) return args;\n\n    if (dll.type == FILENAME && !strlen(dll.DLLname))\n\terrorcall(call, _(\"PACKAGE = \\\"\\\" is invalid\"));\n\n    // find if we were called from a namespace\n    SEXP env2 = ENCLOS(env);\n    const char *ns = \"\";\n    if(R_IsNamespaceEnv(env2))\n\tns = CHAR(STRING_ELT(R_NamespaceEnvSpec(env2), 0));\n    else env2 = R_NilValue;\n\n#ifdef CHECK_CROSS_USAGE\n    if (dll.type == FILENAME && strcmp(dll.DLLname, \"base\")) {\n\tif(strlen(ns) && strcmp(dll.DLLname, ns) &&\n\t   !(streql(dll.DLLname, \"BioC_graph\") && streql(ns, \"graph\")))\n\t    warningcall(call,\n\t\t\t\"using PACKAGE = \\\"%s\\\" from namespace '%s'\",\n\t\t\tdll.DLLname, ns);\n    }\n#endif\n\n    /* Make up the load symbol */\n    if(TYPEOF(op) == STRSXP) {\n\tconst void *vmax = vmaxget();\n\tp = translateChar(STRING_ELT(op, 0));\n\tif(strlen(p) >= MaxSymbolBytes)\n\t    error(_(\"symbol '%s' is too long\"), p);\n\tq = buf;\n\twhile ((*q = *p) != '\\0') {\n\t    if(symbol->type == R_FORTRAN_SYM) *q = (char) tolower(*q);\n\t    p++;\n\t    q++;\n\t}\n\tvmaxset(vmax);\n    }\n\n    if(dll.type != FILENAME && strlen(ns)) {\n\t/* no PACKAGE= arg, so see if we can identify a DLL\n\t   from the namespace defining the function */\n\t*fun = R_FindNativeSymbolFromDLL(buf, &dll, symbol, env2);\n\tif (*fun) return args;\n\terrorcall(call, \"\\\"%s\\\" not resolved from current namespace (%s)\",\n\t\t  buf, ns);\n    }\n\n    /* NB: the actual conversion to the symbol is done in\n       R_dlsym in Rdynload.c.  That prepends an underscore (usually),\n       and may append one or more underscores.\n    */\n\n    *fun = R_FindSymbol(buf, dll.DLLname, symbol);\n    if (*fun) return args;\n\n    /* so we've failed and bail out */\n    if(strlen(dll.DLLname)) {\n\tswitch(symbol->type) {\n\tcase R_C_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".C\", dll.DLLname);\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".Fortran\", dll.DLLname);\n\t    break;\n\tcase R_CALL_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".Call\", dll.DLLname);\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    errorcall(call,\n\t\t      _(\"\\\"%s\\\" not available for %s() for package \\\"%s\\\"\"),\n\t\t      buf, \".External\", dll.DLLname);\n\t    break;\n\tcase R_ANY_SYM:\n\t    errorcall(call,\n\t\t      _(\"%s symbol name \\\"%s\\\" not in DLL for package \\\"%s\\\"\"),\n\t\t      \"C/Fortran\", buf, dll.DLLname);\n\t    break;\n\t}\n    } else\n\terrorcall(call, _(\"%s symbol name \\\"%s\\\" not in load table\"),\n\t\t  symbol->type == R_FORTRAN_SYM ? \"Fortran\" : \"C\", buf);\n\n    return args; /* -Wall */\n}\n\n\nstatic Rboolean\ncheckNativeType(int targetType, int actualType)\n{\n    if(targetType > 0) {\n\tif(targetType == INTSXP || targetType == LGLSXP) {\n\t    return(actualType == INTSXP || actualType == LGLSXP);\n\t}\n\treturn(targetType == actualType);\n    }\n\n    return(TRUE);\n}\n\n\nstatic Rboolean\ncomparePrimitiveTypes(R_NativePrimitiveArgType type, SEXP s)\n{\n   if(type == ANYSXP || TYPEOF(s) == type)\n      return(TRUE);\n\n   if(type == SINGLESXP)\n      return(asLogical(getAttrib(s, install(\"Csingle\"))) == TRUE);\n\n   return(FALSE);\n}\n\n\n/* Foreign Function Interface.  This code allows a user to call C */\n/* or Fortran code which is either statically or dynamically linked. */\n\n/* NB: this leaves NAOK and DUP arguments on the list */\n\n/* find NAOK and DUP, find and remove PACKAGE */\nstatic SEXP naokfind(SEXP args, int * len, int *naok, DllReference *dll)\n{\n    SEXP s, prev;\n    int nargs=0, naokused=0, dupused=0, pkgused=0;\n    const char *p;\n\n    *naok = 0;\n    *len = 0;\n    for(s = args, prev=args; s != R_NilValue;) {\n\tif(TAG(s) == NaokSymbol) {\n\t    *naok = asLogical(CAR(s));\n\t    if(naokused++ == 1) warning(_(\"'%s' used more than once\"), \"NAOK\");\n\t} else if(TAG(s) == DupSymbol) {\n\t    if(dupused++ == 1) warning(_(\"'%s' used more than once\"), \"DUP\");\n\t} else if(TAG(s) == PkgSymbol) {\n\t    dll->obj = CAR(s);  // really?\n\t    if(TYPEOF(CAR(s)) == STRSXP) {\n\t\tp = translateChar(STRING_ELT(CAR(s), 0));\n\t\tif(strlen(p) > PATH_MAX - 1)\n\t\t    error(_(\"DLL name is too long\"));\n\t\tdll->type = FILENAME;\n\t\tstrcpy(dll->DLLname, p);\n\t\tif(pkgused++ > 1)\n\t\t    warning(_(\"'%s' used more than once\"), \"PACKAGE\");\n\t\t/* More generally, this should allow us to process\n\t\t   any additional arguments and not insist that PACKAGE\n\t\t   be the last argument.\n\t\t*/\n\t    } else {\n\t\t/* Have a DLL object, which is not something documented .... */\n\t\tif(TYPEOF(CAR(s)) == EXTPTRSXP) {\n\t\t    dll->dll = (HINSTANCE) R_ExternalPtrAddr(CAR(s));\n\t\t    dll->type = DLL_HANDLE;\n\t\t} else if(TYPEOF(CAR(s)) == VECSXP) {\n\t\t    dll->type = R_OBJECT;\n\t\t    dll->obj = s;\n\t\t    strcpy(dll->DLLname,\n\t\t\t   translateChar(STRING_ELT(VECTOR_ELT(CAR(s), 1), 0)));\n\t\t    dll->dll = (HINSTANCE) R_ExternalPtrAddr(VECTOR_ELT(s, 4));\n\t\t} else\n\t\t    error(\"incorrect type (%s) of PACKAGE argument\\n\",\n\t\t\t  type2char(TYPEOF(CAR(s))));\n\t    }\n\t} else {\n\t    nargs++;\n\t    prev = s;\n\t    s = CDR(s);\n\t    continue;\n\t}\n\tif(s == args)\n\t    args = s = CDR(s);\n\telse\n\t    SETCDR(prev, s = CDR(s));\n    }\n    *len = nargs;\n    return args;\n}\n\nstatic void setDLLname(SEXP s, char *DLLname)\n{\n    SEXP ss = CAR(s);\n    const char *name;\n\n    if(TYPEOF(ss) != STRSXP || length(ss) != 1)\n\terror(_(\"PACKAGE argument must be a single character string\"));\n    name = translateChar(STRING_ELT(ss, 0));\n    /* allow the package: form of the name, as returned by find */\n    if(strncmp(name, \"package:\", 8) == 0)\n\tname += 8;\n    if(strlen(name) > PATH_MAX - 1)\n\terror(_(\"PACKAGE argument is too long\"));\n    strcpy(DLLname, name);\n}\n\nstatic SEXP pkgtrim(SEXP args, DllReference *dll)\n{\n    SEXP s, ss;\n    int pkgused = 0;\n\n    if (PkgSymbol == NULL) PkgSymbol = install(\"PACKAGE\");\n\n    for(s = args ; s != R_NilValue;) {\n\tss = CDR(s);\n\t/* Look for PACKAGE=. We look at the next arg, unless\n\t   this is the last one (which will only happen for one arg),\n\t   and remove it */\n\tif(ss == R_NilValue && TAG(s) == PkgSymbol) {\n\t    if(pkgused++ == 1)\n\t\twarning(_(\"'%s' used more than once\"), \"PACKAGE\");\n\t    setDLLname(s, dll->DLLname);\n\t    dll->type = FILENAME;\n\t    return R_NilValue;\n\t}\n\tif(TAG(ss) == PkgSymbol) {\n\t    if(pkgused++ == 1)\n\t\twarning(_(\"'%s' used more than once\"), \"PACKAGE\");\n\t    setDLLname(ss, dll->DLLname);\n\t    dll->type = FILENAME;\n\t    SETCDR(s, CDR(ss));\n\t}\n\ts = CDR(s);\n    }\n    return args;\n}\n\nstatic SEXP enctrim(SEXP args)\n{\n    SEXP s, ss;\n\n    for(s = args ; s != R_NilValue;) {\n\tss = CDR(s);\n\t/* Look for ENCODING=. We look at the next arg, unless\n\t   this is the last one (which will only happen for one arg),\n\t   and remove it */\n\tif(ss == R_NilValue && TAG(s) == EncSymbol) {\n\t    warning(\"ENCODING is defunct and will be ignored\");\n\t    return R_NilValue;\n\t}\n\tif(TAG(ss) == EncSymbol) {\n\t    warning(\"ENCODING is defunct and will be ignored\");\n\t    SETCDR(s, CDR(ss));\n\t}\n\ts = CDR(s);\n    }\n    return args;\n}\n\n\n\nSEXP attribute_hidden do_isloaded(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char *sym, *type=\"\", *pkg = \"\";\n    int val = 1, nargs = length(args);\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n\n    if (nargs < 1) error(_(\"no arguments supplied\"));\n    if (nargs > 3) error(_(\"too many arguments\"));\n\n    if(!isValidString(CAR(args)))\n\terror(_(\"invalid '%s' argument\"), \"symbol\");\n    sym = translateChar(STRING_ELT(CAR(args), 0));\n    if(nargs >= 2) {\n\tif(!isValidString(CADR(args)))\n\t    error(_(\"invalid '%s' argument\"), \"PACKAGE\");\n\tpkg = translateChar(STRING_ELT(CADR(args), 0));\n    }\n    if(nargs >= 3) {\n\tif(!isValidString(CADDR(args)))\n\t    error(_(\"invalid '%s' argument\"), \"type\");\n\ttype = CHAR(STRING_ELT(CADDR(args), 0)); /* ASCII */\n\tif(strcmp(type, \"C\") == 0) symbol.type = R_C_SYM;\n\telse if(strcmp(type, \"Fortran\") == 0) symbol.type = R_FORTRAN_SYM;\n\telse if(strcmp(type, \"Call\") == 0) symbol.type = R_CALL_SYM;\n\telse if(strcmp(type, \"External\") == 0) symbol.type = R_EXTERNAL_SYM;\n    }\n    if(!(R_FindSymbol(sym, pkg, &symbol))) val = 0;\n    return ScalarLogical(val);\n}\n\n/*   Call dynamically loaded \"internal\" functions.\n     Original code by Jean Meloche <jean@stat.ubc.ca> */\n\ntypedef SEXP (*R_ExternalRoutine)(SEXP);\ntypedef SEXP (*R_ExternalRoutine2)(SEXP, SEXP, SEXP, SEXP);\n\nSEXP attribute_hidden do_External(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    DL_FUNC ofun = NULL;\n    SEXP retval;\n    R_RegisteredNativeSymbol symbol = {R_EXTERNAL_SYM, {NULL}, NULL};\n    const void *vmax = vmaxget();\n    char buf[MaxSymbolBytes];\n\n    if (length(args) < 1) errorcall(call, _(\"'.NAME' is missing\"));\n    check1arg2(args, call, \".NAME\");\n    args = resolveNativeRoutine(args, &ofun, &symbol, buf, NULL, NULL,\n\t\t\t\tcall, env);\n\n    if(symbol.symbol.external && symbol.symbol.external->numArgs > -1) {\n\tint nargs = length(args) - 1;\n\tif(symbol.symbol.external->numArgs != nargs)\n\t    errorcall(call,\n\t\t      _(\"Incorrect number of arguments (%d), expecting %d for '%s'\"),\n\t\t      nargs, symbol.symbol.external->numArgs, buf);\n    }\n\n    if (PRIMVAL(op) == 1) {\n\tR_ExternalRoutine2 fun = (R_ExternalRoutine2) ofun;\n\tretval = fun(call, op, args, env);\n    } else {\n\tR_ExternalRoutine fun = (R_ExternalRoutine) ofun;\n\tretval = fun(args);\n    }\n    vmaxset(vmax);\n    return retval;\n}\n\n#ifdef __cplusplus\ntypedef SEXP (*VarFun)(...);\n#else\ntypedef DL_FUNC VarFun;\n#endif\n\nSEXP attribute_hidden R_doDotCall(DL_FUNC ofun, int nargs, SEXP *cargs,\n\t\t\t\t  SEXP call) {\n    VarFun fun = NULL;\n    SEXP retval = R_NilValue;\t/* -Wall */\n    fun = (VarFun) ofun;\n    switch (nargs) {\n    case 0:\n\tretval = (SEXP)ofun();\n\tbreak;\n    case 1:\n\tretval = (SEXP)fun(cargs[0]);\n\tbreak;\n    case 2:\n\tretval = (SEXP)fun(cargs[0], cargs[1]);\n\tbreak;\n    case 3:\n\tretval = (SEXP)fun(cargs[0], cargs[1], cargs[2]);\n\tbreak;\n    case 4:\n\tretval = (SEXP)fun(cargs[0], cargs[1], cargs[2], cargs[3]);\n\tbreak;\n    case 5:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4]);\n\tbreak;\n    case 6:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5]);\n\tbreak;\n    case 7:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6]);\n\tbreak;\n    case 8:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7]);\n\tbreak;\n    case 9:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8]);\n\tbreak;\n    case 10:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9]);\n\tbreak;\n    case 11:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10]);\n\tbreak;\n    case 12:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11]);\n\tbreak;\n    case 13:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12]);\n\tbreak;\n    case 14:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13]);\n\tbreak;\n    case 15:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14]);\n\tbreak;\n    case 16:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15]);\n\tbreak;\n    case 17:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16]);\n\tbreak;\n    case 18:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17]);\n\tbreak;\n    case 19:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18]);\n\tbreak;\n    case 20:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19]);\n\tbreak;\n    case 21:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20]);\n\tbreak;\n    case 22:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21]);\n\tbreak;\n    case 23:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22]);\n\tbreak;\n    case 24:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23]);\n\tbreak;\n    case 25:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24]);\n\tbreak;\n    case 26:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25]);\n\tbreak;\n    case 27:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26]);\n\tbreak;\n    case 28:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27]);\n\tbreak;\n    case 29:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28]);\n\tbreak;\n    case 30:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29]);\n\tbreak;\n    case 31:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30]);\n\tbreak;\n    case 32:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31]);\n\tbreak;\n    case 33:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32]);\n\tbreak;\n    case 34:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33]);\n\tbreak;\n    case 35:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34]);\n\tbreak;\n    case 36:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35]);\n\tbreak;\n    case 37:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36]);\n\tbreak;\n    case 38:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37]);\n\tbreak;\n    case 39:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38]);\n\tbreak;\n    case 40:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39]);\n\tbreak;\n    case 41:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40]);\n\tbreak;\n    case 42:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41]);\n\tbreak;\n    case 43:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42]);\n\tbreak;\n    case 44:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43]);\n\tbreak;\n    case 45:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44]);\n\tbreak;\n    case 46:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45]);\n\tbreak;\n    case 47:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46]);\n\tbreak;\n    case 48:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47]);\n\tbreak;\n    case 49:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48]);\n\tbreak;\n    case 50:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49]);\n\tbreak;\n    case 51:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50]);\n\tbreak;\n    case 52:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51]);\n\tbreak;\n    case 53:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52]);\n\tbreak;\n    case 54:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53]);\n\tbreak;\n    case 55:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54]);\n\tbreak;\n    case 56:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55]);\n\tbreak;\n    case 57:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56]);\n\tbreak;\n    case 58:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57]);\n\tbreak;\n    case 59:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58]);\n\tbreak;\n    case 60:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59]);\n\tbreak;\n    case 61:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60]);\n\tbreak;\n    case 62:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61]);\n\tbreak;\n    case 63:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62]);\n\tbreak;\n    case 64:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63]);\n\tbreak;\n    case 65:\n\tretval = (SEXP)fun(\n\t    cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63], cargs[64]);\n\tbreak;\n    default:\n\terrorcall(call, _(\"too many arguments, sorry\"));\n    }\n    return retval;\n}\n\n/* .Call(name, <args>) */\nSEXP attribute_hidden do_dotcall(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    DL_FUNC ofun = NULL;\n    SEXP retval, cargs[MAX_ARGS], pargs;\n    R_RegisteredNativeSymbol symbol = {R_CALL_SYM, {NULL}, NULL};\n\n    int nargs;\n    const void *vmax = vmaxget();\n    char buf[MaxSymbolBytes];\n\n    if (length(args) < 1) errorcall(call, _(\"'.NAME' is missing\"));\n    check1arg2(args, call, \".NAME\");\n\n    args = resolveNativeRoutine(args, &ofun, &symbol, buf, NULL, NULL, call, env);\n    args = CDR(args);\n\n    for(nargs = 0, pargs = args ; pargs != R_NilValue; pargs = CDR(pargs)) {\n\tif (nargs == MAX_ARGS)\n\t    errorcall(call, _(\"too many arguments in foreign function call\"));\n\tcargs[nargs] = CAR(pargs);\n\tnargs++;\n    }\n    if(symbol.symbol.call && symbol.symbol.call->numArgs > -1) {\n\tif(symbol.symbol.call->numArgs != nargs)\n\t    errorcall(call,\n\t\t      _(\"Incorrect number of arguments (%d), expecting %d for '%s'\"),\n\t\t      nargs, symbol.symbol.call->numArgs, buf);\n    }\n\n    retval = R_doDotCall(ofun, nargs, cargs, call);\n    vmaxset(vmax);\n    return retval;\n}\n\n/*  Call dynamically loaded \"internal\" graphics functions\n    .External.graphics (used in graphics) and  .Call.graphics (used in grid).\n\n    If there is an error or user-interrupt in the above\n    evaluation, dd->recordGraphics is set to TRUE\n    on all graphics devices (see GEonExit(); called in errors.c)\n\n    NOTE: if someone uses try() around this call and there\n    is an error, then dd->recordGraphics stays FALSE, so\n    subsequent pages of graphics output are NOT saved on\n    the display list.  A workaround is to deliberately\n    force an error in a graphics call (e.g., a grid popViewport()\n    while in the ROOT viewport) which will reset dd->recordGraphics\n    to TRUE as per the comment above.\n*/\n\n#include <R_ext/GraphicsEngine.h>\n\nSEXP attribute_hidden do_Externalgr(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP retval;\n    pGEDevDesc dd = GEcurrentDevice();\n    Rboolean record = dd->recordGraphics;\n    dd->recordGraphics = FALSE;\n    PROTECT(retval = do_External(call, op, args, env));\n    dd->recordGraphics = record;\n    if (GErecording(call, dd)) { // which is record && call != R_NilValue\n\tif (!GEcheckState(dd))\n\t    errorcall(call, _(\"invalid graphics state\"));\n\tGErecordGraphicOperation(op, args, dd);\n    }\n    UNPROTECT(1);\n    return retval;\n}\n\nSEXP attribute_hidden do_dotcallgr(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP retval;\n    pGEDevDesc dd = GEcurrentDevice();\n    Rboolean record = dd->recordGraphics;\n    dd->recordGraphics = FALSE;\n    PROTECT(retval = do_dotcall(call, op, args, env));\n    dd->recordGraphics = record;\n    if (GErecording(call, dd)) {\n\tif (!GEcheckState(dd))\n\t    errorcall(call, _(\"invalid graphics state\"));\n\tGErecordGraphicOperation(op, args, dd);\n    }\n    UNPROTECT(1);\n    return retval;\n}\n\nstatic SEXP\nRf_getCallingDLL(void)\n{\n    SEXP e, ans;\n    RCNTXT *cptr;\n    SEXP rho = R_NilValue;\n    Rboolean found = FALSE;\n\n    /* First find the environment of the caller.\n       Testing shows this is the right caller, despite the .C/.Call ...\n     */\n    for (cptr = R_GlobalContext;\n\t cptr != NULL && cptr->callflag != CTXT_TOPLEVEL;\n\t cptr = cptr->nextcontext)\n\t    if (cptr->callflag & CTXT_FUNCTION) {\n\t\t/* PrintValue(cptr->call); */\n\t\trho = cptr->cloenv;\n\t\tbreak;\n\t    }\n    /* Then search up until we hit a namespace or globalenv.\n       The idea is that we will not find a namespace unless the caller\n       was defined in one. */\n    while(rho != R_NilValue) {\n\tif (rho == R_GlobalEnv) break;\n\telse if (R_IsNamespaceEnv(rho)) {\n\t    found = TRUE;\n\t    break;\n\t}\n\trho = ENCLOS(rho);\n    }\n    if(!found) return R_NilValue;\n\n    PROTECT(e = lang2(install(\"getCallingDLLe\"), rho));\n    ans = eval(e,  R_GlobalEnv);\n    UNPROTECT(1);\n    return(ans);\n}\n\n\n/*\n  We are given the PACKAGE argument in dll.obj\n  and we can try to figure out how to resolve this.\n  0) dll.obj is NULL.  Then find the environment of the\n   calling function and if it is a namespace, get the first registered DLL.\n\n  1) dll.obj is a DLLInfo object\n*/\nstatic DL_FUNC\nR_FindNativeSymbolFromDLL(char *name, DllReference *dll,\n\t\t\t  R_RegisteredNativeSymbol *symbol,\n\t\t\t  SEXP env)\n{\n    int numProtects = 0;\n    DllInfo *info;\n    DL_FUNC fun = NULL;\n\n    if(dll->obj == NULL) {\n\t/* Rprintf(\"\\nsearching for %s\\n\", name); */\n\tif (env != R_NilValue) {\n\t    SEXP e;\n\t    PROTECT(e = lang2(install(\"getCallingDLLe\"), env));\n\t    dll->obj = eval(e, R_GlobalEnv);\n\t    UNPROTECT(1);\n\t} else dll->obj = Rf_getCallingDLL();\n\tPROTECT(dll->obj); numProtects++;\n    }\n\n    if(inherits(dll->obj, \"DLLInfo\")) {\n\tSEXP tmp;\n\ttmp = VECTOR_ELT(dll->obj, 4);\n\tinfo = (DllInfo *) R_ExternalPtrAddr(tmp);\n\tif(!info)\n\t    error(_(\"NULL value for DLLInfoReference when looking for DLL\"));\n\tfun = R_dlsym(info, name, symbol);\n    }\n\n    if(numProtects) UNPROTECT(numProtects);\n\n    return fun;\n}\n\n\n\n/* .C() {op=0}  or  .Fortran() {op=1} */\n/* Use of this except for atomic vectors is not allowed for .Fortran,\n   and is only kept for legacy code for .C.\n\n   CRAN packages R2Cuba, RCALI, ars, coxme, fCopulae, locfit, nlme,\n   splinesurv and survival pass functions, the case of RCALI as a list\n   of two functions.\n\n   RecordLinkage and locfit pass lists.\n*/\n\n/* pattern and number of guard bytes */\n#define FILL 0xee\n#define NG 64\n\nSEXP attribute_hidden do_dotCode(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    void **cargs, **cargs0 = NULL /* -Wall */;\n    int naok, na, nargs, Fort;\n    Rboolean havenames, copy = R_CBoundsCheck; /* options(CboundsCheck) */\n    DL_FUNC ofun = NULL;\n    VarFun fun = NULL;\n    SEXP ans, pa, s;\n    R_RegisteredNativeSymbol symbol = {R_C_SYM, {NULL}, NULL};\n    R_NativePrimitiveArgType *checkTypes = NULL;\n    R_NativeArgStyle *argStyles = NULL;\n    const void *vmax;\n    char symName[MaxSymbolBytes];\n\n    if (length(args) < 1) errorcall(call, _(\"'.NAME' is missing\"));\n    check1arg2(args, call, \".NAME\");\n    if (NaokSymbol == NULL || DupSymbol == NULL || PkgSymbol == NULL) {\n\tNaokSymbol = install(\"NAOK\");\n\tDupSymbol = install(\"DUP\");\n\tPkgSymbol = install(\"PACKAGE\");\n    }\n    if (EncSymbol == NULL) EncSymbol = install(\"ENCODING\");\n    if (CSingSymbol == NULL) CSingSymbol = install(\"Csingle\");\n    vmax = vmaxget();\n    Fort = PRIMVAL(op);\n    if(Fort) symbol.type = R_FORTRAN_SYM;\n\n    args = enctrim(args);\n    args = resolveNativeRoutine(args, &ofun, &symbol, symName, &nargs,\n\t\t\t\t&naok, call, env);\n    fun = (VarFun) ofun;\n\n    if(symbol.symbol.c && symbol.symbol.c->numArgs > -1) {\n\tif(symbol.symbol.c->numArgs != nargs)\n\t    errorcall(call,\n\t\t      _(\"Incorrect number of arguments (%d), expecting %d for '%s'\"),\n\t\t      nargs, symbol.symbol.c->numArgs, symName);\n\n\tcheckTypes = symbol.symbol.c->types;\n\targStyles = symbol.symbol.c->styles;\n    }\n\n    /* Construct the return value */\n    nargs = 0;\n    havenames = FALSE;\n    for(pa = args ; pa != R_NilValue; pa = CDR(pa)) {\n\tif (TAG(pa) != R_NilValue) havenames = TRUE;\n\tnargs++;\n    }\n\n    PROTECT(ans = allocVector(VECSXP, nargs));\n    if (havenames) {\n\tSEXP names;\n\tPROTECT(names = allocVector(STRSXP, nargs));\n\tfor (na = 0, pa = args ; pa != R_NilValue ; pa = CDR(pa), na++) {\n\t    if (TAG(pa) == R_NilValue)\n\t\tSET_STRING_ELT(names, na, R_BlankString);\n\t    else\n\t\tSET_STRING_ELT(names, na, PRINTNAME(TAG(pa)));\n\t}\n\tsetAttrib(ans, R_NamesSymbol, names);\n\tUNPROTECT(1);\n    }\n\n    /* Convert the arguments for use in foreign function calls. */\n    cargs = (void**) R_alloc(nargs, sizeof(void*));\n    if (copy) cargs0 = (void**) R_alloc(nargs, sizeof(void*));\n    for(na = 0, pa = args ; pa != R_NilValue; pa = CDR(pa), na++) {\n\tif(checkTypes &&\n\t   !comparePrimitiveTypes(checkTypes[na], CAR(pa))) {\n\t    /* We can loop over all the arguments and report all the\n\t       erroneous ones, but then we would also want to avoid\n\t       the conversions.  Also, in the future, we may just\n\t       attempt to coerce the value to the appropriate\n\t       type. */\n\t    errorcall(call, _(\"wrong type for argument %d in call to %s\"),\n\t\t      na+1, symName);\n\t}\n\tint nprotect = 0, targetType =  checkTypes ? checkTypes[na] : 0;\n\tR_xlen_t n;\n\ts = CAR(pa);\n\t/* start with return value a copy of the inputs, as that is\n\t   what is needed for non-atomic-vector inputs */\n\tSET_VECTOR_ELT(ans, na, s);\n\n\tif(checkNativeType(targetType, TYPEOF(s)) == FALSE &&\n\t   targetType != SINGLESXP) {\n\t    /* Cannot be called if DUP = FALSE, so only needs to live\n\t       until copied in the switch.\n\t       But R_alloc allocates, so missed protection < R 2.15.0.\n\t    */\n\t    PROTECT(s = coerceVector(s, targetType));\n\t    nprotect++;\n\t}\n\n\t/* We create any copies needed for the return value here,\n\t   except for character vectors.  The compiled code works on\n\t   the data pointer of the return value for the other atomic\n\t   vectors, and anything else is supposed to be read-only.\n\n\t   We do not need to copy if the inputs have no references */\n\n#ifdef LONG_VECTOR_SUPPORT\n\tif (isVector(s) && IS_LONG_VEC(s))\n\t    error(_(\"long vectors (argument %d) are not supported in %s\"),\n\t\t  na + 1, Fort ? \".C\" : \".Fortran\");\n#endif\n\tSEXPTYPE t = TYPEOF(s);\n\tswitch(t) {\n\tcase RAWSXP:\n\t    if (copy) {\n\t\tn = XLENGTH(s);\n\t\tchar *ptr = R_alloc(n * sizeof(Rbyte) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(Rbyte) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, RAW(s), n);\n\t\tcargs[na] = (void *) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tn = XLENGTH(s);\n\t\tSEXP ss = allocVector(t, n);\n\t\tmemcpy(RAW(ss), RAW(s), n * sizeof(Rbyte));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) RAW(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void *) RAW(s);\n\t    break;\n\tcase LGLSXP:\n\tcase INTSXP:\n\t    n = XLENGTH(s);\n\t    int *iptr = INTEGER(s);\n\t    if (!naok)\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++)\n\t\t    if(iptr[i] == NA_INTEGER)\n\t\t\terror(_(\"NAs in foreign function call (arg %d)\"), na + 1);\n\t    if (copy) {\n\t\tchar *ptr = R_alloc(n * sizeof(int) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(int) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, INTEGER(s), n * sizeof(int));\n\t\tcargs[na] = (void*) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tSEXP ss = allocVector(t, n);\n\t\tmemcpy(INTEGER(ss), INTEGER(s), n * sizeof(int));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) INTEGER(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void*) iptr;\n\t    break;\n\tcase REALSXP:\n\t    n = XLENGTH(s);\n\t    double *rptr = REAL(s);\n\t    if (!naok)\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++)\n\t\t    if(!R_FINITE(rptr[i]))\n\t\t\terror(_(\"NA/NaN/Inf in foreign function call (arg %d)\"), na + 1);\n\t    if (asLogical(getAttrib(s, CSingSymbol)) == 1) {\n\t\tfloat *sptr = (float*) R_alloc(n, sizeof(float));\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) sptr[i] = (float) REAL(s)[i];\n\t\tcargs[na] = (void*) sptr;\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, sptr);\n#endif\n\t    } else if (copy) {\n\t\tchar *ptr = R_alloc(n * sizeof(double) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(double) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, REAL(s), n * sizeof(double));\n\t\tcargs[na] = (void*) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tSEXP ss  = allocVector(t, n);\n\t\tmemcpy(REAL(ss), REAL(s), n * sizeof(double));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) REAL(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void*) rptr;\n\t    break;\n\tcase CPLXSXP:\n\t    n = XLENGTH(s);\n\t    Rcomplex *zptr = COMPLEX(s);\n\t    if (!naok)\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++)\n\t\t    if(!R_FINITE(zptr[i].r) || !R_FINITE(zptr[i].i))\n\t\t\terror(_(\"complex NA/NaN/Inf in foreign function call (arg %d)\"), na + 1);\n\t    if (copy) {\n\t\tchar *ptr = R_alloc(n * sizeof(Rcomplex) + 2 * NG, 1);\n\t\tmemset(ptr, FILL, n * sizeof(Rcomplex) + 2 * NG);\n\t\tptr += NG;\n\t\tmemcpy(ptr, COMPLEX(s), n * sizeof(Rcomplex));\n\t\tcargs[na] = (void*) ptr;\n\t    } else if (MAYBE_REFERENCED(s)) {\n\t\tSEXP ss = allocVector(t, n);\n\t\tmemcpy(COMPLEX(ss), COMPLEX(s), n * sizeof(Rcomplex));\n\t\tSET_VECTOR_ELT(ans, na, ss);\n\t\tcargs[na] = (void*) COMPLEX(ss);\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, ss);\n#endif\n\t    } else cargs[na] = (void *) zptr;\n\t    break;\n\tcase STRSXP:\n\t    n = XLENGTH(s);\n\t    if (Fort) {\n\t\tconst char *ss = translateChar(STRING_ELT(s, 0));\n\t\tif (n > 1)\n\t\t    warning(_(\"only first string in char vector used in .Fortran\"));\n\t\tchar *fptr = (char*) R_alloc(max(255, strlen(ss)) + 1, sizeof(char));\n\t\tstrcpy(fptr, ss);\n\t\tcargs[na] =  (void*) fptr;\n\t    } else if (copy) {\n\t\tchar **cptr = (char**) R_alloc(n, sizeof(char*)),\n\t\t    **cptr0 = (char**) R_alloc(n, sizeof(char*));\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t    const char *ss = translateChar(STRING_ELT(s, i));\n\t\t    size_t nn = strlen(ss) + 1 + 2 * NG;\n\t\t    char *ptr = (char*) R_alloc(nn, sizeof(char));\n\t\t    memset(ptr, FILL, nn);\n\t\t    cptr[i] = cptr0[i] = ptr + NG;\n\t\t    strcpy(cptr[i], ss);\n\t\t}\n\t\tcargs[na] = (void*) cptr;\n\t\tcargs0[na] = (void*) cptr0;\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, cargs[na]);\n#endif\n\t    } else {\n\t\tchar **cptr = (char**) R_alloc(n, sizeof(char*));\n\t\tfor (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t    const char *ss = translateChar(STRING_ELT(s, i));\n\t\t    size_t nn = strlen(ss) + 1;\n\t\t    if(nn > 1) {\n\t\t\tcptr[i] = (char*) R_alloc(nn, sizeof(char));\n\t\t\tstrcpy(cptr[i], ss);\n\t\t    } else {\n\t\t\t/* Protect ourselves against those who like to\n\t\t\t   extend \"\", maybe using strncpy */\n\t\t\tnn = 128;\n\t\t\tcptr[i] = (char*) R_alloc(nn, sizeof(char));\n\t\t\tmemset(cptr[i], 0, nn);\n\t\t    }\n\t\t}\n\t\tcargs[na] = (void*) cptr;\n#ifdef R_MEMORY_PROFILING\n\t\tif (RTRACE(s)) memtrace_report(s, cargs[na]);\n#endif\n\t    }\n\t    break;\n\tcase VECSXP:\n\t    if (Fort) error(_(\"invalid mode (%s) to pass to Fortran (arg %d)\"),\n\t\t\t    type2char(t), na + 1);\n\t    /* Used read-only, so this is safe */\n#ifdef USE_RINTERNALS\n\t    cargs[na] = (void*) DATAPTR(s);\n#else\n\t    n = XLENGTH(s);\n\t    SEXP *lptr = (SEXP *) R_alloc(n, sizeof(SEXP));\n\t    for (R_xlen_t i = 0 ; i < n ; i++) lptr[i] = VECTOR_ELT(s, i);\n\t    cargs[na] = (void*) lptr;\n#endif\n\t    break;\n\tcase CLOSXP:\n\tcase BUILTINSXP:\n\tcase SPECIALSXP:\n\tcase ENVSXP:\n\t    if (Fort) error(_(\"invalid mode (%s) to pass to Fortran (arg %d)\"),\n\t\t\t    type2char(t), na + 1);\n\t    cargs[na] =  (void*) s;\n\t    break;\n\tcase NILSXP:\n\t    error(_(\"invalid mode (%s) to pass to C or Fortran (arg %d)\"),\n\t\t  type2char(t), na + 1);\n\t    cargs[na] =  (void*) s;\n\t    break;\n\tdefault:\n\t    /* Includes pairlists from R 2.15.0 */\n\t    if (Fort) error(_(\"invalid mode (%s) to pass to Fortran (arg %d)\"),\n\t\t\t    type2char(t), na + 1);\n\t    warning(\"passing an object of type '%s' to .C (arg %d) is deprecated\",\n\t\t    type2char(t), na + 1);\n\t    if (t == LISTSXP)\n\t\twarning(_(\"pairlists are passed as SEXP as from R 2.15.0\"));\n\t    cargs[na] =  (void*) s;\n\t    break;\n\t}\n\tif (nprotect) UNPROTECT(nprotect);\n    }\n\n    switch (nargs) {\n    case 0:\n\t/* Silicon graphics C chokes here */\n\t/* if there is no argument to fun. */\n\tfun(0);\n\tbreak;\n    case 1:\n\tfun(cargs[0]);\n\tbreak;\n    case 2:\n\tfun(cargs[0], cargs[1]);\n\tbreak;\n    case 3:\n\tfun(cargs[0], cargs[1], cargs[2]);\n\tbreak;\n    case 4:\n\tfun(cargs[0], cargs[1], cargs[2], cargs[3]);\n\tbreak;\n    case 5:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4]);\n\tbreak;\n    case 6:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5]);\n\tbreak;\n    case 7:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6]);\n\tbreak;\n    case 8:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7]);\n\tbreak;\n    case 9:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8]);\n\tbreak;\n    case 10:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9]);\n\tbreak;\n    case 11:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10]);\n\tbreak;\n    case 12:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11]);\n\tbreak;\n    case 13:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12]);\n\tbreak;\n    case 14:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13]);\n\tbreak;\n    case 15:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14]);\n\tbreak;\n    case 16:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15]);\n\tbreak;\n    case 17:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16]);\n\tbreak;\n    case 18:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17]);\n\tbreak;\n    case 19:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18]);\n\tbreak;\n    case 20:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19]);\n\tbreak;\n    case 21:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20]);\n\tbreak;\n    case 22:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21]);\n\tbreak;\n    case 23:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22]);\n\tbreak;\n    case 24:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23]);\n\tbreak;\n    case 25:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24]);\n\tbreak;\n    case 26:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25]);\n\tbreak;\n    case 27:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26]);\n\tbreak;\n    case 28:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27]);\n\tbreak;\n    case 29:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28]);\n\tbreak;\n    case 30:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29]);\n\tbreak;\n    case 31:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30]);\n\tbreak;\n    case 32:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31]);\n\tbreak;\n    case 33:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32]);\n\tbreak;\n    case 34:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33]);\n\tbreak;\n    case 35:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34]);\n\tbreak;\n    case 36:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35]);\n\tbreak;\n    case 37:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36]);\n\tbreak;\n    case 38:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37]);\n\tbreak;\n    case 39:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38]);\n\tbreak;\n    case 40:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39]);\n\tbreak;\n    case 41:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40]);\n\tbreak;\n    case 42:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41]);\n\tbreak;\n    case 43:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42]);\n\tbreak;\n    case 44:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43]);\n\tbreak;\n    case 45:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44]);\n\tbreak;\n    case 46:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45]);\n\tbreak;\n    case 47:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46]);\n\tbreak;\n    case 48:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47]);\n\tbreak;\n    case 49:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48]);\n\tbreak;\n    case 50:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49]);\n\tbreak;\n    case 51:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50]);\n\tbreak;\n    case 52:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51]);\n\tbreak;\n    case 53:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52]);\n\tbreak;\n    case 54:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53]);\n\tbreak;\n    case 55:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54]);\n\tbreak;\n    case 56:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55]);\n\tbreak;\n    case 57:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56]);\n\tbreak;\n    case 58:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57]);\n\tbreak;\n    case 59:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58]);\n\tbreak;\n    case 60:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59]);\n\tbreak;\n    case 61:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60]);\n\tbreak;\n    case 62:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61]);\n\tbreak;\n    case 63:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62]);\n\tbreak;\n    case 64:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63]);\n\tbreak;\n    case 65:\n\tfun(cargs[0],  cargs[1],  cargs[2],  cargs[3],  cargs[4],\n\t    cargs[5],  cargs[6],  cargs[7],  cargs[8],  cargs[9],\n\t    cargs[10], cargs[11], cargs[12], cargs[13], cargs[14],\n\t    cargs[15], cargs[16], cargs[17], cargs[18], cargs[19],\n\t    cargs[20], cargs[21], cargs[22], cargs[23], cargs[24],\n\t    cargs[25], cargs[26], cargs[27], cargs[28], cargs[29],\n\t    cargs[30], cargs[31], cargs[32], cargs[33], cargs[34],\n\t    cargs[35], cargs[36], cargs[37], cargs[38], cargs[39],\n\t    cargs[40], cargs[41], cargs[42], cargs[43], cargs[44],\n\t    cargs[45], cargs[46], cargs[47], cargs[48], cargs[49],\n\t    cargs[50], cargs[51], cargs[52], cargs[53], cargs[54],\n\t    cargs[55], cargs[56], cargs[57], cargs[58], cargs[59],\n\t    cargs[60], cargs[61], cargs[62], cargs[63], cargs[64]);\n\tbreak;\n    default:\n\terrorcall(call, _(\"too many arguments, sorry\"));\n    }\n\n    for (na = 0, pa = args ; pa != R_NilValue ; pa = CDR(pa), na++) {\n\tif(argStyles && argStyles[na] == R_ARG_IN) {\n\t    SET_VECTOR_ELT(ans, na, R_NilValue);\n\t    continue;\n\t} else {\n\t    void *p = cargs[na];\n\t    SEXP arg = CAR(pa);\n\t    s = VECTOR_ELT(ans, na);\n\t    R_NativePrimitiveArgType type =\n\t\tcheckTypes ? checkTypes[na] : TYPEOF(arg);\n\t    R_xlen_t n = xlength(arg);\n\n\t    switch(type) {\n\t    case RAWSXP:\n\t\tif (copy) {\n\t\t    s = allocVector(type, n);\n\t\t    unsigned char *ptr = (unsigned char *) p;\n\t\t    memcpy(RAW(s), ptr, n * sizeof(Rbyte));\n\t\t    ptr += n * sizeof(Rbyte);\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*ptr++ != FILL)\n\t\t\t    error(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t    ptr = (unsigned char *) p;\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*--ptr != FILL)\n\t\t\t    error(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t}\n\t\tbreak;\n\t    case INTSXP:\n\t\tif (copy) {\n\t\t    s = allocVector(type, n);\n\t\t    unsigned char *ptr = (unsigned char *) p;\n\t\t    memcpy(INTEGER(s), ptr, n * sizeof(int));\n\t\t    ptr += n * sizeof(int);\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*ptr++ != FILL)\n\t\t\t    error(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t    ptr = (unsigned char *) p;\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*--ptr != FILL)\n\t\t\t    error(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t}\n\t\tbreak;\n\t    case LGLSXP:\n\t\tif (copy) {\n\t\t    s = allocVector(type, n);\n\t\t    unsigned char *ptr = (unsigned char *) p;\n\t\t    int *iptr = (int*) ptr, tmp;\n\t\t    for (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t\ttmp =  iptr[i];\n\t\t\tLOGICAL(s)[i] = (tmp == NA_INTEGER || tmp == 0) ? tmp : 1;\n\t\t    }\n\t\t    ptr += n * sizeof(int);\n\t\t    for (int i = 0; i < NG;  i++)\n\t\t\tif(*ptr++ != FILL)\n\t\t\t    error(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t    ptr = (unsigned char *) p;\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*--ptr != FILL)\n\t\t\t    error(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t} else {\n\t\t    int *iptr = INTEGER(arg), tmp;\n\t\t    for (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t\ttmp =  iptr[i];\n\t\t\tiptr[i] = (tmp == NA_INTEGER || tmp == 0) ? tmp : 1;\n\t\t    }\n\t\t}\n\t\tbreak;\n\t    case REALSXP:\n\t    case SINGLESXP:\n\t\tif (copy) {\n\t\t    s = allocVector(REALSXP, n);\n\t\t    if (type == SINGLESXP || asLogical(getAttrib(arg, CSingSymbol)) == 1) {\n\t\t\tfloat *sptr = (float*) p;\n\t\t\tfor(R_xlen_t i = 0 ; i < n ; i++)\n\t\t\t    REAL(s)[i] = (double) sptr[i];\n\t\t    } else {\n\t\t\tunsigned char *ptr = (unsigned char *) p;\n\t\t\tmemcpy(REAL(s), ptr, n * sizeof(double));\n\t\t\tptr += n * sizeof(double);\n\t\t\tfor (int i = 0; i < NG; i++)\n\t\t\t    if(*ptr++ != FILL)\n\t\t\t\terror(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t\t      symName, type2char(type), na+1);\n\t\t\tptr = (unsigned char *) p;\n\t\t\tfor (int i = 0; i < NG; i++)\n\t\t\t    if(*--ptr != FILL)\n\t\t\t\terror(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t      Fort ? \".Fortran\" : \".C\",\n\t\t\t\t      symName, type2char(type), na+1);\n\t\t    }\n\t\t} else {\n\t\t    if (type == SINGLESXP || asLogical(getAttrib(arg, CSingSymbol)) == 1) {\n\t\t\ts = allocVector(REALSXP, n);\n\t\t\tfloat *sptr = (float*) p;\n\t\t\tfor(int i = 0 ; i < n ; i++)\n\t\t\t    REAL(s)[i] = (double) sptr[i];\n\t\t    }\n\t\t}\n\t\tbreak;\n\t    case CPLXSXP:\n\t\tif (copy) {\n\t\t    s = allocVector(type, n);\n\t\t    unsigned char *ptr = (unsigned char *) p;\n\t\t    memcpy(COMPLEX(s), p, n * sizeof(Rcomplex));\n\t\t    ptr += n * sizeof(Rcomplex);\n\t\t    for (int i = 0; i < NG;  i++)\n\t\t\tif(*ptr++ != FILL)\n\t\t\t    error(\"array over-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t    ptr = (unsigned char *) p;\n\t\t    for (int i = 0; i < NG; i++)\n\t\t\tif(*--ptr != FILL)\n\t\t\t    error(\"array under-run in %s(\\\"%s\\\") in %s argument %d\\n\",\n\t\t\t\t  Fort ? \".Fortran\" : \".C\",\n\t\t\t\t  symName, type2char(type), na+1);\n\t\t}\n\t\tbreak;\n\t    case STRSXP:\n\t\tif(Fort) {\n\t\t    char buf[256];\n\t\t    /* only return one string: warned on the R -> Fortran step */\n\t\t    strncpy(buf, (char*)p, 255);\n\t\t    buf[255] = '\\0';\n\t\t    PROTECT(s = allocVector(type, 1));\n\t\t    SET_STRING_ELT(s, 0, mkChar(buf));\n\t\t    UNPROTECT(1);\n\t\t} else if (copy) {\n\t\t    SEXP ss = arg;\n\t\t    PROTECT(s = allocVector(type, n));\n\t\t    char **cptr = (char**) p, **cptr0 = (char**) cargs0[na];\n\t\t    for (R_xlen_t i = 0 ; i < n ; i++) {\n\t\t\tunsigned char *ptr = (unsigned char *) cptr[i];\n\t\t\tSET_STRING_ELT(s, i, mkChar(cptr[i]));\n\t\t\tif (cptr[i] == cptr0[i]) {\n\t\t\t    const char *z = translateChar(STRING_ELT(ss, i));\n\t\t\t    for (int j = 0; j < NG; j++)\n\t\t\t\tif(*--ptr != FILL)\n\t\t\t\t    error(\"array under-run in .C(\\\"%s\\\") in character argument %d, element %d\",\n\t\t\t\t\t  symName, na+1, (int)(i+1));\n\t\t\t    ptr = (unsigned char *) cptr[i];\n\t\t\t    ptr += strlen(z) + 1;\n\t\t\t    for (int j = 0; j < NG;  j++)\n\t\t\t\tif(*ptr++ != FILL) {\n\t\t\t\t    // force termination\n\t\t\t\t    unsigned char *p = ptr;\n\t\t\t\t    for (int k = 1; k < NG - j; k++, p++)\n\t\t\t\t\tif (*p == FILL) *p = '\\0';\n\t\t\t\t    error(\"array over-run in .C(\\\"%s\\\") in character argument %d, element %d\\n'%s'->'%s'\\n\",\n\t\t\t\t\t  symName, na+1, (int)(i+1),\n\t\t\t\t\t  z, cptr[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t    }\n\t\t    UNPROTECT(1);\n\t\t} else {\n\t\t    PROTECT(s = allocVector(type, n));\n\t\t    char **cptr = (char**) p;\n\t\t    for (R_xlen_t i = 0 ; i < n ; i++)\n\t\t\tSET_STRING_ELT(s, i, mkChar(cptr[i]));\n\t\t    UNPROTECT(1);\n\t\t}\n\t\tbreak;\n\t    default:\n\t\tbreak;\n\t    }\n\t    if (s != arg) {\n\t\tPROTECT(s);\n\t\tDUPLICATE_ATTRIB(s, arg);\n\t\tSET_VECTOR_ELT(ans, na, s);\n\t\tUNPROTECT(1);\n\t    }\n\t}\n    }\n    UNPROTECT(1);\n    vmaxset(vmax);\n    return ans;\n}\n\n#ifndef NO_CALL_R\nstatic const struct {\n    const char *name;\n    const SEXPTYPE type;\n}\n\ntypeinfo[] = {\n    {\"logical\",\t  LGLSXP },\n    {\"integer\",\t  INTSXP },\n    {\"double\",\t  REALSXP},\n    {\"complex\",\t  CPLXSXP},\n    {\"character\", STRSXP },\n    {\"list\",\t  VECSXP },\n    {NULL,\t  0      }\n};\n\nstatic int string2type(char *s)\n{\n    int i;\n    for (i = 0 ; typeinfo[i].name ; i++) {\n\tif(!strcmp(typeinfo[i].name, s)) {\n\t    return typeinfo[i].type;\n\t}\n    }\n    error(_(\"type \\\"%s\\\" not supported in interlanguage calls\"), s);\n    return 1; /* for -Wall */\n}\n\n/* This is entirely legacy, with no known users (Mar 2012).\n   So we freeze the code involved.\n */\n\nstatic void *RObjToCPtr2(SEXP s)\n{\n    int n;\n\n    switch(TYPEOF(s)) {\n    case LGLSXP:\n    case INTSXP:\n\tn = LENGTH(s);\n\tint *iptr = INTEGER(s);\n\tiptr = (int*) R_alloc(n, sizeof(int));\n\tfor (int i = 0 ; i < n ; i++) iptr[i] = INTEGER(s)[i];\n\treturn (void*) iptr;\n\tbreak;\n    case REALSXP:\n\tn = LENGTH(s);\n\tdouble *rptr = REAL(s);\n\trptr = (double*) R_alloc(n, sizeof(double));\n\tfor (int i = 0 ; i < n ; i++) rptr[i] = REAL(s)[i];\n\treturn (void*) rptr;\n\tbreak;\n    case CPLXSXP:\n\tn = LENGTH(s);\n\tRcomplex *zptr = COMPLEX(s);\n\tzptr = (Rcomplex*) R_alloc(n, sizeof(Rcomplex));\n\tfor (int i = 0 ; i < n ; i++) zptr[i] = COMPLEX(s)[i];\n\treturn (void*) zptr;\n\tbreak;\n    case STRSXP:\n\tn = LENGTH(s);\n\tchar **cptr = (char**) R_alloc(n, sizeof(char*));\n\tfor (int i = 0 ; i < n ; i++) {\n\t    const char *ss = translateChar(STRING_ELT(s, i));\n\t    cptr[i] = (char*) R_alloc(strlen(ss) + 1, sizeof(char));\n\t    strcpy(cptr[i], ss);\n\t}\n\treturn (void*) cptr;\n\tbreak;\n\t/* From here down, probably not right */\n    case VECSXP:\n\tn = length(s);\n\tSEXP *lptr = (SEXP *) R_alloc(n, sizeof(SEXP));\n\tfor (int i = 0 ; i < n ; i++) lptr[i] = VECTOR_ELT(s, i);\n\treturn (void*) lptr;\n\tbreak;\n    default:\n\treturn (void*) s;\n    }\n}\n\n\n\nvoid call_R(char *func, long nargs, void **arguments, char **modes,\n\t    long *lengths, char **names, long nres, char **results)\n{\n    SEXP call, pcall, s;\n    SEXPTYPE type;\n    int i, j, n;\n\n    if (!isFunction((SEXP)func))\n\terror(\"invalid function in call_R\");\n    if (nargs < 0)\n\terror(\"invalid argument count in call_R\");\n    if (nres < 0)\n\terror(\"invalid return value count in call_R\");\n    PROTECT(pcall = call = allocList((int) nargs + 1));\n    SET_TYPEOF(call, LANGSXP);\n    SETCAR(pcall, (SEXP)func);\n    s = R_NilValue;\t\t/* -Wall */\n    for (i = 0 ; i < nargs ; i++) {\n\tpcall = CDR(pcall);\n\ttype = string2type(modes[i]);\n\tswitch(type) {\n\tcase LGLSXP:\n\tcase INTSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(type, n));\n\t    memcpy(INTEGER(CAR(pcall)), arguments[i], n * sizeof(int));\n\t    break;\n\tcase REALSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(REALSXP, n));\n\t    memcpy(REAL(CAR(pcall)), arguments[i], n * sizeof(double));\n\t    break;\n\tcase CPLXSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(CPLXSXP, n));\n\t    memcpy(REAL(CAR(pcall)), arguments[i], n * sizeof(Rcomplex));\n\t    break;\n\tcase STRSXP:\n\t    n = (int) lengths[i];\n\t    SETCAR(pcall, allocVector(STRSXP, n));\n\t    for (j = 0 ; j < n ; j++) {\n\t\tchar *str = (char*)(arguments[i]);\n\t\tSET_STRING_ELT(CAR(pcall), i, mkChar(str));\n\t    }\n\t    break;\n\tdefault:\n\t    error(_(\"mode '%s' is not supported in call_R\"), modes[i]);\n\t}\n\tif(names && names[i])\n\t    SET_TAG(pcall, install(names[i]));\n\tSET_NAMED(CAR(pcall), 2);\n    }\n    PROTECT(s = eval(call, R_GlobalEnv));\n    switch(TYPEOF(s)) {\n    case LGLSXP:\n    case INTSXP:\n    case REALSXP:\n    case CPLXSXP:\n    case STRSXP:\n\tif(nres > 0)\n\t    results[0] = (char *) RObjToCPtr2(s);\n\tbreak;\n    case VECSXP:\n\tn = length(s);\n\tif (nres < n) n = (int) nres;\n\tfor (i = 0 ; i < n ; i++)\n\t    results[i] = (char *) RObjToCPtr2(VECTOR_ELT(s, i));\n\tbreak;\n    case LISTSXP:\n\tn = length(s);\n\tif(nres < n) n = (int) nres;\n\tfor(i = 0 ; i < n ; i++) {\n\t    results[i] = (char *) RObjToCPtr2(s);\n\t    s = CDR(s);\n\t}\n\tbreak;\n    }\n    UNPROTECT(2);\n    return;\n}\n\nvoid call_S(char *func, long nargs, void **arguments, char **modes,\n\t    long *lengths, char **names, long nres, char **results)\n{\n    call_R(func, nargs, arguments, modes, lengths, names, nres, results);\n}\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/main/Rdynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997-2015 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  http://www.r-project.org/Licenses/\n */\n\n\n/*\n  This is an effort to merge the 3 different dynload.c files in the\n  distribution from the unix/, macintosh/dll/ and gnuwin32/ directories.\n  The aim is to consolidate these different implementations into\n      i) a generic or platform-independent common core\n     ii) platform-dependent routines that are registered\n\t as function pointers.\n  The reason for using function pointers rather than explicit\n  linking of symbols is\n     a) to avoid confusion in the linking\n     b) to allow for easily overriding these in embedded applications\n\tin which a host application needs to control how R finds\n\tsymbols. This may be necessary for security reasons.\n */\n\n/*  Dynamic Loading Support\n *\n *  This module provides support for run-time loading of shared objects\n *  access to symbols within such objects via .C and .Fortran.  This is\n *  done under Unix with dlopen, dlclose and dlsym (the exception is\n *  hpux, where we use compatibility code provided by Luke Tierney).\n *  There are two cases:\n *\n *\n *  1. The dlopen interface is available.\n *\n *  In this case all symbol location in packages is done using the\n *  dlopen routines.  We maintain a list of currently loaded shared\n *  objects in an array called \"LoadedDLL\" with the number of currently\n *  loaded objects being \"CountDLL\".  To locate a symbol, we probe\n *  the loaded objects in order until the symbol is located.  If we\n *  do not find a symbol in the loaded objects, we search the\n *  executable itself.  This search is not very efficient, but this\n *  probably pales into insignificance when compared with the\n *  inefficiencies in the R interpreter.\n *\n *  Loading and unloading of shared objects is done via the routines\n *  AddDLL and DeleteDLL.  These routines maintain the list of\n *  currently loaded objects.  When an object is added, any existing\n *  reference to that object is deleted and then the object is\n *  inserted at the start of the search list.  This way, symbols in\n *  more recently loaded objects are found first.\n *\n *\n *  Accessing native routines in base (the R executable).\n *\n *  In this case, we use the registration mechanism and the DllInfo array\n *  in ../main/Rdynload.c to locate functions in the executable. We do this\n *  by straight linear search through the table.\n *  Note that the base routines registered are listed in\n *               ../main/registration.c\n *  and are registered during the initialization of the R engine.\n *  (This replaces the previous mechanism that built a table\n *  from ../appl/ROUTINES using Perl/sed).\n *\n *\n *  If speed is ever an issue in the lookup of registered symbols, we can\n *  store the registered routines in a hashtable or binary tree as they\n *  are being registered.\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <Defn.h>\n#include <Internal.h>\n\n#include <string.h>\n#include <stdlib.h>\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n#include <Rmath.h>\n#include <Rdynpriv.h>\n\n#ifdef Unix\n/* HP-UX 11.0 has dlfcn.h, but according to libtool as of Dec 2001\n   this support is broken. So we force use of shlib even when dlfcn.h\n   is available */\n# ifdef __hpux\n#  ifdef HAVE_DL_H\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# else\n#  ifdef HAVE_DLFCN_H\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# endif /* __hpux */\n# ifndef HAVE_NO_SYMBOL_UNDERSCORE\n#  ifdef HAVE_ELF_H\n#   define HAVE_NO_SYMBOL_UNDERSCORE\n#  endif /* HAVE_ELF_H */\n# endif /* HAVE_NO_SYMBOL_UNDERSCORE */\n#endif\n\n#ifdef Win32\n# define HAVE_DYNAMIC_LOADING\n#endif\n\n\n#ifdef CACHE_DLL_SYM  /* Used on Windows */\n#define MAX_CACHE\t100\n/* keep a record of symbols that have been found, about 70 bytes each */\nR_CPFun CPFun[MAX_CACHE];\nint nCPFun = 0;\n#endif\n\n#define MAX_NUM_DLLS\t100\n\nstatic int CountDLL = 0;\n\n#include <R_ext/Rdynload.h>\n\nstatic DllInfo LoadedDLL[MAX_NUM_DLLS];\n\nstatic int addDLL(char *dpath, char *name, HINSTANCE handle);\nstatic SEXP Rf_MakeDLLInfo(DllInfo *info);\n\nstatic SEXP createRSymbolObject(SEXP sname, DL_FUNC f,\n\t\t\t\tR_RegisteredNativeSymbol *symbol,\n\t\t\t\tRboolean withRegistrationInfo);\n\nstatic DllInfo *R_RegisterDLL(HINSTANCE handle, const char *path);\n\nattribute_hidden OSDynSymbol Rf_osDynSymbol;\nattribute_hidden OSDynSymbol *R_osDynSymbol = &Rf_osDynSymbol;\n\nvoid R_init_base(DllInfo *); /* In Registration.c */\nDL_FUNC R_dlsym(DllInfo *dll, char const *name,\n\t\tR_RegisteredNativeSymbol *symbol);\n\nvoid attribute_hidden\nInitDynload()\n{\n    DllInfo *dll;\n    int which = addDLL(strdup(\"base\"), \"base\", NULL);\n    dll = &LoadedDLL[which];\n    R_init_base(dll);\n    InitFunctionHashing();\n}\n\n/* returns DllInfo used by the embedding application.\n   the underlying \"(embedding)\" entry is created if not present */\nDllInfo *R_getEmbeddingDllInfo()\n{\n    DllInfo *dll = R_getDllInfo(\"(embedding)\");\n    if (dll == NULL) {\n\tint which = addDLL(strdup(\"(embedding)\"), \"(embedding)\", NULL);\n\tdll = &LoadedDLL[which];\n\t/* make sure we don't attempt dynamic lookup */\n\tR_useDynamicSymbols(dll, FALSE);\n    }\n    return dll;\n}\n\nRboolean R_useDynamicSymbols(DllInfo *info, Rboolean value)\n{\n    Rboolean old;\n    old = info->useDynamicLookup;\n    info->useDynamicLookup = value;\n    return old;\n}\n\nRboolean R_forceSymbols(DllInfo *info, Rboolean value)\n{\n    Rboolean old;\n    old = info->forceSymbols;\n    info->forceSymbols = value;\n    return old;\n}\n\nstatic void\nR_addCRoutine(DllInfo *info, const R_CMethodDef * const croutine,\n\t      Rf_DotCSymbol *sym);\nstatic void\nR_addCallRoutine(DllInfo *info,\n\t\t const R_CallMethodDef * const croutine,\n\t\t Rf_DotCallSymbol *sym);\nstatic void\nR_addFortranRoutine(DllInfo *info,\n\t\t    const R_FortranMethodDef * const croutine,\n\t\t    Rf_DotFortranSymbol *sym);\nstatic void\nR_addExternalRoutine(DllInfo *info,\n\t\t     const R_ExternalMethodDef * const croutine,\n\t\t     Rf_DotExternalSymbol *sym);\n\n\n/*\n Returns a reference to the DllInfo object associated with the shared object\n with the path name `path'. This ensures uniqueness rather than having the\n undesirable situation of two object with the same name but in different\n directories.\n This is available so that it can be called from arbitrary C routines\n that need to call R_registerRoutines(). The initialization routine\n R_init_<object name> is passed the DllInfo reference as an argument.\n Other routines must explicitly request it using this routine.\n */\nDllInfo *\nR_getDllInfo(const char *path)\n{\n    int i;\n    for(i = 0; i < CountDLL; i++) {\n\tif(strcmp(LoadedDLL[i].path, path) == 0) return(&LoadedDLL[i]);\n    }\n    return (DllInfo*) NULL;\n}\n\n/*\n  Explicitly register the native routines for use in .Call(), .C() and\n  .Fortran() functions. These registered values are used to resolve\n  symbols in an object that makes a call to this routine, rather than\n  the usual dynamic resolution done by dlsym() or the equivalent on\n  the different platforms.\n */\nint\nR_registerRoutines(DllInfo *info, const R_CMethodDef * const croutines,\n\t\t   const R_CallMethodDef * const callRoutines,\n\t\t   const R_FortranMethodDef * const fortranRoutines,\n\t\t   const R_ExternalMethodDef * const externalRoutines)\n{\n    int i, num;\n\n    if(info == NULL)\n\terror(_(\"R_RegisterRoutines called with invalid DllInfo object.\"));\n\n    /* Default is to look in registered and then dynamic (unless\n       the is no handle such as in \"base\" or \"embedded\")\n       Potentially change in the future to be only registered\n       if there are any registered values.\n    */\n    info->useDynamicLookup = (info->handle) ? TRUE : FALSE;\n    info->forceSymbols = FALSE;\n\n    if(croutines) {\n\tfor(num = 0; croutines[num].name != NULL; num++) {;}\n\tinfo->CSymbols = (Rf_DotCSymbol*)calloc((size_t) num,\n\t\t\t\t\t\tsizeof(Rf_DotCSymbol));\n\tinfo->numCSymbols = num;\n\tfor(i = 0; i < num; i++) {\n\t    R_addCRoutine(info, croutines+i, info->CSymbols + i);\n\t}\n    }\n\n    if(fortranRoutines) {\n\tfor(num = 0; fortranRoutines[num].name != NULL; num++) {;}\n\tinfo->FortranSymbols =\n\t    (Rf_DotFortranSymbol*)calloc((size_t) num,\n\t\t\t\t\t sizeof(Rf_DotFortranSymbol));\n\tinfo->numFortranSymbols = num;\n\tfor(i = 0; i < num; i++)\n\t    R_addFortranRoutine(info, fortranRoutines+i,\n\t\t\t\tinfo->FortranSymbols + i);\n    }\n\n    if(callRoutines) {\n\tfor(num = 0; callRoutines[num].name != NULL; num++) {;}\n\tinfo->CallSymbols =\n\t    (Rf_DotCallSymbol*)calloc((size_t) num, sizeof(Rf_DotCallSymbol));\n\tinfo->numCallSymbols = num;\n\tfor(i = 0; i < num; i++)\n\t    R_addCallRoutine(info, callRoutines+i, info->CallSymbols + i);\n    }\n\n    if(externalRoutines) {\n\tfor(num = 0; externalRoutines[num].name != NULL; num++) {;}\n\tinfo->ExternalSymbols =\n\t    (Rf_DotExternalSymbol*)calloc((size_t) num,\n\t\t\t\t\t  sizeof(Rf_DotExternalSymbol));\n\tinfo->numExternalSymbols = num;\n\n\tfor(i = 0; i < num; i++) \n\t    R_addExternalRoutine(info, externalRoutines+i,\n\t\t\t\t info->ExternalSymbols + i);\n    }\n\n    return(1);\n}\n\nstatic void\nR_setPrimitiveArgTypes(const R_FortranMethodDef * const croutine,\n\t\t       Rf_DotFortranSymbol *sym)\n{\n    sym->types = (R_NativePrimitiveArgType *)\n\tmalloc(sizeof(R_NativePrimitiveArgType) * (size_t) croutine->numArgs);\n    if(!sym->types)\n\terror(\"allocation failure in R_setPrimitiveArgTypes\");\n    if(sym->types)\n\tmemcpy(sym->types, croutine->types,\n\t       sizeof(R_NativePrimitiveArgType) * (size_t) croutine->numArgs);\n\n}\n\nstatic void\nR_setArgStyles(const R_FortranMethodDef * const croutine,\n\t       Rf_DotFortranSymbol *sym)\n{\n    sym->styles = (R_NativeArgStyle *)\n\tmalloc(sizeof(R_NativeArgStyle) * (size_t) croutine->numArgs);\n    if(!sym->styles)\n\terror(\"allocation failure in R_setArgStyles\");\n    if(sym->styles)\n\tmemcpy(sym->styles, croutine->styles,\n\t       sizeof(R_NativeArgStyle) * (size_t) croutine->numArgs);\n}\n\nstatic void\nR_addFortranRoutine(DllInfo *info,\n\t\t    const R_FortranMethodDef * const croutine,\n\t\t    Rf_DotFortranSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n    if(croutine->types)\n\tR_setPrimitiveArgTypes(croutine, sym);\n    if(croutine->styles)\n\tR_setArgStyles(croutine, sym);\n}\n\nstatic void\nR_addExternalRoutine(DllInfo *info,\n\t\t     const R_ExternalMethodDef * const croutine,\n\t\t     Rf_DotExternalSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n}\n\n\n\nstatic void\nR_addCRoutine(DllInfo *info, const R_CMethodDef * const croutine,\n\t      Rf_DotCSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n    if(croutine->types)\n\tR_setPrimitiveArgTypes(croutine, sym);\n    if(croutine->styles)\n\tR_setArgStyles(croutine, sym);\n\n}\n\nstatic void\nR_addCallRoutine(DllInfo *info, const R_CallMethodDef * const croutine,\n\t\t Rf_DotCallSymbol *sym)\n{\n    sym->name = strdup(croutine->name);\n    sym->fun = croutine->fun;\n    sym->numArgs = croutine->numArgs > -1 ? croutine->numArgs : -1;\n}\n\nstatic void\nRf_freeCSymbol(Rf_DotCSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeCallSymbol(Rf_DotCallSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeExternalSymbol(Rf_DotCallSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeFortranSymbol(Rf_DotFortranSymbol *sym)\n{\n    free(sym->name);\n}\n\nstatic void\nRf_freeDllInfo(DllInfo *info)\n{\n    int i;\n    free(info->name);\n    free(info->path);\n    if(info->CSymbols) {\n\tfor(i = 0; i < info->numCSymbols; i++)\n\t    Rf_freeCSymbol(info->CSymbols+i);\n\tfree(info->CSymbols);\n    }\n    if(info->CallSymbols) {\n\tfor(i = 0; i < info->numCallSymbols; i++)\n\t    Rf_freeCallSymbol(info->CallSymbols+i);\n\tfree(info->CallSymbols);\n    }\n    if(info->ExternalSymbols) {\n\tfor(i = 0; i < info->numExternalSymbols; i++)\n\t    Rf_freeExternalSymbol(info->ExternalSymbols+i);\n\tfree(info->ExternalSymbols);\n    }\n    if(info->FortranSymbols) {\n\tfor(i = 0; i < info->numFortranSymbols; i++)\n\t    Rf_freeFortranSymbol(info->FortranSymbols+i);\n\tfree(info->FortranSymbols);\n    }\n}\n\n\ntypedef void (*DllInfoUnloadCall)(DllInfo *);\ntypedef DllInfoUnloadCall DllInfoInitCall;\n\nstatic Rboolean\nR_callDLLUnload(DllInfo *dllInfo)\n{\n    char buf[1024];\n    DllInfoUnloadCall f;\n    R_RegisteredNativeSymbol symbol;\n    symbol.type = R_ANY_SYM;\n\n    snprintf(buf, 1024, \"R_unload_%s\", dllInfo->name);\n    f = (DllInfoUnloadCall) R_dlsym(dllInfo, buf, &symbol);\n    if(f) f(dllInfo);\n\n    return(TRUE);\n}\n\n\t/* Remove the specified DLL from the current DLL list */\n\t/* Returns 1 if the DLL was found and removed from */\n\t/* the list and returns 0 otherwise. */\n\nstatic int DeleteDLL(const char *path)\n{\n    int   i, loc;\n\n    for (i = 0; i < CountDLL; i++) {\n\tif (!strcmp(path, LoadedDLL[i].path)) {\n\t    loc = i;\n\t    goto found;\n\t}\n    }\n    return 0;\nfound:\n#ifdef CACHE_DLL_SYM\n    if(R_osDynSymbol->deleteCachedSymbols)\n\tR_osDynSymbol->deleteCachedSymbols(&LoadedDLL[loc]);\n#endif\n    R_callDLLUnload(&LoadedDLL[loc]);\n    R_osDynSymbol->closeLibrary(LoadedDLL[loc].handle);\n    Rf_freeDllInfo(LoadedDLL+loc);\n    /* FIXME: why not use memcpy here? */\n    for(i = loc + 1 ; i < CountDLL ; i++) {\n\tLoadedDLL[i - 1].path = LoadedDLL[i].path;\n\tLoadedDLL[i - 1].name = LoadedDLL[i].name;\n\tLoadedDLL[i - 1].handle = LoadedDLL[i].handle;\n\tLoadedDLL[i - 1].useDynamicLookup = LoadedDLL[i].useDynamicLookup;\n\tLoadedDLL[i - 1].numCSymbols = LoadedDLL[i].numCSymbols;\n\tLoadedDLL[i - 1].numCallSymbols = LoadedDLL[i].numCallSymbols;\n\tLoadedDLL[i - 1].numFortranSymbols = LoadedDLL[i].numFortranSymbols;\n\tLoadedDLL[i - 1].numExternalSymbols = LoadedDLL[i].numExternalSymbols;\n\tLoadedDLL[i - 1].CSymbols = LoadedDLL[i].CSymbols;\n\tLoadedDLL[i - 1].CallSymbols = LoadedDLL[i].CallSymbols;\n\tLoadedDLL[i - 1].FortranSymbols = LoadedDLL[i].FortranSymbols;\n\tLoadedDLL[i - 1].ExternalSymbols = LoadedDLL[i].ExternalSymbols;\n\tLoadedDLL[i - 1].forceSymbols = LoadedDLL[i].forceSymbols;\n    }\n    CountDLL--;\n    return 1;\n}\n\nattribute_hidden\nDL_FUNC Rf_lookupCachedSymbol(const char *name, const char *pkg, int all)\n{\n#ifdef CACHE_DLL_SYM\n    int i;\n    for (i = 0; i < nCPFun; i++)\n\tif (!strcmp(name, CPFun[i].name) &&\n\t    (all || !strcmp(pkg, CPFun[i].pkg)))\n\t    return CPFun[i].func;\n#endif\n\n    return((DL_FUNC) NULL);\n}\n\n\n\n#ifdef Win32\n#define DLLerrBUFSIZE 4000\n#else  /* Not Windows */\n#define DLLerrBUFSIZE 1000\n#endif\n\nstatic char DLLerror[DLLerrBUFSIZE] = \"\";\n\n/* the error message; length taken from ERRBUFSIZE in ./hpdlfcn.c  */\n\n\t/* Inserts the specified DLL at the head of the DLL list */\n\t/* Returns 1 if the DLL was successfully added */\n\t/* and returns 0 if the DLL table is full or */\n\t/* or if dlopen fails for some reason. */\n\n\nstatic DllInfo* AddDLL(const char *path, int asLocal, int now,\n\t\t       const char *DLLsearchpath)\n{\n    HINSTANCE handle;\n    DllInfo *info = NULL;\n\n    DeleteDLL(path);\n    if(CountDLL == MAX_NUM_DLLS) {\n\tstrcpy(DLLerror, _(\"`maximal number of DLLs reached...\"));\n\treturn NULL;\n    }\n\n    handle = R_osDynSymbol->loadLibrary(path, asLocal, now, DLLsearchpath);\n\n    if(handle == NULL) {\n\tR_osDynSymbol->getError(DLLerror, DLLerrBUFSIZE);\n\treturn NULL;\n    }\n\n    info = R_RegisterDLL(handle, path);\n\n    /* Now look for an initializing routine named R_init_<object name>.\n       If it is present, we call it. It should take a reference to the\n       DllInfo object currently being initialized.\n    */\n    if(info) {\n\tconst char *nm = info->name;\n\tsize_t len = strlen(nm) + 9;\n\tchar tmp[len]; // R_init_ + underscore + null\n\tDllInfoInitCall f;\n#ifdef HAVE_NO_SYMBOL_UNDERSCORE\n\tsnprintf(tmp, len,  \"%s%s\",\"R_init_\", info->name);\n#else\n\tsnprintf(tmp, len, \"_%s%s\",\"R_init_\", info->name);\n#endif\n\tf = (DllInfoInitCall) R_osDynSymbol->dlsym(info, tmp);\n\t/* If that failed, might have used the package name with\n\t   . replaced by _ (as . it not valid in symbol names). */\n\tif(!f) {\n\t    /* This is potentially unsafe in MBCSs, as '.' might be\n\t       part of a character: but is not in UTF-8 */\n\t    for(char *p = tmp; *p; p++) if(*p == '.') *p = '_';\n\t    f = (DllInfoInitCall) R_osDynSymbol->dlsym(info, tmp);\n\t}\n\tif(f) f(info);\n    }\n\n    return info;\n}\n\n\nstatic DllInfo *R_RegisterDLL(HINSTANCE handle, const char *path)\n{\n    char *dpath,  DLLname[PATH_MAX], *p;\n    DllInfo *info;\n\n    info = &LoadedDLL[CountDLL];\n    /* default is to use old-style dynamic lookup.  The object's\n       initialization routine can limit access by setting this to FALSE.\n    */\n    info->useDynamicLookup = TRUE;\n    info->forceSymbols = FALSE;\n\n    dpath = (char *) malloc(strlen(path)+1);\n    if(dpath == NULL) {\n\tstrcpy(DLLerror, _(\"could not allocate space for 'path'\"));\n\tR_osDynSymbol->closeLibrary(handle);\n\treturn 0;\n    }\n    strcpy(dpath, path);\n\n    if(R_osDynSymbol->fixPath) R_osDynSymbol->fixPath(dpath);\n\n    /* keep only basename from path */\n    p = Rf_strrchr(dpath, FILESEP[0]);\n    if(!p) p = dpath; else p++;\n    if(strlen(p) < PATH_MAX) strcpy(DLLname, p);\n    else error(_(\"DLLname '%s' is too long\"), p);\n\n    /* remove SHLIB_EXT if present */\n    p = DLLname + strlen(DLLname) - strlen(SHLIB_EXT);\n#ifdef Win32  /* case-insensitive file system */\n    if(p > DLLname && stricmp(p, SHLIB_EXT) == 0) *p = '\\0';\n#else\n    if(p > DLLname && strcmp(p, SHLIB_EXT) == 0) *p = '\\0';\n#endif\n\n    addDLL(dpath, DLLname, handle);\n\n    return(info);\n}\n\nstatic int\naddDLL(char *dpath, char *DLLname, HINSTANCE handle)\n{\n    int ans = CountDLL;\n    char *name = (char *) malloc(strlen(DLLname)+1);\n    if(name == NULL) {\n\tstrcpy(DLLerror, _(\"could not allocate space for 'name'\"));\n\tif(handle)\n\t    R_osDynSymbol->closeLibrary(handle);\n\tfree(dpath);\n\treturn 0;\n    }\n\n    strcpy(name, DLLname);\n    LoadedDLL[CountDLL].path = dpath;\n    LoadedDLL[CountDLL].name = name;\n    LoadedDLL[CountDLL].handle = handle;\n\n    LoadedDLL[CountDLL].numCSymbols = 0;\n    LoadedDLL[CountDLL].numCallSymbols = 0;\n    LoadedDLL[CountDLL].numFortranSymbols = 0;\n    LoadedDLL[CountDLL].numExternalSymbols = 0;\n    LoadedDLL[CountDLL].CSymbols = NULL;\n    LoadedDLL[CountDLL].CallSymbols = NULL;\n    LoadedDLL[CountDLL].FortranSymbols = NULL;\n    LoadedDLL[CountDLL].ExternalSymbols = NULL;\n    CountDLL++;\n\n    return(ans);\n}\n\nstatic Rf_DotCSymbol *\nRf_lookupRegisteredCSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numCSymbols; i++) {\n\tif(strcmp(name, info->CSymbols[i].name) == 0)\n\t    return(&(info->CSymbols[i]));\n    }\n    return NULL;\n}\n\nstatic Rf_DotFortranSymbol *\nRf_lookupRegisteredFortranSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numFortranSymbols; i++) {\n\tif(strcmp(name, info->FortranSymbols[i].name) == 0)\n\t    return(&(info->FortranSymbols[i]));\n    }\n\n    return (Rf_DotFortranSymbol*) NULL;\n}\n\nstatic Rf_DotCallSymbol *\nRf_lookupRegisteredCallSymbol(DllInfo *info, const char *name)\n{\n\n    for(int i = 0; i < info->numCallSymbols; i++) {\n\tif(strcmp(name, info->CallSymbols[i].name) == 0)\n\t    return(&(info->CallSymbols[i]));\n    }\n    return (Rf_DotCallSymbol*) NULL;\n}\n\nstatic Rf_DotExternalSymbol *\nRf_lookupRegisteredExternalSymbol(DllInfo *info, const char *name)\n{\n    for(int i = 0; i < info->numExternalSymbols; i++) {\n\tif(strcmp(name, info->ExternalSymbols[i].name) == 0)\n\t    return(&(info->ExternalSymbols[i]));\n    }\n    return (Rf_DotExternalSymbol*) NULL;\n}\n\nstatic DL_FUNC \nR_getDLLRegisteredSymbol(DllInfo *info, const char *name,\n\t\t\t R_RegisteredNativeSymbol *symbol)\n{\n    NativeSymbolType purpose = R_ANY_SYM;\n\n    if(symbol)\n\tpurpose = symbol->type;\n\n    if((purpose == R_ANY_SYM || purpose == R_C_SYM) &&\n       info->numCSymbols > 0) {\n\tRf_DotCSymbol *sym;\n\tsym = Rf_lookupRegisteredCSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_C_SYM;\n\t\tsymbol->symbol.c = sym;\n\t\tsymbol->dll = info;\n\t    }\n\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_CALL_SYM) &&\n       info->numCallSymbols > 0) {\n\tRf_DotCallSymbol *sym;\n\tsym = Rf_lookupRegisteredCallSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_CALL_SYM;\n\t\tsymbol->symbol.call = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_FORTRAN_SYM) &&\n       info->numFortranSymbols > 0) {\n\tRf_DotFortranSymbol *sym;\n\tsym = Rf_lookupRegisteredFortranSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_FORTRAN_SYM;\n\t\tsymbol->symbol.fortran = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    if((purpose == R_ANY_SYM || purpose == R_EXTERNAL_SYM) &&\n       info->numExternalSymbols > 0) {\n\tRf_DotExternalSymbol *sym;\n\tsym = Rf_lookupRegisteredExternalSymbol(info, name);\n\tif(sym) {\n\t    if(symbol) {\n\t\tsymbol->type = R_EXTERNAL_SYM;\n\t\tsymbol->symbol.external = sym;\n\t\tsymbol->dll = info;\n\t    }\n\t    return((DL_FUNC) sym->fun);\n\t}\n    }\n\n    return((DL_FUNC) NULL);\n}\n\nDL_FUNC attribute_hidden\nR_dlsym(DllInfo *info, char const *name,\n\tR_RegisteredNativeSymbol *symbol)\n{\n    size_t len = strlen(name) + 4; \n    char buf[len]; /* up to 3 additional underscores */\n    DL_FUNC f;\n\n    f = R_getDLLRegisteredSymbol(info, name, symbol);\n    if(f) return(f);\n\n\n    if(info->useDynamicLookup == FALSE) return(NULL);\n\n#ifdef HAVE_NO_SYMBOL_UNDERSCORE\n    snprintf(buf, len, \"%s\", name);\n#else\n    snprintf(buf, len, \"_%s\", name);\n#endif\n\n#ifdef HAVE_F77_UNDERSCORE\n    if(symbol && symbol->type == R_FORTRAN_SYM) {\n\tstrcat(buf, \"_\");\n# ifdef HAVE_F77_EXTRA_UNDERSCORE\n\tif(strchr(name, '_')) strcat(buf, \"_\");\n# endif\n    }\n#endif\n\n    f = (DL_FUNC) R_osDynSymbol->dlsym(info, buf);\n#ifdef HAVE_F77_UNDERSCORE\n    if (!f && symbol && symbol->type == R_ANY_SYM) {\n\tstrcat(buf, \"_\");\n# ifdef HAVE_F77_EXTRA_UNDERSCORE\n\tif(strchr(name, '_')) strcat(buf, \"_\");\n# endif\n\tf = (DL_FUNC) R_osDynSymbol->dlsym(info, buf);\n    }\n#endif\n\n    return f;\n}\n\n/* R_FindSymbol checks whether one of the objects that have been\n   loaded contains the symbol name and returns a pointer to that\n   symbol upon success. \n*/\n\nDL_FUNC R_FindSymbol(char const *name, char const *pkg,\n\t\t     R_RegisteredNativeSymbol *symbol)\n{\n    DL_FUNC fcnptr = (DL_FUNC) NULL;\n    int i, all = (strlen(pkg) == 0), doit;\n\n    if(R_osDynSymbol->lookupCachedSymbol)\n\tfcnptr = R_osDynSymbol->lookupCachedSymbol(name, pkg, all);\n\n    if(fcnptr) return(fcnptr);\n\n    /* The following is not legal ANSI C. */\n    /* It is only meant to be used in systems supporting */\n    /* the dlopen() interface, in which systems data and  */\n    /* function pointers _are_ the same size and _can_   */\n    /* be cast without loss of information.\t     */\n\n    for (i = CountDLL - 1; i >= 0; i--) {\n\tdoit = all;\n\tif(!doit && !strcmp(pkg, LoadedDLL[i].name)) doit = 2;\n\tif(doit && LoadedDLL[i].forceSymbols) doit = 0;\n\tif(doit) {\n\t    fcnptr = R_dlsym(&LoadedDLL[i], name, symbol); /* R_osDynSymbol->dlsym */\n\t    if (fcnptr != (DL_FUNC) NULL) {\n\t\tif(symbol)\n\t\t    symbol->dll = LoadedDLL+i;\n#ifdef CACHE_DLL_SYM\n\t\tif(strlen(pkg) <= 20 && strlen(name) <= 40 && nCPFun < MAX_CACHE\n\t\t   && (!symbol || !symbol->symbol.c)) {\n\t\t    strcpy(CPFun[nCPFun].pkg, LoadedDLL[i].name);\n\t\t    strcpy(CPFun[nCPFun].name, name);\n\t\t    CPFun[nCPFun++].func = fcnptr;\n\t\t}\n#endif\n\t\treturn fcnptr;\n\t    }\n\t}\n\tif(doit > 1) return (DL_FUNC) NULL;  /* Only look in the first-matching DLL */\n    }\n\n    return (DL_FUNC) NULL;\n}\n\n\nstatic void GetFullDLLPath(SEXP call, char *buf, const char *const path)\n{\n    R_osDynSymbol->getFullDLLPath(call, buf, path);\n}\n\n\t/* do_dynload implements the R-Interface for the */\n\t/* loading of shared objects */\n\n/*\n  Extended to support 2 additional arguments (3 in total).\n  First argument is the name of the DLL.\n  Second argument is a logical indicating whether we\n  want the symbols to be kept in their own local symbol table\n  or added to the global symbol table of the application.\n  Third argument is a logical indicating whether the\n  dynamic loading should relocate all routine symbols\n  now and signal any errors immediately or lazily relocate\n  the symbols as they are invoked. This is useful for\n  developers so that they can ensure that all the symbols\n  are available before they release, and allows users to\n  call routines from \"incomplete\" DLLs.\n */\n\nSEXP attribute_hidden do_dynload(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    char buf[2 * PATH_MAX];\n    DllInfo *info;\n\n    checkArity(op,args);\n    if (!isString(CAR(args)) || LENGTH(CAR(args)) != 1)\n\terror(_(\"character argument expected\"));\n    GetFullDLLPath(call, buf, translateChar(STRING_ELT(CAR(args), 0)));\n    /* AddDLL does this DeleteDLL(buf); */\n    info = AddDLL(buf, LOGICAL(CADR(args))[0], LOGICAL(CADDR(args))[0],\n\t\t  translateChar(STRING_ELT(CADDDR(args), 0)));\n    if(!info)\n\terror(_(\"unable to load shared object '%s':\\n  %s\"), buf, DLLerror);\n    return(Rf_MakeDLLInfo(info));\n}\n\nSEXP attribute_hidden do_dynunload(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    char buf[2 * PATH_MAX];\n\n    checkArity(op,args);\n    if (!isString(CAR(args)) || LENGTH(CAR(args)) != 1)\n\terror(_(\"character argument expected\"));\n    GetFullDLLPath(call, buf, translateChar(STRING_ELT(CAR(args), 0)));\n    if(!DeleteDLL(buf))\n\terror(_(\"shared object '%s\\' was not loaded\"), buf);\n    return R_NilValue;\n}\n\nint R_moduleCdynload(const char *module, int local, int now)\n{\n    char dllpath[PATH_MAX], *p = getenv(\"R_HOME\");\n    DllInfo *res;\n\n    if(!p) return 0;\n#ifdef R_ARCH\n    snprintf(dllpath, PATH_MAX, \"%s%smodules%s%s%s%s%s\", p, FILESEP, FILESEP,\n\t     R_ARCH, FILESEP, module, SHLIB_EXT);\n#else\n    snprintf(dllpath, PATH_MAX, \"%s%smodules%s%s%s\", p, FILESEP, FILESEP,\n\t     module, SHLIB_EXT);\n#endif\n    res = AddDLL(dllpath, local, now, \"\");\n    if(!res)\n\twarning(_(\"unable to load shared object '%s':\\n  %s\"),\n\t\tdllpath, DLLerror);\n    return res != NULL ? 1 : 0;\n}\n\nint R_cairoCdynload(int local, int now)\n{\n    char dllpath[PATH_MAX], *p = getenv(\"R_HOME\"), *module = \"cairo\";\n    DllInfo *res;\n\n    if(!p) return 0;\n#ifdef R_ARCH\n    snprintf(dllpath, PATH_MAX, \"%s/library/grDevices/libs/%s/%s%s\", \n\t     p, R_ARCH, module, SHLIB_EXT);\n#else\n    snprintf(dllpath, PATH_MAX, \"%s/library/grDevices/libs/%s%s\", \n\t     p, module, SHLIB_EXT);\n#endif\n    res = AddDLL(dllpath, local, now, \"\");\n    if(!res)\n\twarning(_(\"unable to load shared object '%s':\\n  %s\"),\n\t\tdllpath, DLLerror);\n    return res != NULL ? 1 : 0;\n}\n\n/**\n  Creates an R object representing the value of the\n  function pointer given by `f'. This object has class\n  NativeSymbol and can be used to relay symbols from\n  one DLL to another.\n */\nstatic SEXP\nRf_MakeNativeSymbolRef(DL_FUNC f)\n{\n    SEXP ref, klass;\n\n    PROTECT(ref = R_MakeExternalPtrFn(f, install(\"native symbol\"),\n\t\t\t\t      R_NilValue));\n    PROTECT(klass = mkString(\"NativeSymbol\"));\n    setAttrib(ref, R_ClassSymbol, klass);\n    UNPROTECT(2);\n    return(ref);\n}\n\nstatic void\nfreeRegisteredNativeSymbolCopy(SEXP ref)\n{\n   void *ptr;\n   ptr = R_ExternalPtrAddr(ref);\n   if (ptr)\n       free(ptr);\n}\n\nstatic SEXP\nRf_MakeRegisteredNativeSymbol(R_RegisteredNativeSymbol *symbol)\n{\n    SEXP ref, klass;\n    R_RegisteredNativeSymbol *copy;\n    copy = (R_RegisteredNativeSymbol *) malloc(1 * sizeof(R_RegisteredNativeSymbol));\n    if(!copy) {\n        error(ngettext(\"cannot allocate memory for registered native symbol (%d byte)\",\n\t\t       \"cannot allocate memory for registered native symbol (%d bytes)\",\n                      (int) sizeof(R_RegisteredNativeSymbol)),\n                      (int) sizeof(R_RegisteredNativeSymbol));\n    }\n    *copy = *symbol;\n\n    PROTECT(ref = R_MakeExternalPtr(copy,\n\t\t\t\t    install(\"registered native symbol\"),\n\t\t\t\t    R_NilValue));\n    R_RegisterCFinalizer(ref, freeRegisteredNativeSymbolCopy);\n\n    PROTECT(klass = mkString(\"RegisteredNativeSymbol\"));\n    setAttrib(ref, R_ClassSymbol, klass);\n\n    UNPROTECT(2);\n    return(ref);\n}\n\n\nstatic SEXP\nRf_makeDllObject(HINSTANCE inst)\n{\n    SEXP ans;\n\n    PROTECT(ans = R_MakeExternalPtr(inst, install(\"DLLHandle\"),\n\t\t\t\t    R_NilValue));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLHandle\"));\n    UNPROTECT(1);\n\n    return(ans);\n}\n\nstatic SEXP\nRf_makeDllInfoReference(HINSTANCE inst)\n{\n    SEXP ans;\n\n    PROTECT(ans = R_MakeExternalPtr(inst, install(\"DLLInfo\"),\n\t\t\t\t    install(\"DLLInfo\")));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoReference\"));\n    UNPROTECT(1);\n\n    return(ans);\n}\n\n\n/**\n Creates an R object representing the public DLL information stored in\n info. Currently this is only the short and the long, fully qualified\n name of the DLL and whether we only look for symbols that have been\n registered in this DLL or do we also use dynamic lookup.\n */\nstatic SEXP\nRf_MakeDLLInfo(DllInfo *info)\n{\n    SEXP ref, elNames, tmp;\n    int i, n;\n    const char *const names[] = {\"name\", \"path\", \"dynamicLookup\",\n\t\t\t\t \"handle\", \"info\"};\n\n    n = sizeof(names)/sizeof(names[0]);\n\n    PROTECT(ref = allocVector(VECSXP, n));\n    SET_VECTOR_ELT(ref, 0, tmp = allocVector(STRSXP, 1));\n    if(info->name)\n\tSET_STRING_ELT(tmp, 0, mkChar(info->name));\n    SET_VECTOR_ELT(ref, 1, tmp = allocVector(STRSXP, 1));\n    if(info->path)\n\tSET_STRING_ELT(tmp, 0, mkChar(info->path));\n    SET_VECTOR_ELT(ref, 2, ScalarLogical(info->useDynamicLookup));\n\n    SET_VECTOR_ELT(ref, 3, Rf_makeDllObject(info->handle));\n\n    SET_VECTOR_ELT(ref, 4, Rf_makeDllInfoReference((HINSTANCE) info));\n\n    PROTECT(elNames = allocVector(STRSXP, n));\n    for(i = 0; i < n; i++)\n\tSET_STRING_ELT(elNames, i, mkChar(names[i]));\n    setAttrib(ref, R_NamesSymbol, elNames);\n\n    setAttrib(ref, R_ClassSymbol, mkString(\"DLLInfo\"));\n\n    UNPROTECT(2);\n\n    return(ref);\n}\n\n/*\n  This is the routine associated with the getNativeSymbolInfo()\n  function and it takes the name of a symbol and optionally an\n  object identifier (package usually) in which to restrict the search\n  for this symbol. It resolves the symbol and returns it to the caller\n  giving the symbol address, the package information (i.e. name and\n  fully qualified shared object name). If the symbol was explicitly\n  registered (rather than dynamically resolved by R), then we pass\n  back that information also, giving the number of arguments it\n  expects and the interface by which it should be called.\n  The returned object has class NativeSymbol. If the symbol was\n  registered, we add a class identifying the interface type\n  for which it is intended (i.e. .C(), .Call(), etc.)\n */\nSEXP attribute_hidden\nR_getSymbolInfo(SEXP sname, SEXP spackage, SEXP withRegistrationInfo)\n{\n    const void *vmax = vmaxget();\n    const char *package, *name;\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n    SEXP sym = R_NilValue;\n    DL_FUNC f = NULL;\n\n    package = \"\";\n\n    name = translateChar(STRING_ELT(sname, 0));\n\n    if(length(spackage)) {\n\tif(TYPEOF(spackage) == STRSXP)\n\t    package = translateChar(STRING_ELT(spackage, 0));\n\telse if(TYPEOF(spackage) == EXTPTRSXP &&\n\t\tR_ExternalPtrTag(spackage) == install(\"DLLInfo\")) {\n\t    f = R_dlsym((DllInfo *) R_ExternalPtrAddr(spackage), name, &symbol);\n\t    package = NULL;\n\t} else\n\t    error(_(\"must pass package name or DllInfo reference\"));\n    }\n\n    if(package)\n\tf = R_FindSymbol(name, package, &symbol);\n\n    if(f)\n\tsym = createRSymbolObject(sname, f, &symbol,\n\t\t\t\t  LOGICAL(withRegistrationInfo)[0]);\n\n    vmaxset(vmax);\n    return sym;\n}\n\nSEXP attribute_hidden\nR_getDllTable()\n{\n    int i;\n    SEXP ans;\n\n again:\n    PROTECT(ans = allocVector(VECSXP, CountDLL));\n    for(i = 0; i < CountDLL; i++) {\n\tSET_VECTOR_ELT(ans, i, Rf_MakeDLLInfo(&(LoadedDLL[i])));\n    }\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoList\"));\n    UNPROTECT(1);\n\n    /* There is a problem here: The allocations can cause gc, and gc\n       may result in no longer referenced DLLs being unloaded.  So\n       CountDLL can be reduced during this loop.  A simple work-around\n       is to just try again until CountDLL at the end is the same as\n       it was at the beginning.  LT */\n    if (CountDLL != LENGTH(ans))\n\tgoto again;\n\n    return(ans);\n}\n\nstatic SEXP\ncreateRSymbolObject(SEXP sname, DL_FUNC f, R_RegisteredNativeSymbol *symbol,\n\t\t    Rboolean withRegistrationInfo)\n{\n    SEXP tmp, klass, sym, names;\n    int n = (symbol->type != R_ANY_SYM) ? 4 : 3;\n    int numProtects = 0;\n\n    PROTECT(sym = allocVector(VECSXP, n));    numProtects++;\n    PROTECT(names = allocVector(STRSXP, n));    numProtects++;\n\n    if(!sname || sname == R_NilValue) {\n\tPROTECT(sname = mkString(symbol->symbol.call->name));\n\tnumProtects++;\n    }\n\n    SET_VECTOR_ELT(sym, 0, sname);\n    SET_STRING_ELT(names, 0, mkChar(\"name\"));\n\n    SET_VECTOR_ELT(sym, 1,\n\t\t   withRegistrationInfo && symbol && symbol->symbol.c && symbol->dll\n\t\t   ? Rf_MakeRegisteredNativeSymbol(symbol)\n\t\t   : Rf_MakeNativeSymbolRef(f));\n    SET_STRING_ELT(names, 1, mkChar(\"address\"));\n    if(symbol->dll)\n\tSET_VECTOR_ELT(sym, 2, Rf_MakeDLLInfo(symbol->dll));\n    SET_STRING_ELT(names, 2, mkChar(\"dll\"));\n\n\n    PROTECT(klass = allocVector(STRSXP, (symbol->type != R_ANY_SYM ? 2 : 1)));\n    numProtects++;\n    SET_STRING_ELT(klass, length(klass)-1, mkChar(\"NativeSymbolInfo\"));\n\n    if(n > 3) {\n\t/* Add the registration information:\n\t   the number of arguments and the classname.\n\t*/\n\tint nargs = -1;\n\tchar *className = \"\";\n\tswitch(symbol->type) {\n\tcase R_C_SYM:\n\t    nargs = symbol->symbol.c->numArgs;\n\t    className = \"CRoutine\";\n\t    break;\n\tcase R_CALL_SYM:\n\t    nargs = symbol->symbol.call->numArgs;\n\t    className = \"CallRoutine\";\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    nargs = symbol->symbol.fortran->numArgs;\n\t    className = \"FortranRoutine\";\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    nargs = symbol->symbol.external->numArgs;\n\t    className = \"ExternalRoutine\";\n\t    break;\n\tdefault:\n\t    /* Something unintended has happened if we get here. */\n\t    error(_(\"unimplemented type %d in 'createRSymbolObject'\"),\n\t\t  symbol->type);\n\t    break;\n\t}\n\tSET_VECTOR_ELT(sym, 3, tmp = ScalarInteger(nargs));\n\tSET_STRING_ELT(klass, 0, mkChar(className));\n\tSET_STRING_ELT(names, 3, mkChar(\"numParameters\"));\n    }\n\n    setAttrib(sym, R_ClassSymbol, klass);\n    setAttrib(sym, R_NamesSymbol, names);\n\n    UNPROTECT(numProtects);\n    return(sym);\n}\n\nstatic SEXP\nR_getRoutineSymbols(NativeSymbolType type, DllInfo *info)\n{\n    SEXP ans;\n    int i, num;\n    R_RegisteredNativeSymbol  sym;\n    DL_FUNC address = NULL;\n\n    sym.dll = info;\n    sym.type =type;\n\n    switch(type) {\n    case R_CALL_SYM: num = info->numCallSymbols;\n\tbreak;\n    case R_C_SYM: num = info->numCSymbols;\n\tbreak;\n    case R_FORTRAN_SYM: num = info->numFortranSymbols;\n\tbreak;\n    case R_EXTERNAL_SYM: num = info->numExternalSymbols;\n\tbreak;\n    default:\n\tnum = 0;\n    }\n\n    PROTECT(ans = allocVector(VECSXP, num));\n\n    for(i = 0; i < num ; i++) {\n\tswitch(type) {\n\tcase R_CALL_SYM:\n\t    sym.symbol.call = &info->CallSymbols[i];\n\t    address = sym.symbol.call->fun;\n\t    break;\n\tcase R_C_SYM:\n\t    sym.symbol.c = &info->CSymbols[i];\n\t    address = sym.symbol.c->fun;\n\t    break;\n\tcase R_FORTRAN_SYM:\n\t    sym.symbol.fortran = &info->FortranSymbols[i];\n\t    address = sym.symbol.fortran->fun;\n\t    break;\n\tcase R_EXTERNAL_SYM:\n\t    sym.symbol.external = &info->ExternalSymbols[i];\n\t    address = sym.symbol.external->fun;\n\t    break;\n\tdefault:\n\t    continue;\n\t}\n\tSET_VECTOR_ELT(ans, i, createRSymbolObject(NULL,  address, &sym, TRUE));/* XXX */\n    }\n\n    setAttrib(ans, R_ClassSymbol, mkString(\"NativeRoutineList\"));\n    UNPROTECT(1);\n    return(ans);\n}\n\n\nSEXP attribute_hidden\nR_getRegisteredRoutines(SEXP dll)\n{\n    DllInfo *info;\n    SEXP ans, snames;\n    int i;\n    const char * const names[] = {\".C\", \".Call\", \".Fortran\", \".External\"};\n\n    if(TYPEOF(dll) != EXTPTRSXP &&\n       R_ExternalPtrTag(dll) != install(\"DLLInfo\"))\n\terror(_(\"R_getRegisteredRoutines() expects a DllInfo reference\"));\n\n    info = (DllInfo *) R_ExternalPtrAddr(dll);\n    if(!info) error(_(\"NULL value passed for DllInfo\"));\n\n\n    PROTECT(ans = allocVector(VECSXP, 4));\n\n    SET_VECTOR_ELT(ans, 0, R_getRoutineSymbols(R_C_SYM, info));\n    SET_VECTOR_ELT(ans, 1, R_getRoutineSymbols(R_CALL_SYM, info));\n    SET_VECTOR_ELT(ans, 2, R_getRoutineSymbols(R_FORTRAN_SYM, info));\n    SET_VECTOR_ELT(ans, 3, R_getRoutineSymbols(R_EXTERNAL_SYM, info));\n\n    PROTECT(snames = allocVector(STRSXP, 4));\n    for(i = 0; i < 4; i++)\n\tSET_STRING_ELT(snames, i, mkChar(names[i]));\n    setAttrib(ans, R_NamesSymbol, snames);\n    UNPROTECT(2);\n    return(ans);\n}\n\nSEXP attribute_hidden\ndo_getSymbolInfo(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char *package = \"\", *name;\n    R_RegisteredNativeSymbol symbol = {R_ANY_SYM, {NULL}, NULL};\n    SEXP sym = R_NilValue;\n    DL_FUNC f = NULL;\n\n    checkArity(op, args);\n    SEXP sname = CAR(args), spackage = CADR(args), \n\twithRegistrationInfo = CADDR(args);\n\n    name = translateChar(STRING_ELT(sname, 0));\n    if(length(spackage)) {\n\tif(TYPEOF(spackage) == STRSXP)\n\t    package = translateChar(STRING_ELT(spackage, 0));\n\telse if(TYPEOF(spackage) == EXTPTRSXP &&\n\t\tR_ExternalPtrTag(spackage) == install(\"DLLInfo\")) {\n\t    f = R_dlsym((DllInfo *) R_ExternalPtrAddr(spackage), name, &symbol);\n\t    package = NULL;\n\t} else\n\t    error(_(\"must pass package name or DllInfo reference\"));\n    }\n    if(package)\n\tf = R_FindSymbol(name, package, &symbol);\n    if(f)\n\tsym = createRSymbolObject(sname, f, &symbol,\n\t\t\t\t  LOGICAL(withRegistrationInfo)[0]);\n    return sym;\n}\n\n/* .Internal(getLoadedDLLs()) */\nSEXP attribute_hidden\ndo_getDllTable(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    SEXP ans, nm;\n\n    checkArity(op, args);\n\n again:\n    PROTECT(ans = allocVector(VECSXP, CountDLL));\n    for(int i = 0; i < CountDLL; i++)\n\tSET_VECTOR_ELT(ans, i, Rf_MakeDLLInfo(&(LoadedDLL[i])));\n    setAttrib(ans, R_ClassSymbol, mkString(\"DLLInfoList\"));\n    UNPROTECT(1);\n\n    /* There is a problem here: The allocations can cause gc, and gc\n       may result in no longer referenced DLLs being unloaded.  So\n       CountDLL can be reduced during this loop.  A simple work-around\n       is to just try again until CountDLL at the end is the same as\n       it was at the beginning.  LT */\n    if (CountDLL != LENGTH(ans)) goto again;\n\n    PROTECT(ans);\n    PROTECT(nm = allocVector(STRSXP, CountDLL));\n    setAttrib(ans, R_NamesSymbol, nm);\n    for(int i = 0; i < CountDLL; i++)\n\tSET_STRING_ELT(nm, i, \n\t\t       STRING_ELT(VECTOR_ELT(VECTOR_ELT(ans, i), 0), 0));\n    UNPROTECT(2);\n    return ans;\n}\n\nSEXP attribute_hidden\ndo_getRegisteredRoutines(SEXP call, SEXP op, SEXP args, SEXP env)\n{\n    const char * const names[] = {\".C\", \".Call\", \".Fortran\", \".External\"};\n\n    checkArity(op, args);\n    SEXP dll = CAR(args), ans, snames;\n\n    if(TYPEOF(dll) != EXTPTRSXP &&\n       R_ExternalPtrTag(dll) != install(\"DLLInfo\"))\n\terror(_(\"R_getRegisteredRoutines() expects a DllInfo reference\"));\n\n    DllInfo *info = (DllInfo *) R_ExternalPtrAddr(dll);\n    if(!info) error(_(\"NULL value passed for DllInfo\"));\n\n\n    PROTECT(ans = allocVector(VECSXP, 4));\n\n    SET_VECTOR_ELT(ans, 0, R_getRoutineSymbols(R_C_SYM, info));\n    SET_VECTOR_ELT(ans, 1, R_getRoutineSymbols(R_CALL_SYM, info));\n    SET_VECTOR_ELT(ans, 2, R_getRoutineSymbols(R_FORTRAN_SYM, info));\n    SET_VECTOR_ELT(ans, 3, R_getRoutineSymbols(R_EXTERNAL_SYM, info));\n\n    PROTECT(snames = allocVector(STRSXP, 4));\n    for(int i = 0; i < 4; i++)\n\tSET_STRING_ELT(snames, i, mkChar(names[i]));\n    setAttrib(ans, R_NamesSymbol, snames);\n    UNPROTECT(2);\n    return(ans);\n}\n\n\n\n/* Experimental interface for exporting and importing functions and\n   data from one package for use from C code in a package.  The\n   registration part probably ought to be integrated with the other\n   registrations.  The naming of these routines may be less than\n   ideal. */\n\nstatic SEXP CEntryTable = NULL;\n\nstatic SEXP get_package_CEntry_table(const char *package)\n{\n    SEXP penv, pname;\n\n    if (CEntryTable == NULL) {\n\tCEntryTable = R_NewHashedEnv(R_NilValue, ScalarInteger(0));\n\tR_PreserveObject(CEntryTable);\n    }\n    pname = install(package);\n    penv = findVarInFrame(CEntryTable, pname);\n    if (penv == R_UnboundValue) {\n\tpenv = R_NewHashedEnv(R_NilValue, ScalarInteger(0));\n\tdefineVar(pname, penv, CEntryTable);\n    }\n    return penv;\n}\n\n\nvoid R_RegisterCCallable(const char *package, const char *name, DL_FUNC fptr)\n{\n    SEXP penv = get_package_CEntry_table(package);\n    PROTECT(penv);\n    SEXP eptr = R_MakeExternalPtrFn(fptr, R_NilValue, R_NilValue);\n    PROTECT(eptr);\n    defineVar(install(name), eptr, penv);\n    UNPROTECT(2);\n}\n\nDL_FUNC R_GetCCallable(const char *package, const char *name)\n{\n    SEXP penv = get_package_CEntry_table(package);\n    PROTECT(penv);\n    SEXP eptr = findVarInFrame(penv, install(name));\n    UNPROTECT(1);\n    if (eptr == R_UnboundValue)\n\terror(_(\"function '%s' not provided by package '%s'\"), name, package);\n    else if (TYPEOF(eptr) != EXTPTRSXP)\n\terror(_(\"table entry must be an external pointer\"));\n    return R_ExternalPtrAddrFn(eptr);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/include/Rdynpriv.h": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 2001-12  The R Core Team.\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU Lesser General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  http://www.r-project.org/Licenses/\n */\n\n#ifndef R_DYNPRIV_H\n#define R_DYNPRIV_H\n\n/*****************************************************\n These are internal routines and definitions subject\n to unannounced changes. Do not use for packages, etc.\n \n There is a great deal of repetition in the definitions \n of the user-level method definitions and in the internal\n definition structures. This is done to ensure that we\n don't get into troubles needing different types, etc.\n We could do it with typedef's and reduce the code, but it \n is done now and isn't too complicated yet.\n*****************************************************/\n\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n\n#ifdef Win32\n#include <windows.h>\n#define CACHE_DLL_SYM 1\n#else\ntypedef void *HINSTANCE;\n#endif\n\n\n#include <Defn.h>\n#include <R_ext/Rdynload.h>\nint R_moduleCdynload(const char *module, int local, int now);\n\n  /*\n     A name-routine pair.\n   */\ntypedef struct {\n    char *name;\n    DL_FUNC func;\n} CFunTabEntry;\n\n  /*\n     These three structures are the processed, internal information about\n     native routines that can be called by R. They are intended to be \n     instantiated by packages that explicitly register the routines in the\n     library.\n\n     More fields will be added to these \"real soon now\". These may contain\n     information such as \n        a) whether the routine is thread-safe or not,\n        b) with which other routines it must be sychronized,\n        c) the parameter types,\n        ...\n   */\n\ntypedef struct {\n    char       *name;\n    DL_FUNC     fun;\n    int         numArgs;\n\n    R_NativePrimitiveArgType *types;\n    R_NativeArgStyle *styles;\n   \n} Rf_DotCSymbol;\n\ntypedef Rf_DotCSymbol Rf_DotFortranSymbol;\n\n\ntypedef struct {\n    char       *name;\n    DL_FUNC     fun;\n    int         numArgs;\n    R_NativeObjectArgType *types;\n\n    R_NativeArgStyle *styles;\n} Rf_DotCallSymbol;\n\ntypedef Rf_DotCallSymbol Rf_DotExternalSymbol;\n\n\n\n  /*\n      This structure holds the information about a library that is \n      loaded into R and whose symbols are directly accessible to\n      .C, .Call, .Fortran, .External, ...\n      This stores the short name of the library (with the path and extension \n      removed), and its fully  qualified name including the path and extension.\n      Additionally, it can potentially be populated with information about\n      the native routines in that library that are callable by R.\n   */\nstruct _DllInfo {\n    char  *path;\n    char  *name;\n    HINSTANCE handle;\n    Rboolean useDynamicLookup; /* Flag indicating whether we use both\n\t\t\t\t  registered and dynamic lookup (TRUE)\n\t\t\t\t  or just registered values if there\n\t\t\t\t  are any. */\n    int numCSymbols;\n    Rf_DotCSymbol *CSymbols;\n\n    int numCallSymbols;\n    Rf_DotCallSymbol *CallSymbols;\n\n    int numFortranSymbols;\n    Rf_DotFortranSymbol *FortranSymbols;\n\n    int numExternalSymbols;\n    Rf_DotExternalSymbol *ExternalSymbols;\n\n    Rboolean forceSymbols;\n};\n\n\nstruct Rf_RegisteredNativeSymbol {\n    NativeSymbolType type;\n    union {\n\tRf_DotCSymbol        *c;\n\tRf_DotCallSymbol     *call;\n\tRf_DotFortranSymbol  *fortran;\n\tRf_DotExternalSymbol *external;\n    } symbol;\n    DllInfo *dll;\n};\n\n\n  /* \n     An abstraction of the system-specific hooks that can be implemented\n     to customize the dynamic loading for a particular operating system\n     or application.\n     The function pointers implement \n        the opening and closing of the libraries,\n        the resolution of symbol, \n        returning error messages from system-level failures, \n        finding symbols in R itself,\n        handling the cached symbols,\n        processing the library path. \n   */\ntypedef struct {\n    HINSTANCE (*loadLibrary)(const char *path, int asLocal, int now,\n\t\t\t     char const *search); \n    /* Load the dynamic library. */\n    DL_FUNC (*dlsym)(DllInfo *info, char const *name); \n    /* Low-level symbol lookup in library */\n    void (*closeLibrary)(HINSTANCE handle); \n    /* Unload the dynamic library from process. */\n    void (*getError)(char *buf, int len); \n    /* Put the current system error in DLLerror. */\n\n\n    void (*deleteCachedSymbols)(DllInfo *dll);  /* Discard cached symbols */\n    DL_FUNC (*lookupCachedSymbol)(const char *name, const char *pkg, int all);\n\n    void  (*fixPath)(char *path);\n    void  (*getFullDLLPath)(SEXP call, char *buf, const char * const path);\n\n} OSDynSymbol;\n\nextern OSDynSymbol Rf_osDynSymbol, *R_osDynSymbol;\n\n\n#ifdef CACHE_DLL_SYM\n  /* \n     The collection of cached symbol holders which are used to make the lookup\n     more efficient. The most recently resolved symbols are stored in this \n     pool if CACHE_DLL_SYM is defined and repeated lookups check here first,\n     before using the dynamic loader's lookup mechanism.\n   */\ntypedef struct {\n    char pkg[21];\n    char name[41];\n    DL_FUNC func;\n} R_CPFun;\n\nextern R_CPFun CPFun[];\nextern int nCPFun;\n\n#endif /* CACHE_DLL_SYM */\n\n\nDL_FUNC Rf_lookupCachedSymbol(const char *name, const char *pkg, int all);\n\nDL_FUNC R_dlsym(DllInfo *info, char const *name, \n\t\tR_RegisteredNativeSymbol *symbol);\n\nSEXP R_MakeExternalPtrFn(DL_FUNC p, SEXP tag, SEXP prot);\nDL_FUNC R_ExternalPtrAddrFn(SEXP s);\nDL_FUNC R_dotCallFn(SEXP, SEXP, int);\nSEXP R_doDotCall(DL_FUNC, int, SEXP *, SEXP);\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif /* ifdef R_DYNPRIV_H */\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/src/devQuartz.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 2007-11  The R Foundation\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  http://www.r-project.org/Licenses/\n *\n *  Modular Quartz device for Mac OS X\n *\n *  Partially based on code by Byron Ellis\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#if HAVE_AQUA\n\n#include <Defn.h>\n#include <Rinternals.h>\n#define R_USE_PROTOTYPES 1\n#include <R_ext/GraphicsEngine.h>\n/* This sets ptr_QuartzBackend as a symbol in this file */\n#define IN_AQUA_C 1\n#include <R_ext/QuartzDevice.h>\n\n#include \"grDevices.h\"\n\n#include <CoreFoundation/CoreFoundation.h>\n\n#define DEVQUARTZ_VERSION 1 /* first public Quartz API version */\n\n#define QBE_NATIVE   1  /* either Cocoa or Carbon depending on the OS X version */\n#define QBE_COCOA    2  /* internal Cocoa */\n#define QBE_CARBON   3  /* internal Carbon */\n#define QBE_BITMAP   4  /* bitmap file creating */\n#define QBE_PDF      5  /* PDF file creating */\n\ntypedef struct moduleTypes_s {\n    const char *type;\n    const char *subst;\n    int qbe; /* Quartz back-end */\n} quartz_module_t;\n\n/* list of internally supported output modules */\nconst quartz_module_t quartz_modules[] = {\n    { \"\",        0,                           QBE_NATIVE  },\n    { \"native\",  0,                           QBE_NATIVE  },\n    { \"cocoa\",   0,                           QBE_COCOA   },\n    { \"carbon\",  0,                           QBE_CARBON  },\n    { \"pdf\",     0,                           QBE_PDF     },\n    { \"png\",     \"public.png\",                QBE_BITMAP  },\n    { \"jpeg\",    \"public.jpeg\",               QBE_BITMAP  },\n    { \"jpg\",     \"public.jpeg\",               QBE_BITMAP  },\n    { \"jpeg2000\",\"public.jpeg-2000\",          QBE_BITMAP  },\n    { \"tiff\",    \"public.tiff\",               QBE_BITMAP  },\n    { \"tif\",     \"public.tiff\",               QBE_BITMAP  },\n    { \"gif\",     \"com.compuserve.gif\",        QBE_BITMAP  },\n    { \"psd\",     \"com.adobe.photoshop-image\", QBE_BITMAP  },\n    { \"bmp\",     \"com.microsoft.bmp\",         QBE_BITMAP  },\n    { \"sgi\",     \"com.sgi.sgi-image\",         QBE_BITMAP  },\n    { \"pict\",    \"com.apple.pict\",            QBE_BITMAP  },\n    { 0, 0, 0} };\n\n\n\n/* for compatibility with OS X <10.5 */\n#ifndef CGFLOAT_DEFINED\ntypedef float CGFloat;\n#define CGFLOAT_MIN FLT_MIN\n#define CGFLOAT_MAX FLT_MAX\n#define CGFLOAT_IS_DOUBLE 0\n#define CGFLOAT_DEFINED 1\n#endif\n\ntypedef struct QuartzSpecific_s {\n    double        ps;\n    double        scalex, scaley;  /* resolution correction: px/pt ratio */\n    double        width,height;    /* size (in inches) */\n    double        tscale;          /* text scale (resolution independent,\n                                      i.e. it constitutes a text zoom factor */\n    int           dirty;           /* dirtly flag. Not acted upon by the Quartz\n                                      core, but QC sets it whenever a drawing\n                                      operation is performed (see detailed\n\t\t\t\t      description in R_ext/QuartzDevice.h) */\n    int           gstate;          /* gstate counter */\n    int           async;           /* asynchronous drawing (i.e. context was\n                                      not ready for an operation) */\n    int           bg;              /* background color */\n    int           canvas;          /* background color */\n    int           antialias,smooth;/* smoothing flags (only aa makes any sense) */\n    int           flags;           /* additional QDFLAGs */\n    int           holdlevel;       /* hold level */\n    int           redraw;          /* redraw flag is set when replaying\n\t\t                              and inhibits syncs on Mode */\n    CGRect        clipRect;        /* clipping rectangle */\n    pDevDesc      dev;             /* device structure holding this one */\n    CGFontRef     font;            /* currently used font */\n\n    void*         userInfo;        /* pointer to a module-dependent space */\n\n    /* callbacks - except for getCGContext all others are optional */\n    CGContextRef (*getCGContext)(QuartzDesc_t dev, void *userInfo);\n    int          (*locatePoint)(QuartzDesc_t dev, void *userInfo, double *x, double *y);\n    void         (*close)(QuartzDesc_t dev, void *userInfo);\n    void         (*newPage)(QuartzDesc_t dev, void *userInfo, int flags);\n    void         (*state)(QuartzDesc_t dev,  void *userInfo,  int state);\n    void*        (*par)(QuartzDesc_t dev, void *userInfo, int set, const char *key, void *value);\n    void         (*sync)(QuartzDesc_t dev, void *userInfo);\n    void*        (*cap)(QuartzDesc_t dev, void*userInfo);\n} QuartzDesc;\n\n/* coordinates:\n   - R graphics (positions etc., usually points)\n   - real size (e.g. inches)\n   - display view (usually pixels)\n\n   bookkeeping:\n   - QuartzDevice.width/height:  inches\n   - R GE size (.._Size): points\n   - physical (on-screen) coordinates : pixels\n\nthe current implementation uses points as plotting units (i.e. this is what\nQuartz tells R), but the canvas is specified in pixels. The scalex/y factors\nspecify the conversion factor between pixels and points.\nWe are *not* using R's scaling facilities, because R doesn't work with\nnon-square pixels (e.g. circles become ellipses).\n\nFIXME: yes it does -- ipr is a two-element array.\n -- not entirely, because it uses text (e.g. \"o\") as symbols which is rendered\n in 1:1 aspect ratio and thus is squished on displays with non-square pixels\n(That being a bug in Quartz, then!)\n\nActually, dp not points are used.\n*/\n\n#pragma mark QuartzDevice API (for modules)\n\n/* Update should be called when ps or tscale change.\n   Conservatively, it should be called on scale change, too, in case\n   we decide to abandon the CTM approach */\nstatic void QuartzDevice_Update(QuartzDesc_t desc);\n\n/* this function must be called after a new context is created.\n   it primes the context for drawing */\nvoid QuartzDevice_ResetContext(QuartzDesc_t desc) {\n    QuartzDesc *qd = ((QuartzDesc*) desc);\n    qd->gstate = 0;\n    qd->dirty = 0;\n    if (qd->getCGContext) {\n        CGContextRef ctx = qd->getCGContext(qd, qd->userInfo);\n        if (ctx) {\n            CGContextSetAllowsAntialiasing(ctx, qd->antialias);\n            CGContextSetShouldSmoothFonts(ctx, qd->smooth);\n            CGContextScaleCTM(ctx, qd->scalex, qd->scaley);\n            CGContextSaveGState(ctx);\n            qd->gstate = 1;\n        }\n    }\n}\n\n/* Uses (e.g. in window title) seems to assume this is 1-based */\nint QuartzDevice_DevNumber(QuartzDesc_t desc) {\n    return 1 + ndevNumber((((QuartzDesc*) desc)->dev));\n}\n\ndouble QuartzDevice_GetWidth(QuartzDesc_t desc)\t{ return ((QuartzDesc*) desc)->width;  }\ndouble QuartzDevice_GetHeight(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->height;   }\nvoid   QuartzDevice_SetSize(QuartzDesc_t desc, double width, double height)\n{\n    QuartzDesc *qd = ((QuartzDesc*) desc);\n    qd->width = width;\n    qd->height = height;\n    qd->dev->right = width*72.0;\n    qd->dev->bottom = height*72.0;\n}\n\ndouble QuartzDevice_GetScaledWidth(QuartzDesc_t desc)   { QuartzDesc *qd=((QuartzDesc*) desc); return qd->scalex*qd->width*72.0; }\ndouble QuartzDevice_GetScaledHeight(QuartzDesc_t desc)  { QuartzDesc *qd=((QuartzDesc*) desc); return qd->scaley*qd->height*72.0; }\nvoid QuartzDevice_SetScaledSize(QuartzDesc_t desc, double width, double height) {\n    QuartzDesc *qd=((QuartzDesc*) desc);\n    QuartzDevice_SetSize(desc, width/qd->scalex/72.0, height/qd->scaley/72.0);\n}\n\ndouble QuartzDevice_GetXScale(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->scalex;  }\ndouble QuartzDevice_GetYScale(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->scaley;  }\nvoid   QuartzDevice_SetScale(QuartzDesc_t desc, double scalex, double scaley) {\n    ((QuartzDesc*) desc)->scalex = scalex;\n    ((QuartzDesc*) desc)->scaley = scaley;\n    QuartzDevice_Update(desc);\n}\n\ndouble QuartzDevice_GetTextScale(QuartzDesc_t desc) {\n    return ((QuartzDesc*) desc)->tscale;\n}\n\nvoid   QuartzDevice_SetTextScale(QuartzDesc_t desc, double scale) {\n    ((QuartzDesc*) desc)->tscale = scale;\n    QuartzDevice_Update(desc);\n}\n\ndouble QuartzDevice_GetPointSize(QuartzDesc_t desc) {\n    return ((QuartzDesc*) desc)->ps;\n}\n\nvoid   QuartzDevice_SetPointSize(QuartzDesc_t desc, double ps) {\n    ((QuartzDesc*) desc)->ps = ps;\n    QuartzDevice_Update(desc);\n}\n\nint   QuartzDevice_GetDirty(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->dirty; }\nvoid  QuartzDevice_SetDirty(QuartzDesc_t desc,int dirty) { ((QuartzDesc*) desc)->dirty = dirty; }\n\nint   QuartzDevice_GetAntialias(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->antialias; }\nvoid  QuartzDevice_SetAntialias(QuartzDesc_t desc,int aa) {\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    qd->antialias  = aa;\n    if(NULL != qd->getCGContext)\n        CGContextSetAllowsAntialiasing( qd->getCGContext(qd, qd->userInfo), aa );\n}\n\nvoid QuartzDevice_Kill(QuartzDesc_t desc) {\n    pGEDevDesc dd = GEgetDevice(ndevNumber(((QuartzDesc*) desc)->dev));\n    if (dd) GEkillDevice(dd);\n}\n\nint   QuartzDesc_GetFontSmooth(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->smooth; }\nvoid  QuartzDesc_SetFontSmooth(QuartzDesc_t desc, int fs) {\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    qd->smooth = fs;\n    if(qd->getCGContext)\n        CGContextSetShouldSmoothFonts( qd->getCGContext(qd, qd->userInfo), fs);\n}\n\nint   QuartzDevice_GetBackground(QuartzDesc_t desc) { return ((QuartzDesc*) desc)->bg; }\n\nstatic void   QuartzDevice_Update(QuartzDesc_t desc)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    pDevDesc dev= qd->dev;\n\n    /* pre-scaling happens in Quartz (using CTM), so scales should not be\n       reflected in R measurements. We tell R to use 72dpi which corresponds\n       to plotting in pt coordinates */\n    dev->cra[0] = 0.9*qd->ps*qd->tscale;\n    dev->cra[1] = 1.2*qd->ps*qd->tscale;\n    dev->ipr[0] = 1.0/72.0;\n    dev->ipr[1] = 1.0/72.0;\n}\n\nvoid QuartzDevice_Activate(QuartzDesc_t desc)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    if (qd) {\n\tint n = ndevNumber(qd->dev);\n\tselectDevice(n);\n    }\n}\n\nvoid QuartzDevice_ReplayDisplayList(QuartzDesc_t desc)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    int _dirty = qd->dirty;\n    pGEDevDesc gdd = desc2GEDesc(qd->dev);\n    qd->redraw = 1;\n    /* CHECK this */\n    if(gdd->displayList != R_NilValue) GEplayDisplayList(gdd);\n    qd->redraw = 0;\n    qd->dirty = _dirty; /* we do NOT change the dirty flag */\n}\n\nvoid* QuartzDevice_GetSnapshot(QuartzDesc_t desc, int last)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    pGEDevDesc gd  = GEgetDevice(ndevNumber(qd->dev));\n    SEXP snap;\n    if (last)\n\tsnap = desc2GEDesc(qd->dev)->savedSnapshot;\n    else\n\tsnap = GEcreateSnapshot(gd);\n    if (R_NilValue == VECTOR_ELT(snap, 0))\n\tsnap = 0;\n    return (snap == R_NilValue) ? 0 : snap;\n}\n\nvoid QuartzDevice_RestoreSnapshot(QuartzDesc_t desc, void* snap)\n{\n    QuartzDesc *qd = (QuartzDesc*) desc;\n    pGEDevDesc gd  = GEgetDevice(ndevNumber(qd->dev));\n    if(NULL == snap) return; /*Aw, hell no!*/\n    PROTECT((SEXP)snap);\n    if(R_NilValue == VECTOR_ELT(snap,0))\n        warning(\"Tried to restore an empty snapshot?\");\n    qd->redraw = 1;\n    GEplaySnapshot((SEXP)snap, gd);\n    qd->redraw = 0;\n    qd->dirty = 0; /* we reset the dirty flag */\n    UNPROTECT(1);\n}\n\nstatic int quartz_embedding = 0;\n\nstatic void* QuartzDevice_SetParameter(QuartzDesc_t desc, const char *key, void *value)\n{\n    if (desc) { /* backend-specific? pass it on */\n\tQuartzDesc *qd = (QuartzDesc*) desc;\n\treturn (qd->par) ? qd->par(qd, qd->userInfo, 1, key, value) : NULL;\n    } else { /* global? try to handle it */\n\tif (key) {\n\t    if (!streql(key, QuartzParam_EmbeddingFlags)) {\n\t\tif (value) quartz_embedding = ((int*)value)[0];\n\t\treturn &quartz_embedding;\n\t    }\n\t}\n    }\n    return NULL;\n}\n\nvoid setup_RdotApp(void)\n{\n    int eflags = QP_Flags_CFLoop | QP_Flags_Cocoa | QP_Flags_Front;\n    QuartzDevice_SetParameter(NULL, QuartzParam_EmbeddingFlags, &eflags);\n}\n\nstatic void*  QuartzDevice_GetParameter(QuartzDesc_t desc, const char *key)\n{\n    if (desc) { /* backend-specific? pass it on */\n\tQuartzDesc *qd = (QuartzDesc*) desc;\n\treturn (qd->par) ? qd->par(qd, qd->userInfo, 0, key, NULL) : NULL;\n    } else { /* global? try to handle it */\n\tif (key) {\n\t    if (!streql(key, QuartzParam_EmbeddingFlags)) return &quartz_embedding;\n\t}\n    }\n    return NULL;\n}\n\n#pragma mark RGD API Function Prototypes\n\nstatic void     RQuartz_Close(pDevDesc);\nstatic void     RQuartz_Activate(pDevDesc);\nstatic void     RQuartz_Deactivate(pDevDesc);\nstatic void     RQuartz_Size(double*, double*, double*, double*, pDevDesc);\nstatic void     RQuartz_NewPage(const pGEcontext, pDevDesc);\nstatic int      RQuartz_HoldFlush(pDevDesc, int);\nstatic void     RQuartz_Clip(double, double, double, double, pDevDesc);\nstatic double   RQuartz_StrWidth(const char*, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Text(double, double, const char*, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Rect(double, double, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Raster(unsigned int *raster, int w, int h,\n                       double x, double y, double width, double height,\n                       double rot, Rboolean interpolate,\n                       const pGEcontext gc, pDevDesc dd);\nstatic SEXP     RQuartz_Cap(pDevDesc dd);\nstatic void     RQuartz_Circle(double, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Line(double, double, double, double, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Polyline(int, double*, double*, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Polygon(int, double*, double*, const pGEcontext, pDevDesc);\nstatic void     RQuartz_Path(double*, double*, int, int*, Rboolean, const pGEcontext, pDevDesc);\nstatic Rboolean RQuartz_Locator(double*, double*, pDevDesc);\nstatic void     RQuartz_Mode(int mode, pDevDesc);\nstatic void     RQuartz_MetricInfo(int, const pGEcontext , double*, double*, double*, pDevDesc);\n\n#pragma mark Quartz device implementation\n\nvoid* QuartzDevice_Create(void *_dev, QuartzBackend_t *def)\n{\n    pDevDesc dev = _dev;\n\n    dev->startfill = def->bg;\n    dev->startcol  = R_RGB(0, 0, 0);\n    dev->startps   = def->pointsize;\n    dev->startfont = 1;\n    dev->startlty  = LTY_SOLID;\n    dev->startgamma= 1;\n\n    /* Set up some happy pointers */\n    dev->close        = RQuartz_Close;\n    dev->activate     = RQuartz_Activate;\n    dev->deactivate   = RQuartz_Deactivate;\n    dev->size         = RQuartz_Size;\n    dev->newPage      = RQuartz_NewPage;\n    dev->clip         = RQuartz_Clip;\n    dev->strWidth     = RQuartz_StrWidth;\n    dev->text         = RQuartz_Text;\n    dev->rect         = RQuartz_Rect;\n    dev->raster       = RQuartz_Raster;\n    dev->cap          = RQuartz_Cap;\n    dev->circle       = RQuartz_Circle;\n    dev->line         = RQuartz_Line;\n    dev->polyline     = RQuartz_Polyline;\n    dev->polygon      = RQuartz_Polygon;\n    dev->path         = RQuartz_Path;\n    dev->locator      = RQuartz_Locator;\n    dev->mode         = RQuartz_Mode;\n    dev->metricInfo   = RQuartz_MetricInfo;\n    dev->holdflush    = RQuartz_HoldFlush;\n    dev->hasTextUTF8  = TRUE;\n    dev->textUTF8     = RQuartz_Text;\n    dev->strWidthUTF8 = RQuartz_StrWidth;\n\n    dev->left = 0;\n    dev->top  = 0;\n\n\n    /* Magic numbers from on high. */\n    dev->xCharOffset = 0.4900;\n    dev->yCharOffset = 0.3333;\n    dev->yLineBias   = 0.20; /* This is .2 for PS/PDF devices... */\n\n    dev->canClip       = TRUE;\n    dev->canHAdj       = 2;\n    dev->canChangeGamma= FALSE;\n    dev->displayListOn = (def->flags & QDFLAG_DISPLAY_LIST) ? TRUE : FALSE;\n\n    dev->haveTransparency = 2;\n    dev->haveTransparentBg = 3; /* FIXME: depends on underlying device */\n    dev->haveRaster = 2;\n    dev->haveCapture = (def->cap) ? 2 : 1;\n    dev->haveLocator = (def->locatePoint) ? 2 : 1;\n\n    QuartzDesc *qd = calloc(1, sizeof(QuartzDesc));\n    qd->width      = def->width;\n    qd->height     = def->height;\n    qd->userInfo   = def->userInfo;\n    qd->getCGContext=def->getCGContext;\n    qd->locatePoint= def->locatePoint;\n    qd->close      = def->close;\n    qd->newPage    = def->newPage;\n    qd->state      = def->state;\n    qd->sync       = def->sync;\n    qd->cap        = def->cap;\n    qd->scalex     = def->scalex;\n    qd->scaley     = def->scaley;\n    qd->tscale     = 1.0;\n    qd->ps         = def->pointsize;\n    qd->bg         = def->bg;\n    qd->canvas     = def->canvas;\n    qd->antialias  = (def->flags & QPFLAG_ANTIALIAS) ? 1 : 0;\n    qd->flags      = def->flags;\n    qd->gstate     = 0;\n    qd->font       = NULL;\n\n    dev->deviceSpecific = qd;\n    qd->dev             = dev;\n\n    QuartzDevice_Update(qd);\n\n    /* Re-set for bitmap devices later */\n     dev->right = def->width*72.0;\n     dev->bottom= def->height*72.0;\n\n    qd->clipRect = CGRectMake(0, 0, dev->right, dev->bottom);\n\n    qd->dirty = 0;\n    qd->redraw= 0;\n    qd->async = 0;\n    qd->holdlevel = 0;\n    return (QuartzDesc_t)qd;\n}\n\nstatic QuartzFunctions_t qfn = {\n    QuartzDevice_Create,\n    QuartzDevice_DevNumber,\n    QuartzDevice_Kill,\n    QuartzDevice_ResetContext,\n    QuartzDevice_GetWidth,\n    QuartzDevice_GetHeight,\n    QuartzDevice_SetSize,\n    QuartzDevice_GetScaledWidth,\n    QuartzDevice_GetScaledHeight,\n    QuartzDevice_SetScaledSize,\n    QuartzDevice_GetXScale,\n    QuartzDevice_GetYScale,\n    QuartzDevice_SetScale,\n    QuartzDevice_SetTextScale,\n    QuartzDevice_GetTextScale,\n    QuartzDevice_SetPointSize,\n    QuartzDevice_GetPointSize,\n    QuartzDevice_GetDirty,\n    QuartzDevice_SetDirty,\n    QuartzDevice_ReplayDisplayList,\n    QuartzDevice_GetSnapshot,\n    QuartzDevice_RestoreSnapshot,\n    QuartzDevice_GetAntialias,\n    QuartzDevice_SetAntialias,\n    QuartzDevice_GetBackground,\n    QuartzDevice_Activate,\n    QuartzDevice_SetParameter,\n    QuartzDevice_GetParameter\n};\n\n/* currrently unused: was used by R.app via aqua.c */\nQuartzFunctions_t *getQuartzAPI() {\n    return &qfn;\n}\n\n/* old OS X versions has different names for some of the CGFont stuff */\n#if MAC_OS_X_VERSION_MAX_ALLOWED <= MAC_OS_X_VERSION_10_4\n#define CGFontCreateWithFontName CGFontCreateWithName\n#define CGFontGetGlyphBBoxes CGFontGetGlyphBoundingBoxes\n/* The following is a real pain. We have to work around bugs in CoreGraphics\n   and Apple's dyloader simultaneously so a 10.4 binary runs on 10.5 as well. */\ntypedef void (*RQFontGetGlyphsForUnichars_t)(CGFontRef a, const UniChar b[], CGGlyph c[], size_t d);\nstatic RQFontGetGlyphsForUnichars_t RQFontGetGlyphsForUnichars;\n#include <dlfcn.h> /* dynamically find the right entry point on initialization */\n__attribute__((constructor)) static void RQ_init() {\n    void *r;\n    if ((r = dlsym(RTLD_NEXT, \"CGFontGetGlyphsForUnichars\")) || (r = dlsym(RTLD_NEXT, \"CGFontGetGlyphsForUnicodes\")) ||\n\t(r = dlsym(RTLD_DEFAULT, \"CGFontGetGlyphsForUnichars\")) || (r = dlsym(RTLD_DEFAULT, \"CGFontGetGlyphsForUnicodes\")))\n\tRQFontGetGlyphsForUnichars = (RQFontGetGlyphsForUnichars_t) r;\n    else\n\terror(\"Cannot load CoreGraphics\"); /* this should never be reached but I suppose it's better than a hidden segfault */\n}\n#define CGFontGetGlyphsForUnichars RQFontGetGlyphsForUnichars\n/* and some missing declarations */\nextern CGFontRef CGFontCreateWithName(CFStringRef);\nextern bool CGFontGetGlyphAdvances(CGFontRef font, const CGGlyph glyphs[], size_t count, int advances[]);\nextern int CGFontGetUnitsPerEm(CGFontRef font);\nextern bool CGFontGetGlyphBBoxes(CGFontRef font, const CGGlyph glyphs[], size_t count, CGRect bboxes[]);\n#else\nextern void CGFontGetGlyphsForUnichars(CGFontRef, const UniChar[], CGGlyph[], size_t);\n#endif\n\nextern CGFontRef CGContextGetFont(CGContextRef);\n\n#define DEVDESC pDevDesc dd\n#define CTXDESC const pGEcontext gc, pDevDesc dd\n\n#define DEVSPEC QuartzDesc *xd = (QuartzDesc*) dd->deviceSpecific; CGContextRef ctx = xd->getCGContext(xd, xd->userInfo)\n#define DRAWSPEC QuartzDesc *xd = (QuartzDesc*) dd->deviceSpecific; CGContextRef ctx = xd->getCGContext(xd, xd->userInfo); xd->dirty = 1\n#define XD QuartzDesc *xd = (QuartzDesc*) dd->deviceSpecific\n\n#pragma mark Quartz Font Cache\n\n/* Font lookup is expesive yet frequent. Therefore we cache all used ATS fonts (which are global to the app). */\n\ntypedef struct font_cache_entry_s {\n    ATSFontRef font;\n    char *family;\n    int  face;\n} font_cache_entry_t;\n\n#define max_fonts_per_block 32\n\ntypedef struct font_cache_s {\n    font_cache_entry_t e[max_fonts_per_block];\n    int fonts;\n    struct font_cache_s *next;\n} font_cache_t;\n\nfont_cache_t font_cache, *font_cache_tail = &font_cache;\n\nstatic ATSFontRef RQuartz_CacheGetFont(const char *family, int face) {\n    font_cache_t *fc = &font_cache;\n    while (fc) {\n        int i = 0, j = fc->fonts;\n        while (i < j) {\n            if (face == fc->e[i].face && streql(family, fc->e[i].family))\n                return fc->e[i].font;\n            i++;\n        }\n        fc = fc->next;\n    }\n    return 0;\n}\n\nstatic void RQuartz_CacheAddFont(const char *family, int face, ATSFontRef font) {\n    if (font_cache_tail->fonts >= max_fonts_per_block)\n        font_cache_tail = font_cache_tail->next = (font_cache_t*) calloc(1, sizeof(font_cache_t));\n    {\n        int i = font_cache_tail->fonts;\n        font_cache_tail->e[i].font = font;\n        font_cache_tail->e[i].family = strdup(family);\n        font_cache_tail->e[i].face = face;\n        font_cache_tail->fonts++;\n    }\n}\n\n#ifdef UNUSED\nstatic void RQuartz_CacheRelease() {\n    font_cache_t *fc = &font_cache;\n    while (fc) {\n        font_cache_t *next = fc->next;\n        int i = 0, j = fc->fonts;\n        while (i < j) free(fc->e[i++].family);\n        if (fc != &font_cache) free(fc);\n        fc = next;\n    }\n    font_cache.fonts = 0;\n}\n#endif\n\n#pragma mark Device Implementation\n\n/* mapping of virtual family names (e.g \"serif\") and face to real font names using .Quartzenv$.Quartz.Fonts list */\nconst char *RQuartz_LookUpFontName(int fontface, const char *fontfamily)\n{\n    const char *mappedFont = 0;\n    SEXP ns, env, db, names;\n    PROTECT_INDEX index;\n    PROTECT(ns = R_FindNamespace(ScalarString(mkChar(\"grDevices\"))));\n    PROTECT_WITH_INDEX(env = findVar(install(\".Quartzenv\"), ns), &index);\n    if(TYPEOF(env) == PROMSXP)\n        REPROTECT(env = eval(env,ns) ,index);\n    PROTECT(db    = findVar(install(\".Quartz.Fonts\"), env));\n    PROTECT(names = getAttrib(db, R_NamesSymbol));\n    if (*fontfamily) {\n        int i;\n        for(i = 0; i < length(names); i++)\n            if(streql(fontfamily, CHAR(STRING_ELT(names, i)))) {\n                mappedFont = CHAR(STRING_ELT(VECTOR_ELT(db, i), fontface - 1));\n                break;\n            }\n    }\n    UNPROTECT(4);\n    return mappedFont;\n}\n\n/* get a font according to the current graphics context */\nCGFontRef RQuartz_Font(CTXDESC)\n{\n    const char *fontName = NULL, *fontFamily = gc->fontfamily;\n    ATSFontRef atsFont = 0;\n    int fontFace = gc->fontface;\n    if (fontFace < 1 || fontFace > 5) fontFace = 1; /* just being paranoid */\n    if (fontFace == 5)\n        fontName = \"Symbol\";\n    else\n        fontName = RQuartz_LookUpFontName(fontFace, fontFamily[0] ? fontFamily : \"default\");\n    if (fontName) {\n        atsFont = RQuartz_CacheGetFont(fontName, 0); /* face is 0 because we are passing a true font name */\n        if (!atsFont) { /* not in the cache, get it */\n            CFStringRef cfFontName = CFStringCreateWithCString(NULL, fontName, kCFStringEncodingUTF8);\n            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n            if (!atsFont)\n                atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);\n            CFRelease(cfFontName);\n            if (!atsFont) {\n                warning(_(\"font \\\"%s\\\" could not be found for family \\\"%s\\\"\"), fontName, fontFamily);\n                return NULL;\n            }\n            RQuartz_CacheAddFont(fontName, 0, atsFont);\n        }\n    } else { /* the real font name could not be looked up. We must use cache and/or find the right font by family and face */\n        if (!fontFamily[0]) fontFamily = \"Arial\"; \n\t/* Arial is the default, because Helvetica doesn't have Oblique \n\t   on 10.4 - maybe change later? */\n        atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);\n        if (!atsFont) { /* not in the cache? Then we need to find the \n\t\t\t   proper font name from the family name and face */\n            /* as it turns out kATSFontFilterSelectorFontFamily is not \n\t       implemented in OS X (!!) so there is no way to query for a \n\t       font from a specific family. Therefore we have to use \n\t       text-matching heuristics ... very nasty ... */\n            char compositeFontName[256];\n            /* CFStringRef cfFontName; */\n            if (strlen(fontFamily) > 210) error(_(\"font family name is too long\"));\n            while (!atsFont) { /* try different faces until exhausted or successful */\n                strcpy(compositeFontName, fontFamily);\n                if (fontFace == 2 || fontFace == 4) strcat(compositeFontName, \" Bold\");\n                if (fontFace == 3 || fontFace == 4) strcat(compositeFontName, \" Italic\");\n                CFStringRef cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                if (!atsFont) atsFont = ATSFontFindFromPostScriptName(cfFontName, kATSOptionFlagsDefault);\n                CFRelease(cfFontName);\n                if (!atsFont) {\n                    if (fontFace == 1) { /* more guessing - fontFace == 1 may need Regular or Roman */\n                        strcat(compositeFontName,\" Regular\");\n                        cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                        CFRelease(cfFontName);\n                        if (!atsFont) {\n                            strcpy(compositeFontName, fontFamily);\n                            strcat(compositeFontName,\" Roman\");\n                            cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                            atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                            CFRelease(cfFontName);\n                        }\n                    } else if (fontFace == 3 || fontFace == 4) { /* Oblique is sometimes used instead of Italic (e.g. in Helvetica) */\n                        strcpy(compositeFontName, fontFamily);\n                        if (fontFace == 4) strcat(compositeFontName, \" Bold\");\n                        strcat(compositeFontName,\" Oblique\");\n                        cfFontName = CFStringCreateWithCString(NULL, compositeFontName, kCFStringEncodingUTF8);\n                        atsFont = ATSFontFindFromName(cfFontName, kATSOptionFlagsDefault);\n                        CFRelease(cfFontName);                    \n                    }\n                }\n                if (!atsFont) { /* try to fall back to a more plain face */\n                    if (fontFace == 4) fontFace = 2;\n                    else if (fontFace != 1) fontFace = 1;\n                    else break;\n                    atsFont = RQuartz_CacheGetFont(fontFamily, fontFace);\n                    if (atsFont) break;\n                }\n            }\n            if (!atsFont)\n                warning(_(\"no font could be found for family \\\"%s\\\"\"), fontFamily);\n            else\n                RQuartz_CacheAddFont(fontFamily, fontFace, atsFont);\n        }\n    }\n\n    return CGFontCreateWithPlatformFont(&atsFont);\n}\n\n#define RQUARTZ_FILL   (1)\n#define RQUARTZ_STROKE (1<<1)\n#define RQUARTZ_LINE   (1<<2)\n\nstatic void RQuartz_SetFont(CGContextRef ctx, const pGEcontext gc, QuartzDesc *xd) {\n    CGFontRef font = RQuartz_Font(gc, NULL);\n    if (font) {\n        CGContextSetFont(ctx, font);\n        if (font != xd->font) {\n            if (xd->font) CGFontRelease(xd->font);\n            xd->font = font;\n        }\n    }\n    CGContextSetFontSize(ctx, gc->cex * gc->ps);\n}\n\n/* pre-10.5 doesn't have kCGColorSpaceGenericRGB so fall back to kCGColorSpaceGenericRGB */\n#if MAC_OS_X_VERSION_10_4 >= MAC_OS_X_VERSION_MAX_ALLOWED\n#define kCGColorSpaceSRGB kCGColorSpaceGenericRGB\n#endif\n\nvoid RQuartz_Set(CGContextRef ctx,const pGEcontext gc,int flags) {\n    CGColorSpaceRef cs = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);\n    if(flags & RQUARTZ_FILL) {\n        int fill = gc->fill;\n        CGFloat fillColor[] = { R_RED(fill)/255.0, \n                                R_GREEN(fill)/255.0, \n                                R_BLUE(fill)/255.0, \n                                R_ALPHA(fill)/255.0 };\n        CGColorRef fillColorRef = CGColorCreate(cs, fillColor);\n        CGContextSetFillColorWithColor(ctx, fillColorRef);\n        CGColorRelease(fillColorRef);\n    }\n    if(flags & RQUARTZ_STROKE) {\n        int stroke = gc->col;\n        CGFloat strokeColor[] = { R_RED(stroke)/255.0, \n                                  R_GREEN(stroke)/255.0, \n                                  R_BLUE(stroke)/255.0, \n                                  R_ALPHA(stroke)/255.0 };\n        CGColorRef strokeColorRef = CGColorCreate(cs, strokeColor);\n        CGContextSetStrokeColorWithColor(ctx, strokeColorRef);\n        CGColorRelease(strokeColorRef);\n    }\n    if(flags & RQUARTZ_LINE) {\n        CGFloat dashlist[8];\n        int   i, ndash = 0;\n        int   lty = gc->lty;\n\tfloat lwd = (float)(gc->lwd * 0.75);\n        CGContextSetLineWidth(ctx, lwd);\n\n        for(i = 0; i < 8 && lty; i++) {\n            dashlist[ndash++] = (lwd >= 1 ? lwd : 1) * (lty & 15);\n            lty >>= 4;\n        }\n        CGContextSetLineDash(ctx, 0, dashlist, ndash);\n        CGLineCap cap = kCGLineCapButt;\n        switch(gc->lend) {\n            case GE_ROUND_CAP:  cap = kCGLineCapRound;  break;\n            case GE_BUTT_CAP:   cap = kCGLineCapButt;   break;\n            case GE_SQUARE_CAP: cap = kCGLineCapSquare; break;\n        }\n        CGContextSetLineCap(ctx,cap);\n        CGLineJoin join = kCGLineJoinRound;\n        switch(gc->ljoin) {\n            case GE_ROUND_JOIN: join = kCGLineJoinRound; break;\n            case GE_MITRE_JOIN: join = kCGLineJoinMiter; break;\n            case GE_BEVEL_JOIN: join = kCGLineJoinBevel; break;\n        }\n        CGContextSetLineJoin(ctx, join);\n        CGContextSetMiterLimit(ctx, gc->lmitre);\n    }\n    CGColorSpaceRelease(cs);\n}\n\n#define SET(X) RQuartz_Set(ctx, gc, (X))\n#define NOCTX { xd->async = 1; return; }\n#define NOCTXR(V) { xd->async = 1; return(V); }\n\n\nstatic void RQuartz_Close(DEVDESC)\n{\n    XD;\n    if (xd->close) xd->close(xd, xd->userInfo);\n}\n\nstatic void RQuartz_Activate(DEVDESC)\n{\n    XD;\n    if (xd->state) xd->state(xd, xd->userInfo, 1);\n}\n\nstatic void RQuartz_Deactivate(DEVDESC)\n{\n    XD;\n    if (xd->state) xd->state(xd, xd->userInfo, 0);\n}\n\nstatic void RQuartz_Size(double *left, double *right, double *bottom, double *top, DEVDESC)\n{\n    XD;\n    *left = *top = 0;\n    *right  = QuartzDevice_GetWidth(xd) * 72.0;\n    *bottom = QuartzDevice_GetHeight(xd) * 72.0;\n}\n\nstatic void RQuartz_NewPage(CTXDESC)\n{\n    {\n        DRAWSPEC;\n        ctx = NULL;\n        if (xd->newPage) xd->newPage(xd, xd->userInfo, xd->redraw ? QNPF_REDRAW : 0);\n    }\n    { /* we have to re-fetch the status *after* newPage since it may have changed it */\n        DRAWSPEC;\n        if (!ctx) NOCTX;\n        {\n            CGRect bounds = CGRectMake(0, 0,\n\t\t\t\t       QuartzDevice_GetScaledWidth(xd) * 72.0,\n\t\t\t\t       QuartzDevice_GetScaledHeight(xd) * 72.0);\n\t    /* reset the clipping region by restoring the base GC.\n\t       If there is no GC on the stack then the clipping region was never set. */\n\t    if (xd->gstate > 0) {\n\t\tCGContextRestoreGState(ctx);\n\t\tCGContextSaveGState(ctx);\n\t\t/* no need to modify gstate since we don't modify the stack */\n\t    }\n\t    /* The logic is to paint the canvas then gc->fill.\n\t       (The canvas colour is set to 0 on non-screen devices.)\n\t     */\n\t    if (R_ALPHA(xd->canvas) > 0 && !R_OPAQUE(gc->fill)) {\n\t\t/* Paint the canvas colour. */\n\t\tint savefill = gc->fill;\n\t\tCGContextClearRect(ctx, bounds);\n\t\tgc->fill = xd->canvas;\n\t\tSET(RQUARTZ_FILL);\n\t\tCGContextFillRect(ctx, bounds);\n\t\tgc->fill = savefill;\n\t    }\n\t    SET(RQUARTZ_FILL); /* this will fill with gc->fill */\n            CGContextFillRect(ctx, bounds);\n        }\n    }\n}\n\nstatic int RQuartz_HoldFlush(DEVDESC, int level)\n{\n    int ol;\n    XD;\n    /* FIXME: should we check for interactive? */\n    ol = xd->holdlevel;\n    xd->holdlevel += level;\n    if (xd->holdlevel < 0) xd->holdlevel = 0;\n    if (xd->holdlevel == 0) { /* flush */\n\t/* trigger flush */\n        if (xd->sync)\n            xd->sync(xd, xd->userInfo);\n        else {\n\t    CGContextRef ctx = xd->getCGContext(xd, xd->userInfo);\n\t    if (ctx)\n\t\tCGContextSynchronize(ctx);\n\t}\n    } else if (ol == 0) { /* first hold */\n\t/* could display a wait cursor or something ... */\n    }\n    return xd->holdlevel;\n}\n\nstatic void RQuartz_Clip(double x0, double x1, double y0, double y1, DEVDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    if(xd->gstate > 0) {\n        --xd->gstate;\n        CGContextRestoreGState(ctx);\n    }\n    CGContextSaveGState(ctx);\n    xd->gstate++;\n    if(x1 > x0) { double t = x1; x1 = x0;x0 = t; }\n    if(y1 > y0) { double t = y1; y1 = y0;y0 = t; }\n    xd->clipRect = CGRectMake(x0, y0, x1 - x0, y1 - y0);\n    CGContextClipToRect(ctx, xd->clipRect);\n}\n\n/* non-symbol text is sent in UTF-8 */\nstatic CFStringRef text2unichar(CTXDESC, const char *text, UniChar **buffer, int *free)\n{\n    CFStringRef str;\n    if(gc->fontface == 5)\n        str = CFStringCreateWithCString(NULL, text, kCFStringEncodingMacSymbol);\n    else {\n        str = CFStringCreateWithCString(NULL, text, kCFStringEncodingUTF8);\n        /* Try fallback Latin1 encoding if UTF8 doesn't work \n\t   -- should no longer be needed. */\n        if(!str)\n            CFStringCreateWithCString(NULL, text, kCFStringEncodingISOLatin1);\n    }\n    if (!str) return NULL;\n    *buffer = (UniChar*) CFStringGetCharactersPtr(str);\n    if (*buffer == NULL) {\n        CFIndex length = CFStringGetLength(str);\n\t/* FIXME: check allocation */\n        *buffer = malloc(length * sizeof(UniChar));\n        CFStringGetCharacters(str, CFRangeMake(0, length), *buffer);\n        *free = 1;\n    }\n    return str;\n}\n\nstatic double RQuartz_StrWidth(const char *text, CTXDESC)\n{\n    DEVSPEC;\n    if (!ctx) NOCTXR(strlen(text) * 10.0); /* for sanity reasons */\n    RQuartz_SetFont(ctx, gc, xd);\n\n    CGFontRef font = CGContextGetFont(ctx);\n    float aScale   = (float)((gc->cex * gc->ps * xd->tscale) /\n\t\t\t     CGFontGetUnitsPerEm(font));\n    UniChar *buffer;\n    CGGlyph *glyphs;\n    int     *advances;\n    int Free = 0, len;\n    CFStringRef str = text2unichar(gc, dd, text, &buffer, &Free);\n    if (!str) return 0.0; /* invalid text contents */\n    len = (int) CFStringGetLength(str);\n    /* FIXME: check allocations */\n    glyphs = malloc(sizeof(CGGlyph) * len);\n    advances = malloc(sizeof(int) * len);\n    CGFontGetGlyphsForUnichars(font, buffer, glyphs, len);\n    CGFontGetGlyphAdvances(font, glyphs, len, advances);\n    float width = 0.0; /* aScale*CGFontGetLeading(CGContextGetFont(ctx)); */\n    for(int i = 0; i < len; i++) width += aScale * advances[i];\n    free(advances);\n    free(glyphs);\n    if(Free) free(buffer);\n    CFRelease(str);\n    return width;\n}\n\nstatic void RQuartz_Text(double x, double y, const char *text, double rot, double hadj, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    /* A stupid hack because R isn't consistent. */\n    int fill = gc->fill;\n    gc->fill = gc->col;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE);\n    RQuartz_SetFont(ctx, gc, xd);\n    gc->fill = fill;\n    CGFontRef font = CGContextGetFont(ctx);\n    float aScale   = (float) ((gc->cex * gc->ps * xd->tscale) /\n\t\t\t      CGFontGetUnitsPerEm(font));\n    UniChar *buffer;\n    CGGlyph   *glyphs;\n\n    int Free = 0, len, i;\n    float width = 0.0;\n    CFStringRef str = text2unichar(gc, dd, text, &buffer, &Free);\n    if (!str) return; /* invalid text contents */\n    len = (int) CFStringGetLength(str);\n    /* FIXME: check allocations */\n    glyphs = malloc(sizeof(CGGlyph) * len);\n    CGFontGetGlyphsForUnichars(font, buffer, glyphs, len);\n    int      *advances = malloc(sizeof(int) * len);\n    CGSize   *g_adv    = malloc(sizeof(CGSize) * len);\n\n    CGFontGetGlyphAdvances(font, glyphs, len, advances);\n    for(i =0 ; i < len; i++) {\n\twidth += advances[i] * aScale;\n\tg_adv[i] = CGSizeMake(aScale * advances[i] * cos(-DEG2RAD*rot), aScale*advances[i]*sin(-DEG2RAD * rot));\n    }\n    free(advances);\n    CGContextSetTextMatrix(ctx,\n\t\t\t   CGAffineTransformConcat(CGAffineTransformMakeScale(1.0, -1.0),\n\t\t\t\t\t\t   CGAffineTransformMakeRotation(-DEG2RAD * rot)));\n    double ax = (width * hadj) * cos(-DEG2RAD * rot);\n    double ay = (width * hadj) * sin(-DEG2RAD * rot);\n    /*      double h  = CGFontGetXHeight(CGContextGetFont(ctx))*aScale; */\n    CGContextSetTextPosition(ctx, x - ax, y - ay);\n    /*      Rprintf(\"%s,%.2f %.2f (%.2f,%.2f) (%d,%f)\\n\",text,hadj,width,ax,ay,CGFontGetUnitsPerEm(CGContextGetFont(ctx)),CGContextGetFontSize(ctx));       */\n    CGContextShowGlyphsWithAdvances(ctx,glyphs, g_adv, len);\n    free(glyphs);\n    free(g_adv);\n    if(Free) free(buffer);\n    CFRelease(str);\n}\n\nstatic void RQuartz_Rect(double x0, double y0, double x1, double y1, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    if (xd->flags & QDFLAG_RASTERIZED) {\n        /* in the case of borderless rectangles snap them to pixels.\n           this solves issues with image() without introducing other artifacts.\n           other approaches (disabling anti-aliasing, drawing background first,\n           snapping rect with borders) don't work as well, because they have\n           unwanted visual side-effects. */\n        if (R_ALPHA(gc->fill) > 0 && R_ALPHA(gc->col) == 0) {\n\t    /* store original values in case we need to go back */\n\t    double ox0 = x0, ox1 = x1, oy0 = y0, oy1 = y1;\n            x0 = (round(x0 * xd->scalex)) / xd->scalex;\n            x1 = (round(x1 * xd->scalex)) / xd->scalex;\n            y0 = (round(y0 * xd->scaley)) / xd->scaley;\n            y1 = (round(y1 * xd->scaley)) / xd->scaley;\n\t    /* work-around for PR#13744 - make sure the width or height\n\t       does not drop to 0 because of aligning. */\n\t    if (x0 == x1 && (ox0 != ox1)) x1 += ox1 - ox0;\n\t    if (y0 == y1 && (oy0 != oy1)) y1 += oy1 - oy0;\n        }\n    }\n    CGContextBeginPath(ctx);\n    CGContextAddRect(ctx, CGRectMake(x0, y0, x1 - x0, y1 - y0));\n    CGContextDrawPath(ctx, kCGPathFillStroke);\n}\n\nstatic void RQuartz_Raster(unsigned int *raster, int w, int h,\n                           double x, double y, \n                           double width, double height,\n                           double rot, \n                           Rboolean interpolate,\n                           const pGEcontext gc, pDevDesc dd)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    CGDataProviderRef dp;\n    CGColorSpaceRef cs;\n    CGImageRef img;\n    \n    /* Create a \"data provider\" containing the raster data */\n    dp = CGDataProviderCreateWithData(NULL, (void *) raster, 4*w*h, NULL);\n\n    cs = CGColorSpaceCreateWithName(kCGColorSpaceSRGB);\n\n    /* Create a quartz image from the data provider */\n    img = CGImageCreate(w, h, \n                        8,   /* bits per channel */\n                        32,  /* bits per pixel */\n                        4*w, /* bytes per row */\n                        cs,  /* color space */\n\t\t\t/* R uses AGBR which is so unusual (inverted RGBA) that it corresponds to endinness inverse(!) to the host with alpha last (=RGBA).  */\n#ifdef __BIG_ENDIAN__\n                        kCGImageAlphaLast | kCGBitmapByteOrder32Little,\n#else\n                        kCGImageAlphaLast | kCGBitmapByteOrder32Big,\n#endif\n                        dp,  /* data provider */\n                        NULL,/* decode array */\n                        1,   /* interpolate (interpolation type below) */\n                        kCGRenderingIntentDefault);\n\n    if (height < 0) {\n        y = y + height;\n        height = -height;\n    }\n\n    CGContextSaveGState(ctx);\n    /* Translate by height of image */\n    CGContextTranslateCTM(ctx, 0.0, height);\n    /* Flip vertical */\n    CGContextScaleCTM(ctx, 1.0, -1.0);\n    /* Translate to position */\n    CGContextTranslateCTM(ctx, x, -y);\n    /* Rotate */\n    CGContextRotateCTM(ctx, rot*M_PI/180.0);\n    /* Determine interpolation method */\n    if (interpolate)\n        CGContextSetInterpolationQuality(ctx, kCGInterpolationDefault);\n    else\n        CGContextSetInterpolationQuality(ctx, kCGInterpolationNone);\n    /* Draw the quartz image */\n    CGContextDrawImage(ctx, CGRectMake(0, 0, width, height), img);\n    CGContextRestoreGState(ctx);\n\n    /* Tidy up */\n    CGColorSpaceRelease(cs);\n    CGDataProviderRelease(dp);\n    CGImageRelease(img);\n}\n\nstatic SEXP RQuartz_Cap(pDevDesc dd)\n{\n    SEXP raster = R_NilValue;\n    DRAWSPEC;\n    if (!ctx) NOCTXR(raster);\n\n    if (xd->cap) \n        raster = (SEXP) xd->cap(xd, xd->userInfo);\n\n    return raster;\n}\n\nstatic void RQuartz_Circle(double x, double y, double r, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    double r2 = 2.0*r;\n    CGContextBeginPath(ctx);\n    CGContextAddEllipseInRect(ctx,CGRectMake(x-r,y-r,r2,r2));\n    CGContextDrawPath(ctx,kCGPathFillStroke);\n}\n\nstatic void RQuartz_Line(double x1, double y1, double x2, double y2, CTXDESC)\n{\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_STROKE | RQUARTZ_LINE);\n    CGContextBeginPath(ctx);\n    CGContextMoveToPoint(ctx, x1, y1);\n    CGContextAddLineToPoint(ctx, x2, y2);\n    CGContextStrokePath(ctx);\n}\n\n#define max_segments 100\n\nstatic void RQuartz_Polyline(int n, double *x, double *y, CTXDESC)\n{\n    if (n < 2) return;\n    int i = 0;\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_STROKE | RQUARTZ_LINE);\n\n    /* CGContextStrokeLineSegments turned out to be a bad idea due to\n       Leopard restarting dashes for each segment.\n       CGContextAddLineToPoint is fast enough. \n       The only remaining problem is that Quartz seems to restart\n       dashes at segment breakup points. We should make the segments\n       break-up an optional feature and possibly fix the underlying\n       problem (software rendering).  \n    */\n\n    while (i < n) {\n        int j = i + max_segments;\n        if (j > n) j = n;\n        CGContextBeginPath(ctx);\n\tif (i) i--; /* start at the last point of the preceding chunk */\n        CGContextMoveToPoint(ctx, x[i], y[i]);\n        while(++i < j)\n            CGContextAddLineToPoint(ctx, x[i], y[i]);\n        CGContextStrokePath(ctx);\n    }\n}\n\nstatic void RQuartz_Polygon(int n, double *x, double *y, CTXDESC)\n{\n    if (n < 2) return;\n    int i;\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    CGContextBeginPath(ctx);\n    CGContextMoveToPoint(ctx, x[0], y[0]);\n    for(i = 1; i < n; i++)\n\tCGContextAddLineToPoint(ctx, x[i], y[i]);\n    CGContextClosePath(ctx);\n    CGContextDrawPath(ctx, kCGPathFillStroke);\n}\n\nstatic void RQuartz_Path(double *x, double *y, \n                         int npoly, int* nper,\n                         Rboolean winding,\n                         CTXDESC)\n{\n    int i, j, index;\n    DRAWSPEC;\n    if (!ctx) NOCTX;\n    SET(RQUARTZ_FILL | RQUARTZ_STROKE | RQUARTZ_LINE);\n    index = 0;\n    CGContextBeginPath(ctx);\n    for (i=0; i < npoly; i++) {\n        CGContextMoveToPoint(ctx, x[index], y[index]);\n        index++;\n        for(j=1; j < nper[i]; j++) {\n            CGContextAddLineToPoint(ctx, x[index], y[index]);\n            index++;\n        }\n        CGContextClosePath(ctx);\n    }\n    if (winding) {\n        CGContextDrawPath(ctx, kCGPathFillStroke);\n    } else {\n        CGContextDrawPath(ctx, kCGPathEOFillStroke);\n    }\n}\n\nstatic void RQuartz_Mode(int mode, DEVDESC)\n{\n    DEVSPEC;\n    if (!ctx) NOCTX;\n    /* don't do anything in redraw as we can signal the end */\n    if (xd->redraw) return;\n    /* mode=0 -> drawing complete, signal sync */\n    if (mode == 0 && xd->holdlevel == 0) {\n        if (xd->sync)\n            xd->sync(xd, xd->userInfo);\n        else\n            CGContextSynchronize(ctx);\n    }\n}\n\nstatic void\nRQuartz_MetricInfo(int c, const pGEcontext gc,\n\t\t   double *ascent, double *descent, double *width,\n\t\t   pDevDesc dd)\n{\n    DRAWSPEC;\n    if (!ctx) { /* dummy data if we have no context, for sanity reasons */\n        *ascent = 10.0;\n        *descent= 2.0;\n        *width  = 9.0;\n        NOCTX;\n    }\n    RQuartz_SetFont(ctx, gc, xd);\n    {\n\tCGFontRef font = CGContextGetFont(ctx);\n        float aScale   = (float)((gc->cex * gc->ps * xd->tscale) /\n\t\t\t\t CGFontGetUnitsPerEm(font));\n\tUniChar  *buffer, single;\n        CGGlyph  glyphs[8];\n\tCFStringRef str = NULL;\n        int free_buffer = 0, len;\n\t*width = *ascent = *descent = 0.0; /* data for bail-out cases */\n\tif (c >= 0 && c <= ((mbcslocale && gc->fontface != 5) ? 127 : 255)) {\n\t    char    text[2] = { (char)c, 0 };\n\t    str = text2unichar(gc, dd, text, &buffer, &free_buffer);\n\t    if(!str) return;\n\t    len = (int) CFStringGetLength(str);\n\t    if (len > 7) return; /* this is basically impossible,\n\t\t\t\t    but you never know */\n\t} else {\n\t    single = (UniChar) ((c < 0) ? -c : c);\n\t    buffer = &single;\n\t    len = 1;\n\t}\n        *width = 0.0;\n        CGFontGetGlyphsForUnichars(font, buffer, glyphs, len);\n        {\n\t    int i;\n            int    advances[8];\n            CGRect bboxes[8];\n            CGFontGetGlyphAdvances(font, glyphs, len, advances);\n            CGFontGetGlyphBBoxes(font, glyphs, len, bboxes);\n            for(i = 0; i < len; i++)\n                *width += advances[i] * aScale;\n            *ascent  = aScale * (bboxes[0].size.height + bboxes[0].origin.y);\n            *descent = -aScale * bboxes[0].origin.y;\n        }\n        if (free_buffer) free(buffer);\n        if (str) CFRelease(str);\n    }\n}\n\nstatic Rboolean RQuartz_Locator(double *x, double *y, DEVDESC)\n{\n    Rboolean res;\n    DEVSPEC;\n    ctx = NULL;\n    if (!xd->locatePoint)\n        return FALSE;\n    res = xd->locatePoint(xd, xd->userInfo, x, y);\n    *x/=xd->scalex;\n    *y/=xd->scaley;\n    return res;\n}\n\n#pragma mark -\n#pragma mark R Interface\n\n#include \"qdCocoa.h\"\n#include \"qdBitmap.h\"\n#include \"qdPDF.h\"\n/* disabled for now until we get to test in on 10.3 #include \"qdCarbon.h\" */\n\n/* current fake */\nQuartzDesc_t \nQuartzCarbon_DeviceCreate(pDevDesc dd, QuartzFunctions_t *fn, QuartzParameters_t *par)\n{\n    return NULL;\n}\n\n#define ARG(HOW,WHAT) HOW(CAR(WHAT));WHAT = CDR(WHAT)\n\n/* C version of the Quartz call (experimental)\n   Quartz descriptor on success, NULL on failure. \n   If errorCode is not NULL, it will contain the error code on exit */\nQuartzDesc_t \nQuartz_C(QuartzParameters_t *par, quartz_create_fn_t q_create, int *errorCode)\n{\n    if (!q_create || !par) {\n\tif (errorCode) errorCode[0] = -4;\n\treturn NULL;\n    }\n    {\n        const void *vmax = vmaxget();\n\tQuartzDesc_t qd = NULL;\n\tR_GE_checkVersionOrDie(R_GE_version);\n        R_CheckDeviceAvailable();\n        {\n\t    const char *devname = \"quartz_off_screen\";\n\t    /* FIXME: check this allocation */\n            pDevDesc dev    = calloc(1, sizeof(DevDesc));\n\n            if (!dev) {\n\t\tif (errorCode) errorCode[0] = -2;\n\t\treturn NULL;\n\t    }\n            if (!(qd = q_create(dev, &qfn, par))) {\n                vmaxset(vmax);\n                free(dev);\n\t\tif (errorCode) errorCode[0] = -3;\n\t\treturn NULL;\n            }\n\t    if(streql(par->type, \"\") || streql(par->type, \"native\")\n\t       || streql(par->type, \"cocoa\") || streql(par->type, \"carbon\"))\n\t\tdevname = \"quartz\";\n            gsetVar(R_DeviceSymbol, mkString(devname), R_BaseEnv);\n            pGEDevDesc dd = GEcreateDevDesc(dev);\n            GEaddDevice(dd);\n            GEinitDisplayList(dd);\n            vmaxset(vmax);\n        }\n\treturn qd;\n    }\n}\n\n/* ARGS: type, file, width, height, ps, family, antialias,\n   title, bg, canvas, dpi */\nSEXP Quartz(SEXP args)\n{\n    SEXP tmps, bgs, canvass;\n    double   width, height, ps;\n    Rboolean antialias;\n    int      quartzpos, bg, canvas, module = 0;\n    double   mydpi[2], *dpi = 0;\n    const char *type, *mtype = 0, *family, *title;\n    char *file = NULL;\n    QuartzDesc_t qd = NULL;\n\n    const void *vmax = vmaxget();\n    /* Get function arguments */\n    args = CDR(args); /* Skip the call */\n    if (TYPEOF(CAR(args)) != STRSXP || LENGTH(CAR(args)) < 1)\n        type = \"\";\n    else\n        type  = CHAR(STRING_ELT(CAR(args), 0));\n    args = CDR(args);\n    /* we may want to support connections at some point, but not yet ... */\n    tmps = CAR(args);    args = CDR(args);\n    if (isNull(tmps)) \n\tfile = NULL;\n    else if (isString(tmps) && LENGTH(tmps) >= 1) {\n        const char *tmp = R_ExpandFileName(CHAR(STRING_ELT(tmps, 0)));\n\tfile = R_alloc(strlen(tmp) + 1, sizeof(char));\n\tstrcpy(file, tmp);\n    } else\n        error(_(\"invalid 'file' argument\"));\n    width     = ARG(asReal,args);\n    height    = ARG(asReal,args);\n    ps        = ARG(asReal,args);\n    family    = CHAR(STRING_ELT(CAR(args), 0)); args = CDR(args);\n    antialias = ARG(asLogical,args);\n    title     = CHAR(STRING_ELT(CAR(args), 0)); args = CDR(args);\n    bgs       = CAR(args); args = CDR(args);\n    bg        = RGBpar(bgs, 0);\n    canvass   = CAR(args); args = CDR(args);\n    canvas    = RGBpar(canvass, 0) | 0xff000000; /* force opaque */\n    tmps      = CAR(args); args = CDR(args);\n    if (!isNull(tmps)) {\n        tmps = coerceVector(tmps, REALSXP);\n        if (LENGTH(tmps) > 0) {\n            dpi = mydpi;\n            mydpi[0] = REAL(tmps)[0];\n            if (LENGTH(tmps) > 1)\n                mydpi[1] = REAL(tmps)[1];\n            else\n                mydpi[1] = mydpi[0];\n        }\n    }\n    /* just in case someone passed NAs/NaNs */\n    if (dpi && (ISNAN(dpi[0]) || ISNAN(dpi[1]))) dpi=0;\n\n    if (ISNAN(width) || ISNAN(height) || width <= 0.0 || height <= 0.0)\n        error(_(\"invalid quartz() device size\"));\n\n    if (type) {\n        const quartz_module_t *m = quartz_modules;\n\tmtype = type;\n        while (m->type) {\n            if (!strcasecmp(type, m->type)) {\n                module = m->qbe;\n                if (m->subst) mtype = m->subst;\n                break;\n            }\n            m++;\n        }\n\n\tif (!strncasecmp(type, \"bitmap:\", 7)) {\n\t    module = QBE_BITMAP;\n\t    mtype = mtype + 7;\n\t}\n    }\n\n    quartzpos = 1;\n\n    R_GE_checkVersionOrDie(R_GE_version);\n    R_CheckDeviceAvailable();\n    BEGIN_SUSPEND_INTERRUPTS {\n\tpDevDesc dev = calloc(1, sizeof(DevDesc));\n\n\tif (!dev)\n\t    error(_(\"unable to create device description\"));\n\n\tQuartzParameters_t qpar = {\n\t    sizeof(qpar),\n\t    mtype, file, title,\n\t    -1.0, -1.0, width, height, ps,\n\t    family,\n\t    antialias ? QPFLAG_ANTIALIAS: 0,\n\t    -1, /* connection */\n\t    bg, canvas,\n\t    dpi\n\t};\n\n\t/* re-routed code has the first shot */\n\tif (ptr_QuartzBackend)\n\t    qd = ptr_QuartzBackend(dev, &qfn, &qpar);\n\n\tif (qd == NULL) { /* try internal modules next */\n\t    switch (module) {\n            case QBE_COCOA:\n                qd = QuartzCocoa_DeviceCreate(dev, &qfn, &qpar);\n                break;\n            case QBE_NATIVE:\n                /* native is essentially cocoa with carbon fall-back */\n                qd = QuartzCocoa_DeviceCreate(dev, &qfn, &qpar);\n                if (qd) break;\n            case QBE_CARBON:\n                qd = QuartzCarbon_DeviceCreate(dev, &qfn, &qpar);\n                break;\n            case QBE_PDF:\n\t\tqpar.canvas = 0; /* so not used */\n                qd = QuartzPDF_DeviceCreate(dev, &qfn, &qpar);\n                break;\n            case QBE_BITMAP:\n\t\t/* we need to set up the default file name here, where we\n\t\t   know the original type name. */\n\t\tif (file == NULL) {\n\t\t    static char deffile[30];\n\t\t    snprintf(deffile, 30, \"%s.%s\", \"Rplot%03d\", type);\n\t\t    qpar.file = deffile;\n\t\t}\n\t\tqpar.canvas = 0; /* so not used */\n\t\tqd = QuartzBitmap_DeviceCreate(dev, &qfn, &qpar);\n\t\tbreak;\n\t    }\n\t}\n\n\tif (qd == NULL) {\n\t    vmaxset(vmax);\n\t    free(dev);\n\t    error(_(\"unable to create quartz() device target, given type may not be supported\"));\n\t}\n\tconst char *devname = \"quartz_off_screen\";\n\tif(streql(type, \"\") || streql(type, \"native\") || streql(type, \"cocoa\") \n\t   || streql(type, \"carbon\")) devname = \"quartz\";\n\tSEXP f = PROTECT(mkString(devname));\n\tif(file) setAttrib(f, install(\"filepath\"), mkString(file));\n \tgsetVar(R_DeviceSymbol, f, R_BaseEnv);\n\tUNPROTECT(1);\n\tpGEDevDesc dd = GEcreateDevDesc(dev);\n\tGEaddDevice(dd);\n\tGEinitDisplayList(dd);\n    } END_SUSPEND_INTERRUPTS;\n    vmaxset(vmax);\n    return R_NilValue;\n}\n\n#include <sys/sysctl.h>\n\nstatic double cached_darwin_version = 0.0;\n\n/* Darwin version X.Y maps to OS X version 10.(X - 4).Y */\nstatic double darwin_version() {\n    char ver[32];\n    size_t len = sizeof(ver) - 1;\n    int mib[2] = { CTL_KERN, KERN_OSRELEASE };\n    if (cached_darwin_version > 0.0)\n\treturn cached_darwin_version;\n    sysctl(mib, 2, &ver, &len, 0, 0);\n    return (cached_darwin_version = atof(ver));\n}\n\n#include <mach/mach.h>\n#include <servers/bootstrap.h>\n\n/* even as of Darwin 9 there is no entry for bootstrap_info in bootrap headers */\nextern kern_return_t bootstrap_info(mach_port_t , /* bootstrap port */\n                                    name_array_t*, mach_msg_type_number_t*,  /* service */\n                                    name_array_t*, mach_msg_type_number_t*,  /* server */\n                                    bool_array_t*, mach_msg_type_number_t*); /* active */\n\n/* returns 1 if window server session service\n   (com.apple.windowserver.session) is present in the boostrap\n   namespace (pre-Lion) or when a current session is present, active\n   and there is no SSH_CONNECTION (Lion and later).\n   returns 0 if an error occurred or the service is not\n   present. For all practical purposes this returns 1 only if run\n   interactively via LS. Although ssh to a machine that has a running\n   session for the same user will allow a WS connection, this function\n   will still return 0 in that case.\n   NOTE: on Mac OS X 10.5 we are currently NOT searching the parent\n   namespaces. This is currently OK, because the session service will\n   be registered in the session namespace which is the last in the\n   chain. However, this could change in the future.\n */\nstatic int has_wss() {\n    int res = 0;\n\n    if (darwin_version() < 11.0) { /* before Lion we get reliable information from the bootstrap info */\n\tkern_return_t kr;\n\tmach_port_t self = mach_task_self();\n\tmach_port_t bport = MACH_PORT_NULL;\n\tkr = task_get_bootstrap_port(self, &bport);\n\tif (kr == KERN_SUCCESS) {\n\t    kern_return_t           kr;\n\t    name_array_t            serviceNames;\n\t    mach_msg_type_number_t  serviceNameCount;\n\t    name_array_t            serverNames;\n\t    mach_msg_type_number_t  serverNameCount;\n\t    bool_array_t            active;\n\t    mach_msg_type_number_t  activeCount;\n\t    \n\t    serviceNames  = NULL;\n\t    serverNames   = NULL;\n\t    active        = NULL;\n\t    \n\t    kr = bootstrap_info(bport, \n\t\t\t\t&serviceNames, &serviceNameCount, \n\t\t\t\t&serverNames, &serverNameCount, \n\t\t\t\t&active, &activeCount);\n\t    if (kr == KERN_SUCCESS) {\n\t\tunsigned int i = 0;\n\t\twhile (i < serviceNameCount) {\n\t\t    if (!strcmp(serviceNames[i], \"com.apple.windowserver.session\")) {\n\t\t\tres = 1;\n\t\t\tbreak;\n\t\t    }\n\t\t    i++;\n\t\t}\n\t    }\n\t}\n\tif (bport != MACH_PORT_NULL)\n\t    mach_port_deallocate(mach_task_self(), bport);\n    } else {\n\t/* On Mac OS X 10.7 (Lion) and higher two things changed:\n\t   a) there is no com.apple.windowserver.session anymore \n\t   so the above will fail\n\t   b) every process has now the full bootstrap info, \n\t   so in fact even remote connections will be able to \n\t   run on-screen tasks if the user is logged in\n\t   So we need to add some heuristics to decide when the user \n\t   actually wants Quartz ... */   \n\t/* check user's session */\n\tCFDictionaryRef dict = CGSessionCopyCurrentDictionary();\n\tif (dict) { /* allright, let's see if the session is current */\n\t    CFTypeRef obj = CFDictionaryGetValue(dict, CFSTR(\"kCGSSessionOnConsoleKey\"));\n\t    if (obj && CFGetTypeID(obj) == CFBooleanGetTypeID()) {\n\t\t/* even if this session is active, we don't use Quartz for SSH connections */\n\t\tif (CFBooleanGetValue(obj) && (!getenv(\"SSH_CONNECTION\") || getenv(\"SSH_CONNECTION\")[0] == 0))\n\t\t    res = 1;\n\t    }\n\t    CFRelease(dict);\n\t}\n    }\n\n    return res;\n}\n\nSEXP makeQuartzDefault() {\n    return ScalarLogical(has_wss());\n}\n\n#else\n/* --- no AQUA support = no Quartz --- */\n\n#include \"grDevices.h\"\n#include <R_ext/QuartzDevice.h>\n\nSEXP Quartz(SEXP args)\n{\n    warning(_(\"Quartz device is not available on this platform\"));\n    return R_NilValue;\n}\n\nSEXP makeQuartzDefault() {\n    return ScalarLogical(FALSE);\n}\n\nQuartzDesc_t \nQuartz_C(QuartzParameters_t *par, quartz_create_fn_t q_create, int *errorCode)\n{\n    if (errorCode) errorCode[0] = -1;\n    return NULL;\n}\n\nvoid *getQuartzAPI()\n{\n    return NULL;\n}\n\n#endif\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tools/R/check.R": "#  File src/library/tools/R/check.R\n#  Part of the R package, http://www.R-project.org\n#\n#  Copyright (C) 1995-2015 The R Core Team\n#\n#  This program is free software; you can redistribute it and/or modify\n#  it under the terms of the GNU General Public License as published by\n#  the Free Software Foundation; either version 2 of the License, or\n#  (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  A copy of the GNU General Public License is available at\n#  http://www.r-project.org/Licenses/\n\n###- R based engine for R CMD check\n\n## R developers can use this to debug the function by running it\n## directly as tools:::.check_packages(args), where the args should\n## be what commandArgs(TRUE) would return, that is a character vector\n## of (space-delimited) terms that would be passed to R CMD checks.\n\n## Used for INSTALL and Rd2pdf\nrun_Rcmd <- function(args, out = \"\", env = \"\")\n{\n    if(.Platform$OS.type == \"windows\")\n        system2(file.path(R.home(\"bin\"), \"Rcmd.exe\"), args, out, out)\n    else\n        system2(file.path(R.home(\"bin\"), \"R\"), c(\"CMD\", args), out, out,\n                env = env)\n}\n\nR_runR <- function(cmd = NULL, Ropts = \"\", env = \"\",\n                   stdout = TRUE, stderr = TRUE, stdin = NULL,\n                   arch = \"\")\n{\n    if (.Platform$OS.type == \"windows\") {\n        ## workaround Windows problem with input = cmd\n        if (!is.null(cmd)) {\n            ## In principle this should escape \\\n           Rin <- tempfile(\"Rin\"); on.exit(unlink(Rin)); writeLines(cmd, Rin)\n        } else Rin <- stdin\n        suppressWarnings(system2(if(nzchar(arch)) file.path(R.home(), \"bin\", arch, \"Rterm.exe\")\n                                 else file.path(R.home(\"bin\"), \"Rterm.exe\"),\n                                 c(Ropts, paste(\"-f\", Rin)), stdout, stderr, env = env))\n    } else {\n        suppressWarnings(system2(file.path(R.home(\"bin\"), \"R\"),\n                                 c(if(nzchar(arch)) paste0(\"--arch=\", arch), Ropts),\n                                 stdout, stderr, stdin, input = cmd, env = env))\n    }\n}\n\nsetRlibs <-\n    function(lib0 = \"\", pkgdir = \".\", suggests = FALSE, libdir = NULL,\n             self = FALSE, self2 = TRUE, quote = FALSE, LinkingTo = FALSE)\n{\n    WINDOWS <- .Platform$OS.type == \"windows\"\n    useJunctions <- WINDOWS && !nzchar(Sys.getenv(\"R_WIN_NO_JUNCTIONS\"))\n    flink <- function(from, to) {\n        res <- if(WINDOWS) {\n            if(useJunctions) Sys.junction(from, to)\n            else file.copy(from, to, recursive = TRUE)\n        } else file.symlink(from, to)\n        if (!res) stop(gettextf(\"cannot link from %s\", from), domain = NA)\n    }\n\n    pi <- .split_description(.read_description(file.path(pkgdir, \"DESCRIPTION\")))\n    thispkg <- unname(pi$DESCRIPTION[\"Package\"])\n\n    ## We need to make some assumptions about layout: this version\n    ## assumes .Library contains standard and recommended packages\n    ## and nothing else.\n    tmplib <- tempfile(\"RLIBS_\")\n    dir.create(tmplib)\n    ## Since this is under the session directory and only contains\n    ## symlinks and dummies (hence will be small) we never clean it up.\n\n    test_recommended <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_NO_RECOMMENDED_\", \"FALSE\"))\n\n    if(test_recommended) {\n        ## Now add dummies for recommended packages (removed later if declared)\n        recommended <- .get_standard_package_names()$recommended\n        ## grDevices has :: to KernSmooth\n        ## stats has ::: to Matrix, Matrix depends on lattice\n        ## which gives false positives in MASS and Rcpp\n        ## codetools is really part of tools\n        exceptions <- \"codetools\"\n        if (thispkg %in% c(\"MASS\", \"Rcpp\"))\n            exceptions <- c(exceptions, \"Matrix\", \"lattice\")\n        if (thispkg %in%\n            c(\"Modalclust\", \"aroma.core\", \"iWebPlots\",\n              \"openair\", \"oce\", \"pcalg\", \"tileHMM\"))\n            exceptions <- c(exceptions, \"KernSmooth\")\n        recommended <- recommended[!recommended %in% exceptions]\n        for(pkg in recommended) {\n            if(pkg == thispkg) next\n            dir.create(pd <- file.path(tmplib, pkg))\n            ## some people remove recommended packages ....\n            f <- file.path(.Library, pkg, \"DESCRIPTION\")\n            if(file.exists(f)) file.copy(f, pd)\n            ## to make sure find.package throws an error:\n            close(file(file.path(pd, \"dummy_for_check\"), \"w\"))\n        }\n    }\n\n    sug <- if (suggests)  names(pi$Suggests)\n    else {\n        ## we always need to be able to recognise 'vignettes'\n        VB <- unname(pi$DESCRIPTION[\"VignetteBuilder\"])\n        if(is.na(VB)) character()\n        else {\n            VB <- unlist(strsplit(VB, \",\"))\n            unique(gsub('[[:space:]]', '', VB))\n        }\n    }\n    deps <- unique(c(names(pi$Depends), names(pi$Imports),\n                     if(LinkingTo) names(pi$LinkingTo),\n                     sug))\n    if(length(libdir) && self2) flink(file.path(libdir, thispkg), tmplib)\n    ## .Library is not necessarily canonical, but the .libPaths version is.\n    lp <- .libPaths()\n    poss <- c(lp[length(lp)], .Library)\n    already <- thispkg\n    more <- unique(deps[!deps %in% already]) # should not depend on itself ...\n    while(length(more)) {\n        m0 <- more; more <- character()\n        for (pkg in m0) {\n            if (test_recommended) {\n                if (pkg %in% recommended) unlink(file.path(tmplib, pkg), TRUE)\n                ## hard-code dependencies for now.\n                if (pkg == \"mgcv\")\n                    unlink(file.path(tmplib, c(\"Matrix\", \"lattice\", \"nlme\")), TRUE)\n                if (pkg == \"Matrix\") unlink(file.path(tmplib, \"lattice\"), TRUE)\n                if (pkg == \"class\") unlink(file.path(tmplib, \"MASS\"), TRUE)\n                if (pkg == \"nlme\") unlink(file.path(tmplib, \"lattice\"), TRUE)\n            }\n            where <- find.package(pkg, quiet = TRUE)\n            if(length(where)) {\n                if (!(dirname(where) %in% poss))\n                    flink(where, tmplib)\n                else if (!test_recommended)\n                    # If the package is in the standard library we can\n                    # assume dependencies have been met, but we can\n                    # only skip the traversal if we aren't testing recommended\n                    # packages, because loading will fail if there is\n                    # an indirect dependency to one that has been hidden\n                    # by a dummy in tmplib.\n                    next\n                pi <- readRDS(file.path(where, \"Meta\", \"package.rds\"))\n                more <- c(more, names(pi$Depends), names(pi$Imports),\n                          names(pi$LinkingTo))\n            }\n        }\n        already <- c(already, m0)\n        more <- unique(more[!more %in% already])\n    }\n    if (self) flink(normalizePath(pkgdir), tmplib)\n    # print(dir(tmplib))\n    rlibs <- tmplib\n    if (nzchar(lib0)) rlibs <- c(lib0, rlibs)\n    rlibs <- paste(rlibs, collapse = .Platform$path.sep)\n    if(quote) rlibs <- shQuote(rlibs)\n    c(paste(\"R_LIBS\", rlibs, sep = \"=\"),\n      if(WINDOWS) \" R_ENVIRON_USER='no_such_file'\" else \"R_ENVIRON_USER=''\",\n      if(WINDOWS) \" R_LIBS_USER='no_such_dir'\" else \"R_LIBS_USER=''\",\n      \" R_LIBS_SITE='no_such_dir'\")\n}\n\n###- The main function for \"R CMD check\"\n.check_packages <- function(args = NULL)\n{\n    WINDOWS <- .Platform$OS.type == \"windows\"\n    ## this requires on Windows: file.exe (optional)\n\n    wrapLog <- function(...) {\n        text <- paste(..., collapse = \" \")\n        ## strwrap expects paras separated by blank lines.\n        ## Perl's wrap split on \\n\n        text <- strsplit(text, \"\\n\", useBytes = TRUE)[[1L]]\n        printLog(Log, paste(strwrap(text), collapse = \"\\n\"), \"\\n\")\n    }\n\n    ## Used for\n    ## .check_packages_used\n    ## .check_packages_used_in_examples\n    ## .check_packages_used_in_tests\n    ## .check_packages_used_in_vignettes\n    ## checkS3methods\n    ## checkReplaceFuns\n    ## checkFF\n    ## .check_code_usage_in_package (with full set)\n    ## .check_T_and_F (with full set)\n    ## .check_dotInternal (with full set)\n    ## undoc, codoc, codocData, codocClasses\n    ## checkDocFiles, checkDocStyle\n    ## The default set of packages here are as they are because\n    ## .get_S3_generics_as_seen_from_package needs utils,graphics,stats\n    ##  Used by checkDocStyle (which needs the generic visible) and checkS3methods.\n    R_runR2 <-\n        if(WINDOWS) {\n            function(cmd,\n                     env = \"R_DEFAULT_PACKAGES=utils,grDevices,graphics,stats\")\n                {\n                    out <- R_runR(cmd, R_opts2, env)\n                    ## pesky gdata ....\n                    grep(\"^(ftype: not found|File type)\", out,\n                         invert = TRUE, value = TRUE)\n                }\n        } else\n            function(cmd,\n                     env = \"R_DEFAULT_PACKAGES='utils,grDevices,graphics,stats'\")\n            {\n                out <- R_runR(cmd, R_opts2, env)\n                if (R_check_suppress_RandR_message)\n                    grep('^Xlib: *extension \"RANDR\" missing on display', out,\n                         invert = TRUE, value = TRUE)\n                else out\n            }\n\n    td0 <- Inf # updated below\n    print_time <- function(t1, t2, Log)\n    {\n        td <- t2 - t1\n        if(td[3L] < td0) return()\n        td2 <- if (td[3L] > 600) {\n            td <- td/60\n            if(WINDOWS) sprintf(\" [%dm]\", round(td[3L]))\n            else sprintf(\" [%dm/%dm]\", round(sum(td[-3L])), round(td[3L]))\n        } else {\n            if(WINDOWS) sprintf(\" [%ds]\", round(td[3L]))\n            else sprintf(\" [%ds/%ds]\", round(sum(td[-3L])), round(td[3L]))\n        }\n        cat(td2)\n        if (!is.null(Log) && Log$con > 0L) cat(td2, file = Log$con)\n    }\n\n    parse_description_field <- function(desc, field, default=TRUE)\n    {\n        tmp <- desc[field]\n        if (is.na(tmp)) default\n        else switch(tmp,\n                    \"yes\"=, \"Yes\" =, \"true\" =, \"True\" =, \"TRUE\" = TRUE,\n                    \"no\" =, \"No\" =, \"false\" =, \"False\" =, \"FALSE\" = FALSE,\n                    default)\n    }\n\n    check_pkg <- function(pkg, pkgname, pkgoutdir, startdir, libdir, desc,\n                          is_base_pkg, is_rec_pkg, subdirs, extra_arch)\n    {\n        ## pkg is the argument we received from the main loop.\n        ## pkgdir is the corresponding absolute path,\n\n        checkingLog(Log, \"package directory\")\n        setwd(startdir)\n        pkg <- sub(\"/$\", \"\", pkg)\n        if (dir.exists(pkg)) {\n            setwd(pkg) ## wrap in try()?\n            pkgdir <- getwd()\n            resultLog(Log, \"OK\")\n        } else {\n            errorLog(Log, \"Package directory \", sQuote(pkg), \"does not exist.\")\n            summaryLog(Log)\n            do_exit(1L)\n        }\n\n        haveR <- dir.exists(\"R\") && !extra_arch\n\n        if (!extra_arch) {\n            if(dir.exists(\"build\")) check_build()\n            check_meta()  # Check DESCRIPTION meta-information.\n            check_top_level()\n            check_detritus()\n            check_indices()\n            check_subdirectories(haveR, subdirs)\n            ## Check R code for non-ASCII chars which\n            ## might be syntax errors in some locales.\n            if (!is_base_pkg && haveR && R_check_ascii_code) check_non_ASCII()\n        } # end of !extra_arch\n\n        ## Check we can actually load the package: base is always loaded\n        if (do_install && pkgname != \"base\") {\n            if (this_multiarch) {\n                Log$stars <<-  \"**\"\n                for (arch in inst_archs) {\n                    printLog(Log, \"* loading checks for arch \", sQuote(arch), \"\\n\")\n                    check_loading(arch)\n                }\n                Log$stars <<-  \"*\"\n            } else {\n                check_loading()\n            }\n        }\n\n        if (haveR) {\n            check_R_code() # unstated dependencies, S3 methods, replacement, foreign\n            check_R_files(is_rec_pkg) # codetools etc\n        }\n\n        check_Rd_files(haveR)\n\n        check_data() # 'data' dir and sysdata.rda\n\n        if (!is_base_pkg && !extra_arch) check_src_dir(desc)\n\n        if(do_install &&\n           dir.exists(\"src\") &&\n           length(so_symbol_names_table)) # suitable OS\n            check_sos()\n\n        miss <- file.path(\"inst\", \"doc\", c(\"Rplots.ps\", \"Rplots.pdf\"))\n        if (any(f <- file.exists(miss))) {\n            checkingLog(Log, \"for left-overs from vignette generation\")\n            warningLog(Log)\n            printLog(Log,\n                     paste(\"  file\", paste(sQuote(miss[f]), collapse = \", \"),\n                           \"will not be installed: please remove it\\n\"))\n        }\n        if (dir.exists(\"inst/doc\")) {\n            if (R_check_doc_sizes) check_doc_size()\n            else if (as_cran)\n                warningLog(Log, \"'qpdf' is needed for checks on size reduction of PDFs\")\n        }\n        if (dir.exists(\"inst/doc\") && do_install) check_doc_contents()\n        if (dir.exists(\"vignettes\")) check_vign_contents()\n        if (dir.exists(\"inst/doc\") && !dir.exists(\"vignettes\")) {\n            pattern <- vignetteEngine(\"Sweave\")$pattern\n            sources <- setdiff(list.files(file.path(\"inst\", \"doc\"),\n                                          pattern = pattern),\n                               list.files(\"vignettes\", pattern = pattern))\n            buildPkgs <- .get_package_metadata(\".\")[\"VignetteBuilder\"]\n            if (!is.na(buildPkgs)) {\n                buildPkgs <- unlist(strsplit(buildPkgs, \",\"))\n                buildPkgs <- unique(gsub('[[:space:]]', '', buildPkgs))\n                engineList <- vignetteEngine(package = buildPkgs)\n                for(nm in names(engineList)) {\n                    pattern <- engineList[[nm]]$pattern\n                    sources <- c(sources,\n                                 setdiff(list.files(file.path(\"inst\", \"doc\"),\n                                                    pattern = pattern),\n                                         list.files(\"vignettes\", pattern = pattern)))\n                }\n            }\n            sources <- unique(sources)\n            if(length(sources)) {\n                checkingLog(Log, \"for old-style vignette sources\")\n                msg <- c(\"Vignette sources only in 'inst/doc':\",\n                         strwrap(paste(sQuote(sources), collapse = \", \"),\n                                 indent = 2L, exdent = 2L),\n                         \"A 'vignettes' directory is required as from R 3.1.0\",\n                         \"and these will not be indexed nor checked\")\n                ## warning or error eventually\n                noteLog(Log, paste(msg, collapse = \"\\n\"))\n            }\n        }\n\n        setwd(pkgoutdir)\n\n        ## Run the examples: this will be skipped if installation was\n        if (dir.exists(file.path(libdir, pkgname, \"help\"))) {\n            run_examples()\n        } else if (dir.exists(file.path(pkgdir, \"man\"))) {\n            checkingLog(Log, \"examples\")\n            resultLog(Log, \"SKIPPED\")\n        }\n\n        ## Run the package-specific tests.\n        tests_dir <- file.path(pkgdir, test_dir)\n\tif (test_dir != \"tests\" && !dir.exists(tests_dir)) {\n\t    warningLog(Log)\n\t    printLog(Log, \"directory \", sQuote(test_dir), \" not found\\n\")\n\t}\n        if (dir.exists(tests_dir) && # trackObjs has only *.Rin\n            length(dir(tests_dir, pattern = \"\\\\.(R|Rin)$\")))\n            run_tests()\n\n        ## Check package vignettes.\n        setwd(pkgoutdir)\n        run_vignettes(desc)\n\n    } ## end{ check_pkg }\n\n    check_file_names <- function()\n    {\n        ## Check for portable file names.\n        checkingLog(Log, \"for portable file names\")\n\n        ## Build list of exclude patterns.\n        ignore <- get_exclude_patterns()\n        ignore_file <- \".Rbuildignore\"\n        if (ignore_file %in% dir())\n            ignore <- c(ignore, readLines(ignore_file))\n\n        ## Ensure that the names of the files in the package are valid\n        ## for at least the supported OS types.  Under Unix, we\n        ## definitely cannot have '/'.  Under Windows, the control\n        ## characters as well as \" * : < > ? \\ | (i.e., ASCII\n        ## characters 1 to 31 and 34, 36, 58, 60, 62, 63, 92, and 124)\n        ## are or can be invalid.  (In addition, one cannot have\n        ## one-character file names consisting of just ' ', '.', or\n        ## '~'., and '~' has a special meaning for 8.3 short file\n        ## names).\n\n        ## Based on information by Uwe Ligges, Duncan Murdoch, and\n        ## Brian Ripley: see also\n        ## http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx\n\n        ## In addition, Windows does not allow the following DOS type\n        ## device names (by themselves or with possible extensions),\n        ## see e.g.\n        ## http://msdn.microsoft.com/library/default.asp?url=/library/en-us/fileio/fs/naming_a_file.asp\n        ## http://msdn.microsoft.com/en-us/library/aa365247%28VS.85%29.aspx#naming_conventions\n        ## and http://en.wikipedia.org/wiki/Filename (which as of\n        ## 2007-04-22 is wrong about claiming that COM0 and LPT0 are\n        ## disallowed):\n        ##\n        ## CON: Keyboard and display\n        ## PRN: System list device, usually a parallel port\n        ## AUX: Auxiliary device, usually a serial port\n        ## NUL: Bit-bucket device\n        ## CLOCK$: System real-time clock\n        ## COM1, COM2, COM3, COM4, COM5, COM6, COM7, COM8, COM9:\n        ##   Serial communications ports 1-9\n        ## LPT1, LPT2, LPT3, LPT4, LPT5, LPT6, LPT7, LPT8, LPT9:\n        ##   parallel printer ports 1-9\n\n        ## In addition, the names of help files get converted to HTML\n        ## file names and so should be valid in URLs.  We check that\n        ## they are ASCII and do not contain %, which is what is known\n        ## to cause troubles.\n\n        allfiles <- dir(\".\", all.files = TRUE,\n                        full.names = TRUE, recursive = TRUE)\n        allfiles <- c(allfiles, unique(dirname(allfiles)))\n        allfiles <- af <- sub(\"^./\", \"\", allfiles)\n        ignore_re <- paste0(\"(\", paste(ignore, collapse = \"|\"), \")\")\n        allfiles <- grep(ignore_re, allfiles, invert = TRUE, value = TRUE)\n\n        bad_files <- allfiles[grepl(\"[[:cntrl:]\\\"*/:<>?\\\\|]\",\n                                    basename(allfiles))]\n        is_man <- grepl(\"man$\", dirname(allfiles))\n        bad <- sapply(strsplit(basename(allfiles[is_man]), \"\"),\n                      function(x) any(grepl(\"[^ -~]|%\", x)))\n        if (length(bad))\n            bad_files <- c(bad_files, (allfiles[is_man])[bad])\n        bad <- tolower(basename(allfiles))\n        ## remove any extension(s) (see 'Writing R Extensions')\n        bad <- sub(\"[.].*\", \"\", bad)\n        bad <- grepl(\"^(con|prn|aux|clock[$]|nul|lpt[1-9]|com[1-9])$\", bad)\n        bad_files <- c(bad_files, allfiles[bad])\n        if (nb <- length(bad_files)) {\n            errorLog(Log)\n            msg <- ngettext(nb,\n                            \"Found the following file with a non-portable file name:\\n\",\n                            \"Found the following files with non-portable file names:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n            wrapLog(\"These are not valid file names\",\n                    \"on all R platforms.\\n\",\n                    \"Please rename the files and try again.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n\t    maybe_exit(1L)\n        }\n\n        ## Next check for name clashes on case-insensitive file systems\n        ## (that is on Windows and (by default) on OS X).\n\n        dups <- unique(allfiles[duplicated(tolower(allfiles))])\n        if (nb <- length(dups)) {\n            errorLog(Log)\n            wrapLog(\"Found the following files with duplicate lower-cased file names:\\n\")\n            printLog0(Log, .format_lines_with_indent(dups), \"\\n\")\n            wrapLog(\"File names must not differ just by case\",\n                    \"to be usable on all R platforms.\\n\",\n                    \"Please rename the files and try again.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n\t    maybe_exit(1L)\n        }\n\n        ## NB: the omission of ' ' is deliberate.\n        non_ASCII_files <-\n            allfiles[grepl(\"[^-A-Za-z0-9._!#$%&+,;=@^(){}\\'[\\\\]]\", #\n                           basename(allfiles), perl = TRUE)]\n        any <- FALSE\n        if (nb <- length(non_ASCII_files)) {\n            any <- TRUE\n            warningLog(Log)\n            msg <- ngettext(nb,\n                            \"Found the following file with a non-portable file name:\\n\",\n                            \"Found the following files with non-portable file names:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(non_ASCII_files), \"\\n\")\n            wrapLog(\"These are not fully portable file names.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n        }\n\n        ## now check lengths, as tarballs can only record up to 100 bytes\n        ## plus perhaps 155 bytes as a prefix plus /\n        af <- file.path(pkgname, af)\n        lens <- nchar(af, \"b\")\n        if (any(lens > 100L)) {\n            bad_files <- af[lens > 100L]\n            OK <- TRUE\n            if (any(lens > 256L)) OK <- FALSE\n            else { # check if can be splt\n                for (f in bad_files) {\n                    name <- charToRaw(f)\n                    s <- max(which(name[1:155] == charToRaw(\"/\")))\n                    if(is.infinite(s) || s+100 < length(name)) {\n                        OK <- FALSE; break\n                    }\n                }\n                if (!OK) errorLog(Log)\n                else if(!any) {\n                    noteLog(Log)\n                    any <- TRUE\n                }\n            }\n            msg <- ngettext(length(bad_files),\n                            \"Found the following non-portable file path:\\n\",\n                            \"Found the following non-portable file paths:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\\n\")\n            wrapLog(\"Tarballs are only required to store paths of up to 100\",\n                    \"bytes and cannot store those of more than 256 bytes,\",\n                    \"with restrictions including to 100 bytes for the\",\n                    \"final component.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n\t    if (!OK)\n\t\tmaybe_exit(1L)\n        }\n        if (!any) resultLog(Log, \"OK\")\n\n        allfiles\n    }\n\n    check_permissions <- function(allfiles)\n    {\n        checkingLog(Log, \"for sufficient/correct file permissions\")\n\n        ## This used to be much more 'aggressive', requiring that dirs\n        ## and files have mode >= 00755 and 00644, respectively (with\n        ## an error if not), and that files know to be 'text' have\n        ## mode 00644 (with a warning if not).  We now only require\n        ## that dirs and files have mode >= 00700 and 00400,\n        ## respectively, and try to fix insufficient permission in the\n        ## INSTALL code (Unix only).\n        ##\n        ## In addition, we check whether files 'configure' and\n        ## 'cleanup' exists in the top-level directory but are not\n        ## executable, which is most likely not what was intended.\n\n        ## Phase A.  Directories at least 700, files at least 400.\n        bad_files <- character()\n        ##                 allfiles <- dir(\".\", all.files = TRUE,\n        ##                                 full.names = TRUE, recursive = TRUE)\n        ##                 allfiles <- sub(\"^./\", \"\", allfiles)\n        if(length(allfiles)) {\n            mode <- file.mode(allfiles)\n            bad_files <- allfiles[(mode & \"400\") < as.octmode(\"400\")]\n        }\n        if(length(alldirs <- unique(dirname(allfiles)))) {\n            mode <- file.mode(alldirs)\n            bad_files <- c(bad_files,\n                           alldirs[(mode & \"700\") < as.octmode(\"700\")])\n        }\n        if (length(bad_files)) {\n            errorLog(Log)\n            wrapLog(\"Found the following files with insufficient permissions:\\n\")\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n            wrapLog(\"Permissions should be at least 700 for directories and 400 for files.\\nPlease fix permissions and try again.\\n\")\n\t    maybe_exit(1L)\n\t}\n\n        ## Phase B.  Top-level scripts 'configure' and 'cleanup'\n        ## should really be mode at least 500, or they will not be\n        ## necessarily be used (or should we rather change *that*?)\n        bad_files <- character()\n        for (f in c(\"configure\", \"cleanup\")) {\n            if (!file.exists(f)) next\n            mode <- file.mode(f)\n            if ((mode & \"500\") < as.octmode(\"500\"))\n                bad_files <- c(bad_files, f)\n        }\n        if (length(bad_files)) {\n            warningLog(Log)\n            wrapLog(\"The following files should most likely be executable (for the owner):\\n\")\n            printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n            printLog(Log, \"Please fix their permissions\\n\")\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_meta <- function()\n    {\n        ## If we just installed the package (via R CMD INSTALL), we already\n        ## validated most of the package DESCRIPTION metadata.  Otherwise,\n        ## let us be defensive about this ...\n\n        checkingLog(Log, \"DESCRIPTION meta-information\")\n        dfile <- if (is_base_pkg) \"DESCRIPTION.in\" else \"DESCRIPTION\"\n        any <- FALSE\n\n        ## FIXME: this does not need to be run in another process\n        ## but that needs conversion to format().\n        Rcmd <- sprintf(\"tools:::.check_package_description(\\\"%s\\\", TRUE)\",\n                        dfile)\n        out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (length(out)) {\n            if(any(!grepl(\"^Malformed (Title|Description)\", out))) {\n                errorLog(Log)\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n                summaryLog(Log)\n                do_exit(1L)\n            } else {\n                noteLog(Log)\n                any <- TRUE\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n            }\n        }\n        ## Check the encoding.\n        Rcmd <- sprintf(\"tools:::.check_package_description_encoding(\\\"%s\\\")\", dfile)\n        out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (length(out)) {\n            warningLog(Log)\n            any <- TRUE\n            printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n        }\n\n        ## Check the license.\n        ## For base packages, the DESCRIPTION.in files have non-canonical\n        ##   License: Part of R @VERSION@\n        ## entries because these really are a part of R: hence, skip the\n        ## check.\n        check_license <- if (!is_base_pkg) {\n            Check_license <- Sys.getenv(\"_R_CHECK_LICENSE_\", NA)\n            if(is.na(Check_license)) {\n                ## The check code conditionalizes *output* on _R_CHECK_LICENSE_.\n                Sys.setenv('_R_CHECK_LICENSE_' = \"TRUE\")\n                TRUE\n            } else config_val_to_logical(Check_license)\n        } else FALSE\n        if (!identical(check_license, FALSE)) {\n            Rcmd <- sprintf(\"tools:::.check_package_license(\\\"%s\\\", \\\"%s\\\")\",\n                            dfile, pkgdir)\n            ## FIXME: this does not need to be run in another process\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if (check_license == \"maybe\") {\n                    if (!any) warningLog(Log)\n                } else if (any(grepl(\"^(Standardizable: FALSE|Invalid license file pointers:)\",\n                                     out))) {\n                    if (!any) warningLog(Log)\n                } else {\n                    if (!any) noteLog(Log)\n                }\n                any <- TRUE\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n            }\n        }\n\n        ## .check_package_description() only checks Authors@R \"if needed\",\n        ## and does not check for persons with no valid roles.\n        db <- .read_description(dfile)\n        if(!is.na(aar <- db[\"Authors@R\"])) {\n            out <- .check_package_description_authors_at_R_field(aar,\n                                                                 strict = TRUE)\n            if(length(out)) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                out <- .format_check_package_description_authors_at_R_field_results(out)\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n            }\n            ## and there might be stale Authors and Maintainer fields\n            yorig <- db[c(\"Author\", \"Maintainer\")]\n            if(check_incoming &&any(!is.na(yorig))) {\n                enc <- db[\"Encoding\"]\n                aar <- utils:::.read_authors_at_R_field(aar)\n                tmp <- utils:::.format_authors_at_R_field_for_author(aar)\n                ## uses strwrap, so will be in current locale\n                if(!is.na(enc)) tmp <- iconv(tmp, \"\", enc)\n                y <- c(Author = tmp,\n                       Maintainer =\n                       utils:::.format_authors_at_R_field_for_maintainer(aar))\n                ## ignore formatting as far as possible\n                clean_up <- function(x) {\n                    x <- gsub(\"[[:space:]]+\", \" \", x)\n                    x <- sub(\"^[[:space:]]+\", \" \", x)\n                    sub(\"^[[:space:]]+$\", \" \", x)\n                }\n                yorig <- sapply(yorig, clean_up)\n                y <- sapply(y, clean_up)\n                diff <- y != yorig\n                if(any(diff)) {\n                    if(!any) noteLog(Log)\n                    any <- TRUE\n                    if(diff[1L]) {\n                        printLog(Log, \"Author field differs from that derived from Authors@R\", \"\\n\")\n                        printLog(Log, \"  Author:    \", sQuote(yorig[1L]), \"\\n\")\n                        printLog(Log, \"  Authors@R: \", sQuote(y[1L]), \"\\n\")\n                        printLog(Log, \"\\n\")\n                    }\n                    if(diff[2L]) {\n                        printLog(Log, \"Maintainer field differs from that derived from Authors@R\", \"\\n\")\n                        printLog(Log, \"  Maintainer: \", sQuote(yorig[2L]), \"\\n\")\n                        printLog(Log, \"  Authors@R:  \", sQuote(y[2L]), \"\\n\")\n                        printLog(Log, \"\\n\")\n                    }\n                }\n            }\n        }\n\n        if(!is.na(ncomp <- db[\"NeedsCompilation\"])) {\n            if (!ncomp %in% c(\"yes\", \"no\")) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                printLog(Log, \"NeedsCompilation field must take value 'yes' or 'no'\", \"\\n\")\n            }\n        }\n\n\n        out <- format(tools:::.check_package_description2(dfile))\n        if (length(out)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n        }\n\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_build <- function()\n    {\n        ## currently only checks vignettes\n        fv <- file.path(\"build\", \"vignette.rds\")\n        if(!file.exists(fv)) return()\n        checkingLog(Log, \"'build' directory\")\n        any <- FALSE\n        db <- readRDS(fv)\n        ## do as CRAN-pack does\n        keep <- nzchar(db$PDF)\n        if(any(!keep)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- c(\"Vignette(s) without any output listed in 'build/vignette.rds'\",\n                     strwrap(sQuote(db$file[!keep]), indent = 2L, exdent = 2L))\n            printLog0(Log, paste(msg, collapse = \"\\n\"), \"\\n\")\n        }\n        pdfs <- file.path(\"inst\", \"doc\", db[keep, ]$PDF)\n        missing <- !file.exists(pdfs)\n        if(any(missing)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- c(\"Output(s) listed in 'build/vignette.rds' but not in package:\",\n                     strwrap(sQuote(pdfs[missing]), indent = 2L, exdent = 2L))\n            printLog0(Log, paste(msg, collapse = \"\\n\"), \"\\n\")\n        }\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_top_level <- function()\n    {\n        checkingLog(Log, \"top-level files\")\n        topfiles <- Sys.glob(c(\"install.R\", \"R_PROFILE.R\"))\n        any <- FALSE\n        if (length(topfiles)) {\n            any <- TRUE\n            warningLog(Log)\n            printLog0(Log, .format_lines_with_indent(topfiles), \"\\n\")\n            wrapLog(\"These files are defunct.\",\n                    \"See manual 'Writing R Extensions'.\\n\")\n        }\n        ## if README.md is present, it must be able to be processed\n        ## by CRAN to README.html, which is done by pandoc.\n        if (file.exists(\"README.md\") && check_incoming) {\n            if (nzchar(Sys.which(\"pandoc\"))) {\n                rfile <- file.path(tempdir(), \"README.html\")\n                out <- .pandoc_README_md_for_CRAN(\"README.md\", rfile)\n                if(out$status) {\n                    if(!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"Conversion of README.md failed:\\n\",\n                             paste(out$stderr, collapse = \"\\n\"), \"\\n\")\n                }\n            } else {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"File README.md cannot be checked without \",\n                         \"'pandoc' being installed.\\n\")\n            }\n        }\n        topfiles <- Sys.glob(c(\"LICENCE\", \"LICENSE\"))\n        if (length(topfiles)) {\n            ## Are these mentioned in DESCRIPTION?\n            lic <- desc[\"License\"]\n            if(!is.na(lic)) {\n                found <- sapply(topfiles,\n                                function(x) grepl(x, lic, fixed = TRUE))\n                topfiles <- topfiles[!found]\n                if (length(topfiles)) {\n                    if(!any) noteLog(Log)\n                    any <- TRUE\n                    one <- (length(topfiles) == 1L)\n                    msg <- c(if(one) \"File\" else \"Files\",\n                             \"\\n\",\n                             .format_lines_with_indent(topfiles),\n                             \"\\n\",\n                             if(one) {\n                                 \"is not mentioned in the DESCRIPTION file.\\n\"\n                             } else {\n                                 \"are not mentioned in the DESCRIPTION file.\\n\"\n                             })\n                    printLog(Log, msg)\n                }\n            }\n        }\n        topfiles <- Sys.glob(file.path(\"inst\", c(\"LICENCE\", \"LICENSE\")))\n        if (length(topfiles)) {\n            ## Are these mentioned in DESCRIPTION?\n            lic <- desc[\"License\"]\n            if(!is.na(lic)) {\n                found <- sapply(basename(topfiles),\n                                function(x) grepl(x, lic, fixed = TRUE))\n                topfiles <- topfiles[!found]\n                if (length(topfiles)) {\n                    if(!any) noteLog(Log)\n                    any <- TRUE\n                    one <- (length(topfiles) == 1L)\n                    msg <- c(if(one) \"File\" else \"Files\",\n                             \"\\n\",\n                             .format_lines_with_indent(topfiles),\n                             \"\\n\",\n                             if(one) {\n                                 \"will install at top-level and is not mentioned in the DESCRIPTION file.\\n\"\n                             } else {\n                                 \"will install at top-level and are not mentioned in the DESCRIPTION file.\\n\"\n                             })\n                    printLog(Log, msg)\n                }\n            }\n        }\n        if (!is_base_pkg && R_check_toplevel_files) {\n            ## any others?\n            if(is.null(topfiles0)) {\n                topfiles <- dir()\n                ## Now check if any of these were created since we started\n                topfiles <-\n                    topfiles[file.info(topfiles, extra_cols = FALSE)$ctime\n                             <= .unpack.time]\n            } else topfiles <- topfiles0\n            known <- c(\"DESCRIPTION\", \"INDEX\", \"LICENCE\", \"LICENSE\",\n                       \"LICENCE.note\", \"LICENSE.note\",\n                       \"MD5\", \"NAMESPACE\", \"NEWS\", \"PORTING\",\n                       \"COPYING\", \"COPYING.LIB\", \"GPL-2\", \"GPL-3\",\n                       \"BUGS\", \"Bugs\",\n                       \"ChangeLog\", \"Changelog\", \"CHANGELOG\", \"CHANGES\", \"Changes\",\n                       \"INSTALL\", \"README\", \"THANKS\", \"TODO\", \"ToDo\",\n                       \"INSTALL.windows\",\n                       \"README.md\", \"NEWS.md\",\n                       \"configure\", \"configure.win\", \"cleanup\", \"cleanup.win\",\n                       \"configure.ac\", \"configure.in\",\n                       \"datafiles\",\n                       \"R\", \"data\", \"demo\", \"exec\", \"inst\", \"man\",\n                       \"po\", \"src\", \"tests\", \"vignettes\",\n                       \"build\",       # used by R CMD build\n                       \".aspell\",     # used for spell checking packages\n                       \"java\", \"tools\", \"noweb\") # common dirs in packages.\n            topfiles <- setdiff(topfiles, known)\n            if (file.exists(file.path(\"inst\", \"AUTHORS\")))\n                topfiles <- setdiff(topfiles, \"AUTHORS\")\n            if (file.exists(file.path(\"inst\", \"COPYRIGHTS\")))\n                topfiles <- setdiff(topfiles, \"COPYRIGHTS\")\n            if (lt <- length(topfiles)) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                printLog(Log, ## dirs are files, but maybe not on Windows\n                         if(lt > 1L) \"Non-standard files/directories found at top level:\\n\"\n                         else \"Non-standard file/directory found at top level:\\n\" )\n                msg <- strwrap(paste(sQuote(topfiles), collapse = \" \"),\n                               indent = 2L, exdent = 2L)\n                printLog0(Log, paste(c(msg, \"\"), collapse=\"\\n\"))\n                cp <- grep(\"^copyright\", topfiles,\n                           ignore.case = TRUE, value = TRUE)\n                if (length(cp))\n                    printLog(Log, \"Copyright information should be in file inst/COPYRIGHTS\\n\")\n                if(\"AUTHORS\" %in% topfiles)\n                    printLog(Log, \"Authors information should be in file inst/AUTHORS\\n\")\n            }\n        }\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_detritus <- function()\n    {\n        checkingLog(Log, \"for left-over files\")\n        files <- dir(\".\", full.names = TRUE, recursive = TRUE)\n        bad <- grep(\"svn-commit[.].*tmp$\", files, value = TRUE)\n        bad <- c(bad, grep(\"^[.]/[^/]*[.][rR]d$\", files, value = TRUE))\n        if (length(bad)) {\n            bad <- sub(\"^[.]/\", paste0(pkgname, \"/\"), bad)\n            noteLog(Log)\n            printLog0(Log,\n                      \"The following files look like leftovers:\\n\",\n                      paste(strwrap(paste(sQuote(bad), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove them from your package.\\n\")\n        } else resultLog(Log, \"OK\")\n    }\n\n\n    check_indices <- function()\n    {\n        ## Check index information.\n        checkingLog(Log, \"index information\")\n        any <- FALSE\n        if (file.exists(\"INDEX\") &&\n            !length(readLines(\"INDEX\", warn = FALSE))) {\n            any <- TRUE\n            warningLog(Log, \"Empty file 'INDEX'.\")\n        }\n        if (dir.exists(\"demo\")) {\n            index <- file.path(\"demo\", \"00Index\")\n            if (!file.exists(index) ||\n                !length(readLines(index, warn = FALSE))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog0(Log,\n                          sprintf(\"Empty or missing file %s.\\n\",\n                                  sQuote(index)))\n            } else {\n                Rcmd <- \"options(warn=1)\\ntools:::.check_demo_index(\\\"demo\\\")\\n\"\n                ## FIXME: this does not need to be run in another process\n                out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n                if(length(out)) {\n                    if(!any) warningLog(Log)\n                    any <- TRUE\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                }\n            }\n        }\n        if (dir.exists(file.path(\"inst\", \"doc\"))) {\n            Rcmd <- \"options(warn=1)\\ntools:::.check_vignette_index(\\\"inst/doc\\\")\\n\"\n            ## FIXME: this does not need to be run in another process\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if(length(out)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            }\n        }\n        if (any)\n            wrapLog(\"See sections 'The INDEX file' and 'Package subdirectories' in the 'Writing R Extensions' manual.\\n\")\n        else resultLog(Log, \"OK\")\n    }\n\n    check_subdirectories <- function(haveR, subdirs)\n    {\n        checkingLog(Log, \"package subdirectories\")\n        any <- FALSE\n        if (haveR && !length(list_files_with_type(\"R\", \"code\")) &&\n            !file.exists(file.path(\"R\", \"sysdata.rda\"))) {\n            haveR <- FALSE\n            warningLog(Log, \"Found directory 'R' with no source files.\")\n            any <- TRUE\n        }\n        if (R_check_subdirs_nocase) {\n            ## Argh.  We often get submissions where 'R' comes out as 'r',\n            ## or 'man' comes out as 'MAN', and we've just ran into 'DATA'\n            ## instead of 'data' (2007-03-31).  Maybe we should warn about\n            ## this unconditionally ...\n            ## <FIXME>\n            ## Actually, what we should really do is check whether there is\n            ## any directory with lower-cased name matching a lower-cased\n            ## name of a standard directory, while differing in name.\n            ## </FIXME>\n\n            ## Watch out for case-insensitive file systems\n            if (\"./r\" %in% list.dirs(recursive = FALSE)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found subdirectory 'r'.\\n\",\n                         \"Most likely, this should be 'R'.\\n\")\n            }\n            if (\"./MAN\" %in% list.dirs(recursive = FALSE)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found subdirectory 'MAN'.\\n\",\n                         \"Most likely, this should be 'man'.\\n\")\n            }\n            if (\"./DATA\" %in% list.dirs(recursive = FALSE)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found subdirectory 'DATA'.\\n\",\n                         \"Most likely, this should be 'data'.\\n\")\n            }\n        }\n\n        all_dirs <- list.dirs(\".\")\n\n        ## several packages have had check dirs in the sources, e.g.\n        ## ./languageR/languageR.Rcheck\n        ## ./locfdr/man/locfdr.Rcheck\n        ## ./clustvarsel/inst/doc/clustvarsel.Rcheck\n        ## ./bicreduc/OldFiles/bicreduc.Rcheck\n        ## ./waved/man/waved.Rcheck\n        ## ./waved/..Rcheck\n        ind <- grepl(\"\\\\.Rcheck$\", all_dirs)\n        if(any(ind)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- ngettext(sum(ind),\n                            \"Found the following directory with the name of a check directory:\\n\",\n                            \"Found the following directories with names of check directories:\\n\", domain = NA)\n            printLog0(Log, msg,\n                      .format_lines_with_indent(all_dirs[ind]),\n                      \"\\n\",\n                      \"Most likely, these were included erroneously.\\n\")\n        }\n\n        ## Several packages had leftover Rd2dvi build directories in\n        ## their sources\n        ind <- grepl(\"^\\\\.Rd2(dvi|pdf)\", basename(all_dirs))\n        if(any(ind)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            msg <- ngettext(sum(ind),\n                            \"Found the following directory with the name of a Rd2pdf directory:\\n\",\n                            \"Found the following directories with names of Rd2pdf directories:\\n\", domain = NA)\n           printLog0(Log, msg,\n                     .format_lines_with_indent(all_dirs[ind]),\n                     \"\\n\",\n                     \"Most likely, these were included erroneously.\\n\")\n        }\n\n\n        if(!is_base_pkg && (istar || R_check_vc_dirs)) {\n            ## Packages also should not contain version control subdirs\n            ## provided that we check a .tar.gz or know we unpacked one.\n            ind <- basename(all_dirs) %in% .vc_dir_names\n            if(any(ind)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n            msg <- ngettext(sum(ind),\n                            \"Found the following directory with the name of a version control directory:\\n\",\n                            \"Found the following directories with names of version control directories:\\n\", domain = NA)\n                printLog0(Log, msg,\n                          .format_lines_with_indent(all_dirs[ind]),\n                          \"\\n\",\n                          \"These should not be in a package tarball.\\n\")\n            }\n        }\n\n        if (subdirs != \"no\") {\n            Rcmd <- \"tools:::.check_package_subdirs(\\\".\\\")\\n\"\n            ## We don't run this in the C locale, as we only require\n            ## certain filenames to start with ASCII letters/digits, and not\n            ## to be entirely ASCII.\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if(length(out)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"Please remove or rename the files.\\n\",\n                        \"See section 'Package subdirectories'\",\n                        \"in the 'Writing R Extensions' manual.\\n\")\n            }\n        }\n\n        ## Subdirectory 'data' without data sets?\n        if (dir.exists(\"data\") &&\n            !length(list_files_with_type(\"data\", \"data\"))) {\n            if (!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log, \"Subdirectory 'data' contains no data sets.\\n\")\n       }\n        ## Subdirectory 'demo' without demos?\n\n        if (dir.exists(\"demo\")) {\n            demos <- list_files_with_type(\"demo\", \"demo\")\n            if(!length(demos)) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Subdirectory 'demo' contains no demos.\\n\")\n            } else {\n                ## check for non-ASCII code in each demo\n                bad <- character()\n                for(d in demos) {\n                    x <- readLines(d, warn = FALSE)\n                    asc <- iconv(x, \"latin1\", \"ASCII\")\n                    ind <- is.na(asc) | asc != x\n                    if (any(ind)) bad <- c(bad, basename(d))\n                }\n                if (length(bad)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"Demos with non-ASCII characters:\")\n                    if(length(bad) > 1L)\n                        printLog0(Log, \"\\n\",\n                                  .format_lines_with_indent(bad), \"\\n\")\n                    else printLog0(Log, \"  \", bad, \"\\n\")\n                    wrapLog(\"Portable packages must use only ASCII\",\n                            \"characters in their demos.\\n\",\n                            \"Use \\\\uxxxx escapes for other characters.\\n\")\n                    demos <- demos[! basename(demos) %in% bad]\n                }\n                ## check we can parse each demo.\n                bad <- character()\n                for(d in demos)\n                    tryCatch(parse(file = d),\n                             error = function(e) bad <<- c(bad, basename(d)))\n                if (length(bad)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"Demos which do not contain valid R code:\")\n                    if(length(bad) > 1L)\n                        printLog0(Log, \"\\n\",\n                                  .format_lines_with_indent(bad), \"\\n\")\n                    else printLog0(Log, \"  \", bad, \"\\n\")\n               }\n            }\n        }\n\n        ## Subdirectory 'exec' without files?\n        if (dir.exists(\"exec\") && !length(dir(\"exec\"))) {\n            if (!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log, \"Subdirectory 'exec' contains no files.\\n\")\n        }\n\n        ## Subdirectory 'inst' without files?\n        if (dir.exists(\"inst\") && !length(dir(\"inst\", recursive = TRUE))) {\n            if (!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log, \"Subdirectory 'inst' contains no files.\\n\")\n        }\n\n        ## Subdirectory 'src' without sources?\n        if (dir.exists(\"src\")) {\n            ## <NOTE>\n            ## If there is a Makefile (or a Makefile.win), we cannot assume\n            ## that source files have the predefined extensions.\n            ## </NOTE>\n            if (!any(file.exists(file.path(\"src\",\n                                           c(\"Makefile\", \"Makefile.win\",\n                                             \"install.libs.R\"))))) {\n                if (!length(dir(\"src\", pattern = \"\\\\.([cfmM]|cc|cpp|f90|f95|mm)\"))) {\n                    if (!any) warningLog(Log)\n                    printLog(Log, \"Subdirectory 'src' contains no source files.\\n\")\n                    any <- TRUE\n                }\n            }\n        }\n\n        ## Do subdirectories of 'inst' interfere with R package system\n        ## subdirectories?\n        if (dir.exists(\"inst\")) {\n            ## These include pre-2.10.0 ones\n            R_system_subdirs <-\n                c(\"Meta\", \"R\", \"data\", \"demo\", \"exec\", \"libs\",\n                  \"man\", \"help\", \"html\", \"latex\", \"R-ex\", \"build\")\n            allfiles <- dir(\"inst\", full.names = TRUE)\n            alldirs <- allfiles[dir.exists(allfiles)]\n            suspect <- basename(alldirs) %in% R_system_subdirs\n            if (any(suspect)) {\n                ## check they are non-empty\n                suspect <- alldirs[suspect]\n                suspect <- suspect[sapply(suspect, function(x) {\n                    length(dir(x, all.files = TRUE)) > 2L\n                })]\n                if (length(suspect)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    wrapLog(\"Found the following non-empty\",\n                            \"subdirectories of 'inst' also\",\n                            \"used by R:\\n\")\n                    printLog0(Log, .format_lines_with_indent(suspect), \"\\n\")\n                    wrapLog(\"It is recommended not to interfere\",\n                            \"with package subdirectories used by R.\\n\")\n                }\n            }\n        }\n\n        ## Valid NEWS.Rd?\n        nfile <- file.path(\"inst\", \"NEWS.Rd\")\n        if(file.exists(nfile)) {\n            ## Catch all warning and error messages.\n            ## We use the same construction in at least another place,\n            ## so maybe factor out a common utility function\n            ##   .try_catch_all_warnings_and_errors\n            ## eventually.\n            ## For testing package NEWS.Rd files, we really need a real\n            ## QC check function eventually ...\n            .warnings <- NULL\n            .error <- NULL\n            withCallingHandlers(tryCatch(.build_news_db_from_package_NEWS_Rd(nfile),\n                                         error = function(e)\n                                         .error <<- conditionMessage(e)),\n                                warning = function(e) {\n                                    .warnings <<- c(.warnings,\n                                                    conditionMessage(e))\n                                    invokeRestart(\"muffleWarning\")\n                                })\n            msg <- c(.warnings, .error)\n            if(length(msg)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Problems with news in 'inst/NEWS.Rd':\\n\")\n                printLog0(Log,\n                          paste(\"  \",\n                                unlist(strsplit(msg, \"\\n\", fixed = TRUE)),\n                                sep = \"\", collapse = \"\\n\"),\n                          \"\\n\")\n            }\n        }\n\n        ## Valid CITATION metadata?\n        if (file.exists(file.path(\"inst\", \"CITATION\"))) {\n            Rcmd <- if(do_install)\n                sprintf(\"tools:::.check_citation(\\\"inst/CITATION\\\", \\\"%s\\\")\\n\",\n                        file.path(if(is_base_pkg) .Library else libdir,\n                                  pkgname))\n            else\n                \"tools:::.check_citation(\\\"inst/CITATION\\\")\\n\"\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=utils\")\n            if(length(out)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"Invalid citation information in 'inst/CITATION':\\n\")\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            }\n        }\n\n        ## CITATION files in non-standard places?\n        ## Common problems: rather than inst/CITATION, have\n        ##   CITATION\n        ##   CITATION.txt\n        ##   inst/doc/CITATION\n        ## Of course, everything in inst is justifiable, so only give a\n        ## note for now.\n        files <- dir(\".\", pattern = \"^CITATION.*\", recursive = TRUE)\n        files <- files[file_path_sans_ext(basename(files)) == \"CITATION\" &\n                       files != file.path(\"inst\", \"CITATION\")]\n        if(length(files)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            msg <- ngettext(length(files),\n                            \"Found the following CITATION file in a non-standard place:\\n\",\n                            \"Found the following CITATION files in a non-standard place:\\n\", domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(files), \"\\n\")\n            wrapLog(\"Most likely 'inst/CITATION' should be used instead.\\n\")\n        }\n\n        if(!any) resultLog(Log, \"OK\")\n    }\n\n    check_non_ASCII <- function()\n    {\n        checkingLog(Log, \"R files for non-ASCII characters\")\n        out <- R_runR(\"tools:::.check_package_ASCII_code('.')\",\n                      R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (length(out)) {\n            warningLog(Log)\n            msg <- ngettext(length(out),\n                            \"Found the following file with non-ASCII characters:\\n\",\n                            \"Found the following files with non-ASCII characters:\\n\",\n                            domain = NA)\n            wrapLog(msg)\n            printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            wrapLog(\"Portable packages must use only ASCII\",\n                    \"characters in their R code,\\n\",\n                    \"except perhaps in comments.\\n\",\n                    \"Use \\\\uxxxx escapes for other characters.\\n\")\n        } else resultLog(Log, \"OK\")\n\n        checkingLog(Log, \"R files for syntax errors\")\n        Rcmd  <- \"options(warn=1);tools:::.check_package_code_syntax(\\\"R\\\")\"\n        out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if (any(grepl(\"^Error\", out))) {\n            errorLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n\t    maybe_exit(1L)\n        } else if (length(out)) {\n            warningLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_R_code <- function()\n    {\n        if (!is_base_pkg) {\n            checkingLog(Log, \"dependencies in R code\")\n            if (do_install) {\n                Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                              sprintf(\"tools:::.check_packages_used(package = \\\"%s\\\")\\n\", pkgname))\n\n                out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n                if (length(out)) {\n                    if(any(grepl(\"(not declared from|Including base/recommended)\", out))) warningLog(Log)\n                    else noteLog(Log)\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    ## wrapLog(msg_DESCRIPTION)\n                } else resultLog(Log, \"OK\")\n            } else {\n                ## this needs to read the package code, and will fail on\n                ## syntax errors such as non-ASCII code.\n                Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                              sprintf(\"tools:::.check_packages_used(dir = \\\"%s\\\")\\n\", pkgdir))\n\n                out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n                if (length(out)) {\n                    if(any(grepl(\"not declared from\", out))) warningLog(Log)\n                    else noteLog(Log)\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    ## wrapLog(msg_DESCRIPTION)\n                } else resultLog(Log, \"OK\")\n            }\n        }\n\n        ## Check whether methods have all arguments of the corresponding\n        ## generic.\n        checkingLog(Log, \"S3 generic/method consistency\")\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      \"options(expressions=1000)\\n\",\n                      if (do_install)\n                      sprintf(\"tools::checkS3methods(package = \\\"%s\\\")\\n\", pkgname)\n                      else\n                      sprintf(\"tools::checkS3methods(dir = \\\"%s\\\")\\n\", pkgdir))\n        out <- R_runR2(Rcmd)\n        if (length(out)) {\n            pos <- grep(\"^Found the following apparent S3 methods\", out)\n            if(!length(pos)) {\n                out1 <- out\n                out2 <- character()\n            } else {\n                pos <- pos[1L]\n                out1 <- out[seq_len(pos - 1L)]\n                out2 <- out[seq.int(pos, length(out))]\n            }\n            if(length(out1)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out1, \"\"), collapse = \"\\n\"))\n                wrapLog(\"See section 'Generic functions and methods'\",\n                        \"in the 'Writing R Extensions' manual.\\n\")\n            } else\n                noteLog(Log)\n            if(length(out2)) {\n                printLog0(Log,\n                          paste(c(if(length(out1)) \"\", out2, \"\"),\n                                collapse = \"\\n\"))\n                wrapLog(\"See section 'Registering S3 methods'\",\n                        \"in the 'Writing R Extensions' manual.\\n\")\n            }\n        } else resultLog(Log, \"OK\")\n\n        ## Check whether replacement functions have their final argument\n        ## named 'value'.\n        checkingLog(Log, \"replacement functions\")\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      if (do_install)\n                      sprintf(\"tools::checkReplaceFuns(package = \\\"%s\\\")\\n\", pkgname)\n                      else\n                      sprintf(\"tools::checkReplaceFuns(dir = \\\"%s\\\")\\n\", pkgdir))\n        out <- R_runR2(Rcmd)\n        if (length(out)) {\n            ## <NOTE>\n            ## We really want to stop if we find offending replacement\n            ## functions.  But we cannot use error() because output may\n            ## contain warnings ...\n            warningLog(Log)\n            ## </NOTE>\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            wrapLog(\"The argument of a replacement function\",\n                    \"which corresponds to the right hand side\",\n                    \"must be named 'value'.\\n\")\n        } else resultLog(Log, \"OK\")\n\n        ## Check foreign function calls.\n        ## The neverending story ...\n        ## For the time being, allow to turn this off by setting the environment\n        ## variable _R_CHECK_FF_CALLS_ to an empty value.\n        if (nzchar(R_check_FF)) {\n            registration <-\n                identical(R_check_FF, \"registration\") && install != \"fake\"\n            checkingLog(Log, \"foreign function calls\")\n            DUP <- R_check_FF_DUP\n            if(as_cran) {\n                Sys.setenv(\"_R_CHECK_FF_AS_CRAN_\" = \"TRUE\")\n                DUP <- TRUE\n            }\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools::checkFF(package = \\\"%s\\\", registration = %s, check_DUP = %s)\\n\",\n                                  pkgname, registration, DUP)\n                          else\n                          sprintf(\"tools::checkFF(dir = \\\"%s\\\", registration = %s, check_DUP = %s)\\n\",\n                                  pkgdir, \"FALSE\", DUP))\n            out <- R_runR2(Rcmd)\n            Sys.unsetenv(\"_R_CHECK_FF_AS_CRAN_\")\n            if (length(out)) {\n                if(any(grepl(\"^Foreign function calls? with(out| empty)\", out)) ||\n                   (!is_base_pkg && any(grepl(\"to a base package:\", out))) ||\n                   any(grepl(\"^Undeclared packages? in\", out)) ||\n                   any(grepl(\"parameter[s]*, expected \", out))\n                   ) warningLog(Log)\n                else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                if(!is_base_pkg && any(grepl(\"to a base package:\", out)))\n                    wrapLog(\"Packages should not make\",\n                            \".C/.Call/.External/.Fortran\",\n                            \"calls to a base package.\",\n                            \"They are not part of the API,\",\n                            \"for use only by R itself\",\n                            \"and subject to change without notice.\")\n                else if(any(grepl(\"with DUP:\", out)))\n                    wrapLog(\"DUP is no longer supported and will be ignored.\")\n                else\n                    wrapLog(\"See chapter 'System and foreign language interfaces' in the 'Writing R Extensions' manual.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n    }\n\n    check_R_files <- function(is_rec_pkg)\n    {\n        checkingLog(Log, \"R code for possible problems\")\n        if (!is_base_pkg) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_shlib(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                errorLog(Log)\n                wrapLog(\"Incorrect (un)loading of package\",\n                        \"shared object.\\n\")\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"The system-specific extension for\",\n                        \"shared objects must not be added.\\n\",\n                        \"See ?library.dynam.\\n\")\n\t\tmaybe_exit(1L)\n            }\n        }\n\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::.check_package_code_startup_functions(dir = \\\"%s\\\")\\n\",\n                              pkgdir))\n        out1 <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::.check_package_code_unload_functions(dir = \\\"%s\\\")\\n\",\n                              pkgdir))\n        out1a <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        out1 <- if (length(out1) && length(out1a)) c(out1, \"\", out1a)\n                else c(out1, out1a)\n\n        out2 <- out3 <- out4 <- out5 <- out6 <- out7 <- out8 <- NULL\n\n        if (!is_base_pkg && R_check_unsafe_calls) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_tampers(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out2 <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        }\n\n        if (R_check_use_codetools && do_install) {\n            Rcmd <-\n                paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::.check_code_usage_in_package(package = \\\"%s\\\")\\n\", pkgname))\n            out3 <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=\")\n        }\n\n        if(!is_base_pkg && R_check_use_codetools && R_check_dot_internal) {\n            details <- pkgname != \"relax\" # has .Internal in a 10,000 line fun\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                              sprintf(\"tools:::.check_dotInternal(package = \\\"%s\\\",details=%s)\\n\", pkgname, details)\n                          else\n                              sprintf(\"tools:::.check_dotInternal(dir = \\\"%s\\\",details=%s)\\n\", pkgdir, details))\n            out4 <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=\")\n            ## Hmisc, gooJSON, quantmod give spurious output\n            if (!any(grepl(\"^Found.* .Internal call\", out4))) out4 <- NULL\n        }\n\n        if(!is_base_pkg && R_check_code_assign_to_globalenv) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_assign_to_globalenv(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out5 <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        }\n\n        if(!is_base_pkg && R_check_code_attach) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_attach(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out6 <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        }\n        if(!is_base_pkg && R_check_code_data_into_globalenv) {\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_code_data_into_globalenv(dir = \\\"%s\\\")\\n\",\n                                  pkgdir))\n            out7 <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=\")\n        }\n\n\n        ## Use of deprecated, defunct and platform-specific devices?\n        if(!is_base_pkg && R_check_use_codetools && R_check_depr_def) {\n            win <- !is.na(OS_type) && OS_type == \"windows\"\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                              sprintf(\"tools:::.check_depdef(package = \\\"%s\\\", WINDOWS = %s)\\n\", pkgname, win)\n                          else\n                              sprintf(\"tools:::.check_depdef(dir = \\\"%s\\\", WINDOWS = %s)\\n\", pkgdir, win))\n            out8 <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=\")\n        }\n\n        if (length(out1) || length(out2) || length(out3) ||\n            length(out4) || length(out5) || length(out6) ||\n            length(out7) || length(out8)) {\n            ini <- character()\n            if(length(out4) ||\n               length(grep(\"^Found the defunct/removed function\", out8)))\n                warningLog(Log) else noteLog(Log)\n            if (length(out4)) {\n                first <- grep(\"^Found.* .Internal call\", out4)[1L]\n                if(first > 1L) out4 <- out4[-seq_len(first-1)]\n                printLog0(Log, paste(c(ini, out4, \"\", \"\"), collapse = \"\\n\"))\n                wrapLog(c(\"Packages should not call .Internal():\",\n                          \"it is not part of the API,\",\n                          \"for use only by R itself\",\n                          \"and subject to change without notice.\"))\n                ini <- \"\"\n            }\n            if (length(out8)) {\n                printLog0(Log, paste(c(ini, out8, \"\"), collapse = \"\\n\"))\n                if(length(grep(\"^Found the defunct/removed function\", out8)))\n                    ini <- \"\"\n            }\n            ## All remaining checks give notes and not warnings.\n            if(length(ini))\n                ini <- c(\"\",\n                         \"In addition to the above warning(s), found the following notes:\",\n                         \"\")\n\n            if (length(out1)) {\n                printLog0(Log, paste(c(ini, out1, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out2)) {\n                printLog0(Log,\n                          paste(c(ini,\n                                  \"Found the following possibly unsafe calls:\",\n                                  out2, \"\"),\n                                collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out3)) {\n                printLog0(Log, paste(c(ini, out3, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out5)) {\n                printLog0(Log, paste(c(ini, out5, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            if (length(out6)) {\n                printLog0(Log, paste(c(ini, out6, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n                wrapLog(gettextf(\"See section %s in '%s'.\",\n                                 sQuote(\"Good practice\"), \"?attach\"))\n           }\n            if (length(out7)) {\n                printLog0(Log, paste(c(ini, out7, \"\"), collapse = \"\\n\"))\n                ini <- \"\"\n                wrapLog(gettextf(\"See section %s in '%s'.\",\n                                 sQuote(\"Good practice\"), \"?data\"))\n            }\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_Rd_files <- function(haveR)\n    {\n        msg_writing_Rd <-\n            c(\"See chapter 'Writing R documentation files' in the 'Writing R Extensions' manual.\\n\")\n\n        if (dir.exists(\"man\") && !extra_arch) {\n            checkingLog(Log, \"Rd files\")\n            minlevel <- Sys.getenv(\"_R_CHECK_RD_CHECKRD_MINLEVEL_\", \"-1\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          sprintf(\"tools:::.check_package_parseRd('.', minlevel=%s)\\n\", minlevel))\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if(length(grep(\"^prepare.*Dropping empty section\", out,\n                               invert = TRUE)))\n                    warningLog(Log)\n                else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n\n            checkingLog(Log, \"Rd metadata\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools:::.check_Rd_metadata(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools:::.check_Rd_metadata(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check Rd line widths.\n        if(dir.exists(\"man\") && R_check_Rd_line_widths) {\n            checkingLog(Log, \"Rd line widths\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if(do_install)\n                          sprintf(\"tools:::.check_Rd_line_widths(\\\"%s\\\", installed = TRUE)\\n\",\n                                  file.path(if(is_base_pkg) .Library else libdir,\n                                            pkgname))\n                          else\n                          sprintf(\"tools:::.check_Rd_line_widths(\\\"%s\\\")\\n\",\n                                  pkgdir))\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if(length(out)) {\n                noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"These lines will be truncated in the PDF manual.\\n\")\n\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check cross-references in R documentation files.\n\n        ## <NOTE>\n        ## Installing a package warns about missing links (and hence R CMD\n        ## check knows about this too provided an install log is used).\n        ## However, under Windows the install-time check verifies the links\n        ## against what is available in the default library, which might be\n        ## considerably more than what can be assumed to be available.\n        ##\n        ## The formulations in section \"Cross-references\" of R-exts are not\n        ## quite clear about this, but CRAN policy has for a long time\n        ## enforced anchoring links to targets (aliases) from non-base\n        ## packages.\n        ## </NOTE>\n\n        if (dir.exists(\"man\") && R_check_Rd_xrefs) {\n            checkingLog(Log, \"Rd cross-references\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools:::.check_Rd_xrefs(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools:::.check_Rd_xrefs(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if (!all(grepl(\"Package[s]? unavailable to check\", out)))\n                    warningLog(Log)\n                else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for missing documentation entries.\n        if (!extra_arch && (haveR || dir.exists(\"data\"))) {\n            checkingLog(Log, \"for missing documentation entries\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools::undoc(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools::undoc(dir = \\\"%s\\\")\\n\", pkgdir))\n            ## This is needed to pick up undocumented S4 classes.\n            ## even for packages which only import methods.\n            ## But as that check needs to run get() on all the lazy-loaded\n            ## promises, avoid if possible.\n            ## desc exists in the body of this function.\n            use_methods <- if(pkgname == \"methods\") TRUE else {\n                pi <- .split_description(desc)\n                \"methods\" %in% c(names(pi$Depends), names(pi$Imports))\n            }\n            out <- if (use_methods) {\n                env <- if(WINDOWS) \"R_DEFAULT_PACKAGES=utils,grDevices,graphics,stats,methods\" else \"R_DEFAULT_PACKAGES='utils,grDevices,graphics,stats,methods'\"\n                R_runR2(Rcmd, env = env)\n            } else R_runR2(Rcmd)\n            ## Grr, get() in undoc can change the search path\n            ## Current example is TeachingDemos\n            out <- grep(\"^Loading required package:\", out,\n                        invert = TRUE, value = TRUE)\n            err <- grep(\"^Error\", out)\n            if (length(err)) {\n                errorLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n\t\tmaybe_exit(1L)\n            } else if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"All user-level objects\",\n                        \"in a package\",\n                        if (any(grepl(\"^Undocumented S4\", out)))\n                        \"(including S4 classes and methods)\",\n                        \"should have documentation entries.\\n\")\n                wrapLog(msg_writing_Rd)\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for code/documentation mismatches.\n        if (dir.exists(\"man\") && !extra_arch) {\n            checkingLog(Log, \"for code/documentation mismatches\")\n            if (!do_codoc) resultLog(Log, \"SKIPPED\")\n            else {\n                any <- FALSE\n                ## Check for code/documentation mismatches in functions.\n                if (haveR) {\n                    Rcmd <- paste(\"options(warn=1)\\n\",\n                                  if (do_install)\n                                  sprintf(\"tools::codoc(package = \\\"%s\\\")\\n\", pkgname)\n                                  else\n                                  sprintf(\"tools::codoc(dir = \\\"%s\\\")\\n\", pkgdir))\n                    out <- R_runR2(Rcmd)\n                    if (length(out)) {\n                        any <- TRUE\n                        warningLog(Log)\n                        printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    }\n                }\n\n                ## Check for code/documentation mismatches in data sets.\n                if (do_install) {\n                    Rcmd <- paste(\"options(warn=1)\\n\",\n                                  sprintf(\"tools::codocData(package = \\\"%s\\\")\\n\", pkgname))\n                    out <- R_runR2(Rcmd)\n                    if (length(out)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    }\n                }\n\n                ## Check for code/documentation mismatches in S4 classes.\n                if (do_install && haveR) {\n                    Rcmd <- paste(\"options(warn=1)\\n\",\n                                  sprintf(\"tools::codocClasses(package = \\\"%s\\\")\\n\", pkgname))\n                    out <- R_runR2(Rcmd)\n                    if (length(out)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    }\n                }\n\n                if (!any) resultLog(Log, \"OK\")\n            }\n        }\n\n        ## Check Rd files, for consistency of \\usage with \\arguments (are\n        ## all arguments shown in \\usage documented in \\arguments?) and\n        ## aliases (do all functions shown in \\usage have an alias?)\n        if (dir.exists(\"man\") && !extra_arch) {\n            checkingLog(Log, \"Rd \\\\usage sections\")\n\n            msg_doc_files <-\n                c(\"Functions with \\\\usage entries\",\n                  \"need to have the appropriate \\\\alias entries,\",\n                  \"and all their arguments documented.\\n\",\n                  \"The \\\\usage entries must correspond to syntactically\",\n                  \"valid R code.\\n\")\n            any <- FALSE\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools::checkDocFiles(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools::checkDocFiles(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR2(Rcmd)\n            if (length(out)) {\n                any <- TRUE\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(msg_doc_files)\n                wrapLog(msg_writing_Rd)\n            }\n\n            if (R_check_Rd_style && haveR) {\n                msg_doc_style <-\n                    c(\"The \\\\usage entries for S3 methods should use\",\n                      \"the \\\\method markup and not their full name.\\n\")\n\n                Rcmd <- paste(\"options(warn=1)\\n\",\n                              if (do_install)\n                              sprintf(\"tools::checkDocStyle(package = \\\"%s\\\")\\n\", pkgname)\n                              else\n                              sprintf(\"tools::checkDocStyle(dir = \\\"%s\\\")\\n\", pkgdir))\n                out <- R_runR2(Rcmd)\n                if (length(out)) {\n                    if (!any) noteLog(Log)\n                    any <- TRUE\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                    wrapLog(msg_doc_style)\n                    wrapLog(msg_writing_Rd)\n                }\n            }\n\n            if (!any) resultLog(Log, \"OK\")\n        }\n\n        ## Check Rd contents\n        if (dir.exists(\"man\") && R_check_Rd_contents && !extra_arch) {\n            checkingLog(Log, \"Rd contents\")\n            Rcmd <- paste(\"options(warn=1)\\n\",\n                          if (do_install)\n                          sprintf(\"tools:::.check_Rd_contents(package = \\\"%s\\\")\\n\", pkgname)\n                          else\n                          sprintf(\"tools:::.check_Rd_contents(dir = \\\"%s\\\")\\n\", pkgdir))\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check undeclared dependencies in examples (if any)\n        if (dir.exists(\"man\") && do_install && !extra_arch && !is_base_pkg) {\n            checkingLog(Log, \"for unstated dependencies in examples\")\n            Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                          sprintf(\"tools:::.check_packages_used_in_examples(package = \\\"%s\\\")\\n\", pkgname))\n\n            out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                # wrapLog(msg_DESCRIPTION)\n            } else resultLog(Log, \"OK\")\n        } ## FIXME, what if no install?\n    }\n\n    check_data <- function()\n    {\n        ## Check contents of 'data'\n        if (!is_base_pkg && dir.exists(\"data\")) {\n            checkingLog(Log, \"contents of 'data' directory\")\n            fi <- list.files(\"data\")\n            if (!any(grepl(\"\\\\.[Rr]$\", fi))) { # code files can do anything\n                dataFiles <- basename(list_files_with_type(\"data\", \"data\"))\n                odd <- fi[! fi %in% c(dataFiles, \"datalist\")]\n                if (length(odd)) {\n                    warningLog(Log)\n                    msg <-\n                        c(sprintf(\"Files not of a type allowed in a %s directory:\\n\",\n                                  sQuote(\"data\")),\n                          paste0(.pretty_format(odd), \"\\n\"),\n                          sprintf(\"Please use e.g. %s for non-R data files\\n\",\n                                  sQuote(\"inst/extdata\")))\n                    printLog0(Log, msg)\n                } else resultLog(Log, \"OK\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for non-ASCII characters in 'data'\n        if (!is_base_pkg && R_check_ascii_data && dir.exists(\"data\")) {\n            checkingLog(Log, \"data for non-ASCII characters\")\n            out <- R_runR(\"tools:::.check_package_datasets('.')\", R_opts2)\n            out <- grep(\"Loading required package\", out,\n                        invert = TRUE, value = TRUE)\n            out <- grep(\"Warning: changing locked binding\", out,\n                        invert = TRUE, value = TRUE, fixed = TRUE)\n           if (length(out)) {\n                bad <- grep(\"^Warning:\", out)\n                if (length(bad)) warningLog(Log) else noteLog(Log)\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for ASCII and uncompressed/unoptimized saves in 'data'\n        if (!is_base_pkg && R_check_compact_data && dir.exists(\"data\")) {\n            checkingLog(Log, \"data for ASCII and uncompressed saves\")\n            out <- R_runR(\"tools:::.check_package_compact_datasets('.', TRUE)\",\n                          R_opts2)\n            out <- grep(\"Warning: changing locked binding\", out,\n                        invert = TRUE, value = TRUE, fixed = TRUE)\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check for ASCII and uncompressed/unoptimized saves in 'sysdata':\n        ## no base package has this\n        if (R_check_compact_data && file.exists(file.path(\"R\", \"sysdata.rda\"))) {\n            checkingLog(Log, \"R/sysdata.rda\")\n            out <- R_runR(\"tools:::.check_package_compact_sysdata('.', TRUE)\",\n                          R_opts2)\n            if (length(out)) {\n                bad <- grep(\"^Warning:\", out)\n                if (length(bad)) warningLog(Log) else noteLog(Log)\n                printLog0(Log, .format_lines_with_indent(out), \"\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n   }\n\n    check_doc_contents <- function()\n    {\n        ## Have already checked that inst/doc exists\n        doc_dir <- file.path(libdir, pkgname, \"doc\")\n        if (!dir.exists(doc_dir)) return()\n        checkingLog(Log, \"installed files from 'inst/doc'\")\n        ## special case common problems.\n        any <- FALSE\n        files <- dir(file.path(pkgdir, \"inst\", \"doc\"))\n        already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")\n        bad <- files[files %in% already]\n        if (length(bad)) {\n            noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files are already in R: \",\n                      paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please remove them from your package.\\n\")\n        }\n        files2 <- dir(file.path(pkgdir, \"inst\", \"doc\"), recursive = TRUE,\n                     pattern = \"[.](cls|sty|drv)$\", full.names = TRUE)\n        ## Skip Rnews.sty and RJournal.sty for now\n        files2 <- files2[! basename(files2) %in%\n                       c(\"jss.cls\", \"jss.drv\", \"Rnews.sty\", \"RJournal.sty\")]\n        bad <- character()\n        for(f in files2) {\n            pat <- \"%% (This generated file may be distributed as long as the|original source files, as listed above, are part of the|same distribution.)\"\n            if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))\n               == 3L) bad <- c(bad, basename(f))\n        }\n        if (length(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files contain a license that requires\\n\",\n                      \"distribution of original sources:\\n\",\n                      \"  \", paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please ensure that you have complied with it.\\n\")\n        }\n\n        ## Now look for TeX leftovers (and soiltexture, Amelia ...).\n        bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",\n                     files, ignore.case = TRUE)\n        if (any(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files look like leftovers/mistakes:\\n\",\n                      paste(strwrap(paste(sQuote(files[bad]), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove them from your package.\\n\")\n        }\n\n        files <- dir(doc_dir)\n        files <- files[! files %in% already]\n        bad <- grepl(\"[.](tex|lyx|png|jpg|jpeg|gif|ico|bst|cls|sty|ps|eps|img)$\",\n                     files, ignore.case = TRUE)\n        bad <- bad | grepl(\"(Makefile|~$)\", files)\n        ## How about any pdf files which look like figures files from vignettes?\n        vigns <- pkgVignettes(dir = pkgdir)\n        if (!is.null(vigns) && length(vigns$docs)) {\n            vf <- vigns$names\n            pat <- paste(vf, collapse=\"|\")\n            pat <- paste0(\"^(\", pat, \")-[0-9]+[.]pdf\")\n            bad <- bad | grepl(pat, files)\n        }\n        bad <- bad | grepl(\"^fig.*[.]pdf$\", files)\n        badf <- files[bad]\n        dirs <- basename(list.dirs(doc_dir, recursive = FALSE))\n        badd <- dirs[dirs %in% c(\"auto\", \"Bilder\", \"fig\", \"figs\", \"figures\",\n                                 \"Figures\", \"img\", \"images\", \"JSSstyle\",\n                                 \"jssStyle\", \"screenshots2\", \"src\", \"tex\", \"tmp\")]\n        if (length(c(badf, badd))) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            if(length(badf))\n                printLog0(Log,\n                          \"The following files should probably not be installed:\\n\",\n                          paste(strwrap(paste(sQuote(badf), collapse = \", \"),\n                                        indent = 2, exdent = 2), collapse = \"\\n\"),\n                          \"\\n\")\n            if(length(badd))\n                printLog0(Log,\n                          \"The following directories should probably not be installed:\\n\",\n                          paste(strwrap(paste(sQuote(badd), collapse = \", \"),\n                                        indent = 2, exdent = 2), collapse = \"\\n\"),\n                          \"\\n\")\n            printLog0(Log, \"\\nConsider the use of a .Rinstignore file: see \",\n                      sQuote(\"Writing R Extensions\"), \",\\n\",\n                      \"or move the vignette sources from \",\n                      sQuote(\"inst/doc\"), \" to \", sQuote(\"vignettes\"), \".\\n\")\n        }\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_vign_contents <- function()\n    {\n        checkingLog(Log, \"files in 'vignettes'\")\n        ## special case common problems.\n        any <- FALSE\n        pattern <- vignetteEngine(\"Sweave\")$pattern\n        vign_dir <- file.path(pkgdir, \"vignettes\")\n        sources <- setdiff(list.files(file.path(pkgdir, \"inst\", \"doc\"),\n                                      pattern = pattern),\n                           list.files(vign_dir, pattern = pattern))\n        if(length(sources)) {\n            warningLog(Log)\n            any <- TRUE\n            msg <- c(\"Vignette sources in 'inst/doc' missing from the 'vignettes' directory:\",\n                    strwrap(paste(sQuote(sources), collapse = \", \"),\n                            indent = 2L, exdent = 4L),\n                     \"\")\n            printLog0(Log, paste(msg, collapse = \"\\n\"))\n        }\n\n        files <- dir(file.path(pkgdir, \"vignettes\"))\n        already <- c(\"jss.cls\", \"jss.bst\", \"Rd.sty\", \"Sweave.sty\")\n        bad <- files[files %in% already]\n        if (length(bad)) {\n            noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files are already in R: \",\n                      paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please remove them from your package.\\n\")\n        }\n        files2 <- dir(file.path(pkgdir, \"vignettes\"), recursive = TRUE,\n                     pattern = \"[.](cls|sty|drv)$\", full.names = TRUE)\n        files2 <- files2[! basename(files2) %in%\n                       c(\"jss.cls\", \"jss.drv\", \"Rnews.sty\", \"RJournal.sty\")]\n        bad <- character()\n        for(f in files2) {\n            pat <- \"%% (This generated file may be distributed as long as the|original source files, as listed above, are part of the|same distribution.)\"\n            if(length(grep(pat, readLines(f, warn = FALSE), useBytes = TRUE))\n               == 3L) bad <- c(bad, basename(f))\n        }\n        if (length(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files contain a license that requires\\n\",\n                      \"distribution of original sources:\\n\",\n                      \"  \", paste(sQuote(bad), collapse = \", \"), \"\\n\",\n                      \"Please ensure that you have complied with it.\\n\")\n        }\n\n        ## Now look for TeX leftovers (and soiltexture, Amelia ...).\n        bad <- grepl(\"[.](log|aux|bbl|blg|dvi|toc|out|Rd|Rout|dbj|drv|ins)$\",\n                     files, ignore.case = TRUE)\n        bad <- bad | (files %in% c(\"Rplots.ps\", \"Rplots.pdf\"))\n        if (any(bad)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      \"The following files look like leftovers/mistakes:\\n\",\n                      paste(strwrap(paste(sQuote(files[bad]), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove them from your package.\\n\")\n        }\n\n        ## Probable leftovers from knitr\n        dirs <- file.path(pkgdir, \"vignettes\", c(\"cache\", \"figure\"))\n        dirs <- basename(dirs[dir.exists(dirs)])\n        if(length(dirs)) {\n            if(!any) noteLog(Log)\n            any <- TRUE\n            printLog0(Log,\n                      if(length(dirs)> 1L) \"The following directories look like leftovers from 'knitr':\\n\"\n                      else \"The following directory looks like a leftover from 'knitr':\\n\",\n                      paste(strwrap(paste(sQuote(dirs), collapse = \", \"),\n                                    indent = 2, exdent = 2), collapse = \"\\n\"),\n                      \"\\nPlease remove from your package.\\n\")\n        }\n\n        if (!any) resultLog(Log, \"OK\")\n    }\n\n    check_doc_size <- function()\n    {\n        ## Have already checked that inst/doc exists and qpdf can be found\n        pdfs <- dir('inst/doc', pattern=\"\\\\.pdf\",\n                    recursive = TRUE, full.names = TRUE)\n        pdfs <- setdiff(pdfs, \"inst/doc/Rplots.pdf\")\n        if (length(pdfs)) {\n            checkingLog(Log, \"sizes of PDF files under 'inst/doc'\")\n            any <- FALSE\n            td <- tempfile('pdf')\n            dir.create(td)\n            file.copy(pdfs, td)\n            res <- compactPDF(td, gs_quality = \"none\") # use qpdf\n            res <- format(res, diff = 1e5)\n            if(length(res)) {\n                noteLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"  'qpdf' made some significant size reductions:\\n\",\n                         paste(\"  \", res, collapse = \"\\n\"),\n                         \"\\n\",\n                         \"  consider running tools::compactPDF() on these files\\n\")\n            }\n            if (R_check_doc_sizes2) {\n                gs_cmd <- find_gs_cmd()\n                if (nzchar(gs_cmd)) {\n                    res <- compactPDF(td, gs_cmd = gs_cmd, gs_quality = \"ebook\")\n                    res <- format(res, diff = 2.56e5) # 250 KB for now\n                    if(length(res)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        printLog(Log,\n                                 \"  'gs+qpdf' made some significant size reductions:\\n\",\n                                 paste(\"  \", res, collapse = \"\\n\"),\n                                 \"\\n\",\n                                 '  consider running tools::compactPDF(gs_quality = \"ebook\") on these files\\n')\n                    }\n                } else {\n                    if (!any) noteLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"Unable to find GhostScript executable to run checks on size reduction\\n\")\n                }\n\n            }\n            if (!any) resultLog(Log, \"OK\")\n        }\n    }\n\n    check_src_dir <- function(desc)\n    {\n        ## Check C/C++/Fortran sources/headers for CRLF line endings.\n        ## <FIXME>\n        ## Does ISO C really require LF line endings?  (Reference?)\n        ## We know that some versions of Solaris cc and f77/f95\n        ## will not accept CRLF or CR line endings.\n        ## (Sun Studio 12 definitely objects to CR in both C and Fortran).\n        ## </FIXME>\n        if(dir.exists(\"src\")) {\n            checkingLog(Log, \"line endings in C/C++/Fortran sources/headers\")\n            ## pattern is \"([cfh]|cc|cpp)\"\n            files <- dir(\"src\", pattern = \"\\\\.([cfh]|cc|cpp)$\",\n                         full.names = TRUE, recursive = TRUE)\n            ## exclude dirs starting src/win, e.g for tiff\n            files <- grep(\"^src/[Ww]in\", files, invert = TRUE, value = TRUE)\n            bad_files <- character()\n            for(f in files) {\n                contents <- readChar(f, file.size(f), useBytes = TRUE)\n                if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))\n                    bad_files <- c(bad_files, f)\n            }\n            if (length(bad_files)) {\n                warningLog(Log, \"Found the following sources/headers with CR or CRLF line endings:\")\n                printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n                printLog(Log, \"Some Unix compilers require LF line endings.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## Check src/Make* for LF line endings, as Sun make does not accept CRLF\n        ## .win files are not checked, as CR/CRLF work there\n        all_files <-\n            dir(\"src\",\n                pattern = \"^(Makevars|Makevars.in|Makefile|Makefile.in)$\",\n                full.names = TRUE, recursive = TRUE)\n        all_files <- c(all_files,\n                       dir(\".\", pattern = \"^Makefile$\",\n                           full.names = TRUE, recursive = TRUE))\n        all_files <- sub(\"^[.]/\", \"\", all_files)\n        all_files <- unique(sort(all_files))\n        if(length(all_files)) {\n            checkingLog(Log, \"line endings in Makefiles\")\n            bad_files <- noEOL<- character()\n            for(f in all_files) {\n                if (!file.exists(f)) next\n                contents <- readChar(f, file.size(f), useBytes = TRUE)\n                if (grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))\n                    bad_files <- c(bad_files, f)\n                if (!grepl(\"\\n$\", contents, useBytes = TRUE))\n                    noEOL <- c(noEOL, f)\n            }\n            if (length(bad_files)) {\n                warningLog(Log, \"Found the following Makefile(s) with CR or CRLF line endings:\")\n                printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n                printLog(Log, \"Some Unix 'make' programs require LF line endings.\\n\")\n            } else if (length(noEOL)) {\n                noteLog(Log, \"Found the following Makefile(s) without a final LF:\")\n                printLog0(Log, .format_lines_with_indent(noEOL), \"\\n\")\n                printLog(Log, \"Some 'make' programs ignore lines not ending in LF.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n        ## Check src/Makevars[.in] compilation flags.\n        if (length(makevars)) {\n            checkingLog(Log, \"compilation flags in Makevars\")\n\n            Rcmd <- sprintf(\"tools:::.check_make_vars(\\\"src\\\", %s)\\n\",\n                            deparse(makevars))\n            out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                if(any(grepl(\"^(Non-portable flags|Variables overriding)\", out)))\n                   warningLog(Log) else noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n        ## Check GNUisms\n        if (length(all_files)) {\n            checkingLog(Log, \"for GNU extensions in Makefiles\")\n            bad_files <- character()\n            for(f in all_files) {\n                contents <- readLines(f, warn = FALSE)\n                contents <- grep(\"^ *#\", contents, value = TRUE, invert = TRUE)\n                ## Things like $(SUBDIRS:=.a)\n                contents <- grep(\"[$][(].+:=.+[)]\", contents,\n                                 value = TRUE, invert = TRUE)\n                if (any(grepl(\"([+]=|:=|[$][(]wildcard|[$][(]shell|[$][(]eval|[$][(]call|[$][(]patsubst|^ifeq|^ifneq|^ifdef|^ifndef|^endif)\", contents)))\n                    bad_files <- c(bad_files, f)\n            }\n            SysReq <- desc[\"SystemRequirements\"]\n            if (length(bad_files)) {\n                if(!is.na(SysReq) && grepl(\"GNU [Mm]ake\", SysReq)) {\n                    noteLog(Log, \"GNU make is a SystemRequirements.\")\n                } else {\n                    warningLog(Log, \"Found the following file(s) containing GNU extensions:\")\n                    printLog0(Log, .format_lines_with_indent(bad_files), \"\\n\")\n                    wrapLog(\"Portable Makefiles do not use GNU extensions\",\n                            \"such as +=, :=, $(shell), $(wildcard),\",\n                            \"ifeq ... endif.\",\n                            \"See section 'Writing portable packages'\",\n                            \"in the 'Writing R Extensions' manual.\\n\")\n                }\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## check src/Makevar*, src/Makefile* for correct use of BLAS_LIBS\n        ## FLIBS is not needed on Windows, at least currently (as it is\n        ## statically linked).\n        makefiles <- Sys.glob(file.path(\"src\",\n                                        c(\"Makevars\", \"Makevars.in\",\n                                          \"Makefile\", \"Makefile.win\")))\n        if(length(makefiles)) {\n            checkingLog(Log, \"for portable use of $(BLAS_LIBS) and $(LAPACK_LIBS)\")\n            any <- FALSE\n            for (f in makefiles) {\n                lines <- readLines(f, warn = FALSE)\n                ## Combine lines ending in escaped newlines.\n                if(any(ind <- grepl(\"[\\\\]$\", lines, useBytes = TRUE))) {\n                    ## Eliminate escape.\n                    lines[ind] <-\n                        sub(\"[\\\\]$\", \"\", lines[ind], useBytes = TRUE)\n                    ## Determine ids of blocks that need to be joined.\n                    ind <- seq_along(ind) - c(0, cumsum(ind)[-length(ind)])\n                    ## And join.\n                    lines <- unlist(lapply(split(lines, ind), paste,\n                                           collapse = \" \"))\n                }\n                c1 <- grepl(\"^[[:space:]]*PKG_LIBS\", lines, useBytes = TRUE)\n                c2l <- grepl(\"\\\\$[{(]{0,1}LAPACK_LIBS\", lines, useBytes = TRUE)\n                c2b <- grepl(\"\\\\$[{(]{0,1}BLAS_LIBS\", lines, useBytes = TRUE)\n                c3 <- grepl(\"\\\\$[{(]{0,1}FLIBS\", lines, useBytes = TRUE)\n                if (any(c1 & c2l & !c2b)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log,\n                             \"  apparently using $(LAPACK_LIBS) without $(BLAS_LIBS) in \",\n                             sQuote(f), \"\\n\")\n                }\n                if (any(c1 & (c2b | c2l) & !c3)) {\n                    if (!any) warningLog(Log)\n                    any <- TRUE\n                    printLog(Log, \"  apparently PKG_LIBS is missing $(FLIBS) in \",\n                             sQuote(f), \"\\n\")\n                }\n            }\n            if (!any) resultLog(Log, \"OK\")\n        }\n    }\n\n    check_sos <- function() {\n        checkingLog(Log, \"compiled code\")\n        ## from sotools.R\n        Rcmd <- paste(\"options(warn=1)\\n\",\n                      sprintf(\"tools:::check_compiled_code(\\\"%s\\\")\",\n                              file.path(libdir, pkgname)))\n        out <- R_runR(Rcmd, R_opts2, \"R_DEFAULT_PACKAGES=NULL\")\n        if(length(out) == 1L && grepl(\"^Note:\", out)) {\n            ## This will be a note about symbols.rds not being available\n            if(!is_base_pkg) {\n                noteLog(Log)\n                printLog0(Log, c(out, \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        } else if(length(out)) {\n            ## If we have named objects then we have symbols.rds and\n            ## will not be picking up symbols just in system libraries.\n            haveObjs <- any(grepl(\"^ *Object\", out))\n            pat <- paste(\"possibly from\",\n                         sQuote(\"(abort|assert|exit|_exit|_Exit)\"))\n            if(haveObjs && any(grepl(pat, out)) &&\n               !pkgname %in% c(\"parallel\", \"fork\")) # need _exit in forked child\n                warningLog(Log)\n            else noteLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            nAPIs <- length(grep(\"Found non-API\", out))\n            nBad <- length(grep(\", possibly from \", out))\n            msg <- if (nBad) {\n                if(haveObjs)\n                    c(\"Compiled code should not call entry points which\",\n                      \"might terminate R nor write to stdout/stderr instead\",\n                      \"of to the console, nor the system RNG.\\n\")\n                else\n                    c(\"Compiled code should not call entry points which\",\n                      \"might terminate R nor write to stdout/stderr instead\",\n                      \"of to the console, nor the system RNG.\",\n                      \"The detected symbols are linked\",\n                      \"into the code but might come from libraries\",\n                      \"and not actually be called.\\n\")\n            } else character()\n            if(nAPIs)\n                msg <- c(msg,\n                         \"Compiled code should not call non-API entry points in R.\\n\")\n            wrapLog(\"\\n\", paste(msg, collapse = \" \"), \"\\n\",\n                    \"See 'Writing portable packages'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_loading <- function(arch = \"\")\n    {\n        checkingLog(Log, \"whether the package can be loaded\")\n        Rcmd <- sprintf(\"library(%s)\", pkgname)\n        opts <- if(nzchar(arch)) R_opts4 else R_opts2\n        env <- \"R_DEFAULT_PACKAGES=NULL\"\n        env1 <- if(nzchar(arch)) env0 else character()\n        out <- R_runR(Rcmd, opts, env1, arch = arch)\n        if(length(st <- attr(out, \"status\"))) {\n            errorLog(Log)\n            wrapLog(\"Loading this package had a fatal error\",\n                    \"status code \", st,  \"\\n\")\n            if(length(out))\n                printLog0(Log,\n                          paste(c(\"Loading log:\", out, \"\"),\n                                collapse = \"\\n\"))\n            summaryLog(Log)\n            do_exit()\n        }\n        if (any(grepl(\"^Error\", out))) {\n            errorLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            wrapLog(\"\\nIt looks like this package\",\n                    \"has a loading problem: see the messages\",\n                    \"for details.\\n\")\n\t    maybe_exit(1L)\n        } else resultLog(Log, \"OK\")\n\n        checkingLog(Log, \"whether the package can be loaded with stated dependencies\")\n        out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)\n        if (any(grepl(\"^Error\", out)) || length(attr(out, \"status\"))) {\n            warningLog(Log)\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            wrapLog(\"\\nIt looks like this package\",\n                    \"(or one of its dependent packages)\",\n                    \"has an unstated dependence on a standard\",\n                    \"package.  All dependencies must be\",\n                    \"declared in DESCRIPTION.\\n\")\n            wrapLog(msg_DESCRIPTION)\n        } else resultLog(Log, \"OK\")\n\n        checkingLog(Log, \"whether the package can be unloaded cleanly\")\n        Rcmd <- sprintf(\"suppressMessages(library(%s)); cat('\\n---- unloading\\n'); detach(\\\"package:%s\\\")\", pkgname, pkgname)\n        out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)\n        if (any(grepl(\"^(Error|\\\\.Last\\\\.lib failed)\", out)) ||\n            length(attr(out, \"status\"))) {\n            warningLog(Log)\n            ll <- grep(\"---- unloading\", out)\n            if(length(ll)) {\n                ll <- ll[length(ll)]\n                out <- out[ll:length(out)]\n            }\n            printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n        } else resultLog(Log, \"OK\")\n\n        ## and if it has a namespace, that we can load/unload just\n        ## the namespace\n        if (file.exists(file.path(pkgdir, \"NAMESPACE\"))) {\n            checkingLog(Log, \"whether the namespace can be loaded with stated dependencies\")\n            Rcmd <- sprintf(\"loadNamespace(\\\"%s\\\")\", pkgname)\n            out <- R_runR(Rcmd, opts, c(env, env1), arch = arch)\n            if (any(grepl(\"^Error\", out)) || length(attr(out, \"status\"))) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"\\nA namespace must be able to be loaded\",\n                        \"with just the base namespace loaded:\",\n                        \"otherwise if the namespace gets loaded by a\",\n                        \"saved object, the session will be unable\",\n                        \"to start.\\n\\n\",\n                        \"Probably some imports need to be declared\",\n                        \"in the NAMESPACE file.\\n\")\n            } else resultLog(Log, \"OK\")\n\n            checkingLog(Log,\n                        \"whether the namespace can be unloaded cleanly\")\n            Rcmd <- sprintf(\"invisible(suppressMessages(loadNamespace(\\\"%s\\\"))); cat('\\n---- unloading\\n'); unloadNamespace(\\\"%s\\\")\",\n                            pkgname, pkgname)\n            out <- if (is_base_pkg && pkgname != \"stats4\")\n                R_runR(Rcmd, opts, \"R_DEFAULT_PACKAGES=NULL\", arch = arch)\n            else R_runR(Rcmd, opts, env1)\n            if (any(grepl(\"^(Error|\\\\.onUnload failed)\", out)) ||\n                length(attr(out, \"status\"))) {\n                warningLog(Log)\n                ll <- grep(\"---- unloading\", out)\n                if(length(ll)) {\n                    ll <- ll[length(ll)]\n                    out <- out[ll:length(out)]\n                }\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        ## No point in this test if already installed in .Library\n        if (!pkgname %in% dir(.Library)) {\n            checkingLog(Log, \"loading without being on the library search path\")\n            Rcmd <- sprintf(\"library(%s, lib.loc = '%s')\", pkgname, libdir)\n            opts <- if(nzchar(arch)) R_opts4 else R_opts2\n            env <- setRlibs(pkgdir = pkgdir, libdir = libdir,\n                            self2 = FALSE, quote = TRUE)\n            if(nzchar(arch)) env <- c(env, \"R_DEFAULT_PACKAGES=NULL\")\n            out <- R_runR(Rcmd, opts, env, arch = arch)\n            if (any(grepl(\"^Error\", out))) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                wrapLog(\"\\nIt looks like this package\",\n                        \"has a loading problem when not on .libPaths:\",\n                        \"see the messages for details.\\n\")\n            } else resultLog(Log, \"OK\")\n        }\n        if(!extra_arch && !is_base_pkg) {\n            check_S3reg <-\n                Sys.getenv(\"_R_CHECK_OVERWRITE_REGISTERED_S3_METHODS_\", \"NA\")\n            check_S3reg <- if(check_S3reg == \"NA\") check_incoming else {\n                config_val_to_logical(check_S3reg)\n            }\n            if(check_S3reg) {\n                checkingLog(Log, \"use of S3 registration\")\n                Rcmd <- sprintf(\"suppressPackageStartupMessages(loadNamespace('%s', lib.loc = '%s'))\",\n                                pkgname, libdir)\n                opts <- if(nzchar(arch)) R_opts4 else R_opts2\n                env <- paste0(\"_R_LOAD_CHECK_OVERWRITE_S3_METHODS_=\", pkgname)\n                out <- R_runR(Rcmd, opts, env, arch = arch)\n                if (any(grepl(\"^Registered S3 method.*overwritten\", out))) {\n                    out <- grep(\"^<environment: namespace:\", out,\n                                invert = TRUE, value = TRUE)\n                    warningLog(Log)\n                    printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                } else resultLog(Log, \"OK\")\n            }\n        }\n    }\n\n    run_examples <- function()\n    {\n        run_one_arch <- function(exfile, exout, arch = \"\")\n        {\n            any <- FALSE\n            ## moved here to avoid WARNING + OK\n            if (nzchar(enc) && is_ascii) {\n                warningLog(Log,\n                           paste(\"checking a package with encoding \",\n                                 sQuote(e), \" in an ASCII locale\\n\"))\n                any <- TRUE\n            }\n            Ropts <- if (nzchar(arch)) R_opts3 else R_opts\n            if (use_valgrind) Ropts <- paste(Ropts, \"-d valgrind\")\n            t1 <- proc.time()\n            ## might be diff-ing results against tests/Examples later\n            ## so force LANGUAGE=en\n            status <- R_runR(NULL, c(Ropts, enc),\n                             c(\"LANGUAGE=en\", \"_R_CHECK_INTERNALS2_=1\",\n                               if(nzchar(arch)) env0,\n                               jitstr, elibs),\n                             stdout = exout, stderr = exout,\n                             stdin = exfile, arch = arch)\n            t2 <- proc.time()\n            if (status) {\n                errorLog(Log, \"Running examples in \",\n                         sQuote(basename(exfile)),\n                         \" failed\")\n                ## Try to spot the offending example right away.\n                txt <- paste(readLines(exout, warn = FALSE),\n                             collapse = \"\\n\")\n                ## Look for the header section anchored by a\n                ## subsequent call to flush(): needs to be kept in\n                ## sync with the code in massageExamples (in\n                ## testing.R).  Should perhaps also be more\n                ## defensive about the prompt ...\n                chunks <- strsplit(txt,\n                                   \"> ### \\\\* [^\\n]+\\n> \\n> flush[^\\n]+\\n> \\n\", useBytes = TRUE)[[1L]]\n                                       if((ll <- length(chunks)) >= 2) {\n                                           printLog(Log,\n                                                    \"The error most likely occurred in:\\n\\n\")\n                                           printLog0(Log, chunks[ll], \"\\n\")\n                                       } else {\n                                           ## most likely error before the first example\n                                           ## so show all the output.\n                                           printLog(Log, \"The error occurred in:\\n\\n\")\n                                           printLog0(Log, txt, \"\\n\")\n                                       }\n                return(FALSE)\n            }\n\n            print_time(t1, t2, Log)\n            ## Look at the output from running the examples.  For\n            ## the time being, report warnings about use of\n            ## deprecated , as the next release will make\n            ## them defunct and hence using them an error.\n            bad <- FALSE\n            lines <- readLines(exout, warn = FALSE)\n            bad_lines <- grep(\"^Warning: .*is deprecated.$\",\n                              lines, useBytes = TRUE, value = TRUE)\n            if(length(bad_lines)) {\n                bad <- TRUE\n                warningLog(Log, \"Found the following significant warnings:\\n\")\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n                wrapLog(\"Deprecated functions may be defunct as\",\n                        \"soon as of the next release of R.\\n\",\n                        \"See ?Deprecated.\\n\")\n            }\n            bad_lines <- grep(\"^Warning.*screen devices should not be used in examples\",\n                              lines, useBytes = TRUE, value = TRUE)\n\n            if(length(bad_lines)) {\n                if(!bad) {\n                    warningLog(Log,\n                               \"Found the following significant warnings:\")\n                    bad <- TRUE\n                }\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n                wrapLog(\"dev.new() is the preferred way to open a new device,\",\n                        \"in the unlikely event one is needed.\")\n            }\n            bad_lines <- grep(\"^Warning: .*simultaneous processes spawned$\",\n                              lines, useBytes = TRUE, value = TRUE)\n            if(length(bad_lines)) {\n                if(!bad) {\n                    warningLog(Log,\n                               \"Found the following significant warnings:\")\n                    bad <- TRUE\n                }\n                printLog0(Log, .format_lines_with_indent(bad_lines), \"\\n\")\n                wrapLog(\"Note that CRAN packages must never use more than two\",\n                        \"cores simultaneously during their checks.\")\n            }\n            any <- any || bad\n            if (!any) resultLog(Log, \"OK\")\n\n            if (do_timings) {\n                tfile <- paste0(pkgname, \"-Ex.timings\")\n\t\ttimes <- read.table(tfile, header = TRUE, row.names = 1L,\n\t\t\t\t    colClasses = c(\"character\", rep(\"numeric\", 3)))\n                o <- order(times[[1]]+times[[2]], decreasing = TRUE)\n                times <- times[o, ]\n                keep <- (times[[1]] + times[[2]] > 5) | (times[[3]] > 5)\n                if(any(keep)) {\n                    printLog(Log, \"Examples with CPU or elapsed time > 5s\\n\")\n                    times <- capture.output(format(times[keep, ]))\n                    printLog0(Log, paste(times, collapse = \"\\n\"), \"\\n\")\n                }\n            }\n\n            ## Try to compare results from running the examples to\n            ## a saved previous version.\n            exsave <- file.path(pkgdir, test_dir, \"Examples\",\n                                paste0(pkgname, \"-Ex.Rout.save\"))\n            if (file.exists(exsave)) {\n                checkingLog(Log, \"differences from \",\n                            sQuote(basename(exout)),\n                            \" to \", sQuote(basename(exsave)))\n                cmd <- paste0(\"invisible(tools::Rdiff('\",\n                              exout, \"', '\", exsave, \"',TRUE,TRUE))\")\n                out <- R_runR(cmd, R_opts2)\n                resultLog(Log, \"OK\")\n                if(length(out))\n                    printLog0(Log, paste(c(\"\", out, \"\"), collapse = \"\\n\"))\n            }\n\n            TRUE\n        }\n\n        checkingLog(Log, \"examples\")\n        if (!do_examples) resultLog(Log, \"SKIPPED\")\n        else {\n            pkgtopdir <- file.path(libdir, pkgname)\n            cmd <- sprintf('tools:::.createExdotR(\"%s\", \"%s\", silent = TRUE, use_gct = %s, addTiming = %s, commentDontrun = %s, commentDonttest = %s)',\n                           pkgname, pkgtopdir, use_gct, do_timings,\n                           !run_dontrun, !run_donttest)\n            Rout <- tempfile(\"Rout\")\n            ## any arch will do here\n            status <- R_runR(cmd, R_opts2, \"LC_ALL=C\",\n                             stdout = Rout, stderr = Rout)\n            exfile <- paste0(pkgname, \"-Ex.R\")\n            if (status) {\n                errorLog(Log,\n                         paste(\"Running massageExamples to create\",\n                               sQuote(exfile), \"failed\"))\n                printLog0(Log,\n                          paste(readLines(Rout, warn = FALSE),\n                                collapse = \"\\n\"),\n                          \"\\n\")\n\t\tmaybe_exit(1L)\n            }\n            ## It ran, but did it create any examples?\n            if (file.exists(exfile)) {\n                enc <- if (!is.na(e <- desc[\"Encoding\"])) {\n                    paste(\"--encoding\", e, sep=\"=\")\n                } else \"\"\n                if (!this_multiarch) {\n                    exout <- paste0(pkgname, \"-Ex.Rout\")\n                    if(!run_one_arch(exfile, exout)) maybe_exit(1L)\n                } else {\n                    printLog(Log, \"\\n\")\n                    Log$stars <<-  \"**\"\n                    res <- TRUE\n                    for (arch in inst_archs) {\n                        printLog(Log, \"** running examples for arch \",\n                                 sQuote(arch), \" ...\")\n                        if (arch %in% R_check_skip_examples_arch) {\n                            resultLog(Log, \"SKIPPED\")\n                        } else {\n                            tdir <- paste0(\"examples_\", arch)\n                            dir.create(tdir)\n                            if (!dir.exists(tdir)) {\n                                errorLog(Log,\n                                         \"unable to create examples directory\")\n                                summaryLog(Log)\n                                do_exit(1L)\n                            }\n                            od <- setwd(tdir)\n                            exout <- paste0(pkgname, \"-Ex_\", arch, \".Rout\")\n                            res <- res & run_one_arch(file.path(\"..\", exfile),\n                                                      file.path(\"..\", exout),\n                                                      arch)\n                            setwd(od)\n                        }\n                    }\n                    Log$stars <<-  \"*\"\n                    if (!res) maybe_exit(1L)\n                }\n                cntFile <- paste0(exfile, \"-cnt\")\n                if (file.exists(cntFile)) {\n                    unlink(cntFile)\n                    if (as_cran)\n                        printLog(Log, \"** found \\\\donttest examples:\",\n                                 \" check also with --run-donttest\\n\")\n                }\n            } else {\n                resultLog(Log, \"NONE\")\n                no_examples <<- TRUE\n            }\n        }\n    }\n\n    run_tests <- function()\n    {\n        if (!extra_arch && !is_base_pkg) {\n            checkingLog(Log, \"for unstated dependencies in \", sQuote(test_dir))\n            Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                          sprintf(\"tools:::.check_packages_used_in_tests(\\\"%s\\\", \\\"%s\\\")\\n\", pkgdir, test_dir))\n\n            out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                warningLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n                # wrapLog(msg_DESCRIPTION)\n            } else resultLog(Log, \"OK\")\n        }\n\n        if (test_dir == \"tests\")\n\t    checkingLog(Log, \"tests\")\n\telse\n\t    checkingLog(Log, \"tests in \", sQuote(test_dir))\n\n        run_one_arch <- function(arch = \"\")\n        {\n            testsrcdir <- file.path(pkgdir, test_dir)\n            testdir <- file.path(pkgoutdir, \"tests\")\n            if(nzchar(arch)) testdir <- paste(testdir, arch, sep = \"_\")\n            if(!dir.exists(testdir)) dir.create(testdir, mode = \"0755\")\n            if(!dir.exists(testdir)) {\n                errorLog(Log,\n                         sprintf(\"unable to create %s\", sQuote(testdir)))\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            file.copy(Sys.glob(paste0(testsrcdir, \"/*\")),\n                      testdir, recursive = TRUE)\n            setwd(testdir)\n            extra <- character()\n            if (use_gct) extra <- c(extra, \"use_gct = TRUE\")\n            if (use_valgrind) extra <- c(extra, \"use_valgrind = TRUE\")\n            tf <- gsub(\"\\\\\", \"/\", tempfile(), fixed=TRUE)\n            extra <- c(extra, paste0('Log=\"', tf, '\"'))\n            ## might be diff-ing results against tests/*.R.out.save\n            ## so force LANGUAGE=en\n            cmd <- paste0(\"tools:::.runPackageTestsR(\",\n                         paste(extra, collapse = \", \"), \")\")\n            t1 <- proc.time()\n            status <- R_runR(cmd,\n                             if(nzchar(arch)) R_opts4 else R_opts2,\n                             env = c(\"LANGUAGE=en\",\n                             \"_R_CHECK_INTERNALS2_=1\",\n                             if(nzchar(arch)) env0,\n                             jitstr, elibs),\n                             stdout = \"\", stderr = \"\", arch = arch)\n            t2 <- proc.time()\n            if (status) {\n                errorLog(Log)\n                ## Don't just fail: try to log where the problem occurred.\n                ## First, find the test which failed.\n                ## (Maybe there was an error without a failing test.)\n                bad_files <- dir(\".\", pattern=\"\\\\.Rout\\\\.fail\")\n                if (length(bad_files)) {\n                    ## Read in output from the (first) failed test\n                    ## and retain at most the last 13 lines\n                    ## (13? why not?).\n                    file <- bad_files[1L]\n                    lines <- readLines(file, warn = FALSE)\n                    file <- file.path(test_dir, sub(\"out\\\\.fail\", \"\", file))\n                    ll <- length(lines)\n                    lines <- lines[max(1, ll-12):ll]\n                    if (R_check_suppress_RandR_message)\n                        lines <- grep('^Xlib: *extension \"RANDR\" missing on display',\n                                      lines, invert = TRUE, value = TRUE)\n                    printLog(Log, sprintf(\"Running the tests in %s failed.\\n\", sQuote(file)))\n                    printLog(Log, \"Last 13 lines of output:\\n\")\n                    printLog0(Log, .format_lines_with_indent(lines), \"\\n\")\n                }\n                return(FALSE)\n            } else {\n                print_time(t1, t2, Log)\n                resultLog(Log, \"OK\")\n                if (Log$con > 0L && file.exists(tf)) {\n                    ## write results only to 00check.log\n                    lines <- readLines(tf, warn = FALSE)\n                    cat(lines, sep=\"\\n\", file = Log$con)\n                    unlink(tf)\n                }\n            }\n            setwd(pkgoutdir)\n            TRUE\n        }\n        if (do_install && do_tests) {\n            if (!this_multiarch) {\n                res <- run_one_arch()\n            } else {\n                printLog(Log, \"\\n\")\n                res <- TRUE\n                for (arch in inst_archs)\n                    if (!(arch %in% R_check_skip_tests_arch)) {\n                        printLog(Log, \"** running tests for arch \",\n                                 sQuote(arch), \" ...\")\n                        res <- res & run_one_arch(arch)\n                    }\n            }\n            if (!res) maybe_exit(1L)\n        } else resultLog(Log, \"SKIPPED\")\n    }\n\n    run_vignettes <- function(desc)\n    {\n        vigns <- pkgVignettes(dir = pkgdir)\n        if (is.null(vigns) || !length(vigns$docs)) return()\n\n        if(do_install && !spec_install && !is_base_pkg && !extra_arch) {\n            ## fake installs don't install inst/doc\n            checkingLog(Log, \"for unstated dependencies in vignettes\")\n            Rcmd <- paste(\"options(warn=1, showErrorCalls=FALSE)\\n\",\n                          sprintf(\"tools:::.check_packages_used_in_vignettes(package = \\\"%s\\\")\\n\", pkgname))\n            out <- R_runR2(Rcmd, \"R_DEFAULT_PACKAGES=NULL\")\n            if (length(out)) {\n                noteLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n            } else resultLog(Log, \"OK\")\n        }\n\n        checkingLog(Log, \"package vignettes in \", sQuote(\"inst/doc\"))\n        any <- FALSE\n        ## Do PDFs or HTML files exist for all package vignettes?\n        ## A base source package need not have PDFs to avoid\n        ## frequently-changing binary files in the SVN archive.\n        if (!is_base_pkg) {\n            dir <- file.path(pkgdir, \"inst\", \"doc\")\n            outputs <- character(length(vigns$docs))\n            for (i in seq_along(vigns$docs)) {\n                file <- vigns$docs[i]\n                name <- vigns$names[i]\n                engine <- vignetteEngine(vigns$engines[i])\n                outputs[i] <- tryCatch({\n                    find_vignette_product(name, what=\"weave\", final=TRUE, dir=dir, engine = engine)\n                }, error = function(ex) NA)\n            }\n            bad_vignettes <- vigns$docs[is.na(outputs)]\n            if (nb <- length(bad_vignettes)) {\n                any <- TRUE\n                warningLog(Log)\n                msg <- ngettext(nb,\n                                \"Package vignette without corresponding PDF/HTML:\\n\",\n                                \"Package vignettes without corresponding PDF/HTML:\\n\", domain = NA)\n                printLog0(Log, msg)\n                printLog0(Log,\n                          paste(c(paste(\"  \",\n                                        sQuote(basename(bad_vignettes))),\n                                  \"\", \"\"), collapse = \"\\n\"))\n            }\n\t    defaultEncoding <- .get_package_metadata(pkgdir)[\"Encoding\"]\n            encs <- vapply(vigns$docs, getVignetteEncoding, \"\", default = defaultEncoding)\n            bad_vignettes <- vigns$docs[encs == \"non-ASCII\"]\n            if(nb <- length(bad_vignettes)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                msg <- ngettext(nb,\n                         \"Non-ASCII package vignette without specified encoding:\\n\",\n                         \"Non-ASCII package vignettes without specified encoding:\\n\", domain = NA)\n                printLog0(Log, \"  \", msg)\n                printLog0(Log,\n                          paste(c(paste(\"  \",\n                                        sQuote(basename(bad_vignettes))),\n                                  \"\", \"\"), collapse = \"\\n\"))\n            }\n        }\n\n# FIXME:  we should do this check in build, not here.  Currently not doing it at all.\n#        ## Do any of the .R files which will be generated\n#        ## exist in inst/doc?  If so the latter will be ignored,\n#        sources <-\n#            basename(list_files_with_exts(file.path(pkgdir, \"inst/doc\"), \"R\"))\n#        custom <- !is.na(desc[\"VignetteBuilder\"])\n#        if (length(sources) && !custom) {\n#            new_sources <- paste0(vigns$names, \".R\")\n#            dups <- sources[sources %in% new_sources]\n#            if(nb <- length(dups)) {\n#                if(!any) warningLog(Log)\n#                any <- TRUE\n#                msg <- ngettext(nb,\n#                                \"Unused file in 'inst/doc' which is pointless or misleading\",\n#                                \"Unused files in 'inst/doc' which are pointless or misleading\", domain = NA)\n#                printLog(Log, \"  \",\n#                         paste(msg,\n#                               \"  as they will be re-created from the vignettes:\", \"\",\n#                               sep = \"\\n\"))\n#                printLog(Log,\n#                         paste(c(paste(\"  \", dups), \"\", \"\"),\n#                               collapse = \"\\n\"))\n#            }\n#        }\n        ## avoid case-insensitive matching\n        if (\"makefile\" %in% dir(vigns$dir)) {\n            if(!any) warningLog(Log)\n            any <- TRUE\n            printLog(Log,\n                     \"  Found 'inst/doc/makefile': should be 'Makefile' and will be ignored\\n\")\n        }\n        if (\"Makefile\" %in% dir(vigns$dir)) {\n            f <- file.path(vigns$dir, \"Makefile\")\n            lines <- readLines(f, warn = FALSE)\n            ## remove comment lines\n            lines <- grep(\"^[[:space:]]*#\", lines, invert = TRUE, value = TRUE)\n            if(any(grepl(\"[^/]R +CMD\", lines))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"  Found 'R CMD' in Makefile: should be '\\\"$(R_HOME)/bin/R\\\" CMD'\\n\")\n            }\n            contents <- readChar(f, file.size(f), useBytes = TRUE)\n            if(any(grepl(\"\\r\", contents, fixed = TRUE, useBytes = TRUE))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log, \"Found Makefile with CR or CRLF line endings:\\n\")\n                printLog(Log, \"some Unix 'make' programs require LF line endings.\\n\")\n           }\n            if(any(grepl(\"[^/]Rscript\", lines))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                printLog(Log,\n                         \"  Found 'Rscript' in Makefile: should be '\\\"$(R_HOME)/bin/Rscript\\\"'\\n\")\n            }\n        }\n\n        ## If the vignettes declare an encoding, are they actually in it?\n        ## (We don't check the .tex, though)\n        bad_vignettes <- character()\n        for (i in seq_along(vigns$docs)) {\n\t    v <- vigns$docs[i]\n            enc <- vigns$encodings[i]\n            if (enc %in% c(\"\", \"non-ASCII\", \"unknown\")) next\n            lines <- readLines(v, warn = FALSE) # some miss final NA\n            lines2 <- iconv(lines, enc, \"UTF-16LE\", toRaw = TRUE)\n            if(any(vapply(lines2, is.null, TRUE)))\n                bad_vignettes <- c(bad_vignettes, v)\n            if(nb <- length(bad_vignettes)) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                msg <- ngettext(nb,\n                                \"Package vignette which is not in its specified encoding:\\n\",\n                                \"Package vignettes which are not in their specified encoding:\\n\", domain = NA)\n                printLog0(Log, \"  \", msg)\n                printLog0(Log,\n                          paste(c(paste(\"  \",\n                                        sQuote(basename(bad_vignettes))),\n                                  \"\", \"\"), collapse = \"\\n\"))\n            }\n        }\n\n        if (!any) resultLog(Log, \"OK\")\n\n        if (do_install && do_vignettes) {\n            ## Can we run the code in the vignettes?\n            ## Should checking the vignettes assume the system default\n            ## packages, or just base?\n            ## FIXME: should we do this for multiple sub-archs?\n\n            checkingLog(Log, \"running R code from vignettes\")\n            vigns <- pkgVignettes(dir = pkgdir)\n            res <- character()\n            cat(\"\\n\")\n            def_enc <- desc[\"Encoding\"]\n            if( (is.na(def_enc))) def_enc <- \"\"\n            t1 <- proc.time()\n            for (i in seq_along(vigns$docs)) {\n                file <- vigns$docs[i]\n                name <- vigns$names[i]\n                enc <- vigns$encodings[i]\n                cat(\"  \", sQuote(basename(file)),\n                    if(nzchar(enc)) paste(\"using\", sQuote(enc)),\n                    \"...\")\n                Rcmd <- paste0(\"options(warn=1)\\ntools:::.run_one_vignette('\",\n                               basename(file), \"', '\", vigns$dir, \"'\",\n                               if (nzchar(enc))\n                                   paste0(\", encoding = '\", enc, \"'\"),\n                               \", pkgdir='\", vigns$pkgdir, \"')\")\n                outfile <- paste0(basename(file), \".log\")\n                t1b <- proc.time()\n                status <- R_runR(Rcmd,\n                                 if (use_valgrind) paste(R_opts2, \"-d valgrind\") else R_opts2,\n                                 ## add timing as footer, as BATCH does\n                                 env = c(jitstr, \"R_BATCH=1234\", elibs,\n                                 \"_R_CHECK_INTERNALS2_=1\"),\n                                 stdout = outfile, stderr = outfile)\n                t2b <- proc.time()\n                out <- readLines(outfile, warn = FALSE)\n                savefile <- file.path(dirname(file), paste0(name, \".Rout.save\"))\n                if(length(grep(\"^  When (running|tangling|sourcing)\", out,\n                               useBytes = TRUE))) {\n                    cat(\" failed\\n\")\n                    res <- c(res,\n                             paste(\"when running code in\", sQuote(basename(file))),\n                             \"  ...\",\n                             utils::tail(out, as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\", 10))))\n                } else if(status || ! \" *** Run successfully completed ***\" %in% out) {\n                    ## (Need not be the final line if running under valgrind)\n                    cat(\" failed to complete the test\\n\")\n                    out <- c(out, \"\", \"... incomplete output.  Crash?\")\n                    res <- c(res,\n                             paste(\"when running code in\", sQuote(basename(file))),\n                             \"  ...\",\n                             utils::tail(out, as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\", 10))))\n                } else if (file.exists(savefile)) {\n                    cmd <- paste0(\"invisible(tools::Rdiff('\",\n                                 outfile, \"', '\", savefile, \"',TRUE,TRUE))\")\n                    out2 <- R_runR(cmd, R_opts2)\n                    if(length(out2)) {\n                        print_time(t1b, t2b, NULL)\n                        cat(\"\\ndifferences from \", sQuote(basename(savefile)),\n                            \"\\n\", sep = \"\")\n                        writeLines(c(out2, \"\"))\n                    } else {\n                        print_time(t1b, t2b, NULL)\n                        cat(\" OK\\n\")\n                        if (!config_val_to_logical(Sys.getenv(\"_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_\", use_valgrind)))\n                            unlink(outfile)\n                    }\n                } else {\n                    print_time(t1b, t2b, NULL)\n                    cat(\" OK\\n\")\n                    if (!config_val_to_logical(Sys.getenv(\"_R_CHECK_ALWAYS_LOG_VIGNETTE_OUTPUT_\", use_valgrind)))\n                        unlink(outfile)\n                }\n            }\n            t2 <- proc.time()\n            print_time(t1, t2, Log)\n            if (R_check_suppress_RandR_message)\n                res <- grep('^Xlib: *extension \"RANDR\" missing on display', res,\n                            invert = TRUE, value = TRUE, useBytes = TRUE)\n            if(length(res)) {\n                if(length(grep(\"there is no package called\", res,\n                               useBytes = TRUE))) {\n                    warningLog(Log, \"Errors in running code in vignettes:\")\n                    printLog0(Log, paste(c(res, \"\", \"\"), collapse = \"\\n\"))\n                } else {\n                    errorLog(Log, \"Errors in running code in vignettes:\")\n                    printLog0(Log, paste(c(res, \"\", \"\"), collapse = \"\\n\"))\n\t\t    maybe_exit(1L)\n                }\n            } else resultLog(Log, \"OK\")\n\n            build_vignettes <-\n                parse_description_field(desc, \"BuildVignettes\", TRUE)\n            if (!build_vignettes && as_cran) {\n                ## FOSS packages must be able to rebuild their vignettes\n                info <- analyze_license(desc[\"License\"])\n                build_vignettes <- info$is_verified\n            }\n            if (do_build_vignettes && build_vignettes) {\n                checkingLog(Log, \"re-building of vignette outputs\")\n                ## copy the whole pkg directory to check directory\n                ## so we can work in place, and allow ../../foo references.\n                dir.create(vd2 <- \"vign_test\")\n                if (!dir.exists(vd2)) {\n                    errorLog(Log, \"unable to create 'vign_test'\")\n                    summaryLog(Log)\n                    do_exit(1L)\n                }\n                file.copy(pkgdir, vd2, recursive = TRUE)\n\n                ## since so many people use 'R CMD' in Makefiles,\n                oPATH <- Sys.getenv(\"PATH\")\n                Sys.setenv(PATH = paste(R.home(\"bin\"), oPATH,\n                                        sep = .Platform$path.sep))\n                on.exit(Sys.setenv(PATH = oPATH))\n                ## And too many inst/doc/Makefile are not safe for\n                ## parallel makes\n                Sys.setenv(MAKEFLAGS=\"\")\n                ## we could use clean = FALSE, but that would not be\n                ## testing what R CMD build uses.\n                Rcmd <- \"options(warn=1)\\nlibrary(tools)\\n\"\n                Rcmd <- paste0(Rcmd, \"buildVignettes(dir = '\",\n                               file.path(pkgoutdir, \"vign_test\", pkgname0),\n                               \"')\")\n                t1 <- proc.time()\n                outfile <- tempfile()\n                status <- R_runR(Rcmd, R_opts2, jitstr,\n                                 stdout = outfile, stderr = outfile)\n                t2 <- proc.time()\n                out <- readLines(outfile, warn = FALSE)\n                if(R_check_suppress_RandR_message)\n                    out <- grep('^Xlib: *extension \"RANDR\" missing on display',\n                                out, invert = TRUE, value = TRUE,\n                                useBytes = TRUE)\n                warns <- grep(\"^Warning: file .* is not portable\",\n                              out, value = TRUE, useBytes = TRUE)\n                if (status) {\n                    noteLog(Log)\n                    out <- utils::tail(out, as.numeric(Sys.getenv(\"_R_CHECK_VIGNETTES_NLINES_\", 25)))\n                    printLog0(Log,\n                              paste(c(\"Error in re-building vignettes:\",\n                                      \"  ...\", out, \"\", \"\"), collapse = \"\\n\"))\n                } else if(nw <- length(warns)) {\n                    noteLog(Log)\n                    msg <- ngettext(nw,\n                                    \"Warning in re-building vignettes:\\n\",\n                                    \"Warnings in re-building vignettes:\\n\",\n                                    domain = NA)\n                    wrapLog(msg)\n                    printLog0(Log, .format_lines_with_indent(warns), \"\\n\")\n                } else {\n                    ## clean up\n                    if (config_val_to_logical(Sys.getenv(\"_R_CHECK_CLEAN_VIGN_TEST_\", \"true\")))\n                        unlink(vd2, recursive = TRUE)\n                    print_time(t1, t2, Log)\n                    resultLog(Log, \"OK\")\n                }\n            } else {\n                checkingLog(Log, \"re-building of vignette outputs\")\n                resultLog(Log, \"SKIPPED\")\n            }\n        } else {\n            checkingLog(Log, \"running R code from vignettes\")\n            resultLog(Log, \"SKIPPED\")\n            checkingLog(Log, \"re-building of vignette outputs\")\n            resultLog(Log, \"SKIPPED\")\n        }\n    }\n\n    check_pkg_manual <- function(pkgdir, pkgname)\n    {\n        ## Run Rd2pdf on the manual, if there are man pages\n        ## If it is installed there is a 'help' dir\n        ## and for a source package, there is a 'man' dir\n        if (dir.exists(file.path(pkgdir, \"help\")) ||\n            dir.exists(file.path(pkgdir, \"man\"))) {\n            topdir <- pkgdir\n            Rd2pdf_opts <- \"--batch --no-preview\"\n            checkingLog(Log, \"PDF version of manual\")\n            build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)\n            man_file <- paste0(pkgname, \"-manual.pdf \")\n            ## precautionary remove in case some other attempt left it behind\n            if(file.exists(man_file)) unlink(man_file)\n            args <- c( \"Rd2pdf \", Rd2pdf_opts,\n                      paste0(\"--build-dir=\", shQuote(build_dir)),\n                      \"--no-clean\", \"-o \", man_file , shQuote(topdir))\n            res <- run_Rcmd(args,  \"Rdlatex.log\")\n            latex_log <- file.path(build_dir, \"Rd2.log\")\n            if (file.exists(latex_log))\n                file.copy(latex_log, paste0(pkgname, \"-manual.log\"))\n            if (res == 11) { ## return code from Rd2pdf\n                errorLog(Log, \"Rd conversion errors:\")\n                lines <- readLines(\"Rdlatex.log\", warn = FALSE)\n                lines <- grep(\"^(Hmm|Execution)\", lines,\n                              invert = TRUE, value = TRUE)\n                printLog0(Log, paste(c(lines, \"\"), collapse = \"\\n\"))\n                unlink(build_dir, recursive = TRUE)\n\t\tmaybe_exit(1L)\n            } else if (res > 0) {\n                latex_file <- file.path(build_dir, \"Rd2.tex\")\n                if (file.exists(latex_file))\n                    file.copy(latex_file, paste0(pkgname, \"-manual.tex\"))\n                warningLog(Log)\n                printLog0(Log,\n                          paste0(\"LaTeX errors when creating PDF version.\\n\",\n                                 \"This typically indicates Rd problems.\\n\"))\n                ## If possible, indicate the problems found.\n                if (file.exists(latex_log)) {\n                    lines <- .get_LaTeX_errors_from_log_file(latex_log)\n                    printLog(Log, \"LaTeX errors found:\\n\")\n                    printLog0(Log, paste(c(lines, \"\"), collapse = \"\\n\"))\n                }\n                unlink(build_dir, recursive = TRUE)\n                ## for Windows' sake: errors can make it unwritable\n                build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)\n                checkingLog(Log, \"PDF version of manual without hyperrefs or index\")\n                ## Also turn off hyperrefs.\n                Sys.setenv(R_RD4PDF = \"times\")\n                args <- c( \"Rd2pdf \", Rd2pdf_opts,\n                          paste0(\"--build-dir=\", shQuote(build_dir)),\n                          \"--no-clean\", \"--no-index\",\n                          \"-o \", man_file, topdir)\n                if (run_Rcmd(args, \"Rdlatex.log\")) {\n                    ## FIXME: the info is almost certainly in Rdlatex.log\n                    errorLog(Log)\n                    latex_log <- file.path(build_dir, \"Rd2.log\")\n                    if (file.exists(latex_log))\n                        file.copy(latex_log, paste0(pkgname, \"-manual.log\"))\n                    else {\n                        ## No log file and thus no chance to find out\n                        ## what went wrong.  Hence, re-run without\n                        ## redirecting stdout/stderr and hope that this\n                        ## gives the same problem ...\n                        # printLog(Log, \"Error when running command:\\n\")\n                        # cmd <- paste(c(\"R CMD\", args), collapse = \" \")\n                        # printLog(Log, strwrap(cmd, indent = 2, exdent = 4), \"\\n\")\n                        printLog(Log, \"Re-running with no redirection of stdout/stderr.\\n\")\n                        unlink(build_dir, recursive = TRUE)\n                        build_dir <- gsub(\"\\\\\", \"/\", tempfile(\"Rd2pdf\"), fixed = TRUE)\n                        args <- c( \"Rd2pdf \", Rd2pdf_opts,\n                                  paste0(\"--build-dir=\", shQuote(build_dir)),\n                                  \"--no-clean\", \"--no-index\",\n                                  \"-o \", paste0(pkgname, \"-manual.pdf \"),\n                                  topdir)\n                        run_Rcmd(args)\n                    }\n                    unlink(build_dir, recursive = TRUE)\n\t\t    maybe_exit(1L)\n                } else {\n                    unlink(build_dir, recursive = TRUE)\n                    resultLog(Log, \"OK\")\n                }\n            } else {\n                unlink(build_dir, recursive = TRUE)\n                resultLog(Log, \"OK\")\n            }\n        }\n    }\n\n    check_executables <- function()\n    {\n        owd <- setwd(pkgdir)\n        allfiles <- dir(\".\", all.files = TRUE, full.names = TRUE,\n                        recursive = TRUE)\n        allfiles <- sub(\"^./\",\"\", allfiles)\n        ## this is tailored to the FreeBSD/Linux 'file',\n        ## see http://www.darwinsys.com/file/\n        ## (Solaris has a different 'file' without --version)\n        ## Most systems are now on >= 5.03, but Mac OS 10.5 was 4.17\n        ## version 4.21 writes to stdout,\n        ## 4.23 to stderr and sets an error status code\n        FILE <- \"file\"\n        lines <- suppressWarnings(tryCatch(system2(FILE, \"--version\", TRUE, TRUE), error = function(e) \"error\"))\n        ## a reasonable check -- it does not identify itself well\n        have_free_file <- any(grepl(\"^(file-[45]|magic file from)\", lines))\n        if (!have_free_file) {\n            ## OpenCSW calls this 'gfile'\n            FILE <- \"gfile\"\n            lines <- suppressWarnings(tryCatch(system2(FILE, \"--version\", TRUE, TRUE), error = function(e) \"error\"))\n            have_free_file <- any(grepl(\"magic file from\", lines))\n        }\n        if (have_free_file) {\n            checkingLog(Log, \"for executable files\")\n            ## Watch out for spaces in file names here\n            ## Do in parallel for speed on Windows, but in batches\n            ## since there may be a line-length limit.\n            execs <- character()\n            files <- allfiles\n            while(ll <- length(files)) {\n                chunk <- seq_len(min(100, ll))\n                these <- files[chunk]\n                files <- files[-chunk]\n                lines <- suppressWarnings(system2(FILE, shQuote(these), TRUE, TRUE))\n                ## avoid match to is_executable.Rd\n                ex <- grepl(\" executable\", lines, useBytes=TRUE)\n\t\tex2 <- grepl(\"script\", lines, useBytes=TRUE) &\n\t\t       grepl(\"text\", lines, useBytes=TRUE)\n                execs <- c(execs, lines[ex & !ex2])\n            }\n            if(length(execs)) {\n                execs <- sub(\":[[:space:]].*$\", \"\", execs, useBytes = TRUE)\n                known <- rep(FALSE, length(execs))\n                pexecs <- file.path(pkgname, execs)\n                ## known false positives\n                for(fp in  c(\"foreign/tests/datefactor.dta\",\n                             \"msProcess/inst/data[12]/.*.txt\",\n                             \"WMBrukerParser/inst/Examples/C3ValidationExtractSmall/RobotRun1/2-100kDa/0_B1/1/1SLin/fid\",\n                             \"bayesLife/inst/ex-data/bayesLife.output/predictions/traj_country104.rda\", # file 5.16\n                             \"alm/inst/vign/cache/signposts1_c96f55a749822dd089b636087766def2.rdb\" # Sparc Solaris, file 5.16\n                             ) )\n                    known <- known | grepl(fp, pexecs)\n                execs <- execs[!known]\n            }\n        } else {\n            ## no 'file', so just check extensions\n            checkingLog(Log, \"for .dll and .exe files\")\n            execs <- grep(\"\\\\.(exe|dll)$\", allfiles, value = TRUE)\n        }\n        if (R_check_executables_exclusions && file.exists(\"BinaryFiles\")) {\n            excludes <- readLines(\"BinaryFiles\")\n            execs <- execs[!execs %in% excludes]\n        }\n        if (nb <- length(execs)) {\n            msg <- ngettext(nb,\n                            \"Found the following executable file:\",\n                            \"Found the following executable files:\",\n                            domain = NA)\n            warningLog(Log, msg)\n            printLog0(Log, .format_lines_with_indent(execs), \"\\n\")\n            wrapLog(\"Source packages should not contain undeclared executable files.\\n\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n        } else resultLog(Log, \"OK\")\n        setwd(owd)\n    }\n\n    ## CRAN-pack knows about\n    .hidden_file_exclusions <-\n        c(\".Renviron\", \".Rprofile\", \".Rproj.user\",\n          \".Rhistory\", \".Rapp.history\",\n          \".tex\", \".log\", \".aux\", \".pdf\", \".png\",\n          \".backups\", \".cvsignore\", \".cproject\", \".directory\",\n          \".dropbox\", \".exrc\", \".gdb.history\",\n          \".gitattributes\", \".gitignore\", \".gitmodules\",\n          \".hgignore\", \".hgtags\",\n          \".project\", \".seed\", \".settings\", \".tm_properties\")\n\n    check_dot_files <- function(cran = FALSE)\n    {\n        checkingLog(Log, \"for hidden files and directories\")\n        owd <- setwd(pkgdir)\n        dots <- dir(\".\", all.files = TRUE, full.names = TRUE,\n                        recursive = TRUE, pattern = \"^[.]\")\n        dots <- sub(\"^./\",\"\", dots)\n        allowed <-\n            c(\".Rbuildignore\", \".Rinstignore\", \"vignettes/.install_extras\")\n        dots <- dots[!dots %in% allowed]\n        alldirs <- list.dirs(\".\", full.names = TRUE, recursive = TRUE)\n        alldirs <- sub(\"^./\",\"\", alldirs)\n        alldirs <- alldirs[alldirs != \".\"]\n        bases <- basename(alldirs)\n        dots <- c(dots, setdiff(alldirs[grepl(\"^[.]\", bases)], \".aspell\"))\n        if (length(dots)) {\n            noteLog(Log, \"Found the following hidden files and directories:\")\n            printLog0(Log, .format_lines_with_indent(dots), \"\\n\")\n            wrapLog(\"These were most likely included in error.\",\n                    \"See section 'Package structure'\",\n                    \"in the 'Writing R Extensions' manual.\\n\")\n            if(cran) {\n                known <- basename(dots) %in% .hidden_file_exclusions\n                known <- known | grepl(\"^.Rbuildindex[.]\", dots) |\n                  grepl(\"inst/doc/[.](Rinstignore|build[.]timestamp)$\", dots) |\n                  grepl(\"vignettes/[.]Rinstignore$\", dots) |\n                  grepl(\"^src.*/[.]deps$\", dots)\n\t\tif (all(known))\n                    printLog(Log, \"\\nCRAN-pack knows about all of these\\n\")\n                else if (any(!known)) {\n                    printLog(Log, \"\\nCRAN-pack does not know about\\n\")\n                    printLog0(Log, .format_lines_with_indent(dots[!known]), \"\\n\")\n                }\n            }\n        } else resultLog(Log, \"OK\")\n        setwd(owd)\n    }\n\n    check_install <- function()\n    {\n        ## Option '--no-install' turns off installation and the tests\n        ## which require the package to be installed.  When testing\n        ## recommended packages bundled with R we can skip\n        ## installation, and do so if '--install=skip' was given.  If\n        ## command line option '--install' is of the form\n        ## 'check:FILE', it is assumed that installation was already\n        ## performed with stdout/stderr redirected to FILE, the\n        ## contents of which need to be checked (without repeating the\n        ## installation).  In this case, one also needs to specify\n        ## *where* the package was installed to using command line\n        ## option '--library'.\n\n        if (install == \"skip\")\n            messageLog(Log, \"skipping installation test\")\n        else {\n            use_install_log <-\n                (grepl(\"^check\", install) || R_check_use_install_log\n                 || !isatty(stdout()))\n            INSTALL_opts <- install_args\n            ## don't use HTML, checkRd goes over the same ground.\n            INSTALL_opts <- c(INSTALL_opts,  \"--no-html\")\n            if (install == \"fake\")\n                INSTALL_opts <- c(INSTALL_opts,  \"--fake\")\n            else if (!multiarch)\n                INSTALL_opts <- c(INSTALL_opts,  \"--no-multiarch\")\n            INSTALL_opts <- paste(INSTALL_opts, collapse = \" \")\n            args <- c(\"INSTALL\", \"-l\", shQuote(libdir), INSTALL_opts,\n                      shQuote(if (WINDOWS) shortPathName(pkgdir) else pkgdir))\n            if (!use_install_log) {\n                ## Case A: No redirection of stdout/stderr from installation.\n                ## This is very rare: needs _R_CHECK_USE_INSTALL_LOG_ set\n                ## to false.\n                message(\"\")\n                ## Rare use of R CMD INSTALL\n                if (run_Rcmd(args)) {\n                    errorLog(Log, \"Installation failed.\")\n                    summaryLog(Log)\n                    do_exit(1L)\n                }\n                message(\"\")\n            } else {\n                ## Case B. All output from installation redirected,\n                ## or already available in the log file.\n                checkingLog(Log,\n                            \"whether package \",\n                            sQuote(desc[\"Package\"]),\n                            \" can be installed\")\n                outfile <- file.path(pkgoutdir, \"00install.out\")\n                if (grepl(\"^check\", install)) {\n                    if (!nzchar(arg_libdir))\n                        printLog(Log, \"\\nWarning: --install=check... specified without --library\\n\")\n                    thislog <- substr(install, 7L, 1000L)\n                                        #owd <- setwd(startdir)\n                    if (!file.exists(thislog)) {\n                        errorLog(Log,\n                                 sprintf(\"install log %s does not exist\", sQuote(thislog)))\n                        summaryLog(Log)\n                        do_exit(2L)\n                    }\n                    file.copy(thislog, outfile)\n                                        #setwd(owd)\n                    install <- \"check\"\n                    lines <- readLines(outfile, warn = FALSE)\n                    ## <NOTE>\n                    ## We used to have\n                    ## $install_error = ($lines[$#lines] !~ /^\\* DONE/);\n                    ## but what if there is output from do_cleanup\n                    ## in (Unix) R CMD INSTALL?\n                    ## </NOTE>\n                    install_error <- !any(grepl(\"^\\\\* DONE\", lines))\n                } else {\n                    ## record in the log what options were used\n                    cat(\"* install options \", sQuote(INSTALL_opts),\n                        \"\\n\\n\", sep = \"\", file = outfile)\n##                    env <- \"\"\n                    ## Normal use of R CMD INSTALL\n                    t1 <- proc.time()\n                    install_error <- run_Rcmd(args, outfile)\n                    t2 <- proc.time()\n                    print_time(t1, t2, Log)\n                    lines <- readLines(outfile, warn = FALSE)\n                }\n                if (install_error) {\n                    errorLog(Log, \"Installation failed.\")\n                    printLog0(Log, \"See \", sQuote(outfile),\n                             \" for details.\\n\")\n                    summaryLog(Log)\n                    do_exit(1L)\n                }\n\n                ## There could still be some important warnings that\n                ## we'd like to report.  For the time being, start\n                ## with compiler warnings about non ISO C code (or\n                ## at least, what looks like it), and also include\n                ## warnings resulting from the const char * CHAR()\n                ## change in R 2.6.0.  (In theory, we should only do\n                ## this when using GCC ...)\n\n                if (install != \"check\")\n                    lines <- readLines(outfile, warn = FALSE)\n\n                lines0 <- lines\n                warn_re <- c(\"^WARNING:\",\n                             \"^Warning:\",\n                             ## <FIXME>\n                             ## New style Rd conversion\n                             ## which may even show errors:\n                             \"^Rd (warning|error): \",\n                             ## </FIXME>\n                             \": warning: .*ISO C\",\n                             \": warning: .* discards qualifiers from pointer target type\",\n                             \": warning: .* is used uninitialized\",\n                             \": warning: .* set but not used\",\n                             \": warning: unused\",\n                             \": warning: .* makes pointer from integer\", # gcc\n                             \": warning: .* pointer.* conversion\", # clang\n                             \": warning: improper pointer\", # Solaris\n                             ## clang warning about invalid returns.\n                             \"warning: void function\",\n                             \"warning: control reaches end of non-void function\",\n                             \"warning: control may reach end of non-void function\",\n                             \"warning: no return statement in function returning non-void\",\n                             \": #warning\",\n                             # these are from era of static HTML\n                             \"missing links?:\")\n                ## Warnings spotted by gcc with\n                ##   '-Wimplicit-function-declaration'\n                ## which is implied by '-Wall'.\n                ## Currently only accessible via an internal environment\n                ## variable.\n                check_src_flag <-\n                    Sys.getenv(\"_R_CHECK_SRC_MINUS_W_IMPLICIT_\", \"FALSE\")\n                ## (Not quite perfect, as the name should really\n                ## include 'IMPLICIT_FUNCTION_DECLARATION'.)\n                if (config_val_to_logical(check_src_flag)) {\n                    warn_re <- c(warn_re,\n                                 \": warning: implicit declaration of function\",\n                                 \": warning: incompatible implicit declaration of built-in function\")\n                }\n\n                ## Warnings spotted by clang with\n                ## '-Wreturn-type-c-linkage':\n                warn_re <- c(warn_re,\n                             \": warning: .* \\\\[-Wreturn-type-c-linkage\\\\]\")\n\n                ## gcc and clang warnings about sequencing\n\n                ## gcc warnings\n                warn_re <- c(warn_re,\n                             \": warning: pointer of type .* used in arithmetic\",\n                             \": warning: .* \\\\[-Wformat-contains-nul\\\\]\",\n                             \": warning: .* \\\\[-Wformat-zero-length\\\\]\",\n                             \": warning: .* \\\\[-Wpointer-to-int-cast\\\\]\",\n                             \": warning: .* \\\\[-Wsequence-point\\\\]\")\n\n                ## clang warnings\n                warn_re <- c(warn_re,\n                             \": warning: .* GNU extension\",\n                             \": warning: .* \\\\[-Wdeprecated-register\\\\]\",\n                             \": warning: .* \\\\[-Wformat-extra-args\\\\]\", # also gcc\n                             \": warning: .* \\\\[-Wformat-security\\\\]\",\n                             \": warning: .* \\\\[-Wheader-guard\\\\]\",\n                             \": warning: .* \\\\[-Wpointer-arith\\\\]\",\n                             \": warning: .* \\\\[-Wunsequenced\\\\]\",\n                             \": warning: .* \\\\[-Wvla-extension\\\\]\",\n                             \": warning: format string contains '[\\\\]0'\",\n                             \": warning: .* \\\\[-Wc[+][+]11-long-long\\\\]\",\n                             \": warning: empty macro arguments are a C99 feature\"\n                             )\n\n                warn_re <- paste0(\"(\", paste(warn_re, collapse = \"|\"), \")\")\n\n                lines <- grep(warn_re, lines, value = TRUE, useBytes = TRUE)\n\n                ## skip for now some c++11-long-long warnings.\n                ex_re <- \"(/BH/include/boost/|/RcppParallel/include/|/usr/include/|/usr/local/include/|/opt/X11/include/|/usr/X11/include/).*\\\\[-Wc[+][+]11-long-long\\\\]\"\n                lines <- grep(ex_re, lines, invert = TRUE, value = TRUE,\n                              useBytes = TRUE)\n\n                ## and GNU extensions in system headers\n                ex_re <- \"^ *(/usr/|/opt/).*GNU extension\"\n                lines <- grep(ex_re, lines, invert = TRUE, value = TRUE,\n                              useBytes = TRUE)\n\n                ## Ignore install-time readLines() warnings about\n                ## files with incomplete final lines.  Most of these\n                ## come from .install_package_indices(), and should be\n                ## safe to ignore ...\n                lines <- grep(\"Warning: incomplete final line found by readLines\",\n                              lines, invert = TRUE, value = TRUE, useBytes = TRUE)\n\n                check_Stangle <- Sys.getenv(\"_R_CHECK_STANGLE_WARNINGS_\", \"TRUE\")\n                if (!config_val_to_logical(check_Stangle))\n                lines <- grep(\"Warning: value of .* option should be lowercase\",\n                              lines, invert = TRUE, value = TRUE, useBytes = TRUE)\n\n                ## Package writers cannot really do anything about\n                ## non ISO C code in *system* headers.  Also,\n                ## GCC >= 3.4 warns about function pointers\n                ## casts which are \"needed\" for dlsym(), but it\n                ## seems that all systems which have dlsym() also\n                ## support the cast.  Hence, try to ignore these by\n                ## default, but make it possible to get all ISO C\n                ## warnings via an environment variable.\n                if (!R_check_all_non_ISO_C) {\n                    lines <- grep(\"^ */.*: warning: .*ISO C\",\n                                  lines, invert = TRUE, value = TRUE, useBytes = TRUE)\n                    lines <- grep(\"warning: *ISO C forbids.*function pointer\",\n                                  lines, invert = TRUE, value = TRUE, useBytes = TRUE)\n                }\n\n                ## Warnings spotted by gcc with\n                ##   '-Wunused'\n                ## which is implied by '-Wall'.\n                ## Currently only accessible via an internal environment\n                ## variable.\n                check_src_flag <-\n                    Sys.getenv(\"_R_CHECK_SRC_MINUS_W_UNUSED_\", \"FALSE\")\n                if (!config_val_to_logical(check_src_flag)) {\n                    lines <- grep(\"warning: unused\", lines, ignore.case = TRUE,\n                                  invert = TRUE, value = TRUE, useBytes = TRUE)\n                    lines <- grep(\"warning: .* set but not used\", lines,\n                                  ignore.case = TRUE,\n                                  invert = TRUE, value = TRUE, useBytes = TRUE)\n                }\n                ## (gfortran seems to use upper case.)\n\n                ## Warnings spotted by clang with\n                ##   '-Wsometimes-uninitialized'\n                ## which is implied by '-Wall'.\n                ## Currently only accessible via an internal environment\n                ## variable.\n                check_src_flag <-\n                    Sys.getenv(\"_R_CHECK_SRC_MINUS_W_SOMETIMES_UNINITIALIZED_\",\n                               \"FALSE\")\n                if (!config_val_to_logical(check_src_flag)) {\n                    lines <- grep(\"warning: .* is used uninitialized whenever\",\n                                  lines,\n                                  invert = TRUE, value = TRUE, useBytes\n                                  = TRUE)\n                }\n\n                ## Warnings spotted by gfortran >= 4.0 with '-Wall'.\n                ## Justified in principle, it seems.\n                ## Let's filter them for the time being, and maybe\n                ## revert this later on ... but make it possible to\n                ## suppress filtering out by setting the internal\n                ## environment variable _R_CHECK_WALL_FORTRAN_ to\n                ## something \"true\".\n                check_src_flag <- Sys.getenv(\"_R_CHECK_WALL_FORTRAN_\", \"FALSE\")\n                if (!config_val_to_logical(check_src_flag)) {\n                    warn_re <-\n                        c(\"Label .* at \\\\(1\\\\) defined but not used\",\n                          \"Line truncated at \\\\(1\\\\)\",\n                          \"ASSIGN statement at \\\\(1\\\\)\",\n                          \"Assigned GOTO statement at \\\\(1\\\\)\",\n                          \"arithmetic IF statement at \\\\(1\\\\)\",\n                          \"Nonconforming tab character (in|at)\")\n                    warn_re <- paste0(\"(\", paste(warn_re, collapse = \"|\"), \")\")\n                    lines <- grep(warn_re, lines, invert = TRUE, value = TRUE)\n                }\n\n                if (WINDOWS) {\n                    ## Warning on Windows with some packages that\n                    ## cannot transparently be installed bi-arch.\n                    lines <- grep(\"Warning: this package has a non-empty 'configure.win' file\",\n                                  lines, invert = TRUE, value = TRUE)\n                    ## Warning on x64 Windows gcc 4.5.1 that\n                    ## seems to be spurious\n                    lines <- grep(\"Warning: .drectve .* unrecognized\",\n                                  lines, invert = TRUE, value = TRUE)\n                }\n\n                check_imports_flag <-\n                    Sys.getenv(\"_R_CHECK_REPLACING_IMPORTS_\", \"TRUE\")\n                if (!config_val_to_logical(check_imports_flag))\n                    lines <- grep(\"Warning: replacing previous import\", lines,\n                                  fixed = TRUE, invert = TRUE, value = TRUE)\n                else {\n                    this <- unique(grep(\"Warning: replacing previous import\",\n                                        lines, fixed = TRUE, value = TRUE))\n                    this <- grep(paste0(sQuote(pkgname), \"$\"), this,\n                                 value = TRUE)\n                    lines <- grep(\"Warning: replacing previous import\", lines,\n                                  fixed = TRUE, invert = TRUE, value = TRUE)\n                    lines <- c(lines, this)\n                }\n                check_FirstLib_flag <-\n                    Sys.getenv(\"_R_CHECK_DOT_FIRSTLIB_\", \"FALSE\")\n                if (!config_val_to_logical(check_FirstLib_flag))\n                    lines <- grep(\"Warning: ignoring .First.lib()\", lines,\n                                  fixed = TRUE, invert = TRUE, value = TRUE)\n\n                lines <- unique(lines)\n\n                note_re <-\n                    \"warning: control may reach end of non-void function\"\n\n                notes <- grep(note_re, lines0, value = TRUE, useBytes = TRUE)\n                notes <- unique(notes)\n\n                if (length(lines)) {\n                    warningLog(Log, \"Found the following significant warnings:\")\n                    printLog0(Log, .format_lines_with_indent(lines), \"\\n\")\n                    if(length(notes)) {\n                        printLog(Log,\n                                 \"Found the following additional warnings:\\n\")\n                        printLog0(Log, .format_lines_with_indent(notes),\n                                  \"\\n\")\n                    }\n                    printLog0(Log, sprintf(\"See %s for details.\\n\",\n                                           sQuote(outfile)))\n                } else if(length(notes)) {\n                    noteLog(Log, \"Found the following warnings:\")\n                    printLog0(Log, .format_lines_with_indent(notes), \"\\n\")\n                    printLog0(Log, sprintf(\"See %s for details.\\n\",\n                                           sQuote(outfile)))\n                } else resultLog(Log, \"OK\")\n            }   ## end of case B\n        }\n\n    }\n\n    ## This requires a GNU-like 'du' with 1k block sizes,\n    ## so use -k (which POSIX requires).\n    ## It also depends on the total being last.\n    check_install_sizes <- function()\n    {\n        ## if we used a log, the installation need not still exist.\n        pd <- file.path(libdir, pkgname)\n        if (!dir.exists(pd)) return()\n        checkingLog(Log, \"installed package size\")\n        owd <- setwd(pd)\n        res <- system2(\"du\", \"-k\", TRUE, TRUE)\n        sizes <- as.integer(sub(\"\\\\D.*\", \"\", res))\n        dirs <- sub(\"^\\\\d*\\\\s*\", \"\", res)\n        res2 <- data.frame(size = sizes, dir = I(dirs))\n        total <- res2[nrow(res2), 1L]\n        if(!is.na(total) && total > 1024*5 && # report at 5Mb\n           pkgname != \"Matrix\") { # <- large recommended package\n            noteLog(Log)\n            printLog(Log, sprintf(\"  installed size is %4.1fMb\\n\", total/1024))\n            rest <- res2[-nrow(res2), ]\n            rest[, 2L] <- sub(\"./\", \"\", rest[, 2L])\n            # keep only top-level directories\n            rest <- rest[!grepl(\"/\", rest[, 2L]), ]\n            rest <- rest[rest[, 1L] > 1024, ] # > 1Mb\n            if(nrow(rest)) {\n                o <- sort.list(rest[, 2L])\n                printLog(Log, \"  sub-directories of 1Mb or more:\\n\")\n                size <- sprintf('%4.1fMb', rest[, 1L]/1024)\n                printLog0(Log,\n                          paste(\"    \",\n                                format(rest[o, 2L], justify = \"left\"),\n                                \"  \",\n                                format(size[o], justify = \"right\"),\n                                \"\\n\",\n                                sep=\"\"))\n            }\n        } else resultLog(Log, \"OK\")\n        setwd(owd)\n    }\n\n    check_description <- function()\n    {\n        checkingLog(Log, \"for file \",\n                    sQuote(file.path(pkgname0, \"DESCRIPTION\")))\n        if (\"DESCRIPTION\" %in% dir(pkgdir)) {\n            f <- file.path(pkgdir, \"DESCRIPTION\")\n            desc <- try(.read_description(f))\n            if (inherits(desc, \"try-error\") || !length(desc)) {\n                resultLog(Log, \"EXISTS but not correct format\")\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            mandatory <- c(\"Package\", \"Version\", \"License\", \"Description\",\n                           \"Title\", \"Author\", \"Maintainer\")\n            OK <- sapply(desc[mandatory], function(x) !is.na(x) && nzchar(x))\n            if(!all(OK)) {\n                fail <- mandatory[!OK]\n                msg <- ngettext(length(fail),\n                                \"Required field missing or empty:\",\n                                \"Required fields missing or empty:\")\n                msg <- paste0(msg, \"\\n\", .pretty_format(fail))\n                errorLog(Log, msg)\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            if(!grepl(\"^[[:alpha:]][[:alnum:].]*[[:alnum:]]$\", desc[\"Package\"])\n               || grepl(\"[.]$\", desc[\"Package\"])) {\n                warningLog(Log)\n                printLog(Log,\"  Package name is not portable:\\n\",\n                         \"  It must start with a letter, contain letters, digits or dot\\n\",\n                         \"  have at least 2 characters and not end with a dot.\\n\")\n            } else resultLog(Log, \"OK\")\n            encoding <- desc[\"Encoding\"]\n        } else if (file.exists(f <- file.path(pkgdir, \"DESCRIPTION\"))) {\n            errorLog(Log,\n                     \"File DESCRIPTION does not exist but there is a case-insensitive match.\")\n            summaryLog(Log)\n            do_exit(1L)\n        } else {\n            resultLog(Log, \"NO\")\n            summaryLog(Log)\n            do_exit(1L)\n        }\n        if (!is.na(desc[\"Type\"])) { # standard packages do not have this\n            checkingLog(Log, \"extension type\")\n            resultLog(Log, desc[\"Type\"])\n            if (desc[\"Type\"] != \"Package\") {\n                printLog(Log,\n                         \"Only 'Type = Package' extensions can be checked.\\n\")\n                summaryLog(Log)\n                do_exit(0L)\n            }\n        }\n        if (!is.na(desc[\"Bundle\"])) {\n            messageLog(Log, \"looks like \", sQuote(pkgname0),\n                       \" is a package bundle -- they are defunct\")\n            errorLog(Log, \"\")\n            summaryLog(Log)\n            do_exit(1L)\n        }\n\n        messageLog(Log,\n                   sprintf(\"this is package %s version %s\",\n                           sQuote(desc[\"Package\"]),\n                           sQuote(desc[\"Version\"])))\n\n        if (!is.na(encoding))\n            messageLog(Log, \"package encoding: \", encoding)\n\n        desc\n    }\n\n    check_CRAN_incoming <- function()\n    {\n        checkingLog(Log, \"CRAN incoming feasibility\")\n        res <- .check_package_CRAN_incoming(pkgdir)\n        if(length(res)) {\n            out <- format(res)\n            if((length(out) == 1L) &&\n               grepl(\"^Maintainer: \", out)) {\n                ## Special-case when there is only the maintainer\n                ## address to note (if at all).\n                maintainer <- res$Maintainer\n                if(nzchar(maintainer) &&\n                   identical(maintainer,\n                             Sys.getenv(\"_R_CHECK_MAINTAINER_ADDRESS_\"))) {\n                    resultLog(Log, \"OK\")\n                    out <- character()\n                }\n                else resultLog(Log, \"Note_to_CRAN_maintainers\")\n            } else if(length(res$bad_package)) {\n                errorLog(Log)\n                printLog0(Log, paste(c(out, \"\"), collapse = \"\\n\"))\n\t\tmaybe_exit(1L)\n            } else if(length(res$bad_version) ||\n                      identical(res$foss_with_BuildVignettes, TRUE) ||\n                      res$empty_Maintainer_name ||\n                      res$Maintainer_needs_quotes)\n                warningLog(Log)\n            else if(length(res) > 1L) noteLog(Log)\n            else resultLog(Log, \"OK\")\n            printLog0(Log, paste(out, \"\\n\", sep = \"\"))\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_dependencies <- function()\n    {\n        ## Try figuring out whether the package dependencies can be\n        ## resolved at run time.  Ideally, the installation\n        ## mechanism would do this, and we also do not check\n        ## versions ... also see whether vignette and namespace\n        ## package dependencies are recorded in DESCRIPTION.\n\n        ## <NOTE>\n        ## We are not checking base packages here, so all packages do\n        ## have a description file.\n        ## </NOTE>\n\n        ## <NOTE>\n        ## If a package has a namespace, checking dependencies will\n        ## try making use of it without the NAMESPACE file ever\n        ## being validated.\n        ## Uncaught errors can lead to messages like\n        ##   * checking package dependencies ... ERROR\n        ##   Error in e[[1]] : object is not subsettable\n        ##   Execution halted\n        ## which are not too helpful :-(\n        ## Hence, we try to intercept this here.\n\n        if (!extra_arch &&\n            file.exists(file.path(pkgdir, \"NAMESPACE\"))) {\n            checkingLog(Log, \"package namespace information\")\n            ns <- tryCatch(parseNamespaceFile(basename(pkgdir),\n                                              dirname(pkgdir)),\n                     error = function(e) {\n                         errorLog(Log)\n                         printLog0(Log,\n                                   \"Invalid NAMESPACE file, parsing gives:\",\n                                   \"\\n\", as.character(e), \"\\n\")\n                         msg_NAMESPACE <-\n                             c(\"See section 'Package namespaces'\",\n                               \" in the 'Writing R Extensions' manual.\\n\")\n                         wrapLog(msg_NAMESPACE)\n                         summaryLog(Log)\n                         do_exit(1L)\n                     })\n            OK <- TRUE\n            ## Look for empty importFrom\n            imp <- ns$imports\n            lens <- lengths(imp)\n            imp <- imp[lens == 2L]\n            nm <- sapply(imp, \"[[\", 1)\n            lens <- sapply(imp, function(x) length(x[[2]]))\n            bad <- nm[lens == 0L]\n            if(length(bad)) {\n                OK <- FALSE\n                msg <- if(length(bad) == 1L)\n                    sprintf(\"  Namespace with empty importFrom: %s\", sQuote(bad))\n                else\n                    paste(\"  Namespaces with empty importFrom:\",\n                          .pretty_format(sort(bad)), sep = \"\\n\")\n                noteLog(Log, msg)\n            }\n            nS3methods <- nrow(ns$S3methods)\n            if (nS3methods > 500L) {\n                ## check that this is installable in R 3.0.1\n                meta <- .read_description(file.path(pkgdir, \"DESCRIPTION\"))\n                deps <- .split_description(meta, verbose = TRUE)$Rdepends2\n                status <- 0L\n                current <- as.numeric_version(\"3.0.1\")\n                for(depends in deps) {\n                    ## .check_package_description will insist on these operators\n                    if(!depends$op %in% c(\"<=\", \">=\", \"<\", \">\", \"==\", \"!=\"))\n                        next\n                    status <- if(inherits(depends$version, \"numeric_version\"))\n                        !do.call(depends$op, list(current, depends$version))\n                    else {\n                        ver <- R.version\n                        if (ver$status %in% c(\"\", \"Patched\")) FALSE\n                        else !do.call(depends$op,\n                                      list(ver[[\"svn rev\"]],\n                                           as.numeric(sub(\"^r\", \"\", depends$version))))\n                    }\n                    if(status != 0L)  break\n                }\n                if (status == 0L) {\n                    OK <- FALSE\n                    msg <- sprintf(\"R < 3.0.2 had a limit of 500 registered S3 methods: found %d\",\n                                   nS3methods)\n                    noteLog(Log, msg)\n                }\n            }\n            if(OK) resultLog(Log, \"OK\")\n        }\n\n        checkingLog(Log, \"package dependencies\")\n        ## Everything listed in Depends or Suggests or Imports\n        ## should be available for successfully running R CMD check.\n        ## \\VignetteDepends{} entries not \"required\" by the package code\n        ## must be in Suggests.  Note also that some of us think that a\n        ## package vignette must require its own package, which OTOH is\n        ## not required in the package DESCRIPTION file.\n        ## Namespace imports must really be in Depends.\n        res <- .check_package_depends(pkgdir, R_check_force_suggests,\n                                      check_incoming)\n        if(any(lengths(res) > 0L)) {\n            out <- format(res)\n            allowed <- c(\"suggests_but_not_installed\",\n                         \"enhances_but_not_installed\",\n                         \"many_depends\",\n                         \"skipped\",\n                         \"hdOnly\",\n                         if(!check_incoming) \"bad_engine\")\n            if(!all(names(res) %in% allowed)) {\n                errorLog(Log)\n                printLog0(Log, paste(out, collapse = \"\\n\"), \"\\n\")\n                if(length(res$suggested_but_not_installed))\n                   wrapLog(\"The suggested packages are required for\",\n                           \"a complete check.\\n\",\n                           \"Checking can be attempted without them\",\n                           \"by setting the environment variable\",\n                           \"_R_CHECK_FORCE_SUGGESTS_\",\n                           \"to a false value.\\n\\n\")\n                wrapLog(msg_DESCRIPTION)\n                summaryLog(Log)\n                do_exit(1L)\n            } else {\n                noteLog(Log)\n                printLog0(Log, paste(out, collapse = \"\\n\"))\n            }\n        } else resultLog(Log, \"OK\")\n    }\n\n    check_sources <- function()\n    {\n        checkingLog(Log, \"if this is a source package\")\n        ## <NOTE>\n        ## This check should be adequate, but would not catch a manually\n        ## installed package, nor one installed prior to 1.4.0.\n        ## </NOTE>\n        if (!is.na(desc[\"Built\"])) {\n            errorLog(Log)\n            printLog(Log, \"Only *source* packages can be checked.\\n\")\n            summaryLog(Log)\n            do_exit(1L)\n        } else if (!grepl(\"^check\", install)) {\n            ini <- character()\n            ## Check for package 'src' subdirectories with object\n            ## files (but not if installation was already performed).\n            pat <- \"(a|o|[ls][ao]|sl|obj|dll)\" # Object file/library extensions.\n            any <- FALSE\n            srcd <- file.path(pkgdir, \"src\")\n            if (dir.exists(srcd) &&\n                length(of <- list_files_with_exts(srcd, pat))) {\n                if (!any) warningLog(Log)\n                any <- TRUE\n                of <- sub(paste0(\".*/\", file.path(pkgname, \"src\"), \"/\"),\n                          \"\", of)\n                printLog0(Log,\n                          sprintf(\"Subdirectory %s contains apparent object files/libraries\\n\",\n                                  sQuote(file.path(pkgname, \"src\"))),\n                          paste(strwrap(paste(of, collapse = \" \"),\n                                        indent = 2L, exdent = 2L),\n                                collapse = \"\\n\"),\n                          \"\\nObject files/libraries should not be included in a source package.\\n\")\n                ini <- \"\"\n            }\n            ## A submission had src-i386 etc from multi-arch builds\n            ad <- list.dirs(pkgdir, recursive = FALSE)\n            if(thispkg_src_subdirs != \"no\" &&\n               any(ind <- grepl(\"/src-(i386|x64|x86_64|ppc)$\", ad))) {\n                if(!any) warningLog(Log)\n                any <- TRUE\n                msg <- ngettext(sum(ind),\n                                \"Found the following directory with a name of a multi-arch build directory:\\n\",\n                                \"Found the following directories with names of multi-arch build directories:\\n\",\n                                domain = NA)\n                printLog0(Log,\n                          ini,\n                          msg,\n                          .format_lines_with_indent(basename(ad[ind])),\n                          \"\\n\",\n                          \"Most likely, these were included erroneously.\\n\")\n                ini <- \"\"\n            }\n            if (thispkg_src_subdirs != \"no\" && dir.exists(srcd)) {\n                setwd(srcd)\n                if (!file.exists(\"Makefile\") &&\n                    !file.exists(\"Makefile.win\") &&\n                    !(file.exists(\"Makefile.in\") && spec_install)) {\n                    ## Recognized extensions for sources or headers.\n                    srcfiles <- dir(\".\", all.files = TRUE)\n                    srcfiles <- srcfiles[!dir.exists(srcfiles)]\n                    srcfiles <- grep(\"(\\\\.([cfmCM]|cc|cpp|f90|f95|mm|h|o|so)$|^Makevars|-win\\\\.def|^install\\\\.libs\\\\.R$)\",\n                                     srcfiles, invert = TRUE, value = TRUE)\n                    if (length(srcfiles)) {\n                        if (!any) warningLog(Log)\n                        any <- TRUE\n                        msg <- c(ini,\n                                 paste(\"Subdirectory\",\n                                       sQuote(\"src\"),\n                                       \"contains:\"),\n                                 strwrap(paste(srcfiles, collapse = \" \"),\n                                         indent = 2, exdent = 2),\n                                 strwrap(\"These are unlikely file names for src files.\"),\n                                 \"\")\n                        printLog0(Log, paste(msg, collapse = \"\\n\"))\n                        ini <- \"\"\n                    }\n                }\n                setwd(startdir)\n            }\n            ## All remaining checks give notes and not warnings.\n            if(length(ini))\n                ini <- c(\"\",\n                         \"In addition to the above warning(s), found the following notes:\",\n                         \"\")\n            files <- list.files(pkgdir, recursive = TRUE)\n            ## Check for object files not directly in src.\n            ## (Note that the above does not look for object files in\n            ## subdirs of src.)\n            bad <- files[grepl(sprintf(\"\\\\.%s$\", pat), basename(files))]\n            bad <- bad[dirname(bad) != \"src\" |\n                       dirname(dirname(bad)) != \".\"]\n            if(length(bad)) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                msg <- c(ini,\n                         \"Found the following apparent object files/libraries:\",\n                         strwrap(paste(bad, collapse = \" \"),\n                                 indent = 2L, exdent = 2L),\n                         \"Object files/libraries should not be included in a source package.\\n\")\n                printLog0(Log, paste(msg, collapse = \"\\n\"))\n                ini <- \"\"\n            }\n            ## Check for installed copies of the package in some subdir.\n            files <- files[basename(dirname(files)) == \"Meta\"]\n            if(length(files) &&\n               all(!is.na(match(c(\"package.rds\", \"hsearch.rds\"),\n                                basename(files))))) {\n                if(!any) noteLog(Log)\n                any <- TRUE\n                msg <- c(ini,\n                         sprintf(\"Subdirectory %s seems to contain an installed version of the package.\\n\",\n                                 sQuote(dirname(dirname(files[1L])))))\n                printLog0(Log, paste(msg, collapse = \"\\n\"))\n            }\n            if (!any) resultLog(Log, \"OK\")\n        } else resultLog(Log, \"OK\")\n    }\n\n    do_exit <- function(status = 1L) q(\"no\", status = status, runLast = FALSE)\n\n    maybe_exit <- function(status = 1L) {\n\tif (R_check_exit_on_first_error) {\n\t    printLog(Log, \"NOTE:  Quitting check on first error.\\n\")\n\t    summaryLog(Log)\n\t    do_exit(status)\n\t}\n    }\n\n    env_path <- function(...) {\n        paths <- c(...)\n        paste(paths[nzchar(paths)], collapse = .Platform$path.sep)\n    }\n\n    Usage <- function() {\n        cat(\"Usage: R CMD check [options] pkgs\",\n            \"\",\n            \"Check R packages from package sources, which can be directories or\",\n            \"package 'tar' archives with extension '.tar.gz', '.tar.bz2',\",\n            \"'.tar.xz' or '.tgz'.\",\n            \"\",\n            \"A variety of diagnostic checks on directory structure, index and\",\n            \"control files are performed.  The package is installed into the log\",\n            \"directory and production of the package PDF manual is tested.\",\n            \"All examples and tests provided by the package are tested to see if\",\n            \"they run successfully.  By default code in the vignettes is tested,\",\n            \"as is re-building the vignette PDFs.\",\n            \"\",\n            \"Options:\",\n            \"  -h, --help\t\tprint short help message and exit\",\n            \"  -v, --version\t\tprint version info and exit\",\n            \"  -l, --library=LIB     library directory used for test installation\",\n            \"\t\t\tof packages (default is outdir)\",\n            \"  -o, --output=DIR      directory for output, default is current directory.\",\n            \"\t\t\tLogfiles, R output, etc. will be placed in 'pkg.Rcheck'\",\n            \"\t\t\tin this directory, where 'pkg' is the name of the\",\n            \"\t\t\tchecked package\",\n            \"      --no-clean        do not clean 'outdir' before using it\",\n            \"      --no-codoc        do not check for code/documentation mismatches\",\n            \"      --no-examples     do not run the examples in the Rd files\",\n            \"      --no-install      skip installation and associated tests\",\n            \"      --no-tests        do not run code in 'tests' subdirectory\",\n            \"      --no-manual       do not produce the PDF manual\",\n            \"      --no-vignettes    do not run R code in vignettes nor build outputs\",\n            \"      --no-build-vignettes    do not build vignette outputs\",\n            \"      --run-dontrun     do run \\\\dontrun sections in the Rd files\",\n            \"      --run-donttest    do run \\\\donttest sections in the Rd files\",\n            \"      --use-gct         use 'gctorture(TRUE)' when running examples/tests\",\n            \"      --use-valgrind    use 'valgrind' when running examples/tests/vignettes\",\n            \"      --timings         record timings for examples\",\n            \"      --install-args=\tcommand-line args to be passed to INSTALL\",\n\t    \"      --test-dir=       look in this subdirectory for test scripts (default tests)\",\n            \"      --check-subdirs=default|yes|no\",\n            \"\t\t\trun checks on the package subdirectories\",\n            \"\t\t\t(default is yes for a tarball, no otherwise)\",\n            \"      --as-cran         select customizations similar to those used\",\n            \"                        for CRAN incoming checking\",\n            \"\",\n            \"The following options apply where sub-architectures are in use:\",\n            \"      --extra-arch      do only runtime tests needed for an additional\",\n            \"                        sub-architecture.\",\n            \"      --multiarch       do runtime tests on all installed sub-archs\",\n            \"      --no-multiarch    do runtime tests only on the main sub-architecture\",\n            \"      --force-multiarch run tests on all sub-archs even for packages\",\n            \"                        with no compiled code\",\n            \"\",\n            \"By default, all test sections are turned on.\",\n            \"\",\n            \"Report bugs at bugs.r-project.org .\", sep=\"\\n\")\n    }\n\n###--- begin{.check_packages()} \"main\" ---\n\n    options(showErrorCalls=FALSE, warn = 1)\n\n    ## Read in check environment file.\n    Renv <- Sys.getenv(\"R_CHECK_ENVIRON\", unset = NA)\n    if(!is.na(Renv)) {\n        ## Do not read any check environment file if R_CHECK_ENVIRON is\n        ## set to empty of something non-existent.\n        if(nzchar(Renv) && file.exists(Renv)) readRenviron(Renv)\n    } else {\n        ## Read in ~/.R/check.Renviron[.rarch] (if it exists).\n        rarch <- .Platform$r_arch\n        if (nzchar(rarch) &&\n            file.exists(Renv <- paste(\"~/.R/check.Renviron\", rarch, sep = \".\")))\n            readRenviron(Renv)\n        else if (file.exists(Renv <- \"~/.R/check.Renviron\"))\n            readRenviron(Renv)\n    }\n\n    td0 <- as.numeric(Sys.getenv(\"_R_CHECK_TIMINGS_\"))\n    if (is.na(td0)) td0 <- Inf\n\n    ## A user might have turned on JIT compilation.  That does not\n    ## work well, so mostly disable it\n    jit <- Sys.getenv(\"R_ENABLE_JIT\")\n    jitstr <- if(nzchar(jit)) {\n        Sys.setenv(R_ENABLE_JIT = \"0\")\n        paste0(\"R_ENABLE_JIT=\", jit)\n    } else character()\n\n    if (is.null(args)) {\n        args <- commandArgs(TRUE)\n        ## it seems that splits on spaces, so try harder.\n        args <- paste(args, collapse=\" \")\n        args <- strsplit(args,'nextArg', fixed = TRUE)[[1L]][-1L]\n    }\n\n    clean <- TRUE\n    do_codoc <- TRUE\n    do_examples <- TRUE\n    do_install_arg <- TRUE; install <- \"\"\n    do_tests <- TRUE\n    do_vignettes <- TRUE\n    do_build_vignettes <- TRUE\n    do_manual <- TRUE\n    use_gct <- FALSE\n    use_valgrind <- FALSE\n    do_timings <- FALSE\n    install_args <- NULL\n    test_dir <- \"tests\"\n    check_subdirs <- \"\"           # defaults to R_check_subdirs_strict\n    extra_arch <- FALSE\n    spec_install <- FALSE\n    multiarch <- NA\n    force_multiarch <- FALSE\n    as_cran <- FALSE\n    run_dontrun <- FALSE\n    run_donttest <- FALSE\n\n    libdir <- \"\"\n    outdir <- \"\"\n    pkgs <- character()\n    while(length(args)) {\n        a <- args[1L]\n        if (a %in% c(\"-h\", \"--help\")) {\n            Usage()\n            do_exit(0L)\n        }\n        else if (a %in% c(\"-v\", \"--version\")) {\n            cat(\"R add-on package check: \",\n                R.version[[\"major\"]], \".\",  R.version[[\"minor\"]],\n                \" (r\", R.version[[\"svn rev\"]], \")\\n\", sep = \"\")\n            cat(\"\",\n                \"Copyright (C) 1997-2013 The R Core Team.\",\n                \"This is free software; see the GNU General Public License version 2\",\n                \"or later for copying conditions.  There is NO warranty.\",\n                sep=\"\\n\")\n            do_exit(0L)\n        } else if (a == \"-o\") {\n            if (length(args) >= 2L) {outdir <- args[2L]; args <- args[-1L]}\n            else stop(\"-o option without value\", call. = FALSE)\n        } else if (substr(a, 1, 9) == \"--output=\") {\n            outdir <- substr(a, 10, 1000)\n        } else if (a == \"-l\") {\n            if (length(args) >= 2L) {libdir <- args[2L]; args <- args[-1L]}\n            else stop(\"-l option without value\", call. = FALSE)\n        } else if (substr(a, 1, 10) == \"--library=\") {\n            libdir <- substr(a, 11, 1000)\n        } else if (a == \"--no-clean\") {\n            clean  <- FALSE\n        } else if (a == \"--no-codoc\") {\n            do_codoc  <- FALSE\n        } else if (a == \"--no-examples\") {\n            do_examples  <- FALSE\n        } else if (a == \"--no-install\") {\n            do_install_arg  <- FALSE\n        } else if (substr(a, 1, 10) == \"--install=\") {\n            install <- substr(a, 11, 1000)\n        } else if (a == \"--no-tests\") {\n            do_tests  <- FALSE\n        } else if (a == \"--no-build-vignettes\") {\n            do_build_vignettes  <- FALSE\n        } else if (a == \"--no-rebuild-vignettes\") { # pre-3.0.0 version\n            stop(\"'--no-rebuild-vignettes' is defunct: use '--no-build-vignettes' instead\",\n                 call. = FALSE, domain = NA)\n        } else if (a == \"--no-vignettes\") {\n            do_vignettes  <- FALSE\n        } else if (a == \"--no-manual\") {\n            do_manual  <- FALSE\n        } else if (a == \"--no-latex\") {\n            stop(\"'--no-latex' is defunct: use '--no-manual' instead\",\n                 call. = FALSE, domain = NA)\n        } else if (a == \"--run-dontrun\") {\n            run_dontrun  <- TRUE\n        } else if (a == \"--run-donttest\") {\n            run_donttest  <- TRUE\n        } else if (a == \"--use-gct\") {\n            use_gct  <- TRUE\n        } else if (a == \"--use-valgrind\") {\n            use_valgrind  <- TRUE\n        } else if (a == \"--timings\") {\n            do_timings  <- TRUE\n        } else if (substr(a, 1, 15) == \"--install-args=\") {\n            install_args <- substr(a, 16, 1000)\n\t} else if (substr(a, 1, 11) == \"--test-dir=\") {\n\t    test_dir <- substr(a, 12, 1000)\n        } else if (substr(a, 1, 16) == \"--check-subdirs=\") {\n            check_subdirs <- substr(a, 17, 1000)\n        } else if (a == \"--extra-arch\") {\n            extra_arch  <- TRUE\n        } else if (a == \"--multiarch\") {\n            multiarch  <- TRUE\n        } else if (a == \"--no-multiarch\") {\n            multiarch  <- FALSE\n        } else if (a == \"--force-multiarch\") {\n            force_multiarch  <- TRUE\n        } else if (a == \"--as-cran\") {\n            as_cran  <- TRUE\n        } else if (substr(a, 1, 9) == \"--rcfile=\") {\n            warning(\"configuration files are not supported as from R 2.12.0\")\n        } else if (substr(a, 1, 1) == \"-\") {\n            message(\"Warning: unknown option \", sQuote(a))\n        } else pkgs <- c(pkgs, a)\n        args <- args[-1L]\n    }\n\n    ## record some of the options used.\n    opts <- character()\n    if (install == \"fake\") opts <- c(opts, \"--install=fake\")\n    if (!do_install_arg) opts <- c(opts, \"--no-install\")\n    if (install == \"no\") {\n        opts <- c(opts, \"--install=no\")\n        do_install_arg <- FALSE\n    }\n    if (run_dontrun) opts <- c(opts, \"--run-dontrun\")\n    if (run_donttest) opts <- c(opts, \"--run-donttest\")\n    opts0 <- opts # other options are added later.\n\n    if (install == \"fake\") {\n        ## If we fake installation, then we cannot *run* any code.\n        do_examples <- do_tests <- do_vignettes <- do_build_vignettes <- 0\n        spec_install <- TRUE\n        multiarch <- FALSE\n    }\n\n    if (!identical(multiarch, FALSE)) {\n        ## see if there are multiple installed architectures, and if they work\n        if (WINDOWS) {\n            ## always has sub-archs as from R 2.12.0.\n            ## usually if two are installed, it was done on a 64-bit OS,\n            ## but the filesystem might be shared betweeen OSes.\n            f <- dir(file.path(R.home(), \"bin\"))\n            archs <- f[f %in% c(\"i386\", \"x64\")]\n            ## if we have x64, can only run it on a 64-bit OS\n            if (length(archs) > 1L && !grepl(\"x64\", utils:::win.version()))\n                archs <- \"i386\"\n        } else {\n            wd2 <- setwd(file.path(R.home(\"bin\"), \"exec\"))\n            archs <- Sys.glob(\"*\")\n            setwd(wd2)\n            if (length(archs) > 1L)\n                for (arch in archs) {\n                    if (arch == rarch) next\n                    cmd <- paste0(file.path(R.home(), \"bin\", \"R\"),\n                                  \" --arch=\", arch,\n                                  \" --version > /dev/null\")\n                    if (system(cmd)) archs <- archs[archs != arch]\n                }\n        }\n        if (length(archs) <= 1L && isTRUE(multiarch))\n            warning(\"'--multiarch' specified with only one usable sub-architecture\",\n                    call.=FALSE, immediate. = TRUE)\n        multiarch <- length(archs) > 1L\n    }\n\n\n    ## Use system default unless explicitly specified otherwise.\n    Sys.setenv(R_DEFAULT_PACKAGES=\"\")\n\n    ## Configurable variables\n    R_check_use_install_log <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_USE_INSTALL_LOG_\", \"TRUE\"))\n    R_check_subdirs_nocase <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_SUBDIRS_NOCASE_\", \"TRUE\"))\n    R_check_all_non_ISO_C <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_ALL_NON_ISO_C_\", \"FALSE\"))\n    R_check_subdirs_strict <-\n        Sys.getenv(\"_R_CHECK_SUBDIRS_STRICT_\", \"default\")\n    R_check_Rd_contents <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_CONTENTS_\", \"TRUE\"))\n    R_check_Rd_line_widths <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_LINE_WIDTHS_\", \"FALSE\"))\n    R_check_Rd_style <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_STYLE_\", \"TRUE\"))\n    R_check_Rd_xrefs <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_RD_XREFS_\", \"TRUE\"))\n    R_check_use_codetools <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_USE_CODETOOLS_\", \"TRUE\"))\n    ## Howver, we cannot use this if we did not install the recommended packages\n    if(R_check_use_codetools) {\n        tmp <- tryCatch(find.package('codetools'), error = identity)\n        if(inherits(tmp, \"error\")) R_check_use_codetools <- FALSE\n    }\n    R_check_executables <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_EXECUTABLES_\", \"TRUE\"))\n    R_check_executables_exclusions <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_EXECUTABLES_EXCLUSIONS_\", \"TRUE\"))\n    R_check_permissions <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_PERMISSIONS_\",\n                                         as.character(.Platform$OS.type == \"unix\")))\n    R_check_dot_internal <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_DOT_INTERNAL_\", \"TRUE\"))\n    R_check_depr_def <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_DEPRECATED_DEFUNCT_\", \"FALSE\"))\n    R_check_ascii_code <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_ASCII_CODE_\", \"TRUE\"))\n    R_check_ascii_data <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_ASCII_DATA_\", \"TRUE\"))\n     R_check_compact_data <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_COMPACT_DATA_\", \"TRUE\"))\n    R_check_vc_dirs <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_VC_DIRS_\", \"FALSE\"))\n    R_check_pkg_sizes <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_PKG_SIZES_\", \"TRUE\")) &&\n        nzchar(Sys.which(\"du\"))\n    R_check_doc_sizes <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_DOC_SIZES_\", \"TRUE\")) &&\n        nzchar(Sys.which(Sys.getenv(\"R_QPDF\", \"qpdf\")))\n    R_check_doc_sizes2 <-\n    \tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_DOC_SIZES2_\", \"FALSE\"))\n    R_check_code_assign_to_globalenv <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_CODE_ASSIGN_TO_GLOBALENV_\",\n                                         \"FALSE\"))\n    R_check_code_attach <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_CODE_ATTACH_\", \"FALSE\"))\n    R_check_code_data_into_globalenv <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_CODE_DATA_INTO_GLOBALENV_\",\n                                         \"FALSE\"))\n\n    ## Only relevant when the package is loaded, thus installed.\n    R_check_suppress_RandR_message <-\n        do_install_arg && config_val_to_logical(Sys.getenv(\"_R_CHECK_SUPPRESS_RANDR_MESSAGE_\", \"TRUE\"))\n    R_check_force_suggests <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_FORCE_SUGGESTS_\", \"TRUE\"))\n    R_check_skip_tests_arch <-\n        unlist(strsplit(Sys.getenv(\"_R_CHECK_SKIP_TESTS_ARCH_\"), \",\")[[1]])\n    R_check_skip_examples_arch <-\n        unlist(strsplit(Sys.getenv(\"_R_CHECK_SKIP_EXAMPLES_ARCH_\"), \",\")[[1]])\n    R_check_skip_arch <-\n        unlist(strsplit(Sys.getenv(\"_R_CHECK_SKIP_ARCH_\"), \",\")[[1]])\n    R_check_unsafe_calls <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_UNSAFE_CALLS_\", \"TRUE\"))\n    R_check_depends_only <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_DEPENDS_ONLY_\", \"FALSE\"))\n    R_check_suggests_only <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_SUGGESTS_ONLY_\", \"FALSE\"))\n    R_check_FF <- Sys.getenv(\"_R_CHECK_FF_CALLS_\", \"true\")\n    R_check_FF_DUP <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_FF_DUP_\", \"TRUE\"))\n    R_check_toplevel_files <-\n        config_val_to_logical(Sys.getenv(\"_R_CHECK_TOPLEVEL_FILES_\", \"FALSE\"))\n    R_check_exit_on_first_error <-\n\tconfig_val_to_logical(Sys.getenv(\"_R_CHECK_EXIT_ON_FIRST_ERROR_\", \"FALSE\"))\n\n    if (!nzchar(check_subdirs)) check_subdirs <- R_check_subdirs_strict\n\n    if (as_cran) {\n        if (extra_arch) {\n            message(\"'--as-cran' turns off '--extra-arch'\")\n            extra_arch <- FALSE\n        }\n        Sys.setenv(\"_R_CHECK_TIMINGS_\" = \"10\")\n        Sys.setenv(\"_R_CHECK_INSTALL_DEPENDS_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_NO_RECOMMENDED_\" = \"TRUE\")\n        Sys.setenv(\"_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_DOT_FIRSTLIB_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_PACKAGES_USED_CRAN_INCOMING_NOTES_\" = \"TRUE\")\n        prev <- Sys.getenv(\"_R_CHECK_LIMIT_CORES_\", NA)\n        if(is.na(prev)) Sys.setenv(\"_R_CHECK_LIMIT_CORES_\" = \"TRUE\")\n        prev <- Sys.getenv(\"_R_CHECK_SCREEN_DEVICE_\", NA)\n        if(is.na(prev)) Sys.setenv(\"_R_CHECK_SCREEN_DEVICE_\" = \"stop\")\n        Sys.setenv(\"_R_CHECK_CODE_USAGE_VIA_NAMESPACES_\" = \"TRUE\")\n        Sys.setenv(\"_R_CHECK_S3_METHODS_NOT_REGISTERED_\" = \"TRUE\")\n        R_check_vc_dirs <- TRUE\n        R_check_executables_exclusions <- FALSE\n        R_check_doc_sizes2 <- TRUE\n        R_check_suggests_only <- TRUE\n        R_check_code_assign_to_globalenv <- TRUE\n        R_check_code_attach <- TRUE\n        R_check_code_data_into_globalenv <- TRUE\n        R_check_depr_def <- TRUE\n        R_check_Rd_line_widths <- TRUE\n        R_check_FF <- \"registration\"\n        do_timings <- TRUE\n        R_check_toplevel_files <- TRUE\n    } else {\n        ## do it this way so that INSTALL produces symbols.rds\n        ## when called from check but not in general.\n        if(is.na(Sys.getenv(\"_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_\", NA)))\n            Sys.setenv(\"_R_SHLIB_BUILD_OBJECTS_SYMBOL_TABLES_\" = \"TRUE\")\n    }\n\n\n    if (extra_arch) {\n        R_check_Rd_contents <- R_check_all_non_ISO_C <-\n            R_check_Rd_xrefs <- R_check_use_codetools <- R_check_Rd_style <-\n                R_check_executables <- R_check_permissions <-\n                    R_check_dot_internal <- R_check_ascii_code <-\n                    \tR_check_ascii_data <- R_check_compact_data <-\n                            R_check_pkg_sizes <- R_check_doc_sizes <-\n                                R_check_doc_sizes2 <-\n                                    R_check_unsafe_calls <-\n                                        R_check_toplevel_files <- FALSE\n        R_check_Rd_line_widths <- FALSE\n    }\n\n    startdir <- getwd()\n    if (is.null(startdir))\n        stop(\"current working directory cannot be ascertained\")\n    if (!nzchar(outdir)) outdir <- startdir\n    setwd(outdir)\n    outdir <- getwd()\n    setwd(startdir)\n\n    R_LIBS <- Sys.getenv(\"R_LIBS\")\n    arg_libdir <- libdir\n    if (nzchar(libdir)) {\n        setwd(libdir)\n        libdir <- getwd()\n        Sys.setenv(R_LIBS = env_path(libdir, R_LIBS))\n        setwd(startdir)\n    }\n\n    ## all the analysis code is run with --slave\n    ## examples and tests are not.\n    R_opts <- \"--vanilla\"\n    R_opts2 <- \"--vanilla --slave\"\n    ## do run Renviron.site for some multiarch runs\n    ## We set R_ENVIRON_USER to skip .Renviron files.\n    R_opts3 <- \"--no-site-file --no-init-file --no-save --no-restore\"\n    R_opts4 <- \"--no-site-file --no-init-file --no-save --no-restore --slave\"\n    env0 <- if(WINDOWS) \"R_ENVIRON_USER='no_such_file'\" else \"R_ENVIRON_USER=''\"\n\n    msg_DESCRIPTION <-\n        c(\"See section 'The DESCRIPTION file' in the 'Writing R Extensions' manual.\\n\")\n\n    if (!length(pkgs)) {\n        message(\"Error: no packages were specified\")\n        do_exit(1L)\n    }\n\n    ## This is the main loop over all packages to be checked.\n    for (pkg in pkgs) {\n        ## pkg should be the path to the package root source\n        ## directory, either absolute or relative to startdir.\n        ## As from 2.1.0 it can also be a tarball\n\n        ## The previous package may have set do_install to FALSE\n        do_install <- do_install_arg\n        no_examples <- FALSE\n\n        ## $pkgdir is the corresponding absolute path.\n        ## pkgname0 is the name of the top-level directory\n        ## (and often the name of the package).\n        setwd(startdir)\n        pkg <- sub(\"/$\", \"\", pkg)       # strip any trailing '/'\n        pkgname0 <- basename(pkg)\n        is_ascii <- FALSE\n\n        thispkg_subdirs <- check_subdirs\n        ## is this a tar archive?\n        if (dir.exists(pkg)) {\n            istar <- FALSE\n            if (thispkg_subdirs == \"default\") thispkg_subdirs <- \"no\"\n        } else if (file.exists(pkg)) {\n            istar <- TRUE\n            if (thispkg_subdirs == \"default\") thispkg_subdirs <- \"yes-maybe\"\n            pkgname0 <- sub(\"\\\\.(tar\\\\.gz|tgz|tar\\\\.bz2|tar\\\\.xz)$\", \"\", pkgname0)\n            pkgname0 <- sub(\"_[0-9.-]*$\", \"\", pkgname0)\n        } else {\n            warning(sQuote(pkg), \" is neither a file nor directory, skipping\\n\",\n                    domain = NA, call. = FALSE, immediate. = TRUE)\n            next\n        }\n        pkgoutdir <- file.path(outdir, paste(pkgname0, \"Rcheck\", sep = \".\"))\n        if (clean && dir.exists(pkgoutdir)) {\n            unlink(pkgoutdir, recursive = TRUE)\n            if(WINDOWS) Sys.sleep(0.5) # allow for antivirus interference\n        }\n        dir.create(pkgoutdir, mode = \"0755\")\n        if (!dir.exists(pkgoutdir)) {\n            message(sprintf(\"ERROR: cannot create check dir %s\", sQuote(pkgoutdir)))\n            summaryLog(Log)\n            do_exit(1L)\n        }\n        Log <- newLog(file.path(pkgoutdir, \"00check.log\"))\n        if (istar) {\n            dir <- file.path(pkgoutdir, \"00_pkg_src\")\n            dir.create(dir, mode = \"0755\")\n            if (!dir.exists(dir)) {\n                errorLog(Log, sprintf(\"cannot create %s\", sQuote(dir)))\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            ## force the use of internal untar unless over-ridden\n            ## so e.g. .tar.xz works everywhere\n            if (untar(pkg, exdir = dir,\n                      tar =  Sys.getenv(\"R_INSTALL_TAR\", \"internal\"))) {\n                errorLog(Log, sprintf(\"cannot unpack %s\", sQuote(pkg)))\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            ## this assumes foo_x.y.tar.gz unpacks to foo, but we are about\n            ## to test that.\n            pkg <- file.path(dir, pkgname0)\n        }\n        if (!dir.exists(pkg))\n            stop(gettextf(\"package directory %s does not exist\",\n                          sQuote(pkg)), domain = NA)\n        setwd(pkg)\n        pkgdir <- getwd()\n        thispkg_src_subdirs <- thispkg_subdirs\n        if (thispkg_src_subdirs == \"yes-maybe\") {\n            ## now see if there is a 'configure' file\n            ## configure files are only used if executable, but\n            ## -x is always false on Windows.\n            if (WINDOWS) {\n                if (file_test(\"-f\", \"configure\")) thispkg_src_subdirs <- \"no\"\n            } else {\n                if (file_test(\"-x\", \"configure\")) thispkg_src_subdirs <- \"no\"\n            }\n        }\n        setwd(startdir)\n\n        messageLog(Log, \"using log directory \", sQuote(pkgoutdir))\n        messageLog(Log, \"using \", R.version.string)\n        messageLog(Log, \"using platform: \", R.version$platform,\n                   \" (\", 8*.Machine$sizeof.pointer, \"-bit)\")\n        charset <-\n            if (l10n_info()[[\"UTF-8\"]]) \"UTF-8\" else utils::localeToCharset()\n        messageLog(Log, \"using session charset: \", charset)\n        is_ascii <- charset == \"ASCII\"\n\n        .unpack.time <- Sys.time()\n\n        ## report options used\n        opts <- opts0\n        if (!do_codoc) opts <- c(opts, \"--no-codoc\")\n        if (!do_examples && !spec_install) opts <- c(opts, \"--no-examples\")\n        if (!do_tests && !spec_install) opts <- c(opts, \"--no-tests\")\n        if (!do_manual && !spec_install) opts <- c(opts, \"--no-manual\")\n        if (!do_vignettes && !spec_install) opts <- c(opts, \"--no-vignettes\")\n        if (!do_build_vignettes && !spec_install)\n            opts <- c(opts, \"--no-build-vignettes\")\n        if (use_gct) opts <- c(opts, \"--use-gct\")\n        if (use_valgrind) opts <- c(opts, \"--use-valgrind\")\n        if (as_cran) opts <- c(opts, \"--as-cran\")\n        if (length(opts) > 1L)\n            messageLog(Log, \"using options \", sQuote(paste(opts, collapse=\" \")))\n        else if (length(opts) == 1L)\n            messageLog(Log, \"using option \", sQuote(opts))\n\n        if (!nzchar(libdir)) {\n            libdir <- pkgoutdir\n            Sys.setenv(R_LIBS = env_path(libdir, R_LIBS))\n        }\n        if (WINDOWS && grepl(\" \", libdir)) # need to avoid spaces in libdir\n            libdir <- gsub(\"\\\\\", \"/\", shortPathName(libdir), fixed = TRUE)\n\n        ## Package sources from the R distribution are special.  They\n        ## have a 'DESCRIPTION.in' file (instead of 'DESCRIPTION'),\n        ## with Version and License fields containing '@VERSION@' for\n        ## substitution by configure.  Earlier bundles had packages\n        ## containing DESCRIPTIION.in, hence the extra check for\n        ## Makefile.in.\n\n        is_base_pkg <- is_rec_pkg <- FALSE\n        if (file.exists(f <- file.path(pkgdir, \"DESCRIPTION.in\")) &&\n            file.exists(file.path(pkgdir, \"Makefile.in\"))) {\n            desc <- try(read.dcf(f))\n            if (inherits(desc, \"try-error\") || !length(desc)) {\n                resultLog(Log, \"EXISTS but not correct format\")\n                summaryLog(Log)\n                do_exit(1L)\n            }\n            desc <- desc[1L, ]\n            if (identical(desc[\"Priority\"], c(Priority = \"base\"))) {\t# Priority might be missing\n                messageLog(Log, \"looks like \", sQuote(pkgname0),\n                           \" is a base package\")\n                messageLog(Log, \"skipping installation test\")\n                is_base_pkg <- TRUE\n                pkgname <- desc[\"Package\"] # should be same as pkgname0\n            }\n        }\n\n        this_multiarch <- multiarch\n        if (!is_base_pkg) {\n            desc <- check_description()\n            pkgname <- desc[\"Package\"]\n            is_rec_pkg <- identical(desc[\"Priority\"], c(Priority = \"recommended\"))\n\n            ## Check if we have any hope of installing\n            OS_type <- desc[\"OS_type\"]\n            if (do_install && !is.na(OS_type)) {\n                if (WINDOWS && OS_type != \"windows\") {\n                    messageLog(Log, \"will not attempt to install this package on Windows\")\n                    do_install <- FALSE\n                }\n                if (!WINDOWS && OS_type == \"windows\") {\n                    messageLog(Log, \"this is a Windows-only package, skipping installation\")\n                    do_install <- FALSE\n                }\n            } else OS_type <- NA\n\n            check_incoming <- Sys.getenv(\"_R_CHECK_CRAN_INCOMING_\", \"NA\")\n            check_incoming <- if(check_incoming == \"NA\") as_cran else {\n                config_val_to_logical(check_incoming)\n            }\n            if (check_incoming) check_CRAN_incoming()\n\n            ## <NOTE>\n            ## We want to check for dependencies early, since missing\n            ## dependencies may make installation fail, and in any case we\n            ## give up if they are missing.  But we don't check them if\n            ## we are not going to install and hence not run any code.\n            ## </NOTE>\n            if (do_install) {\n                topfiles0 <- dir(pkgdir)\n                check_dependencies()\n            } else topfiles0 <- NULL\n\n            check_sources()\n            checkingLog(Log, \"if there is a namespace\")\n            ## careful: we need a case-sensitive match\n            if (\"NAMESPACE\" %in% dir(pkgdir))\n                resultLog(Log, \"OK\")\n            else  if (file.exists(file.path(pkgdir, \"NAMESPACE\"))) {\n                errorLog(Log,\n                       \"File NAMESPACE does not exist but there is a case-insenstiive match.\")\n                summaryLog(Log)\n                do_exit(1L)\n            } else if (dir.exists(file.path(pkgdir, \"R\"))) {\n                errorLog(Log)\n                wrapLog(\"All packages need a namespace as from R 3.0.0.\\n\",\n                        \"R CMD build will produce a suitable starting point,\",\n                        \"but it is better to handcraft a NAMESPACE file.\")\n\t        maybe_exit(1L)\n            } else {\n                noteLog(Log)\n                wrapLog(\"Packages without R code can be installed without\",\n                        \"a NAMESPACE file, but it is cleaner to add\",\n                        \"an empty one.\")\n            }\n\n            ## we need to do this before installation\n            if (R_check_executables) check_executables()\n            ## (Alternatively, could use .unpack.time.)\n\n            check_dot_files(check_incoming)\n\n\t    setwd(pkgdir)\n            allfiles <- check_file_names()\n            if (R_check_permissions) check_permissions(allfiles)\n\t    setwd(startdir)\n\n            ## record this before installation.\n            ## <NOTE>\n            ## Could also teach the code to check 'src/Makevars[.in]'\n            ## files to use .unpack.time.\n            ## (But we want to know if the sources contain\n            ## 'src/Makevars' and INSTALL re-creates this.)\n            ## </NOTE>\n            makevars <-\n                Sys.glob(file.path(pkgdir, \"src\",\n                                   c(\"Makevars.in\", \"Makevars\")))\n            makevars <- basename(makevars)\n\n            if (do_install) {\n                check_install()\n                if(R_check_pkg_sizes) check_install_sizes()\n            }\n            if (multiarch) {\n                if (force_multiarch) inst_archs <- archs\n                else {\n                    ## check which architectures this package is installed for\n                    if (dir.exists(dd <- file.path(libdir, pkgname, \"libs\"))) {\n                        inst_archs <- dir(dd)\n                        ## xlsReadWrite has spurious subdir 'template'\n                        inst_archs <- inst_archs[inst_archs %in% archs]\n                        if (!identical(inst_archs, archs)) {\n                            if (length(inst_archs) > 1)\n\t\t\t\tprintLog0(Log,\n                                          \"NB: this package is only installed for sub-architectures \",\n                                          paste(sQuote(inst_archs), collapse=\", \"), \"\\n\")\n\t\t\t    else {\n\t\t\t\tprintLog0(Log,\n                                          \"NB: this package is only installed for sub-architecture \",\n                                          sQuote(inst_archs), \"\\n\")\n                                if(inst_archs == .Platform$r_arch)\n                                    this_multiarch <- FALSE\n                            }\n                        }\n                    } else this_multiarch <- FALSE  # no compiled code\n                }\n                if (this_multiarch && length(R_check_skip_arch))\n                    inst_archs <- inst_archs[!(inst_archs %in% R_check_skip_arch)]\n            }\n        }   ## end of if (!is_base_pkg)\n\n        elibs <- if(is_base_pkg) character()\n        else if(R_check_depends_only)\n            setRlibs(pkgdir = pkgdir, libdir = libdir)\n        else if(R_check_suggests_only)\n            setRlibs(pkgdir = pkgdir, libdir = libdir, suggests = TRUE)\n        else character()\n\n        setwd(startdir)\n        check_pkg(pkgdir, pkgname, pkgoutdir, startdir, libdir, desc,\n                  is_base_pkg, is_rec_pkg, thispkg_subdirs, extra_arch)\n        if (!extra_arch && do_manual) {\n            setwd(pkgoutdir)\n            instdir <- file.path(libdir, pkgname)\n            if (dir.exists(file.path(instdir, \"help\")))\n                check_pkg_manual(instdir, desc[\"Package\"])\n            else\n                check_pkg_manual(pkgdir, desc[\"Package\"])\n        }\n\n        if (!is_base_pkg && check_incoming && no_examples &&\n            dir.exists(file.path(pkgdir, \"R\"))) {\n            tests_dir <- file.path(pkgdir, test_dir)\n            if (dir.exists(tests_dir) &&\n                length(dir(tests_dir, pattern = \"\\\\.(R|Rin)$\")))\n                no_examples <- FALSE\n            vigns <- pkgVignettes(dir = pkgdir)\n            if (!is.null(vigns) && length(vigns$docs)) no_examples <- FALSE\n            if (no_examples) {\n                ## figure out if the R code exercises anything\n                ns <- parseNamespaceFile(basename(pkgdir), dirname(pkgdir))\n                if(length(ns$exports) || length(ns$exportPatterns) ||\n                   length(ns$exportMethods) || length(ns$S3methods)) {\n                    checkingLog(Log, \"for code which exercises the package\")\n                    warningLog(Log, \"No examples, no tests, no vignettes\")\n                }\n            }\n        }\n        summaryLog(Log)\n        if (Log$errors > 0L)\n            do_exit(1L)\n\n        if(config_val_to_logical(Sys.getenv(\"_R_CHECK_CRAN_STATUS_SUMMARY_\",\n                                            \"FALSE\"))) {\n            s <- summarize_CRAN_check_status(pkgname)\n            if(nzchar(s)) {\n                writeLines(c(\"\", s), Log$con)\n            }\n        }\n\n        closeLog(Log)\n        message(\"\")\n\n    } ## end for (pkg in pkgs)\n\n}\n###--- end{ .check_packages }\n\n.format_lines_with_indent <-\nfunction(x)\n    paste0(\"  \", x, collapse = \"\\n\")\n    ## Hard-wire indent of 2 for now.\n\n### Local variables:\n### mode: R\n### page-delimiter: \"^###[#-]\"\n### End:\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/Rdll.hide": " BASE_SYM_CACHED\n BINDING_IS_LOCKED\n BM_norm_keep\n BZ2_blockSort\n BZ2_bsInitWrite\n BZ2_bzBuffToBuffCompress@28\n BZ2_bzBuffToBuffDecompress@24\n BZ2_bzCompress@8\n BZ2_bzCompressEnd@4\n BZ2_bzCompressInit@16\n BZ2_bzDecompress@4\n BZ2_bzDecompressEnd@4\n BZ2_bzDecompressInit@12\n BZ2_bzRead@16\n BZ2_bzReadClose@8\n BZ2_bzReadGetUnused@16\n BZ2_bzReadOpen@24\n BZ2_bzWrite@16\n BZ2_bzWriteClose64@28\n BZ2_bzWriteClose@20\n BZ2_bzWriteOpen@20\n BZ2_bz__AssertH__fail\n BZ2_bzclose@4\n BZ2_bzdopen@8\n BZ2_bzerror@8\n BZ2_bzflush@4\n BZ2_bzlibVersion@0\n BZ2_bzopen@8\n BZ2_bzread@12\n BZ2_bzwrite@12\n BZ2_compressBlock\n BZ2_crc32Table\n BZ2_decompress\n BZ2_hbAssignCodes\n BZ2_hbCreateDecodeTables\n BZ2_hbMakeCodeLengths\n BZ2_indexIntoF\n BZ2_rNums\n CPFun\n ConsoleAcceptCmd\n DebugMenuitem\n DefaultPalette\n EhiWakeUp\n EncodeReal2\n HASHASH\n IS_ACTIVE_BINDING\n IS_ASCII\n IS_BYTES\n IS_LATIN1\n IS_SPECIAL_SYMBOL\n IS_UTF8\n InitDynload\n InitParser\n Init_R_Variables\n LOCK_BINDING\n LoadInitFile\n MDIset\n MDIsize\n MainThread\n NO_SPECIAL_SYMBOLS\n PrintUsage\n ProfileEvent\n R_BCNodeStackBase\n R_BCNodeStackEnd\n R_BCNodeStackTop\n R_BrowseLevel\n R_BrowseLines\n R_BrowserLastCommand\n R_CBoundsCheck\n R_ChooseFile\n R_CollectWarnings\n R_Collected\n R_ColonSymbol\n R_CommentSymbol\n R_ConnIdSymbol\n R_ConsoleIob\n R_CurrentExpr\n R_Decode2Long\n R_DevicesSymbol\n R_DisableNLinBrowser\n R_DotEnvSymbol\n R_ErrorCon\n R_EvalDepth\n R_ExactSymbol\n R_Expressions\n R_Expressions_keep\n R_ExternalPtrAddrFn\n R_FileMtime\n R_FinalizeSrcRefState\n R_FreeSEXP\n R_FreeStringBufferL\n R_GE_VStrHeight\n R_GE_VStrWidth\n R_GE_VText\n R_GetMaxNSize\n R_GetMaxVSize\n R_GetTraceback\n R_GetVarLocSymbol\n R_GetVarLocValue\n R_HandlerStack\n R_HiddenFile\n R_InitReadItemDepth\n R_InitSrcRefState\n R_InitialData\n R_InsertRestartHandlers\n R_Interactive\n R_IoBufferFree\n R_IoBufferGetc\n R_IoBufferInit\n R_IoBufferPutc\n R_IoBufferPuts\n R_IoBufferReadOffset\n R_IoBufferReadReset\n R_IoBufferWriteReset\n R_Is_Running\n R_JumpToContext\n R_KeepSource\n R_LibraryFileName\n R_LoadFromFile\n R_LoadRconsole\n R_Log10\n R_LookupMethod\n R_NHeap\n R_NShowCalls\n R_NSize\n R_Newhashpjw\n R_OpenInitFile\n R_OpenLibraryFile\n R_OpenSiteFile\n R_OpenSysInitFile\n R_OutputCon\n R_PPStackSize\n R_Parse1Buffer\n R_Parse1File\n R_ParseBuffer\n R_ParseConn\n R_ParseErrorCol\n R_ParseErrorFile\n R_ParseFile\n R_PendingPromises\n R_Primitive\n R_Quiet\n R_ReadItemDepth\n R_RecursiveSymbol\n R_RestartStack\n R_RestartToken\n R_ReturnedValue\n R_SaveToFile\n R_SaveToFileV\n R_SessionContext\n R_SetMaxNSize\n R_SetMaxVSize\n R_SetOptionWarn\n R_SetOptionWidth\n R_SetPPSize\n R_SetVarLocValue\n R_SetWin32\n R_ShowErrorCalls\n R_ShowErrorMessages\n R_ShowFiles\n R_ShowWarnCalls\n R_StdinEnc\n R_StringHash\n R_SymbolTable\n R_TextBufferFree\n R_TextBufferGetc\n R_TextBufferInit\n R_TmpvalSymbol\n R_Toplevel\n R_ToplevelContext\n R_UTF8fixslash\n R_UseNamesSymbol\n R_VSize\n R_Verbose\n R_WarnLength\n R_Warnings\n R_WholeSrcrefSymbol\n R_XDRDecodeDouble\n R_XDRDecodeInteger\n R_XDREncodeDouble\n R_XDREncodeInteger\n R_binary\n R_check_locale\n R_cmpfun\n R_compile_pkgs\n R_compress1\n R_compress2\n R_compress3\n R_data_class2\n R_dec_min_exponent\n R_decompress1\n R_decompress2\n R_decompress3\n R_dlsym\n R_do_data_class\n R_do_set_class\n R_dot_Class\n R_dot_Generic\n R_dot_GenericCallEnv\n R_dot_GenericDefEnv\n R_dot_Group\n R_dot_Methods\n R_fgetc\n R_fixslash\n R_getClockIncrement\n R_getDllTable\n R_getProcTime\n R_getRegisteredRoutines\n R_getS4DataSlot\n R_getSymbolInfo\n R_gmtime\n R_gmtime_r\n R_has_methods\n R_initAsignSymbols\n R_init_base\n R_init_jit_enabled\n R_initialize_bcode\n R_inspect\n R_inspect3\n R_isMissing\n R_is_running\n R_jit_enabled\n R_lazyLoadDBinsertValue\n R_localtime\n R_localtime_r\n R_max_memory\n R_max_num_math_threads\n R_mktime\n R_moduleCdynload\n R_newCurlUrl\n R_newsock\n R_newunz\n R_newurl\n R_num_math_threads\n R_nwarnings\n R_osDynSymbol\n R_possible_dispatch\n R_pretty\n R_restore_globals\n R_run_onexits\n R_seemsOldStyleS4Object\n R_strftime\n R_subset3_dflt\n R_syscall\n R_sysframe\n R_sysfunction\n R_sysparent\n R_timegm\n R_tzname\n R_tzset\n R_tzsetwall\n R_unary\n R_unserialize\n R_warn_partial_match_args\n R_warn_partial_match_attr\n R_warn_partial_match_dollar\n R_wfopen\n Rconn_getline\n Rcons_vprintf\n Rconsolesetwidth\n Rf_AdobeSymbol2ucs2\n Rf_BindDomain\n Rf_CheckFormals\n Rf_CoercionWarning\n Rf_ComplexFromInteger\n Rf_ComplexFromLogical\n Rf_ComplexFromReal\n Rf_ComplexFromString\n Rf_CustomPrintValue\n Rf_DispatchAnyOrEval\n Rf_DispatchGroup\n Rf_DispatchOrEval\n Rf_EncodeEnvironment\n Rf_EncodeRaw\n Rf_EncodeReal2\n Rf_EncodeString\n Rf_EnsureString\n Rf_ErrorMessage\n Rf_GInit\n Rf_GetOptionCutoff\n Rf_GetOptionDeviceAsk\n Rf_IndexWidth\n Rf_InitArithmetic\n Rf_InitBaseEnv\n Rf_InitColors\n Rf_InitConnections\n Rf_InitEd\n Rf_InitFunctionHashing\n Rf_InitGlobalEnv\n Rf_InitGraphics\n Rf_InitMemory\n Rf_InitNames\n Rf_InitOptions\n Rf_InitS3DefaultTypes\n Rf_InitStringHash\n Rf_InitTempDir\n Rf_InitTypeTables\n Rf_IntegerFromComplex\n Rf_IntegerFromLogical\n Rf_IntegerFromReal\n Rf_IntegerFromString\n Rf_ItemName\n Rf_LogicalFromComplex\n Rf_LogicalFromInteger\n Rf_LogicalFromReal\n Rf_LogicalFromString\n Rf_OneIndex\n Rf_PrintGreeting\n Rf_PrintValueEnv\n Rf_PrintValueRec\n Rf_PrintVersion\n Rf_PrintVersionString\n Rf_PrintVersion_part_1\n Rf_RealFromComplex\n Rf_RealFromInteger\n Rf_RealFromLogical\n Rf_RealFromString\n Rf_Scollate\n Rf_Seql\n Rf_SrcrefPrompt\n Rf_StrToInternal\n Rf_StringFromComplex\n Rf_StringFromInteger\n Rf_StringFromLogical\n Rf_StringFromReal\n Rf_TimeToSeed\n Rf_VectorIndex\n Rf_WarningMessage\n Rf_addMissingVarsToNewEnv\n Rf_allocCharsxp\n Rf_asVecSize\n Rf_bd0\n Rf_chebyshev_eval\n Rf_chebyshev_init\n Rf_check1arg\n Rf_check_stack_balance\n Rf_convertToC\n Rf_createS3Vars\n Rf_d1mach\n Rf_ddfindVar\n Rf_deparse1s\n Rf_deparse1w\n Rf_evalList\n Rf_evalListKeepMissing\n Rf_findVar1\n Rf_findcontext\n Rf_formatRaw\n Rf_formatString\n Rf_framedepth\n Rf_gamma_cody\n Rf_gammalims\n Rf_get1index\n Rf_i1mach\n Rf_initStack\n Rf_installDDVAL\n Rf_installS3Signature\n Rf_isValidName\n Rf_lfastchoose\n Rf_lgammacor\n Rf_lookupCachedSymbol\n Rf_makeSubscript\n Rf_markKnown\n Rf_mat2indsub\n Rf_matchArg\n Rf_matchArgExact\n Rf_matchArgs\n Rf_matchPar\n Rf_mbtoucs\n Rf_mkCLOSXP\n Rf_mkPROMISE\n Rf_mkSYMSXP\n Rf_mkTrue\n Rf_name2col\n Rf_onsigusr1\n Rf_onsigusr2\n Rf_osDynSymbol\n Rf_patchArgsByActuals\n Rf_pbeta_raw\n Rf_printArray\n Rf_printComplexVector\n Rf_printIntegerVector\n Rf_printMatrix\n Rf_printNamedVector\n Rf_printRealVector\n Rf_printVector\n Rf_promiseArgs\n Rf_qchisq_appr\n Rf_readS3VarsFromFrame\n Rf_regcomp\n Rf_regerror\n Rf_regexec\n Rf_regfree\n Rf_setIVector\n Rf_setRVector\n Rf_sexptype2char\n Rf_ssort\n Rf_stirlerr\n Rf_stringSuffix\n Rf_strmat2intmat\n Rf_substituteList\n Rf_tsConform\n Rf_tspgets\n Rf_ucstomb\n Rf_unbindVar\n Rf_usemethod\n Rf_utf8toucs\n Rf_vectorIndex\n Rf_yychar\n Rf_yylval\n Rf_yynerrs\n Rf_yyparse\n RguiCommonHelp\n RguiPackageMenu\n Rgui_Edit\n Rgui_configure\n Ri18n_iswctype\n Ri18n_wcswidth\n Ri18n_wctype\n Rm_calloc\n Rm_free\n Rm_malloc\n Rm_realloc\n Rsockselect\n Rstrlen\n Rstrwid\n Rwin_rename\n Rwin_wrename\n SET_ACTIVE_BINDING_BIT\n SET_ASCII\n SET_BASE_SYM_CACHED\n SET_BYTES\n SET_CACHED\n SET_CXTAIL\n SET_HASHASH\n SET_LATIN1\n SET_NO_SPECIAL_SYMBOLS\n SET_PRIMOFFSET\n SET_SPECIAL_SYMBOL\n SET_UTF8\n Sys_TempDir\n UNIMPLEMENTED_TYPEt\n UNLOCK_BINDING\n UNSET_BASE_SYM_CACHED\n UNSET_NO_SPECIAL_SYMBOLS\n UNSET_SPECIAL_SYMBOL\n UTF8in\n UTF8out\n WinCheckUTF8\n WinUTF8out\n WrongArgCount\n _controlify\n _hershey_font_info\n _nl_explode_name\n _nl_find_domain\n _nl_find_msg\n _nl_language_preferences_default\n _nl_load_domain\n _nl_locale_name\n _nl_locale_name_default\n _nl_locale_name_posix\n _nl_make_l10nflist\n _nl_msg_cat_cntr\n _nl_normalize_codeset\n _occidental_hershey_glyphs\n _oriental_hershey_glyphs\n _pcre_OP_lengths\n _pcre_default_tables\n _pcre_find_bracket\n _pcre_hspace_list\n _pcre_is_newline\n _pcre_jit_compile\n _pcre_jit_exec\n _pcre_jit_free\n _pcre_jit_get_size\n _pcre_jit_get_target\n _pcre_ord2utf\n _pcre_ucd_caseless_sets\n _pcre_ucd_records\n _pcre_ucd_stage1\n _pcre_ucd_stage2\n _pcre_ucp_gbtable\n _pcre_ucp_gentype\n _pcre_ucp_typerange\n _pcre_utf8_table1\n _pcre_utf8_table1_size\n _pcre_utf8_table2\n _pcre_utf8_table3\n _pcre_utf8_table4\n _pcre_utt\n _pcre_utt_names\n _pcre_utt_size\n _pcre_valid_utf\n _pcre_vspace_list\n _pcre_was_newline\n _pcre_xclass\n _vsnprintf\n applyGUI\n bakslv\n bincode\n bincount\n bratio\n breaktodebugger\n cbabk2_\n cdiv_\n check_doc_file\n complex_binary\n complex_math1\n complex_math2\n complex_unary\n comqr2_\n comqr_\n console_ctrlkeyin\n console_im\n console_mousedown\n console_mousedrag\n console_mouserep\n console_normalkeyin\n console_sbf\n consolebg\n consolebufb\n consolebuffered\n consolebufl\n consolec\n consolecancopy\n consolecanpaste\n consoleclear\n consolecmd\n consolecols\n consolecopy\n consolefg\n consoleflush\n consolegetlazy\n consolehelp\n consolenewline\n consolepaste\n consolepastecmds\n consoleprint\n consoler\n consolereads\n consoleresize\n consolesavefile\n consoleselectall\n consolesetbrk\n consoletogglelazy\n consoleuser\n consolewrites\n consolex\n consoley\n corth_\n cpuLimit\n cpuLimit2\n cpuLimitValue\n csroot_\n dblep0_\n deleditordata\n do_AT\n do_Cstack_info\n do_D2POSIXlt\n do_External\n do_Externalgr\n do_ICUget\n do_ICUset\n do_Math2\n do_POSIXlt2D\n do_RNGkind\n do_Rhome\n do_S4on\n do_abbrev\n do_abs\n do_addCondHands\n do_addRestart\n do_addTryHandlers\n do_addhistory\n do_address\n do_adist\n do_agrep\n do_allnames\n do_anyNA\n do_aperm\n do_aregexec\n do_args\n do_arith\n do_arrangeWindows\n do_array\n do_asPOSIXct\n do_asPOSIXlt\n do_as_environment\n do_asatomic\n do_ascall\n do_asfunction\n do_assign\n do_asvector\n do_attach\n do_attr\n do_attrgets\n do_attributes\n do_attributesgets\n do_backsolve\n do_baseenv\n do_basename\n do_bcclose\n do_bcversion\n do_begin\n do_bincode\n do_bind\n do_bindtextdomain\n do_bitwise\n do_bndIsActive\n do_bndIsLocked\n do_body\n do_bodyCode\n do_break\n do_browser\n do_builtins\n do_c\n do_c_dflt\n do_call\n do_capabilities\n do_capabilitiesX11\n do_cat\n do_charToRaw\n do_charmatch\n do_chartr\n do_chooseDir\n do_chooseFiles\n do_class\n do_classgets\n do_clearpushback\n do_close\n do_closewinprogressbar\n do_cmathfuns\n do_colon\n do_colsum\n do_commandArgs\n do_comment\n do_commentgets\n do_compilepkgs\n do_complex\n do_copyDFattr\n do_crc64\n do_cum\n do_date\n do_debug\n do_delayed\n do_deparse\n do_detach\n do_devAskNewPage\n do_devsize\n do_dfltStop\n do_dfltWarn\n do_diag\n do_dim\n do_dimgets\n do_dimnames\n do_dimnamesgets\n do_dirchmod\n do_dircreate\n do_direxists\n do_dirname\n do_disassemble\n do_dllversion\n do_docall\n do_dotCode\n do_dotcall\n do_dotcallgr\n do_dput\n do_drop\n do_dump\n do_duplicated\n do_dynload\n do_dynunload\n do_eSoftVersion\n do_eSoftVersion\n do_eapply\n do_emptyenv\n do_enablejit\n do_enc2\n do_encodeString\n do_encoding\n do_env2list\n do_envIsLocked\n do_envir\n do_envirName\n do_envirgets\n do_envprofile\n do_eval\n do_expression\n do_fft\n do_fifo\n do_fileaccess\n do_fileappend\n do_filechoose\n do_filecopy\n do_filecreate\n do_fileexists\n do_fileinfo\n do_filelink\n do_filepath\n do_fileremove\n do_filerename\n do_fileshow\n do_filesymlink\n do_findinterval\n do_first_min\n do_flush\n do_for\n do_formals\n do_format\n do_formatC\n do_formatPOSIXlt\n do_formatinfo\n do_function\n do_gc\n do_gcinfo\n do_gctime\n do_gctorture\n do_gctorture2\n do_get\n do_getClipboardFormats\n do_getDllTable\n do_getIdentification\n do_getNSRegistry\n do_getNumRtoCConverters\n do_getRegNS\n do_getRegisteredRoutines\n do_getRestart\n do_getRtoCConverterDescriptions\n do_getRtoCConverterStatus\n do_getSymbolInfo\n do_getVarsFromFrame\n do_getWindowHandle\n do_getWindowHandles\n do_getWindowTitle\n do_getallconnections\n do_getconnection\n do_getconst\n do_getenv\n do_geterrmessage\n do_getfmts\n do_getlocale\n do_getOption\n do_gettext\n do_getwd\n do_glob\n do_globalenv\n do_grep\n do_grepraw\n do_growconst\n do_gsub\n do_gzcon\n do_gzfile\n do_iconv\n do_identical\n do_if\n do_importIntoEnv\n do_inherits\n do_inspect\n do_intToBits\n do_intToUtf8\n do_interactive\n do_internal\n do_interruptsSuspended\n do_invisible\n do_invokeRestart\n do_is\n do_isNSEnv\n do_is_builtin_internal\n do_isatty\n do_isfinite\n do_isincomplete\n do_isinfinite\n do_islistfactor\n do_isloaded\n do_isna\n do_isnan\n do_isopen\n do_isseekable\n do_isunsorted\n do_isvector\n do_l10n_info\n do_lapack\n do_lapply\n do_lazyLoadDBfetch\n do_lazyLoadDBflush\n do_lazyLoadDBinsertValue\n do_length\n do_lengthgets\n do_levelsgets\n do_list2env\n do_listdirs\n do_listfiles\n do_load\n do_loadFromConn2\n do_loadRconsole\n do_loadfile\n do_loadhistory\n do_localeconv\n do_lockBnd\n do_lockEnv\n do_log\n do_log1arg\n do_log_builtin\n do_logic\n do_logic2\n do_logic3\n do_ls\n do_machine\n do_makelazy\n do_makelist\n do_makenames\n do_makeunique\n do_makevector\n do_mapply\n do_match\n do_matchcall\n do_math1\n do_math2\n do_math3\n do_math4\n do_matprod\n do_matrix\n do_maxcol\n do_memCompress\n do_memDecompress\n do_memlimits\n do_memoryprofile\n do_memsize\n do_merge\n do_mget\n do_missing\n do_mkActiveBnd\n do_mkUnbound\n do_mkcode\n do_mkjunction\n do_modelframe\n do_modelmatrix\n do_mvfft\n do_names\n do_namesgets\n do_nargs\n do_nchar\n do_newenv\n do_nextmethod\n do_nextn\n do_ngettext\n do_normalizepath\n do_nsl\n do_nzchar\n do_onexit\n do_open\n do_options\n do_order\n do_packBits\n do_paren\n do_parentenv\n do_parentenvgets\n do_parentframe\n do_parse\n do_paste\n do_pathexpand\n do_pcre_config\n do_pipe\n do_pmatch\n do_pmin\n do_polyroot\n do_pos2env\n do_pretty\n do_primitive\n do_printDeferredWarnings\n do_printdefault\n do_printfunction\n do_prmatrix\n do_proctime\n do_psort\n do_pushback\n do_pushbacklength\n do_putconst\n do_qsort\n do_quit\n do_quote\n do_radixsort\n do_random1\n do_random2\n do_random3\n do_range\n do_rank\n do_rapply\n do_rawShift\n do_rawToBits\n do_rawToChar\n do_rawconnection\n do_rawconvalue\n do_readClipboard\n do_readDCF\n do_readEnviron\n do_readLines\n do_readRegistry\n do_readbin\n do_readchar\n do_readlink\n do_readln\n do_readtablehead\n do_recall\n do_recordGraphics\n do_refcnt\n do_regFinaliz\n do_regNS\n do_regexec\n do_regexpr\n do_relop\n do_relop_dflt\n do_remove\n do_rep\n do_rep_int\n do_rep_len\n do_repeat\n do_resetCondHands\n do_restart\n do_retracemem\n do_return\n do_returnValue\n do_rowscols\n do_rowsum\n do_sample\n do_sample2\n do_save\n do_saveToConn\n do_savefile\n do_savehistory\n do_scan\n do_search\n do_seek\n do_seq\n do_seq_along\n do_seq_len\n do_serialize\n do_serializeToConn\n do_set\n do_setFileTime\n do_setInternet2\n do_setS4Object\n do_setSessionTimeLimit\n do_setStatusBar\n do_setTimeLimit\n do_setTitle\n do_setToCConverterActiveStatus\n do_setencoding\n do_setenv\n do_seterrmessage\n do_setlocale\n do_setmaxnumthreads\n do_setnumthreads\n do_setseed\n do_setwd\n do_setwinprogressbar\n do_shellexec\n do_shortRowNames\n do_shortpath\n do_signalCondition\n do_sink\n do_sinknumber\n do_sock\n do_sockconn\n do_sockselect\n do_sort\n do_split\n do_sprintf\n do_standardGeneric\n do_startHTTPD\n do_stderr\n do_stdin\n do_stdout\n do_stop\n do_stopHTTPD\n do_storage_mode\n do_strptime\n do_strsplit\n do_strtoi\n do_strtrim\n do_subassign\n do_subassign2\n do_subassign2_dflt\n do_subassign3\n do_subassign_dflt\n do_subset\n do_subset2\n do_subset2_dflt\n do_subset3\n do_subset_dflt\n do_substitute\n do_substr\n do_substrgets\n do_sumconnection\n do_summary\n do_switch\n do_sys\n do_sysbrowser\n do_syschmod\n do_sysgetpid\n do_sysimplementation\n do_sysinfo\n do_syssleep\n do_system\n do_systime\n do_sysumask\n do_tabulate\n do_tempdir\n do_tempfile\n do_textconnection\n do_textconvalue\n do_tilde\n do_tolower\n do_topenv\n do_trace\n do_traceOnOff\n do_traceback\n do_tracemem\n do_transpose\n do_trunc\n do_truncate\n do_typeof\n do_tzone_name\n do_unclass\n do_unlink\n do_unlist\n do_unregNS\n do_unserializeFromConn\n do_unsetenv\n do_untracemem\n do_unz\n do_unzip\n do_updateform\n do_url\n do_usemethod\n do_utf8ToInt\n do_vapply\n do_version\n do_warning\n do_which\n do_while\n do_windialog\n do_windialogstring\n do_wingetmenuitems\n do_winmenuadd\n do_winmenudel\n do_winmenunames\n do_winprogressbar\n do_winver\n do_withVisible\n do_writeClipboard\n do_writebin\n do_writechar\n do_writelines\n do_xtfrm\n dos_wglob\n dos_wglobfree\n drawconsole\n dt_invalidate_locale\n editorchecksave\n editorcleanall\n editorsetfont\n elapsedLimit\n elapsedLimit2\n elapsedLimitValue\n epslon_\n fixup_NaRm\n fontname\n fontsty\n formatError\n framenames\n getActive\n getActiveSink\n getAttrib0\n getConnection_no_err\n getDefaults\n getGraphMenu\n getIdentification\n getParseContext\n getTZinfo\n getWindowTitle\n get_current_mem\n get_duplicate_counter\n get_workspace_name\n getline\n gl_hist_next\n gl_hist_prev\n gl_in_hook\n gl_out_hook\n gl_setwidth\n gl_strwidth\n gl_tab_hook\n haveusedapager\n helpmenuact\n hqr_\n htribk_\n htridi_\n int_arraySubscript\n internal_shellexec\n intpr0_\n invalidate_cached_recodings\n isMethodsDispatchOn\n known_to_be_utf8\n latin1locale\n libintl_bind_textdomain_codeset\n libintl_bindtextdomain\n libintl_dcigettext\n libintl_dcngettext\n libintl_gettext_extract_plural\n libintl_gettext_free_exp\n libintl_gettext_germanic_plural\n libintl_gettextparse\n libintl_hash_string\n libintl_ngettext\n libintl_nl_current_default_domain\n libintl_nl_default_default_domain\n libintl_nl_default_dirname\n libintl_nl_domain_bindings\n libintl_textdomain\n loadRconsole\n locale_charset\n lzma_alloc\n lzma_alone_decoder\n lzma_alone_decoder_init\n lzma_alone_encoder\n lzma_auto_decoder\n lzma_block_buffer_bound\n lzma_block_buffer_decode\n lzma_block_buffer_encode\n lzma_block_compressed_size\n lzma_block_decoder\n lzma_block_decoder_init\n lzma_block_encoder\n lzma_block_encoder_init\n lzma_block_header_decode\n lzma_block_header_encode\n lzma_block_header_size\n lzma_block_total_size\n lzma_block_unpadded_size\n lzma_bufcpy\n lzma_check_finish\n lzma_check_init\n lzma_check_is_supported\n lzma_check_size\n lzma_check_update\n lzma_code\n lzma_crc32\n lzma_crc32_table\n lzma_crc64_table\n lzma_delta_coder_init\n lzma_delta_coder_memusage\n lzma_delta_decoder_init\n lzma_delta_encoder_init\n lzma_delta_props_decode\n lzma_delta_props_encode\n lzma_easy_buffer_encode\n lzma_easy_decoder_memusage\n lzma_easy_encoder\n lzma_easy_encoder_memusage\n lzma_easy_preset\n lzma_end\n lzma_fastpos\n lzma_filter_decoder_is_supported\n lzma_filter_encoder_is_supported\n lzma_filter_flags_decode\n lzma_filter_flags_encode\n lzma_filter_flags_size\n lzma_filters_copy\n lzma_filters_update\n lzma_footer_magic\n lzma_free\n lzma_get_check\n lzma_header_magic\n lzma_index_append\n lzma_index_block_count\n lzma_index_buffer_decode\n lzma_index_buffer_encode\n lzma_index_cat\n lzma_index_checks\n lzma_index_decoder\n lzma_index_dup\n lzma_index_encoder\n lzma_index_encoder_init\n lzma_index_end\n lzma_index_file_size\n lzma_index_hash_append\n lzma_index_hash_decode\n lzma_index_hash_end\n lzma_index_hash_init\n lzma_index_hash_size\n lzma_index_init\n lzma_index_iter_init\n lzma_index_iter_locate\n lzma_index_iter_next\n lzma_index_iter_rewind\n lzma_index_memusage\n lzma_index_memused\n lzma_index_padding_size\n lzma_index_prealloc\n lzma_index_size\n lzma_index_stream_count\n lzma_index_stream_flags\n lzma_index_stream_padding\n lzma_index_stream_size\n lzma_index_total_size\n lzma_index_uncompressed_size\n lzma_lz_decoder_init\n lzma_lz_decoder_memusage\n lzma_lz_decoder_uncompressed\n lzma_lz_encoder_init\n lzma_lz_encoder_memusage\n lzma_lzma2_decoder_init\n lzma_lzma2_decoder_memusage\n lzma_lzma2_encoder_init\n lzma_lzma2_encoder_memusage\n lzma_lzma2_props_decode\n lzma_lzma2_props_encode\n lzma_lzma_decoder_create\n lzma_lzma_decoder_init\n lzma_lzma_decoder_memusage\n lzma_lzma_decoder_memusage_nocheck\n lzma_lzma_encode\n lzma_lzma_encoder_create\n lzma_lzma_encoder_init\n lzma_lzma_encoder_memusage\n lzma_lzma_encoder_reset\n lzma_lzma_lclppb_decode\n lzma_lzma_lclppb_encode\n lzma_lzma_optimum_fast\n lzma_lzma_optimum_normal\n lzma_lzma_preset\n lzma_lzma_props_decode\n lzma_lzma_props_encode\n lzma_memlimit_get\n lzma_memlimit_set\n lzma_memusage\n lzma_mf_bt2_find\n lzma_mf_bt2_skip\n lzma_mf_bt3_find\n lzma_mf_bt3_skip\n lzma_mf_bt4_find\n lzma_mf_bt4_skip\n lzma_mf_find\n lzma_mf_hc3_find\n lzma_mf_hc3_skip\n lzma_mf_hc4_find\n lzma_mf_hc4_skip\n lzma_mf_is_supported\n lzma_mode_is_supported\n lzma_next_end\n lzma_next_filter_init\n lzma_next_filter_update\n lzma_properties_decode\n lzma_properties_encode\n lzma_properties_size\n lzma_raw_buffer_decode\n lzma_raw_buffer_encode\n lzma_raw_coder_init\n lzma_raw_coder_memusage\n lzma_raw_decoder\n lzma_raw_decoder_init\n lzma_raw_decoder_memusage\n lzma_raw_encoder\n lzma_raw_encoder_init\n lzma_raw_encoder_memusage\n lzma_rc_prices\n lzma_sha256_finish\n lzma_sha256_init\n lzma_sha256_update\n lzma_simple_arm_decoder_init\n lzma_simple_arm_encoder_init\n lzma_simple_armthumb_decoder_init\n lzma_simple_armthumb_encoder_init\n lzma_simple_coder_init\n lzma_simple_ia64_decoder_init\n lzma_simple_ia64_encoder_init\n lzma_simple_powerpc_decoder_init\n lzma_simple_powerpc_encoder_init\n lzma_simple_props_decode\n lzma_simple_props_encode\n lzma_simple_props_size\n lzma_simple_sparc_decoder_init\n lzma_simple_sparc_encoder_init\n lzma_simple_x86_decoder_init\n lzma_simple_x86_encoder_init\n lzma_stream_buffer_bound\n lzma_stream_buffer_decode\n lzma_stream_buffer_encode\n lzma_stream_decoder\n lzma_stream_decoder_init\n lzma_stream_encoder\n lzma_stream_encoder_init\n lzma_stream_flags_compare\n lzma_stream_footer_decode\n lzma_stream_footer_encode\n lzma_stream_header_decode\n lzma_stream_header_encode\n lzma_strm_init\n lzma_version_number\n lzma_version_string\n lzma_vli_decode\n lzma_vli_encode\n lzma_vli_size\n mallinfo\n mb_char_len\n mbcsValid\n menuclear\n menuconfig\n menueditornew\n menueditoropen\n mkPRIMSXP\n mkdtemp\n nCPFun\n newWpipe\n newconsole\n newpager\n newxbuf\n nl_Rdummy\n pR_ShowMessage\n pagerMultiple\n pagerbclose\n pagerhighlight\n pause\n pcre_assign_jit_stack\n pcre_callout\n pcre_compile\n pcre_compile2\n pcre_config\n pcre_copy_named_substring\n pcre_copy_substring\n pcre_exec\n pcre_free\n pcre_free_study\n pcre_free_substring\n pcre_free_substring_list\n pcre_fullinfo\n pcre_get_named_substring\n pcre_get_stringnumber\n pcre_get_stringtable_entries\n pcre_get_substring\n pcre_get_substring_list\n pcre_jit_exec\n pcre_jit_free_unused_memory\n pcre_jit_stack_alloc\n pcre_jit_stack_free\n pcre_maketables\n pcre_malloc\n pcre_refcount\n pcre_stack_free\n pcre_stack_guard\n pcre_stack_malloc\n pcre_study\n pcre_version\n pgamma_raw\n pkgmenuact\n pnbeta2\n pnbeta_raw\n pnchisq_raw\n pointsize\n process_site_Renviron\n process_system_Renviron\n process_user_Renviron\n raise\n realp0_\n registerBase\n resetICUcollator\n resetTimeLimits\n reset_duplicate_counter\n rg_\n rpipeClose\n rpipeGetc\n rpipeGets\n rpipeOpen\n runerror\n savePalette\n setDLLSearchPath\n setTitle\n setWidthOnResize\n set_completion_available\n set_workspace_name\n setconsoleoptions\n setfirstcol\n setfirstvisible\n sigaction\n sigaddset\n sigblock\n sigdelset\n sigemptyset\n sigfillset\n sighold\n sigismember\n signal\n sigpending\n sigprocmask\n sigrelse\n sigsetmask\n sigsuspend\n stemleaf\n switch_stdout\n tql1_\n tql2_\n tqlrat_\n tre_ast_new_catenation\n tre_ast_new_iter\n tre_ast_new_literal\n tre_ast_new_node\n tre_ast_new_union\n tre_compile\n tre_config\n tre_ctype\n tre_ctype_map\n tre_fill_pmatch\n tre_free\n tre_have_approx\n tre_have_backrefs\n tre_isalnum_func\n tre_isalpha_func\n tre_isascii_func\n tre_isblank_func\n tre_iscntrl_func\n tre_isdigit_func\n tre_isgraph_func\n tre_islower_func\n tre_isprint_func\n tre_ispunct_func\n tre_isspace_func\n tre_isupper_func\n tre_isxdigit_func\n tre_mem_alloc_impl\n tre_mem_destroy\n tre_mem_new_impl\n tre_parse\n tre_regaexec\n tre_regaexecb\n tre_reganexec\n tre_regaparams_default\n tre_regawexec\n tre_regawnexec\n tre_regcomp\n tre_regcompb\n tre_regerror\n tre_regexec\n tre_regexecb\n tre_regfree\n tre_regncomp\n tre_regncompb\n tre_regnexec\n tre_regnexecb\n tre_reguexec\n tre_regwcomp\n tre_regwexec\n tre_regwncomp\n tre_regwnexec\n tre_stack_destroy\n tre_stack_new\n tre_stack_num_objects\n tre_stack_pop_int\n tre_stack_pop_voidptr\n tre_stack_push_int\n tre_stack_push_voidptr\n tre_tnfa_run_approx\n tre_tnfa_run_backtrack\n tre_tnfa_run_parallel\n tre_version\n tred1_\n tred2_\n trio_aprintf\n trio_asprintf\n trio_asprintfv\n trio_fprintf\n trio_fprintfv\n trio_fscanf\n trio_fscanfv\n trio_printf\n trio_printfv\n trio_scanf\n trio_scanfv\n trio_snprintf\n trio_snprintfv\n trio_sprintf\n trio_sprintfv\n trio_sscanf\n trio_sscanfv\n trio_strerror\n trio_vaprintf\n trio_vasprintf\n trio_vfprintf\n trio_vfscanf\n trio_vprintf\n trio_vscanf\n trio_vsnprintf\n trio_vsprintf\n trio_vsscanf\n tzname\n tzset\n unregisterBase\n utf8clen\n wgl_hist_init\n wgl_hist_next\n wgl_hist_prev\n wgl_loadhistory\n wgl_savehistory\n winAccessW\n xbufaddxc\n xbufaddxs\n xbufdel\n xbufgrow\n xcalloc_impl\n xdr_bool\n xdr_bytes\n xdr_char\n xdr_enum\n xdr_free\n xdr_int\n xdr_long\n xdr_netobj\n xdr_opaque\n xdr_short\n xdr_string\n xdr_u_char\n xdr_u_int\n xdr_u_long\n xdr_u_short\n xdr_union\n xdr_void\n xdr_wrapstring\n xdrstdio_create\n xfree_impl\n xmalloc_configure\n xmalloc_current\n xmalloc_current_blocks\n xmalloc_dump_leaks\n xmalloc_impl\n xrealloc_impl\n yydebug\n yylloc\n yyllocL\n yyllocR\n z_prec_r\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/dynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997-2014 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  http://www.r-project.org/Licenses/\n */\n\n/*  Dynamic Loading Support: See ../main/Rdynload.c and ../include/Rdynpriv.h\n */\n\n#ifdef HAVE_CONFIG_H\n# include <config.h>\n#endif\n\n#include <string.h>\n#include <stdlib.h>\n#include <Defn.h>\n#include <Rmath.h>\n#include <direct.h>\n#define WIN32_LEAN_AND_MEAN 1\n/* Eventually #define _WIN32_WINNT 0x0502 for SetDllDirectoryA */\n#include <windows.h>\n\n/* SetDllDirectory is supported under XP SP1 and later.\n   If called with a non-NULL argument it sets the argument to be\n   the second item on the DLL search path (after the application\n   launch directory).  This is removed if called with NULL.\n\n   Prior to XP SP1 the second item was the current directory, but this\n   has (by default, 'safe DLL search mode') been moved below the\n   Windows dirs.  Using SetDllDirectory removes it altogether.\n\n   We fudge this via the current directory in earlier systems.\n */\ntypedef BOOL (WINAPI *PSDD)(LPCTSTR);\n\nint setDLLSearchPath(const char *path)\n{\n    int res = 0; /* failure */\n    PSDD p = (PSDD) -1;\n    static char wd[MAX_PATH] = \"\";  /* stored real current directory */\n\n    // XP SP1 and later.\n    if(p == (PSDD) -1)\n\tp = (PSDD) GetProcAddress(GetModuleHandle(TEXT(\"kernel32.dll\")),\n\t\t\t\t  \"SetDllDirectoryA\");\n    if(p) {\n\tres = p(path);\n    } else { /* Windows 2000 */\n\tif(path) {\n\t    GetCurrentDirectory(MAX_PATH, wd);\n\t    SetCurrentDirectory(path);\n\t} else if (wd[0]) {\n\t    SetCurrentDirectory(wd);\n\t    wd[0] = '\\0';\n\t}\n    }\n    return res;\n}\n\n#include <R_ext/Rdynload.h>\n#include <Rdynpriv.h>\n\n\n\t/* Inserts the specified DLL at the head of the DLL list */\n\t/* Returns 1 if the library was successfully added */\n\t/* and returns 0 if the library table is full or */\n\t/* or if LoadLibrary fails for some reason. */\n\nstatic void fixPath(char *path)\n{\n    char *p;\n    for(p = path; *p != '\\0'; p++) if(*p == '\\\\') *p = '/';\n}\n\nstatic HINSTANCE R_loadLibrary(const char *path, int asLocal, int now,\n\t\t\t       const char *search);\nstatic DL_FUNC getRoutine(DllInfo *info, char const *name);\n#ifdef CACHE_DLL_SYM\nstatic void R_deleteCachedSymbols(DllInfo *dll);\n#endif\n\nstatic void R_getDLLError(char *buf, int len);\nstatic void GetFullDLLPath(SEXP call, char *buf, const char *path);\n\nstatic void closeLibrary(HINSTANCE handle)\n{\n    FreeLibrary(handle);\n}\n\nvoid InitFunctionHashing()\n{\n    R_osDynSymbol->loadLibrary = R_loadLibrary;\n    R_osDynSymbol->dlsym = getRoutine;\n    R_osDynSymbol->closeLibrary = closeLibrary;\n    R_osDynSymbol->getError = R_getDLLError;\n\n#ifdef CACHE_DLL_SYM\n    R_osDynSymbol->deleteCachedSymbols = R_deleteCachedSymbols;\n    R_osDynSymbol->lookupCachedSymbol = Rf_lookupCachedSymbol;\n#endif\n\n    R_osDynSymbol->fixPath = fixPath;\n    R_osDynSymbol->getFullDLLPath = GetFullDLLPath;\n}\n\n#ifdef CACHE_DLL_SYM\nstatic void R_deleteCachedSymbols(DllInfo *dll)\n{\n    int i;\n    for(i = nCPFun - 1; i >= 0; i--)\n\tif(!strcmp(CPFun[i].pkg, dll->name)) {\n\t    if(i < nCPFun - 1) {\n\t\tstrcpy(CPFun[i].name, CPFun[--nCPFun].name);\n\t\tstrcpy(CPFun[i].pkg, CPFun[nCPFun].pkg);\n\t\tCPFun[i].func = CPFun[nCPFun].func;\n\t    } else nCPFun--;\n\t}\n}\n#endif\n\n#ifndef _MCW_EM\n_CRTIMP unsigned int __cdecl\n_controlfp (unsigned int unNew, unsigned int unMask);\n_CRTIMP unsigned int __cdecl _clearfp (void);\n/* Control word masks for unMask */\n#define\t_MCW_EM\t\t0x0008001F\t/* Error masks */\n#define\t_MCW_IC\t\t0x00040000\t/* Infinity */\n#define\t_MCW_RC\t\t0x00000300\t/* Rounding */\n#define\t_MCW_PC\t\t0x00030000\t/* Precision */\n#endif\n\nHINSTANCE R_loadLibrary(const char *path, int asLocal, int now,\n\t\t\tconst char *search)\n{\n    HINSTANCE tdlh;\n    unsigned int dllcw, rcw;\n    int useSearch = search && search[0];\n\n    rcw = _controlfp(0,0) & ~_MCW_IC;  /* Infinity control is ignored */\n    _clearfp();\n    if(useSearch) setDLLSearchPath(search);\n    tdlh = LoadLibrary(path);\n    if(useSearch) setDLLSearchPath(NULL);\n    dllcw = _controlfp(0,0) & ~_MCW_IC;\n    if (dllcw != rcw) {\n\t_controlfp(rcw, _MCW_EM | _MCW_IC | _MCW_RC | _MCW_PC);\n\tif (LOGICAL(GetOption1(install(\"warn.FPU\")))[0])\n\t    warning(_(\"DLL attempted to change FPU control word from %x to %x\"),\n\t\t    rcw,dllcw);\n    }\n    return(tdlh);\n}\n\nstatic DL_FUNC getRoutine(DllInfo *info, char const *name)\n{\n    DL_FUNC f;\n    f = (DL_FUNC) GetProcAddress(info->handle, name);\n    return(f);\n}\n\nstatic void R_getDLLError(char *buf, int len)\n{\n    LPSTR lpMsgBuf, p;\n    char *q;\n    FormatMessage(\n\tFORMAT_MESSAGE_ALLOCATE_BUFFER |\n\tFORMAT_MESSAGE_FROM_SYSTEM |\n\tFORMAT_MESSAGE_IGNORE_INSERTS,\n\tNULL,\n\tGetLastError(),\n\tMAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),\n\t(LPSTR) &lpMsgBuf,\n\t0,\n\tNULL\n\t);\n    strcpy(buf, \"LoadLibrary failure:  \");\n    q = buf + strlen(buf);\n    /* It seems that Win 7 returns error messages with CRLF terminators */\n    for (p = lpMsgBuf; *p; p++) if (*p != '\\r') *q++ = *p;\n    LocalFree(lpMsgBuf);\n}\n\nstatic void GetFullDLLPath(SEXP call, char *buf, const char *path)\n{\n    char *p;\n\n    if ((path[0] != '/') && (path[0] != '\\\\') && (path[1] != ':')) {\n\tif (!getcwd(buf, MAX_PATH))\n\t    errorcall(call, _(\"cannot get working directory\"));\n\tstrcat(buf, \"\\\\\");\n\tstrcat(buf, path);\n    } else\n\tstrcpy(buf, path);\n    /* fix slashes to allow inconsistent usage later */\n    for (p = buf; *p; p++) if (*p == '\\\\') *p = '/';\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/unix/hpdlfcn.c": "/*\n *  R : A Computer Langage for Statistical Data Analysis\n *  Copyright (C) 1995, 1996  Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1998--2000  The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  http://www.r-project.org/Licenses/\n */\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <dl.h>\n\n#undef DEBUG\n\n#define RTLD_LAZY (BIND_DEFERRED | BIND_NONFATAL)\n\n/* these are added to shut up warnings that cause make check to fail. */\n#define RTLD_LOCAL 0\n#define RTLD_GLOBAL 0\n#define RTLD_NOW 0\n\n#include \"hpdlfcn.h\"\n\n/*\n * This is a minimal implementation of the ELF dlopen, dlclose, dlsym\n * and dlerror routines based on HP's shl_load, shl_unload and\n * shl_findsym. */\n\n/*\n * Reference Counting.\n *\n * Empirically it looks like the HP routines do not mainain a\n * reference count, so I maintain one here.\n */\n\ntypedef struct lib_entry {\n  shl_t handle;\n  int count;\n  struct lib_entry *next;\n} *LibEntry;\n\n#define lib_entry_handle(e) ((e)->handle)\n#define lib_entry_count(e) ((e)->count)\n#define lib_entry_next(e) ((e)->next)\n#define set_lib_entry_handle(e,v) ((e)->handle = (v))\n#define set_lib_entry_count(e,v) ((e)->count = (v))\n#define set_lib_entry_next(e,v) ((e)->next = (v))\n#define increment_lib_entry_count(e) ((e)->count++)\n#define decrement_lib_entry_count(e) ((e)->count--)\n\nstatic LibEntry Entries = NULL;\n\nstatic LibEntry find_lib_entry(shl_t handle)\n{\n  LibEntry entry;\n\n  for (entry = Entries; entry != NULL; entry = lib_entry_next(entry))\n    if (lib_entry_handle(entry) == handle)\n      return entry;\n  return NULL;\n}\n\nstatic LibEntry new_lib_entry(shl_t handle)\n{\n  LibEntry entry;\n\n  if ((entry = (LibEntry) malloc(sizeof(struct lib_entry))) != NULL) {\n    set_lib_entry_handle(entry, handle);\n    set_lib_entry_count(entry, 1);\n    set_lib_entry_next(entry, Entries);\n    Entries = entry;\n  }\n  return entry;\n}\n\nstatic void free_lib_entry(LibEntry entry)\n{\n  if (entry == Entries)\n    Entries = lib_entry_next(entry);\n  else {\n    LibEntry last, next;\n    for (last = Entries, next = lib_entry_next(last);\n\t next != NULL;\n\t last = next, next = lib_entry_next(last)) {\n      if (entry == next) {\n\tset_lib_entry_next(last, lib_entry_next(entry));\n\tbreak;\n      }\n    }\n  }\n  free(entry);\n}\n\n\n/*\n * Error Handling.\n */\n\n#define ERRBUFSIZE 1000\n\nstatic char errbuf[ERRBUFSIZE];\nstatic int dlerrno = 0;\n\nchar *dlerror(void)\n{\n  return dlerrno ? errbuf : NULL;\n}\n\n\n/*\n * Opening and Closing Liraries.\n */\n\nvoid *dlopen(const char *fname, int mode)\n{\n  shl_t handle;\n  LibEntry entry = NULL;\n\n  dlerrno = 0;\n  if (fname == NULL)\n    handle = PROG_HANDLE;\n  else {\n    handle = shl_load(fname, mode | BIND_VERBOSE, 0L);\n    if (handle != NULL) {\n      if ((entry = find_lib_entry(handle)) == NULL) {\n\tif ((entry = new_lib_entry(handle)) == NULL) {\n\t  shl_unload(handle);\n\t  handle = NULL;\n\t}\n      }\n      else\n\tincrement_lib_entry_count(entry);\n    }\n    if (handle == NULL) {\n      dlerrno = 1;\n      sprintf(errbuf, \"can't open %s\", fname);\n    }\n  }\n#ifdef DEBUG\n  printf(\"opening library %s, handle = %x, count = %d\\n\",\n\t fname, handle, entry ? lib_entry_count(entry) : -1);\n  if (dlerrno) printf(\"%s\\n\", dlerror());\n#endif\n  return (void *) handle;\n}\n\nint dlclose(void *handle)\n{\n  LibEntry entry;\n#ifdef DEBUG\n  entry = find_lib_entry(handle);\n  printf(\"closing library handle = %x, count = %d\\n\",\n\t handle, entry ? lib_entry_count(entry) : -1);\n#endif\n\n  dlerrno = 0;\n  if ((shl_t) handle == PROG_HANDLE)\n    return 0; /* ignore attempts to close main program */\n  else {\n\n    if ((entry = find_lib_entry((shl_t) handle)) != NULL) {\n      decrement_lib_entry_count(entry);\n      if (lib_entry_count(entry) > 0)\n\treturn 0;\n      else {\n\t/* unload once reference count reaches zero */\n\tfree_lib_entry(entry);\n\tif (shl_unload((shl_t) handle) == 0)\n\t  return 0;\n      }\n    }\n    /* if you get to here, an error has occurred */\n    dlerrno = 1;\n    sprintf(errbuf, \"attempt to close library failed\");\n#ifdef DEBUG\n    printf(\"%s\\n\", dlerror());\n#endif\n    return -1;\n  }\n}\n\n\n/*\n * Symbol Lookup.\n */\n\nvoid *dlsym(void *handle, const char *name)\n{\n  void *f;\n  shl_t myhandle;\n\n  dlerrno = 0;\n  myhandle = (handle == NULL) ? PROG_HANDLE : (shl_t) handle;\n\n  if (shl_findsym(&myhandle, name, TYPE_PROCEDURE, &f) != 0) {\n    dlerrno = 1;\n    sprintf(errbuf, \"symbol %s not found\", name);\n#ifdef DEBUG\n    printf(\"symbol %s not found\", name);\n#endif\n\n    f = NULL;\n  }\n\n  return(f);\n}\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/unix/dynload.c": "/*\n *  R : A Computer Language for Statistical Data Analysis\n *  Copyright (C) 1995-1996 Robert Gentleman and Ross Ihaka\n *  Copyright (C) 1997-2001 The R Core Team\n *\n *  This program is free software; you can redistribute it and/or modify\n *  it under the terms of the GNU General Public License as published by\n *  the Free Software Foundation; either version 2 of the License, or\n *  (at your option) any later version.\n *\n *  This program is distributed in the hope that it will be useful,\n *  but WITHOUT ANY WARRANTY; without even the implied warranty of\n *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *  GNU General Public License for more details.\n *\n *  You should have received a copy of the GNU General Public License\n *  along with this program; if not, a copy is available at\n *  http://www.r-project.org/Licenses/\n */\n\n/* <UTF8> char here is handled as a whole string */\n\n\n/* This provides a table of built-in C and Fortran functions.\n   We include this table, even when we have dlopen and friends.\n   This is so that the functions are actually loaded at link time. */\n\n\n#ifdef HAVE_CONFIG_H\n#include <config.h>\n#endif\n\n#include <Defn.h>\n#include <Rdynpriv.h>\n\n#ifdef HAVE_UNISTD_H\n#include <unistd.h>\n#endif\n\n/* HP-UX 11.0 has dlfcn.h, but according to libtool as of Dec 2001\n   this support is broken. So we force use of shlib even when dlfcn.h\n   is available */\n# ifdef __hpux\n#  ifdef HAVE_DL_H\n#   include \"hpdlfcn.c\"\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# else\n#  ifdef HAVE_DLFCN_H\n#   include <dlfcn.h>\n#   define HAVE_DYNAMIC_LOADING\n#  endif\n# endif\n\n#ifdef HAVE_DYNAMIC_LOADING\n\nstatic void *loadLibrary(const char *path, int asLocal, int now,\n\t\t\t const char *search);\nstatic void closeLibrary(void *handle);\nstatic void deleteCachedSymbols(DllInfo *);\nstatic DL_FUNC R_local_dlsym(DllInfo *info, char const *name);\nstatic void getFullDLLPath(SEXP call, char *buf, const char *path);\nstatic void getSystemError(char *buf, int len);\n\nstatic int computeDLOpenFlag(int asLocal, int now);\n\nvoid attribute_hidden InitFunctionHashing()\n{\n    R_osDynSymbol->loadLibrary = loadLibrary;\n    R_osDynSymbol->dlsym = R_local_dlsym;\n    R_osDynSymbol->closeLibrary = closeLibrary;\n    R_osDynSymbol->getError = getSystemError;\n\n    R_osDynSymbol->deleteCachedSymbols = deleteCachedSymbols;\n    R_osDynSymbol->lookupCachedSymbol = Rf_lookupCachedSymbol;\n\n    R_osDynSymbol->getFullDLLPath = getFullDLLPath;\n}\n\nstatic void getSystemError(char *buf, int len)\n{\n    strcpy(buf, dlerror());\n}\n\nstatic void *loadLibrary(const char *path, int asLocal, int now,\n\t\t\t const char *search)\n{\n    void *handle;\n    int openFlag = 0;\n\n    openFlag = computeDLOpenFlag(asLocal, now);\n    handle = (void *) dlopen(path,openFlag);\n\n    return(handle);\n}\n\nstatic void closeLibrary(HINSTANCE handle)\n{\n    dlclose(handle);\n}\n\n /*\n   If we are caching the native level symbols, this routine\n   discards the ones from the DLL identified by loc.\n   This is called as the initial action of DeleteDLL().\n  */\nstatic void deleteCachedSymbols(DllInfo *dll)\n{\n#ifdef CACHE_DLL_SYM\n    int i;\n    /* Wouldn't a linked list be easier here?\n       Potentially ruin the contiguity of the memory.\n    */\n    for(i = nCPFun - 1; i >= 0; i--)\n\tif(!strcmp(CPFun[i].pkg, dll->name)) {\n\t    if(i < nCPFun - 1) {\n\t\tstrcpy(CPFun[i].name, CPFun[--nCPFun].name);\n\t\tstrcpy(CPFun[i].pkg, CPFun[nCPFun].pkg);\n\t\tCPFun[i].func = CPFun[nCPFun].func;\n\t    } else nCPFun--;\n\t}\n#endif /* CACHE_DLL_SYM */\n}\n\n\n /*\n    Computes the flag to be passed as the second argument to dlopen(),\n    controlling whether the local or global symbol integration\n    and lazy or eager resolution of the undefined symbols.\n    The arguments determine which of each of these possibilities\n    to use and the results are or'ed together. We need a separate\n    routine to keep things clean(er) because some symbolic constants\n    may not  be defined, such as RTLD_LOCAL on certain Solaris 2.5.1\n    and Irix 6.4    boxes. In such cases, we emit a warning message and\n    use the default by not modifying the value of the flag.\n\n    Called only by AddDLL().\n  */\nstatic int computeDLOpenFlag(int asLocal, int now)\n{\n#if !defined(RTLD_LOCAL) || !defined(RTLD_GLOBAL) || !defined(RTLD_NOW) || !defined(RTLD_LAZY)\n    static char *warningMessages[] = {\n\tN_(\"Explicit local dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit global dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit non-lazy dynamic loading not supported on this platform. Using default.\"),\n\tN_(\"Explicit lazy dynamic loading not supported on this platform. Using default.\")\n    };\n    /* Define a local macro for issuing the warnings.\n       This allows us to redefine it easily so that it only emits the\n       warning once as in\n       DL_WARN(i) if(warningMessages[i]) {\\\n       warning(warningMessages[i]); \\\n       warningMessages[i] = NULL; \\\n       }\n       or to control the emission via the options currently in effect at\n       call time.\n    */\n# define DL_WARN(i) \\\n    if(asInteger(GetOption1(install(\"warn\"))) == 1 || \\\n       asInteger(GetOption1(install(\"verbose\"))) > 0) \\\n\twarning(_(warningMessages[i]))\n#endif\n\n    int openFlag = 0;\t\t/* Default value so no-ops for undefined\n\t\t\t\t   flags should do nothing in the\n\t\t\t\t   resulting dlopen(). */\n\n    if(asLocal != 0) {\n#ifndef RTLD_LOCAL\n# ifndef __CYGWIN__\n\tDL_WARN(0);\n# endif\n#else\n\topenFlag = RTLD_LOCAL;\n#endif\n    } else {\n#ifndef RTLD_GLOBAL\n# ifndef __CYGWIN__\n\tDL_WARN(1);\n# endif\n#else\n\topenFlag = RTLD_GLOBAL;\n#endif\n    }\n\n    if(now != 0) {\n#ifndef RTLD_NOW\n# ifndef __CYGWIN__\n\tDL_WARN(2);\n# endif\n#else\n\topenFlag |= RTLD_NOW;\n#endif\n    } else {\n#ifndef RTLD_LAZY\n# ifndef __CYGWIN__\n\tDL_WARN(3);\n# endif\n#else\n\topenFlag |= RTLD_LAZY;\n#endif\n    }\n\n    return(openFlag);\n}\n\n\n/*\n  This is the system/OS-specific version for resolving a\n  symbol in a shared object.  A cast would not be legal C.\n */\ntypedef union {void *p; DL_FUNC fn;} fn_ptr;\nstatic DL_FUNC R_local_dlsym(DllInfo *info, char const *name)\n{\n    fn_ptr tmp;\n    tmp.p = dlsym(info->handle, name);\n    return tmp.fn;\n}\n\n\n/*\n  In the future, this will receive an additional argument\n  which will specify the nature of the symbol expected by the\n  caller, specifically whether it is for a .C(), .Call(),\n  .Fortran(), .External(), generic, etc. invocation. This will\n  reduce the pool of possible symbols in the case of a library\n  that registers its routines.\n */\n\n\n\nstatic void getFullDLLPath(SEXP call, char *buf, const char *path)\n{\n    if(path[0] == '~')\n\tstrcpy(buf, R_ExpandFileName(path));\n    else if(path[0] != '/') {\n#ifdef HAVE_GETCWD\n\tif(!getcwd(buf, PATH_MAX))\n#endif\n\t    errorcall(call, _(\"cannot get working directory!\"));\n\tstrcat(buf, \"/\");\n\tstrcat(buf, path);\n    }\n    else strcpy(buf, path);\n}\n\n#endif /* end of `ifdef HAVE_DYNAMIC_LOADING' */\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/unix/hpdlfcn.h": "void *dlopen(const char *, int);\nvoid *dlsym(void *, const char *);\nint dlclose(void *);\nchar *dlerror(void);\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/m4/libtool.m4": "# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008 Free Software Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\ndnl Some changes for FreeBSD >= 10 ported from libtool 2.4.6.\n\ndnl # serial 56 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"X$cc_temp\" | $Xsed -e 's%.*/%%' -e \"s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n_LT_PROG_ECHO_BACKSLASH\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n## ------------------------------------- ##\n## Accumulate code for creating libtool. ##\n## ------------------------------------- ##\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n## ------------------------ ##\n## FIXME: Eliminate VARNAME ##\n## ------------------------ ##\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"X$][$1\" | $Xsed -e \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"X$<var>\" | $Xsed -e \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \"X\\\\\\\\\\$\\$var\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"X\\\\\\$\\$var\\\\\" | \\\\\\$Xsed -e \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \"X\\\\\\\\\\$\\$var\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"X\\\\\\$\\$var\\\\\" | \\\\\\$Xsed -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Fix-up fallback echo if it was mangled by the above quoting rules.\ncase \\$lt_ECHO in\n*'\\\\\\[$]0 --fallback-echo\"')dnl \"\n  lt_ECHO=\\`\\$ECHO \"X\\$lt_ECHO\" | \\$Xsed -e 's/\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\[$]0 --fallback-echo\"\\[$]/\\[$]0 --fallback-echo\"/'\\`\n  ;;\nesac\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\ncat >\"$CONFIG_LT\" <<_LTEOF\n#! $SHELL\n# Generated by $as_me.\n# Run this file to recreate a libtool stub with the current configuration.\n\nlt_cl_silent=false\nSHELL=\\${CONFIG_SHELL-$SHELL}\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAS_SHELL_SANITIZE\n_AS_PREPARE\n\nexec AS_MESSAGE_FD>&1\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2008 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nif test \"$no_create\" != yes; then\n  lt_cl_success=:\n  test \"$silent\" = yes &&\n    lt_config_lt_args=\"$lt_config_lt_args --quiet\"\n  exec AS_MESSAGE_LOG_FD>/dev/null\n  $SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\n  exec AS_MESSAGE_LOG_FD>>config.log\n  $lt_cl_success || AS_EXIT(1)\nfi\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '/^# Generated shell functions inserted here/q' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_XSI_SHELLFNS\n\n  sed -n '/^# Generated shell functions inserted here/,$p' \"$ltmain\" >> \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\"; exit 1)\n\n  mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\tif test -f libconftest.dylib && test ! -s conftest.err && test $_lt_result = 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES\n# --------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=echo\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX\n# -----------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nAC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],[\nlt_aix_libpath_sed='\n    /Import File Strings/,/^$/ {\n\t/^0/ {\n\t    s/^0  *\\(.*\\)$/\\1/\n\t    p\n\t}\n    }'\naix_libpath=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n# Check for a 64-bit object if we didn't find anything.\nif test -z \"$aix_libpath\"; then\n  aix_libpath=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\nfi],[])\nif test -z \"$aix_libpath\"; then aix_libpath=\"/usr/lib:/lib\"; fi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[ifdef([AC_DIVERSION_NOTICE],\n\t     [AC_DIVERT_PUSH(AC_DIVERSION_NOTICE)],\n\t [AC_DIVERT_PUSH(NOTICE)])\n$1\nAC_DIVERT_POP\n])# _LT_SHELL_INIT\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Add some code to the start of the generated configure script which\n# will find an echo command which doesn't interpret backslashes.\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[_LT_SHELL_INIT([\n# Check that we are running under the correct shell.\nSHELL=${CONFIG_SHELL-/bin/sh}\n\ncase X$lt_ECHO in\nX*--fallback-echo)\n  # Remove one level of quotation (which was required for Make).\n  ECHO=`echo \"$lt_ECHO\" | sed 's,\\\\\\\\\\[$]\\\\[$]0,'[$]0','`\n  ;;\nesac\n\nECHO=${lt_ECHO-echo}\nif test \"X[$]1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X[$]1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' ; then\n  # Yippee, $ECHO works!\n  :\nelse\n  # Restart under the correct shell.\n  exec $SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\nfi\n\nif test \"X[$]1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<_LT_EOF\n[$]*\n_LT_EOF\n  exit 0\nfi\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nif test -z \"$lt_ECHO\"; then\n  if test \"X${echo_test_string+set}\" != Xset; then\n    # find a string as large as possible, as long as the shell can cope with it\n    for cmd in 'sed 50q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 2q \"[$]0\"' 'echo test'; do\n      # expected sizes: less than 2Kb, 1Kb, 512 bytes, 16 bytes, ...\n      if { echo_test_string=`eval $cmd`; } 2>/dev/null &&\n\t { test \"X$echo_test_string\" = \"X$echo_test_string\"; } 2>/dev/null\n      then\n        break\n      fi\n    done\n  fi\n\n  if test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n     echo_testing_string=`{ $ECHO \"$echo_test_string\"; } 2>/dev/null` &&\n     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n    :\n  else\n    # The Solaris, AIX, and Digital Unix default echo programs unquote\n    # backslashes.  This makes it impossible to quote backslashes using\n    #   echo \"$something\" | sed 's/\\\\/\\\\\\\\/g'\n    #\n    # So, first we look for a working echo in the user's PATH.\n\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for dir in $PATH /usr/ucb; do\n      IFS=\"$lt_save_ifs\"\n      if (test -f $dir/echo || test -f $dir/echo$ac_exeext) &&\n         test \"X`($dir/echo '\\t') 2>/dev/null`\" = 'X\\t' &&\n         echo_testing_string=`($dir/echo \"$echo_test_string\") 2>/dev/null` &&\n         test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n        ECHO=\"$dir/echo\"\n        break\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n\n    if test \"X$ECHO\" = Xecho; then\n      # We didn't find a better echo, so look for alternatives.\n      if test \"X`{ print -r '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n         echo_testing_string=`{ print -r \"$echo_test_string\"; } 2>/dev/null` &&\n         test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n        # This shell has a builtin print -r that does the trick.\n        ECHO='print -r'\n      elif { test -f /bin/ksh || test -f /bin/ksh$ac_exeext; } &&\n\t   test \"X$CONFIG_SHELL\" != X/bin/ksh; then\n        # If we have ksh, try running configure again with it.\n        ORIGINAL_CONFIG_SHELL=${CONFIG_SHELL-/bin/sh}\n        export ORIGINAL_CONFIG_SHELL\n        CONFIG_SHELL=/bin/ksh\n        export CONFIG_SHELL\n        exec $CONFIG_SHELL \"[$]0\" --no-reexec ${1+\"[$]@\"}\n      else\n        # Try using printf.\n        ECHO='printf %s\\n'\n        if test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t' &&\n\t   echo_testing_string=`{ $ECHO \"$echo_test_string\"; } 2>/dev/null` &&\n\t   test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  # Cool, printf works\n\t  :\n        elif echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = 'X\\t' &&\n\t     echo_testing_string=`($ORIGINAL_CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  CONFIG_SHELL=$ORIGINAL_CONFIG_SHELL\n\t  export CONFIG_SHELL\n\t  SHELL=\"$CONFIG_SHELL\"\n\t  export SHELL\n\t  ECHO=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n        elif echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo '\\t') 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = 'X\\t' &&\n\t     echo_testing_string=`($CONFIG_SHELL \"[$]0\" --fallback-echo \"$echo_test_string\") 2>/dev/null` &&\n\t     test \"X$echo_testing_string\" = \"X$echo_test_string\"; then\n\t  ECHO=\"$CONFIG_SHELL [$]0 --fallback-echo\"\n        else\n\t  # maybe with a smaller string...\n\t  prev=:\n\n\t  for cmd in 'echo test' 'sed 2q \"[$]0\"' 'sed 10q \"[$]0\"' 'sed 20q \"[$]0\"' 'sed 50q \"[$]0\"'; do\n\t    if { test \"X$echo_test_string\" = \"X`eval $cmd`\"; } 2>/dev/null\n\t    then\n\t      break\n\t    fi\n\t    prev=\"$cmd\"\n\t  done\n\n\t  if test \"$prev\" != 'sed 50q \"[$]0\"'; then\n\t    echo_test_string=`eval $prev`\n\t    export echo_test_string\n\t    exec ${ORIGINAL_CONFIG_SHELL-${CONFIG_SHELL-/bin/sh}} \"[$]0\" ${1+\"[$]@\"}\n\t  else\n\t    # Oops.  We lost completely, so just stick with echo.\n\t    ECHO=echo\n\t  fi\n        fi\n      fi\n    fi\n  fi\nfi\n\n# Copy echo and quote the copy suitably for passing to libtool from\n# the Makefile, instead of quoting the original, which is used later.\nlt_ECHO=$ECHO\nif test \"X$lt_ECHO\" = \"X$CONFIG_SHELL [$]0 --fallback-echo\"; then\n   lt_ECHO=\"$CONFIG_SHELL \\\\\\$\\[$]0 --fallback-echo\"\nfi\n\nAC_SUBST(lt_ECHO)\n])\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1],\n    [An echo program that does not interpret backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line __oline__ \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|ppc*-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_i386\"\n\t    ;;\n\t  ppc64-*linux*|powerpc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  ppc*-*linux*|powerpc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\nsparc*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*) LD=\"${LD-ld} -m elf64_sparc\" ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[AC_CHECK_TOOL(AR, ar, false)\ntest -z \"$AR\" && AR=ar\ntest -z \"$AR_FLAGS\" && AR_FLAGS=cru\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1])\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$oldlib\"\nfi\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"X$_lt_linker_boilerplate\" | $Xsed -e '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`$SHELL [$]0 --fallback-echo \"X$teststring$teststring\" 2>/dev/null` \\\n\t         = \"XX$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line __oline__ \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\nvoid fnord() { int i=42;}\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else if (dlsym( self,\"_fnord\")) status = $lt_dlneed_uscore;\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:__oline__: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:__oline__: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"X$_lt_compiler_boilerplate\" | $Xsed -e '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[dnl m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n  if $ECHO \"$lt_search_path_spec\" | $GREP ';' >/dev/null ; then\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED -e 's/;/ /g'`\n  else\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n  fi\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO $lt_tmp_lt_search_path_spec | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  sys_lib_search_path_spec=`$ECHO $lt_search_path_spec`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`$ECHO \"X$lib\" | $Xsed -e '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$host_os in\n  yes,cygwin* | yes,mingw* | yes,pw32* | yes,cegcc*)\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=\"/usr/lib /lib/w32api /lib /usr/local/lib\"\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      sys_lib_search_path_spec=`$CC -print-search-dirs | $GREP \"^libraries:\" | $SED -e \"s/^libraries://\" -e \"s,=/,/,g\"`\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH printed by\n        # mingw gcc, but we are running on Cygwin. Gcc prints its search\n        # path with ; separators, and with drive letters. We can handle the\n        # drive letters (cygwin fileutils understands them), so leave them,\n        # especially as we might pass files found there to a mingw objdump,\n        # which wouldn't understand a cygwinified path. Ahh.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED  -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    ;;\n\n  *)\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    ;;\n  esac\n  dynamic_linker='Win32 ld.exe'\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23].]*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\ngnu*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555.\n  postinstall_cmds='chmod 555 $lib'\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  # Some binutils ld are patched to set DT_RUNPATH\n  save_LDFLAGS=$LDFLAGS\n  save_libdir=$libdir\n  eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n       LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n  AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n    [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n       [shlibpath_overrides_runpath=yes])])\n  LDFLAGS=$save_LDFLAGS\n  libdir=$save_libdir\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\n\ndnl AC_ARG_WITH([gnu-ld],\ndnl     [AS_HELP_STRING([--with-gnu-ld],\ndnl \t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\ndnl     [test \"$withval\" = no || with_gnu_ld=yes],\ndnl     [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_DECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_DECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  if ( file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    lt_cv_deplibs_check_method='file_magic file format pei*-i386(.*architecture: i386)?'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\ngnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - PA-RISC [0-9].[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]].[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be Linux ELF.\nlinux* | k*bsd*-gnu)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method == \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  AC_CHECK_TOOLS(DUMPBIN, [\"dumpbin -symbols\" \"link -dump -symbols\"], :)\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:__oline__: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:__oline__: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:__oline__: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cygwin* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\) $/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| $lt_cv_sys_global_symbol_pipe \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nconst struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_save_LIBS=\"$LIBS\"\n\t  lt_save_CFLAGS=\"$CFLAGS\"\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=\"$lt_save_LIBS\"\n\t  CFLAGS=\"$lt_save_CFLAGS\"\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nAC_MSG_CHECKING([for $compiler option to produce PIC])\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC*)\n\t    # IBM XL 8.0 on PPC\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd*)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl*)\n\t# IBM XL C 8.0/Fortran 10.1 on PPC\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n\t*Sun\\ F*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\nAC_MSG_RESULT([$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n  ;;\n  cygwin* | mingw* | cegcc*)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;/^.*[[ ]]__nm__/s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  ;;\n  esac\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n  if test \"$with_gnu_ld\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.9.1, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to modify your PATH\n*** so that a non-GNU linker is found, and then restart.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95*)\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]*)\t\t\t# IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='-rpath $libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $compiler_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $compiler_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then $ECHO \"X${wl}${allow_undefined_flag}\" | $Xsed; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  # Exported symbols can be pulled into shared objects from archives\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      # Tell ltmain to make .lib files, not .a files.\n      libext=lib\n      # Tell ltmain to make .dll files, not .so files.\n      shrext_cmds=\".dll\"\n      # FIXME: Setting linknames here is a bad hack.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `$ECHO \"X$deplibs\" | $Xsed -e '\\''s/ -lc$//'\\''` -link -dll~linknames='\n      # The linker will automatically build a .lib file if we build a DLL.\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n      # FIXME: Should let the user specify the lib program.\n      _LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n      _LT_TAGVAR(fix_srcfile_path, $1)='`cygpath -w \"$srcfile\"`'\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)='+b $libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes -a \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n        save_LDFLAGS=\"$LDFLAGS\"\n        LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n        AC_LINK_IFELSE([AC_LANG_SOURCE([[int foo(void) {}]])],\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n        )\n        LDFLAGS=\"$save_LDFLAGS\"\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd*)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~$ECHO DATA >> $output_objdir/$libname.def~$ECHO \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~$ECHO EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_MSG_CHECKING([whether -lc should be explicitly linked in])\n      $RM conftest*\n      echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n      if AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n        soname=conftest\n        lib=conftest\n        libobjs=conftest.$ac_objext\n        deplibs=\n        wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\tpic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n        compiler_flags=-v\n        linker_flags=-v\n        verstring=\n        output_objdir=.\n        libname=conftest\n        lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n        _LT_TAGVAR(allow_undefined_flag, $1)=\n        if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n        then\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        else\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n        fi\n        _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n      else\n        cat conftest.err 1>&5\n      fi\n      $RM conftest*\n      AC_MSG_RESULT([$_LT_TAGVAR(archive_cmds_need_lc, $1)])\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec_ld], [1],\n    [[If ld is used when linking, flag to hardcode $libdir into a binary\n    during linking.  This must work even if $libdir does not exist]])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [fix_srcfile_path], [1],\n    [Fix the shell variable $srcfile for the compiler])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_PROG_CXX\n# ------------\n# Since AC_PROG_CXX is broken, in that it returns g++ if there is no c++\n# compiler, we have our own version here.\nm4_defun([_LT_PROG_CXX],\n[\npushdef([AC_MSG_ERROR], [_lt_caught_CXX_error=yes])\nAC_PROG_CXX\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_CXX\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_CXX], [])\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[AC_REQUIRE([_LT_PROG_CXX])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then $ECHO \"X${wl}${allow_undefined_flag}\" | $Xsed; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n        # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n        # as there is no search path for DLLs.\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n        _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n        _LT_TAGVAR(always_export_symbols, $1)=no\n        _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n        if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n          # If the export-symbols file already is a .def file (1st line\n          # is EXPORTS), use it as is; otherwise, prepend...\n          _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    cp $export_symbols $output_objdir/$soname.def;\n          else\n\t    echo EXPORTS > $output_objdir/$soname.def;\n\t    cat $export_symbols >> $output_objdir/$soname.def;\n          fi~\n          $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n        else\n          _LT_TAGVAR(ld_shlibs, $1)=no\n        fi\n        ;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      gnu*)\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib -fPIC ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]]* | *pgcpp\\ [[1-5]]*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 will use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`$ECHO \"X$templist\" | $Xsed -e \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n\t  xl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; $ECHO \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='echo'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=echo\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"X-set_version $verstring\" | $Xsed` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`$ECHO \"X$templist\" | $Xsed -e \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; $ECHO \"X$list\" | $Xsed'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"X${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && $ECHO \"${wl}-set_version ${wl}$verstring\" | $Xsed` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='echo'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n])\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case $p in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       else\n\t prev=\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case $p in\n\t -L* | -R*)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       ;;\n\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_PROG_F77\n# ------------\n# Since AC_PROG_F77 is broken, in that it returns the empty string\n# if there is no fortran compiler, we have our own version here.\nm4_defun([_LT_PROG_F77],\n[\npushdef([AC_MSG_ERROR], [_lt_disable_F77=yes])\nAC_PROG_F77\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_F77\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_F77], [])\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_REQUIRE([_LT_PROG_F77])dnl\nAC_LANG_PUSH(Fortran 77)\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${F77-\"f77\"}\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_PROG_FC\n# -----------\n# Since AC_PROG_FC is broken, in that it returns the empty string\n# if there is no fortran compiler, we have our own version here.\nm4_defun([_LT_PROG_FC],\n[\npushdef([AC_MSG_ERROR], [_lt_disable_FC=yes])\nAC_PROG_FC\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\npopdef([AC_MSG_ERROR])\n])# _LT_PROG_FC\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([_LT_PROG_FC], [])\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_REQUIRE([_LT_PROG_FC])dnl\nAC_LANG_PUSH(Fortran)\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_flag_spec_ld, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  CC=${FC-\"f95\"}\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n\n## CAVEAT EMPTOR:\n## There is no encapsulation within the following macros, do not change\n## the running order or otherwise move them around unless you know exactly\n## what you are doing...\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=\"$lt_save_CC\"\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=\"$lt_save_CC\"\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n############################################################\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n############################################################\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_XSI_SHELLFNS\n# ---------------------\n# Bourne and XSI compatible variants of some useful shell functions.\nm4_defun([_LT_PROG_XSI_SHELLFNS],\n[case $xsi_shell in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  case ${1} in\n    */*) func_dirname_result=\"${1%/*}${2}\" ;;\n    *  ) func_dirname_result=\"${3}\" ;;\n  esac\n  func_basename_result=\"${1##*/}\"\n}\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\nfunc_stripname ()\n{\n  # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n  # positional parameters, so assign one to ordinary parameter first.\n  func_stripname_result=${3}\n  func_stripname_result=${func_stripname_result#\"${1}\"}\n  func_stripname_result=${func_stripname_result%\"${2}\"}\n}\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=${1%%=*}\n  func_opt_split_arg=${1#*=}\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  case ${1} in\n    *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n    *)    func_lo2o_result=${1} ;;\n  esac\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=${1%.*}.lo\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=$(( $[*] ))\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=${#1}\n}\n\n_LT_EOF\n    ;;\n  *) # Bourne compatible functions.\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"X${1}\" | $Xsed -e \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n}\n\n# func_basename file\nfunc_basename ()\n{\n  func_basename_result=`$ECHO \"X${1}\" | $Xsed -e \"$basename\"`\n}\n\ndnl func_dirname_and_basename\ndnl A portable version of this function is already defined in general.m4sh\ndnl so there is no need for it here.\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n  case ${2} in\n    .*) func_stripname_result=`$ECHO \"X${3}\" \\\n           | $Xsed -e \"s%^${1}%%\" -e \"s%\\\\\\\\${2}\\$%%\"`;;\n    *)  func_stripname_result=`$ECHO \"X${3}\" \\\n           | $Xsed -e \"s%^${1}%%\" -e \"s%${2}\\$%%\"`;;\n  esac\n}\n\n# sed scripts:\nmy_sed_long_opt='1s/^\\(-[[^=]]*\\)=.*/\\1/;q'\nmy_sed_long_arg='1s/^-[[^=]]*=//'\n\n# func_opt_split\nfunc_opt_split ()\n{\n  func_opt_split_opt=`$ECHO \"X${1}\" | $Xsed -e \"$my_sed_long_opt\"`\n  func_opt_split_arg=`$ECHO \"X${1}\" | $Xsed -e \"$my_sed_long_arg\"`\n}\n\n# func_lo2o object\nfunc_lo2o ()\n{\n  func_lo2o_result=`$ECHO \"X${1}\" | $Xsed -e \"$lo2o\"`\n}\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n  func_xform_result=`$ECHO \"X${1}\" | $Xsed -e 's/\\.[[^.]]*$/.lo/'`\n}\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n  func_arith_result=`expr \"$[@]\"`\n}\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n  func_len_result=`expr \"$[1]\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n}\n\n_LT_EOF\nesac\n\ncase $lt_shell_append in\n  yes)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]+=\\$[2]\"\n}\n_LT_EOF\n    ;;\n  *)\n    cat << \\_LT_EOF >> \"$cfgfile\"\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n  eval \"$[1]=\\$$[1]\\$[2]\"\n}\n\n_LT_EOF\n    ;;\n  esac\n])\n",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tools/ltmain.sh": "# Generated from ltmain.m4sh.\n\n# ltmain.sh (GNU libtool) 2.2.6\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006, 2007 2008 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#     --config             show all configuration variables\n#     --debug              enable verbose shell tracing\n# -n, --dry-run            display commands without modifying any files\n#     --features           display basic configuration information and exit\n#     --mode=MODE          use operation mode MODE\n#     --preserve-dup-deps  don't remove duplicate dependency libraries\n#     --quiet, --silent    don't print informational messages\n#     --tag=TAG            use configuration variables from tag TAG\n# -v, --verbose            print informational messages (default)\n#     --version            print version information\n# -h, --help               print short or long help message\n#\n# MODE must be one of the following:\n#\n#       clean              remove files from the build directory\n#       compile            compile a source file into a libtool object\n#       execute            automatically set library path, then run a program\n#       finish             complete the installation of libtool libraries\n#       install            install libraries or executables\n#       link               create a library or an executable\n#       uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#       host-triplet:\t$host\n#       shell:\t\t$SHELL\n#       compiler:\t\t$LTCC\n#       compiler flags:\t\t$LTCFLAGS\n#       linker:\t\t$LD (gnu? $with_gnu_ld)\n#       $progname:\t\t(GNU libtool) 2.2.6\n#       automake:\t\t$automake_version\n#       autoconf:\t\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n\nPROGRAM=ltmain.sh\nPACKAGE=libtool\nVERSION=2.2.6\nTIMESTAMP=\"\"\npackage_revision=1.3012\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# NLS nuisances: We save the old values to restore during execute mode.\n# Only set LANG and LC_ALL to C if already set.\n# These must not be set unconditionally because not all systems understand\n# e.g. LANG=C (notably SCO).\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\n\n$lt_unset CDPATH\n\n\n\n\n\n: ${CP=\"cp -f\"}\n: ${ECHO=\"echo\"}\n: ${EGREP=\"/usr/bin/grep -E\"}\n: ${FGREP=\"/usr/bin/grep -F\"}\n: ${GREP=\"/usr/bin/grep\"}\n: ${LN_S=\"ln -s\"}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SED=\"/opt/local/bin/gsed\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n  # Extract subdirectory from the argument.\n  func_dirname_result=`$ECHO \"X${1}\" | $Xsed -e \"$dirname\"`\n  if test \"X$func_dirname_result\" = \"X${1}\"; then\n    func_dirname_result=\"${3}\"\n  else\n    func_dirname_result=\"$func_dirname_result${2}\"\n  fi\n  func_basename_result=`$ECHO \"X${1}\" | $Xsed -e \"$basename\"`\n}\n\n# Generated shell functions inserted here.\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n# The name of this program:\n# In the unlikely event $progname began with a '-', it would play havoc with\n# func_echo (imagine progname=-n), so we prepend ./ in that case:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\ncase $progname in\n  -*) progname=./$progname ;;\nesac\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=:\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname${mode+: }$mode: $*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname${mode+: }$mode: \"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname${mode+: }$mode: warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"X$my_directory_path\" | $Xsed -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"X$my_dir_list\" | $Xsed -e 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"X$my_tmpdir\" | $Xsed\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"X$1\" | $Xsed -e \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"X$1\" | $Xsed \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $SED -n '/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $SED -n '/^# Usage:/,/# -h/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    $ECHO\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help\n# Echo long help message to standard output and exit.\nfunc_help ()\n{\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(automake --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(autoconf --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n     }' < \"$progpath\"\n    exit $?\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    func_error \"missing argument for $1\"\n    exit_cmd=exit\n}\n\nexit_cmd=:\n\n\n\n\n\n# Check that we have a working $ECHO.\nif test \"X$1\" = X--no-reexec; then\n  # Discard the --no-reexec flag, and continue.\n  shift\nelif test \"X$1\" = X--fallback-echo; then\n  # Avoid inline document here, it may be left over\n  :\nelif test \"X`{ $ECHO '\\t'; } 2>/dev/null`\" = 'X\\t'; then\n  # Yippee, $ECHO works!\n  :\nelse\n  # Restart under the correct shell, and then maybe $ECHO will work.\n  exec $SHELL \"$progpath\" --no-reexec ${1+\"$@\"}\nfi\n\nif test \"X$1\" = X--fallback-echo; then\n  # used as fallback echo\n  shift\n  cat <<EOF\n$*\nEOF\n  exit $EXIT_SUCCESS\nfi\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\n# $mode is unset\nnonopt=\nexecute_dlfiles=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\nopt_dry_run=false\nopt_duplicate_deps=false\nopt_silent=false\nopt_debug=:\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    $ECHO \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      $ECHO \"enable shared libraries\"\n    else\n      $ECHO \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      $ECHO \"enable static libraries\"\n    else\n      $ECHO \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# Parse options once, thoroughly.  This comes as soon as possible in\n# the script to make things like `libtool --version' happen quickly.\n{\n\n  # Shorthand for --mode=foo, only valid as the first argument\n  case $1 in\n  clean|clea|cle|cl)\n    shift; set dummy --mode clean ${1+\"$@\"}; shift\n    ;;\n  compile|compil|compi|comp|com|co|c)\n    shift; set dummy --mode compile ${1+\"$@\"}; shift\n    ;;\n  execute|execut|execu|exec|exe|ex|e)\n    shift; set dummy --mode execute ${1+\"$@\"}; shift\n    ;;\n  finish|finis|fini|fin|fi|f)\n    shift; set dummy --mode finish ${1+\"$@\"}; shift\n    ;;\n  install|instal|insta|inst|ins|in|i)\n    shift; set dummy --mode install ${1+\"$@\"}; shift\n    ;;\n  link|lin|li|l)\n    shift; set dummy --mode link ${1+\"$@\"}; shift\n    ;;\n  uninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n    shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n    ;;\n  esac\n\n  # Parse non-mode specific arguments:\n  while test \"$#\" -gt 0; do\n    opt=\"$1\"\n    shift\n\n    case $opt in\n      --config)\t\tfunc_config\t\t\t\t\t;;\n\n      --debug)\t\tpreserve_args=\"$preserve_args $opt\"\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\topt_debug='set -x'\n\t\t\t$opt_debug\n\t\t\t;;\n\n      -dlopen)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\texecute_dlfiles=\"$execute_dlfiles $1\"\n\t\t\tshift\n\t\t\t;;\n\n      --dry-run | -n)\topt_dry_run=:\t\t\t\t\t;;\n      --features)       func_features\t\t\t\t\t;;\n      --finish)\t\tmode=\"finish\"\t\t\t\t\t;;\n\n      --mode)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tcase $1 in\n\t\t\t  # Valid mode arguments:\n\t\t\t  clean)\t;;\n\t\t\t  compile)\t;;\n\t\t\t  execute)\t;;\n\t\t\t  finish)\t;;\n\t\t\t  install)\t;;\n\t\t\t  link)\t\t;;\n\t\t\t  relink)\t;;\n\t\t\t  uninstall)\t;;\n\n\t\t\t  # Catch anything else as an error\n\t\t\t  *) func_error \"invalid argument for $opt\"\n\t\t\t     exit_cmd=exit\n\t\t\t     break\n\t\t\t     ;;\n\t\t        esac\n\n\t\t\tmode=\"$1\"\n\t\t\tshift\n\t\t\t;;\n\n      --preserve-dup-deps)\n\t\t\topt_duplicate_deps=:\t\t\t\t;;\n\n      --quiet|--silent)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=:\n\t\t\t;;\n\n      --verbose| -v)\tpreserve_args=\"$preserve_args $opt\"\n\t\t\topt_silent=false\n\t\t\t;;\n\n      --tag)\t\ttest \"$#\" -eq 0 && func_missing_arg \"$opt\" && break\n\t\t\tpreserve_args=\"$preserve_args $opt $1\"\n\t\t\tfunc_enable_tag \"$1\"\t# tagname is set here\n\t\t\tshift\n\t\t\t;;\n\n      # Separate optargs to long options:\n      -dlopen=*|--mode=*|--tag=*)\n\t\t\tfunc_opt_split \"$opt\"\n\t\t\tset dummy \"$func_opt_split_opt\" \"$func_opt_split_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t\t;;\n      --help)\t\topt_help=:\t\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t\t;;\n\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\"\t;;\n\n      *)\t\tnonopt=\"$opt\"\n\t\t\tbreak\n\t\t\t;;\n    esac\n  done\n\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_duplicate_deps\n      ;;\n  esac\n\n  # Having warned about all mis-specified options, bail out if\n  # anything was wrong.\n  $exit_cmd $EXIT_FAILURE\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n$opt_help || {\n  # Sanity checks first:\n  func_check_version_match\n\n  if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n    func_fatal_configuration \"not configured to build any kind of library\"\n  fi\n\n  test -z \"$mode\" && func_fatal_error \"error: you must specify a MODE.\"\n\n\n  # Darwin sucks\n  eval std_shrext=\\\"$shrext_cmds\\\"\n\n\n  # Only execute mode is allowed to have -dlopen flags.\n  if test -n \"$execute_dlfiles\" && test \"$mode\" != execute; then\n    func_error \"unrecognized option \\`-dlopen'\"\n    $ECHO \"$help\" 1>&2\n    exit $EXIT_FAILURE\n  fi\n\n  # Change the help message to a mode-specific one.\n  generic_help=\"$help\"\n  help=\"Try \\`$progname --help --mode=$mode' for more information.\"\n}\n\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_ltwrapper_scriptname_result=\"\"\n    if func_ltwrapper_executable_p \"$1\"; then\n\tfunc_dirname_and_basename \"$1\" \"\" \".\"\n\tfunc_stripname '' '.exe' \"$func_basename_result\"\n\tfunc_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n    fi\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n        func_quote_for_eval \"$arg\"\n\tCC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n      done\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" `$ECHO $CC` \"* | \"`$ECHO $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$ECHO $CC_quoted` \"* | \"`$ECHO $CC_quoted` \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_quote_for_eval \"$arg\"\n\t      CC_quoted=\"$CC_quoted $func_quote_for_eval_result\"\n\t    done\n\t    case \"$@ \" in\n\t      \" $CC \"* | \"$CC \"* | \" `$ECHO $CC` \"* | \"`$ECHO $CC` \"* | \" $CC_quoted\"* | \"$CC_quoted \"* | \" `$ECHO $CC_quoted` \"* | \"`$ECHO $CC_quoted` \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          pie_flag=\"$pie_flag $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  later=\"$later $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_quote_for_eval \"$arg\"\n\t    lastarg=\"$lastarg $func_quote_for_eval_result\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  base_compile=\"$base_compile $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_quote_for_eval \"$lastarg\"\n      base_compile=\"$base_compile $func_quote_for_eval_result\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.obj | *.sx)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"X$srcfile\" | $Xsed -e 's%^.*/%%' -e 's%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      removelist=\"$removelist $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    removelist=\"$removelist $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    if test -n \"$fix_srcfile_path\"; then\n      eval srcfile=\\\"$fix_srcfile_path\\\"\n    fi\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tcommand=\"$command -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tcommand=\"$command -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      command=\"$command$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\ntest \"$mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to building PIC objects only\n  -prefer-non-pic   try to building non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$mode'\"\n        ;;\n    esac\n\n    $ECHO\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n\n    exit $?\n}\n\n  # Now that we've collected a possible --mode arg, show help if necessary\n  $opt_help && func_mode_help\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $execute_dlfiles; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  dir=\"$dir/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -*) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_quote_for_eval \"$file\"\n      args=\"$args $func_quote_for_eval_result\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\t$ECHO \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libdirs=\"$nonopt\"\n    admincmds=\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for dir\n      do\n\tlibdirs=\"$libdirs $dir\"\n      done\n\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || admincmds=\"$admincmds\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    $ECHO \"X----------------------------------------------------------------------\" | $Xsed\n    $ECHO \"Libraries have been installed in:\"\n    for libdir in $libdirs; do\n      $ECHO \"   $libdir\"\n    done\n    $ECHO\n    $ECHO \"If you ever happen to want to link against installed libraries\"\n    $ECHO \"in a given directory, LIBDIR, you must either use libtool, and\"\n    $ECHO \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n    $ECHO \"flag during linking and do at least one of the following:\"\n    if test -n \"$shlibpath_var\"; then\n      $ECHO \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n      $ECHO \"     during execution\"\n    fi\n    if test -n \"$runpath_var\"; then\n      $ECHO \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n      $ECHO \"     during linking\"\n    fi\n    if test -n \"$hardcode_libdir_flag_spec\"; then\n      libdir=LIBDIR\n      eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n      $ECHO \"   - use the \\`$flag' linker flag\"\n    fi\n    if test -n \"$admincmds\"; then\n      $ECHO \"   - have your system administrator run these commands:$admincmds\"\n    fi\n    if test -f /etc/ld.so.conf; then\n      $ECHO \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n    fi\n    $ECHO\n\n    $ECHO \"See any operating system documentation about shared libraries for\"\n    case $host in\n      solaris2.[6789]|solaris2.1[0-9])\n        $ECHO \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t$ECHO \"pages.\"\n\t;;\n      *)\n        $ECHO \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n        ;;\n    esac\n    $ECHO \"X----------------------------------------------------------------------\" | $Xsed\n    exit $EXIT_SUCCESS\n}\n\ntest \"$mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       $ECHO \"X$nonopt\" | $GREP shtool >/dev/null; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    install_prog=\"$install_prog$func_quote_for_eval_result\"\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    for arg\n    do\n      if test -n \"$dest\"; then\n\tfiles=\"$files $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tcase \" $install_prog \" in\n\t*[\\\\\\ /]cp\\ *) ;;\n\t*) prev=$arg ;;\n\tesac\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      install_prog=\"$install_prog $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tstaticlibs=\"$staticlibs $file\"\n\t;;\n\n      *.la)\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) current_libdirs=\"$current_libdirs $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) future_libdirs=\"$future_libdirs $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tdir=\"$dir$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"X$destdir\" | $Xsed -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && staticlibs=\"$staticlibs $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"X$lib\" | $Xsed -e 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"X$relink_command\" | $Xsed -e 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"X$file$stripped_ext\" | $Xsed -e \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"X$objs$old_deplibs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_verbose \"extracting global C symbols from \\`$progfile'\"\n\t    $opt_dry_run || eval \"$NM $progfile | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n\t  $opt_dry_run || {\n\t    eval '$ECHO \": $name \" >> \"$nlist\"'\n\t    eval \"$NM $dlprefile 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t  }\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    $ECHO '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\n\"\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc* )\n\t    $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n/* DATA imports from DLLs on WIN32 con't be const, because\n   runtime relocations are performed -- see ld's documentation\n   on pseudo-relocs.  */\"\n\t    lt_dlsym_const= ;;\n\t  *osf5*)\n\t    echo >> \"$output_objdir/$my_dlsyms\" \"\\\n/* This system does not cope well with relocations in const data */\"\n\t    lt_dlsym_const= ;;\n\t  *)\n\t    lt_dlsym_const=const ;;\n\t  esac\n\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\nextern $lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\n$lt_dlsym_const lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  $ECHO >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) symtab_cflags=\"$symtab_cflags $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"X$compile_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"X$finalize_command\" | $Xsed -e \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format pe-i386(.*architecture: i386)?' >/dev/null ; then\n      win32_nmres=`eval $NM -f posix -A $1 |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" 'exit $?'\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n\n# func_emit_wrapper_part1 [arg=no]\n#\n# Emit the first part of a libtool wrapper script on stdout.\n# For more information, see the description associated with\n# func_emit_wrapper(), below.\nfunc_emit_wrapper_part1 ()\n{\n\tfunc_emit_wrapper_part1_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_part1_arg1=$1\n\tfi\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed='${SED} -e 1s/^X//'\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    ECHO=\\\"$qecho\\\"\n    file=\\\"\\$0\\\"\n    # Make sure echo works.\n    if test \\\"X\\$1\\\" = X--no-reexec; then\n      # Discard the --no-reexec flag, and continue.\n      shift\n    elif test \\\"X\\`{ \\$ECHO '\\t'; } 2>/dev/null\\`\\\" = 'X\\t'; then\n      # Yippee, \\$ECHO works!\n      :\n    else\n      # Restart under the correct shell, and then maybe \\$ECHO will work.\n      exec $SHELL \\\"\\$0\\\" --no-reexec \\${1+\\\"\\$@\\\"}\n    fi\n  fi\\\n\"\n\t$ECHO \"\\\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"X\\$file\\\" | \\$Xsed -e 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | ${SED} -n 's/.*-> //p'\\`\n  done\n\"\n}\n# end: func_emit_wrapper_part1\n\n# func_emit_wrapper_part2 [arg=no]\n#\n# Emit the second part of a libtool wrapper script on stdout.\n# For more information, see the description associated with\n# func_emit_wrapper(), below.\nfunc_emit_wrapper_part2 ()\n{\n\tfunc_emit_wrapper_part2_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_part2_arg1=$1\n\tfi\n\n\t$ECHO \"\\\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_part2_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"X\\$thisdir\\\" | \\$Xsed -e 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"X\\$$shlibpath_var\\\" | \\$Xsed -e 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t# fixup the dll searchpath if we need to.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n\"\n\tcase $host in\n\t# Backslashes separate directories on plain windows\n\t*-*-mingw | *-*-os2* | *-cegcc*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\n\t*)\n\t  $ECHO \"\\\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n\t  ;;\n\tesac\n\t$ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    $ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n# end: func_emit_wrapper_part2\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=no\n\tif test -n \"$1\" ; then\n\t  func_emit_wrapper_arg1=$1\n\tfi\n\n\t# split this up so that func_emit_cwrapperexe_src\n\t# can call each part independently.\n\tfunc_emit_wrapper_part1 \"${func_emit_wrapper_arg1}\"\n\tfunc_emit_wrapper_part2 \"${func_emit_wrapper_arg1}\"\n}\n\n\n# func_to_host_path arg\n#\n# Convert paths to host format when used with build tools.\n# Intended for use with \"native\" mingw (where libtool itself\n# is running under the msys shell), or in the following cross-\n# build environments:\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n# where wine is equipped with the `winepath' executable.\n# In the native mingw case, the (msys) shell automatically\n# converts paths for any non-msys applications it launches,\n# but that facility isn't available from inside the cwrapper.\n# Similar accommodations are necessary for $host mingw and\n# $build cygwin.  Calling this function does no harm for other\n# $host/$build combinations not listed above.\n#\n# ARG is the path (on $build) that should be converted to\n# the proper representation for $host. The result is stored\n# in $func_to_host_path_result.\nfunc_to_host_path ()\n{\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\" ; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        case $build in\n          *mingw* ) # actually, msys\n            # awkward: cmd appends spaces to result\n            lt_sed_strip_trailing_spaces=\"s/[ ]*\\$//\"\n            func_to_host_path_tmp1=`( cmd //c echo \"$1\" |\\\n              $SED -e \"$lt_sed_strip_trailing_spaces\" ) 2>/dev/null || echo \"\"`\n            func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_path_tmp1=`cygpath -w \"$1\"`\n            func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # Unfortunately, winepath does not exit with a non-zero\n            # error code, so we are forced to check the contents of\n            # stdout. On the other hand, if the command is not\n            # found, the shell will set an exit code of 127 and print\n            # *an error message* to stdout. So we must check for both\n            # error code of zero AND non-empty stdout, which explains\n            # the odd construction:\n            func_to_host_path_tmp1=`winepath -w \"$1\" 2>/dev/null`\n            if test \"$?\" -eq 0 && test -n \"${func_to_host_path_tmp1}\"; then\n              func_to_host_path_result=`echo \"$func_to_host_path_tmp1\" |\\\n                $SED -e \"$lt_sed_naive_backslashify\"`\n            else\n              # Allow warning below.\n              func_to_host_path_result=\"\"\n            fi\n            ;;\n        esac\n        if test -z \"$func_to_host_path_result\" ; then\n          func_error \"Could not determine host path corresponding to\"\n          func_error \"  '$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback:\n          func_to_host_path_result=\"$1\"\n        fi\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_path\n\n# func_to_host_pathlist arg\n#\n# Convert pathlists to host format when used with build tools.\n# See func_to_host_path(), above. This function supports the\n# following $build/$host combinations (but does no harm for\n# combinations not listed here):\n#    $build          $host\n#    mingw (msys)    mingw  [e.g. native]\n#    cygwin          mingw\n#    *nix + wine     mingw\n#\n# Path separators are also converted from $build format to\n# $host format. If ARG begins or ends with a path separator\n# character, it is preserved (but converted to $host format)\n# on output.\n#\n# ARG is a pathlist (on $build) that should be converted to\n# the proper representation on $host. The result is stored\n# in $func_to_host_pathlist_result.\nfunc_to_host_pathlist ()\n{\n  func_to_host_pathlist_result=\"$1\"\n  if test -n \"$1\" ; then\n    case $host in\n      *mingw* )\n        lt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n        # Remove leading and trailing path separator characters from\n        # ARG. msys behavior is inconsistent here, cygpath turns them\n        # into '.;' and ';.', and winepath ignores them completely.\n        func_to_host_pathlist_tmp2=\"$1\"\n        # Once set for this call, this variable should not be\n        # reassigned. It is used in tha fallback case.\n        func_to_host_pathlist_tmp1=`echo \"$func_to_host_pathlist_tmp2\" |\\\n          $SED -e 's|^:*||' -e 's|:*$||'`\n        case $build in\n          *mingw* ) # Actually, msys.\n            # Awkward: cmd appends spaces to result.\n            lt_sed_strip_trailing_spaces=\"s/[ ]*\\$//\"\n            func_to_host_pathlist_tmp2=`( cmd //c echo \"$func_to_host_pathlist_tmp1\" |\\\n              $SED -e \"$lt_sed_strip_trailing_spaces\" ) 2>/dev/null || echo \"\"`\n            func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp2\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          *cygwin* )\n            func_to_host_pathlist_tmp2=`cygpath -w -p \"$func_to_host_pathlist_tmp1\"`\n            func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp2\" |\\\n              $SED -e \"$lt_sed_naive_backslashify\"`\n            ;;\n          * )\n            # unfortunately, winepath doesn't convert pathlists\n            func_to_host_pathlist_result=\"\"\n            func_to_host_pathlist_oldIFS=$IFS\n            IFS=:\n            for func_to_host_pathlist_f in $func_to_host_pathlist_tmp1 ; do\n              IFS=$func_to_host_pathlist_oldIFS\n              if test -n \"$func_to_host_pathlist_f\" ; then\n                func_to_host_path \"$func_to_host_pathlist_f\"\n                if test -n \"$func_to_host_path_result\" ; then\n                  if test -z \"$func_to_host_pathlist_result\" ; then\n                    func_to_host_pathlist_result=\"$func_to_host_path_result\"\n                  else\n                    func_to_host_pathlist_result=\"$func_to_host_pathlist_result;$func_to_host_path_result\"\n                  fi\n                fi\n              fi\n              IFS=:\n            done\n            IFS=$func_to_host_pathlist_oldIFS\n            ;;\n        esac\n        if test -z \"$func_to_host_pathlist_result\" ; then\n          func_error \"Could not determine the host path(s) corresponding to\"\n          func_error \"  '$1'\"\n          func_error \"Continuing, but uninstalled executables may not work.\"\n          # Fallback. This may break if $1 contains DOS-style drive\n          # specifications. The fix is not to complicate the expression\n          # below, but for the user to provide a working wine installation\n          # with winepath so that path translation in the cross-to-mingw\n          # case works properly.\n          lt_replace_pathsep_nix_to_dos=\"s|:|;|g\"\n          func_to_host_pathlist_result=`echo \"$func_to_host_pathlist_tmp1\" |\\\n            $SED -e \"$lt_replace_pathsep_nix_to_dos\"`\n        fi\n        # Now, add the leading and trailing path separators back\n        case \"$1\" in\n          :* ) func_to_host_pathlist_result=\";$func_to_host_pathlist_result\"\n            ;;\n        esac\n        case \"$1\" in\n          *: ) func_to_host_pathlist_result=\"$func_to_host_pathlist_result;\"\n            ;;\n        esac\n        ;;\n    esac\n  fi\n}\n# end: func_to_host_pathlist\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n\n   Currently, it simply execs the wrapper *script* \"$SHELL $output\",\n   but could eventually absorb all of the scripts functionality and\n   exec $objdir/$outputname directly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n# define setmode _setmode\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n#  define HAVE_SETENV\n#  ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n#  endif\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n#ifdef _MSC_VER\n# define S_IXUSR _S_IEXEC\n# define stat _stat\n# ifndef _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifdef __CYGWIN__\n# define FOPEN_WB \"wb\"\n#endif\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#undef LTWRAPPER_DEBUGPRINTF\n#if defined DEBUGWRAPPER\n# define LTWRAPPER_DEBUGPRINTF(args) ltwrapper_debugprintf args\nstatic void\nltwrapper_debugprintf (const char *fmt, ...)\n{\n    va_list args;\n    va_start (args, fmt);\n    (void) vfprintf (stderr, fmt, args);\n    va_end (args);\n}\n#else\n# define LTWRAPPER_DEBUGPRINTF(args)\n#endif\n\nconst char *program_name = NULL;\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_fatal (const char *message, ...);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_opt_process_env_set (const char *arg);\nvoid lt_opt_process_env_prepend (const char *arg);\nvoid lt_opt_process_env_append (const char *arg);\nint lt_split_name_value (const char *arg, char** name, char** value);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\n\nstatic const char *script_text_part1 =\nEOF\n\n\t    func_emit_wrapper_part1 yes |\n\t        $SED -e 's/\\([\\\\\"]\\)/\\\\\\1/g' \\\n\t             -e 's/^/  \"/' -e 's/$/\\\\n\"/'\n\t    echo \";\"\n\t    cat <<EOF\n\nstatic const char *script_text_part2 =\nEOF\n\t    func_emit_wrapper_part2 yes |\n\t        $SED -e 's/\\([\\\\\"]\\)/\\\\\\1/g' \\\n\t             -e 's/^/  \"/' -e 's/$/\\\\n\"/'\n\t    echo \";\"\n\n\t    cat <<EOF\nconst char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_pathlist \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_pathlist \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_pathlist_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n#define LTWRAPPER_OPTION_PREFIX_LENGTH  5\n\nstatic const size_t opt_prefix_len         = LTWRAPPER_OPTION_PREFIX_LENGTH;\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\n\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\n\nstatic const size_t env_set_opt_len     = LTWRAPPER_OPTION_PREFIX_LENGTH + 7;\nstatic const char *env_set_opt          = LTWRAPPER_OPTION_PREFIX \"env-set\";\n  /* argument is putenv-style \"foo=bar\", value of foo is set to bar */\n\nstatic const size_t env_prepend_opt_len = LTWRAPPER_OPTION_PREFIX_LENGTH + 11;\nstatic const char *env_prepend_opt      = LTWRAPPER_OPTION_PREFIX \"env-prepend\";\n  /* argument is putenv-style \"foo=bar\", new value of foo is bar${foo} */\n\nstatic const size_t env_append_opt_len  = LTWRAPPER_OPTION_PREFIX_LENGTH + 10;\nstatic const char *env_append_opt       = LTWRAPPER_OPTION_PREFIX \"env-append\";\n  /* argument is putenv-style \"foo=bar\", new value of foo is ${foo}bar */\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) argv[0]      : %s\\n\", argv[0]));\n  LTWRAPPER_DEBUGPRINTF ((\"(main) program_name : %s\\n\", program_name));\n\n  /* very simple arg parsing; don't want to rely on getopt */\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  printf (\"%s\", script_text_part1);\n\t  printf (\"%s\", script_text_part2);\n\t  return 0;\n\t}\n    }\n\n  newargz = XMALLOC (char *, argc + 1);\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (\"Couldn't find %s\", argv[0]);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (before symlink chase) at : %s\\n\",\n\t\t\t  tmp_pathspec));\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  LTWRAPPER_DEBUGPRINTF ((\"(main) found exe (after symlink chase) at : %s\\n\",\n\t\t\t  actual_cwrapper_path));\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup( base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(main) libtool target name: %s\\n\",\n\t\t\t  target_name));\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strncmp (argv[i], env_set_opt, env_set_opt_len) == 0)\n        {\n          if (argv[i][env_set_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_set_opt_len + 1;\n              lt_opt_process_env_set (p);\n            }\n          else if (argv[i][env_set_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_set (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_set_opt);\n          continue;\n        }\n      if (strncmp (argv[i], env_prepend_opt, env_prepend_opt_len) == 0)\n        {\n          if (argv[i][env_prepend_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_prepend_opt_len + 1;\n              lt_opt_process_env_prepend (p);\n            }\n          else if (argv[i][env_prepend_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_prepend (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_prepend_opt);\n          continue;\n        }\n      if (strncmp (argv[i], env_append_opt, env_append_opt_len) == 0)\n        {\n          if (argv[i][env_append_opt_len] == '=')\n            {\n              const char *p = argv[i] + env_append_opt_len + 1;\n              lt_opt_process_env_append (p);\n            }\n          else if (argv[i][env_append_opt_len] == '\\0' && i + 1 < argc)\n            {\n              lt_opt_process_env_append (argv[++i]); /* don't copy */\n            }\n          else\n            lt_fatal (\"%s missing required argument\", env_append_opt);\n          continue;\n        }\n      if (strncmp (argv[i], ltwrapper_option_prefix, opt_prefix_len) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (\"Unrecognized option in %s namespace: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\n  LTWRAPPER_DEBUGPRINTF     ((\"(main) lt_argv_zero : %s\\n\", (lt_argv_zero ? lt_argv_zero : \"<NULL>\")));\n  for (i = 0; i < newargc; i++)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"(main) newargz[%d]   : %s\\n\", i, (newargz[i] ? newargz[i] : \"<NULL>\")));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      LTWRAPPER_DEBUGPRINTF ((\"(main) failed to launch target \\\"%s\\\": errno = %d\\n\", lt_argv_zero, errno));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (\"Memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(check_executable)  : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(make_executable)   : %s\\n\",\n\t\t\t  path ? (*path ? path : \"EMPTY!\") : \"NULL!\"));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  LTWRAPPER_DEBUGPRINTF ((\"(find_executable)   : %s\\n\",\n\t\t\t  wrapper ? (*wrapper ? wrapper : \"EMPTY!\") : \"NULL!\"));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (\"getcwd failed\");\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (\"getcwd failed\");\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      LTWRAPPER_DEBUGPRINTF ((\"checking path component for symlinks: %s\\n\",\n\t\t\t      tmp_pathspec));\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  char *errstr = strerror (errno);\n\t  lt_fatal (\"Error accessing file %s (%s)\", tmp_pathspec, errstr);\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (\"Could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nstatic void\nlt_error_core (int exit_status, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s: %s: \", program_name, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_setenv) setting '%s' to '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nint\nlt_split_name_value (const char *arg, char** name, char** value)\n{\n  const char *p;\n  int len;\n  if (!arg || !*arg)\n    return 1;\n\n  p = strchr (arg, (int)'=');\n\n  if (!p)\n    return 1;\n\n  *value = xstrdup (++p);\n\n  len = strlen (arg) - strlen (*value);\n  *name = XMALLOC (char, len);\n  strncpy (*name, arg, len-1);\n  (*name)[len - 1] = '\\0';\n\n  return 0;\n}\n\nvoid\nlt_opt_process_env_set (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_set_opt, arg);\n    }\n\n  lt_setenv (name, value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_opt_process_env_prepend (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n  char *new_value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_prepend_opt, arg);\n    }\n\n  new_value = lt_extend_str (getenv (name), value, 0);\n  lt_setenv (name, new_value);\n  XFREE (new_value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_opt_process_env_append (const char *arg)\n{\n  char *name = NULL;\n  char *value = NULL;\n  char *new_value = NULL;\n\n  if (lt_split_name_value (arg, &name, &value) != 0)\n    {\n      XFREE (name);\n      XFREE (value);\n      lt_fatal (\"bad argument for %s: '%s'\", env_append_opt, arg);\n    }\n\n  new_value = lt_extend_str (getenv (name), value, 1);\n  lt_setenv (name, new_value);\n  XFREE (new_value);\n  XFREE (name);\n  XFREE (value);\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  LTWRAPPER_DEBUGPRINTF ((\"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                          (name ? name : \"<NULL>\"),\n                          (value ? value : \"<NULL>\")));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\n\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      dlfiles=\"$dlfiles $arg\"\n\t    else\n\t      dlprefiles=\"$dlprefiles $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) deplibs=\"$deplibs $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      moreargs=\"$moreargs $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      dlfiles=\"$dlfiles $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    dlprefiles=\"$dlprefiles $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) rpath=\"$rpath $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) xrpath=\"$xrpath $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  weak_libs=\"$weak_libs $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  compiler_flags=\"$compiler_flags $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  linker_flags=\"$linker_flags $qarg\"\n\t  compiler_flags=\"$compiler_flags $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname '-L' '' \"$arg\"\n\tdir=$func_stripname_result\n\tif test -z \"$dir\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"*) ;;\n\t*)\n\t  deplibs=\"$deplibs -L$dir\"\n\t  lib_search_path=\"$lib_search_path $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"X$dir\" | $Xsed -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tdeplibs=\"$deplibs $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\tcompiler_flags=\"$compiler_flags $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) xrpath=\"$xrpath $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $wl$func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  arg=\"$arg $wl$func_quote_for_eval_result\"\n\t  compiler_flags=\"$compiler_flags $wl$func_quote_for_eval_result\"\n\t  linker_flags=\"$linker_flags $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # -64, -mips[0-9] enable 64-bit mode on the SGI compiler\n      # -r[0-9][0-9]* specifies the processor on the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode on the Sun compiler\n      # +DA*, +DD* enable 64-bit mode on the HP compiler\n      # -q* pass through compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* pass through architecture-specific\n      # compiler args for GCC\n      # -F/path gives path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-* pass through profiling flag for GCC\n      # @file GCC response files\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        compiler_flags=\"$compiler_flags $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tobjs=\"$objs $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tdlfiles=\"$dlfiles $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      dlprefiles=\"$dlprefiles $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tdeplibs=\"$deplibs $arg\"\n\told_deplibs=\"$old_deplibs $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  dlfiles=\"$dlfiles $arg\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  dlprefiles=\"$dlprefiles $arg\"\n\t  prev=\n\telse\n\t  deplibs=\"$deplibs $arg\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"X\\${$shlibpath_var}\\\" \\| \\$Xsed -e \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_duplicate_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\tesac\n      fi\n      libs=\"$libs $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) specialdeplibs=\"$specialdeplibs $pre_post_deps\" ;;\n\t  esac\n\t  pre_post_deps=\"$pre_post_deps $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink) libs=\"$deplibs %DEPLIBS% $dependency_libs\" ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  case $lib in\n\t  *.la)\tfunc_source \"$lib\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n            deplib_base=`$ECHO \"X$deplib\" | $Xsed -e \"$basename\"`\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) deplibs=\"$deplibs $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe|-threads)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    compiler_flags=\"$compiler_flags $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) new_inherited_linker_flags=\"$new_inherited_linker_flags $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    dir=$func_stripname_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) xrpath=\"$xrpath $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la) lib=\"$deplib\" ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"X$deplib\\\"\" 2>/dev/null | $Xsed -e 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\t$ECHO \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      newdlprefiles=\"$newdlprefiles $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      newdlfiles=\"$newdlfiles $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"X$inherited_linker_flags\" | $Xsed -e 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) new_inherited_linker_flags=\"$new_inherited_linker_flags $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \"X $dependency_libs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && dlfiles=\"$dlfiles $dlopen\"\n\t  test -n \"$dlpreopen\" && dlprefiles=\"$dlprefiles $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    convenience=\"$convenience $ladir/$objdir/$old_library\"\n\t    old_convenience=\"$old_convenience $ladir/$objdir/$old_library\"\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    deplibs=\"$deplib $deplibs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tfor l in $old_library $library_names; do\n\t  linklib=\"$l\"\n\tdone\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    dlprefiles=\"$dlprefiles $lib $dependency_libs\"\n\t  else\n\t    newdlfiles=\"$newdlfiles $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$libdir\"\n\t    absdir=\"$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    notinst_path=\"$notinst_path $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t  # are required to link).\n\t  if test -n \"$old_library\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$old_library\"\n\t    # Keep a list of preopened convenience libraries to check\n\t    # that they are being used correctly in the link pass.\n\t    test -z \"$libdir\" && \\\n\t\tdlpreconveniencelibs=\"$dlpreconveniencelibs $dir/$old_library\"\n\t  # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t  elif test -n \"$dlname\"; then\n\t    newdlprefiles=\"$newdlprefiles $dir/$dlname\"\n\t  else\n\t    newdlprefiles=\"$newdlprefiles $dir/$linklib\"\n\t  fi\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  newlib_search_path=\"$newlib_search_path $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         newlib_search_path=\"$newlib_search_path $func_stripname_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) temp_rpath=\"$temp_rpath$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      notinst_deplibs=\"$notinst_deplibs $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    $ECHO\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) compile_rpath=\"$compile_rpath $absdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) finalize_rpath=\"$finalize_rpath $libdir\"\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  $ECHO\n\t\t\t  $ECHO \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  $ECHO \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$dir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) compile_shlibpath=\"$compile_shlibpath$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) finalize_shlibpath=\"$finalize_shlibpath$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    add_dir=\"$add_dir -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    $ECHO\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t    $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t    $ECHO \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      $ECHO \"*** But as you try to build a module library, libtool will still create \"\n\t      $ECHO \"*** a static module, that should work as long as the dlopening application\"\n\t      $ECHO \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\t$ECHO\n\t\t$ECHO \"*** However, this would only work if libtool was able to extract symbol\"\n\t\t$ECHO \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\t$ECHO \"*** not find such a program.  So, this module is probably useless.\"\n\t\t$ECHO \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) xrpath=\"$xrpath $temp_xrpath\";;\n\t\t   esac;;\n\t      *) temp_deplibs=\"$temp_deplibs $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  newlib_search_path=\"$newlib_search_path $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    if $opt_duplicate_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) specialdeplibs=\"$specialdeplibs $deplib\" ;;\n\t      esac\n\t    fi\n\t    tmp_libs=\"$tmp_libs $deplib\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=\"$func_dirname_result\"\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      compiler_flags=\"$compiler_flags ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      linker_flags=\"$linker_flags -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \"X $new_inherited_linker_flags\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) lib_search_path=\"$lib_search_path $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) tmp_libs=\"$tmp_libs $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  tmp_libs=\"$tmp_libs $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      objs=\"$objs$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  $ECHO\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  libobjs=\"$libobjs $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  verstring=\"$verstring:${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      libobjs=\"$libobjs $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       removelist=\"$removelist $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\toldlibs=\"$oldlibs $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}'$/d' -e \"$lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"X$lib_search_path \" | $Xsed -e \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"X$deplibs \" | $Xsed -e \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"X$dependency_libs \" | $Xsed -e \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  temp_xrpath=\"$temp_xrpath -R$libdir\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlfiles=\"$dlfiles $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) dlprefiles=\"$dlprefiles $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    deplibs=\"$deplibs System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      deplibs=\"$deplibs -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    newdeplibs=\"$newdeplibs $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    $ECHO\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t    $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    $ECHO \"*** shared version of the library, which I believe you do not have\"\n\t\t    $ECHO \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    $ECHO \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      newdeplibs=\"$newdeplibs $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      $ECHO\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      $ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t      $ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      $ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t      $ECHO \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      $ECHO \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  $ECHO\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  $ECHO \"*** make it link in!  You will probably need to install it or some\"\n\t\t  $ECHO \"*** library that it depends on before this library will be fully\"\n\t\t  $ECHO \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tnewdeplibs=\"$newdeplibs $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"X$potlib\" | $Xsed -e 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tnewdeplibs=\"$newdeplibs $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"X$potent_lib\\\"\" 2>/dev/null | $Xsed -e 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\t$ECHO\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\t$ECHO \"*** I have the capability to make that library automatically link in when\"\n\t\t$ECHO \"*** you link to this library.  But I can only do this if you have a\"\n\t\t$ECHO \"*** shared version of the library, which you do not appear to have\"\n\t\t$ECHO \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      newdeplibs=\"$newdeplibs $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \"X $deplibs\" | $Xsed \\\n\t      -e 's/ -lc$//' -e 's/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \"X $tmp_deplibs\" | $Xsed -e \"s,$i,,\"`\n\t    done\n\t  fi\n\t  if $ECHO \"X $tmp_deplibs\" | $Xsed -e 's/[\t ]//g' |\n\t     $GREP . >/dev/null; then\n\t    $ECHO\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      $ECHO \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      $ECHO \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    $ECHO \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t  fi\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \"X $newdeplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    $ECHO\n\t    $ECHO \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    $ECHO \"*** a static module, that should work as long as the dlopening\"\n\t    $ECHO \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      $ECHO\n\t      $ECHO \"*** However, this would only work if libtool was able to extract symbol\"\n\t      $ECHO \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      $ECHO \"*** not find such a program.  So, this module is probably useless.\"\n\t      $ECHO \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    $ECHO \"*** The inter-library dependencies that have been dropped here will be\"\n\t    $ECHO \"*** automatically added whenever a program is linked with this library\"\n\t    $ECHO \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      $ECHO\n\t      $ECHO \"*** Since this library must not contain undefined symbols,\"\n\t      $ECHO \"*** because either the platform does not support them or\"\n\t      $ECHO \"*** it was explicitly requested with -no-undefined,\"\n\t      $ECHO \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \"X $newdeplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \"X $new_inherited_linker_flags\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \"X $deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    hardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tdep_rpath=\"$dep_rpath $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    if test -n \"$hardcode_libdir_flag_spec_ld\"; then\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec_ld\\\"\n\t    else\n\t      eval dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\n\t    fi\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      rpath=\"$rpath$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  linknames=\"$linknames $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  delfiles=\"$delfiles $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      eval cmd=\\\"$cmd\\\"\n\t      func_len \" $cmd\"\n\t      len=$func_len_result\n\t      if test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"X$include_expsyms\" | $Xsed | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    tmp_deplibs=\"$tmp_deplibs $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    generated=\"$generated $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    libobjs=\"$libobjs $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  linker_flags=\"$linker_flags $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  output_la=`$ECHO \"X$output\" | $Xsed -e \"$basename\"`\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    $ECHO 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    $ECHO ')' >> $output\n\t    delfiles=\"$delfiles $output\"\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      $ECHO \"$obj\" >> $output\n\t    done\n\t    delfiles=\"$delfiles $output\"\n\t    output=$firstobj\\\"$file_list_spec$output\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    eval concat_cmds=\\\"$reload_cmds $objlist $last_robj\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds $objlist $last_robj~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=$obj\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds $objlist $last_robj\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      delfiles=\"$delfiles $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"X$include_expsyms\" | $Xsed | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      delfiles=\"$delfiles $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  libobjs=\"$libobjs $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"X$tmp_whole_archive_flags\" | $Xsed -e 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"X$libobjs\" | $SP2NL | $Xsed -e '/\\.'${libext}$'/d' -e '/\\.lib$/d' -e \"$lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \"X $compile_deplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \"X $finalize_deplibs\" | $Xsed -e 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      compile_command=\"$compile_command ${wl}-bind_at_load\"\n\t      finalize_command=\"$finalize_command ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \"X $compile_deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \"X $finalize_deplibs\" | $Xsed -e 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    new_libs=\"$new_libs -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) new_libs=\"$new_libs $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) new_libs=\"$new_libs $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      compile_command=\"$compile_command $compile_deplibs\"\n      finalize_command=\"$finalize_command $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_rpath=\"$finalize_rpath $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) perm_rpath=\"$perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) dllsearchpath=\"$dllsearchpath:$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\thardcode_libdirs=\"$hardcode_libdirs$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    rpath=\"$rpath $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) finalize_perm_rpath=\"$finalize_perm_rpath $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"X$compile_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"X$finalize_command\" | $SP2NL | $Xsed -e \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *cegcc)\n        # Disable wrappers for cegcc, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"X$compile_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    rpath=\"$rpath$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"X$compile_var$compile_command$compile_rpath\" | $Xsed -e 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"X$link_command\" | $Xsed -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Quote $ECHO for shipping.\n      if test \"X$ECHO\" = \"X$SHELL $progpath --fallback-echo\"; then\n\tcase $progpath in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) qecho=\"$SHELL $progpath --fallback-echo\";;\n\t*) qecho=\"$SHELL `pwd`/$progpath --fallback-echo\";;\n\tesac\n\tqecho=`$ECHO \"X$qecho\" | $Xsed -e \"$sed_quote_subst\"`\n      else\n\tqecho=`$ECHO \"X$ECHO\" | $Xsed -e \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    oldobjs=\"$oldobjs $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tgenerated=\"$generated $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\toldobjs=\"$oldobjs $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  oldobjs=\"$oldobjs $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  $ECHO \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  generated=\"$generated $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      oldobjs=\"$oldobjs $gentop/$newobj\"\n\t      ;;\n\t    *) oldobjs=\"$oldobjs $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"X$relink_command\" | $Xsed -e \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tnewdependency_libs=\"$newdependency_libs $libdir/$name\"\n\t\t;;\n\t      *) newdependency_libs=\"$newdependency_libs $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlfiles=\"$newdlfiles $libdir/$name\"\n\t\t;;\n\t      *) newdlfiles=\"$newdlfiles $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tnewdlprefiles=\"$newdlprefiles $libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlfiles=\"$newdlfiles $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      newdlprefiles=\"$newdlprefiles $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll) tdlname=../bin/$dlname ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$mode\" = link || test \"$mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) RM=\"$RM $arg\"; rmforce=yes ;;\n      -*) RM=\"$RM $arg\" ;;\n      *) files=\"$files $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    origobjdir=\"$objdir\"\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\tobjdir=\"$origobjdir\"\n      else\n\tobjdir=\"$dir/$origobjdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$mode\" = uninstall && objdir=\"$dir\"\n\n      # Remember objdir for removal later, being careful to avoid duplicates\n      if test \"$mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $objdir \"*) ;;\n\t  *) rmdirs=\"$rmdirs $objdir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    rmfiles=\"$rmfiles $objdir/$n\"\n\t  done\n\t  test -n \"$old_library\" && rmfiles=\"$rmfiles $objdir/$old_library\"\n\n\t  case \"$mode\" in\n\t  clean)\n\t    case \"  $library_names \" in\n\t    # \"  \" in the beginning catches empty $dlname\n\t    *\" $dlname \"*) ;;\n\t    *) rmfiles=\"$rmfiles $objdir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && rmfiles=\"$rmfiles $objdir/$name $objdir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    rmfiles=\"$rmfiles $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    rmfiles=\"$rmfiles $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      rmfiles=\"$rmfiles $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    rmfiles=\"$rmfiles $objdir/$name $objdir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      rmfiles=\"$rmfiles $objdir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      rmfiles=\"$rmfiles $objdir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n    objdir=\"$origobjdir\"\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$mode\" = uninstall || test \"$mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n"
    },
    "skipped": [
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/nmath/dnt.c",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/main/g_cntrlify.h",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/parallel/inst/doc/parallel.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/parallel/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/parallel/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/parallel/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/parallel/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/moveline.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/saveload.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/displaylist.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/plotexample.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/sharing.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/grid.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/viewports.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/locndimn.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/grobs.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/frame.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/rotated.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/interactive.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/inst/doc/nonfinite.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grid/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/foreign.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/rpart.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/MASS.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/survival_2.38-3.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/nnet.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/nlme_3.1-121.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/rpart_4.1-10.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/lattice.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/KernSmooth_2.23-15.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/mgcv.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/class.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/boot_1.3-17.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/nnet_7.3-10.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/cluster_2.0.3.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/cluster.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/lattice_0.20-33.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/nlme.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/foreign_0.8-65.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/codetools_0.2-14.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/spatial.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/codetools.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/MASS_7.3-43.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/mgcv_1.8-7.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/survival.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/class_7.3-13.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/Matrix.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/spatial_7.3-10.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/KernSmooth.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/Matrix_1.2-2.tar.gz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/Recommended/boot.tgz",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/stats4/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/stats4/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/utils/inst/doc/Sweave.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/utils/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/utils/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-it.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-pt_BR.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-zh_CN.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-zh_TW.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/base/po/RGui-de.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/compiler/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ja/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en_GB/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/es/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/es/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/es/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fa/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fa/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pt_BR/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ru/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/tr/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/nn/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/nn/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/nn/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/nn/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/fr/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/de/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/da/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en@quot/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/en/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/it/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/pl/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_CN/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/zh_TW/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/RGui.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-base.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-compiler.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/grDevices.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/methods.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-utils.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/tcltk.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/stats.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-splines.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-stats4.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-parallel.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/R-tools.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/graphics.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/translations/inst/ko/LC_MESSAGES/grid.mo",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/methods/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/methods/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/methods/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/methods/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/datasets/data/UScitiesD.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/datasets/data/crimtab.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/datasets/data/npk.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/datasets/data/CO2.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/po/es.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/man/figures/mai.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/man/figures/mai.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/man/figures/pch.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/man/figures/oma.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/man/figures/pch.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/graphics/man/figures/oma.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/stats/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/stats/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/stats/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/stats/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/inst/afm/ArialMT-BoldItalic.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/inst/afm/ArialMT-Italic.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/inst/afm/ArialMT.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/inst/afm/ArialMT-Bold.afm",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/inst/icc/srgb.flate",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/grDevices/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tcltk/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tcltk/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tcltk/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tcltk/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tools/R/sysdata.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tools/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tools/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tools/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/tools/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/splines/po/ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/splines/po/R-ru.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/splines/po/fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/library/splines/po/R-fr.po",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/e_pow.S",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/installer/ChineseTraditional.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/installer/R.bmp",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/installer/ChineseSimplified.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/installer/Korean.isl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/gnuwin32/front-ends/R.ico",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/extra/tzone/zoneinfo.zip",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/src/extra/tre/tre-match-parallel.c",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/WinUnicode.dat",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/reg-plot.pdf.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/utf8-regex.R",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/arima.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/reg-plot-latin1.pdf.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/nanbug.rda",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/reg-tests-2.Rout.save",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tests/reg-tests-1a.R",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/share/dictionaries/en_stats.rds",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/share/java/getsp.class",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/tools/help2man.pl",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/NEWS.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/html/up.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/html/logosm.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/html/left.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/html/favicon.ico",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/html/right.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/html/logo.jpg",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/hist.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/QQ.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/fig11.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/ecdf.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/QQ.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/hist.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/fig11.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/ice.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/fig12.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/fig12.png",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/ice.pdf",
        "/tmp/vanessa/spack-stage/spack-stage-r-3.2.2-harpdr36cacqnt6vgsmpdihjxl6yzamg/spack-src/doc/manual/images/ecdf.pdf"
    ],
    "total_files": 4320
}